/**
  ******************************************************************************
  * @file           : uart_comm.c
  * @brief          : UART communication implementation
  *                   This file provides code for UART communication with Raspberry Pi
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "RPI_uart_comm.h"
#include "robot.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* UART handle */
extern UART_HandleTypeDef huart6;

/* Reception variables */
RxState rxState = WAITING_FOR_START;
uint8_t rxBuffer[MAX_BUFFER_SIZE];
uint8_t rxCmd = 0;
uint8_t rxLength = 0;
uint8_t rxIndex = 0;
uint8_t rxByte;

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

/**
 * @brief Initialize UART with interrupt capability
 */
void UART_Init(void) {
  /* USART6 GPIO Configuration
   * PG14 -> USART6_TX
   * PG9  -> USART6_RX
   */

  /* Enable clock for GPIOG */
  __HAL_RCC_GPIOG_CLK_ENABLE();
  /* Enable clock for USART6 */
  __HAL_RCC_USART6_CLK_ENABLE();

  /* Configure GPIO pins */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /* Configure UART */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;

  if (HAL_UART_Init(&huart6) != HAL_OK) {
    Error_Handler();
  }

  /* Enable UART global interrupt */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART6_IRQn);

  /* Enable UART receive interrupt */
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
}

/**
 * @brief Process received command
 */
void ProcessCommand(void) {
  switch (rxCmd) {
    case CMD_LINE_DETECTED:
      HandleLineDetection(rxBuffer);
      break;

    case CMD_GRID_POSITION:
      HandleGridPosition(rxBuffer);
      break;

    case CMD_COLOR_DETECTED:
      HandleColorDetection(rxBuffer);
      break;

    case CMD_STOP:
      /* Stop all robot movements */
      StopRobot();
      break;

    default:
      /* Unknown command */
      break;
  }
}

/**
 * @brief Send command to Raspberry Pi
 * @param cmd Command ID
 * @param data Data buffer
 * @param length Data length
 */
void SendCommand(uint8_t cmd, uint8_t *data, uint8_t length) {
  uint8_t txBuffer[MAX_BUFFER_SIZE + 4]; // Start + Cmd + Length + Data + End
  uint16_t txIndex = 0;

  /* Construct packet */
  txBuffer[txIndex++] = START_MARKER;
  txBuffer[txIndex++] = cmd;
  txBuffer[txIndex++] = length;

  /* Copy data */
  if (length > 0 && data != NULL) {
    for (uint8_t i = 0; i < length && txIndex < MAX_BUFFER_SIZE + 3; i++) {
      txBuffer[txIndex++] = data[i];
    }
  }

  /* Add end marker */
  txBuffer[txIndex++] = END_MARKER;

  /* Send packet */
  HAL_UART_Transmit(&huart6, txBuffer, txIndex, 100);
}

/**
 * @brief Start line following mode
 */
void StartLineFollowing(void) {
  uint8_t params[1] = {1}; // 1 = Start
  SendCommand(CMD_START_LINE_FOLLOWING, params, 1);
}

/**
 * @brief Start grid navigation mode
 * @param targetX Target X coordinate
 * @param targetY Target Y coordinate
 */
void StartGridNavigation(uint8_t targetX, uint8_t targetY) {
  uint8_t params[2] = {targetX, targetY};
  SendCommand(CMD_START_GRID_NAVIGATION, params, 2);
}

/**
 * @brief Start color detection mode
 */
void StartColorDetection(void) {
  uint8_t params[1] = {1}; // 1 = Start
  SendCommand(CMD_START_COLOR_DETECTION, params, 1);
}

/**
 * @brief Stop all processing on Raspberry Pi
 */
void StopProcessing(void) {
  SendCommand(CMD_STOP, NULL, 0);
}
