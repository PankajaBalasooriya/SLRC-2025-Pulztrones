#include "config.h"

//*** Robot state **********************************************//

volatile State RobotState = None;
//***************************************************************************//


const float ROBOT_RADIUS = 46.84;  // Adjust to your Robot specs - 46.5
const float DEG_PER_MM_DIFFERENCE = (180.0 / (2 * ROBOT_RADIUS * PI));
const float RADIANS_PER_DEGREE = 0.01745329251994329576923690768489;
const float DEGREES_PER_RADIAN = 57.295779513082320876798154814105;

const int BACK_WALL_TO_CENTER = 45;
// the position in the cell where the sensors are sampled.
const float SENSING_POSITION = 170.0;
// This is the size, in mm,  for each cell in the maze.
const float FULL_CELL = 180.0f;
const float HALF_CELL = FULL_CELL / 2.0;


//*** MOTION CONTROLLER CONSTANTS **********************************************//
const float LOOP_FREQUENCY = 133.333333333333333333333333333333;
const float LOOP_INTERVAL = 0.03;

//need to adjust kp and kd values for required velocity and acceleration values
const float FWD_KP = 0.005;// 0.045
const float FWD_KD = 0.1;// 0.5

const float ROT_KP = 0.017; //0.009
const float ROT_KD = 0.1;

// Dynamic performance constants
// There is a video describing how to get these numbers and calculate the feedforward
// constants here: https://youtu.be/BrabDeHGsa0
const float FWD_KM = 140;  // 45 mm/s/Volt
const float FWD_TM = 0.00050;  //0.00090 forward time constant 63%
const float ROT_KM = 0;  // deg/s/Volt
const float ROT_TM = 0;  // rotation time constant

const float SPEED_FF = (1.0 / FWD_KM);
const float ACC_FF = (FWD_TM / FWD_KM);
const float BIAS_FF = 0.0000340;

// forward motion controller constants
const float FWD_ZETA = 0.707;
const float FWD_TD = FWD_TM;

//const float FWD_KP = 16 * FWD_TM / (FWD_KM * FWD_ZETA * FWD_ZETA * FWD_TD * FWD_TD);
//const float FWD_KD = LOOP_FREQUENCY * (8 * FWD_TM - FWD_TD) / (FWD_KM * FWD_TD);

// rotation motion controller constants
const float ROT_ZETA = 0.707;
const float ROT_TD = ROT_TM;

//const float ROT_KP = 16 * ROT_TM / (ROT_KM * ROT_ZETA * ROT_ZETA * ROT_TD * ROT_TD);
//const float ROT_KD = LOOP_FREQUENCY * (8 * ROT_TM - ROT_TD) / (ROT_KM * ROT_TD);


// controller constants for the steering controller
const float STEERING_KP = 0.018;//0.018
const float STEERING_KD = 0.02;
const float STEERING_ADJUST_LIMIT = 0.6;  // deg/s

//***************************************************************************//


//***** PERFORMANCE CONSTANTS************************************************//
// search and run speeds in mm/s and mm
const int SEARCH_SPEED = 350;
const int SEARCH_ACCELERATION = 70;
const int SEARCH_TURN_SPEED = 300;
const int SMOOTH_TURN_SPEED = 500;
const int FAST_TURN_SPEED = 600;
const int FAST_RUN_SPEED_MAX = 2500;

const float FAST_RUN_ACCELERATION = 3000;

const int OMEGA_SPIN_TURN = 610;//500
const int ALPHA_SPIN_TURN = 295;//100



//***** SENSOR SCALING ******************************************************//
// This is the normalised value seen by the front sensor when the Robot is
// in its calibration position
const int SIDE_NOMINAL = 40;
const int FRONT_NOMINAL = 80;

// the values above which, a wall is seen
const int LEFT_THRESHOLD = 80;   // minimum value to register a wall
const int RIGHT_THRESHOLD = 80;  // minimum value to register a wall
const int FRONT_THRESHOLD = 100;  // minimum value to register a wall







