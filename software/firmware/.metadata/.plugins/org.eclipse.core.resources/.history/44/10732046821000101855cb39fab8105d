#ifndef CONFIG_H
#define CONFIG_H

#include <stdint.h>


//*** Robot state **********************************************//
typedef enum State
{
	None,
	Default,
    Search_Run,
	Fast_Run,
	Select_Run_Algorithm,
	IR_Debug,
	TOFs_Debug,
	Gyro_Debug,
	Encoders_Debug,
	Motors_Debug,
	Buzzer_debug,
	Search_Speed_Config,
	Fast_Speed_Config,
	Display_Config

} State;

//***************************************************************************//



#define PI 3.1415926535897932384626433832795
#define HALF_PI 1.5707963267948966192313216916398
#define TWO_PI 6.283185307179586476925286766559
#define DEG_TO_RAD 0.017453292519943295769236907684886
#define RAD_TO_DEG 57.295779513082320876798154814105

extern const float RADIANS_PER_DEGREE;
extern const float DEGREES_PER_RADIAN;

#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
//#define abs(x) ((x)>0?(x):-(x))
#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))
//#define round(x) ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))
#define radians(deg) ((deg)*DEG_TO_RAD)
#define degrees(rad) ((rad)*RAD_TO_DEG)
#define sq(x) ((x)*(x))

#define MM_PER_COUNT_LEFT 0.06163081426854253155620883258464  //0.06563081426854253155620883258464
#define MM_PER_COUNT_RIGHT 0.06163081426854253155620883258464 //0.06563081426854253155620883258464
// 0.07302884537456119301877072007349

extern const float ROBOT_RADIUS;
extern const float DEG_PER_MM_DIFFERENCE;

extern const int BACK_WALL_TO_CENTER;
// the position in the cell where the sensors are sampled.
extern const float SENSING_POSITION;
// This is the size, in mm,  for each cell in the maze.
extern const float FULL_CELL;
extern const float HALF_CELL;


//*** MOTION CONTROLLER CONSTANTS **********************************************//
#define TICK_INTERVAL 20  // 30 ms interval
extern const float LOOP_FREQUENCY;
extern const float LOOP_INTERVAL;

//// forward motion controller constants
//extern const float FWD_KP;
//extern const float FWD_KD;
//
//// rotation motion controller constants
//extern const float ROT_KP;
//extern const float ROT_KD;

extern const float FWD_KM;
extern const float FWD_TM;
extern const float ROT_KM;
extern const float ROT_TM;

extern const float SPEED_FF;
extern const float ACC_FF;
extern const float BIAS_FF;

// controller constants for the steering controller
extern const float STEERING_KP;
extern const float STEERING_KD;
extern const float STEERING_ADJUST_LIMIT;  // deg/s

// forward motion controller constants
extern const float FWD_ZETA;
extern const float FWD_TD;

extern const float FWD_KP;
extern const float FWD_KD;

// rotation motion controller constants
extern const float ROT_ZETA;
extern const float ROT_TD;

extern const float ROT_KP;
extern const float ROT_KD;

//***************************************************************************//

//***** PERFORMANCE CONSTANTS************************************************//

extern const int LINE_FOLLOW_SPEED;
extern const int LINE_FOLLOW_ACCELERATION;
extern const int SPIN_TURN_OMEGA;
extern const int SPIN_TURN_ALPHA;
extern const int FORWARD_SPEED_1;
extern const int FORWARD_ACCELERATION_1;



extern const int DISTACE_TO_CENTER_OF_CELL;



//***** Line sensor ******************************************************//
// Junction detection thresholds
#define LINE_THRESHOLD     400    // Adjust based on your sensor calibration
#define SENSORS_ON_LINE_FOR_JUNCTION_CHECK      5      // Minimum sensors needed to detect a Junction


// Junction types enum
typedef enum {
    NO_LINE = 0,       // No Line detected
	LEFT_JUNCTION = 1,       // Left junction detected
	RIGHT_JUNCTION = 2,      // Right junction detected
    T_JUNCTION = 3,           // T-junction detected
	STRAIGHT_LINE = 4
} JunctionType;

//typedef enum{
//	WHITE = 0,
//	GREEN = 1,
//	UNKNOWN = 2
//} LineColor;
//
//typedef enum{
//	WHITE_BALL = 0,
//	YELLOW_BALL = 1,
//	NO_BALL = 2
//}BallColor;


typedef enum{
	WHITE = 0,
	GREEN = 1,
	YELLOW = 2,
	BLUE = 3,
	RED = 4,
	UNKNOWN = 5
}Color;



extern const int MOTION_DELAY;


//***** Pump Controlling functions ******************************************************//

void turn_on_water_pump();
void turn_off_water_pump();
void turn_on_air_pump();
void turn_off_air_pump();


//****** Button Handler ***************************************************************************
extern volatile uint32_t okbtncount;
extern volatile uint32_t prevokbtncount;

extern volatile uint32_t nextbtncount;
extern volatile uint32_t prevnextbtncount;




#endif
