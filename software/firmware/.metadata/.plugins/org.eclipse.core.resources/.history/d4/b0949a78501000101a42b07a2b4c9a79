/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "encoders.h"
#include "motors.h"
#include "pca9685.h"
#include "math.h"
#include <string.h>
#include <stdio.h>
#include "servo.h"
#include "analog_mux.h"
#include "raykha.h"
#include "buzzer.h"
#include "vl53l0x_api.h"
#include "ssd1306.h"
#include "fonts.h"
#include "bitmap.h"
#include "uartcom.h"
#include "systick.h"
#include "motion.h"
#include "profile.h"
#include "controller.h"
#include "sensors.h"
#include "string.h"
#include "stdio.h"
#include "robot.h"
#include "tasks.h"
#include "ballstorage.h"
#include "RPI_uart_comm.h"
#include "arm_controller.h"
#include "PCA9548A.h"
#include "TCS3472.h"
#include "irs.h"




/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BUFFER_SIZE 50

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart6_rx;

/* USER CODE BEGIN PV */
volatile uint8_t systick_function_enabled = 0;

int16_t left_counts = 0;
int16_t right_counts = 0;

char uart_rx_buffer[BUFFER_SIZE];  // Buffer to store received data
volatile uint8_t data_received = 0;  // Flag to indicate new data received



RAYKHA_Calibration raykha_calibration;
uint8_t calibration_complete = 0;


 volatile uint8_t task_ready = 0;  // Global flag




/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
Motion motion;
Profile forward_profile;
Profile rotation_profile;
Controller controller;


i2c_mux_t mux = {
    .hi2c = &hi2c1,   // Assign I2C1 handle
    .rst_port = NULL,  // No reset pin used (set if needed)
    .rst_pin = 0,      // No reset pin used
    .addr_offset = 0   // Change if the address is modified by A0-A2 pins
};





// UART Transmit function (send string)
//void UART_Transmit(UART_HandleTypeDef *huart, char *data)
//{
//    // Transmit the string over UART
//    HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
//}
//
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//    if (huart->Instance == USART6)  // Check if it's UART6
//    {
//        data_received = 1;  // Set flag to indicate new data
//        HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Restart reception
//    }
//}



//-------------------------color sensor----------------


/* TCS3472 I2C Address */
#define TCS3472_ADDR                 (0x29 << 1)  // 7-bit address shifted left

/* TCS3472 Registers */
#define TCS3472_COMMAND_BIT          0x80
#define TCS3472_REG_ENABLE           0x00
#define TCS3472_REG_ATIME            0x01
#define TCS3472_REG_WTIME            0x03
#define TCS3472_REG_AILTL            0x04
#define TCS3472_REG_AILTH            0x05
#define TCS3472_REG_AIHTL            0x06
#define TCS3472_REG_AIHTH            0x07
#define TCS3472_REG_PERS             0x0C
#define TCS3472_REG_CONFIG           0x0D
#define TCS3472_REG_CONTROL          0x0F
#define TCS3472_REG_ID               0x12
#define TCS3472_REG_STATUS           0x13
#define TCS3472_REG_CDATAL           0x14
#define TCS3472_REG_CDATAH           0x15
#define TCS3472_REG_RDATAL           0x16
#define TCS3472_REG_RDATAH           0x17
#define TCS3472_REG_GDATAL           0x18
#define TCS3472_REG_GDATAH           0x19
#define TCS3472_REG_BDATAL           0x1A
#define TCS3472_REG_BDATAH           0x1B

/* TCS3472 Enable Register bits */
#define TCS3472_ENABLE_PON           0x01    // Power ON
#define TCS3472_ENABLE_AEN           0x02    // RGBC Enable
#define TCS3472_ENABLE_WEN           0x08    // Wait Enable
#define TCS3472_ENABLE_AIEN          0x10    // RGBC Interrupt Enable

/* Define the second sensor's mux channel and color definitions */
#define MUX_CHANNEL_LINE_SENSOR     1
#define MUX_CHANNEL_OBJECT_SENSOR   2

/* Additional Object Color Definitions */
#define COLOR_UNKNOWN               0
#define COLOR_BLACK                 1
#define COLOR_WHITE                 2
#define COLOR_GREEN                 3
#define COLOR_YELLOW_ORANGE         4
#define COLOR_RED                   5
#define COLOR_BLUE                  6



uint8_t TCS3472_Init(void);
uint8_t TCS3472_GetID(void);
void TCS3472_Enable(void);
void TCS3472_Disable(void);
void TCS3472_SetIntegrationTime(uint8_t time);
void TCS3472_SetGain(uint8_t gain);
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c);
uint8_t TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c);
void TCS3472_CalibrateColors(void);
void TCS3472_Write(uint8_t reg, uint8_t value);
uint8_t TCS3472_Read8(uint8_t reg);
uint16_t TCS3472_Read16(uint8_t reg);

uint8_t TCS3472_DetectObjectColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c);
void TCS3472_CalibrateObjectColors(void);


/* Color calibration thresholds */
/* Color calibration thresholds */
struct {
    uint16_t black_threshold;
    uint16_t white_threshold;
    uint16_t green_ratio_min;
    uint16_t green_ratio_max;
    uint8_t is_calibrated;
} color_config = {
    .black_threshold = 1000,  // Default value, should be calibrated
    .white_threshold = 5000,  // Default value, should be calibrated
    .green_ratio_min = 110,   // G/R ratio * 100, default value
    .green_ratio_max = 150,   // G/R ratio * 100, default value
    .is_calibrated = 0
};

/* Object color calibration thresholds */
struct {
    uint16_t white_min_c;

    /* Red color parameters */
    uint16_t red_min_ratio_r_to_g;  // (r/g)*100 ratio threshold
    uint16_t red_min_ratio_r_to_b;  // (r/b)*100 ratio threshold

    /* Blue color parameters */
    uint16_t blue_min_ratio_b_to_r;  // (b/r)*100 ratio threshold
    uint16_t blue_min_ratio_b_to_g;  // (b/g)*100 ratio threshold

    /* Yellow-Orange parameters */
    uint16_t yellow_min_ratio_r_to_b;  // (r/b)*100 ratio threshold
    uint16_t yellow_min_ratio_g_to_b;  // (g/b)*100 ratio threshold
    uint8_t yellow_r_g_diff_percent;   // How close r and g should be (as percentage)
} object_color_config = {
    .white_min_c = 5000,           // Minimum clear value for white

    .red_min_ratio_r_to_g = 150,   // R must be 1.5x greater than G
    .red_min_ratio_r_to_b = 150,   // R must be 1.5x greater than B

    .blue_min_ratio_b_to_r = 150,  // B must be 1.5x greater than R
    .blue_min_ratio_b_to_g = 120,  // B must be 1.2x greater than G

    .yellow_min_ratio_r_to_b = 150, // R must be 1.5x greater than B
    .yellow_min_ratio_g_to_b = 150, // G must be 1.5x greater than B
    .yellow_r_g_diff_percent = 80   // R and G must be within 20% of each other
};




/* TCS3472 Color Sensor Functions */


void TCS3472_SelectSensor(uint8_t channel) {
    i2c_mux_select(&mux, channel);
    HAL_Delay(2); // Small delay for mux to stabilize
}






/* Initialize TCS3472 sensor */
uint8_t TCS3472_Init(void)
{
    /* Check if sensor is responding */
    uint8_t id = TCS3472_GetID();
    if (id != 0x44 && id != 0x4D) {
        return HAL_ERROR;  // Sensor not detected
    }

    /* Power ON the device */
    TCS3472_Enable();

    /* Set integration time (1 = 2.4ms, 255 = 614.4ms) */
    TCS3472_SetIntegrationTime(0x00);  // Minimum integration time (2.4ms) for fast readings

    /* Set gain (0 = 1x, 1 = 4x, 2 = 16x, 3 = 60x) */
    TCS3472_SetGain(3);  // 60x gain for better contrast in color detection

    /* Wait for a moment for the sensor to stabilize */
    HAL_Delay(50);

    return HAL_OK;
}

/* Get device ID */
uint8_t TCS3472_GetID(void)
{
    return TCS3472_Read8(TCS3472_REG_ID);
}

/* Enable the device */
void TCS3472_Enable(void)
{
    /* Power ON */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON);
    HAL_Delay(3);  // Wait 2.4ms for power-up

    /* Enable RGBC sensor */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN);
}

/* Disable the device */
void TCS3472_Disable(void)
{
    /* Get current value */
    uint8_t val = TCS3472_Read8(TCS3472_REG_ENABLE);

    /* Turn off AEN and PON */
    TCS3472_Write(TCS3472_REG_ENABLE, val & ~(TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN));
}

/* Set integration time */
void TCS3472_SetIntegrationTime(uint8_t time)
{
    /* Write integration time to the register */
    TCS3472_Write(TCS3472_REG_ATIME, time);
}

/* Set gain */
void TCS3472_SetGain(uint8_t gain)
{
    /* Check if gain is valid (0-3) */
    if (gain > 3) gain = 3;

    /* Write gain to the register */
    TCS3472_Write(TCS3472_REG_CONTROL, gain);
}

/* Get RGB and Clear values */
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
    /* Wait for data to be valid */
    while (!(TCS3472_Read8(TCS3472_REG_STATUS) & 0x01));

    /* Read all values */
    *c = TCS3472_Read16(TCS3472_REG_CDATAL);
    *r = TCS3472_Read16(TCS3472_REG_RDATAL);
    *g = TCS3472_Read16(TCS3472_REG_GDATAL);
    *b = TCS3472_Read16(TCS3472_REG_BDATAL);
}

/* Detect line color based on RGB values */
uint8_t TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
    /* If overall brightness is very low, it's black (background) */
    if (c < color_config.black_threshold) {
        return COLOR_BLACK;
    }

    /* If overall brightness is high, check if it's white or green */
    if (c > color_config.white_threshold) {
        /* Calculate green-to-red ratio (multiplied by 100 to avoid floating point) */
        uint16_t g_to_r_ratio = 0;

        /* Avoid division by zero */
        if (r > 10) {
            g_to_r_ratio = (g * 100) / r;
        }

        /* If green is significantly higher than red, it's green */
        if (g_to_r_ratio >= color_config.green_ratio_min &&
            g_to_r_ratio <= color_config.green_ratio_max &&
            g > r && g > b) {
            return COLOR_GREEN;
        }

        /* If all colors are relatively balanced and bright, it's white */
        if (r > 500 && g > 500 && b > 500 &&
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
            return COLOR_WHITE;
        }
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
}

/* Calibration function - to be called during setup or when a button is pressed */
void TCS3472_CalibrateColors(void)
{
    char buffer[100];
    uint16_t r, g, b, c;
    uint16_t black_readings[5] = {0};
    uint16_t white_readings[5] = {0};
    uint16_t green_readings_r[5] = {0};
    uint16_t green_readings_g[5] = {0};

    /* Send calibration instructions */
    sprintf(buffer, "Starting calibration sequence...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* 1. Calibrate BLACK background */
    sprintf(buffer, "Place sensor over BLACK surface and press USER button (PA0)...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce

    /* Take 5 readings of black background */
    for (int i = 0; i < 5; i++) {
        TCS3472_GetRGBC(&r, &g, &b, &c);
        black_readings[i] = c;
        HAL_Delay(50);
    }

    /* Calculate average */
    uint32_t black_sum = 0;
    for (int i = 0; i < 5; i++) {
        black_sum += black_readings[i];
    }
    color_config.black_threshold = (black_sum / 5) * 1.5; // 50% margin

    sprintf(buffer, "BLACK calibrated: threshold = %d\r\n", color_config.black_threshold);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);

    /* 2. Calibrate WHITE line */
    sprintf(buffer, "Place sensor over WHITE line and press USER button (PA0)...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce

    /* Take 5 readings of white line */
    for (int i = 0; i < 5; i++) {
        TCS3472_GetRGBC(&r, &g, &b, &c);
        white_readings[i] = c;
        HAL_Delay(50);
    }

    /* Calculate average */
    uint32_t white_sum = 0;
    for (int i = 0; i < 5; i++) {
        white_sum += white_readings[i];
    }
    color_config.white_threshold = (white_sum / 5) * 0.8; // 20% margin

    sprintf(buffer, "WHITE calibrated: threshold = %d\r\n", color_config.white_threshold);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);

    /* 3. Calibrate GREEN line */
    sprintf(buffer, "Place sensor over GREEN line and press USER button (PA0)...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce

    /* Take 5 readings of green line */
    for (int i = 0; i < 5; i++) {
        TCS3472_GetRGBC(&r, &g, &b, &c);
        green_readings_r[i] = r;
        green_readings_g[i] = g;
        HAL_Delay(50);
    }

    /* Calculate average G/R ratio */
    uint32_t g_r_ratio_sum = 0;
    for (int i = 0; i < 5; i++) {
        if (green_readings_r[i] > 10) { // Avoid division by zero
            g_r_ratio_sum += (green_readings_g[i] * 100) / green_readings_r[i];
        }
    }
    uint16_t avg_g_r_ratio = g_r_ratio_sum / 5;

    /* Set min and max with 10% margin on each side */
    color_config.green_ratio_min = avg_g_r_ratio * 0.9;
    color_config.green_ratio_max = avg_g_r_ratio * 1.1;

    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
            color_config.green_ratio_min, color_config.green_ratio_max);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* Mark as calibrated */
    color_config.is_calibrated = 1;

    sprintf(buffer, "Calibration complete!\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);
}

/* Write a byte to the TCS3472 register */
void TCS3472_Write(uint8_t reg, uint8_t value)
{
    uint8_t data[2];
    data[0] = TCS3472_COMMAND_BIT | reg;
    data[1] = value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, data, 2, 100);
}

/* Read 8-bit value from TCS3472 register */
uint8_t TCS3472_Read8(uint8_t reg)
{
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
    uint8_t value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, &value, 1, 100);

    return value;
}

/* Read 16-bit value from TCS3472 register */
uint16_t TCS3472_Read16(uint8_t reg)
{
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, data, 2, 100);

    return (data[1] << 8) | data[0];
}

/* This function is called when a HAL error occurs */


/* Detect object color based on RGB values */
uint8_t TCS3472_DetectObjectColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c) {
    /* Avoid division by zero */
    if (r < 10) r = 10;
    if (g < 10) g = 10;
    if (b < 10) b = 10;

    /* Calculate ratios (multiplied by 100 to avoid floating point) */
    uint16_t r_to_g_ratio = (r * 100) / g;
    uint16_t r_to_b_ratio = (r * 100) / b;
    uint16_t g_to_b_ratio = (g * 100) / b;
    uint16_t b_to_r_ratio = (b * 100) / r;
    uint16_t b_to_g_ratio = (b * 100) / g;

    /* Calculate how close R and G are to each other as a percentage */
    uint16_t r_g_similarity;
    if (r > g) {
        r_g_similarity = (g * 100) / r;
    } else {
        r_g_similarity = (r * 100) / g;
    }

    /* For debugging - uncomment if needed */
    /*
    char debug[100];
    sprintf(debug, "Ratios: R/G=%d, R/B=%d, G/B=%d, B/R=%d, B/G=%d, RG_sim=%d\r\n",
            r_to_g_ratio, r_to_b_ratio, g_to_b_ratio, b_to_r_ratio, b_to_g_ratio, r_g_similarity);
    HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
    */

    /* White detection */
    if (c > object_color_config.white_min_c &&
        r > 1000 && g > 1000 && b > 1000 &&
        r_g_similarity > 80 && /* R and G within 20% of each other */
        (b * 100) / ((r + g) / 2) > 80) { /* B is at least 80% of average of R and G */
        return COLOR_WHITE;
    }

    /* Red detection */
    if (r_to_g_ratio > object_color_config.red_min_ratio_r_to_g &&
        r_to_b_ratio > object_color_config.red_min_ratio_r_to_b) {
        return COLOR_RED;
    }

    /* Blue detection */
    if (b_to_r_ratio > object_color_config.blue_min_ratio_b_to_r &&
        b_to_g_ratio > object_color_config.blue_min_ratio_b_to_g) {
        return COLOR_BLUE;
    }

    /* Yellow-Orange detection */
    if (r_to_b_ratio > object_color_config.yellow_min_ratio_r_to_b &&
        g_to_b_ratio > object_color_config.yellow_min_ratio_g_to_b &&
        r_g_similarity > object_color_config.yellow_r_g_diff_percent) {
        return COLOR_YELLOW_ORANGE;
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
}


/* Calibration function for object colors - simplified version */
void TCS3472_CalibrateObjectColors(void) {
    char buffer[100];
    uint16_t r, g, b, c;

    /* Send calibration instructions */
    sprintf(buffer, "Starting object color calibration sequence...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* 1. Calibrate WHITE object */
    sprintf(buffer, "Place sensor over WHITE object and wait 5 seconds...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(5000);

    /* Take reading of white object */
    TCS3472_GetRGBC(&r, &g, &b, &c);
    object_color_config.white_min_c = c * 0.8; // 20% margin

    sprintf(buffer, "WHITE calibrated: min_c = %d | R:%d G:%d B:%d C:%d\r\n",
            object_color_config.white_min_c, r, g, b, c);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);

    sprintf(buffer, "Object color calibration complete!\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);

    /* Note: Red and Blue calibration requires more complex processing
       and is purposely left out. We'll use predefined values instead. */
}

/* Initialize both TCS3472 color sensors */
uint8_t TCS3472_InitAll(void) {
    uint8_t status = HAL_OK;
    char msg[100];

    /* Initialize line sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
    if (TCS3472_Init() != HAL_OK) {
        sprintf(msg, "Line sensor (TCS3472) initialization failed!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        status = HAL_ERROR;
    } else {
        sprintf(msg, "Line sensor (TCS3472) initialized successfully!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }

    /* Initialize object sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
    if (TCS3472_Init() != HAL_OK) {
        sprintf(msg, "Object sensor (TCS3472) initialization failed!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        status = HAL_ERROR;
    } else {
        sprintf(msg, "Object sensor (TCS3472) initialized successfully!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }

    return status;
}


/* Main function for the project with both sensors */
void TCS3472_DualSensorExample(void) {
    /* Initialize both sensors */
    if (TCS3472_InitAll() != HAL_OK) {
        Error_Handler();
        return;
    }

    /* Run calibration routine for line sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
    TCS3472_CalibrateColors();

    /* Run simplified calibration for object sensor (just for white) */
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
    TCS3472_CalibrateObjectColors();

    uint16_t r_line, g_line, b_line, c_line;
    uint16_t r_obj, g_obj, b_obj, c_obj;
    uint8_t line_color, object_color;
    char buffer[100];

    while (1) {
        /* Get RGB and Clear values from line sensor */
        TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
        TCS3472_GetRGBC(&r_line, &g_line, &b_line, &c_line);
        line_color = TCS3472_DetectLineColor(r_line, g_line, b_line, c_line);

        /* Get RGB and Clear values from object sensor */
        TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
        TCS3472_GetRGBC(&r_obj, &g_obj, &b_obj, &c_obj);
        object_color = TCS3472_DetectObjectColor(r_obj, g_obj, b_obj, c_obj);

        /* Get line color string */
        char *line_color_str;
        switch(line_color) {
            case COLOR_BLACK:  line_color_str = "BLACK"; break;
            case COLOR_WHITE:  line_color_str = "WHITE"; break;
            case COLOR_GREEN:  line_color_str = "GREEN"; break;
            default:           line_color_str = "UNKNOWN"; break;
        }

        /* Get object color string */
        char *object_color_str;
        switch(object_color) {
            case COLOR_BLACK:          object_color_str = "BLACK"; break;
            case COLOR_WHITE:          object_color_str = "WHITE"; break;
            case COLOR_GREEN:          object_color_str = "GREEN"; break;
            case COLOR_YELLOW_ORANGE:  object_color_str = "YELLOW-ORANGE"; break;
            case COLOR_RED:            object_color_str = "RED"; break;
            case COLOR_BLUE:           object_color_str = "BLUE"; break;
            default:                   object_color_str = "UNKNOWN"; break;
        }

        /* Print the combined results */
        sprintf(buffer, "Line: %s (%d,%d,%d,%d) | Object: %s (%d,%d,%d,%d)\r\n",
                line_color_str, r_line, g_line, b_line, c_line,
                object_color_str, r_obj, g_obj, b_obj, c_obj);
        HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

        /* Wait before next reading */
        HAL_Delay(100);
    }
}




#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
    /* User can add his own implementation to report the file name and line number */
    printf("Wrong parameters value: file %s on line %d\r\n", file, line);
}
#endif /* USE_FULL_ASSERT */




//------------------------------------------------------






/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
//	uint32_t count = 0; // Initialize the counter
//	char buffer[50]; // Buffer to hold formatted string

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */



  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_I2C2_Init();
  MX_USART3_UART_Init();
  MX_USART6_UART_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);

  SSD1306_Init();
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
    SSD1306_UpdateScreen(); // update screen




	  Buzzer_UniquePattern();

  /*---------------------Delay--------------------------------*/
  Delay_Init();
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();
  // This is the uart for the bluetooth
  //UART_Init(&huart3);
  //RPI_UART_Init();

  /*---------------------Servo--------------------------------*/
  // Initialize servo system
  Servo_Init(50);  // 50Hz frequency for servos
  void init_ball_storage();

  // Initialize arm controller
  //Arm_Init();

  //Arm_MoveServo(ARM_BASE_SERVO, 100.0f);

  //Arm_MoveTo(180.0f, 5.0f, 90.0f, 100.0f);

  //Examples
  // Register servos (do this once)


 //int ball_storage = Servo_Register(14, "ball_storage", 0, 360.0,0);



// int base = Servo_Register(15, "base", 0, 180, 0 );
// int A = Servo_Register(11, "A", 0, 180, 0);
//int B = Servo_Register(3, "B", 0, 180, 0);
  int C = Servo_Register(8, "C", 0, 180, 0);
////
////
  HAL_Delay(2000);
////
////  // Later in your code, use the servos by ID
// Servo_SetAngle(base, 50);
//    Servo_SetAngle(A, 0);
//    Servo_SetAngle(B, 90);
    Servo_SetAngle(C, 90);


//  Servo_SetAngle(base, 0);
//  HAL_Delay(1000);

//  Servo_SetAngle(base, 140);
//  HAL_Delay(1000);
////  Servo_SetAngle(base, 180);
//  Servo_SetAngle(A, 0);
//  Servo_SetAngle(B, 40);
//  Servo_SetAngle(C, 120);
//  HAL_Delay(1000);
//  Servo_SetAngle(A, 60);
//  Servo_SetAngle(B, 90);
////  Servo_SetAngle(C, 40);
//  HAL_Delay(1000);
//  Servo_SetAngle(A, 70);

//  Servo_SetAngle(base, 25);
//  Servo_SetAngle(A, 70);
//  Servo_SetAngle(B, 90);
//  Servo_SetAngle(C, 35);

  //PCA9685_SetServoAngle(14, 100);

  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);

  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, 1);
////
//  HAL_Delay(3000);
//
//  Servo_SetAngle(A, 5);
//  Servo_SetAngle(C, 100);
//  HAL_Delay(1000);
//  Servo_SetAngle(base, 180);
//  Servo_SetAngle(A, 15);
//  HAL_Delay(200);
//  Servo_SetAngle(B, 70);
//  HAL_Delay(200);
//  Servo_SetAngle(C, 120);
//  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);

//  for (int i=0; i<20;i++){
//
//	  Servo_SetAngle(B, 90-i);
//	  HAL_Delay(200);
//	  Servo_SetAngle(C, 100+i);
//	  HAL_Delay(200);
//
//  }
//  Servo_SetAngle(A, 0);
//  HAL_Delay(1000);
//  Servo_SetAngle(B, 70);






  // Or use them by name
  //Servo_SetAngleByName("base", 90);  // Set base to 120 degrees

  HAL_Delay(1000);
  Controller_Init(&controller);
    Profile_Reset(&forward_profile);
    Profile_Reset(&rotation_profile);
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
    Controller_ResetControllers(&controller);

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

  HAL_Delay(2000);
  //RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
  HAL_Delay(200);
  Buzzer_Toggle(100);

  //set_steering_mode(STEERING_OFF_READLINE);
  //tcs3272_init();










  Buzzer_Toggle(100);
  HAL_Delay(6000);
  Buzzer_Toggle(100);

//  HAL_Delay(200);
//
//  EnableSysTickFunction();
//
//  runCurrentTask(TASK_PLANTATION);
//
//  Buzzer_Toggle(500);
//
//  runCurrentTask(TASK_SORTING_POTATOS);
//
//  Buzzer_TaskCompletion();

  //Robot_MoveForwardUntillLine();



  //Turn360Servo();

  ///////////////////////////////Chandupa & R_osh tests arm and ball store here/////////////////////////////////////////////

//store_ball(1, WHITE_BALL);
////
////
//store_ball(2, YELLOW_BALL);
////
//  store_ball(3, WHITE_BALL);
//
//  store_ball(4, YELLOW_BALL);
//
//  store_ball(5, WHITE_BALL);
//
//
//  retrieve_ball(YELLOW_BALL);

//////////////////////Lines for Oshadha's mechanism testing only
//  rotate_360_to_position(1);
//  HAL_Delay(1000);
//  rotate_360_to_position(3);
//  HAL_Delay(1000);
//  rotate_360_to_position(5);
//  HAL_Delay(1000);
//  rotate_360_to_position(2);
//  HAL_Delay(1000);
//  rotate_360_to_position(1);
//  HAL_Delay(1000);
//////////////////////Lines for Oshadha's mechanism testing only ends

//  pickup_and_Store();
////  retrive_and_drop();
//  return_home();

  ///////////////////////////////Chandupa & R_osh tests arm and ball store here ends/////////////////////////////////////////////


//  pickup_and_Store();
  //retrive_and_drop();
//  HAL_Delay(3000);
 // return_home();


  //Robot_TurnRight90Inplace();
  //Robot_TurnLeft90Inplace();

  //setMotorLPWM(1);
  //setMotorRPWM(1);

//  Motion_StartMove(&motion, 1500, 200, 0, 120);
//  HAL_Delay(1000);
//  //Motion_StopAt(&motion, 600);
//  Motion_StopAfter(&motion, 100);
  //Robot_LineFollowUntillJunction();
  	 // set_steering_mode(STEERING_OFF_READLINE);

  	//Motion_Move(&motion, 1000, 100, 0, 120);

  	//set_steering_mode(STEER_LEFT_WALL);
//Motion_SpinTurn(&motion, 90, 200.0, 20.0);
//  Motion_SpinTurn(&motion, -90, 200.0, 20.0);
//Motion_Move(&motion, 600, 200, 0, 200);


  //Motion_Move(&motion, 600, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
//set_steering_mode(STEERING_OFF);
  //Motion_SpinTurn(&motion, 90, 200.0, 20.0);


//-----workinf code
//  /* Initialize TCS3472 color sensor */
//  i2c_mux_select(&mux, 1);
//  HAL_Delay(2);
//
//
//      if (TCS3472_Init() != HAL_OK)
//      {
//          char msg[] = "TCS3472 initialization failed!\r\n";
//          HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//          Error_Handler();
//      }
//
//      char msg[] = "TCS3472 initialized successfully!\r\n";
//      HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//
//      /* Run calibration routine */
//
//      TCS3472_CalibrateColors();
//      //TCS3472_CalibrateColors();
//
//      uint16_t r, g, b, c;
//      uint8_t line_color;
//      char buffer[100];

//---------- new color code ----------------------

  TCS3472_DualSensorExample();

//---------- end of new color code ---------------




  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //analogReadIRs();


	  /* Get RGB and Clear values */
//	          TCS3472_GetRGBC(&r, &g, &b, &c);
//
//	          /* Detect the line color */
//	          line_color = TCS3472_DetectLineColor(r, g, b, c);
//
//	          /* Print the RGB values and detected color */
//	          char *color_str;
//	          switch(line_color) {
//	              case COLOR_BLACK:  color_str = "BLACK"; break;
//	              case COLOR_WHITE:  color_str = "WHITE"; break;
//	              case COLOR_GREEN:  color_str = "GREEN"; break;
//	              default:           color_str = "UNKNOWN"; break;
//	          }
//
//	          sprintf(buffer, "R: %5d, G: %5d, B: %5d, C: %5d | Line: %s\r\n",
//	                  r, g, b, c, color_str);
//	          HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
//
//	          /* Wait 100ms before next reading - reduced for faster response */
//	          HAL_Delay(100);



//	  if (task_ready){
//		  task_ready = 0;
//
//		HAL_Delay(200);
//
//	EnableSysTickFunction();
//
//		runCurrentTask(TASK_PLANTATION);
//
//		Buzzer_Toggle(500);
//
//		runCurrentTask(TASK_SORTING_POTATOS);
//
//		Buzzer_TaskCompletion();
//
//	  }


	  //left_counts = getLeftEncoderCounts();
	  //right_counts = getRightEncoderCounts();

	  //UART_Transmit_IR(&huart3, left_counts, right_counts);

	  // Format the message with the counter


//		  snprintf(buffer, sizeof(buffer), "Hello, Raspberry Pi, From STM32! Count: %lu\r\n", count++);
//
//		  // Transmit the formatted message
//		  UART_Transmit(&huart6, buffer);
//
//		  // Wait for 1 second
//		  HAL_Delay(50);

//	  Turn360Servo();
//	    HAL_Delay(780);
//	    Stop360Servo();
//	    HAL_Delay(1000);


//	  if (data_received)  // Check if new data is received
//	  {
//		  data_received = 0;  // Reset flag
//
//		  // Print received data back (optional, for debugging)
//		  HAL_UART_Transmit(&huart6, (uint8_t *)uart_rx_buffer, strlen(uart_rx_buffer), HAL_MAX_DELAY);
//	  }



	  //RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);

	     /* Get position for PID controller (centered around 0) */
	  //line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);


	  //ReadAllSensors();



	  //setMotorLPWM(1);
	  //setMotorRPWM(1);


//	  ProcessLineSensor();
//	      HAL_Delay(100);
//
//	      ProcessObjectSensor();
//	      HAL_Delay(100);
//
//	      /* Pause between readings */
//	      HAL_Delay(800);


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 7199;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 9600;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B1_Pin PC11 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
