/*
 * TCS3472.h
 *
 *  Created on: Apr 1, 2025
 *      Author: PANKAJA
 */

/**
 * @file tcs3472_color_sensor.h
 * @brief Header file for TCS3472 color sensor driver
 */

#ifndef TCS3472_INC_TCS3472_H_
#define TCS3472_INC_TCS3472_H_

#include "stm32f4xx_hal.h"
#include <stdint.h>
#include "PCA9548A.h"

extern i2c_mux_t mux;


/* TCS3472 I2C Address */
#define TCS3472_ADDR                 (0x29 << 1)  // 7-bit address shifted left


/* TCS3472 Registers */
#define TCS3472_COMMAND_BIT          0x80
#define TCS3472_REG_ENABLE           0x00
#define TCS3472_REG_ATIME            0x01
#define TCS3472_REG_WTIME            0x03
#define TCS3472_REG_AILTL            0x04
#define TCS3472_REG_AILTH            0x05
#define TCS3472_REG_AIHTL            0x06
#define TCS3472_REG_AIHTH            0x07
#define TCS3472_REG_PERS             0x0C
#define TCS3472_REG_CONFIG           0x0D
#define TCS3472_REG_CONTROL          0x0F
#define TCS3472_REG_ID               0x12
#define TCS3472_REG_STATUS           0x13
#define TCS3472_REG_CDATAL           0x14
#define TCS3472_REG_CDATAH           0x15
#define TCS3472_REG_RDATAL           0x16
#define TCS3472_REG_RDATAH           0x17
#define TCS3472_REG_GDATAL           0x18
#define TCS3472_REG_GDATAH           0x19
#define TCS3472_REG_BDATAL           0x1A
#define TCS3472_REG_BDATAH           0x1B

/* TCS3472 Enable Register bits */
#define TCS3472_ENABLE_PON           0x01    // Power ON
#define TCS3472_ENABLE_AEN           0x02    // RGBC Enable
#define TCS3472_ENABLE_WEN           0x08    // Wait Enable
#define TCS3472_ENABLE_AIEN          0x10    // RGBC Interrupt Enable

/* Color Definitions */
#define COLOR_UNKNOWN               0
#define COLOR_BLACK                 1
#define COLOR_WHITE                 2
#define COLOR_GREEN                 3
#define COLOR_YELLOW_ORANGE         4
#define COLOR_RED                   5
#define COLOR_BLUE                  6

/* MUX Channel Definitions */
#define MUX_CHANNEL_LINE_SENSOR     1
#define MUX_CHANNEL_OBJECT_SENSOR   2

/* Color calibration structure */
typedef struct {
    uint16_t black_threshold;
    uint16_t white_threshold;
    uint16_t green_ratio_min;
    uint16_t green_ratio_max;
    uint8_t is_calibrated;
} LineColorConfig;

/* Object color calibration structure */
typedef struct {
    uint16_t white_min_c;
    uint16_t red_min_ratio_r_to_g;
    uint16_t red_min_ratio_r_to_b;
    uint16_t blue_min_ratio_b_to_r;
    uint16_t blue_min_ratio_b_to_g;
    uint16_t yellow_min_ratio_r_to_b;
    uint16_t yellow_min_ratio_g_to_b;
    uint8_t yellow_r_g_diff_percent;
} ObjectColorConfig;


uint8_t TCS3472_Init(void);
uint8_t TCS3472_GetID(void);
void TCS3472_Enable(void);
void TCS3472_Disable(void);
void TCS3472_SetIntegrationTime(uint8_t time);
void TCS3472_SetGain(uint8_t gain);
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c);
uint8_t TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c);
void TCS3472_CalibrateColors(void);
void TCS3472_Write(uint8_t reg, uint8_t value);
uint8_t TCS3472_Read8(uint8_t reg);
uint16_t TCS3472_Read16(uint8_t reg);

uint8_t TCS3472_DetectObjectColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c);
void TCS3472_CalibrateObjectColors(void);


/* Color calibration thresholds */
/* Color calibration thresholds */
struct {
    uint16_t black_threshold;
    uint16_t white_threshold;
    uint16_t green_ratio_min;
    uint16_t green_ratio_max;
    uint8_t is_calibrated;
} color_config = {
    .black_threshold = 1000,  // Default value, should be calibrated
    .white_threshold = 5000,  // Default value, should be calibrated
    .green_ratio_min = 110,   // G/R ratio * 100, default value
    .green_ratio_max = 150,   // G/R ratio * 100, default value
    .is_calibrated = 0
};




#endif /* TCS3472_INC_TCS3472_H_ */
