/**
  ******************************************************************************
  * @file           : armcontroller.c
  * @brief          : Implementation of robot arm controller with smooth movement
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "arm_controller.h"
#include <math.h>

/* Private defines -----------------------------------------------------------*/
#define ARM_HOME_BASE_ANGLE   90.0f
#define ARM_HOME_LINK1_ANGLE  0.0f
#define ARM_HOME_LINK2_ANGLE  100.0f
#define ARM_HOME_LINK3_ANGLE  85.0f

/* Private variables ---------------------------------------------------------*/
static int initialized = 0;
static int servoIds[4] = {-1, -1, -1, -1}; // Store servo IDs for the 4 servos

/* Function Implementations --------------------------------------------------*/

/**
  * @brief  Initialize the robot arm controller
  * @retval int: 0 if successful, -1 if error
  */
int Arm_Init(void)
{
    // Check if already initialized
    if (initialized)
        return 0;

    // Register the four servos for the arm if they don't exist already
    if (servoIds[0] == -1) {
        servoIds[0] = Servo_Register(15, "Base", 0.0f, 180.0f, ARM_HOME_BASE_ANGLE);
    }

    if (servoIds[1] == -1) {
        servoIds[1] = Servo_Register(11, "Link1", 0.0f, 180.0f, ARM_HOME_LINK1_ANGLE);
    }

    if (servoIds[2] == -1) {
        servoIds[2] = Servo_Register(13, "Link2", 0.0f, 180.0f, ARM_HOME_LINK2_ANGLE);
    }

    if (servoIds[3] == -1) {
        servoIds[3] = Servo_Register(12, "Link3", 0.0f, 180.0f, ARM_HOME_LINK3_ANGLE);
    }

    // Check if all servos were registered successfully
    if (servoIds[0] < 0 || servoIds[1] < 0 || servoIds[2] < 0 || servoIds[3] < 0) {
        return -1;
    }

    initialized = 1;
    return 0;
}

/**
  * @brief  Move a servo to target position gradually
  * @param  servoId: ID of the servo to move
  * @param  targetAngle: Desired final angle in degrees
  * @param  stepSize: Movement step size in degrees per increment (smaller = smoother)
  * @param  stepDelay: Delay between steps in milliseconds (larger = slower)
  * @retval int: 0 if successful, -1 if error
  * @note   This function blocks until movement is complete
  */
int Arm_MoveServoGradually(int servoId, float targetAngle, float stepSize, uint16_t stepDelay)
{
    // Check if servo ID is valid
    if (servoId < 0) {
        return -1;
    }

    // Get current angle
    float currentAngle = Servo_GetAngle(servoId);
    if (currentAngle < 0.0f) { // Error
        return -1;
    }

    // If already at target position (or very close), no need to move
    if (fabsf(currentAngle - targetAngle) < stepSize) {
        return 0;
    }

    // Determine direction of movement
    float direction = (targetAngle > currentAngle) ? 1.0f : -1.0f;

    // Calculate number of steps needed
    int steps = (int)(fabsf(targetAngle - currentAngle) / stepSize);

    // Move in steps until target is reached
    for (int i = 0; i < steps; i++) {
        currentAngle += direction * stepSize;

        // Set new position
        if (Servo_SetAngle(servoId, currentAngle) != 0) {
            return -1;
        }

        // Delay between steps
        HAL_Delay(stepDelay);
    }

    // Final step to ensure we reach exactly the target angle
    if (Servo_SetAngle(servoId, targetAngle) != 0) {
        return -1;
    }

    return 0;
}

/**
  * @brief  Move a servo to target position gradually using default parameters
  * @param  servoId: ID of the servo to move
  * @param  targetAngle: Desired final angle in degrees
  * @retval int: 0 if successful, -1 if error
  * @note   This function blocks until movement is complete
  */
int Arm_MoveServo(int servoId, float targetAngle)
{
    return Arm_MoveServoGradually(servoId, targetAngle, ARM_DEFAULT_STEP, ARM_DEFAULT_DELAY);
}

/**
  * @brief  Move the entire arm to a new position gradually
  * @param  baseAngle: Target angle for base servo
  * @param  link1Angle: Target angle for link 1 servo
  * @param  link2Angle: Target angle for link 2 servo
  * @param  link3Angle: Target angle for link 3 servo
  * @param  stepSize: Movement step size in degrees per increment (smaller = smoother)
  * @param  stepDelay: Delay between steps in milliseconds (larger = slower)
  * @retval int: 0 if successful, -1 if error
  * @note   This function blocks until movement is complete
  */
int Arm_MoveToPosition(float baseAngle, float link1Angle, float link2Angle, float link3Angle,
                       float stepSize, uint16_t stepDelay)
{
    // Check if arm is initialized
    if (!initialized) {
        if (Arm_Init() != 0) {
            return -1;
        }
    }

    // Get current angles for all servos
    float currentBaseAngle = Servo_GetAngle(servoIds[0]);
    float currentLink1Angle = Servo_GetAngle(servoIds[1]);
    float currentLink2Angle = Servo_GetAngle(servoIds[2]);
    float currentLink3Angle = Servo_GetAngle(servoIds[3]);

    if (currentBaseAngle < 0.0f || currentLink1Angle < 0.0f ||
        currentLink2Angle < 0.0f || currentLink3Angle < 0.0f) {
        return -1; // Error getting angles
    }

    // Calculate movement vectors and max steps
    float baseDelta = baseAngle - currentBaseAngle;
    float link1Delta = link1Angle - currentLink1Angle;
    float link2Delta = link2Angle - currentLink2Angle;
    float link3Delta = link3Angle - currentLink3Angle;

    // Find maximum number of steps needed
    int maxSteps = (int)(fmaxf(fmaxf(fabsf(baseDelta), fabsf(link1Delta)),
                          fmaxf(fabsf(link2Delta), fabsf(link3Delta))) / stepSize);

    if (maxSteps > 0) {
        // Calculate increment per step for each servo
        float baseIncrement = baseDelta / maxSteps;
        float link1Increment = link1Delta / maxSteps;
        float link2Increment = link2Delta / maxSteps;
        float link3Increment = link3Delta / maxSteps;

        // Move all servos incrementally in parallel
        for (int step = 0; step < maxSteps; step++) {
            currentBaseAngle += baseIncrement;
            currentLink1Angle += link1Increment;
            currentLink2Angle += link2Increment;
            currentLink3Angle += link3Increment;

            // Set new positions
            Servo_SetAngle(servoIds[0], currentBaseAngle);
            Servo_SetAngle(servoIds[1], currentLink1Angle);
            Servo_SetAngle(servoIds[2], currentLink2Angle);
            Servo_SetAngle(servoIds[3], currentLink3Angle);

            // Delay between steps
            HAL_Delay(stepDelay);
        }
    }

    // Final step to ensure we reach exactly the target angles
    Servo_SetAngle(servoIds[0], baseAngle);
    Servo_SetAngle(servoIds[1], link1Angle);
    Servo_SetAngle(servoIds[2], link2Angle);
    Servo_SetAngle(servoIds[3], link3Angle);

    return 0;
}

/**
  * @brief  Move the entire arm to a new position gradually using default parameters
  * @param  baseAngle: Target angle for base servo
  * @param  link1Angle: Target angle for link 1 servo
  * @param  link2Angle: Target angle for link 2 servo
  * @param  link3Angle: Target angle for link 3 servo
  * @retval int: 0 if successful, -1 if error
  * @note   This function blocks until movement is complete
  */
int Arm_MoveTo(float baseAngle, float link1Angle, float link2Angle, float link3Angle)
{
    return Arm_MoveToPosition(baseAngle, link1Angle, link2Angle, link3Angle,
                              ARM_DEFAULT_STEP, ARM_DEFAULT_DELAY);
}

/**
  * @brief  Reset the arm to a home position gradually
  * @retval int: 0 if successful, -1 if error
  */
int Arm_Home(void)
{
    return Arm_MoveTo(ARM_HOME_BASE_ANGLE, ARM_HOME_LINK1_ANGLE,
                      ARM_HOME_LINK2_ANGLE, ARM_HOME_LINK3_ANGLE);
}

void pickup_and_Store(void){
	Arm_MoveServo(ARM_LINK2_SERVO,100);
	Arm_MoveServo(ARM_BASE_SERVO,6);
	Arm_MoveServo(ARM_LINK3_SERVO,35);
	Arm_MoveServo(ARM_LINK1_SERVO,55);
//	HAL_Delay(1000);
	Arm_MoveServo(ARM_LINK1_SERVO,70);
	Arm_MoveServo(ARM_LINK2_SERVO,94);
	turn_on_air_pump();
	HAL_Delay(3000);
	Arm_MoveServo(ARM_LINK1_SERVO,0);
	Arm_MoveServo(ARM_LINK3_SERVO,85);
	Arm_MoveServo(ARM_LINK2_SERVO,30);
//	turn_off_air_pump();
	Arm_MoveServo(ARM_BASE_SERVO,148);
	Arm_MoveServo(ARM_LINK3_SERVO,121);
	Arm_MoveServo(ARM_LINK2_SERVO,55);//45
	turn_off_air_pump();
	HAL_Delay(10000);



//	Arm_MoveServo(ARM_BASE_SERVO,10);
//	Arm_MoveServo(ARM_LINK1_SERVO,10);
//	Arm_MoveServo(ARM_LINK2_SERVO,10);
//	Arm_MoveServo(ARM_LINK3_SERVO,10);
}

void retrive_and_drop(void){
	Arm_MoveServo(ARM_LINK2_SERVO,30);
	HAL_Delay(2000);
	Arm_MoveServo(ARM_BASE_SERVO,148);
	HAL_Delay(2000);
	Arm_MoveServo(ARM_LINK3_SERVO,100);
//	Arm_MoveServo(ARM_LINK2_SERVO,40);
	HAL_Delay(2000);
	Arm_MoveServo(ARM_LINK2_SERVO,85);
	Arm_MoveServo(ARM_LINK1_SERVO,5);
	Arm_MoveServo(ARM_LINK2_SERVO,120);
	HAL_Delay(2000);
//	Arm_MoveServo(ARM_LINK1_SERVO,20);
	turn_on_air_pump();
	HAL_Delay(4000);
	Arm_MoveServo(ARM_LINK1_SERVO,0);
	Arm_MoveServo(ARM_LINK2_SERVO,80);
	Arm_MoveServo(ARM_LINK3_SERVO,105);
	Arm_MoveServo(ARM_LINK2_SERVO,75);
	Arm_MoveServo(ARM_LINK3_SERVO,110);
	Arm_MoveServo(ARM_LINK2_SERVO,50);

	Arm_MoveServo(ARM_BASE_SERVO,6);
	Arm_MoveServo(ARM_LINK2_SERVO,100);
	Arm_MoveServo(ARM_LINK3_SERVO,35);
	Arm_MoveServo(ARM_LINK1_SERVO,55);
//	HAL_Delay(1000);
//	Arm_MoveServo(ARM_LINK1_SERVO,70);
//	Arm_MoveServo(ARM_LINK2_SERVO,94);
	turn_off_air_pump();
	HAL_Delay(10000);

//	HAL_Delay(3000);
	Arm_MoveServo(ARM_LINK1_SERVO,0);
	Arm_MoveServo(ARM_LINK3_SERVO,85);
	Arm_MoveServo(ARM_LINK2_SERVO,30);


//	Arm_MoveServo(ARM_LINK3_SERVO,50);
	//Arm_MoveServo(ARM_LINK1_SERVO,5);
//	Arm_MoveServo(ARM_LINK2_SERVO,60);
//	Arm_MoveServo(ARM_LINK2_SERVO,80);
}




void return_home(void){
	Arm_MoveServo(ARM_BASE_SERVO,90);
	Arm_MoveServo(ARM_LINK1_SERVO,0);
	Arm_MoveServo(ARM_LINK3_SERVO,85);
//	Arm_MoveServo(ARM_LINK2_SERVO,60);
	HAL_Delay(500);
	Arm_MoveServo(ARM_LINK2_SERVO,100);
}

void turn_on_air_pump(void) {
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 0);
}

void turn_off_air_pump(void) {
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
}
