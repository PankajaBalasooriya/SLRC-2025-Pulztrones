#include "tasks.h"
#include "sensors.h"
#include "robot.h"
#include "buzzer.h"
#include "ballstorage.h"
#include "display.h"
#include "systick.h"
#include "arm_controller.h"




extern volatile SensorChannel lfs, lrs, fs, rfs, rrs;

// Initialize task status globally
extern volatile uint32_t okbtncount;
extern volatile uint32_t prevokbtncount;

extern volatile uint32_t nextbtncount;
extern volatile uint32_t prevnextbtncount;

// Function to update task status
volatile uint32_t delay_end_time = 0;

uint8_t ball_pos = 0;

extern volatile TaskType currentTask;

Color goodpotato = RED;


// Start a non-blocking delay (delay in milliseconds)
void NonBlockingDelay(uint32_t delay_ms)
{
    delay_end_time = HAL_GetTick() + delay_ms;  // Set the target time
}

// Check if the delay is complete
uint8_t IsDelayComplete(void)
{
    return (HAL_GetTick() >= delay_end_time);  // Return true if the current time has passed the target time
}


//---------Start 0f Plantation Task (Collect and identify potatoes)--------------------
Color Newlinecolor = WHITE;
Color Nextlinecolor = WHITE;
uint8_t prev_potato_row = 4;

Color linecolor = WHITE;

Color ballcolor;

int potato_row[5] = {-1, -1, -1, -1, -1};

void executePlantationTask(void) {
	//StartLineColorDetection();
	Buzzer_Toggle(100);
	HAL_Delay(2000);
	Buzzer_Toggle(300);
	Robot_MoveForwardUntillLine();
	Robot_TurnLeft90Inplace();
	moveToCenterofNextCell();

	//Start the task
	for(uint8_t row = 0; row < 3; row ++){
		for(uint8_t column = 0; column < 5; column ++){


			if(potato_row[column] == -1){
				linecolor = GetLineColor(column, row);

				if(linecolor == GREEN){
					potato_row[column] = row;

					//Dummy function
					ballcolor = picktheBall(column, row);

					//Todo: store the ball based on color
				}
			}
			if(column != 4){
				moveToCenterofNextCell();
			}
			else{
				Robot_MoveReverseGivenDistance(65);
				robot_TurnRight180Inplace();

				if(row == 2){
					Robot_LineFollowUntillJunction();
					Robot_TurnRight90Inplace();
					moveToCenterofNextColumnfromSecondRow();
					break;
				}
				moveTocolumn0Fromcolumn4();
			}
		}
	}

	Robot_LineFollowUntillJunctionAndNotStop();
	Robot_MoveForwardGivenDistance(145);
	Robot_TurnRight90Inplace();
}


void moveTocolumn0Fromcolumn4(){
	moveToCenterofNextCellandNotStop();
	moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();

	//Robot_LineFollowUntillJunction();
	//moveToCenterofNextCell();
	Robot_LineFollowUntillJunctionAndNotStop();
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL - 35);


	Robot_TurnLeft90Inplace();
	//Robot_LineFollowUntillJunction();
	Robot_MoveForwardUntillLine();
	Robot_TurnLeft90Inplace();
	//Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
	moveToCenterofNextCell();

}

void moveToCenterofNextCell(){
	Robot_LineFollowUntillJunctionAndNotStop();
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
}

void moveToCenterofNextCellandNotStop(){
	Robot_LineFollowUntillJunctionAndNotStop();
	Robot_FollowLineGivenDistanceandNotStop(DISTACE_TO_CENTER_OF_CELL);
}

void moveToCenterofCellinZeroRow(){
	Robot_LineFollowUntillJunction();
	Robot_TurnRight90Inplace();
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
	HAL_Delay(MOTION_DELAY);
}

void moveToCenterofNextColumnfromFirstRow(){
	moveToCenterofCellinZeroRow();
}

void moveToCenterofNextColumnfromSecondRow(){
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromFirstRow();
}

void moveToCenterofNextColumnfromThiredRow(){
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromSecondRow();
}

Color picktheBall(uint8_t column, uint8_t row){


	Robot_TurnRight90Inplace();




//	//ToDo: Get ball color
//	ballcolor = GetBallColor(column, row);

	pickup_and_Store();

	//ToDo: Pick The ball

	//retrive_and_drop();


	Buzzer_Toggle(100);

	Robot_TurnLeft90Inplace();



	//Robot_TurnLeft90Inplace();

	return ballcolor;
}


//---------end 0f Plantation Task (Collect and identify potatoes)---------------------


//================================================================================================

//---------Start 0f Muddy Road Task (Navigate through random walls)--------------------
void executeMuddyRoadTask(void){

//	Robot_LineFollowUntillJunctionAndNotStop();
//	Robot_MoveForwardGivenDistance(145);
//	Robot_TurnRight90Inplace();


	float distance_traveled = Robot_moveForwardUntillFrontWall();

	float remaining_distance = 550 - distance_traveled;

	Robot_adjust_using_front_wall();

	Robot_MoveReverseGivenDistance(50);

	Robot_TurnLeft90Inplace();

	Robot_MoveForwardGivenDistance(190);

	Robot_TurnRightInplace(45);

	Robot_MoveForwardGivenDistance(205);

	Robot_TurnRightInplace(45);

	Robot_MoveForwardGivenDistance(remaining_distance);

	Robot_TurnRightInplace(45);//55

	Robot_MoveForwardGivenDistance(152);//130

	Robot_TurnRightInplace(132);//122



}

//---------end 0f Muddy Road Task (Collect and identify potatoes)---------------------

//================================================================================================





void executeRampTask(void){
	Robot_MoveReverseGivenDistanceSLOW(675);
	Robot_TurnRightInplace(183);

	Robot_MoveForwardGivenDistanceSLOW(590); // 490

	Buzzer_Toggle(100);




//	Robot_TurnRight90Inplace();
//
//	Robot_moveForwardUntillFrontWall();
	//Robot_MoveForwardGivenDistanceFAST(100);
	//Robot_MoveForwardGivenDistanceFAST(325);


}


void navigateToQR(){
//	Robot_TurnRight90Inplace();

		Robot_moveForwardUntillFrontWall();

		Robot_adjust_using_front_wall();

		Robot_MoveReverseGivenDistance(100);

		Robot_TurnRight90Inplace();

//		Buzzer_Toggle(100);
//
		Robot_MoveForwardGivenDistance(350);

		Robot_TurnRightInplace(45);

		Robot_MoveForwardGivenDistance(60);

		Robot_TurnLeftInplace(45);

		Robot_moveForwardUntillFrontWall();

		Robot_adjust_using_front_wall();

		////
		Robot_MoveReverseGivenDistance(50);

		Robot_TurnRight90Inplace();

		Robot_MoveReverseGivenDistance(70);


}


//Robot_read_Barcode();

void executeQR(){

	Robot_MoveForwardUntillLine();

	Robot_MoveForwardGivenDistance(450);

	Robot_TurnLeft90Inplace();

	Robot_MoveReverseGivenDistance(50);

	//read
	uint8_t num = Robot_read_Barcode();

	display_big_number(num);

	if(num == 0){
		goodpotato = BLUE;
	}
	else if(num == 1){
		goodpotato = RED;
	}
}



void executeCollectionPointTask(void){
	Robot_MoveForwardUntillLine();
	Robot_TurnLeft90Inplace();
	Robot_LineFollowUntillJunction();
	Robot_MoveReverseGivenDistance(50);
	robot_TurnRight180Inplace();
	Robot_FollowLineGivenDistance(243);
	Robot_TurnLeft90Inplace();
	Robot_MoveReverseGivenDistance(150);
	Robot_TurnLeft90Inplace();

	Robot_MoveReverseGivenDistance(185);

	if(goodpotato == BLUE){
		drop_good_potatos();
	}
	else{
		drop_bad_potatos();
	}

	Robot_MoveForwardGivenDistance(40);

	Robot_TurnLeft90Inplace();

	Robot_MoveForwardGivenDistance(600);

	Robot_TurnRight90Inplace();

	Robot_MoveReverseGivenDistance(60);

	if(goodpotato == RED){
		drop_good_potatos();
	}
	else{
		drop_bad_potatos();
	}


}


// -----------------------------Task manager function---------------------------------
void selectTask(){
	display_clear();
	display_headding("Tasks");

	while(1){
		if(prevnextbtncount != nextbtncount){
			display_big_number(nextbtncount);
			switch(nextbtncount){
			case 1:
				display_message("                 ", 12, 45);
				display_message("Plantation Task", 12, 45);
				currentTask = TASK_PLANTATION;
				break;
			case 2:
				display_message("                 ", 12, 45);
				display_message("Muddy Road", 12, 45);
				currentTask = TASK_MUDDY_ROAD;
				break;
			case 3:
				display_message("                 ", 12, 45);
				display_message("Ramp", 12, 45);
				currentTask = TASK_RAMP;
				break;
			case 4:
				display_message("                 ", 12, 45);
				display_message("NAV QR", 12, 45);
				currentTask = NAVIGATE_T0_QR;
				break;
			case 5:
				display_message("                 ", 12, 45);
				display_message("Read QR", 12, 45);
				currentTask = TASK_QR;
				break;
			case 6:
				display_message("                 ", 12, 45);
				display_message("Collection Point", 12, 45);
				currentTask = TASK_COLLECTION_POINT;
				break;
			default:
				break;
			}
			prevnextbtncount = nextbtncount;
		}
		if(prevokbtncount != okbtncount){
			prevokbtncount = okbtncount;
			break;
		}
	}
	display_headding("Start Task");
	while(okbtncount == prevokbtncount);
	Reset_buttons();
	runCurrentTask();
}



void runCurrentTask() {
	EnableSysTickFunction();

    switch (currentTask) {
        case TASK_PLANTATION:
            executePlantationTask();
            currentTask = TASK_MUDDY_ROAD;
            break;
        case TASK_MUDDY_ROAD:
        	executeMuddyRoadTask();
		    currentTask = TASK_RAMP;
		    break;
        case TASK_RAMP:
        	executeRampTask();
        	currentTask = NAVIGATE_T0_QR;
        	break;
        case NAVIGATE_T0_QR:
        	navigateToQR();
        	currentTask = TASK_QR;
        	break;
        case TASK_QR:
        	executeQR();
        	currentTask = TASK_COLLECTION_POINT;
        	break;
        case TASK_COLLECTION_POINT:
        	executeCollectionPointTask();
        	currentTask = TASK_NONE;
        default:
            break;
    }

    // Print final status after execution

}
