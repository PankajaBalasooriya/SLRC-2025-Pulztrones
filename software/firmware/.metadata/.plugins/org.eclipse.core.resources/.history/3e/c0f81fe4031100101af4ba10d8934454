/**
 * @file tcs3472.c
 * @brief TCS3472 Color Sensor Driver Implementation
 */

#include <string.h>
#include <stdio.h>
#include "TCS3472.h"
#include "display.h"
#include "buzzer.h"


uint16_t r_line, g_line, b_line, c_line;
uint16_t r_obj, g_obj, b_obj, c_obj;
Color line_color, object_color;

/* Color calibration thresholds */
color_config_t color_config = {
    .black_threshold = 1000,  // Default value, should be calibrated
    .white_threshold = 5000,  // Default value, should be calibrated
    .green_ratio_min = 110,   // G/R ratio * 100, default value
    .green_ratio_max = 150,   // G/R ratio * 100, default value
    .is_calibrated = 0
};

/* Object color calibration thresholds */
object_color_config_t object_color_config = {
    .white_min_c = 5000,           // Minimum clear value for white

    .red_min_ratio_r_to_g = 150,   // R must be 1.5x greater than G
    .red_min_ratio_r_to_b = 150,   // R must be 1.5x greater than B

    .blue_min_ratio_b_to_r = 150,  // B must be 1.5x greater than R
    .blue_min_ratio_b_to_g = 120,  // B must be 1.2x greater than G

    .yellow_min_ratio_r_to_b = 150, // R must be 1.5x greater than B
    .yellow_min_ratio_g_to_b = 150, // G must be 1.5x greater than B
    .yellow_r_g_diff_percent = 80   // R and G must be within 20% of each other
};


void TCS3472_SelectSensor(uint8_t channel) {
    i2c_mux_select(&mux, channel);
    HAL_Delay(2); // Small delay for mux to stabilize
}






/* Initialize TCS3472 sensor */
uint8_t TCS3472_Init(void)
{
    /* Check if sensor is responding */
    uint8_t id = TCS3472_GetID();
    if (id != 0x44 && id != 0x4D) {
        return HAL_ERROR;  // Sensor not detected
    }

    /* Power ON the device */
    TCS3472_Enable();

    /* Set integration time (1 = 2.4ms, 255 = 614.4ms) */
    TCS3472_SetIntegrationTime(0x00);  // Minimum integration time (2.4ms) for fast readings

    /* Set gain (0 = 1x, 1 = 4x, 2 = 16x, 3 = 60x) */
    TCS3472_SetGain(3);  // 60x gain for better contrast in color detection

    /* Wait for a moment for the sensor to stabilize */
    HAL_Delay(50);

    return HAL_OK;
}

/* Get device ID */
uint8_t TCS3472_GetID(void)
{
    return TCS3472_Read8(TCS3472_REG_ID);
}

/* Enable the device */
void TCS3472_Enable(void)
{
    /* Power ON */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON);
    HAL_Delay(3);  // Wait 2.4ms for power-up

    /* Enable RGBC sensor */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN);
}

/* Disable the device */
void TCS3472_Disable(void)
{
    /* Get current value */
    uint8_t val = TCS3472_Read8(TCS3472_REG_ENABLE);

    /* Turn off AEN and PON */
    TCS3472_Write(TCS3472_REG_ENABLE, val & ~(TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN));
}

/* Set integration time */
void TCS3472_SetIntegrationTime(uint8_t time)
{
    /* Write integration time to the register */
    TCS3472_Write(TCS3472_REG_ATIME, time);
}

/* Set gain */
void TCS3472_SetGain(uint8_t gain)
{
    /* Check if gain is valid (0-3) */
    if (gain > 3) gain = 3;

    /* Write gain to the register */
    TCS3472_Write(TCS3472_REG_CONTROL, gain);
}

/* Get RGB and Clear values */
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
    /* Wait for data to be valid */
    while (!(TCS3472_Read8(TCS3472_REG_STATUS) & 0x01));

    /* Read all values */
    *c = TCS3472_Read16(TCS3472_REG_CDATAL);
    *r = TCS3472_Read16(TCS3472_REG_RDATAL);
    *g = TCS3472_Read16(TCS3472_REG_GDATAL);
    *b = TCS3472_Read16(TCS3472_REG_BDATAL);
}

/* Detect line color based on RGB values */
Color TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
    /* If overall brightness is very low, it's black (background) */
    if (c < color_config.black_threshold) {
        return BLACK;
    }

    /* If overall brightness is high, check if it's white or green */
    if (c > color_config.white_threshold) {
        /* Calculate green-to-red ratio (multiplied by 100 to avoid floating point) */
        uint16_t g_to_r_ratio = 0;

        /* Avoid division by zero */
        if (r > 10) {
            g_to_r_ratio = (g * 100) / r;
        }

        /* If green is significantly higher than red, it's green */
        if (g_to_r_ratio >= color_config.green_ratio_min &&
            g_to_r_ratio <= color_config.green_ratio_max &&
            g > r && g > b) {
            return GREEN;
        }

        /* If all colors are relatively balanced and bright, it's white */
        if (r > 500 && g > 500 && b > 500 &&
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
            return WHITE;
        }
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
}

/* Calibration function - to be called during setup or when a button is pressed */
void TCS3472_CalibrateColors(void)
{
    char buffer[100];
    uint16_t r, g, b, c;
    uint16_t black_readings[5] = {0};
    uint16_t white_readings[5] = {0};
    uint16_t green_readings_r[5] = {0};
    uint16_t green_readings_g[5] = {0};

    /* Send calibration instructions */
//    sprintf(buffer, "Starting calibration sequence...\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_clear();
	display_headding("Calibration");
	display_message("Line Color sensor", 2, 25);


    /* 1. Calibrate BLACK background */
//    sprintf(buffer, "Place sensor over BLACK surface and press USER button (PA0)...\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_message("Black", 2, 40);
    display_message("Press OK to Start", 2, 52);
    while(okbtncount == prevokbtncount);
	Reset_buttons();

	display_clear();
	display_headding("Calibration");
	display_message("Line Color sensor", 2, 25);
	display_message("Black", 2, 40);
	display_message("Calibrating...", 2, 52);
	HAL_Delay(2000);


    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(2000); // Debounce

    /* Take 5 readings of black background */
    for (int i = 0; i < 5; i++) {
        TCS3472_GetRGBC(&r, &g, &b, &c);
        black_readings[i] = c;
        HAL_Delay(50);
    }

    /* Calculate average */
    uint32_t black_sum = 0;
    for (int i = 0; i < 5; i++) {
        black_sum += black_readings[i];
    }
    color_config.black_threshold = (black_sum / 5) * 1.5; // 50% margin

//    sprintf(buffer, "BLACK calibrated: threshold = %d\r\n", color_config.black_threshold);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_clear();
	display_headding("Calibration");
	display_message("Line Color sensor", 2, 25);
	display_message("Black", 2, 40);
	display_message("Calibrated.", 2, 52);
    HAL_Delay(2000);

    /* 2. Calibrate WHITE line */
//    sprintf(buffer, "Place sensor over WHITE line and press USER button (PA0)...\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    display_clear();
	display_headding("Calibration");
	display_message("Line Color sensor", 2, 25);
	display_message("White", 2, 40);
	display_message("Press OK to Start", 2, 52);
	while(okbtncount == prevokbtncount);
	Reset_buttons();

	display_clear();
	display_headding("Calibration");
	display_message("Line Color sensor", 2, 25);
	display_message("White", 2, 40);
	display_message("Calibrating...", 2, 52);
	HAL_Delay(1000);

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    //HAL_Delay(2000); // Debounce

    /* Take 5 readings of white line */
    for (int i = 0; i < 5; i++) {
        TCS3472_GetRGBC(&r, &g, &b, &c);
        white_readings[i] = c;
        HAL_Delay(50);
    }

    /* Calculate average */
    uint32_t white_sum = 0;
    for (int i = 0; i < 5; i++) {
        white_sum += white_readings[i];
    }
    color_config.white_threshold = (white_sum / 5) * 0.8; // 20% margin

    sprintf(buffer, "WHITE calibrated: threshold = %d\r\n", color_config.white_threshold);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);

    /* 3. Calibrate GREEN line */
    sprintf(buffer, "Place sensor over GREEN line and press USER button (PA0)...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce

    /* Take 5 readings of green line */
    for (int i = 0; i < 5; i++) {
        TCS3472_GetRGBC(&r, &g, &b, &c);
        green_readings_r[i] = r;
        green_readings_g[i] = g;
        HAL_Delay(50);
    }

    /* Calculate average G/R ratio */
    uint32_t g_r_ratio_sum = 0;
    for (int i = 0; i < 5; i++) {
        if (green_readings_r[i] > 10) { // Avoid division by zero
            g_r_ratio_sum += (green_readings_g[i] * 100) / green_readings_r[i];
        }
    }
    uint16_t avg_g_r_ratio = g_r_ratio_sum / 5;

    /* Set min and max with 10% margin on each side */
    color_config.green_ratio_min = avg_g_r_ratio * 0.9;
    color_config.green_ratio_max = avg_g_r_ratio * 1.1;

    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
            color_config.green_ratio_min, color_config.green_ratio_max);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* Mark as calibrated */
    color_config.is_calibrated = 1;

    sprintf(buffer, "Calibration complete!\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);
}

/* Write a byte to the TCS3472 register */
void TCS3472_Write(uint8_t reg, uint8_t value)
{
    uint8_t data[2];
    data[0] = TCS3472_COMMAND_BIT | reg;
    data[1] = value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, data, 2, 100);
}

/* Read 8-bit value from TCS3472 register */
uint8_t TCS3472_Read8(uint8_t reg)
{
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
    uint8_t value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, &value, 1, 100);

    return value;
}

/* Read 16-bit value from TCS3472 register */
uint16_t TCS3472_Read16(uint8_t reg)
{
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, data, 2, 100);

    return (data[1] << 8) | data[0];
}

/* This function is called when a HAL error occurs */


/* Detect object color based on RGB values */
Color TCS3472_DetectObjectColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c) {
    /* Avoid division by zero */
    if (r < 10) r = 10;
    if (g < 10) g = 10;
    if (b < 10) b = 10;

    /* Calculate ratios (multiplied by 100 to avoid floating point) */
    uint16_t r_to_g_ratio = (r * 100) / g;
    uint16_t r_to_b_ratio = (r * 100) / b;
    uint16_t g_to_b_ratio = (g * 100) / b;
    uint16_t b_to_r_ratio = (b * 100) / r;
    uint16_t b_to_g_ratio = (b * 100) / g;

    /* Calculate how close R and G are to each other as a percentage */
    uint16_t r_g_similarity;
    if (r > g) {
        r_g_similarity = (g * 100) / r;
    } else {
        r_g_similarity = (r * 100) / g;
    }

    /* For debugging - uncomment if needed */
    /*
    char debug[100];
    sprintf(debug, "Ratios: R/G=%d, R/B=%d, G/B=%d, B/R=%d, B/G=%d, RG_sim=%d\r\n",
            r_to_g_ratio, r_to_b_ratio, g_to_b_ratio, b_to_r_ratio, b_to_g_ratio, r_g_similarity);
    HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
    */

    /* White detection */
    if (c > object_color_config.white_min_c &&
        r > 1000 && g > 1000 && b > 1000 &&
        r_g_similarity > 80 && /* R and G within 20% of each other */
        (b * 100) / ((r + g) / 2) > 80) { /* B is at least 80% of average of R and G */
        return WHITE;
    }

    /* Red detection */
    if (r_to_g_ratio > object_color_config.red_min_ratio_r_to_g &&
        r_to_b_ratio > object_color_config.red_min_ratio_r_to_b) {
        return RED;
    }

    /* Blue detection */
    if (b_to_r_ratio > object_color_config.blue_min_ratio_b_to_r &&
        b_to_g_ratio > object_color_config.blue_min_ratio_b_to_g) {
        return BLUE;
    }

    /* Yellow-Orange detection */
    if (r_to_b_ratio > object_color_config.yellow_min_ratio_r_to_b &&
        g_to_b_ratio > object_color_config.yellow_min_ratio_g_to_b &&
        r_g_similarity > object_color_config.yellow_r_g_diff_percent) {
        return YELLOW;
    }

    /* If we can't identify the color */
    return UNKNOWN;
}


/* Calibration function for object colors - simplified version */
void TCS3472_CalibrateObjectColors(void) {
    char buffer[100];
    uint16_t r, g, b, c;

    /* Send calibration instructions */
    sprintf(buffer, "Starting object color calibration sequence...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    /* 1. Calibrate WHITE object */
    sprintf(buffer, "Place sensor over WHITE object and wait 5 seconds...\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(5000);

    /* Take reading of white object */
    TCS3472_GetRGBC(&r, &g, &b, &c);
    object_color_config.white_min_c = c * 0.8; // 20% margin

    sprintf(buffer, "WHITE calibrated: min_c = %d | R:%d G:%d B:%d C:%d\r\n",
            object_color_config.white_min_c, r, g, b, c);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);

    sprintf(buffer, "Object color calibration complete!\r\n");
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(1000);

    /* Note: Red and Blue calibration requires more complex processing
       and is purposely left out. We'll use predefined values instead. */
}

/* Initialize both TCS3472 color sensors */
uint8_t TCS3472_InitAll(void) {
    uint8_t status = HAL_OK;
    char msg[100];

    /* Initialize line sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
    if (TCS3472_Init() != HAL_OK) {
        sprintf(msg, "Line sensor (TCS3472) initialization failed!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        status = HAL_ERROR;
    } else {
        sprintf(msg, "Line sensor (TCS3472) initialized successfully!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }

    /* Initialize object sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
    if (TCS3472_Init() != HAL_OK) {
        sprintf(msg, "Object sensor (TCS3472) initialization failed!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        status = HAL_ERROR;
    } else {
        sprintf(msg, "Object sensor (TCS3472) initialized successfully!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }

    return status;
}


void init_color_sensors(){
	if (TCS3472_InitAll() != HAL_OK) {
		Error_Handler();
	}
}


void caliberate_color_sensors(){
	/* Run calibration routine for line sensor */
	TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
	TCS3472_CalibrateColors();

	/* Run simplified calibration for object sensor (just for white) */
	TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
	TCS3472_CalibrateObjectColors();
}


/* Main function for the project with both sensors */
void TCS3472_DualSensorExample(void) {
    /* Initialize both sensors */
    if (TCS3472_InitAll() != HAL_OK) {
        Error_Handler();
        return;
    }

    /* Run calibration routine for line sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
    TCS3472_CalibrateColors();

    /* Run simplified calibration for object sensor (just for white) */
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
    TCS3472_CalibrateObjectColors();


    char buffer[100];

    while (1) {
        /* Get RGB and Clear values from line sensor */
        TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
        TCS3472_GetRGBC(&r_line, &g_line, &b_line, &c_line);
        line_color = TCS3472_DetectLineColor(r_line, g_line, b_line, c_line);

        /* Get RGB and Clear values from object sensor */
        TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
        TCS3472_GetRGBC(&r_obj, &g_obj, &b_obj, &c_obj);
        object_color = TCS3472_DetectObjectColor(r_obj, g_obj, b_obj, c_obj);

        /* Get line color string */
        char *line_color_str;
        switch(line_color) {
            case BLACK:  line_color_str = "BLACK"; break;
            case WHITE:  line_color_str = "WHITE"; break;
            case GREEN:  line_color_str = "GREEN"; break;
            default:           line_color_str = "UNKNOWN"; break;
        }

        /* Get object color string */
        char *object_color_str;
        switch(object_color) {
            case BLACK:          object_color_str = "BLACK"; break;
            case WHITE:          object_color_str = "WHITE"; break;
            case GREEN:          object_color_str = "GREEN"; break;
            case YELLOW:  object_color_str = "YELLOW-ORANGE"; break;
            case RED:            object_color_str = "RED"; break;
            case BLUE:           object_color_str = "BLUE"; break;
            default:                   object_color_str = "UNKNOWN"; break;
        }

        /* Print the combined results */
        sprintf(buffer, "Line: %s (%d,%d,%d,%d) | Object: %s (%d,%d,%d,%d)\r\n",
                line_color_str, r_line, g_line, b_line, c_line,
                object_color_str, r_obj, g_obj, b_obj, c_obj);
        HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

        /* Wait before next reading */
        HAL_Delay(100);
    }
}




#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
    /* User can add his own implementation to report the file name and line number */
    printf("Wrong parameters value: file %s on line %d\r\n", file, line);
}
#endif /* USE_FULL_ASSERT */

