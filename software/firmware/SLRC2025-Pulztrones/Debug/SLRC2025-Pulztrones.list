
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030ec  0800df60  0800df60  0000ef60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801104c  0801104c  00013270  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801104c  0801104c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011054  08011054  00013270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011054  08011054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011058  08011058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  0801105c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c90  20000270  080112cc  00013270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f00  080112cc  00013f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbe3  00000000  00000000  000132a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005004  00000000  00000000  0002ee83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c0  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029951  00000000  00000000  00036e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ac5  00000000  00000000  000607c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e93e6  00000000  00000000  00088286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017166c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc0  00000000  00000000  001716b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00179670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000270 	.word	0x20000270
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800df44 	.word	0x0800df44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000274 	.word	0x20000274
 800020c:	0800df44 	.word	0x0800df44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Arm_Init>:
/**
  * @brief  Initialize the robot arm controller
  * @retval int: 0 if successful, -1 if error
  */
int Arm_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    // Check if already initialized
    if (initialized)
 8000ff8:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <Arm_Init+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <Arm_Init+0x10>
        return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e05e      	b.n	80010c2 <Arm_Init+0xce>

    // Register the four servos for the arm if they don't exist already
    if (servoIds[0] == -1) {
 8001004:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <Arm_Init+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d10c      	bne.n	8001028 <Arm_Init+0x34>
        servoIds[0] = Servo_Register(12, "Base", 0.0f, 180.0f, ARM_HOME_BASE_ANGLE);
 800100e:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 80010d0 <Arm_Init+0xdc>
 8001012:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80010d4 <Arm_Init+0xe0>
 8001016:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80010d8 <Arm_Init+0xe4>
 800101a:	4930      	ldr	r1, [pc, #192]	@ (80010dc <Arm_Init+0xe8>)
 800101c:	200c      	movs	r0, #12
 800101e:	f002 fcf9 	bl	8003a14 <Servo_Register>
 8001022:	4603      	mov	r3, r0
 8001024:	4a29      	ldr	r2, [pc, #164]	@ (80010cc <Arm_Init+0xd8>)
 8001026:	6013      	str	r3, [r2, #0]
    }

    if (servoIds[1] == -1) {
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <Arm_Init+0xd8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d10c      	bne.n	800104c <Arm_Init+0x58>
        servoIds[1] = Servo_Register(13, "Link1", 0.0f, 180.0f, ARM_HOME_LINK1_ANGLE);
 8001032:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001036:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80010d4 <Arm_Init+0xe0>
 800103a:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80010d8 <Arm_Init+0xe4>
 800103e:	4928      	ldr	r1, [pc, #160]	@ (80010e0 <Arm_Init+0xec>)
 8001040:	200d      	movs	r0, #13
 8001042:	f002 fce7 	bl	8003a14 <Servo_Register>
 8001046:	4603      	mov	r3, r0
 8001048:	4a20      	ldr	r2, [pc, #128]	@ (80010cc <Arm_Init+0xd8>)
 800104a:	6053      	str	r3, [r2, #4]
    }

    if (servoIds[2] == -1) {
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <Arm_Init+0xd8>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d10c      	bne.n	8001070 <Arm_Init+0x7c>
        servoIds[2] = Servo_Register(14, "Link2", 0.0f, 180.0f, ARM_HOME_LINK2_ANGLE);
 8001056:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80010e4 <Arm_Init+0xf0>
 800105a:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80010d4 <Arm_Init+0xe0>
 800105e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80010d8 <Arm_Init+0xe4>
 8001062:	4921      	ldr	r1, [pc, #132]	@ (80010e8 <Arm_Init+0xf4>)
 8001064:	200e      	movs	r0, #14
 8001066:	f002 fcd5 	bl	8003a14 <Servo_Register>
 800106a:	4603      	mov	r3, r0
 800106c:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <Arm_Init+0xd8>)
 800106e:	6093      	str	r3, [r2, #8]
    }

    if (servoIds[3] == -1) {
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <Arm_Init+0xd8>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d10c      	bne.n	8001094 <Arm_Init+0xa0>
        servoIds[3] = Servo_Register(15, "Link3", 0.0f, 180.0f, ARM_HOME_LINK3_ANGLE);
 800107a:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 80010ec <Arm_Init+0xf8>
 800107e:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80010d4 <Arm_Init+0xe0>
 8001082:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80010d8 <Arm_Init+0xe4>
 8001086:	491a      	ldr	r1, [pc, #104]	@ (80010f0 <Arm_Init+0xfc>)
 8001088:	200f      	movs	r0, #15
 800108a:	f002 fcc3 	bl	8003a14 <Servo_Register>
 800108e:	4603      	mov	r3, r0
 8001090:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <Arm_Init+0xd8>)
 8001092:	60d3      	str	r3, [r2, #12]
    }

    // Check if all servos were registered successfully
    if (servoIds[0] < 0 || servoIds[1] < 0 || servoIds[2] < 0 || servoIds[3] < 0) {
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <Arm_Init+0xd8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0b      	blt.n	80010b4 <Arm_Init+0xc0>
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <Arm_Init+0xd8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db07      	blt.n	80010b4 <Arm_Init+0xc0>
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <Arm_Init+0xd8>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db03      	blt.n	80010b4 <Arm_Init+0xc0>
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <Arm_Init+0xd8>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da02      	bge.n	80010ba <Arm_Init+0xc6>
        return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e003      	b.n	80010c2 <Arm_Init+0xce>
    }

    initialized = 1;
 80010ba:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <Arm_Init+0xd4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
    return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000028c 	.word	0x2000028c
 80010cc:	20000000 	.word	0x20000000
 80010d0:	42d20000 	.word	0x42d20000
 80010d4:	43340000 	.word	0x43340000
 80010d8:	00000000 	.word	0x00000000
 80010dc:	0800df60 	.word	0x0800df60
 80010e0:	0800df68 	.word	0x0800df68
 80010e4:	42be0000 	.word	0x42be0000
 80010e8:	0800df70 	.word	0x0800df70
 80010ec:	42a00000 	.word	0x42a00000
 80010f0:	0800df78 	.word	0x0800df78

080010f4 <init_ball_storage>:
#include "ballstorage.h"

int good_potato_storage; // left
int bad_potato_storage; // right

void init_ball_storage(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	good_potato_storage = Servo_Register(4, "good_potato_storage", 0, 180, 90);
 80010f8:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 800114c <init_ball_storage+0x58>
 80010fc:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001150 <init_ball_storage+0x5c>
 8001100:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001154 <init_ball_storage+0x60>
 8001104:	4914      	ldr	r1, [pc, #80]	@ (8001158 <init_ball_storage+0x64>)
 8001106:	2004      	movs	r0, #4
 8001108:	f002 fc84 	bl	8003a14 <Servo_Register>
 800110c:	4603      	mov	r3, r0
 800110e:	4a13      	ldr	r2, [pc, #76]	@ (800115c <init_ball_storage+0x68>)
 8001110:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(good_potato_storage, 90);
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <init_ball_storage+0x68>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800114c <init_ball_storage+0x58>
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fd66 	bl	8003bec <Servo_SetAngle>

	bad_potato_storage = Servo_Register(5, "bad_potato_storage", 0, 180, 90);
 8001120:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800114c <init_ball_storage+0x58>
 8001124:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001150 <init_ball_storage+0x5c>
 8001128:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001154 <init_ball_storage+0x60>
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <init_ball_storage+0x6c>)
 800112e:	2005      	movs	r0, #5
 8001130:	f002 fc70 	bl	8003a14 <Servo_Register>
 8001134:	4603      	mov	r3, r0
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <init_ball_storage+0x70>)
 8001138:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(bad_potato_storage, 90);
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <init_ball_storage+0x70>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800114c <init_ball_storage+0x58>
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fd52 	bl	8003bec <Servo_SetAngle>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	42b40000 	.word	0x42b40000
 8001150:	43340000 	.word	0x43340000
 8001154:	00000000 	.word	0x00000000
 8001158:	0800df80 	.word	0x0800df80
 800115c:	20000290 	.word	0x20000290
 8001160:	0800df94 	.word	0x0800df94
 8001164:	20000294 	.word	0x20000294

08001168 <turn_on_water_pump>:



//***** Pump Controlling functions ******************************************************//

void turn_on_water_pump(){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2104      	movs	r1, #4
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <turn_on_water_pump+0x14>)
 8001172:	f005 fd4f 	bl	8006c14 <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800

08001180 <turn_off_air_pump>:

void turn_on_air_pump(){
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 0);
}

void turn_off_air_pump(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	2102      	movs	r1, #2
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <turn_off_air_pump+0x14>)
 800118a:	f005 fd43 	bl	8006c14 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020800 	.word	0x40020800

08001198 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t prevokbtncount = 0;

volatile uint32_t nextbtncount = 1;
volatile uint32_t prevnextbtncount = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80011a2:	f004 fad5 	bl	8005750 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x70>)
 80011aa:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 650))  // Replace BUTTON_PIN with actual GPIO pin
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011b2:	d10e      	bne.n	80011d2 <HAL_GPIO_EXTI_Callback+0x3a>
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x70>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_GPIO_EXTI_Callback+0x74>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f240 228a 	movw	r2, #650	@ 0x28a
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d905      	bls.n	80011d2 <HAL_GPIO_EXTI_Callback+0x3a>
	{
    	nextbtncount++; // Set flag when button is pressed
 80011c6:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x78>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x78>)
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e011      	b.n	80011f6 <HAL_GPIO_EXTI_Callback+0x5e>
		//Buzzer_On();
	}
    else if (GPIO_Pin == GPIO_PIN_11 && (currentMillis - previousMillis > 650)){
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011d8:	d10d      	bne.n	80011f6 <HAL_GPIO_EXTI_Callback+0x5e>
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x70>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_GPIO_EXTI_Callback+0x74>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f240 228a 	movw	r2, #650	@ 0x28a
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d904      	bls.n	80011f6 <HAL_GPIO_EXTI_Callback+0x5e>
    	okbtncount++;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011f4:	6013      	str	r3, [r2, #0]
    }

    previousMillis = currentMillis;
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x70>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_GPIO_EXTI_Callback+0x74>)
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000029c 	.word	0x2000029c
 800120c:	20000298 	.word	0x20000298
 8001210:	20000010 	.word	0x20000010
 8001214:	200002a0 	.word	0x200002a0

08001218 <Reset_buttons>:

void Reset_buttons(){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	okbtncount = 0;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <Reset_buttons+0x28>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	prevokbtncount = 0;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <Reset_buttons+0x2c>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

	nextbtncount = 0;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <Reset_buttons+0x30>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	prevnextbtncount = 0;
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <Reset_buttons+0x34>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200002a0 	.word	0x200002a0
 8001244:	200002a4 	.word	0x200002a4
 8001248:	20000010 	.word	0x20000010
 800124c:	200002a8 	.word	0x200002a8

08001250 <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <Controller_EnableControllers>:

/**
 * Enable motor controllers.
 */
void Controller_EnableControllers(Controller *controller) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <Controller_DisableControllers>:

/**
 * Disable motor controllers.
 */
void Controller_DisableControllers(Controller *controller) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2020 	strb.w	r2, [r3, #32]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <Controller_ResetControllers>:

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <Controller_Stop>:

void Controller_Stop(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8001324:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001338 <Controller_Stop+0x18>
 8001328:	f001 f98e 	bl	8002648 <setMotorLPWM>
	setMotorRPWM(0);
 800132c:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001338 <Controller_Stop+0x18>
 8001330:	f001 f9d0 	bl	80026d4 <setMotorRPWM>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	00000000 	.word	0x00000000

0800133c <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b090      	sub	sp, #64	@ 0x40
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	ed87 0a02 	vstr	s0, [r7, #8]
 8001348:	edc7 0a01 	vstr	s1, [r7, #4]
 800134c:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 800135c:	4b6c      	ldr	r3, [pc, #432]	@ (8001510 <UpdateControllers+0x1d4>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ed97 7a02 	vldr	s14, [r7, #8]
 8001366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 800136e:	f000 fad5 	bl	800191c <robot_fwd_change>
 8001372:	eeb0 7a40 	vmov.f32	s14, s0
 8001376:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800137a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edd3 7a02 	vldr	s15, [r3, #8]
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	ed93 7a00 	vldr	s14, [r3]
 80013b0:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <UpdateControllers+0x1d8>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ba:	4b57      	ldr	r3, [pc, #348]	@ (8001518 <UpdateControllers+0x1dc>)
 80013bc:	edd3 6a00 	vldr	s13, [r3]
 80013c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 80013d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <UpdateControllers+0x1d4>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013de:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80013e2:	f000 faad 	bl	8001940 <robot_rot_change>
 80013e6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	ed93 7a01 	vldr	s14, [r3, #4]
 8001408:	edd7 7a00 	vldr	s15, [r7]
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	ed93 7a01 	vldr	s14, [r3, #4]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001426:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	ed93 7a01 	vldr	s14, [r3, #4]
 8001438:	4b38      	ldr	r3, [pc, #224]	@ (800151c <UpdateControllers+0x1e0>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <UpdateControllers+0x1e4>)
 8001444:	edd3 6a00 	vldr	s13, [r3]
 8001448:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800144c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001458:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800145c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001468:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800146c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <UpdateControllers+0x1e8>)
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001486:	4b28      	ldr	r3, [pc, #160]	@ (8001528 <UpdateControllers+0x1ec>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001490:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 8001494:	ed97 7a02 	vldr	s14, [r7, #8]
 8001498:	edd7 7a07 	vldr	s15, [r7, #28]
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 80014a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80014a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d017      	beq.n	80014ee <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 80014be:	ed97 0a06 	vldr	s0, [r7, #24]
 80014c2:	f000 f833 	bl	800152c <leftFeedForward>
 80014c6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 80014d6:	ed97 0a05 	vldr	s0, [r7, #20]
 80014da:	f000 f88d 	bl	80015f8 <rightFeedForward>
 80014de:	eeb0 7a40 	vmov.f32	s14, s0
 80014e2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80014f8:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80014fc:	f001 f8a4 	bl	8002648 <setMotorLPWM>
        setMotorRPWM(right_output);
 8001500:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001504:	f001 f8e6 	bl	80026d4 <setMotorRPWM>
    }


}
 8001508:	bf00      	nop
 800150a:	3740      	adds	r7, #64	@ 0x40
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	0800e050 	.word	0x0800e050
 8001514:	0800e060 	.word	0x0800e060
 8001518:	0800e064 	.word	0x0800e064
 800151c:	0800e068 	.word	0x0800e068
 8001520:	0800e06c 	.word	0x0800e06c
 8001524:	0800e040 	.word	0x0800e040
 8001528:	0800e048 	.word	0x0800e048

0800152c <leftFeedForward>:


float leftFeedForward(float speed) {
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 8001536:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <leftFeedForward+0xb8>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001548:	edd7 7a01 	vldr	s15, [r7, #4]
 800154c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd09      	ble.n	800156a <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <leftFeedForward+0xbc>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	edc7 7a05 	vstr	s15, [r7, #20]
 8001568:	e00f      	b.n	800158a <leftFeedForward+0x5e>
  } else if (speed < 0) {
 800156a:	edd7 7a01 	vldr	s15, [r7, #4]
 800156e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	d508      	bpl.n	800158a <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <leftFeedForward+0xbc>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <leftFeedForward+0xc0>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ed97 7a01 	vldr	s14, [r7, #4]
 8001594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <leftFeedForward+0xc4>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a2:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 80015a6:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <leftFeedForward+0xc0>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <leftFeedForward+0xc8>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ba:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 80015be:	ed97 7a05 	vldr	s14, [r7, #20]
 80015c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ca:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	ee07 3a90 	vmov	s15, r3
}
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	0800e054 	.word	0x0800e054
 80015e8:	0800e05c 	.word	0x0800e05c
 80015ec:	200002ac 	.word	0x200002ac
 80015f0:	0800e04c 	.word	0x0800e04c
 80015f4:	0800e058 	.word	0x0800e058

080015f8 <rightFeedForward>:

float rightFeedForward(float speed) {
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 8001602:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <rightFeedForward+0xb8>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ed97 7a01 	vldr	s14, [r7, #4]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001614:	edd7 7a01 	vldr	s15, [r7, #4]
 8001618:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001620:	dd09      	ble.n	8001636 <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <rightFeedForward+0xbc>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ed97 7a05 	vldr	s14, [r7, #20]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	edc7 7a05 	vstr	s15, [r7, #20]
 8001634:	e00f      	b.n	8001656 <rightFeedForward+0x5e>
  } else if (speed < 0) {
 8001636:	edd7 7a01 	vldr	s15, [r7, #4]
 800163a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d508      	bpl.n	8001656 <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <rightFeedForward+0xbc>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ed97 7a05 	vldr	s14, [r7, #20]
 800164e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001652:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <rightFeedForward+0xc0>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001664:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <rightFeedForward+0xc4>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <rightFeedForward+0xc0>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <rightFeedForward+0xc8>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 800168a:	ed97 7a05 	vldr	s14, [r7, #20]
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	ee07 3a90 	vmov	s15, r3
}
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	0800e054 	.word	0x0800e054
 80016b4:	0800e05c 	.word	0x0800e05c
 80016b8:	200002ac 	.word	0x200002ac
 80016bc:	0800e04c 	.word	0x0800e04c
 80016c0:	0800e058 	.word	0x0800e058

080016c4 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <Delay_Init+0x38>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10e      	bne.n	80016f2 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <Delay_Init+0x38>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <Delay_Init+0x38>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <Delay_Init+0x3c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <Delay_Init+0x3c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <Delay_Init+0x3c>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6013      	str	r3, [r2, #0]
    }
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000edf0 	.word	0xe000edf0
 8001700:	e0001000 	.word	0xe0001000

08001704 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <delayMicroseconds+0x38>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	22b4      	movs	r2, #180	@ 0xb4
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800171c:	bf00      	nop
 800171e:	4b07      	ldr	r3, [pc, #28]	@ (800173c <delayMicroseconds+0x38>)
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f8      	bhi.n	800171e <delayMicroseconds+0x1a>
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e0001000 	.word	0xe0001000

08001740 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8001744:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	b21b      	sxth	r3, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <getLeftEncoderCounts+0x14>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	b21b      	sxth	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40010000 	.word	0x40010000

08001770 <resetEncoders>:

void resetEncoders() {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <resetEncoders+0x44>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 800177a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
	m_robot_distance = 0;
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <resetEncoders+0x48>)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 800178a:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <resetEncoders+0x4c>)
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	left_delta = 0;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <resetEncoders+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	801a      	strh	r2, [r3, #0]
	right_delta = 0;
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <resetEncoders+0x54>)
 800179a:	2200      	movs	r2, #0
 800179c:	801a      	strh	r2, [r3, #0]
	previous_left_count = 0;
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <resetEncoders+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	801a      	strh	r2, [r3, #0]
	previous_right_count = 0;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <resetEncoders+0x5c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	801a      	strh	r2, [r3, #0]

}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40010000 	.word	0x40010000
 80017b8:	200002b0 	.word	0x200002b0
 80017bc:	200002b4 	.word	0x200002b4
 80017c0:	200002b8 	.word	0x200002b8
 80017c4:	200002ba 	.word	0x200002ba
 80017c8:	200002bc 	.word	0x200002bc
 80017cc:	200002be 	.word	0x200002be

080017d0 <resetEncodersinSystick>:

void resetEncodersinSystick() {
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <resetEncodersinSystick+0x1c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 80017da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40010000 	.word	0x40010000

080017f0 <update_Encoder_Data>:

void update_Encoder_Data(){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 80017f6:	f7ff ffaf 	bl	8001758 <getLeftEncoderCounts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 80017fe:	f7ff ff9f 	bl	8001740 <getRightEncoderCounts>
 8001802:	4603      	mov	r3, r0
 8001804:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 8001806:	89fa      	ldrh	r2, [r7, #14]
 8001808:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <update_Encoder_Data+0x108>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	b29b      	uxth	r3, r3
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b29b      	uxth	r3, r3
 8001814:	b21a      	sxth	r2, r3
 8001816:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <update_Encoder_Data+0x10c>)
 8001818:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 800181a:	4a37      	ldr	r2, [pc, #220]	@ (80018f8 <update_Encoder_Data+0x108>)
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001820:	89ba      	ldrh	r2, [r7, #12]
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <update_Encoder_Data+0x110>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	b29b      	uxth	r3, r3
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	b29b      	uxth	r3, r3
 800182e:	b21a      	sxth	r2, r3
 8001830:	4b34      	ldr	r3, [pc, #208]	@ (8001904 <update_Encoder_Data+0x114>)
 8001832:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 8001834:	4a32      	ldr	r2, [pc, #200]	@ (8001900 <update_Encoder_Data+0x110>)
 8001836:	89bb      	ldrh	r3, [r7, #12]
 8001838:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <update_Encoder_Data+0x10c>)
 800183c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe8f 	bl	8000564 <__aeabi_i2d>
 8001846:	a32a      	add	r3, pc, #168	@ (adr r3, 80018f0 <update_Encoder_Data+0x100>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fef4 	bl	8000638 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9e6 	bl	8000c28 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001860:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <update_Encoder_Data+0x114>)
 8001862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe7c 	bl	8000564 <__aeabi_i2d>
 800186c:	a320      	add	r3, pc, #128	@ (adr r3, 80018f0 <update_Encoder_Data+0x100>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fee1 	bl	8000638 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f9d3 	bl	8000c28 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 8001886:	ed97 7a01 	vldr	s14, [r7, #4]
 800188a:	edd7 7a02 	vldr	s15, [r7, #8]
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <update_Encoder_Data+0x118>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <update_Encoder_Data+0x11c>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <update_Encoder_Data+0x118>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <update_Encoder_Data+0x11c>)
 80018b2:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 80018b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80018be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <update_Encoder_Data+0x120>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <update_Encoder_Data+0x124>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 80018d2:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <update_Encoder_Data+0x128>)
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <update_Encoder_Data+0x124>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <update_Encoder_Data+0x128>)
 80018e4:	edc3 7a00 	vstr	s15, [r3]


}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	f76b218d 	.word	0xf76b218d
 80018f4:	3faf8e12 	.word	0x3faf8e12
 80018f8:	200002bc 	.word	0x200002bc
 80018fc:	200002b8 	.word	0x200002b8
 8001900:	200002be 	.word	0x200002be
 8001904:	200002ba 	.word	0x200002ba
 8001908:	200002c0 	.word	0x200002c0
 800190c:	200002b0 	.word	0x200002b0
 8001910:	0800e044 	.word	0x0800e044
 8001914:	200002c4 	.word	0x200002c4
 8001918:	200002b4 	.word	0x200002b4

0800191c <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <robot_fwd_change+0x20>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	607b      	str	r3, [r7, #4]
	return distance;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ee07 3a90 	vmov	s15, r3
}
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	200002c0 	.word	0x200002c0

08001940 <robot_rot_change>:

float robot_rot_change() {
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <robot_rot_change+0x20>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	607b      	str	r3, [r7, #4]
	return distance;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	ee07 3a90 	vmov	s15, r3
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	200002c4 	.word	0x200002c4

08001964 <analogReadIRs>:
	{70795.03, 5.63, 1.60},  //Left Back
	{93912.65, 13.94, -209.14},  //Right Back
	{78382.44, 9.55, -27.92},  //Right Front
};

void analogReadIRs(void){
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
	for (uint8_t i = 10; i < 15; i++)
 800196a:	230a      	movs	r3, #10
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	e00c      	b.n	800198a <analogReadIRs+0x26>
	    {
	        IRsensorValues[i] = AnalogMux_ReadChannel(i);
 8001970:	79fc      	ldrb	r4, [r7, #7]
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f003 f961 	bl	8004c3c <AnalogMux_ReadChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <analogReadIRs+0x38>)
 8001980:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint8_t i = 10; i < 15; i++)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	3301      	adds	r3, #1
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b0e      	cmp	r3, #14
 800198e:	d9ef      	bls.n	8001970 <analogReadIRs+0xc>
	    }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	200002c8 	.word	0x200002c8

080019a0 <readRawIR>:


uint16_t readRawIR(IR ir)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	switch(ir){
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d81c      	bhi.n	80019ea <readRawIR+0x4a>
 80019b0:	a201      	add	r2, pc, #4	@ (adr r2, 80019b8 <readRawIR+0x18>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019d9 	.word	0x080019d9
 80019c0:	080019d3 	.word	0x080019d3
 80019c4:	080019df 	.word	0x080019df
 80019c8:	080019e5 	.word	0x080019e5
	case IR_FRONT:
		return IRsensorValues[10];
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <readRawIR+0x5c>)
 80019ce:	8a9b      	ldrh	r3, [r3, #20]
 80019d0:	e00d      	b.n	80019ee <readRawIR+0x4e>
		break;
	case IR_LEFT_BACK:
		return IRsensorValues[11];
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <readRawIR+0x5c>)
 80019d4:	8adb      	ldrh	r3, [r3, #22]
 80019d6:	e00a      	b.n	80019ee <readRawIR+0x4e>
		break;
	case IR_LEFT_FORWARD:
		return IRsensorValues[12];
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <readRawIR+0x5c>)
 80019da:	8b1b      	ldrh	r3, [r3, #24]
 80019dc:	e007      	b.n	80019ee <readRawIR+0x4e>
		break;
	case IR_RIGHT_BACK:
		return IRsensorValues[13];
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <readRawIR+0x5c>)
 80019e0:	8b5b      	ldrh	r3, [r3, #26]
 80019e2:	e004      	b.n	80019ee <readRawIR+0x4e>
		break;
	case IR_RIGHT_FORWARD:
		return IRsensorValues[14];
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <readRawIR+0x5c>)
 80019e6:	8b9b      	ldrh	r3, [r3, #28]
 80019e8:	e001      	b.n	80019ee <readRawIR+0x4e>
		break;
	default:
		return -1;
 80019ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		break;
	}
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200002c8 	.word	0x200002c8

08001a00 <getIRDistance>:

uint16_t getIRDistance(IR ir, uint16_t raw){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	460a      	mov	r2, r1
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	80bb      	strh	r3, [r7, #4]
	IR_Calibration_t *cal = &IR_calibration[ir];
 8001a10:	79fa      	ldrb	r2, [r7, #7]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4a16      	ldr	r2, [pc, #88]	@ (8001a74 <getIRDistance+0x74>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
	return (int)round(((cal->a)/(raw - cal->c)) - cal->b);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	edd3 6a00 	vldr	s13, [r3]
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	ee17 0a90 	vmov	r0, s15
 8001a4c:	f7fe fd9c 	bl	8000588 <__aeabi_f2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	ec43 2b10 	vmov	d0, r2, r3
 8001a58:	f00c fa2e 	bl	800deb8 <round>
 8001a5c:	ec53 2b10 	vmov	r2, r3, d0
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f898 	bl	8000b98 <__aeabi_d2iz>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29b      	uxth	r3, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000014 	.word	0x20000014

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a7c:	f003 fe02 	bl	8005684 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a80:	f000 f87c 	bl	8001b7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a84:	f000 fb5e 	bl	8002144 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a88:	f000 fb3c 	bl	8002104 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001a8c:	f000 fabc 	bl	8002008 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001a90:	f000 f994 	bl	8001dbc <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a94:	f000 f9ea 	bl	8001e6c <MX_TIM2_Init>
	MX_I2C2_Init();
 8001a98:	f000 f962 	bl	8001d60 <MX_I2C2_Init>
	MX_USART3_UART_Init();
 8001a9c:	f000 fade 	bl	800205c <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001aa0:	f000 fb06 	bl	80020b0 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001aa4:	f000 f8dc 	bl	8001c60 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001aa8:	f000 f92c 	bl	8001d04 <MX_I2C1_Init>
	MX_TIM3_Init();
 8001aac:	f000 fa32 	bl	8001f14 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001ab0:	213c      	movs	r1, #60	@ 0x3c
 8001ab2:	482a      	ldr	r0, [pc, #168]	@ (8001b5c <main+0xe4>)
 8001ab4:	f007 fea8 	bl	8009808 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001ab8:	213c      	movs	r1, #60	@ 0x3c
 8001aba:	4829      	ldr	r0, [pc, #164]	@ (8001b60 <main+0xe8>)
 8001abc:	f007 fea4 	bl	8009808 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4828      	ldr	r0, [pc, #160]	@ (8001b64 <main+0xec>)
 8001ac4:	f007 fd32 	bl	800952c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4826      	ldr	r0, [pc, #152]	@ (8001b64 <main+0xec>)
 8001acc:	f007 fd2e 	bl	800952c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	4824      	ldr	r0, [pc, #144]	@ (8001b64 <main+0xec>)
 8001ad4:	f007 fd2a 	bl	800952c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001ad8:	210c      	movs	r1, #12
 8001ada:	4822      	ldr	r0, [pc, #136]	@ (8001b64 <main+0xec>)
 8001adc:	f007 fd26 	bl	800952c <HAL_TIM_PWM_Start>

	turn_off_air_pump();
 8001ae0:	f7ff fb4e 	bl	8001180 <turn_off_air_pump>
	turn_on_water_pump();
 8001ae4:	f7ff fb40 	bl	8001168 <turn_on_water_pump>


	/*--------------------- OLED Display --------------------------------*/
	Init_Display();
 8001ae8:	f003 f9e8 	bl	8004ebc <Init_Display>


	/*---------------------Delay--------------------------------*/
	Delay_Init();
 8001aec:	f7ff fdea 	bl	80016c4 <Delay_Init>
	/*-------------------------------------------------------------------*/

	/*---------------------Servos--------------------------------*/
	// Initialize servo system
	Servo_Init(50);  // 50Hz frequency for servos
 8001af0:	2032      	movs	r0, #50	@ 0x32
 8001af2:	f001 ff6b 	bl	80039cc <Servo_Init>
	// Initialize arm
	Arm_Init();
 8001af6:	f7ff fa7d 	bl	8000ff4 <Arm_Init>

	// Init ball storage
	init_ball_storage();
 8001afa:	f7ff fafb 	bl	80010f4 <init_ball_storage>


	/*-------------------------------------------------------------------*/

	Controller_Init(&controller);
 8001afe:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <main+0xf0>)
 8001b00:	f7ff fba6 	bl	8001250 <Controller_Init>
	Profile_Reset(&forward_profile);
 8001b04:	4819      	ldr	r0, [pc, #100]	@ (8001b6c <main+0xf4>)
 8001b06:	f000 fe2b 	bl	8002760 <Profile_Reset>
	Profile_Reset(&rotation_profile);
 8001b0a:	4819      	ldr	r0, [pc, #100]	@ (8001b70 <main+0xf8>)
 8001b0c:	f000 fe28 	bl	8002760 <Profile_Reset>
	Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <main+0xf8>)
 8001b12:	4a16      	ldr	r2, [pc, #88]	@ (8001b6c <main+0xf4>)
 8001b14:	4914      	ldr	r1, [pc, #80]	@ (8001b68 <main+0xf0>)
 8001b16:	4817      	ldr	r0, [pc, #92]	@ (8001b74 <main+0xfc>)
 8001b18:	f000 fbe3 	bl	80022e2 <Motion_Init>
	Controller_ResetControllers(&controller);
 8001b1c:	4812      	ldr	r0, [pc, #72]	@ (8001b68 <main+0xf0>)
 8001b1e:	f7ff fbe5 	bl	80012ec <Controller_ResetControllers>

	Buzzer_UniquePattern();
 8001b22:	f002 ff45 	bl	80049b0 <Buzzer_UniquePattern>

	Buzzer_Toggle(200);
 8001b26:	20c8      	movs	r0, #200	@ 0xc8
 8001b28:	f002 ff30 	bl	800498c <Buzzer_Toggle>
	HAL_Delay(2000);
 8001b2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b30:	f003 fe1a 	bl	8005768 <HAL_Delay>
	/*--------------- Raykha calibration ----------------------------------*/
	RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 8001b34:	2101      	movs	r1, #1
 8001b36:	4810      	ldr	r0, [pc, #64]	@ (8001b78 <main+0x100>)
 8001b38:	f001 f81e 	bl	8002b78 <RAYKHA_Calibrate>
	/*-------------------------------------------------------------------*/
	HAL_Delay(2000);
 8001b3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b40:	f003 fe12 	bl	8005768 <HAL_Delay>
	Buzzer_Toggle(200);
 8001b44:	20c8      	movs	r0, #200	@ 0xc8
 8001b46:	f002 ff21 	bl	800498c <Buzzer_Toggle>


	/*----------------- Begin color sensor init--------------------------------*/
	Buzzer_Toggle(100);
 8001b4a:	2064      	movs	r0, #100	@ 0x64
 8001b4c:	f002 ff1e 	bl	800498c <Buzzer_Toggle>
	//Motion_Move(&motion, 600, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
	//set_steering_mode(STEERING_OFF);
	//Motion_SpinTurn(&motion, 90, 200.0, 20.0);

  //---------------- End of Motion controller tests---------------------------------------------
	selectTask();
 8001b50:	f002 fe5e 	bl	8004810 <selectTask>



    /* USER CODE BEGIN 3 */

	  runCurrentTask();
 8001b54:	f002 feb8 	bl	80048c8 <runCurrentTask>
 8001b58:	e7fc      	b.n	8001b54 <main+0xdc>
 8001b5a:	bf00      	nop
 8001b5c:	200003d8 	.word	0x200003d8
 8001b60:	20000420 	.word	0x20000420
 8001b64:	20000468 	.word	0x20000468
 8001b68:	200006cc 	.word	0x200006cc
 8001b6c:	20000684 	.word	0x20000684
 8001b70:	200006a8 	.word	0x200006a8
 8001b74:	20000618 	.word	0x20000618
 8001b78:	200005ec 	.word	0x200005ec

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2234      	movs	r2, #52	@ 0x34
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f00a f85d 	bl	800bc4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <SystemClock_Config+0xdc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <SystemClock_Config+0xdc>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <SystemClock_Config+0xdc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <SystemClock_Config+0xe0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a25      	ldr	r2, [pc, #148]	@ (8001c5c <SystemClock_Config+0xe0>)
 8001bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <SystemClock_Config+0xe0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be0:	2310      	movs	r3, #16
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bec:	2308      	movs	r3, #8
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bf0:	23b4      	movs	r3, #180	@ 0xb4
 8001bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4618      	mov	r0, r3
 8001c06:	f007 f9a3 	bl	8008f50 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c10:	f000 fb60 	bl	80022d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c14:	f006 fe02 	bl	800881c <HAL_PWREx_EnableOverDrive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c1e:	f000 fb59 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c22:	230f      	movs	r3, #15
 8001c24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	2105      	movs	r1, #5
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 fe3b 	bl	80088bc <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c4c:	f000 fb42 	bl	80022d4 <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3750      	adds	r7, #80	@ 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c74:	4a21      	ldr	r2, [pc, #132]	@ (8001cfc <MX_ADC1_Init+0x9c>)
 8001c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c92:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001ca2:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <MX_ADC1_Init+0xa0>)
 8001ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cc0:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cc2:	f003 fd75 	bl	80057b0 <HAL_ADC_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ccc:	f000 fb02 	bl	80022d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001ce2:	f003 ff47 	bl	8005b74 <HAL_ADC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cec:	f000 faf2 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200002e8 	.word	0x200002e8
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	0f000001 	.word	0x0f000001

08001d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d0a:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <MX_I2C1_Init+0x54>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d10:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <MX_I2C1_Init+0x58>)
 8001d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d42:	f004 ff99 	bl	8006c78 <HAL_I2C_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d4c:	f000 fac2 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000330 	.word	0x20000330
 8001d58:	40005400 	.word	0x40005400
 8001d5c:	00061a80 	.word	0x00061a80

08001d60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d66:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <MX_I2C2_Init+0x54>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d6c:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <MX_I2C2_Init+0x58>)
 8001d6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d9e:	f004 ff6b 	bl	8006c78 <HAL_I2C_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001da8:	f000 fa94 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000384 	.word	0x20000384
 8001db4:	40005800 	.word	0x40005800
 8001db8:	000186a0 	.word	0x000186a0

08001dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	@ 0x30
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2224      	movs	r2, #36	@ 0x24
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f009 ff3d 	bl	800bc4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dd8:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001dda:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <MX_TIM1_Init+0xac>)
 8001ddc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e04:	2303      	movs	r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001e30:	f007 fc44 	bl	80096bc <HAL_TIM_Encoder_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e3a:	f000 fa4b 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001e4c:	f008 f8ae 	bl	8009fac <HAL_TIMEx_MasterConfigSynchronization>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e56:	f000 fa3d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3730      	adds	r7, #48	@ 0x30
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200003d8 	.word	0x200003d8
 8001e68:	40010000 	.word	0x40010000

08001e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	@ 0x30
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2224      	movs	r2, #36	@ 0x24
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f009 fee5 	bl	800bc4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001edc:	f007 fbee 	bl	80096bc <HAL_TIM_Encoder_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ee6:	f000 f9f5 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001ef8:	f008 f858 	bl	8009fac <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f02:	f000 f9e7 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	3730      	adds	r7, #48	@ 0x30
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000420 	.word	0x20000420

08001f14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f36:	4b32      	ldr	r3, [pc, #200]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f38:	4a32      	ldr	r2, [pc, #200]	@ (8002004 <MX_TIM3_Init+0xf0>)
 8001f3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f4a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001f4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b2b      	ldr	r3, [pc, #172]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f5c:	4828      	ldr	r0, [pc, #160]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f5e:	f007 fa95 	bl	800948c <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f68:	f000 f9b4 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4821      	ldr	r0, [pc, #132]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f7c:	f008 f816 	bl	8009fac <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f86:	f000 f9a5 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8a:	2360      	movs	r3, #96	@ 0x60
 8001f8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4817      	ldr	r0, [pc, #92]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fa2:	f007 fcbf 	bl	8009924 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001fac:	f000 f992 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4812      	ldr	r0, [pc, #72]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fb8:	f007 fcb4 	bl	8009924 <HAL_TIM_PWM_ConfigChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fc2:	f000 f987 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2208      	movs	r2, #8
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fce:	f007 fca9 	bl	8009924 <HAL_TIM_PWM_ConfigChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001fd8:	f000 f97c 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	220c      	movs	r2, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4807      	ldr	r0, [pc, #28]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fe4:	f007 fc9e 	bl	8009924 <HAL_TIM_PWM_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001fee:	f000 f971 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ff2:	4803      	ldr	r0, [pc, #12]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001ff4:	f002 f814 	bl	8004020 <HAL_TIM_MspPostInit>

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	@ 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000468 	.word	0x20000468
 8002004:	40000400 	.word	0x40000400

08002008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_USART2_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002040:	f008 f830 	bl	800a0a4 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 f943 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200004b0 	.word	0x200004b0
 8002058:	40004400 	.word	0x40004400

0800205c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <MX_USART3_UART_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002068:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800206c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002094:	f008 f806 	bl	800a0a4 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800209e:	f000 f919 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004f8 	.word	0x200004f8
 80020ac:	40004800 	.word	0x40004800

080020b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_USART6_UART_Init+0x50>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020e8:	f007 ffdc 	bl	800a0a4 <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020f2:	f000 f8ef 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000540 	.word	0x20000540
 8002100:	40011400 	.word	0x40011400

08002104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <MX_DMA_Init+0x3c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a0b      	ldr	r2, [pc, #44]	@ (8002140 <MX_DMA_Init+0x3c>)
 8002114:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <MX_DMA_Init+0x3c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2039      	movs	r0, #57	@ 0x39
 800212c:	f004 f82b 	bl	8006186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002130:	2039      	movs	r0, #57	@ 0x39
 8002132:	f004 f844 	bl	80061be <HAL_NVIC_EnableIRQ>

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b59      	ldr	r3, [pc, #356]	@ (80022c4 <MX_GPIO_Init+0x180>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a58      	ldr	r2, [pc, #352]	@ (80022c4 <MX_GPIO_Init+0x180>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b56      	ldr	r3, [pc, #344]	@ (80022c4 <MX_GPIO_Init+0x180>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <MX_GPIO_Init+0x180>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a51      	ldr	r2, [pc, #324]	@ (80022c4 <MX_GPIO_Init+0x180>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b4f      	ldr	r3, [pc, #316]	@ (80022c4 <MX_GPIO_Init+0x180>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b4b      	ldr	r3, [pc, #300]	@ (80022c4 <MX_GPIO_Init+0x180>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a4a      	ldr	r2, [pc, #296]	@ (80022c4 <MX_GPIO_Init+0x180>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b48      	ldr	r3, [pc, #288]	@ (80022c4 <MX_GPIO_Init+0x180>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b44      	ldr	r3, [pc, #272]	@ (80022c4 <MX_GPIO_Init+0x180>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a43      	ldr	r2, [pc, #268]	@ (80022c4 <MX_GPIO_Init+0x180>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <MX_GPIO_Init+0x180>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2102      	movs	r1, #2
 80021ce:	483e      	ldr	r0, [pc, #248]	@ (80022c8 <MX_GPIO_Init+0x184>)
 80021d0:	f004 fd20 	bl	8006c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2104      	movs	r1, #4
 80021d8:	483b      	ldr	r0, [pc, #236]	@ (80022c8 <MX_GPIO_Init+0x184>)
 80021da:	f004 fd1b 	bl	8006c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2120      	movs	r1, #32
 80021e2:	483a      	ldr	r0, [pc, #232]	@ (80022cc <MX_GPIO_Init+0x188>)
 80021e4:	f004 fd16 	bl	8006c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80021ee:	4838      	ldr	r0, [pc, #224]	@ (80022d0 <MX_GPIO_Init+0x18c>)
 80021f0:	f004 fd10 	bl	8006c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC11 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_11;
 80021f4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80021f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	482f      	ldr	r0, [pc, #188]	@ (80022c8 <MX_GPIO_Init+0x184>)
 800220c:	f004 fb6e 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
 8002210:	2302      	movs	r3, #2
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4828      	ldr	r0, [pc, #160]	@ (80022c8 <MX_GPIO_Init+0x184>)
 8002228:	f004 fb60 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
 800222c:	2304      	movs	r3, #4
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002234:	2301      	movs	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	4821      	ldr	r0, [pc, #132]	@ (80022c8 <MX_GPIO_Init+0x184>)
 8002244:	f004 fb52 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002248:	2308      	movs	r3, #8
 800224a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	481a      	ldr	r0, [pc, #104]	@ (80022c8 <MX_GPIO_Init+0x184>)
 800225e:	f004 fb45 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002262:	2320      	movs	r3, #32
 8002264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002266:	2301      	movs	r3, #1
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4814      	ldr	r0, [pc, #80]	@ (80022cc <MX_GPIO_Init+0x188>)
 800227a:	f004 fb37 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 800227e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	480e      	ldr	r0, [pc, #56]	@ (80022d0 <MX_GPIO_Init+0x18c>)
 8002298:	f004 fb28 	bl	80068ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2009      	movs	r0, #9
 80022a2:	f003 ff70 	bl	8006186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022a6:	2009      	movs	r0, #9
 80022a8:	f003 ff89 	bl	80061be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2028      	movs	r0, #40	@ 0x28
 80022b2:	f003 ff68 	bl	8006186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022b6:	2028      	movs	r0, #40	@ 0x28
 80022b8:	f003 ff81 	bl	80061be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80022bc:	bf00      	nop
 80022be:	3728      	adds	r7, #40	@ 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Buzzer_ErrorPattern();
 80022dc:	f002 fb9b 	bl	8004a16 <Buzzer_ErrorPattern>
 80022e0:	e7fc      	b.n	80022dc <Error_Handler+0x8>

080022e2 <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 80022e2:	b4b0      	push	{r4, r5, r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4614      	mov	r4, r2
 80022f6:	461d      	mov	r5, r3
 80022f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800230c:	4615      	mov	r5, r2
 800230e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002316:	682b      	ldr	r3, [r5, #0]
 8002318:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8002322:	4615      	mov	r5, r2
 8002324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	6023      	str	r3, [r4, #0]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bcb0      	pop	{r4, r5, r7}
 8002338:	4770      	bx	lr

0800233a <Motion_ResetDriveSystem>:

void Motion_ResetDriveSystem(Motion *motion) {
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	Motion_Stop(motion);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f81b 	bl	800237e <Motion_Stop>
	Motion_DisableDrive(motion);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f822 	bl	8002392 <Motion_DisableDrive>
    resetEncoders();
 800234e:	f7ff fa0f 	bl	8001770 <resetEncoders>
    Profile_Reset(&(motion->forward));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3324      	adds	r3, #36	@ 0x24
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fa02 	bl	8002760 <Profile_Reset>
    Profile_Reset(&(motion->rotation));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3348      	adds	r3, #72	@ 0x48
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f9fd 	bl	8002760 <Profile_Reset>
    Controller_ResetControllers(&(motion->controller));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe ffbf 	bl	80012ec <Controller_ResetControllers>
    Controller_EnableControllers(&(motion->controller));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe ff9f 	bl	80012b4 <Controller_EnableControllers>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <Motion_Stop>:

void Motion_Stop(Motion *motion) {
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	Controller_Stop();
 8002386:	f7fe ffcb 	bl	8001320 <Controller_Stop>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <Motion_DisableDrive>:

void Motion_DisableDrive(Motion *motion) {
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
	Controller_DisableControllers(&(motion->controller));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe ff97 	bl	80012d0 <Controller_DisableControllers>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3324      	adds	r3, #36	@ 0x24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 face 	bl	8002958 <Profile_GetSpeed>
 80023bc:	eef0 7a40 	vmov.f32	s15, s0
}
 80023c0:	eeb0 0a67 	vmov.f32	s0, s15
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3348      	adds	r3, #72	@ 0x48
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fabe 	bl	8002958 <Profile_GetSpeed>
 80023dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80023e0:	eeb0 0a67 	vmov.f32	s0, s15
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <Motion_StartMove>:
float Motion_Alpha(Motion *motion) {
    return Profile_GetAcceleration(&(motion->rotation));
}


void Motion_StartMove(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6178      	str	r0, [r7, #20]
 80023f2:	ed87 0a04 	vstr	s0, [r7, #16]
 80023f6:	edc7 0a03 	vstr	s1, [r7, #12]
 80023fa:	ed87 1a02 	vstr	s2, [r7, #8]
 80023fe:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(&(motion->forward), distance, top_speed, final_speed, acceleration);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3324      	adds	r3, #36	@ 0x24
 8002406:	edd7 1a01 	vldr	s3, [r7, #4]
 800240a:	ed97 1a02 	vldr	s2, [r7, #8]
 800240e:	edd7 0a03 	vldr	s1, [r7, #12]
 8002412:	ed97 0a04 	vldr	s0, [r7, #16]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f9bb 	bl	8002792 <Profile_Start>
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <Motion_Move>:
uint8_t Motion_MoveFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->forward));
}

// wait untill mition is completed
void Motion_Move(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6178      	str	r0, [r7, #20]
 800242c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002430:	edc7 0a03 	vstr	s1, [r7, #12]
 8002434:	ed87 1a02 	vstr	s2, [r7, #8]
 8002438:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Move(&(motion->forward), distance, top_speed, final_speed, acceleration);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3324      	adds	r3, #36	@ 0x24
 8002440:	edd7 1a01 	vldr	s3, [r7, #4]
 8002444:	ed97 1a02 	vldr	s2, [r7, #8]
 8002448:	edd7 0a03 	vldr	s1, [r7, #12]
 800244c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa29 	bl	80028a8 <Profile_Move>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <Motion_Turn>:
uint8_t Motion_TurnFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->rotation));
}

//wait untill motion is finished
void Motion_Turn(Motion *motion, float angle, float omega, float alpha) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	ed87 0a02 	vstr	s0, [r7, #8]
 800246c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002470:	ed87 1a00 	vstr	s2, [r7]
    Profile_Move(&(motion->rotation), angle, omega, 0, alpha);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3348      	adds	r3, #72	@ 0x48
 8002478:	edd7 1a00 	vldr	s3, [r7]
 800247c:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8002498 <Motion_Turn+0x38>
 8002480:	edd7 0a01 	vldr	s1, [r7, #4]
 8002484:	ed97 0a02 	vldr	s0, [r7, #8]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fa0d 	bl	80028a8 <Profile_Move>
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	00000000 	.word	0x00000000

0800249c <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3324      	adds	r3, #36	@ 0x24
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fa83 	bl	80029b4 <Profile_Update>
    Profile_Update(&(motion->rotation));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3348      	adds	r3, #72	@ 0x48
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fa7e 	bl	80029b4 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <Motion_SpinTurn>:

/**
  *
  * @brief turn in place. Force forward speed to zero
  */
void Motion_SpinTurn(Motion *motion, float angle, float omega, float alpha) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80024cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80024d0:	ed87 1a00 	vstr	s2, [r7]
    Profile_SetTargetSpeed(&(motion->forward), 0);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3324      	adds	r3, #36	@ 0x24
 80024d8:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800251c <Motion_SpinTurn+0x5c>
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fa59 	bl	8002994 <Profile_SetTargetSpeed>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80024e2:	e002      	b.n	80024ea <Motion_SpinTurn+0x2a>
        HAL_Delay(2);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f003 f93f 	bl	8005768 <HAL_Delay>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3324      	adds	r3, #36	@ 0x24
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fa32 	bl	8002958 <Profile_GetSpeed>
 80024f4:	eef0 7a40 	vmov.f32	s15, s0
 80024f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	d1f0      	bne.n	80024e4 <Motion_SpinTurn+0x24>
    }
    Motion_Turn(motion, angle, omega, alpha);
 8002502:	ed97 1a00 	vldr	s2, [r7]
 8002506:	edd7 0a01 	vldr	s1, [r7, #4]
 800250a:	ed97 0a02 	vldr	s0, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ffa6 	bl	8002460 <Motion_Turn>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	00000000 	.word	0x00000000

08002520 <Motion_StopAfter>:
   *
   * Calling this with the robot stationary is undefined. Don't do that.
   *
   * @brief bring the robot to a halt after a specific distance
   */
void Motion_StopAfter(Motion *motion, float distance) {
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	ed2d 8b02 	vpush	{d8}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	ed87 0a00 	vstr	s0, [r7]
    Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), 0, Profile_GetAcceleration(&(motion->forward)));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3324      	adds	r3, #36	@ 0x24
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fa0c 	bl	8002958 <Profile_GetSpeed>
 8002540:	eeb0 8a40 	vmov.f32	s16, s0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3324      	adds	r3, #36	@ 0x24
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fa14 	bl	8002976 <Profile_GetAcceleration>
 800254e:	eef0 7a40 	vmov.f32	s15, s0
 8002552:	eef0 1a67 	vmov.f32	s3, s15
 8002556:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8002574 <Motion_StopAfter+0x54>
 800255a:	eef0 0a48 	vmov.f32	s1, s16
 800255e:	ed97 0a00 	vldr	s0, [r7]
 8002562:	4620      	mov	r0, r4
 8002564:	f000 f9a0 	bl	80028a8 <Profile_Move>
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	ecbd 8b02 	vpop	{d8}
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	00000000 	.word	0x00000000

08002578 <Motion_SwitchToNextMotionAfter>:

// Test
void Motion_SwitchToNextMotionAfter(Motion *motion, float distance){
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	ed2d 8b02 	vpush	{d8}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	ed87 0a00 	vstr	s0, [r7]
	Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), Profile_GetSpeed(&(motion->forward)), Profile_GetAcceleration(&(motion->forward)));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3324      	adds	r3, #36	@ 0x24
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f9e0 	bl	8002958 <Profile_GetSpeed>
 8002598:	eeb0 8a40 	vmov.f32	s16, s0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3324      	adds	r3, #36	@ 0x24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f9d9 	bl	8002958 <Profile_GetSpeed>
 80025a6:	eef0 8a40 	vmov.f32	s17, s0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3324      	adds	r3, #36	@ 0x24
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f9e1 	bl	8002976 <Profile_GetAcceleration>
 80025b4:	eef0 7a40 	vmov.f32	s15, s0
 80025b8:	eef0 1a67 	vmov.f32	s3, s15
 80025bc:	eeb0 1a68 	vmov.f32	s2, s17
 80025c0:	eef0 0a48 	vmov.f32	s1, s16
 80025c4:	ed97 0a00 	vldr	s0, [r7]
 80025c8:	4620      	mov	r0, r4
 80025ca:	f000 f96d 	bl	80028a8 <Profile_Move>
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	ecbd 8b02 	vpop	{d8}
 80025d8:	bd90      	pop	{r4, r7, pc}
 80025da:	0000      	movs	r0, r0
 80025dc:	0000      	movs	r0, r0
	...

080025e0 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fd ffcc 	bl	8000588 <__aeabi_f2d>
 80025f0:	a313      	add	r3, pc, #76	@ (adr r3, 8002640 <limitPWM+0x60>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fe faaf 	bl	8000b58 <__aeabi_dcmpgt>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <limitPWM+0x24>
		return PWM_MAX;
 8002600:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <limitPWM+0x58>)
 8002602:	e00d      	b.n	8002620 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7fd ffbf 	bl	8000588 <__aeabi_f2d>
 800260a:	a309      	add	r3, pc, #36	@ (adr r3, 8002630 <limitPWM+0x50>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fe fa84 	bl	8000b1c <__aeabi_dcmplt>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <limitPWM+0x3e>
		return -PWM_MAX;
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <limitPWM+0x5c>)
 800261c:	e000      	b.n	8002620 <limitPWM+0x40>
	return pwm;
 800261e:	687b      	ldr	r3, [r7, #4]
}
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	70a3d70a 	.word	0x70a3d70a
 8002634:	bfef0a3d 	.word	0xbfef0a3d
 8002638:	3f7851ec 	.word	0x3f7851ec
 800263c:	bf7851ec 	.word	0xbf7851ec
 8002640:	70a3d70a 	.word	0x70a3d70a
 8002644:	3fef0a3d 	.word	0x3fef0a3d

08002648 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002652:	edd7 7a01 	vldr	s15, [r7, #4]
 8002656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	db13      	blt.n	8002688 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <setMotorLPWM+0x84>)
 8002662:	2200      	movs	r2, #0
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002666:	ed97 0a01 	vldr	s0, [r7, #4]
 800266a:	f7ff ffb9 	bl	80025e0 <limitPWM>
 800266e:	eef0 7a40 	vmov.f32	s15, s0
 8002672:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80026d0 <setMotorLPWM+0x88>
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <setMotorLPWM+0x84>)
 800267c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002680:	ee17 2a90 	vmov	r2, s15
 8002684:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002686:	e01c      	b.n	80026c2 <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002688:	edd7 7a01 	vldr	s15, [r7, #4]
 800268c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	d400      	bmi.n	8002698 <setMotorLPWM+0x50>
}
 8002696:	e014      	b.n	80026c2 <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <setMotorLPWM+0x84>)
 800269a:	2200      	movs	r2, #0
 800269c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 800269e:	ed97 0a01 	vldr	s0, [r7, #4]
 80026a2:	f7ff ff9d 	bl	80025e0 <limitPWM>
 80026a6:	eef0 7a40 	vmov.f32	s15, s0
 80026aa:	eef1 7a67 	vneg.f32	s15, s15
 80026ae:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80026d0 <setMotorLPWM+0x88>
 80026b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <setMotorLPWM+0x84>)
 80026b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026bc:	ee17 2a90 	vmov	r2, s15
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40000400 	.word	0x40000400
 80026d0:	45e0f800 	.word	0x45e0f800

080026d4 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 80026de:	edd7 7a01 	vldr	s15, [r7, #4]
 80026e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	db13      	blt.n	8002714 <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 80026ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <setMotorRPWM+0x84>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80026f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80026f6:	f7ff ff73 	bl	80025e0 <limitPWM>
 80026fa:	eef0 7a40 	vmov.f32	s15, s0
 80026fe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800275c <setMotorRPWM+0x88>
 8002702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002706:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <setMotorRPWM+0x84>)
 8002708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800270c:	ee17 2a90 	vmov	r2, s15
 8002710:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002712:	e01c      	b.n	800274e <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 8002714:	edd7 7a01 	vldr	s15, [r7, #4]
 8002718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	d400      	bmi.n	8002724 <setMotorRPWM+0x50>
}
 8002722:	e014      	b.n	800274e <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <setMotorRPWM+0x84>)
 8002726:	2200      	movs	r2, #0
 8002728:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 800272a:	ed97 0a01 	vldr	s0, [r7, #4]
 800272e:	f7ff ff57 	bl	80025e0 <limitPWM>
 8002732:	eef0 7a40 	vmov.f32	s15, s0
 8002736:	eef1 7a67 	vneg.f32	s15, s15
 800273a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800275c <setMotorRPWM+0x88>
 800273e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <setMotorRPWM+0x84>)
 8002744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002748:	ee17 2a90 	vmov	r2, s15
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40000400 	.word	0x40000400
 800275c:	45e0f800 	.word	0x45e0f800

08002760 <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002792:	b480      	push	{r7}
 8002794:	b087      	sub	sp, #28
 8002796:	af00      	add	r7, sp, #0
 8002798:	6178      	str	r0, [r7, #20]
 800279a:	ed87 0a04 	vstr	s0, [r7, #16]
 800279e:	edc7 0a03 	vstr	s1, [r7, #12]
 80027a2:	ed87 1a02 	vstr	s2, [r7, #8]
 80027a6:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 80027aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	d502      	bpl.n	80027be <Profile_Start+0x2c>
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	e000      	b.n	80027c0 <Profile_Start+0x2e>
 80027be:	2201      	movs	r2, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 80027c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	d505      	bpl.n	80027de <Profile_Start+0x4c>
 80027d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027d6:	eef1 7a67 	vneg.f32	s15, s15
 80027da:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 80027de:	edd7 7a04 	vldr	s15, [r7, #16]
 80027e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	d503      	bpl.n	80027f8 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2203      	movs	r2, #3
 80027f4:	701a      	strb	r2, [r3, #0]
        return;
 80027f6:	e052      	b.n	800289e <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 80027f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80027fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	dd01      	ble.n	800280e <Profile_Start+0x7c>
        final_speed = top_speed;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800282a:	edd7 7a03 	vldr	s15, [r7, #12]
 800282e:	eef0 7ae7 	vabs.f32	s15, s15
 8002832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284a:	edd7 7a02 	vldr	s15, [r7, #8]
 800284e:	eef0 7ae7 	vabs.f32	s15, s15
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 800285c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002860:	eef0 7ae7 	vabs.f32	s15, s15
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	db07      	blt.n	800288e <Profile_Start+0xfc>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	ed93 7a04 	vldr	s14, [r3, #16]
 8002884:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800288c:	e001      	b.n	8002892 <Profile_Start+0x100>
 800288e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
}
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6178      	str	r0, [r7, #20]
 80028b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80028b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80028b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80028bc:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 80028c0:	edd7 1a01 	vldr	s3, [r7, #4]
 80028c4:	ed97 1a02 	vldr	s2, [r7, #8]
 80028c8:	edd7 0a03 	vldr	s1, [r7, #12]
 80028cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f7ff ff5e 	bl	8002792 <Profile_Start>
    Profile_WaitUntilFinished(profile);
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f000 f804 	bl	80028e4 <Profile_WaitUntilFinished>
}
 80028dc:	bf00      	nop
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <Profile_WaitUntilFinished>:
    profile->speed = profile->target_speed;
    profile->state = PS_FINISHED;
}

// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 80028ec:	e002      	b.n	80028f4 <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 80028ee:	2002      	movs	r0, #2
 80028f0:	f002 ff3a 	bl	8005768 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d1f7      	bne.n	80028ee <Profile_WaitUntilFinished+0xa>
    }
}
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	ed93 7a01 	vldr	s14, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	edd3 7a01 	vldr	s15, [r3, #4]
 800291c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	edd3 6a07 	vldr	s13, [r3, #28]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	edd3 7a07 	vldr	s15, [r3, #28]
 800292c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002934:	eef0 7ae7 	vabs.f32	s15, s15
 8002938:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800293c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	edd3 7a05 	vldr	s15, [r3, #20]
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	ee07 3a90 	vmov	s15, r3
}
 8002968:	eeb0 0a67 	vmov.f32	s0, s15
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <Profile_GetAcceleration>:

// Get the current acceleration
float Profile_GetAcceleration(const Profile *profile) {
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
    return profile->acceleration;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	ee07 3a90 	vmov	s15, r3
}
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <Profile_SetTargetSpeed>:
void Profile_SetSpeed(Profile *profile, float speed) {
    profile->speed = speed;
}

// Set the target speed
void Profile_SetTargetSpeed(Profile *profile, float speed) {
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	ed87 0a00 	vstr	s0, [r7]
    profile->target_speed = speed;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80b5 	beq.w	8002b32 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	ed93 7a04 	vldr	s14, [r3, #16]
 80029ce:	4b5b      	ldr	r3, [pc, #364]	@ (8002b3c <Profile_Update+0x188>)
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d8:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edd3 7a08 	vldr	s15, [r3, #32]
 80029e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ec:	eef0 7ae7 	vabs.f32	s15, s15
 80029f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d128      	bne.n	8002a54 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ff80 	bl	8002908 <Profile_GetBrakingDistance>
 8002a08:	eeb0 7a40 	vmov.f32	s14, s0
 8002a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	d51c      	bpl.n	8002a54 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	d10b      	bne.n	8002a48 <Profile_Update+0x94>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a46:	e002      	b.n	8002a4e <Profile_Update+0x9a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a68:	d519      	bpl.n	8002a9e <Profile_Update+0xea>
        profile->speed += delta_v;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	dd28      	ble.n	8002ae6 <Profile_Update+0x132>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	e023      	b.n	8002ae6 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	dd18      	ble.n	8002ae6 <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8002abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d503      	bpl.n	8002ae6 <Profile_Update+0x132>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <Profile_Update+0x188>)
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d011      	beq.n	8002b34 <Profile_Update+0x180>
 8002b10:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b14:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	d508      	bpl.n	8002b34 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
 8002b30:	e000      	b.n	8002b34 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002b32:	bf00      	nop
    }

}
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	0800e050 	.word	0x0800e050

08002b40 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e00c      	b.n	8002b68 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	18d4      	adds	r4, r2, r3
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 f86f 	bl	8004c3c <AnalogMux_ReadChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	3301      	adds	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b09      	cmp	r3, #9
 8002b6c:	d9ef      	bls.n	8002b4e <RAYKHA_ReadRaw+0xe>
    }
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}

08002b78 <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
	display_clear();
 8002b84:	f002 f9fa 	bl	8004f7c <display_clear>
	display_headding("Calibration");
 8002b88:	4891      	ldr	r0, [pc, #580]	@ (8002dd0 <RAYKHA_Calibrate+0x258>)
 8002b8a:	f002 fa29 	bl	8004fe0 <display_headding>

	display_message("RAYKHA Calibration", 2, 25);
 8002b8e:	2219      	movs	r2, #25
 8002b90:	2102      	movs	r1, #2
 8002b92:	4890      	ldr	r0, [pc, #576]	@ (8002dd4 <RAYKHA_Calibrate+0x25c>)
 8002b94:	f002 f9fa 	bl	8004f8c <display_message>
	display_message("Press OK to Start...", 2, 40);
 8002b98:	2228      	movs	r2, #40	@ 0x28
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	488e      	ldr	r0, [pc, #568]	@ (8002dd8 <RAYKHA_Calibrate+0x260>)
 8002b9e:	f002 f9f5 	bl	8004f8c <display_message>

	while(okbtncount == prevokbtncount);
 8002ba2:	bf00      	nop
 8002ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8002ddc <RAYKHA_Calibrate+0x264>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b8d      	ldr	r3, [pc, #564]	@ (8002de0 <RAYKHA_Calibrate+0x268>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d0f9      	beq.n	8002ba4 <RAYKHA_Calibrate+0x2c>
	Reset_buttons();
 8002bb0:	f7fe fb32 	bl	8001218 <Reset_buttons>

	display_clear();
 8002bb4:	f002 f9e2 	bl	8004f7c <display_clear>
	display_headding("Calibration");
 8002bb8:	4885      	ldr	r0, [pc, #532]	@ (8002dd0 <RAYKHA_Calibrate+0x258>)
 8002bba:	f002 fa11 	bl	8004fe0 <display_headding>
	display_message("RAYKHA", 2, 25);
 8002bbe:	2219      	movs	r2, #25
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4888      	ldr	r0, [pc, #544]	@ (8002de4 <RAYKHA_Calibrate+0x26c>)
 8002bc4:	f002 f9e2 	bl	8004f8c <display_message>
	display_message("Calibrating....", 2, 40);
 8002bc8:	2228      	movs	r2, #40	@ 0x28
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4886      	ldr	r0, [pc, #536]	@ (8002de8 <RAYKHA_Calibrate+0x270>)
 8002bce:	f002 f9dd 	bl	8004f8c <display_message>

	HAL_Delay(1000);
 8002bd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bd6:	f002 fdc7 	bl	8005768 <HAL_Delay>
	Buzzer_Toggle(100);
 8002bda:	2064      	movs	r0, #100	@ 0x64
 8002bdc:	f001 fed6 	bl	800498c <Buzzer_Toggle>
	HAL_Delay(1000);
 8002be0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002be4:	f002 fdc0 	bl	8005768 <HAL_Delay>


	uint16_t sensor_values[RAYKHA_NUM_SENSORS];

	// Initialize calibration data
	for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002bee:	e013      	b.n	8002c18 <RAYKHA_Calibrate+0xa0>
	{
		calibration->min_values[i] = 0xFFFF;  // Max possible value
 8002bf0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002bfa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		calibration->max_values[i] = 0;       // Min possible value
 8002bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	3308      	adds	r3, #8
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c12:	3301      	adds	r3, #1
 8002c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d9e7      	bls.n	8002bf0 <RAYKHA_Calibrate+0x78>
	}

	calibration->line_type = line_type;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	for(uint8_t i = 0; i < 100; i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002c2e:	e0ad      	b.n	8002d8c <RAYKHA_Calibrate+0x214>
		// Take multiple samples for more accurate calibration
		for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002c36:	e053      	b.n	8002ce0 <RAYKHA_Calibrate+0x168>
		{
			// Read raw sensor values
			RAYKHA_ReadRaw(sensor_values);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff7f 	bl	8002b40 <RAYKHA_ReadRaw>

			// Update min and max values
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002c48:	e03e      	b.n	8002cc8 <RAYKHA_Calibrate+0x150>
			{
				if (sensor_values[i] < calibration->min_values[i])
 8002c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	3328      	adds	r3, #40	@ 0x28
 8002c52:	443b      	add	r3, r7
 8002c54:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8002c58:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d20b      	bcs.n	8002c7e <RAYKHA_Calibrate+0x106>
				{
					calibration->min_values[i] = sensor_values[i];
 8002c66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c6a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	3328      	adds	r3, #40	@ 0x28
 8002c72:	443b      	add	r3, r7
 8002c74:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
				if (sensor_values[i] > calibration->max_values[i])
 8002c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	3328      	adds	r3, #40	@ 0x28
 8002c86:	443b      	add	r3, r7
 8002c88:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8002c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	3308      	adds	r3, #8
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	440b      	add	r3, r1
 8002c98:	889b      	ldrh	r3, [r3, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90f      	bls.n	8002cbe <RAYKHA_Calibrate+0x146>
				{
					calibration->max_values[i] = sensor_values[i];
 8002c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ca2:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	3328      	adds	r3, #40	@ 0x28
 8002caa:	443b      	add	r3, r7
 8002cac:	f833 0c1c 	ldrh.w	r0, [r3, #-28]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	f101 0308 	add.w	r3, r1, #8
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	4602      	mov	r2, r0
 8002cbc:	809a      	strh	r2, [r3, #4]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002cbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d9bc      	bls.n	8002c4a <RAYKHA_Calibrate+0xd2>
				}
			}

			// Short delay between samples
			HAL_Delay(10);
 8002cd0:	200a      	movs	r0, #10
 8002cd2:	f002 fd49 	bl	8005768 <HAL_Delay>
		for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8002cd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002ce0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	d9a7      	bls.n	8002c38 <RAYKHA_Calibrate+0xc0>
		}

		// Add small margins to avoid edge cases
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cee:	e044      	b.n	8002d7a <RAYKHA_Calibrate+0x202>
		{
			if (calibration->min_values[i] > 20)
 8002cf0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cfa:	2b14      	cmp	r3, #20
 8002cfc:	d90c      	bls.n	8002d18 <RAYKHA_Calibrate+0x1a0>
				calibration->min_values[i] -= 20;
 8002cfe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d08:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d0c:	3b14      	subs	r3, #20
 8002d0e:	b299      	uxth	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002d16:	e005      	b.n	8002d24 <RAYKHA_Calibrate+0x1ac>
			else
				calibration->min_values[i] = 0;
 8002d18:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if (calibration->max_values[i] < 4075)
 8002d24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	889b      	ldrh	r3, [r3, #4]
 8002d32:	f640 72ea 	movw	r2, #4074	@ 0xfea
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d811      	bhi.n	8002d5e <RAYKHA_Calibrate+0x1e6>
				calibration->max_values[i] += 20;
 8002d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	3308      	adds	r3, #8
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	889a      	ldrh	r2, [r3, #4]
 8002d48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d4c:	3214      	adds	r2, #20
 8002d4e:	b291      	uxth	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	3308      	adds	r3, #8
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	460a      	mov	r2, r1
 8002d5a:	809a      	strh	r2, [r3, #4]
 8002d5c:	e008      	b.n	8002d70 <RAYKHA_Calibrate+0x1f8>
			else
				calibration->max_values[i] = 4095;
 8002d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	3308      	adds	r3, #8
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002d6e:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002d70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d74:	3301      	adds	r3, #1
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d7e:	2b09      	cmp	r3, #9
 8002d80:	d9b6      	bls.n	8002cf0 <RAYKHA_Calibrate+0x178>
	for(uint8_t i = 0; i < 100; i++){
 8002d82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d86:	3301      	adds	r3, #1
 8002d88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d90:	2b63      	cmp	r3, #99	@ 0x63
 8002d92:	f67f af4d 	bls.w	8002c30 <RAYKHA_Calibrate+0xb8>
		}
	}

	display_clear();
 8002d96:	f002 f8f1 	bl	8004f7c <display_clear>
	display_headding("Calibration");
 8002d9a:	480d      	ldr	r0, [pc, #52]	@ (8002dd0 <RAYKHA_Calibrate+0x258>)
 8002d9c:	f002 f920 	bl	8004fe0 <display_headding>
	display_message("RAYKHA", 2, 25);
 8002da0:	2219      	movs	r2, #25
 8002da2:	2102      	movs	r1, #2
 8002da4:	480f      	ldr	r0, [pc, #60]	@ (8002de4 <RAYKHA_Calibrate+0x26c>)
 8002da6:	f002 f8f1 	bl	8004f8c <display_message>
	display_message("Calibrated.", 2, 40);
 8002daa:	2228      	movs	r2, #40	@ 0x28
 8002dac:	2102      	movs	r1, #2
 8002dae:	480f      	ldr	r0, [pc, #60]	@ (8002dec <RAYKHA_Calibrate+0x274>)
 8002db0:	f002 f8ec 	bl	8004f8c <display_message>

	Buzzer_Toggle(100);
 8002db4:	2064      	movs	r0, #100	@ 0x64
 8002db6:	f001 fde9 	bl	800498c <Buzzer_Toggle>
	HAL_Delay(300);
 8002dba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002dbe:	f002 fcd3 	bl	8005768 <HAL_Delay>
	Buzzer_Toggle(200);
 8002dc2:	20c8      	movs	r0, #200	@ 0xc8
 8002dc4:	f001 fde2 	bl	800498c <Buzzer_Toggle>

}
 8002dc8:	bf00      	nop
 8002dca:	3728      	adds	r7, #40	@ 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	0800dfa8 	.word	0x0800dfa8
 8002dd4:	0800dfb4 	.word	0x0800dfb4
 8002dd8:	0800dfc8 	.word	0x0800dfc8
 8002ddc:	200002a0 	.word	0x200002a0
 8002de0:	200002a4 	.word	0x200002a4
 8002de4:	0800dfe0 	.word	0x0800dfe0
 8002de8:	0800dfe8 	.word	0x0800dfe8
 8002dec:	0800dff8 	.word	0x0800dff8

08002df0 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b08a      	sub	sp, #40	@ 0x28
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fe9e 	bl	8002b40 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e05a      	b.n	8002ec0 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	3320      	adds	r3, #32
 8002e10:	443b      	add	r3, r7
 8002e12:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002e16:	7ff9      	ldrb	r1, [r7, #31]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d206      	bcs.n	8002e30 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	e044      	b.n	8002eba <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8002e30:	7ffb      	ldrb	r3, [r7, #31]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	3320      	adds	r3, #32
 8002e36:	443b      	add	r3, r7
 8002e38:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	440b      	add	r3, r1
 8002e46:	889b      	ldrh	r3, [r3, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d907      	bls.n	8002e5c <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8002e4c:	7ffb      	ldrb	r3, [r7, #31]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	e02e      	b.n	8002eba <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	3320      	adds	r3, #32
 8002e62:	443b      	add	r3, r7
 8002e64:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8002e68:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8002e70:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	3308      	adds	r3, #8
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	18d4      	adds	r4, r2, r3
 8002e84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	462a      	mov	r2, r5
 8002e8e:	f000 f879 	bl	8002f84 <map_range>
 8002e92:	4603      	mov	r3, r0
 8002e94:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d10c      	bne.n	8002eba <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	881a      	ldrh	r2, [r3, #0]
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d9a1      	bls.n	8002e0a <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bdb0      	pop	{r4, r5, r7, pc}

08002ed0 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73bb      	strb	r3, [r7, #14]
 8002eea:	e01c      	b.n	8002f26 <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8002eec:	7bbb      	ldrb	r3, [r7, #14]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8002ef8:	89bb      	ldrh	r3, [r7, #12]
 8002efa:	2bc8      	cmp	r3, #200	@ 0xc8
 8002efc:	d901      	bls.n	8002f02 <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8002f02:	89bb      	ldrh	r3, [r7, #12]
 8002f04:	7bba      	ldrb	r2, [r7, #14]
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4413      	add	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
        sum += value;
 8002f18:	89bb      	ldrh	r3, [r7, #12]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	3301      	adds	r3, #1
 8002f24:	73bb      	strb	r3, [r7, #14]
 8002f26:	7bbb      	ldrb	r3, [r7, #14]
 8002f28:	2b09      	cmp	r3, #9
 8002f2a:	d9df      	bls.n	8002eec <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <RAYKHA_GetLinePosition+0x68>
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b63      	cmp	r3, #99	@ 0x63
 8002f36:	d802      	bhi.n	8002f3e <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	e003      	b.n	8002f46 <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffb6 	bl	8002ed0 <RAYKHA_GetLinePosition>
 8002f64:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d102      	bne.n	8002f74 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 8002f6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002f72:	e003      	b.n	8002f7c <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8002f7a:	3b14      	subs	r3, #20
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8002f84:	b490      	push	{r4, r7}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	80fb      	strh	r3, [r7, #6]
 8002f96:	4603      	mov	r3, r0
 8002f98:	80bb      	strh	r3, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	807b      	strh	r3, [r7, #2]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	88bb      	ldrh	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d801      	bhi.n	8002fae <map_range+0x2a>
 8002faa:	883b      	ldrh	r3, [r7, #0]
 8002fac:	e01d      	b.n	8002fea <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	88bb      	ldrh	r3, [r7, #4]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	8b39      	ldrh	r1, [r7, #24]
 8002fb6:	883a      	ldrh	r2, [r7, #0]
 8002fb8:	1a8a      	subs	r2, r1, r2
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	8879      	ldrh	r1, [r7, #2]
 8002fc0:	88bb      	ldrh	r3, [r7, #4]
 8002fc2:	1acb      	subs	r3, r1, r3
 8002fc4:	fb92 f2f3 	sdiv	r2, r2, r3
 8002fc8:	883b      	ldrh	r3, [r7, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 8002fce:	883b      	ldrh	r3, [r7, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	da01      	bge.n	8002fda <map_range+0x56>
 8002fd6:	883b      	ldrh	r3, [r7, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 8002fda:	8b3b      	ldrh	r3, [r7, #24]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	dd01      	ble.n	8002fe6 <map_range+0x62>
 8002fe2:	8b3b      	ldrh	r3, [r7, #24]
 8002fe4:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b29b      	uxth	r3, r3
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc90      	pop	{r4, r7}
 8002ff2:	4770      	bx	lr

08002ff4 <GetLineColor>:
//	}
//	return WHITE;
//}


Color GetLineColor(uint8_t column, uint8_t row){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	71fb      	strb	r3, [r7, #7]
 8003000:	4613      	mov	r3, r2
 8003002:	71bb      	strb	r3, [r7, #6]
	TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 8003004:	2001      	movs	r0, #1
 8003006:	f007 ff6b 	bl	800aee0 <TCS3472_SelectSensor>
	TCS3472_GetRGBC(&r_line, &g_line, &b_line, &c_line);
 800300a:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <GetLineColor+0x4c>)
 800300c:	4a0d      	ldr	r2, [pc, #52]	@ (8003044 <GetLineColor+0x50>)
 800300e:	490e      	ldr	r1, [pc, #56]	@ (8003048 <GetLineColor+0x54>)
 8003010:	480e      	ldr	r0, [pc, #56]	@ (800304c <GetLineColor+0x58>)
 8003012:	f007 ff79 	bl	800af08 <TCS3472_GetRGBC>
	line_color = TCS3472_DetectLineColor(r_line, g_line, b_line, c_line);
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <GetLineColor+0x58>)
 8003018:	8818      	ldrh	r0, [r3, #0]
 800301a:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <GetLineColor+0x54>)
 800301c:	8819      	ldrh	r1, [r3, #0]
 800301e:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <GetLineColor+0x50>)
 8003020:	881a      	ldrh	r2, [r3, #0]
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <GetLineColor+0x4c>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	f007 ff9f 	bl	800af68 <TCS3472_DetectLineColor>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <GetLineColor+0x5c>)
 8003030:	701a      	strb	r2, [r3, #0]
	return line_color;
 8003032:	4b07      	ldr	r3, [pc, #28]	@ (8003050 <GetLineColor+0x5c>)
 8003034:	781b      	ldrb	r3, [r3, #0]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000dae 	.word	0x20000dae
 8003044:	20000dac 	.word	0x20000dac
 8003048:	20000daa 	.word	0x20000daa
 800304c:	20000da8 	.word	0x20000da8
 8003050:	20000db0 	.word	0x20000db0

08003054 <GetBallColor>:


Color GetBallColor(uint8_t column, uint8_t row){
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	460a      	mov	r2, r1
 800305e:	71fb      	strb	r3, [r7, #7]
 8003060:	4613      	mov	r3, r2
 8003062:	71bb      	strb	r3, [r7, #6]
	// Need seperate code to handle color detection
	// use this to acces a global vairable

	if(column == 0 && row == 0){
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <GetBallColor+0x20>
 800306a:	79bb      	ldrb	r3, [r7, #6]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <GetBallColor+0x20>
		return WHITE;
 8003070:	2300      	movs	r3, #0
 8003072:	e020      	b.n	80030b6 <GetBallColor+0x62>
	}
	if(column == 1 && row == 1){
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d104      	bne.n	8003084 <GetBallColor+0x30>
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <GetBallColor+0x30>
		return YELLOW;
 8003080:	2302      	movs	r3, #2
 8003082:	e018      	b.n	80030b6 <GetBallColor+0x62>
	}
	if(column == 2 && row == 2){
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d104      	bne.n	8003094 <GetBallColor+0x40>
 800308a:	79bb      	ldrb	r3, [r7, #6]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d101      	bne.n	8003094 <GetBallColor+0x40>
		return YELLOW;
 8003090:	2302      	movs	r3, #2
 8003092:	e010      	b.n	80030b6 <GetBallColor+0x62>
	}
	if(column == 3 && row == 0){
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d104      	bne.n	80030a4 <GetBallColor+0x50>
 800309a:	79bb      	ldrb	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <GetBallColor+0x50>
		return WHITE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e008      	b.n	80030b6 <GetBallColor+0x62>
	}
	if(column == 4 && row == 1){
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d104      	bne.n	80030b4 <GetBallColor+0x60>
 80030aa:	79bb      	ldrb	r3, [r7, #6]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <GetBallColor+0x60>
		return WHITE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <GetBallColor+0x62>
	}
	return WHITE;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <Robot_LineFollowUntillJunction>:




//------------------------------------------------------------------------------//
JunctionType Robot_LineFollowUntillJunction(){
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80030c8:	2007      	movs	r0, #7
 80030ca:	f000 fb1b 	bl	8003704 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 80030ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <Robot_LineFollowUntillJunction+0x74>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <Robot_LineFollowUntillJunction+0x74>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	ee07 3a10 	vmov	s14, r3
 80030e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <Robot_LineFollowUntillJunction+0x78>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	ee06 3a90 	vmov	s13, r3
 80030ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80030f2:	eef0 1a66 	vmov.f32	s3, s13
 80030f6:	eeb0 1a47 	vmov.f32	s2, s14
 80030fa:	eef0 0a67 	vmov.f32	s1, s15
 80030fe:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003140 <Robot_LineFollowUntillJunction+0x7c>
 8003102:	4810      	ldr	r0, [pc, #64]	@ (8003144 <Robot_LineFollowUntillJunction+0x80>)
 8003104:	f7ff f971 	bl	80023ea <Motion_StartMove>
	junction = STRAIGHT_LINE;
 8003108:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <Robot_LineFollowUntillJunction+0x84>)
 800310a:	2204      	movs	r2, #4
 800310c:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 800310e:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <Robot_LineFollowUntillJunction+0x84>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b04      	cmp	r3, #4
 8003114:	d100      	bne.n	8003118 <Robot_LineFollowUntillJunction+0x54>
 8003116:	e7fa      	b.n	800310e <Robot_LineFollowUntillJunction+0x4a>
			break;
 8003118:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 800311a:	2003      	movs	r0, #3
 800311c:	f000 faf2 	bl	8003704 <set_steering_mode>
	Motion_StopAfter(&motion, 55);
 8003120:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800314c <Robot_LineFollowUntillJunction+0x88>
 8003124:	4807      	ldr	r0, [pc, #28]	@ (8003144 <Robot_LineFollowUntillJunction+0x80>)
 8003126:	f7ff f9fb 	bl	8002520 <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 800312a:	4806      	ldr	r0, [pc, #24]	@ (8003144 <Robot_LineFollowUntillJunction+0x80>)
 800312c:	f7ff f905 	bl	800233a <Motion_ResetDriveSystem>
	return junction;
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <Robot_LineFollowUntillJunction+0x84>)
 8003132:	781b      	ldrb	r3, [r3, #0]

}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	0800e07c 	.word	0x0800e07c
 800313c:	0800e080 	.word	0x0800e080
 8003140:	44bb8000 	.word	0x44bb8000
 8003144:	20000618 	.word	0x20000618
 8003148:	20000740 	.word	0x20000740
 800314c:	425c0000 	.word	0x425c0000

08003150 <Robot_LineFollowUntillJunctionAndNotStop>:
JunctionType Robot_LineFollowUntillJunctionAndNotStop(){
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 8003154:	2007      	movs	r0, #7
 8003156:	f000 fad5 	bl	8003704 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003166:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	ee07 3a10 	vmov	s14, r3
 800316e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003172:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <Robot_LineFollowUntillJunctionAndNotStop+0x74>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	ee06 3a90 	vmov	s13, r3
 800317a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800317e:	eef0 1a66 	vmov.f32	s3, s13
 8003182:	eeb0 1a47 	vmov.f32	s2, s14
 8003186:	eef0 0a67 	vmov.f32	s1, s15
 800318a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80031c8 <Robot_LineFollowUntillJunctionAndNotStop+0x78>
 800318e:	480f      	ldr	r0, [pc, #60]	@ (80031cc <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 8003190:	f7ff f92b 	bl	80023ea <Motion_StartMove>
	junction = STRAIGHT_LINE;
 8003194:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 8003196:	2204      	movs	r2, #4
 8003198:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d100      	bne.n	80031a4 <Robot_LineFollowUntillJunctionAndNotStop+0x54>
 80031a2:	e7fa      	b.n	800319a <Robot_LineFollowUntillJunctionAndNotStop+0x4a>
			break;
 80031a4:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80031a6:	2003      	movs	r0, #3
 80031a8:	f000 faac 	bl	8003704 <set_steering_mode>
	//Motion_StopAfter(&motion, 45);
	Motion_SwitchToNextMotionAfter(&motion, 45);
 80031ac:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80031d4 <Robot_LineFollowUntillJunctionAndNotStop+0x84>
 80031b0:	4806      	ldr	r0, [pc, #24]	@ (80031cc <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 80031b2:	f7ff f9e1 	bl	8002578 <Motion_SwitchToNextMotionAfter>

	//Motion_ResetDriveSystem(&motion);
	return junction;
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 80031b8:	781b      	ldrb	r3, [r3, #0]

}
 80031ba:	4618      	mov	r0, r3
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	0800e07c 	.word	0x0800e07c
 80031c4:	0800e080 	.word	0x0800e080
 80031c8:	44bb8000 	.word	0x44bb8000
 80031cc:	20000618 	.word	0x20000618
 80031d0:	20000740 	.word	0x20000740
 80031d4:	42340000 	.word	0x42340000

080031d8 <Robot_FollowLineGivenDistance>:


void Robot_FollowLineGivenDistance(int distnace){
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80031e0:	2007      	movs	r0, #7
 80031e2:	f000 fa8f 	bl	8003704 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, 0    , FORWARD_ACCELERATION_1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f0:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <Robot_FollowLineGivenDistance+0x5c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	ee07 3a10 	vmov	s14, r3
 80031f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <Robot_FollowLineGivenDistance+0x60>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	ee06 3a90 	vmov	s13, r3
 8003204:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003208:	eef0 1a66 	vmov.f32	s3, s13
 800320c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 800323c <Robot_FollowLineGivenDistance+0x64>
 8003210:	eef0 0a47 	vmov.f32	s1, s14
 8003214:	eeb0 0a67 	vmov.f32	s0, s15
 8003218:	4809      	ldr	r0, [pc, #36]	@ (8003240 <Robot_FollowLineGivenDistance+0x68>)
 800321a:	f7ff f903 	bl	8002424 <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	set_steering_mode(STEERING_OFF);
 800321e:	2003      	movs	r0, #3
 8003220:	f000 fa70 	bl	8003704 <set_steering_mode>
	Motion_ResetDriveSystem(&motion);
 8003224:	4806      	ldr	r0, [pc, #24]	@ (8003240 <Robot_FollowLineGivenDistance+0x68>)
 8003226:	f7ff f888 	bl	800233a <Motion_ResetDriveSystem>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	0800e084 	.word	0x0800e084
 8003238:	0800e088 	.word	0x0800e088
 800323c:	00000000 	.word	0x00000000
 8003240:	20000618 	.word	0x20000618

08003244 <Robot_FollowLineGivenDistanceandNotStop>:

void Robot_FollowLineGivenDistanceandNotStop(int distnace){
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 800324c:	2007      	movs	r0, #7
 800324e:	f000 fa59 	bl	8003704 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, FORWARD_SPEED_1    , FORWARD_ACCELERATION_1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800325c:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	ee07 3a10 	vmov	s14, r3
 8003264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003268:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	ee06 3a90 	vmov	s13, r3
 8003270:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <Robot_FollowLineGivenDistanceandNotStop+0x60>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	ee06 3a10 	vmov	s12, r3
 800327c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003280:	eef0 1a46 	vmov.f32	s3, s12
 8003284:	eeb0 1a66 	vmov.f32	s2, s13
 8003288:	eef0 0a47 	vmov.f32	s1, s14
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	4805      	ldr	r0, [pc, #20]	@ (80032a8 <Robot_FollowLineGivenDistanceandNotStop+0x64>)
 8003292:	f7ff f8c7 	bl	8002424 <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	//set_steering_mode(STEERING_OFF);
	//Motion_ResetDriveSystem(&motion);
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	0800e084 	.word	0x0800e084
 80032a4:	0800e088 	.word	0x0800e088
 80032a8:	20000618 	.word	0x20000618

080032ac <Robot_MoveForwardUntillLine>:

JunctionType Robot_MoveForwardUntillLine(){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_OFF_READLINE);
 80032b0:	2004      	movs	r0, #4
 80032b2:	f000 fa27 	bl	8003704 <set_steering_mode>
	Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 80032b6:	4b17      	ldr	r3, [pc, #92]	@ (8003314 <Robot_MoveForwardUntillLine+0x68>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c2:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <Robot_MoveForwardUntillLine+0x6c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	ee07 3a10 	vmov	s14, r3
 80032ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80032ce:	eef0 1a47 	vmov.f32	s3, s14
 80032d2:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800331c <Robot_MoveForwardUntillLine+0x70>
 80032d6:	eef0 0a67 	vmov.f32	s1, s15
 80032da:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8003320 <Robot_MoveForwardUntillLine+0x74>
 80032de:	4811      	ldr	r0, [pc, #68]	@ (8003324 <Robot_MoveForwardUntillLine+0x78>)
 80032e0:	f7ff f883 	bl	80023ea <Motion_StartMove>
	junction = NO_LINE;
 80032e4:	4b10      	ldr	r3, [pc, #64]	@ (8003328 <Robot_MoveForwardUntillLine+0x7c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != NO_LINE){
 80032ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <Robot_MoveForwardUntillLine+0x7c>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d100      	bne.n	80032f4 <Robot_MoveForwardUntillLine+0x48>
 80032f2:	e7fa      	b.n	80032ea <Robot_MoveForwardUntillLine+0x3e>
			break;
 80032f4:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80032f6:	2003      	movs	r0, #3
 80032f8:	f000 fa04 	bl	8003704 <set_steering_mode>
	Motion_StopAfter(&motion, 60);
 80032fc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800332c <Robot_MoveForwardUntillLine+0x80>
 8003300:	4808      	ldr	r0, [pc, #32]	@ (8003324 <Robot_MoveForwardUntillLine+0x78>)
 8003302:	f7ff f90d 	bl	8002520 <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 8003306:	4807      	ldr	r0, [pc, #28]	@ (8003324 <Robot_MoveForwardUntillLine+0x78>)
 8003308:	f7ff f817 	bl	800233a <Motion_ResetDriveSystem>
	return junction;
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <Robot_MoveForwardUntillLine+0x7c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0800e084 	.word	0x0800e084
 8003318:	0800e088 	.word	0x0800e088
 800331c:	00000000 	.word	0x00000000
 8003320:	44bb8000 	.word	0x44bb8000
 8003324:	20000618 	.word	0x20000618
 8003328:	20000740 	.word	0x20000740
 800332c:	42700000 	.word	0x42700000

08003330 <Robot_MoveForwardGivenDistance>:

void Robot_MoveForwardGivenDistance(int distnace){
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 8003338:	2003      	movs	r0, #3
 800333a:	f000 f9e3 	bl	8003704 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003348:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <Robot_MoveForwardGivenDistance+0x54>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	ee07 3a10 	vmov	s14, r3
 8003350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003354:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <Robot_MoveForwardGivenDistance+0x58>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	ee06 3a90 	vmov	s13, r3
 800335c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003360:	eef0 1a66 	vmov.f32	s3, s13
 8003364:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 800338c <Robot_MoveForwardGivenDistance+0x5c>
 8003368:	eef0 0a47 	vmov.f32	s1, s14
 800336c:	eeb0 0a67 	vmov.f32	s0, s15
 8003370:	4807      	ldr	r0, [pc, #28]	@ (8003390 <Robot_MoveForwardGivenDistance+0x60>)
 8003372:	f7ff f857 	bl	8002424 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 8003376:	4806      	ldr	r0, [pc, #24]	@ (8003390 <Robot_MoveForwardGivenDistance+0x60>)
 8003378:	f7fe ffdf 	bl	800233a <Motion_ResetDriveSystem>
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	0800e084 	.word	0x0800e084
 8003388:	0800e088 	.word	0x0800e088
 800338c:	00000000 	.word	0x00000000
 8003390:	20000618 	.word	0x20000618

08003394 <Robot_MoveReverseGivenDistance>:

void Robot_MoveReverseGivenDistance(int distnace){
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 800339c:	2003      	movs	r0, #3
 800339e:	f000 f9b1 	bl	8003704 <set_steering_mode>
	Motion_Move(&motion, -1 * distnace, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	425b      	negs	r3, r3
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ae:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <Robot_MoveReverseGivenDistance+0x58>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	ee07 3a10 	vmov	s14, r3
 80033b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033ba:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <Robot_MoveReverseGivenDistance+0x5c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	ee06 3a90 	vmov	s13, r3
 80033c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80033c6:	eef0 1a66 	vmov.f32	s3, s13
 80033ca:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80033f4 <Robot_MoveReverseGivenDistance+0x60>
 80033ce:	eef0 0a47 	vmov.f32	s1, s14
 80033d2:	eeb0 0a67 	vmov.f32	s0, s15
 80033d6:	4808      	ldr	r0, [pc, #32]	@ (80033f8 <Robot_MoveReverseGivenDistance+0x64>)
 80033d8:	f7ff f824 	bl	8002424 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 80033dc:	4806      	ldr	r0, [pc, #24]	@ (80033f8 <Robot_MoveReverseGivenDistance+0x64>)
 80033de:	f7fe ffac 	bl	800233a <Motion_ResetDriveSystem>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	0800e084 	.word	0x0800e084
 80033f0:	0800e088 	.word	0x0800e088
 80033f4:	00000000 	.word	0x00000000
 80033f8:	20000618 	.word	0x20000618

080033fc <Robot_TurnRight90Inplace>:

void Robot_TurnRight90Inplace(){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <Robot_TurnRight90Inplace+0x44>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f002 f9af 	bl	8005768 <HAL_Delay>
	Motion_SpinTurn(&motion, -87, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 800340a:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <Robot_TurnRight90Inplace+0x48>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003416:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <Robot_TurnRight90Inplace+0x4c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	ee07 3a10 	vmov	s14, r3
 800341e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003422:	eeb0 1a47 	vmov.f32	s2, s14
 8003426:	eef0 0a67 	vmov.f32	s1, s15
 800342a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800344c <Robot_TurnRight90Inplace+0x50>
 800342e:	4808      	ldr	r0, [pc, #32]	@ (8003450 <Robot_TurnRight90Inplace+0x54>)
 8003430:	f7ff f846 	bl	80024c0 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 8003434:	4806      	ldr	r0, [pc, #24]	@ (8003450 <Robot_TurnRight90Inplace+0x54>)
 8003436:	f7fe ff80 	bl	800233a <Motion_ResetDriveSystem>
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	0800e098 	.word	0x0800e098
 8003444:	0800e08c 	.word	0x0800e08c
 8003448:	0800e090 	.word	0x0800e090
 800344c:	c2ae0000 	.word	0xc2ae0000
 8003450:	20000618 	.word	0x20000618

08003454 <robot_TurnRight180Inplace>:

void robot_TurnRight180Inplace(){
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003458:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <robot_TurnRight180Inplace+0x44>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f002 f983 	bl	8005768 <HAL_Delay>
	Motion_SpinTurn(&motion, -180, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 8003462:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <robot_TurnRight180Inplace+0x48>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346e:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <robot_TurnRight180Inplace+0x4c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	ee07 3a10 	vmov	s14, r3
 8003476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800347a:	eeb0 1a47 	vmov.f32	s2, s14
 800347e:	eef0 0a67 	vmov.f32	s1, s15
 8003482:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80034a4 <robot_TurnRight180Inplace+0x50>
 8003486:	4808      	ldr	r0, [pc, #32]	@ (80034a8 <robot_TurnRight180Inplace+0x54>)
 8003488:	f7ff f81a 	bl	80024c0 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 800348c:	4806      	ldr	r0, [pc, #24]	@ (80034a8 <robot_TurnRight180Inplace+0x54>)
 800348e:	f7fe ff54 	bl	800233a <Motion_ResetDriveSystem>
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	0800e098 	.word	0x0800e098
 800349c:	0800e08c 	.word	0x0800e08c
 80034a0:	0800e090 	.word	0x0800e090
 80034a4:	c3340000 	.word	0xc3340000
 80034a8:	20000618 	.word	0x20000618

080034ac <Robot_TurnLeft90Inplace>:

void Robot_TurnLeft90Inplace(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <Robot_TurnLeft90Inplace+0x4c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 f957 	bl	8005768 <HAL_Delay>
	Motion_SpinTurn(&motion, 86, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <Robot_TurnLeft90Inplace+0x50>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <Robot_TurnLeft90Inplace+0x54>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	ee07 3a10 	vmov	s14, r3
 80034ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034d2:	eeb0 1a47 	vmov.f32	s2, s14
 80034d6:	eef0 0a67 	vmov.f32	s1, s15
 80034da:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003504 <Robot_TurnLeft90Inplace+0x58>
 80034de:	480a      	ldr	r0, [pc, #40]	@ (8003508 <Robot_TurnLeft90Inplace+0x5c>)
 80034e0:	f7fe ffee 	bl	80024c0 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 80034e4:	4808      	ldr	r0, [pc, #32]	@ (8003508 <Robot_TurnLeft90Inplace+0x5c>)
 80034e6:	f7fe ff28 	bl	800233a <Motion_ResetDriveSystem>
	HAL_Delay(MOTION_DELAY);
 80034ea:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <Robot_TurnLeft90Inplace+0x4c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 f93a 	bl	8005768 <HAL_Delay>
}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	0800e098 	.word	0x0800e098
 80034fc:	0800e08c 	.word	0x0800e08c
 8003500:	0800e090 	.word	0x0800e090
 8003504:	42ac0000 	.word	0x42ac0000
 8003508:	20000618 	.word	0x20000618

0800350c <Robot_moveForwardUntillFrontWall>:


float Robot_moveForwardUntillFrontWall(){
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
	 set_steering_mode(STEERING_OFF_READIR);
 8003510:	2005      	movs	r0, #5
 8003512:	f000 f8f7 	bl	8003704 <set_steering_mode>
	    Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 8003516:	4b17      	ldr	r3, [pc, #92]	@ (8003574 <Robot_moveForwardUntillFrontWall+0x68>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003522:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <Robot_moveForwardUntillFrontWall+0x6c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	ee07 3a10 	vmov	s14, r3
 800352a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800352e:	eef0 1a47 	vmov.f32	s3, s14
 8003532:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800357c <Robot_moveForwardUntillFrontWall+0x70>
 8003536:	eef0 0a67 	vmov.f32	s1, s15
 800353a:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8003580 <Robot_moveForwardUntillFrontWall+0x74>
 800353e:	4811      	ldr	r0, [pc, #68]	@ (8003584 <Robot_moveForwardUntillFrontWall+0x78>)
 8003540:	f7fe ff53 	bl	80023ea <Motion_StartMove>
	    while(!see_front_wall){
 8003544:	bf00      	nop
 8003546:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <Robot_moveForwardUntillFrontWall+0x7c>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0fa      	beq.n	8003546 <Robot_moveForwardUntillFrontWall+0x3a>
		}
	    Motion_StopAfter(&motion, 100);
 8003550:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 800358c <Robot_moveForwardUntillFrontWall+0x80>
 8003554:	480b      	ldr	r0, [pc, #44]	@ (8003584 <Robot_moveForwardUntillFrontWall+0x78>)
 8003556:	f7fe ffe3 	bl	8002520 <Motion_StopAfter>
		set_steering_mode(STEERING_OFF);
 800355a:	2003      	movs	r0, #3
 800355c:	f000 f8d2 	bl	8003704 <set_steering_mode>
		Motion_ResetDriveSystem(&motion);
 8003560:	4808      	ldr	r0, [pc, #32]	@ (8003584 <Robot_moveForwardUntillFrontWall+0x78>)
 8003562:	f7fe feea 	bl	800233a <Motion_ResetDriveSystem>

		return 1.00;
 8003566:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800356a:	ee07 3a90 	vmov	s15, r3
}
 800356e:	eeb0 0a67 	vmov.f32	s0, s15
 8003572:	bd80      	pop	{r7, pc}
 8003574:	0800e084 	.word	0x0800e084
 8003578:	0800e088 	.word	0x0800e088
 800357c:	00000000 	.word	0x00000000
 8003580:	44bb8000 	.word	0x44bb8000
 8003584:	20000618 	.word	0x20000618
 8003588:	20000724 	.word	0x20000724
 800358c:	42c80000 	.word	0x42c80000

08003590 <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 8003596:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <DetectJunction+0x94>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e00e      	b.n	80035c0 <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 80035a2:	4a21      	ldr	r2, [pc, #132]	@ (8003628 <DetectJunction+0x98>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035aa:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80035ae:	d904      	bls.n	80035ba <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 80035b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <DetectJunction+0x94>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003624 <DetectJunction+0x94>)
 80035b8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3301      	adds	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	dded      	ble.n	80035a2 <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 80035c6:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <DetectJunction+0x98>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 80035cc:	4b16      	ldr	r3, [pc, #88]	@ (8003628 <DetectJunction+0x98>)
 80035ce:	8a5b      	ldrh	r3, [r3, #18]
 80035d0:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 80035d2:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <DetectJunction+0x94>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	dd17      	ble.n	800360a <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80035e0:	dd05      	ble.n	80035ee <DetectJunction+0x5e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80035e8:	dd01      	ble.n	80035ee <DetectJunction+0x5e>
			return T_JUNCTION;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e014      	b.n	8003618 <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80035f4:	dd01      	ble.n	80035fa <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00e      	b.n	8003618 <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003600:	dd01      	ble.n	8003606 <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 8003602:	2302      	movs	r3, #2
 8003604:	e008      	b.n	8003618 <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 8003606:	2304      	movs	r3, #4
 8003608:	e006      	b.n	8003618 <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <DetectJunction+0x94>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <DetectJunction+0x86>
		return NO_LINE;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 8003616:	2304      	movs	r3, #4
	}
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	20000744 	.word	0x20000744
 8003628:	20000728 	.word	0x20000728

0800362c <get_steering_feedback>:
	rfs.raw = 0;
	rrs.raw = 0;
}


float get_steering_feedback() {
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <get_steering_feedback+0x18>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	ee07 3a90 	vmov	s15, r3
}
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	200006f8 	.word	0x200006f8

08003648 <CalculateSteeringAdjustment>:




/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
    float pTerm = STEERING_KP * m_cross_track_error;
 800364e:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <CalculateSteeringAdjustment+0xa0>)
 8003650:	ed93 7a00 	vldr	s14, [r3]
 8003654:	4b25      	ldr	r3, [pc, #148]	@ (80036ec <CalculateSteeringAdjustment+0xa4>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365e:	edc7 7a03 	vstr	s15, [r7, #12]
    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 8003662:	4b22      	ldr	r3, [pc, #136]	@ (80036ec <CalculateSteeringAdjustment+0xa4>)
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <CalculateSteeringAdjustment+0xa8>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003672:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <CalculateSteeringAdjustment+0xac>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367c:	edc7 7a02 	vstr	s15, [r7, #8]
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 8003680:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <CalculateSteeringAdjustment+0xb0>)
 8003682:	ed93 7a00 	vldr	s14, [r3]
 8003686:	edd7 7a02 	vldr	s15, [r7, #8]
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 800369a:	4b18      	ldr	r3, [pc, #96]	@ (80036fc <CalculateSteeringAdjustment+0xb4>)
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	eef1 7a67 	vneg.f32	s15, s15
 80036a4:	eef0 0a67 	vmov.f32	s1, s15
 80036a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80036ac:	f00a fbae 	bl	800de0c <fmaxf>
 80036b0:	eeb0 7a40 	vmov.f32	s14, s0
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <CalculateSteeringAdjustment+0xb4>)
 80036b6:	edd3 7a00 	vldr	s15, [r3]
 80036ba:	eef0 0a67 	vmov.f32	s1, s15
 80036be:	eeb0 0a47 	vmov.f32	s0, s14
 80036c2:	f00a fbc0 	bl	800de46 <fminf>
 80036c6:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 80036ca:	4b08      	ldr	r3, [pc, #32]	@ (80036ec <CalculateSteeringAdjustment+0xa4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a08      	ldr	r2, [pc, #32]	@ (80036f0 <CalculateSteeringAdjustment+0xa8>)
 80036d0:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 80036d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003700 <CalculateSteeringAdjustment+0xb8>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6013      	str	r3, [r2, #0]
    return adjustment;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	ee07 3a90 	vmov	s15, r3
}
 80036de:	eeb0 0a67 	vmov.f32	s0, s15
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	0800e070 	.word	0x0800e070
 80036ec:	200006f4 	.word	0x200006f4
 80036f0:	200006f0 	.word	0x200006f0
 80036f4:	0800e074 	.word	0x0800e074
 80036f8:	0800e04c 	.word	0x0800e04c
 80036fc:	0800e078 	.word	0x0800e078
 8003700:	200006f8 	.word	0x200006f8

08003704 <set_steering_mode>:

void set_steering_mode(uint8_t mode){
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
	m_last_steering_error = m_cross_track_error;
 800370e:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <set_steering_mode+0x2c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a08      	ldr	r2, [pc, #32]	@ (8003734 <set_steering_mode+0x30>)
 8003714:	6013      	str	r3, [r2, #0]
	m_steering_adjustment = 0;
 8003716:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <set_steering_mode+0x34>)
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
	g_steering_mode = mode;
 800371e:	4a07      	ldr	r2, [pc, #28]	@ (800373c <set_steering_mode+0x38>)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	7013      	strb	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	200006f4 	.word	0x200006f4
 8003734:	200006f0 	.word	0x200006f0
 8003738:	200006f8 	.word	0x200006f8
 800373c:	20000060 	.word	0x20000060

08003740 <Sensors_Update>:




/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	int error = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 800374a:	4b2b      	ldr	r3, [pc, #172]	@ (80037f8 <Sensors_Update+0xb8>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b07      	cmp	r3, #7
 8003752:	d114      	bne.n	800377e <Sensors_Update+0x3e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003754:	4929      	ldr	r1, [pc, #164]	@ (80037fc <Sensors_Update+0xbc>)
 8003756:	482a      	ldr	r0, [pc, #168]	@ (8003800 <Sensors_Update+0xc0>)
 8003758:	f7ff fb4a 	bl	8002df0 <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 800375c:	4927      	ldr	r1, [pc, #156]	@ (80037fc <Sensors_Update+0xbc>)
 800375e:	4828      	ldr	r0, [pc, #160]	@ (8003800 <Sensors_Update+0xc0>)
 8003760:	f7ff fbf7 	bl	8002f52 <RAYKHA_GetPositionForPID>
 8003764:	4603      	mov	r3, r0
 8003766:	4a27      	ldr	r2, [pc, #156]	@ (8003804 <Sensors_Update+0xc4>)
 8003768:	6013      	str	r3, [r2, #0]

		error = line_position;
 800376a:	4b26      	ldr	r3, [pc, #152]	@ (8003804 <Sensors_Update+0xc4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	607b      	str	r3, [r7, #4]

		junction = DetectJunction();
 8003770:	f7ff ff0e 	bl	8003590 <DetectJunction>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	4b23      	ldr	r3, [pc, #140]	@ (8003808 <Sensors_Update+0xc8>)
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e02d      	b.n	80037da <Sensors_Update+0x9a>
	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <Sensors_Update+0xb8>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b04      	cmp	r3, #4
 8003786:	d111      	bne.n	80037ac <Sensors_Update+0x6c>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003788:	491c      	ldr	r1, [pc, #112]	@ (80037fc <Sensors_Update+0xbc>)
 800378a:	481d      	ldr	r0, [pc, #116]	@ (8003800 <Sensors_Update+0xc0>)
 800378c:	f7ff fb30 	bl	8002df0 <RAYKHA_ReadCalibrated>
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8003790:	491a      	ldr	r1, [pc, #104]	@ (80037fc <Sensors_Update+0xbc>)
 8003792:	481b      	ldr	r0, [pc, #108]	@ (8003800 <Sensors_Update+0xc0>)
 8003794:	f7ff fbdd 	bl	8002f52 <RAYKHA_GetPositionForPID>
 8003798:	4603      	mov	r3, r0
 800379a:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <Sensors_Update+0xc4>)
 800379c:	6013      	str	r3, [r2, #0]
		junction = DetectJunction();
 800379e:	f7ff fef7 	bl	8003590 <DetectJunction>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b18      	ldr	r3, [pc, #96]	@ (8003808 <Sensors_Update+0xc8>)
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e016      	b.n	80037da <Sensors_Update+0x9a>
	}
	else if(g_steering_mode == STEER_LEFT_WALL){
 80037ac:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <Sensors_Update+0xb8>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <Sensors_Update+0x7c>
		RangeAllIRSensors();
 80037b6:	f000 f82b 	bl	8003810 <RangeAllIRSensors>
 80037ba:	e00e      	b.n	80037da <Sensors_Update+0x9a>
		//UART_Transmit_Int(&huart6, ">R", rws.value);



    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 80037bc:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <Sensors_Update+0xb8>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d102      	bne.n	80037cc <Sensors_Update+0x8c>

		error = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	e006      	b.n	80037da <Sensors_Update+0x9a>
    }
    else if(g_steering_mode == STEERING_OFF_READIR){
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <Sensors_Update+0xb8>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d101      	bne.n	80037da <Sensors_Update+0x9a>
    	RangeAllIRSensors();
 80037d6:	f000 f81b 	bl	8003810 <RangeAllIRSensors>

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e4:	4b09      	ldr	r3, [pc, #36]	@ (800380c <Sensors_Update+0xcc>)
 80037e6:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 80037ea:	f7ff ff2d 	bl	8003648 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000060 	.word	0x20000060
 80037fc:	200005ec 	.word	0x200005ec
 8003800:	20000728 	.word	0x20000728
 8003804:	2000073c 	.word	0x2000073c
 8003808:	20000740 	.word	0x20000740
 800380c:	200006f4 	.word	0x200006f4

08003810 <RangeAllIRSensors>:


void RangeAllIRSensors(void){
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	analogReadIRs();
 8003814:	f7fe f8a6 	bl	8001964 <analogReadIRs>

	lfs.raw = readRawIR(IR_LEFT_FORWARD);
 8003818:	2001      	movs	r0, #1
 800381a:	f7fe f8c1 	bl	80019a0 <readRawIR>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <RangeAllIRSensors+0x194>)
 8003824:	801a      	strh	r2, [r3, #0]
	lrs.raw = readRawIR(IR_LEFT_BACK);
 8003826:	2002      	movs	r0, #2
 8003828:	f7fe f8ba 	bl	80019a0 <readRawIR>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	4b5d      	ldr	r3, [pc, #372]	@ (80039a8 <RangeAllIRSensors+0x198>)
 8003832:	801a      	strh	r2, [r3, #0]

	fs.raw = readRawIR(IR_FRONT);
 8003834:	2000      	movs	r0, #0
 8003836:	f7fe f8b3 	bl	80019a0 <readRawIR>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	4b5b      	ldr	r3, [pc, #364]	@ (80039ac <RangeAllIRSensors+0x19c>)
 8003840:	801a      	strh	r2, [r3, #0]

	rfs.raw = readRawIR(IR_RIGHT_FORWARD);
 8003842:	2004      	movs	r0, #4
 8003844:	f7fe f8ac 	bl	80019a0 <readRawIR>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	4b58      	ldr	r3, [pc, #352]	@ (80039b0 <RangeAllIRSensors+0x1a0>)
 800384e:	801a      	strh	r2, [r3, #0]
	rrs.raw = readRawIR(IR_RIGHT_BACK);
 8003850:	2003      	movs	r0, #3
 8003852:	f7fe f8a5 	bl	80019a0 <readRawIR>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4b56      	ldr	r3, [pc, #344]	@ (80039b4 <RangeAllIRSensors+0x1a4>)
 800385c:	801a      	strh	r2, [r3, #0]


	if(lfs.raw < 400)lfs.raw = 400;
 800385e:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <RangeAllIRSensors+0x194>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003868:	d203      	bcs.n	8003872 <RangeAllIRSensors+0x62>
 800386a:	4b4e      	ldr	r3, [pc, #312]	@ (80039a4 <RangeAllIRSensors+0x194>)
 800386c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003870:	801a      	strh	r2, [r3, #0]
	if(lrs.raw < 300)lrs.raw = 300;
 8003872:	4b4d      	ldr	r3, [pc, #308]	@ (80039a8 <RangeAllIRSensors+0x198>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800387c:	d203      	bcs.n	8003886 <RangeAllIRSensors+0x76>
 800387e:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <RangeAllIRSensors+0x198>)
 8003880:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003884:	801a      	strh	r2, [r3, #0]

	if(fs.raw < 400)fs.raw = 400;
 8003886:	4b49      	ldr	r3, [pc, #292]	@ (80039ac <RangeAllIRSensors+0x19c>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003890:	d203      	bcs.n	800389a <RangeAllIRSensors+0x8a>
 8003892:	4b46      	ldr	r3, [pc, #280]	@ (80039ac <RangeAllIRSensors+0x19c>)
 8003894:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003898:	801a      	strh	r2, [r3, #0]

	if(rfs.raw < 350)rfs.raw = 350;
 800389a:	4b45      	ldr	r3, [pc, #276]	@ (80039b0 <RangeAllIRSensors+0x1a0>)
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80038a4:	d203      	bcs.n	80038ae <RangeAllIRSensors+0x9e>
 80038a6:	4b42      	ldr	r3, [pc, #264]	@ (80039b0 <RangeAllIRSensors+0x1a0>)
 80038a8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80038ac:	801a      	strh	r2, [r3, #0]
	if(rrs.raw < 200)rrs.raw = 200;
 80038ae:	4b41      	ldr	r3, [pc, #260]	@ (80039b4 <RangeAllIRSensors+0x1a4>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80038b6:	d802      	bhi.n	80038be <RangeAllIRSensors+0xae>
 80038b8:	4b3e      	ldr	r3, [pc, #248]	@ (80039b4 <RangeAllIRSensors+0x1a4>)
 80038ba:	22c8      	movs	r2, #200	@ 0xc8
 80038bc:	801a      	strh	r2, [r3, #0]


	lfs.value = getIRDistance(IR_LEFT_FORWARD, lfs.raw);
 80038be:	4b39      	ldr	r3, [pc, #228]	@ (80039a4 <RangeAllIRSensors+0x194>)
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	2001      	movs	r0, #1
 80038c8:	f7fe f89a 	bl	8001a00 <getIRDistance>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b34      	ldr	r3, [pc, #208]	@ (80039a4 <RangeAllIRSensors+0x194>)
 80038d2:	605a      	str	r2, [r3, #4]
	lrs.value = getIRDistance(IR_LEFT_BACK, lrs.raw);
 80038d4:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <RangeAllIRSensors+0x198>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4619      	mov	r1, r3
 80038dc:	2002      	movs	r0, #2
 80038de:	f7fe f88f 	bl	8001a00 <getIRDistance>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b30      	ldr	r3, [pc, #192]	@ (80039a8 <RangeAllIRSensors+0x198>)
 80038e8:	605a      	str	r2, [r3, #4]

	fs.value = getIRDistance(IR_FRONT, fs.raw);
 80038ea:	4b30      	ldr	r3, [pc, #192]	@ (80039ac <RangeAllIRSensors+0x19c>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7fe f884 	bl	8001a00 <getIRDistance>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b2b      	ldr	r3, [pc, #172]	@ (80039ac <RangeAllIRSensors+0x19c>)
 80038fe:	605a      	str	r2, [r3, #4]

	rfs.value = getIRDistance(IR_RIGHT_FORWARD, rfs.raw);
 8003900:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <RangeAllIRSensors+0x1a0>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	4619      	mov	r1, r3
 8003908:	2004      	movs	r0, #4
 800390a:	f7fe f879 	bl	8001a00 <getIRDistance>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	4b27      	ldr	r3, [pc, #156]	@ (80039b0 <RangeAllIRSensors+0x1a0>)
 8003914:	605a      	str	r2, [r3, #4]
	rrs.value = getIRDistance(IR_RIGHT_BACK, rrs.raw);
 8003916:	4b27      	ldr	r3, [pc, #156]	@ (80039b4 <RangeAllIRSensors+0x1a4>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	4619      	mov	r1, r3
 800391e:	2003      	movs	r0, #3
 8003920:	f7fe f86e 	bl	8001a00 <getIRDistance>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	4b22      	ldr	r3, [pc, #136]	@ (80039b4 <RangeAllIRSensors+0x1a4>)
 800392a:	605a      	str	r2, [r3, #4]

	left_wall_avg = 0.5 * (lfs.value + lrs.value);
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <RangeAllIRSensors+0x194>)
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <RangeAllIRSensors+0x198>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4413      	add	r3, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fe14 	bl	8000564 <__aeabi_i2d>
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <RangeAllIRSensors+0x1a8>)
 8003942:	f7fc fe79 	bl	8000638 <__aeabi_dmul>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	f7fd f94b 	bl	8000be8 <__aeabi_d2uiz>
 8003952:	4603      	mov	r3, r0
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <RangeAllIRSensors+0x1ac>)
 8003958:	701a      	strb	r2, [r3, #0]
	right_wall_avg = 0.5 * (rfs.value + rrs.value);
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <RangeAllIRSensors+0x1a0>)
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <RangeAllIRSensors+0x1a4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4413      	add	r3, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f7fc fdfd 	bl	8000564 <__aeabi_i2d>
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <RangeAllIRSensors+0x1a8>)
 8003970:	f7fc fe62 	bl	8000638 <__aeabi_dmul>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	f7fd f934 	bl	8000be8 <__aeabi_d2uiz>
 8003980:	4603      	mov	r3, r0
 8003982:	b2da      	uxtb	r2, r3
 8003984:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <RangeAllIRSensors+0x1b0>)
 8003986:	701a      	strb	r2, [r3, #0]

//	see_left_wall = (left_wall_avg < LEFT_THRESHOLD);
//	see_right_wall = (right_wall_avg < RIGHT_THRESHOLD);
	see_front_wall = (fs.value < FRONT_THRESHOLD);
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <RangeAllIRSensors+0x19c>)
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4b0d      	ldr	r3, [pc, #52]	@ (80039c4 <RangeAllIRSensors+0x1b4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	bfb4      	ite	lt
 8003994:	2301      	movlt	r3, #1
 8003996:	2300      	movge	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <RangeAllIRSensors+0x1b8>)
 800399e:	701a      	strb	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200006fc 	.word	0x200006fc
 80039a8:	20000704 	.word	0x20000704
 80039ac:	2000070c 	.word	0x2000070c
 80039b0:	20000714 	.word	0x20000714
 80039b4:	2000071c 	.word	0x2000071c
 80039b8:	3fe00000 	.word	0x3fe00000
 80039bc:	20000725 	.word	0x20000725
 80039c0:	20000726 	.word	0x20000726
 80039c4:	0800e094 	.word	0x0800e094
 80039c8:	20000724 	.word	0x20000724

080039cc <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 80039d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <Servo_Init+0x3c>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d110      	bne.n	8003a00 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f9c7 	bl	8004d74 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 80039e6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80039ea:	2100      	movs	r1, #0
 80039ec:	4807      	ldr	r0, [pc, #28]	@ (8003a0c <Servo_Init+0x40>)
 80039ee:	f008 f92c 	bl	800bc4a <memset>
    servoCount = 0;
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <Servo_Init+0x44>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 80039f8:	4b03      	ldr	r3, [pc, #12]	@ (8003a08 <Servo_Init+0x3c>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e000      	b.n	8003a02 <Servo_Init+0x36>
        return;
 8003a00:	bf00      	nop
}
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000989 	.word	0x20000989
 8003a0c:	20000748 	.word	0x20000748
 8003a10:	20000988 	.word	0x20000988

08003a14 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle, float init_angle)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6139      	str	r1, [r7, #16]
 8003a1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a22:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a26:	ed87 1a01 	vstr	s2, [r7, #4]
 8003a2a:	75fb      	strb	r3, [r7, #23]
    // Check if initialized
    if (!isInitialized)
 8003a2c:	4b69      	ldr	r3, [pc, #420]	@ (8003bd4 <Servo_Register+0x1c0>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <Servo_Register+0x26>
        return -1;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	e0c7      	b.n	8003bca <Servo_Register+0x1b6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8003a3a:	4b67      	ldr	r3, [pc, #412]	@ (8003bd8 <Servo_Register+0x1c4>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	d902      	bls.n	8003a48 <Servo_Register+0x34>
        return -1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	e0c0      	b.n	8003bca <Servo_Register+0x1b6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	d902      	bls.n	8003a54 <Servo_Register+0x40>
        return -1;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	e0ba      	b.n	8003bca <Servo_Register+0x1b6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	e01b      	b.n	8003a92 <Servo_Register+0x7e>
        if (servos[i].initialized && servos[i].channel == channel)
 8003a5a:	4960      	ldr	r1, [pc, #384]	@ (8003bdc <Servo_Register+0x1c8>)
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3310      	adds	r3, #16
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <Servo_Register+0x78>
 8003a70:	495a      	ldr	r1, [pc, #360]	@ (8003bdc <Servo_Register+0x1c8>)
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	7dfa      	ldrb	r2, [r7, #23]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d102      	bne.n	8003a8c <Servo_Register+0x78>
            return -1;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	e09e      	b.n	8003bca <Servo_Register+0x1b6>
    for (int i = 0; i < servoCount; i++) {
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	4b51      	ldr	r3, [pc, #324]	@ (8003bd8 <Servo_Register+0x1c4>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	dbdd      	blt.n	8003a5a <Servo_Register+0x46>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8003a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	d502      	bpl.n	8003ab2 <Servo_Register+0x9e>
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 8003ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ab6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003be0 <Servo_Register+0x1cc>
 8003aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac2:	dd01      	ble.n	8003ac8 <Servo_Register+0xb4>
 8003ac4:	4b47      	ldr	r3, [pc, #284]	@ (8003be4 <Servo_Register+0x1d0>)
 8003ac6:	60bb      	str	r3, [r7, #8]
    if (minAngle >= maxAngle) return -1;
 8003ac8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003acc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	db02      	blt.n	8003ae0 <Servo_Register+0xcc>
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	e074      	b.n	8003bca <Servo_Register+0x1b6>

    // Register the servo
    int servoId = servoCount;
 8003ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <Servo_Register+0x1c4>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
    servos[servoId].channel = channel;
 8003ae6:	493d      	ldr	r1, [pc, #244]	@ (8003bdc <Servo_Register+0x1c8>)
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	7dfa      	ldrb	r2, [r7, #23]
 8003af6:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8003af8:	4938      	ldr	r1, [pc, #224]	@ (8003bdc <Servo_Register+0x1c8>)
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3304      	adds	r3, #4
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8003b0c:	4933      	ldr	r1, [pc, #204]	@ (8003bdc <Servo_Register+0x1c8>)
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	601a      	str	r2, [r3, #0]
    //servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
    servos[servoId].currentAngle = init_angle;
 8003b20:	492e      	ldr	r1, [pc, #184]	@ (8003bdc <Servo_Register+0x1c8>)
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	330c      	adds	r3, #12
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	601a      	str	r2, [r3, #0]
    servos[servoId].initialized = 1;
 8003b34:	4929      	ldr	r1, [pc, #164]	@ (8003bdc <Servo_Register+0x1c8>)
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3310      	adds	r3, #16
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <Servo_Register+0x16c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	3310      	adds	r3, #16
 8003b5a:	4a20      	ldr	r2, [pc, #128]	@ (8003bdc <Servo_Register+0x1c8>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3301      	adds	r3, #1
 8003b60:	220f      	movs	r2, #15
 8003b62:	6939      	ldr	r1, [r7, #16]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f008 f878 	bl	800bc5a <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8003b6a:	491c      	ldr	r1, [pc, #112]	@ (8003bdc <Servo_Register+0x1c8>)
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3320      	adds	r3, #32
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	e00d      	b.n	8003b9c <Servo_Register+0x188>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	3310      	adds	r3, #16
 8003b8c:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <Servo_Register+0x1c8>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	1c58      	adds	r0, r3, #1
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <Servo_Register+0x1d4>)
 8003b96:	2110      	movs	r1, #16
 8003b98:	f007 ffbc 	bl	800bb14 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd8 <Servo_Register+0x1c4>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <Servo_Register+0x1c4>)
 8003ba6:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8003ba8:	490c      	ldr	r1, [pc, #48]	@ (8003bdc <Servo_Register+0x1c8>)
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f91c 	bl	8004e00 <PCA9685_SetServoAngle>

    return servoId;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000989 	.word	0x20000989
 8003bd8:	20000988 	.word	0x20000988
 8003bdc:	20000748 	.word	0x20000748
 8003be0:	43340000 	.word	0x43340000
 8003be4:	43340000 	.word	0x43340000
 8003be8:	0800e004 	.word	0x0800e004

08003bec <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	db10      	blt.n	8003c20 <Servo_SetAngle+0x34>
 8003bfe:	4b33      	ldr	r3, [pc, #204]	@ (8003ccc <Servo_SetAngle+0xe0>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4293      	cmp	r3, r2
 8003c08:	da0a      	bge.n	8003c20 <Servo_SetAngle+0x34>
 8003c0a:	4931      	ldr	r1, [pc, #196]	@ (8003cd0 <Servo_SetAngle+0xe4>)
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3310      	adds	r3, #16
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <Servo_SetAngle+0x3a>
        return -1;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
 8003c24:	e04d      	b.n	8003cc2 <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8003c26:	492a      	ldr	r1, [pc, #168]	@ (8003cd0 <Servo_SetAngle+0xe4>)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	3304      	adds	r3, #4
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ed97 7a00 	vldr	s14, [r7]
 8003c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c46:	d509      	bpl.n	8003c5c <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8003c48:	4921      	ldr	r1, [pc, #132]	@ (8003cd0 <Servo_SetAngle+0xe4>)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	3304      	adds	r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8003c5c:	491c      	ldr	r1, [pc, #112]	@ (8003cd0 <Servo_SetAngle+0xe4>)
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ed97 7a00 	vldr	s14, [r7]
 8003c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	dd09      	ble.n	8003c92 <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 8003c7e:	4914      	ldr	r1, [pc, #80]	@ (8003cd0 <Servo_SetAngle+0xe4>)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 8003c92:	490f      	ldr	r1, [pc, #60]	@ (8003cd0 <Servo_SetAngle+0xe4>)
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8003ca6:	490a      	ldr	r1, [pc, #40]	@ (8003cd0 <Servo_SetAngle+0xe4>)
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	ed97 0a00 	vldr	s0, [r7]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f8a0 	bl	8004e00 <PCA9685_SetServoAngle>

    return 0;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000988 	.word	0x20000988
 8003cd0:	20000748 	.word	0x20000748

08003cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <HAL_MspInit+0x4c>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8003d20 <HAL_MspInit+0x4c>)
 8003ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <HAL_MspInit+0x4c>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <HAL_MspInit+0x4c>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	4a08      	ldr	r2, [pc, #32]	@ (8003d20 <HAL_MspInit+0x4c>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_MspInit+0x4c>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d12:	2007      	movs	r0, #7
 8003d14:	f002 fa2c 	bl	8006170 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	@ 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <HAL_ADC_MspInit+0x7c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d127      	bne.n	8003d96 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <HAL_ADC_MspInit+0x80>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <HAL_ADC_MspInit+0x80>)
 8003d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d56:	4b13      	ldr	r3, [pc, #76]	@ (8003da4 <HAL_ADC_MspInit+0x80>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <HAL_ADC_MspInit+0x80>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003da4 <HAL_ADC_MspInit+0x80>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d72:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <HAL_ADC_MspInit+0x80>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d82:	2303      	movs	r3, #3
 8003d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4805      	ldr	r0, [pc, #20]	@ (8003da8 <HAL_ADC_MspInit+0x84>)
 8003d92:	f002 fdab 	bl	80068ec <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003d96:	bf00      	nop
 8003d98:	3728      	adds	r7, #40	@ 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40012000 	.word	0x40012000
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020800 	.word	0x40020800

08003dac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	@ 0x30
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 031c 	add.w	r3, r7, #28
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a42      	ldr	r2, [pc, #264]	@ (8003ed4 <HAL_I2C_MspInit+0x128>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d12c      	bne.n	8003e28 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	4b41      	ldr	r3, [pc, #260]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4a40      	ldr	r2, [pc, #256]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dea:	23c0      	movs	r3, #192	@ 0xc0
 8003dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dee:	2312      	movs	r3, #18
 8003df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df6:	2303      	movs	r3, #3
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	4619      	mov	r1, r3
 8003e04:	4835      	ldr	r0, [pc, #212]	@ (8003edc <HAL_I2C_MspInit+0x130>)
 8003e06:	f002 fd71 	bl	80068ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	4b32      	ldr	r3, [pc, #200]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	4a31      	ldr	r2, [pc, #196]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e26:	e050      	b.n	8003eca <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee0 <HAL_I2C_MspInit+0x134>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d14b      	bne.n	8003eca <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e42:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	4a20      	ldr	r2, [pc, #128]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e70:	2312      	movs	r3, #18
 8003e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e80:	f107 031c 	add.w	r3, r7, #28
 8003e84:	4619      	mov	r1, r3
 8003e86:	4815      	ldr	r0, [pc, #84]	@ (8003edc <HAL_I2C_MspInit+0x130>)
 8003e88:	f002 fd30 	bl	80068ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e92:	2312      	movs	r3, #18
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea2:	f107 031c 	add.w	r3, r7, #28
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	480e      	ldr	r0, [pc, #56]	@ (8003ee4 <HAL_I2C_MspInit+0x138>)
 8003eaa:	f002 fd1f 	bl	80068ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003eb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_I2C_MspInit+0x12c>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
}
 8003eca:	bf00      	nop
 8003ecc:	3730      	adds	r7, #48	@ 0x30
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40005400 	.word	0x40005400
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020400 	.word	0x40020400
 8003ee0:	40005800 	.word	0x40005800
 8003ee4:	40020800 	.word	0x40020800

08003ee8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	@ 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a32      	ldr	r2, [pc, #200]	@ (8003fd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d12d      	bne.n	8003f66 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	4b31      	ldr	r3, [pc, #196]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	4a30      	ldr	r2, [pc, #192]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	4a29      	ldr	r2, [pc, #164]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f36:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003f42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f54:	2301      	movs	r3, #1
 8003f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	481e      	ldr	r0, [pc, #120]	@ (8003fd8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003f60:	f002 fcc4 	bl	80068ec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f64:	e030      	b.n	8003fc8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6e:	d12b      	bne.n	8003fc8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	4b17      	ldr	r3, [pc, #92]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	4a16      	ldr	r2, [pc, #88]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f80:	4b14      	ldr	r3, [pc, #80]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fac:	2302      	movs	r3, #2
 8003fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbc:	f107 031c 	add.w	r3, r7, #28
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4805      	ldr	r0, [pc, #20]	@ (8003fd8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003fc4:	f002 fc92 	bl	80068ec <HAL_GPIO_Init>
}
 8003fc8:	bf00      	nop
 8003fca:	3730      	adds	r7, #48	@ 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40020000 	.word	0x40020000

08003fdc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8004018 <HAL_TIM_PWM_MspInit+0x3c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10d      	bne.n	800400a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <HAL_TIM_PWM_MspInit+0x40>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	4a09      	ldr	r2, [pc, #36]	@ (800401c <HAL_TIM_PWM_MspInit+0x40>)
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffe:	4b07      	ldr	r3, [pc, #28]	@ (800401c <HAL_TIM_PWM_MspInit+0x40>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40000400 	.word	0x40000400
 800401c:	40023800 	.word	0x40023800

08004020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	@ 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a21      	ldr	r2, [pc, #132]	@ (80040c4 <HAL_TIM_MspPostInit+0xa4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d13b      	bne.n	80040ba <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <HAL_TIM_MspPostInit+0xa8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <HAL_TIM_MspPostInit+0xa8>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6313      	str	r3, [r2, #48]	@ 0x30
 8004052:	4b1d      	ldr	r3, [pc, #116]	@ (80040c8 <HAL_TIM_MspPostInit+0xa8>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	4b19      	ldr	r3, [pc, #100]	@ (80040c8 <HAL_TIM_MspPostInit+0xa8>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	4a18      	ldr	r2, [pc, #96]	@ (80040c8 <HAL_TIM_MspPostInit+0xa8>)
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	6313      	str	r3, [r2, #48]	@ 0x30
 800406e:	4b16      	ldr	r3, [pc, #88]	@ (80040c8 <HAL_TIM_MspPostInit+0xa8>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800407a:	23c0      	movs	r3, #192	@ 0xc0
 800407c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004086:	2300      	movs	r3, #0
 8004088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800408a:	2302      	movs	r3, #2
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408e:	f107 0314 	add.w	r3, r7, #20
 8004092:	4619      	mov	r1, r3
 8004094:	480d      	ldr	r0, [pc, #52]	@ (80040cc <HAL_TIM_MspPostInit+0xac>)
 8004096:	f002 fc29 	bl	80068ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800409a:	2303      	movs	r3, #3
 800409c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a6:	2300      	movs	r3, #0
 80040a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040aa:	2302      	movs	r3, #2
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ae:	f107 0314 	add.w	r3, r7, #20
 80040b2:	4619      	mov	r1, r3
 80040b4:	4806      	ldr	r0, [pc, #24]	@ (80040d0 <HAL_TIM_MspPostInit+0xb0>)
 80040b6:	f002 fc19 	bl	80068ec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80040ba:	bf00      	nop
 80040bc:	3728      	adds	r7, #40	@ 0x28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40020400 	.word	0x40020400

080040d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08e      	sub	sp, #56	@ 0x38
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a66      	ldr	r2, [pc, #408]	@ (800428c <HAL_UART_MspInit+0x1b8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d12c      	bne.n	8004150 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	4b65      	ldr	r3, [pc, #404]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	4a64      	ldr	r2, [pc, #400]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004104:	6413      	str	r3, [r2, #64]	@ 0x40
 8004106:	4b62      	ldr	r3, [pc, #392]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	623b      	str	r3, [r7, #32]
 8004110:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	4b5e      	ldr	r3, [pc, #376]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	4a5d      	ldr	r2, [pc, #372]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6313      	str	r3, [r2, #48]	@ 0x30
 8004122:	4b5b      	ldr	r3, [pc, #364]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800412e:	230c      	movs	r3, #12
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413a:	2303      	movs	r3, #3
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800413e:	2307      	movs	r3, #7
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004146:	4619      	mov	r1, r3
 8004148:	4852      	ldr	r0, [pc, #328]	@ (8004294 <HAL_UART_MspInit+0x1c0>)
 800414a:	f002 fbcf 	bl	80068ec <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800414e:	e099      	b.n	8004284 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a50      	ldr	r2, [pc, #320]	@ (8004298 <HAL_UART_MspInit+0x1c4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d12d      	bne.n	80041b6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	4b4c      	ldr	r3, [pc, #304]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	4a4b      	ldr	r2, [pc, #300]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004168:	6413      	str	r3, [r2, #64]	@ 0x40
 800416a:	4b49      	ldr	r3, [pc, #292]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	4b45      	ldr	r3, [pc, #276]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	4a44      	ldr	r2, [pc, #272]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	6313      	str	r3, [r2, #48]	@ 0x30
 8004186:	4b42      	ldr	r3, [pc, #264]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8004192:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a0:	2303      	movs	r3, #3
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041a4:	2307      	movs	r3, #7
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ac:	4619      	mov	r1, r3
 80041ae:	483b      	ldr	r0, [pc, #236]	@ (800429c <HAL_UART_MspInit+0x1c8>)
 80041b0:	f002 fb9c 	bl	80068ec <HAL_GPIO_Init>
}
 80041b4:	e066      	b.n	8004284 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a39      	ldr	r2, [pc, #228]	@ (80042a0 <HAL_UART_MspInit+0x1cc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d161      	bne.n	8004284 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	4b32      	ldr	r3, [pc, #200]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 80041c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c8:	4a31      	ldr	r2, [pc, #196]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 80041ca:	f043 0320 	orr.w	r3, r3, #32
 80041ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80041d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ec:	4b28      	ldr	r3, [pc, #160]	@ (8004290 <HAL_UART_MspInit+0x1bc>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041f8:	23c0      	movs	r3, #192	@ 0xc0
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004204:	2303      	movs	r3, #3
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004208:	2308      	movs	r3, #8
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800420c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004210:	4619      	mov	r1, r3
 8004212:	4822      	ldr	r0, [pc, #136]	@ (800429c <HAL_UART_MspInit+0x1c8>)
 8004214:	f002 fb6a 	bl	80068ec <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004218:	4b22      	ldr	r3, [pc, #136]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 800421a:	4a23      	ldr	r2, [pc, #140]	@ (80042a8 <HAL_UART_MspInit+0x1d4>)
 800421c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800421e:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 8004220:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004224:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004226:	4b1f      	ldr	r3, [pc, #124]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800422c:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004232:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 8004234:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004238:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800423a:	4b1a      	ldr	r3, [pc, #104]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 800423c:	2200      	movs	r2, #0
 800423e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004240:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 8004242:	2200      	movs	r2, #0
 8004244:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004246:	4b17      	ldr	r3, [pc, #92]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 8004248:	2200      	movs	r2, #0
 800424a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800424c:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 800424e:	2200      	movs	r2, #0
 8004250:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004252:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 8004254:	2200      	movs	r2, #0
 8004256:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004258:	4812      	ldr	r0, [pc, #72]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 800425a:	f001 ffcb 	bl	80061f4 <HAL_DMA_Init>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8004264:	f7fe f836 	bl	80022d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a0e      	ldr	r2, [pc, #56]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 800426c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800426e:	4a0d      	ldr	r2, [pc, #52]	@ (80042a4 <HAL_UART_MspInit+0x1d0>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004274:	2200      	movs	r2, #0
 8004276:	2100      	movs	r1, #0
 8004278:	2047      	movs	r0, #71	@ 0x47
 800427a:	f001 ff84 	bl	8006186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800427e:	2047      	movs	r0, #71	@ 0x47
 8004280:	f001 ff9d 	bl	80061be <HAL_NVIC_EnableIRQ>
}
 8004284:	bf00      	nop
 8004286:	3738      	adds	r7, #56	@ 0x38
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40004400 	.word	0x40004400
 8004290:	40023800 	.word	0x40023800
 8004294:	40020000 	.word	0x40020000
 8004298:	40004800 	.word	0x40004800
 800429c:	40020800 	.word	0x40020800
 80042a0:	40011400 	.word	0x40011400
 80042a4:	20000588 	.word	0x20000588
 80042a8:	40026428 	.word	0x40026428

080042ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <NMI_Handler+0x4>

080042b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <HardFault_Handler+0x4>

080042bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <MemManage_Handler+0x4>

080042c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <BusFault_Handler+0x4>

080042cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <UsageFault_Handler+0x4>

080042d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004304:	f001 fa10 	bl	8005728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <SysTick_Handler+0x3c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	3301      	adds	r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <SysTick_Handler+0x3c>)
 8004314:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8004316:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <SysTick_Handler+0x40>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 8004320:	4b06      	ldr	r3, [pc, #24]	@ (800433c <SysTick_Handler+0x3c>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b13      	cmp	r3, #19
 8004328:	d904      	bls.n	8004334 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 800432a:	4b04      	ldr	r3, [pc, #16]	@ (800433c <SysTick_Handler+0x3c>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 8004330:	f000 f908 	bl	8004544 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8004334:	f000 f93e 	bl	80045b4 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}
 800433c:	2000098a 	.word	0x2000098a
 8004340:	200005e8 	.word	0x200005e8

08004344 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004348:	2008      	movs	r0, #8
 800434a:	f002 fc7d 	bl	8006c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}

08004352 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004356:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800435a:	f002 fc75 	bl	8006c48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800435e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004362:	f002 fc71 	bl	8006c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004370:	4802      	ldr	r0, [pc, #8]	@ (800437c <DMA2_Stream1_IRQHandler+0x10>)
 8004372:	f002 f87f 	bl	8006474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000588 	.word	0x20000588

08004380 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_IRQn 0 */
  //HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */


	HAL_UART_IRQHandler(&huart6);
 8004384:	4802      	ldr	r0, [pc, #8]	@ (8004390 <USART6_IRQHandler+0x10>)
 8004386:	f005 fedd 	bl	800a144 <HAL_UART_IRQHandler>


  /* USER CODE END USART6_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000540 	.word	0x20000540

08004394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return 1;
 8004398:	2301      	movs	r3, #1
}
 800439a:	4618      	mov	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <_kill>:

int _kill(int pid, int sig)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043ae:	f007 fcb1 	bl	800bd14 <__errno>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2216      	movs	r2, #22
 80043b6:	601a      	str	r2, [r3, #0]
  return -1;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_exit>:

void _exit (int status)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043cc:	f04f 31ff 	mov.w	r1, #4294967295
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ffe7 	bl	80043a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <_exit+0x12>

080043da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e00a      	b.n	8004402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043ec:	f3af 8000 	nop.w
 80043f0:	4601      	mov	r1, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	60ba      	str	r2, [r7, #8]
 80043f8:	b2ca      	uxtb	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3301      	adds	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	dbf0      	blt.n	80043ec <_read+0x12>
  }

  return len;
 800440a:	687b      	ldr	r3, [r7, #4]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e009      	b.n	800443a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	60ba      	str	r2, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3301      	adds	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	dbf1      	blt.n	8004426 <_write+0x12>
  }
  return len;
 8004442:	687b      	ldr	r3, [r7, #4]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <_close>:

int _close(int file)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004474:	605a      	str	r2, [r3, #4]
  return 0;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <_isatty>:

int _isatty(int file)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800448c:	2301      	movs	r3, #1
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044bc:	4a14      	ldr	r2, [pc, #80]	@ (8004510 <_sbrk+0x5c>)
 80044be:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <_sbrk+0x60>)
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044c8:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <_sbrk+0x64>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044d0:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <_sbrk+0x64>)
 80044d2:	4a12      	ldr	r2, [pc, #72]	@ (800451c <_sbrk+0x68>)
 80044d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <_sbrk+0x64>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d207      	bcs.n	80044f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044e4:	f007 fc16 	bl	800bd14 <__errno>
 80044e8:	4603      	mov	r3, r0
 80044ea:	220c      	movs	r2, #12
 80044ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295
 80044f2:	e009      	b.n	8004508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044f4:	4b08      	ldr	r3, [pc, #32]	@ (8004518 <_sbrk+0x64>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044fa:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <_sbrk+0x64>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	4a05      	ldr	r2, [pc, #20]	@ (8004518 <_sbrk+0x64>)
 8004504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20020000 	.word	0x20020000
 8004514:	00000400 	.word	0x00000400
 8004518:	2000098c 	.word	0x2000098c
 800451c:	20000f00 	.word	0x20000f00

08004520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <SystemInit+0x20>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	4a05      	ldr	r2, [pc, #20]	@ (8004540 <SystemInit+0x20>)
 800452c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8004544:	b580      	push	{r7, lr}
 8004546:	ed2d 8b02 	vpush	{d8}
 800454a:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 800454c:	f7fd f950 	bl	80017f0 <update_Encoder_Data>
		Motion_Update(&motion);
 8004550:	4810      	ldr	r0, [pc, #64]	@ (8004594 <SysTickFunction+0x50>)
 8004552:	f7fd ffa3 	bl	800249c <Motion_Update>
		Sensors_Update();
 8004556:	f7ff f8f3 	bl	8003740 <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 800455a:	480e      	ldr	r0, [pc, #56]	@ (8004594 <SysTickFunction+0x50>)
 800455c:	f7fd ff25 	bl	80023aa <Motion_Velocity>
 8004560:	eeb0 8a40 	vmov.f32	s16, s0
 8004564:	480b      	ldr	r0, [pc, #44]	@ (8004594 <SysTickFunction+0x50>)
 8004566:	f7fd ff30 	bl	80023ca <Motion_Omega>
 800456a:	eef0 8a40 	vmov.f32	s17, s0
 800456e:	f7ff f85d 	bl	800362c <get_steering_feedback>
 8004572:	eef0 7a40 	vmov.f32	s15, s0
 8004576:	eeb0 1a67 	vmov.f32	s2, s15
 800457a:	eef0 0a68 	vmov.f32	s1, s17
 800457e:	eeb0 0a48 	vmov.f32	s0, s16
 8004582:	4805      	ldr	r0, [pc, #20]	@ (8004598 <SysTickFunction+0x54>)
 8004584:	f7fc feda 	bl	800133c <UpdateControllers>
		//UART_Transmit_Int(&huart3, "L", linecolorRPI);
		//UART_Transmit_Int(&huart3, "B", ballcolorRPI);



}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	ecbd 8b02 	vpop	{d8}
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000618 	.word	0x20000618
 8004598:	200006cc 	.word	0x200006cc

0800459c <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 80045a0:	4b03      	ldr	r3, [pc, #12]	@ (80045b0 <EnableSysTickFunction+0x14>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 80045a6:	200a      	movs	r0, #10
 80045a8:	f001 f8de 	bl	8005768 <HAL_Delay>
}
 80045ac:	bf00      	nop
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	200005e8 	.word	0x200005e8

080045b4 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80045ba:	f7fd f8c1 	bl	8001740 <getRightEncoderCounts>
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	f647 1318 	movw	r3, #31000	@ 0x7918
 80045c6:	429a      	cmp	r2, r3
 80045c8:	dc15      	bgt.n	80045f6 <CheckEncoderCounts+0x42>
 80045ca:	f7fd f8c5 	bl	8001758 <getLeftEncoderCounts>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	f647 1318 	movw	r3, #31000	@ 0x7918
 80045d6:	429a      	cmp	r2, r3
 80045d8:	dc0d      	bgt.n	80045f6 <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80045da:	f7fd f8b1 	bl	8001740 <getRightEncoderCounts>
 80045de:	4603      	mov	r3, r0
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004620 <CheckEncoderCounts+0x6c>)
 80045e4:	429a      	cmp	r2, r3
 80045e6:	db06      	blt.n	80045f6 <CheckEncoderCounts+0x42>
 80045e8:	f7fd f8b6 	bl	8001758 <getLeftEncoderCounts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <CheckEncoderCounts+0x6c>)
 80045f2:	429a      	cmp	r2, r3
 80045f4:	da10      	bge.n	8004618 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80045f6:	f7fd f8a3 	bl	8001740 <getRightEncoderCounts>
 80045fa:	4603      	mov	r3, r0
 80045fc:	b29c      	uxth	r4, r3
 80045fe:	f7fd f8ab 	bl	8001758 <getLeftEncoderCounts>
 8004602:	4603      	mov	r3, r0
 8004604:	b29b      	uxth	r3, r3
 8004606:	1ae3      	subs	r3, r4, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 800460c:	f7fd f8e0 	bl	80017d0 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8004610:	4a04      	ldr	r2, [pc, #16]	@ (8004624 <CheckEncoderCounts+0x70>)
 8004612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004616:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	ffff86e8 	.word	0xffff86e8
 8004624:	40010000 	.word	0x40010000

08004628 <executePlantationTask>:

Color ballcolor;

int potato_row[5] = {-1, -1, -1, -1, -1};

void executePlantationTask(void) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	//StartLineColorDetection();
	Buzzer_Toggle(100);
 800462e:	2064      	movs	r0, #100	@ 0x64
 8004630:	f000 f9ac 	bl	800498c <Buzzer_Toggle>
	HAL_Delay(2000);
 8004634:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004638:	f001 f896 	bl	8005768 <HAL_Delay>
	Buzzer_Toggle(300);
 800463c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004640:	f000 f9a4 	bl	800498c <Buzzer_Toggle>
	Robot_MoveForwardUntillLine();
 8004644:	f7fe fe32 	bl	80032ac <Robot_MoveForwardUntillLine>
	Robot_TurnLeft90Inplace();
 8004648:	f7fe ff30 	bl	80034ac <Robot_TurnLeft90Inplace>
	moveToCenterofNextCell();
 800464c:	f000 f86e 	bl	800472c <moveToCenterofNextCell>

	//Start the task
	for(uint8_t row = 0; row < 3; row ++){
 8004650:	2300      	movs	r3, #0
 8004652:	71fb      	strb	r3, [r7, #7]
 8004654:	e046      	b.n	80046e4 <executePlantationTask+0xbc>
		for(uint8_t column = 0; column < 5; column ++){
 8004656:	2300      	movs	r3, #0
 8004658:	71bb      	strb	r3, [r7, #6]
 800465a:	e03d      	b.n	80046d8 <executePlantationTask+0xb0>


			if(potato_row[column] == -1){
 800465c:	79bb      	ldrb	r3, [r7, #6]
 800465e:	4a25      	ldr	r2, [pc, #148]	@ (80046f4 <executePlantationTask+0xcc>)
 8004660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d11c      	bne.n	80046a4 <executePlantationTask+0x7c>
				linecolor = GetLineColor(column, row);
 800466a:	79fa      	ldrb	r2, [r7, #7]
 800466c:	79bb      	ldrb	r3, [r7, #6]
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe fcbf 	bl	8002ff4 <GetLineColor>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	4b1f      	ldr	r3, [pc, #124]	@ (80046f8 <executePlantationTask+0xd0>)
 800467c:	701a      	strb	r2, [r3, #0]

				if(linecolor == GREEN){
 800467e:	4b1e      	ldr	r3, [pc, #120]	@ (80046f8 <executePlantationTask+0xd0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d10e      	bne.n	80046a4 <executePlantationTask+0x7c>
					potato_row[column] = row;
 8004686:	79bb      	ldrb	r3, [r7, #6]
 8004688:	79fa      	ldrb	r2, [r7, #7]
 800468a:	491a      	ldr	r1, [pc, #104]	@ (80046f4 <executePlantationTask+0xcc>)
 800468c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

					//Dummy function
					ballcolor = picktheBall(column, row);
 8004690:	79fa      	ldrb	r2, [r7, #7]
 8004692:	79bb      	ldrb	r3, [r7, #6]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f888 	bl	80047ac <picktheBall>
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	4b16      	ldr	r3, [pc, #88]	@ (80046fc <executePlantationTask+0xd4>)
 80046a2:	701a      	strb	r2, [r3, #0]

					//Todo: store the ball based on color
				}
			}
			if(column != 4){
 80046a4:	79bb      	ldrb	r3, [r7, #6]
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d002      	beq.n	80046b0 <executePlantationTask+0x88>
				moveToCenterofNextCell();
 80046aa:	f000 f83f 	bl	800472c <moveToCenterofNextCell>
 80046ae:	e010      	b.n	80046d2 <executePlantationTask+0xaa>
			}
			else{
				Robot_MoveReverseGivenDistance(50);
 80046b0:	2032      	movs	r0, #50	@ 0x32
 80046b2:	f7fe fe6f 	bl	8003394 <Robot_MoveReverseGivenDistance>
				robot_TurnRight180Inplace();
 80046b6:	f7fe fecd 	bl	8003454 <robot_TurnRight180Inplace>

				if(row == 2){
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d106      	bne.n	80046ce <executePlantationTask+0xa6>
					Robot_LineFollowUntillJunction();
 80046c0:	f7fe fd00 	bl	80030c4 <Robot_LineFollowUntillJunction>
					Robot_TurnRight90Inplace();
 80046c4:	f7fe fe9a 	bl	80033fc <Robot_TurnRight90Inplace>
					moveToCenterofNextColumnfromSecondRow();
 80046c8:	f000 f868 	bl	800479c <moveToCenterofNextColumnfromSecondRow>
					break;
 80046cc:	e007      	b.n	80046de <executePlantationTask+0xb6>
				}
				moveTocolumn0Fromcolumn4();
 80046ce:	f000 f817 	bl	8004700 <moveTocolumn0Fromcolumn4>
		for(uint8_t column = 0; column < 5; column ++){
 80046d2:	79bb      	ldrb	r3, [r7, #6]
 80046d4:	3301      	adds	r3, #1
 80046d6:	71bb      	strb	r3, [r7, #6]
 80046d8:	79bb      	ldrb	r3, [r7, #6]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d9be      	bls.n	800465c <executePlantationTask+0x34>
	for(uint8_t row = 0; row < 3; row ++){
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	3301      	adds	r3, #1
 80046e2:	71fb      	strb	r3, [r7, #7]
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d9b5      	bls.n	8004656 <executePlantationTask+0x2e>
			}
		}
	}
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000068 	.word	0x20000068
 80046f8:	20000990 	.word	0x20000990
 80046fc:	20000991 	.word	0x20000991

08004700 <moveTocolumn0Fromcolumn4>:


void moveTocolumn0Fromcolumn4(){
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
	moveToCenterofNextCellandNotStop();
 8004704:	f000 f820 	bl	8004748 <moveToCenterofNextCellandNotStop>
	moveToCenterofNextCell();
 8004708:	f000 f810 	bl	800472c <moveToCenterofNextCell>
	moveToCenterofNextCellandNotStop();
 800470c:	f000 f81c 	bl	8004748 <moveToCenterofNextCellandNotStop>
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 8004710:	f000 f81a 	bl	8004748 <moveToCenterofNextCellandNotStop>

	//Robot_LineFollowUntillJunction();
	moveToCenterofNextCell();
 8004714:	f000 f80a 	bl	800472c <moveToCenterofNextCell>

	Robot_TurnLeft90Inplace();
 8004718:	f7fe fec8 	bl	80034ac <Robot_TurnLeft90Inplace>
	//Robot_LineFollowUntillJunction();
	Robot_MoveForwardUntillLine();
 800471c:	f7fe fdc6 	bl	80032ac <Robot_MoveForwardUntillLine>
	Robot_TurnLeft90Inplace();
 8004720:	f7fe fec4 	bl	80034ac <Robot_TurnLeft90Inplace>
	//Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
	moveToCenterofNextCell();
 8004724:	f000 f802 	bl	800472c <moveToCenterofNextCell>

}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}

0800472c <moveToCenterofNextCell>:

void moveToCenterofNextCell(){
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 8004730:	f7fe fd0e 	bl	8003150 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
 8004734:	4b03      	ldr	r3, [pc, #12]	@ (8004744 <moveToCenterofNextCell+0x18>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fd4d 	bl	80031d8 <Robot_FollowLineGivenDistance>
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	0800e09c 	.word	0x0800e09c

08004748 <moveToCenterofNextCellandNotStop>:

void moveToCenterofNextCellandNotStop(){
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 800474c:	f7fe fd00 	bl	8003150 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistanceandNotStop(DISTACE_TO_CENTER_OF_CELL);
 8004750:	4b03      	ldr	r3, [pc, #12]	@ (8004760 <moveToCenterofNextCellandNotStop+0x18>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fd75 	bl	8003244 <Robot_FollowLineGivenDistanceandNotStop>
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	0800e09c 	.word	0x0800e09c

08004764 <moveToCenterofCellinZeroRow>:

void moveToCenterofCellinZeroRow(){
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunction();
 8004768:	f7fe fcac 	bl	80030c4 <Robot_LineFollowUntillJunction>
	Robot_TurnRight90Inplace();
 800476c:	f7fe fe46 	bl	80033fc <Robot_TurnRight90Inplace>
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
 8004770:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <moveToCenterofCellinZeroRow+0x24>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fd2f 	bl	80031d8 <Robot_FollowLineGivenDistance>
	HAL_Delay(MOTION_DELAY);
 800477a:	4b04      	ldr	r3, [pc, #16]	@ (800478c <moveToCenterofCellinZeroRow+0x28>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fff2 	bl	8005768 <HAL_Delay>
}
 8004784:	bf00      	nop
 8004786:	bd80      	pop	{r7, pc}
 8004788:	0800e09c 	.word	0x0800e09c
 800478c:	0800e098 	.word	0x0800e098

08004790 <moveToCenterofNextColumnfromFirstRow>:

void moveToCenterofNextColumnfromFirstRow(){
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
	moveToCenterofCellinZeroRow();
 8004794:	f7ff ffe6 	bl	8004764 <moveToCenterofCellinZeroRow>
}
 8004798:	bf00      	nop
 800479a:	bd80      	pop	{r7, pc}

0800479c <moveToCenterofNextColumnfromSecondRow>:

void moveToCenterofNextColumnfromSecondRow(){
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 80047a0:	f7ff ffd2 	bl	8004748 <moveToCenterofNextCellandNotStop>
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromFirstRow();
 80047a4:	f7ff fff4 	bl	8004790 <moveToCenterofNextColumnfromFirstRow>
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}

080047ac <picktheBall>:
	moveToCenterofNextCellandNotStop();
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromSecondRow();
}

Color picktheBall(uint8_t column, uint8_t row){
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	460a      	mov	r2, r1
 80047b6:	71fb      	strb	r3, [r7, #7]
 80047b8:	4613      	mov	r3, r2
 80047ba:	71bb      	strb	r3, [r7, #6]


	Robot_TurnRight90Inplace();
 80047bc:	f7fe fe1e 	bl	80033fc <Robot_TurnRight90Inplace>




	//ToDo: Get ball color
	ballcolor = GetBallColor(column, row);
 80047c0:	79ba      	ldrb	r2, [r7, #6]
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fc44 	bl	8003054 <GetBallColor>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <picktheBall+0x40>)
 80047d2:	701a      	strb	r2, [r3, #0]

	//ToDo: Pick The ball
	Buzzer_Toggle(1000);
 80047d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047d8:	f000 f8d8 	bl	800498c <Buzzer_Toggle>

	Robot_TurnLeft90Inplace();
 80047dc:	f7fe fe66 	bl	80034ac <Robot_TurnLeft90Inplace>



	//Robot_TurnLeft90Inplace();

	return ballcolor;
 80047e0:	4b02      	ldr	r3, [pc, #8]	@ (80047ec <picktheBall+0x40>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000991 	.word	0x20000991

080047f0 <executeMuddyRoadTask>:


//================================================================================================

//---------Start 0f Muddy Road Task (Navigate through random walls)--------------------
void executeMuddyRoadTask(void){
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 80047f4:	f7fe fcac 	bl	8003150 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_MoveForwardGivenDistance(145);
 80047f8:	2091      	movs	r0, #145	@ 0x91
 80047fa:	f7fe fd99 	bl	8003330 <Robot_MoveForwardGivenDistance>

	Robot_TurnRight90Inplace();
 80047fe:	f7fe fdfd 	bl	80033fc <Robot_TurnRight90Inplace>

	Robot_moveForwardUntillFrontWall();
 8004802:	f7fe fe83 	bl	800350c <Robot_moveForwardUntillFrontWall>

	Robot_TurnLeft90Inplace();
 8004806:	f7fe fe51 	bl	80034ac <Robot_TurnLeft90Inplace>



}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <selectTask>:




// -----------------------------Task manager function---------------------------------
void selectTask(){
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
	display_clear();
 8004814:	f000 fbb2 	bl	8004f7c <display_clear>
	display_headding("Tasks");
 8004818:	4822      	ldr	r0, [pc, #136]	@ (80048a4 <selectTask+0x94>)
 800481a:	f000 fbe1 	bl	8004fe0 <display_headding>

	while(1){
		if(prevnextbtncount != nextbtncount){
 800481e:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <selectTask+0x98>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <selectTask+0x9c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d022      	beq.n	8004870 <selectTask+0x60>
			display_big_number(nextbtncount);
 800482a:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <selectTask+0x9c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fb59 	bl	8004ee8 <display_big_number>
			switch(nextbtncount){
 8004836:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <selectTask+0x9c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d002      	beq.n	8004844 <selectTask+0x34>
 800483e:	2b02      	cmp	r3, #2
 8004840:	d009      	beq.n	8004856 <selectTask+0x46>
			case 2:
				display_message("Muddy Road", 12, 45);
				currentTask = TASK_MUDDY_ROAD;
				break;
			default:
				break;
 8004842:	e011      	b.n	8004868 <selectTask+0x58>
				display_message("Plantation Task", 12, 45);
 8004844:	222d      	movs	r2, #45	@ 0x2d
 8004846:	210c      	movs	r1, #12
 8004848:	4819      	ldr	r0, [pc, #100]	@ (80048b0 <selectTask+0xa0>)
 800484a:	f000 fb9f 	bl	8004f8c <display_message>
				currentTask = TASK_PLANTATION;
 800484e:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <selectTask+0xa4>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
				break;
 8004854:	e008      	b.n	8004868 <selectTask+0x58>
				display_message("Muddy Road", 12, 45);
 8004856:	222d      	movs	r2, #45	@ 0x2d
 8004858:	210c      	movs	r1, #12
 800485a:	4817      	ldr	r0, [pc, #92]	@ (80048b8 <selectTask+0xa8>)
 800485c:	f000 fb96 	bl	8004f8c <display_message>
				currentTask = TASK_MUDDY_ROAD;
 8004860:	4b14      	ldr	r3, [pc, #80]	@ (80048b4 <selectTask+0xa4>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
				break;
 8004866:	bf00      	nop
			}
			prevnextbtncount = nextbtncount;
 8004868:	4b10      	ldr	r3, [pc, #64]	@ (80048ac <selectTask+0x9c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0e      	ldr	r2, [pc, #56]	@ (80048a8 <selectTask+0x98>)
 800486e:	6013      	str	r3, [r2, #0]
		}
		if(prevokbtncount != okbtncount){
 8004870:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <selectTask+0xac>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b12      	ldr	r3, [pc, #72]	@ (80048c0 <selectTask+0xb0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d0d0      	beq.n	800481e <selectTask+0xe>
			prevokbtncount = okbtncount;
 800487c:	4b10      	ldr	r3, [pc, #64]	@ (80048c0 <selectTask+0xb0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0e      	ldr	r2, [pc, #56]	@ (80048bc <selectTask+0xac>)
 8004882:	6013      	str	r3, [r2, #0]
			break;
 8004884:	bf00      	nop
		}
	}
	display_headding("Start Task");
 8004886:	480f      	ldr	r0, [pc, #60]	@ (80048c4 <selectTask+0xb4>)
 8004888:	f000 fbaa 	bl	8004fe0 <display_headding>
	while(okbtncount == prevokbtncount);
 800488c:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <selectTask+0xb0>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <selectTask+0xac>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d0f9      	beq.n	800488c <selectTask+0x7c>
	Reset_buttons();
 8004898:	f7fc fcbe 	bl	8001218 <Reset_buttons>
	runCurrentTask();
 800489c:	f000 f814 	bl	80048c8 <runCurrentTask>
}
 80048a0:	bf00      	nop
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	0800e00c 	.word	0x0800e00c
 80048a8:	200002a8 	.word	0x200002a8
 80048ac:	20000010 	.word	0x20000010
 80048b0:	0800e014 	.word	0x0800e014
 80048b4:	20000050 	.word	0x20000050
 80048b8:	0800e024 	.word	0x0800e024
 80048bc:	200002a4 	.word	0x200002a4
 80048c0:	200002a0 	.word	0x200002a0
 80048c4:	0800e030 	.word	0x0800e030

080048c8 <runCurrentTask>:



void runCurrentTask() {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	EnableSysTickFunction();
 80048cc:	f7ff fe66 	bl	800459c <EnableSysTickFunction>
	Buzzer_Toggle(500);
 80048d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80048d4:	f000 f85a 	bl	800498c <Buzzer_Toggle>

    switch (currentTask) {
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <runCurrentTask+0x3c>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <runCurrentTask+0x20>
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d006      	beq.n	80048f4 <runCurrentTask+0x2c>
        case TASK_MUDDY_ROAD:
        	executeMuddyRoadTask();
		    currentTask = TASK_RAMP;
		    break;
        default:
            break;
 80048e6:	e00b      	b.n	8004900 <runCurrentTask+0x38>
            executePlantationTask();
 80048e8:	f7ff fe9e 	bl	8004628 <executePlantationTask>
            currentTask = TASK_MUDDY_ROAD;
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <runCurrentTask+0x3c>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	701a      	strb	r2, [r3, #0]
            break;
 80048f2:	e005      	b.n	8004900 <runCurrentTask+0x38>
        	executeMuddyRoadTask();
 80048f4:	f7ff ff7c 	bl	80047f0 <executeMuddyRoadTask>
		    currentTask = TASK_RAMP;
 80048f8:	4b02      	ldr	r3, [pc, #8]	@ (8004904 <runCurrentTask+0x3c>)
 80048fa:	2202      	movs	r2, #2
 80048fc:	701a      	strb	r2, [r3, #0]
		    break;
 80048fe:	bf00      	nop
    }

    // Print final status after execution

}
 8004900:	bf00      	nop
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000050 	.word	0x20000050

08004908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004940 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800490c:	f7ff fe08 	bl	8004520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004910:	480c      	ldr	r0, [pc, #48]	@ (8004944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004912:	490d      	ldr	r1, [pc, #52]	@ (8004948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004914:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004918:	e002      	b.n	8004920 <LoopCopyDataInit>

0800491a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800491a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800491c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800491e:	3304      	adds	r3, #4

08004920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004924:	d3f9      	bcc.n	800491a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004926:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004928:	4c0a      	ldr	r4, [pc, #40]	@ (8004954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800492a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800492c:	e001      	b.n	8004932 <LoopFillZerobss>

0800492e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800492e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004930:	3204      	adds	r2, #4

08004932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004934:	d3fb      	bcc.n	800492e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004936:	f007 f9f3 	bl	800bd20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800493a:	f7fd f89d 	bl	8001a78 <main>
  bx  lr    
 800493e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004948:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 800494c:	0801105c 	.word	0x0801105c
  ldr r2, =_sbss
 8004950:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8004954:	20000f00 	.word	0x20000f00

08004958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004958:	e7fe      	b.n	8004958 <ADC_IRQHandler>
	...

0800495c <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8004960:	2201      	movs	r2, #1
 8004962:	2120      	movs	r1, #32
 8004964:	4802      	ldr	r0, [pc, #8]	@ (8004970 <Buzzer_On+0x14>)
 8004966:	f002 f955 	bl	8006c14 <HAL_GPIO_WritePin>
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40020000 	.word	0x40020000

08004974 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004978:	2200      	movs	r2, #0
 800497a:	2120      	movs	r1, #32
 800497c:	4802      	ldr	r0, [pc, #8]	@ (8004988 <Buzzer_Off+0x14>)
 800497e:	f002 f949 	bl	8006c14 <HAL_GPIO_WritePin>
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40020000 	.word	0x40020000

0800498c <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8004994:	f7ff ffe2 	bl	800495c <Buzzer_On>
    HAL_Delay(delay);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fee5 	bl	8005768 <HAL_Delay>
    Buzzer_Off();
 800499e:	f7ff ffe9 	bl	8004974 <Buzzer_Off>
    HAL_Delay(delay);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fee0 	bl	8005768 <HAL_Delay>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 80049b4:	f7ff ffd2 	bl	800495c <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80049b8:	2064      	movs	r0, #100	@ 0x64
 80049ba:	f000 fed5 	bl	8005768 <HAL_Delay>
    Buzzer_Off();
 80049be:	f7ff ffd9 	bl	8004974 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80049c2:	2064      	movs	r0, #100	@ 0x64
 80049c4:	f000 fed0 	bl	8005768 <HAL_Delay>

    Buzzer_On();
 80049c8:	f7ff ffc8 	bl	800495c <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80049cc:	2064      	movs	r0, #100	@ 0x64
 80049ce:	f000 fecb 	bl	8005768 <HAL_Delay>
    Buzzer_Off();
 80049d2:	f7ff ffcf 	bl	8004974 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80049d6:	2064      	movs	r0, #100	@ 0x64
 80049d8:	f000 fec6 	bl	8005768 <HAL_Delay>

    Buzzer_On();
 80049dc:	f7ff ffbe 	bl	800495c <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80049e0:	20c8      	movs	r0, #200	@ 0xc8
 80049e2:	f000 fec1 	bl	8005768 <HAL_Delay>
    Buzzer_Off();
 80049e6:	f7ff ffc5 	bl	8004974 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80049ea:	2064      	movs	r0, #100	@ 0x64
 80049ec:	f000 febc 	bl	8005768 <HAL_Delay>

    Buzzer_On();
 80049f0:	f7ff ffb4 	bl	800495c <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80049f4:	2064      	movs	r0, #100	@ 0x64
 80049f6:	f000 feb7 	bl	8005768 <HAL_Delay>
    Buzzer_Off();
 80049fa:	f7ff ffbb 	bl	8004974 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80049fe:	2064      	movs	r0, #100	@ 0x64
 8004a00:	f000 feb2 	bl	8005768 <HAL_Delay>

    Buzzer_On();
 8004a04:	f7ff ffaa 	bl	800495c <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8004a08:	20c8      	movs	r0, #200	@ 0xc8
 8004a0a:	f000 fead 	bl	8005768 <HAL_Delay>
    Buzzer_Off();
 8004a0e:	f7ff ffb1 	bl	8004974 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <Buzzer_ErrorPattern>:
    Buzzer_Off();
}


void Buzzer_ErrorPattern(void)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
    // Three short beeps
    for (int i = 0; i < 3; i++) {
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e00c      	b.n	8004a3c <Buzzer_ErrorPattern+0x26>
        Buzzer_On();
 8004a22:	f7ff ff9b 	bl	800495c <Buzzer_On>
        HAL_Delay(100);
 8004a26:	2064      	movs	r0, #100	@ 0x64
 8004a28:	f000 fe9e 	bl	8005768 <HAL_Delay>
        Buzzer_Off();
 8004a2c:	f7ff ffa2 	bl	8004974 <Buzzer_Off>
        HAL_Delay(100);
 8004a30:	2064      	movs	r0, #100	@ 0x64
 8004a32:	f000 fe99 	bl	8005768 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	ddef      	ble.n	8004a22 <Buzzer_ErrorPattern+0xc>
    }

    // Three long beeps
    for (int i = 0; i < 3; i++) {
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	e00d      	b.n	8004a64 <Buzzer_ErrorPattern+0x4e>
        Buzzer_On();
 8004a48:	f7ff ff88 	bl	800495c <Buzzer_On>
        HAL_Delay(300);
 8004a4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004a50:	f000 fe8a 	bl	8005768 <HAL_Delay>
        Buzzer_Off();
 8004a54:	f7ff ff8e 	bl	8004974 <Buzzer_Off>
        HAL_Delay(100);
 8004a58:	2064      	movs	r0, #100	@ 0x64
 8004a5a:	f000 fe85 	bl	8005768 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	ddee      	ble.n	8004a48 <Buzzer_ErrorPattern+0x32>
    }

    // Three short beeps again
    for (int i = 0; i < 3; i++) {
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	e00c      	b.n	8004a8a <Buzzer_ErrorPattern+0x74>
        Buzzer_On();
 8004a70:	f7ff ff74 	bl	800495c <Buzzer_On>
        HAL_Delay(100);
 8004a74:	2064      	movs	r0, #100	@ 0x64
 8004a76:	f000 fe77 	bl	8005768 <HAL_Delay>
        Buzzer_Off();
 8004a7a:	f7ff ff7b 	bl	8004974 <Buzzer_Off>
        HAL_Delay(100);
 8004a7e:	2064      	movs	r0, #100	@ 0x64
 8004a80:	f000 fe72 	bl	8005768 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3301      	adds	r3, #1
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	ddef      	ble.n	8004a70 <Buzzer_ErrorPattern+0x5a>
    }

    // 1-second pause before repeating
    HAL_Delay(1000);
 8004a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a94:	f000 fe68 	bl	8005768 <HAL_Delay>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <i2c_mux_select>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 8004aaa:	2201      	movs	r2, #1
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f805 	bl	8004ac8 <i2c_mux_select_multi>
 8004abe:	4603      	mov	r3, r0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <i2c_mux_select_multi>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <i2c_mux_select_multi+0x18>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e02f      	b.n	8004b40 <i2c_mux_select_multi+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	7a9b      	ldrb	r3, [r3, #10]
 8004ae4:	3370      	adds	r3, #112	@ 0x70
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	b299      	uxth	r1, r3
 8004af4:	1cfa      	adds	r2, r7, #3
 8004af6:	2301      	movs	r3, #1
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	2301      	movs	r3, #1
 8004afc:	f002 fa00 	bl	8006f00 <HAL_I2C_Master_Transmit>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <i2c_mux_select_multi+0x46>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e018      	b.n	8004b40 <i2c_mux_select_multi+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	b299      	uxth	r1, r3
 8004b1a:	f107 020d 	add.w	r2, r7, #13
 8004b1e:	2301      	movs	r3, #1
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2301      	movs	r3, #1
 8004b24:	f002 faea 	bl	80070fc <HAL_I2C_Master_Receive>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 8004b2c:	7bbb      	ldrb	r3, [r7, #14]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <i2c_mux_select_multi+0x72>
 8004b32:	7b7a      	ldrb	r2, [r7, #13]
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d001      	beq.n	8004b3e <i2c_mux_select_multi+0x76>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <i2c_mux_select_multi+0x78>
	return 0;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d901      	bls.n	8004b5c <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8004b58:	230f      	movs	r3, #15
 8004b5a:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8004b66:	2201      	movs	r2, #1
 8004b68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b6c:	4823      	ldr	r0, [pc, #140]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004b6e:	f002 f851 	bl	8006c14 <HAL_GPIO_WritePin>
 8004b72:	e005      	b.n	8004b80 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b7a:	4820      	ldr	r0, [pc, #128]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004b7c:	f002 f84a 	bl	8006c14 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b90:	481a      	ldr	r0, [pc, #104]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004b92:	f002 f83f 	bl	8006c14 <HAL_GPIO_WritePin>
 8004b96:	e005      	b.n	8004ba4 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b9e:	4817      	ldr	r0, [pc, #92]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004ba0:	f002 f838 	bl	8006c14 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d006      	beq.n	8004bbc <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bb4:	4811      	ldr	r0, [pc, #68]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004bb6:	f002 f82d 	bl	8006c14 <HAL_GPIO_WritePin>
 8004bba:	e005      	b.n	8004bc8 <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bc2:	480e      	ldr	r0, [pc, #56]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004bc4:	f002 f826 	bl	8006c14 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bd8:	4808      	ldr	r0, [pc, #32]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004bda:	f002 f81b 	bl	8006c14 <HAL_GPIO_WritePin>
 8004bde:	e005      	b.n	8004bec <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 8004be0:	2200      	movs	r2, #0
 8004be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004be6:	4805      	ldr	r0, [pc, #20]	@ (8004bfc <AnalogMux_SelectChannel+0xb4>)
 8004be8:	f002 f814 	bl	8006c14 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7fc fd89 	bl	8001704 <delayMicroseconds>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40020400 	.word	0x40020400

08004c00 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8004c0a:	480b      	ldr	r0, [pc, #44]	@ (8004c38 <AnalogMux_ReadADC+0x38>)
 8004c0c:	f000 fe14 	bl	8005838 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8004c10:	2164      	movs	r1, #100	@ 0x64
 8004c12:	4809      	ldr	r0, [pc, #36]	@ (8004c38 <AnalogMux_ReadADC+0x38>)
 8004c14:	f000 ff15 	bl	8005a42 <HAL_ADC_PollForConversion>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d104      	bne.n	8004c28 <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 8004c1e:	4806      	ldr	r0, [pc, #24]	@ (8004c38 <AnalogMux_ReadADC+0x38>)
 8004c20:	f000 ff9a 	bl	8005b58 <HAL_ADC_GetValue>
 8004c24:	4603      	mov	r3, r0
 8004c26:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 8004c28:	4803      	ldr	r0, [pc, #12]	@ (8004c38 <AnalogMux_ReadADC+0x38>)
 8004c2a:	f000 fed7 	bl	80059dc <HAL_ADC_Stop>

    return adcValue;
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	200002e8 	.word	0x200002e8

08004c3c <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff7d 	bl	8004b48 <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 8004c4e:	2005      	movs	r0, #5
 8004c50:	f7fc fd58 	bl	8001704 <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8004c54:	f7ff ffd4 	bl	8004c00 <AnalogMux_ReadADC>
 8004c58:	4603      	mov	r3, r0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af04      	add	r7, sp, #16
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	71fb      	strb	r3, [r7, #7]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	71bb      	strb	r3, [r7, #6]
 8004c72:	4613      	mov	r3, r2
 8004c74:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	230a      	movs	r3, #10
 8004c7c:	9302      	str	r3, [sp, #8]
 8004c7e:	2301      	movs	r3, #1
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	f107 030f 	add.w	r3, r7, #15
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	2301      	movs	r3, #1
 8004c8a:	2180      	movs	r1, #128	@ 0x80
 8004c8c:	4819      	ldr	r0, [pc, #100]	@ (8004cf4 <PCA9685_SetBit+0x90>)
 8004c8e:	f002 fd61 	bl	8007754 <HAL_I2C_Mem_Read>
  if (Value == 0)
 8004c92:	797b      	ldrb	r3, [r7, #5]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10d      	bne.n	8004cb4 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 8004c98:	79bb      	ldrb	r3, [r7, #6]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	b25a      	sxtb	r2, r3
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	4013      	ands	r3, r2
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e00a      	b.n	8004cca <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8004cb4:	79bb      	ldrb	r3, [r7, #6]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	b25a      	sxtb	r2, r3
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	b25b      	sxtb	r3, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	230a      	movs	r3, #10
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	f107 030f 	add.w	r3, r7, #15
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	2180      	movs	r1, #128	@ 0x80
 8004ce0:	4804      	ldr	r0, [pc, #16]	@ (8004cf4 <PCA9685_SetBit+0x90>)
 8004ce2:	f002 fc3d 	bl	8007560 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	f000 fd3e 	bl	8005768 <HAL_Delay>
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000384 	.word	0x20000384

08004cf8 <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af04      	add	r7, sp, #16
 8004cfe:	4603      	mov	r3, r0
 8004d00:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d902      	bls.n	8004d12 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e00c      	b.n	8004d2c <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	2b18      	cmp	r3, #24
 8004d16:	d802      	bhi.n	8004d1e <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 8004d18:	23ff      	movs	r3, #255	@ 0xff
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	e006      	b.n	8004d2c <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <PCA9685_SetPWMFrequency+0x74>)
 8004d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	2104      	movs	r1, #4
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7ff ff97 	bl	8004c64 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8004d36:	230a      	movs	r3, #10
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	f107 030f 	add.w	r3, r7, #15
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2301      	movs	r3, #1
 8004d46:	22fe      	movs	r2, #254	@ 0xfe
 8004d48:	2180      	movs	r1, #128	@ 0x80
 8004d4a:	4809      	ldr	r0, [pc, #36]	@ (8004d70 <PCA9685_SetPWMFrequency+0x78>)
 8004d4c:	f002 fc08 	bl	8007560 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8004d50:	2200      	movs	r2, #0
 8004d52:	2104      	movs	r1, #4
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7ff ff85 	bl	8004c64 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2107      	movs	r1, #7
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f7ff ff80 	bl	8004c64 <PCA9685_SetBit>
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	017d7840 	.word	0x017d7840
 8004d70:	20000384 	.word	0x20000384

08004d74 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ffb9 	bl	8004cf8 <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8004d86:	2201      	movs	r2, #1
 8004d88:	2105      	movs	r1, #5
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7ff ff6a 	bl	8004c64 <PCA9685_SetBit>
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af04      	add	r7, sp, #16
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
 8004da2:	460b      	mov	r3, r1
 8004da4:	80bb      	strh	r3, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	3306      	adds	r3, #6
 8004db2:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8004db4:	88bb      	ldrh	r3, [r7, #4]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 8004dba:	88bb      	ldrh	r3, [r7, #4]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 8004dca:	887b      	ldrh	r3, [r7, #2]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	230a      	movs	r3, #10
 8004dda:	9302      	str	r3, [sp, #8]
 8004ddc:	2304      	movs	r3, #4
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2301      	movs	r3, #1
 8004de8:	2180      	movs	r1, #128	@ 0x80
 8004dea:	4803      	ldr	r0, [pc, #12]	@ (8004df8 <PCA9685_SetPWM+0x60>)
 8004dec:	f002 fbb8 	bl	8007560 <HAL_I2C_Mem_Write>
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000384 	.word	0x20000384
 8004dfc:	00000000 	.word	0x00000000

08004e00 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	ed87 0a00 	vstr	s0, [r7]
 8004e0c:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 8004e0e:	edd7 7a00 	vldr	s15, [r7]
 8004e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1a:	d502      	bpl.n	8004e22 <PCA9685_SetServoAngle+0x22>
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8004e22:	edd7 7a00 	vldr	s15, [r7]
 8004e26:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004eb0 <PCA9685_SetServoAngle+0xb0>
 8004e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e32:	dd01      	ble.n	8004e38 <PCA9685_SetServoAngle+0x38>
 8004e34:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb4 <PCA9685_SetServoAngle+0xb4>)
 8004e36:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8004e38:	6838      	ldr	r0, [r7, #0]
 8004e3a:	f7fb fba5 	bl	8000588 <__aeabi_f2d>
 8004e3e:	a318      	add	r3, pc, #96	@ (adr r3, 8004ea0 <PCA9685_SetServoAngle+0xa0>)
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f7fb fbf8 	bl	8000638 <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	4b18      	ldr	r3, [pc, #96]	@ (8004eb8 <PCA9685_SetServoAngle+0xb8>)
 8004e56:	f7fb fd19 	bl	800088c <__aeabi_ddiv>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	a311      	add	r3, pc, #68	@ (adr r3, 8004ea8 <PCA9685_SetServoAngle+0xa8>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb fa30 	bl	80002cc <__adddf3>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	f7fb fed8 	bl	8000c28 <__aeabi_d2f>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8004e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e84:	ee17 3a90 	vmov	r3, s15
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff82 	bl	8004d98 <PCA9685_SetPWM>
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	f3af 8000 	nop.w
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	40799800 	.word	0x40799800
 8004ea8:	9999999a 	.word	0x9999999a
 8004eac:	40599999 	.word	0x40599999
 8004eb0:	43340000 	.word	0x43340000
 8004eb4:	43340000 	.word	0x43340000
 8004eb8:	40668000 	.word	0x40668000

08004ebc <Init_Display>:

#include "display.h"

char bufnum[7];

void Init_Display(){
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af02      	add	r7, sp, #8
	SSD1306_Init();
 8004ec2:	f000 f89b 	bl	8004ffc <SSD1306_Init>
	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	2340      	movs	r3, #64	@ 0x40
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	4a04      	ldr	r2, [pc, #16]	@ (8004ee4 <Init_Display+0x28>)
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f000 faba 	bl	800544e <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8004eda:	f000 f959 	bl	8005190 <SSD1306_UpdateScreen>
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	0800e0b8 	.word	0x0800e0b8

08004ee8 <display_big_number>:

void display_big_number(uint8_t number){
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	//SSD1306_Clear();
	sprintf (bufnum, "%d", number);
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4909      	ldr	r1, [pc, #36]	@ (8004f1c <display_big_number+0x34>)
 8004ef8:	4809      	ldr	r0, [pc, #36]	@ (8004f20 <display_big_number+0x38>)
 8004efa:	f006 fe41 	bl	800bb80 <siprintf>

    SSD1306_GotoXY (25,22); // goto 10, 10
 8004efe:	2116      	movs	r1, #22
 8004f00:	2019      	movs	r0, #25
 8004f02:	f000 f9eb 	bl	80052dc <SSD1306_GotoXY>
    SSD1306_Puts (bufnum, &Font_16x26, 1); // print Hello
 8004f06:	2201      	movs	r2, #1
 8004f08:	4906      	ldr	r1, [pc, #24]	@ (8004f24 <display_big_number+0x3c>)
 8004f0a:	4805      	ldr	r0, [pc, #20]	@ (8004f20 <display_big_number+0x38>)
 8004f0c:	f000 fa7a 	bl	8005404 <SSD1306_Puts>

    SSD1306_UpdateScreen(); // update screen
 8004f10:	f000 f93e 	bl	8005190 <SSD1306_UpdateScreen>
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	0800e03c 	.word	0x0800e03c
 8004f20:	20000994 	.word	0x20000994
 8004f24:	2000008c 	.word	0x2000008c

08004f28 <display_text>:


void display_text(const char *text, uint8_t x, uint8_t y) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b090      	sub	sp, #64	@ 0x40
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
 8004f34:	4613      	mov	r3, r2
 8004f36:	70bb      	strb	r3, [r7, #2]
    char buffer[50];  // Adjust size based on your needs
    strncpy(buffer, text, sizeof(buffer) - 1);
 8004f38:	f107 030c 	add.w	r3, r7, #12
 8004f3c:	2231      	movs	r2, #49	@ 0x31
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f006 fe8a 	bl	800bc5a <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';  // Ensure null-termination
 8004f46:	2300      	movs	r3, #0
 8004f48:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    SSD1306_GotoXY(x, y); // Set cursor position
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	78ba      	ldrb	r2, [r7, #2]
 8004f52:	b292      	uxth	r2, r2
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f9c0 	bl	80052dc <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_11x18, 1); // Display the text with the specified font
 8004f5c:	f107 030c 	add.w	r3, r7, #12
 8004f60:	2201      	movs	r2, #1
 8004f62:	4905      	ldr	r1, [pc, #20]	@ (8004f78 <display_text+0x50>)
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fa4d 	bl	8005404 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // Refresh the screen to show the text
 8004f6a:	f000 f911 	bl	8005190 <SSD1306_UpdateScreen>
}
 8004f6e:	bf00      	nop
 8004f70:	3740      	adds	r7, #64	@ 0x40
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000084 	.word	0x20000084

08004f7c <display_clear>:

void display_clear(){
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8004f80:	f000 facd 	bl	800551e <SSD1306_Clear>
	SSD1306_UpdateScreen(); // update screen
 8004f84:	f000 f904 	bl	8005190 <SSD1306_UpdateScreen>
}
 8004f88:	bf00      	nop
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <display_message>:

void display_message(const char *text, uint8_t x, uint8_t y){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b090      	sub	sp, #64	@ 0x40
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	70bb      	strb	r3, [r7, #2]
	char buffer[50];  // Adjust size based on your needs
	strncpy(buffer, text, sizeof(buffer) - 1);
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	2231      	movs	r2, #49	@ 0x31
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f006 fe58 	bl	800bc5a <strncpy>
	buffer[sizeof(buffer) - 1] = '\0';  // Ensure null-termination
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	SSD1306_GotoXY(x, y); // Set cursor position
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	78ba      	ldrb	r2, [r7, #2]
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f98e 	bl	80052dc <SSD1306_GotoXY>
	SSD1306_Puts(buffer, &Font_7x10, 1); // Display the text with the specified font
 8004fc0:	f107 030c 	add.w	r3, r7, #12
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4905      	ldr	r1, [pc, #20]	@ (8004fdc <display_message+0x50>)
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fa1b 	bl	8005404 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Refresh the screen to show the text
 8004fce:	f000 f8df 	bl	8005190 <SSD1306_UpdateScreen>
}
 8004fd2:	bf00      	nop
 8004fd4:	3740      	adds	r7, #64	@ 0x40
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	2000007c 	.word	0x2000007c

08004fe0 <display_headding>:

void display_headding(const char *text){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	display_text(text, 2, 3);
 8004fe8:	2203      	movs	r2, #3
 8004fea:	2102      	movs	r1, #2
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ff9b 	bl	8004f28 <display_text>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0

	i2c_mux_select(&mux, 0);
 8005002:	2100      	movs	r1, #0
 8005004:	485f      	ldr	r0, [pc, #380]	@ (8005184 <SSD1306_Init+0x188>)
 8005006:	f7ff fd4b 	bl	8004aa0 <i2c_mux_select>

	/* Init I2C */
	ssd1306_I2C_Init();
 800500a:	f000 fa91 	bl	8005530 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800500e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005012:	2201      	movs	r2, #1
 8005014:	2178      	movs	r1, #120	@ 0x78
 8005016:	485c      	ldr	r0, [pc, #368]	@ (8005188 <SSD1306_Init+0x18c>)
 8005018:	f002 fdce 	bl	8007bb8 <HAL_I2C_IsDeviceReady>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <SSD1306_Init+0x2a>
		/* Return false */
		return 0;
 8005022:	2300      	movs	r3, #0
 8005024:	e0a9      	b.n	800517a <SSD1306_Init+0x17e>
	}

	/* A little delay */
	uint32_t p = 2500;
 8005026:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800502a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800502c:	e002      	b.n	8005034 <SSD1306_Init+0x38>
		p--;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3b01      	subs	r3, #1
 8005032:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f9      	bne.n	800502e <SSD1306_Init+0x32>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800503a:	22ae      	movs	r2, #174	@ 0xae
 800503c:	2100      	movs	r1, #0
 800503e:	2078      	movs	r0, #120	@ 0x78
 8005040:	f000 fafc 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8005044:	2220      	movs	r2, #32
 8005046:	2100      	movs	r1, #0
 8005048:	2078      	movs	r0, #120	@ 0x78
 800504a:	f000 faf7 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800504e:	2210      	movs	r2, #16
 8005050:	2100      	movs	r1, #0
 8005052:	2078      	movs	r0, #120	@ 0x78
 8005054:	f000 faf2 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005058:	22b0      	movs	r2, #176	@ 0xb0
 800505a:	2100      	movs	r1, #0
 800505c:	2078      	movs	r0, #120	@ 0x78
 800505e:	f000 faed 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8005062:	22c8      	movs	r2, #200	@ 0xc8
 8005064:	2100      	movs	r1, #0
 8005066:	2078      	movs	r0, #120	@ 0x78
 8005068:	f000 fae8 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800506c:	2200      	movs	r2, #0
 800506e:	2100      	movs	r1, #0
 8005070:	2078      	movs	r0, #120	@ 0x78
 8005072:	f000 fae3 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005076:	2210      	movs	r2, #16
 8005078:	2100      	movs	r1, #0
 800507a:	2078      	movs	r0, #120	@ 0x78
 800507c:	f000 fade 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8005080:	2240      	movs	r2, #64	@ 0x40
 8005082:	2100      	movs	r1, #0
 8005084:	2078      	movs	r0, #120	@ 0x78
 8005086:	f000 fad9 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800508a:	2281      	movs	r2, #129	@ 0x81
 800508c:	2100      	movs	r1, #0
 800508e:	2078      	movs	r0, #120	@ 0x78
 8005090:	f000 fad4 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005094:	22ff      	movs	r2, #255	@ 0xff
 8005096:	2100      	movs	r1, #0
 8005098:	2078      	movs	r0, #120	@ 0x78
 800509a:	f000 facf 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800509e:	22a1      	movs	r2, #161	@ 0xa1
 80050a0:	2100      	movs	r1, #0
 80050a2:	2078      	movs	r0, #120	@ 0x78
 80050a4:	f000 faca 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80050a8:	22a6      	movs	r2, #166	@ 0xa6
 80050aa:	2100      	movs	r1, #0
 80050ac:	2078      	movs	r0, #120	@ 0x78
 80050ae:	f000 fac5 	bl	800563c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80050b2:	22a8      	movs	r2, #168	@ 0xa8
 80050b4:	2100      	movs	r1, #0
 80050b6:	2078      	movs	r0, #120	@ 0x78
 80050b8:	f000 fac0 	bl	800563c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80050bc:	223f      	movs	r2, #63	@ 0x3f
 80050be:	2100      	movs	r1, #0
 80050c0:	2078      	movs	r0, #120	@ 0x78
 80050c2:	f000 fabb 	bl	800563c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80050c6:	22a4      	movs	r2, #164	@ 0xa4
 80050c8:	2100      	movs	r1, #0
 80050ca:	2078      	movs	r0, #120	@ 0x78
 80050cc:	f000 fab6 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80050d0:	22d3      	movs	r2, #211	@ 0xd3
 80050d2:	2100      	movs	r1, #0
 80050d4:	2078      	movs	r0, #120	@ 0x78
 80050d6:	f000 fab1 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80050da:	2200      	movs	r2, #0
 80050dc:	2100      	movs	r1, #0
 80050de:	2078      	movs	r0, #120	@ 0x78
 80050e0:	f000 faac 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80050e4:	22d5      	movs	r2, #213	@ 0xd5
 80050e6:	2100      	movs	r1, #0
 80050e8:	2078      	movs	r0, #120	@ 0x78
 80050ea:	f000 faa7 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80050ee:	22f0      	movs	r2, #240	@ 0xf0
 80050f0:	2100      	movs	r1, #0
 80050f2:	2078      	movs	r0, #120	@ 0x78
 80050f4:	f000 faa2 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80050f8:	22d9      	movs	r2, #217	@ 0xd9
 80050fa:	2100      	movs	r1, #0
 80050fc:	2078      	movs	r0, #120	@ 0x78
 80050fe:	f000 fa9d 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8005102:	2222      	movs	r2, #34	@ 0x22
 8005104:	2100      	movs	r1, #0
 8005106:	2078      	movs	r0, #120	@ 0x78
 8005108:	f000 fa98 	bl	800563c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800510c:	22da      	movs	r2, #218	@ 0xda
 800510e:	2100      	movs	r1, #0
 8005110:	2078      	movs	r0, #120	@ 0x78
 8005112:	f000 fa93 	bl	800563c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8005116:	2212      	movs	r2, #18
 8005118:	2100      	movs	r1, #0
 800511a:	2078      	movs	r0, #120	@ 0x78
 800511c:	f000 fa8e 	bl	800563c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8005120:	22db      	movs	r2, #219	@ 0xdb
 8005122:	2100      	movs	r1, #0
 8005124:	2078      	movs	r0, #120	@ 0x78
 8005126:	f000 fa89 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800512a:	2220      	movs	r2, #32
 800512c:	2100      	movs	r1, #0
 800512e:	2078      	movs	r0, #120	@ 0x78
 8005130:	f000 fa84 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8005134:	228d      	movs	r2, #141	@ 0x8d
 8005136:	2100      	movs	r1, #0
 8005138:	2078      	movs	r0, #120	@ 0x78
 800513a:	f000 fa7f 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800513e:	2214      	movs	r2, #20
 8005140:	2100      	movs	r1, #0
 8005142:	2078      	movs	r0, #120	@ 0x78
 8005144:	f000 fa7a 	bl	800563c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005148:	22af      	movs	r2, #175	@ 0xaf
 800514a:	2100      	movs	r1, #0
 800514c:	2078      	movs	r0, #120	@ 0x78
 800514e:	f000 fa75 	bl	800563c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8005152:	222e      	movs	r2, #46	@ 0x2e
 8005154:	2100      	movs	r1, #0
 8005156:	2078      	movs	r0, #120	@ 0x78
 8005158:	f000 fa70 	bl	800563c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800515c:	2000      	movs	r0, #0
 800515e:	f000 f845 	bl	80051ec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8005162:	f000 f815 	bl	8005190 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <SSD1306_Init+0x190>)
 8005168:	2200      	movs	r2, #0
 800516a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800516c:	4b07      	ldr	r3, [pc, #28]	@ (800518c <SSD1306_Init+0x190>)
 800516e:	2200      	movs	r2, #0
 8005170:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8005172:	4b06      	ldr	r3, [pc, #24]	@ (800518c <SSD1306_Init+0x190>)
 8005174:	2201      	movs	r2, #1
 8005176:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8005178:	2301      	movs	r3, #1
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000054 	.word	0x20000054
 8005188:	20000330 	.word	0x20000330
 800518c:	20000d9c 	.word	0x20000d9c

08005190 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8005196:	2300      	movs	r3, #0
 8005198:	71fb      	strb	r3, [r7, #7]
 800519a:	e01d      	b.n	80051d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	3b50      	subs	r3, #80	@ 0x50
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	2100      	movs	r1, #0
 80051a6:	2078      	movs	r0, #120	@ 0x78
 80051a8:	f000 fa48 	bl	800563c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80051ac:	2200      	movs	r2, #0
 80051ae:	2100      	movs	r1, #0
 80051b0:	2078      	movs	r0, #120	@ 0x78
 80051b2:	f000 fa43 	bl	800563c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80051b6:	2210      	movs	r2, #16
 80051b8:	2100      	movs	r1, #0
 80051ba:	2078      	movs	r0, #120	@ 0x78
 80051bc:	f000 fa3e 	bl	800563c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	01db      	lsls	r3, r3, #7
 80051c4:	4a08      	ldr	r2, [pc, #32]	@ (80051e8 <SSD1306_UpdateScreen+0x58>)
 80051c6:	441a      	add	r2, r3
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	2140      	movs	r1, #64	@ 0x40
 80051cc:	2078      	movs	r0, #120	@ 0x78
 80051ce:	f000 f9c9 	bl	8005564 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	3301      	adds	r3, #1
 80051d6:	71fb      	strb	r3, [r7, #7]
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b07      	cmp	r3, #7
 80051dc:	d9de      	bls.n	800519c <SSD1306_UpdateScreen+0xc>
	}
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	2000099c 	.word	0x2000099c

080051ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <SSD1306_Fill+0x14>
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <SSD1306_Fill+0x16>
 8005200:	23ff      	movs	r3, #255	@ 0xff
 8005202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005206:	4619      	mov	r1, r3
 8005208:	4803      	ldr	r0, [pc, #12]	@ (8005218 <SSD1306_Fill+0x2c>)
 800520a:	f006 fd1e 	bl	800bc4a <memset>
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	2000099c 	.word	0x2000099c

0800521c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	80fb      	strh	r3, [r7, #6]
 8005226:	460b      	mov	r3, r1
 8005228:	80bb      	strh	r3, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	70fb      	strb	r3, [r7, #3]
	if (
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b7f      	cmp	r3, #127	@ 0x7f
 8005232:	d848      	bhi.n	80052c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8005234:	88bb      	ldrh	r3, [r7, #4]
 8005236:	2b3f      	cmp	r3, #63	@ 0x3f
 8005238:	d845      	bhi.n	80052c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800523a:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <SSD1306_DrawPixel+0xb8>)
 800523c:	791b      	ldrb	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d11a      	bne.n	800528c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	88bb      	ldrh	r3, [r7, #4]
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	b298      	uxth	r0, r3
 800525e:	4603      	mov	r3, r0
 8005260:	01db      	lsls	r3, r3, #7
 8005262:	4413      	add	r3, r2
 8005264:	4a1c      	ldr	r2, [pc, #112]	@ (80052d8 <SSD1306_DrawPixel+0xbc>)
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	b25a      	sxtb	r2, r3
 800526a:	88bb      	ldrh	r3, [r7, #4]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	b25b      	sxtb	r3, r3
 8005278:	4313      	orrs	r3, r2
 800527a:	b259      	sxtb	r1, r3
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	4603      	mov	r3, r0
 8005280:	01db      	lsls	r3, r3, #7
 8005282:	4413      	add	r3, r2
 8005284:	b2c9      	uxtb	r1, r1
 8005286:	4a14      	ldr	r2, [pc, #80]	@ (80052d8 <SSD1306_DrawPixel+0xbc>)
 8005288:	54d1      	strb	r1, [r2, r3]
 800528a:	e01d      	b.n	80052c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800528c:	88fa      	ldrh	r2, [r7, #6]
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	08db      	lsrs	r3, r3, #3
 8005292:	b298      	uxth	r0, r3
 8005294:	4603      	mov	r3, r0
 8005296:	01db      	lsls	r3, r3, #7
 8005298:	4413      	add	r3, r2
 800529a:	4a0f      	ldr	r2, [pc, #60]	@ (80052d8 <SSD1306_DrawPixel+0xbc>)
 800529c:	5cd3      	ldrb	r3, [r2, r3]
 800529e:	b25a      	sxtb	r2, r3
 80052a0:	88bb      	ldrh	r3, [r7, #4]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2101      	movs	r1, #1
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	b25b      	sxtb	r3, r3
 80052b2:	4013      	ands	r3, r2
 80052b4:	b259      	sxtb	r1, r3
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	4603      	mov	r3, r0
 80052ba:	01db      	lsls	r3, r3, #7
 80052bc:	4413      	add	r3, r2
 80052be:	b2c9      	uxtb	r1, r1
 80052c0:	4a05      	ldr	r2, [pc, #20]	@ (80052d8 <SSD1306_DrawPixel+0xbc>)
 80052c2:	54d1      	strb	r1, [r2, r3]
 80052c4:	e000      	b.n	80052c8 <SSD1306_DrawPixel+0xac>
		return;
 80052c6:	bf00      	nop
	}
}
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000d9c 	.word	0x20000d9c
 80052d8:	2000099c 	.word	0x2000099c

080052dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	460a      	mov	r2, r1
 80052e6:	80fb      	strh	r3, [r7, #6]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80052ec:	4a05      	ldr	r2, [pc, #20]	@ (8005304 <SSD1306_GotoXY+0x28>)
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80052f2:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <SSD1306_GotoXY+0x28>)
 80052f4:	88bb      	ldrh	r3, [r7, #4]
 80052f6:	8053      	strh	r3, [r2, #2]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000d9c 	.word	0x20000d9c

08005308 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	6039      	str	r1, [r7, #0]
 8005312:	71fb      	strb	r3, [r7, #7]
 8005314:	4613      	mov	r3, r2
 8005316:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005318:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <SSD1306_Putc+0xf8>)
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	4413      	add	r3, r2
	if (
 8005324:	2b7f      	cmp	r3, #127	@ 0x7f
 8005326:	dc07      	bgt.n	8005338 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005328:	4b35      	ldr	r3, [pc, #212]	@ (8005400 <SSD1306_Putc+0xf8>)
 800532a:	885b      	ldrh	r3, [r3, #2]
 800532c:	461a      	mov	r2, r3
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005334:	2b3f      	cmp	r3, #63	@ 0x3f
 8005336:	dd01      	ble.n	800533c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005338:	2300      	movs	r3, #0
 800533a:	e05d      	b.n	80053f8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e04b      	b.n	80053da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	3b20      	subs	r3, #32
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	7849      	ldrb	r1, [r1, #1]
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4619      	mov	r1, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	440b      	add	r3, r1
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	e030      	b.n	80053c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d010      	beq.n	8005398 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005376:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <SSD1306_Putc+0xf8>)
 8005378:	881a      	ldrh	r2, [r3, #0]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	b29b      	uxth	r3, r3
 800537e:	4413      	add	r3, r2
 8005380:	b298      	uxth	r0, r3
 8005382:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <SSD1306_Putc+0xf8>)
 8005384:	885a      	ldrh	r2, [r3, #2]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	b29b      	uxth	r3, r3
 800538a:	4413      	add	r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	79ba      	ldrb	r2, [r7, #6]
 8005390:	4619      	mov	r1, r3
 8005392:	f7ff ff43 	bl	800521c <SSD1306_DrawPixel>
 8005396:	e014      	b.n	80053c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005398:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <SSD1306_Putc+0xf8>)
 800539a:	881a      	ldrh	r2, [r3, #0]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	b298      	uxth	r0, r3
 80053a4:	4b16      	ldr	r3, [pc, #88]	@ (8005400 <SSD1306_Putc+0xf8>)
 80053a6:	885a      	ldrh	r2, [r3, #2]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	b299      	uxth	r1, r3
 80053b0:	79bb      	ldrb	r3, [r7, #6]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	f7ff ff2d 	bl	800521c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3301      	adds	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d3c8      	bcc.n	8005366 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3301      	adds	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	461a      	mov	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d3ad      	bcc.n	8005342 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <SSD1306_Putc+0xf8>)
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	4b03      	ldr	r3, [pc, #12]	@ (8005400 <SSD1306_Putc+0xf8>)
 80053f4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80053f6:	79fb      	ldrb	r3, [r7, #7]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000d9c 	.word	0x20000d9c

08005404 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005412:	e012      	b.n	800543a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	79fa      	ldrb	r2, [r7, #7]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff ff73 	bl	8005308 <SSD1306_Putc>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d002      	beq.n	8005434 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	e008      	b.n	8005446 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e8      	bne.n	8005414 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	781b      	ldrb	r3, [r3, #0]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	60ba      	str	r2, [r7, #8]
 8005456:	461a      	mov	r2, r3
 8005458:	4603      	mov	r3, r0
 800545a:	81fb      	strh	r3, [r7, #14]
 800545c:	460b      	mov	r3, r1
 800545e:	81bb      	strh	r3, [r7, #12]
 8005460:	4613      	mov	r3, r2
 8005462:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8005464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005468:	3307      	adds	r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	da00      	bge.n	8005470 <SSD1306_DrawBitmap+0x22>
 800546e:	3307      	adds	r3, #7
 8005470:	10db      	asrs	r3, r3, #3
 8005472:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8005478:	2300      	movs	r3, #0
 800547a:	82bb      	strh	r3, [r7, #20]
 800547c:	e044      	b.n	8005508 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800547e:	2300      	movs	r3, #0
 8005480:	827b      	strh	r3, [r7, #18]
 8005482:	e02f      	b.n	80054e4 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8005484:	8a7b      	ldrh	r3, [r7, #18]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
 8005494:	e012      	b.n	80054bc <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8005496:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800549a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800549e:	fb03 f202 	mul.w	r2, r3, r2
 80054a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da00      	bge.n	80054ac <SSD1306_DrawBitmap+0x5e>
 80054aa:	3307      	adds	r3, #7
 80054ac:	10db      	asrs	r3, r3, #3
 80054ae:	b21b      	sxth	r3, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4413      	add	r3, r2
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80054bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	da09      	bge.n	80054d8 <SSD1306_DrawBitmap+0x8a>
 80054c4:	89fa      	ldrh	r2, [r7, #14]
 80054c6:	8a7b      	ldrh	r3, [r7, #18]
 80054c8:	4413      	add	r3, r2
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	89b9      	ldrh	r1, [r7, #12]
 80054ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fea2 	bl	800521c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80054d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	827b      	strh	r3, [r7, #18]
 80054e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80054e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	dbc9      	blt.n	8005484 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80054f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3301      	adds	r3, #1
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	82bb      	strh	r3, [r7, #20]
 80054fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005500:	b29b      	uxth	r3, r3
 8005502:	3301      	adds	r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	81bb      	strh	r3, [r7, #12]
 8005508:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800550c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005510:	429a      	cmp	r2, r3
 8005512:	dbb4      	blt.n	800547e <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8005522:	2000      	movs	r0, #0
 8005524:	f7ff fe62 	bl	80051ec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8005528:	f7ff fe32 	bl	8005190 <SSD1306_UpdateScreen>
}
 800552c:	bf00      	nop
 800552e:	bd80      	pop	{r7, pc}

08005530 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
	i2c_mux_select(&mux, 0);
 8005536:	2100      	movs	r1, #0
 8005538:	4808      	ldr	r0, [pc, #32]	@ (800555c <ssd1306_I2C_Init+0x2c>)
 800553a:	f7ff fab1 	bl	8004aa0 <i2c_mux_select>
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800553e:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <ssd1306_I2C_Init+0x30>)
 8005540:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005542:	e002      	b.n	800554a <ssd1306_I2C_Init+0x1a>
		p--;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	607b      	str	r3, [r7, #4]
	while(p>0)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f9      	bne.n	8005544 <ssd1306_I2C_Init+0x14>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000054 	.word	0x20000054
 8005560:	0003d090 	.word	0x0003d090

08005564 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b0c7      	sub	sp, #284	@ 0x11c
 8005568:	af02      	add	r7, sp, #8
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8005572:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8005576:	600a      	str	r2, [r1, #0]
 8005578:	4619      	mov	r1, r3
 800557a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800557e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005582:	4622      	mov	r2, r4
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800558a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800558e:	4602      	mov	r2, r0
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800559a:	460a      	mov	r2, r1
 800559c:	801a      	strh	r2, [r3, #0]
i2c_mux_select(&mux, 0);
 800559e:	2100      	movs	r1, #0
 80055a0:	4824      	ldr	r0, [pc, #144]	@ (8005634 <ssd1306_I2C_WriteMulti+0xd0>)
 80055a2:	f7ff fa7d 	bl	8004aa0 <i2c_mux_select>
uint8_t dt[256];
dt[0] = reg;
 80055a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80055b2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80055b6:	7812      	ldrb	r2, [r2, #0]
 80055b8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80055c0:	e015      	b.n	80055ee <ssd1306_I2C_WriteMulti+0x8a>
dt[i+1] = data[i];
 80055c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80055c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80055ca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	441a      	add	r2, r3
 80055d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80055d6:	3301      	adds	r3, #1
 80055d8:	7811      	ldrb	r1, [r2, #0]
 80055da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80055de:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80055e2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80055e4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80055e8:	3301      	adds	r3, #1
 80055ea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80055ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80055f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80055fc:	8812      	ldrh	r2, [r2, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d8df      	bhi.n	80055c2 <ssd1306_I2C_WriteMulti+0x5e>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8005602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005606:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b299      	uxth	r1, r3
 800560e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005612:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	b29b      	uxth	r3, r3
 800561c:	f107 020c 	add.w	r2, r7, #12
 8005620:	200a      	movs	r0, #10
 8005622:	9000      	str	r0, [sp, #0]
 8005624:	4804      	ldr	r0, [pc, #16]	@ (8005638 <ssd1306_I2C_WriteMulti+0xd4>)
 8005626:	f001 fc6b 	bl	8006f00 <HAL_I2C_Master_Transmit>
}
 800562a:	bf00      	nop
 800562c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8005630:	46bd      	mov	sp, r7
 8005632:	bd90      	pop	{r4, r7, pc}
 8005634:	20000054 	.word	0x20000054
 8005638:	20000330 	.word	0x20000330

0800563c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af02      	add	r7, sp, #8
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
 8005646:	460b      	mov	r3, r1
 8005648:	71bb      	strb	r3, [r7, #6]
 800564a:	4613      	mov	r3, r2
 800564c:	717b      	strb	r3, [r7, #5]
	i2c_mux_select(&mux, 0);
 800564e:	2100      	movs	r1, #0
 8005650:	480a      	ldr	r0, [pc, #40]	@ (800567c <ssd1306_I2C_Write+0x40>)
 8005652:	f7ff fa25 	bl	8004aa0 <i2c_mux_select>
	uint8_t dt[2];
	dt[0] = reg;
 8005656:	79bb      	ldrb	r3, [r7, #6]
 8005658:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800565a:	797b      	ldrb	r3, [r7, #5]
 800565c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	b299      	uxth	r1, r3
 8005662:	f107 020c 	add.w	r2, r7, #12
 8005666:	230a      	movs	r3, #10
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	2302      	movs	r3, #2
 800566c:	4804      	ldr	r0, [pc, #16]	@ (8005680 <ssd1306_I2C_Write+0x44>)
 800566e:	f001 fc47 	bl	8006f00 <HAL_I2C_Master_Transmit>
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000054 	.word	0x20000054
 8005680:	20000330 	.word	0x20000330

08005684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005688:	4b0e      	ldr	r3, [pc, #56]	@ (80056c4 <HAL_Init+0x40>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0d      	ldr	r2, [pc, #52]	@ (80056c4 <HAL_Init+0x40>)
 800568e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_Init+0x40>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a0a      	ldr	r2, [pc, #40]	@ (80056c4 <HAL_Init+0x40>)
 800569a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800569e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056a0:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <HAL_Init+0x40>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a07      	ldr	r2, [pc, #28]	@ (80056c4 <HAL_Init+0x40>)
 80056a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056ac:	2003      	movs	r0, #3
 80056ae:	f000 fd5f 	bl	8006170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056b2:	2000      	movs	r0, #0
 80056b4:	f000 f808 	bl	80056c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056b8:	f7fe fb0c 	bl	8003cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023c00 	.word	0x40023c00

080056c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056d0:	4b12      	ldr	r3, [pc, #72]	@ (800571c <HAL_InitTick+0x54>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b12      	ldr	r3, [pc, #72]	@ (8005720 <HAL_InitTick+0x58>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	4619      	mov	r1, r3
 80056da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056de:	fbb3 f3f1 	udiv	r3, r3, r1
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fd77 	bl	80061da <HAL_SYSTICK_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e00e      	b.n	8005714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b0f      	cmp	r3, #15
 80056fa:	d80a      	bhi.n	8005712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056fc:	2200      	movs	r2, #0
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	f000 fd3f 	bl	8006186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005708:	4a06      	ldr	r2, [pc, #24]	@ (8005724 <HAL_InitTick+0x5c>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20000064 	.word	0x20000064
 8005720:	20000098 	.word	0x20000098
 8005724:	20000094 	.word	0x20000094

08005728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800572c:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <HAL_IncTick+0x20>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	4b06      	ldr	r3, [pc, #24]	@ (800574c <HAL_IncTick+0x24>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4413      	add	r3, r2
 8005738:	4a04      	ldr	r2, [pc, #16]	@ (800574c <HAL_IncTick+0x24>)
 800573a:	6013      	str	r3, [r2, #0]
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000098 	.word	0x20000098
 800574c:	20000da4 	.word	0x20000da4

08005750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return uwTick;
 8005754:	4b03      	ldr	r3, [pc, #12]	@ (8005764 <HAL_GetTick+0x14>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000da4 	.word	0x20000da4

08005768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005770:	f7ff ffee 	bl	8005750 <HAL_GetTick>
 8005774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d005      	beq.n	800578e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005782:	4b0a      	ldr	r3, [pc, #40]	@ (80057ac <HAL_Delay+0x44>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800578e:	bf00      	nop
 8005790:	f7ff ffde 	bl	8005750 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	429a      	cmp	r2, r3
 800579e:	d8f7      	bhi.n	8005790 <HAL_Delay+0x28>
  {
  }
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000098 	.word	0x20000098

080057b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e033      	b.n	800582e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fe faa8 	bl	8003d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d118      	bne.n	8005820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80057f6:	f023 0302 	bic.w	r3, r3, #2
 80057fa:	f043 0202 	orr.w	r2, r3, #2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fae8 	bl	8005dd8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	641a      	str	r2, [r3, #64]	@ 0x40
 800581e:	e001      	b.n	8005824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_ADC_Start+0x1a>
 800584e:	2302      	movs	r3, #2
 8005850:	e0b2      	b.n	80059b8 <HAL_ADC_Start+0x180>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d018      	beq.n	800589a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005878:	4b52      	ldr	r3, [pc, #328]	@ (80059c4 <HAL_ADC_Start+0x18c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a52      	ldr	r2, [pc, #328]	@ (80059c8 <HAL_ADC_Start+0x190>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0c9a      	lsrs	r2, r3, #18
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800588c:	e002      	b.n	8005894 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3b01      	subs	r3, #1
 8005892:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f9      	bne.n	800588e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d17a      	bne.n	800599e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e6:	d106      	bne.n	80058f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ec:	f023 0206 	bic.w	r2, r3, #6
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80058f4:	e002      	b.n	80058fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005904:	4b31      	ldr	r3, [pc, #196]	@ (80059cc <HAL_ADC_Start+0x194>)
 8005906:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005910:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12a      	bne.n	8005974 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a2b      	ldr	r2, [pc, #172]	@ (80059d0 <HAL_ADC_Start+0x198>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d015      	beq.n	8005954 <HAL_ADC_Start+0x11c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a29      	ldr	r2, [pc, #164]	@ (80059d4 <HAL_ADC_Start+0x19c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d105      	bne.n	800593e <HAL_ADC_Start+0x106>
 8005932:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <HAL_ADC_Start+0x194>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a25      	ldr	r2, [pc, #148]	@ (80059d8 <HAL_ADC_Start+0x1a0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d136      	bne.n	80059b6 <HAL_ADC_Start+0x17e>
 8005948:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <HAL_ADC_Start+0x194>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d130      	bne.n	80059b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d129      	bne.n	80059b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	e020      	b.n	80059b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <HAL_ADC_Start+0x198>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d11b      	bne.n	80059b6 <HAL_ADC_Start+0x17e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d114      	bne.n	80059b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800599a:	609a      	str	r2, [r3, #8]
 800599c:	e00b      	b.n	80059b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	f043 0210 	orr.w	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20000064 	.word	0x20000064
 80059c8:	431bde83 	.word	0x431bde83
 80059cc:	40012300 	.word	0x40012300
 80059d0:	40012000 	.word	0x40012000
 80059d4:	40012100 	.word	0x40012100
 80059d8:	40012200 	.word	0x40012200

080059dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_ADC_Stop+0x16>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e021      	b.n	8005a36 <HAL_ADC_Stop+0x5a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5e:	d113      	bne.n	8005a88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6e:	d10b      	bne.n	8005a88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e063      	b.n	8005b50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a88:	f7ff fe62 	bl	8005750 <HAL_GetTick>
 8005a8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a8e:	e021      	b.n	8005ad4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d01d      	beq.n	8005ad4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <HAL_ADC_PollForConversion+0x6c>
 8005a9e:	f7ff fe57 	bl	8005750 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d212      	bcs.n	8005ad4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d00b      	beq.n	8005ad4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e03d      	b.n	8005b50 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d1d6      	bne.n	8005a90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0212 	mvn.w	r2, #18
 8005aea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d123      	bne.n	8005b4e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11f      	bne.n	8005b4e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d111      	bne.n	8005b4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d105      	bne.n	8005b4e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e113      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x244>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	d925      	bls.n	8005bec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68d9      	ldr	r1, [r3, #12]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	4613      	mov	r3, r2
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3b1e      	subs	r3, #30
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43da      	mvns	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	400a      	ands	r2, r1
 8005bc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68d9      	ldr	r1, [r3, #12]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	4603      	mov	r3, r0
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4403      	add	r3, r0
 8005bde:	3b1e      	subs	r3, #30
 8005be0:	409a      	lsls	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	e022      	b.n	8005c32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6919      	ldr	r1, [r3, #16]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	2207      	movs	r2, #7
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43da      	mvns	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	400a      	ands	r2, r1
 8005c0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6919      	ldr	r1, [r3, #16]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	4618      	mov	r0, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4403      	add	r3, r0
 8005c28:	409a      	lsls	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b06      	cmp	r3, #6
 8005c38:	d824      	bhi.n	8005c84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	3b05      	subs	r3, #5
 8005c4c:	221f      	movs	r2, #31
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43da      	mvns	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	400a      	ands	r2, r1
 8005c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	4618      	mov	r0, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	3b05      	subs	r3, #5
 8005c76:	fa00 f203 	lsl.w	r2, r0, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c82:	e04c      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d824      	bhi.n	8005cd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3b23      	subs	r3, #35	@ 0x23
 8005c9e:	221f      	movs	r2, #31
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43da      	mvns	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	400a      	ands	r2, r1
 8005cac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	4618      	mov	r0, r3
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3b23      	subs	r3, #35	@ 0x23
 8005cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cd4:	e023      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3b41      	subs	r3, #65	@ 0x41
 8005ce8:	221f      	movs	r2, #31
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43da      	mvns	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	400a      	ands	r2, r1
 8005cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4618      	mov	r0, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	3b41      	subs	r3, #65	@ 0x41
 8005d12:	fa00 f203 	lsl.w	r2, r0, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d1e:	4b29      	ldr	r3, [pc, #164]	@ (8005dc4 <HAL_ADC_ConfigChannel+0x250>)
 8005d20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a28      	ldr	r2, [pc, #160]	@ (8005dc8 <HAL_ADC_ConfigChannel+0x254>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10f      	bne.n	8005d4c <HAL_ADC_ConfigChannel+0x1d8>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b12      	cmp	r3, #18
 8005d32:	d10b      	bne.n	8005d4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc8 <HAL_ADC_ConfigChannel+0x254>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d12b      	bne.n	8005dae <HAL_ADC_ConfigChannel+0x23a>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dcc <HAL_ADC_ConfigChannel+0x258>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <HAL_ADC_ConfigChannel+0x1f4>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b11      	cmp	r3, #17
 8005d66:	d122      	bne.n	8005dae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a11      	ldr	r2, [pc, #68]	@ (8005dcc <HAL_ADC_ConfigChannel+0x258>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d111      	bne.n	8005dae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d8a:	4b11      	ldr	r3, [pc, #68]	@ (8005dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a11      	ldr	r2, [pc, #68]	@ (8005dd4 <HAL_ADC_ConfigChannel+0x260>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	0c9a      	lsrs	r2, r3, #18
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005da0:	e002      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f9      	bne.n	8005da2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	40012300 	.word	0x40012300
 8005dc8:	40012000 	.word	0x40012000
 8005dcc:	10000012 	.word	0x10000012
 8005dd0:	20000064 	.word	0x20000064
 8005dd4:	431bde83 	.word	0x431bde83

08005dd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005de0:	4b79      	ldr	r3, [pc, #484]	@ (8005fc8 <ADC_Init+0x1f0>)
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6859      	ldr	r1, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	021a      	lsls	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6859      	ldr	r1, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6a:	4a58      	ldr	r2, [pc, #352]	@ (8005fcc <ADC_Init+0x1f4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6899      	ldr	r1, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6899      	ldr	r1, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	e00f      	b.n	8005ed6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ed4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0202 	bic.w	r2, r2, #2
 8005ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6899      	ldr	r1, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	7e1b      	ldrb	r3, [r3, #24]
 8005ef0:	005a      	lsls	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01b      	beq.n	8005f3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f12:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005f22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	035a      	lsls	r2, r3, #13
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	e007      	b.n	8005f4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f4a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	051a      	lsls	r2, r3, #20
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f8e:	025a      	lsls	r2, r3, #9
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	029a      	lsls	r2, r3, #10
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40012300 	.word	0x40012300
 8005fcc:	0f000001 	.word	0x0f000001

08005fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <__NVIC_SetPriorityGrouping+0x44>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005fec:	4013      	ands	r3, r2
 8005fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006002:	4a04      	ldr	r2, [pc, #16]	@ (8006014 <__NVIC_SetPriorityGrouping+0x44>)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	60d3      	str	r3, [r2, #12]
}
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	e000ed00 	.word	0xe000ed00

08006018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800601c:	4b04      	ldr	r3, [pc, #16]	@ (8006030 <__NVIC_GetPriorityGrouping+0x18>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	f003 0307 	and.w	r3, r3, #7
}
 8006026:	4618      	mov	r0, r3
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	e000ed00 	.word	0xe000ed00

08006034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	4603      	mov	r3, r0
 800603c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800603e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006042:	2b00      	cmp	r3, #0
 8006044:	db0b      	blt.n	800605e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	f003 021f 	and.w	r2, r3, #31
 800604c:	4907      	ldr	r1, [pc, #28]	@ (800606c <__NVIC_EnableIRQ+0x38>)
 800604e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2001      	movs	r0, #1
 8006056:	fa00 f202 	lsl.w	r2, r0, r2
 800605a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	e000e100 	.word	0xe000e100

08006070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	6039      	str	r1, [r7, #0]
 800607a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800607c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006080:	2b00      	cmp	r3, #0
 8006082:	db0a      	blt.n	800609a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	490c      	ldr	r1, [pc, #48]	@ (80060bc <__NVIC_SetPriority+0x4c>)
 800608a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800608e:	0112      	lsls	r2, r2, #4
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	440b      	add	r3, r1
 8006094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006098:	e00a      	b.n	80060b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	4908      	ldr	r1, [pc, #32]	@ (80060c0 <__NVIC_SetPriority+0x50>)
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	3b04      	subs	r3, #4
 80060a8:	0112      	lsls	r2, r2, #4
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	440b      	add	r3, r1
 80060ae:	761a      	strb	r2, [r3, #24]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	e000e100 	.word	0xe000e100
 80060c0:	e000ed00 	.word	0xe000ed00

080060c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b089      	sub	sp, #36	@ 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f1c3 0307 	rsb	r3, r3, #7
 80060de:	2b04      	cmp	r3, #4
 80060e0:	bf28      	it	cs
 80060e2:	2304      	movcs	r3, #4
 80060e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3304      	adds	r3, #4
 80060ea:	2b06      	cmp	r3, #6
 80060ec:	d902      	bls.n	80060f4 <NVIC_EncodePriority+0x30>
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3b03      	subs	r3, #3
 80060f2:	e000      	b.n	80060f6 <NVIC_EncodePriority+0x32>
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060f8:	f04f 32ff 	mov.w	r2, #4294967295
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	43da      	mvns	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	401a      	ands	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800610c:	f04f 31ff 	mov.w	r1, #4294967295
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	fa01 f303 	lsl.w	r3, r1, r3
 8006116:	43d9      	mvns	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800611c:	4313      	orrs	r3, r2
         );
}
 800611e:	4618      	mov	r0, r3
 8006120:	3724      	adds	r7, #36	@ 0x24
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3b01      	subs	r3, #1
 8006138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800613c:	d301      	bcc.n	8006142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800613e:	2301      	movs	r3, #1
 8006140:	e00f      	b.n	8006162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006142:	4a0a      	ldr	r2, [pc, #40]	@ (800616c <SysTick_Config+0x40>)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3b01      	subs	r3, #1
 8006148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800614a:	210f      	movs	r1, #15
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	f7ff ff8e 	bl	8006070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006154:	4b05      	ldr	r3, [pc, #20]	@ (800616c <SysTick_Config+0x40>)
 8006156:	2200      	movs	r2, #0
 8006158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800615a:	4b04      	ldr	r3, [pc, #16]	@ (800616c <SysTick_Config+0x40>)
 800615c:	2207      	movs	r2, #7
 800615e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	e000e010 	.word	0xe000e010

08006170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff ff29 	bl	8005fd0 <__NVIC_SetPriorityGrouping>
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	4603      	mov	r3, r0
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006198:	f7ff ff3e 	bl	8006018 <__NVIC_GetPriorityGrouping>
 800619c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	6978      	ldr	r0, [r7, #20]
 80061a4:	f7ff ff8e 	bl	80060c4 <NVIC_EncodePriority>
 80061a8:	4602      	mov	r2, r0
 80061aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ae:	4611      	mov	r1, r2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff ff5d 	bl	8006070 <__NVIC_SetPriority>
}
 80061b6:	bf00      	nop
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	4603      	mov	r3, r0
 80061c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff ff31 	bl	8006034 <__NVIC_EnableIRQ>
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff ffa2 	bl	800612c <SysTick_Config>
 80061e8:	4603      	mov	r3, r0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006200:	f7ff faa6 	bl	8005750 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e099      	b.n	8006344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006230:	e00f      	b.n	8006252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006232:	f7ff fa8d 	bl	8005750 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b05      	cmp	r3, #5
 800623e:	d908      	bls.n	8006252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2203      	movs	r2, #3
 800624a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e078      	b.n	8006344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e8      	bne.n	8006232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4b38      	ldr	r3, [pc, #224]	@ (800634c <HAL_DMA_Init+0x158>)
 800626c:	4013      	ands	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800627e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800628a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d107      	bne.n	80062bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	4313      	orrs	r3, r2
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0307 	bic.w	r3, r3, #7
 80062d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d117      	bne.n	8006316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa7b 	bl	80067f4 <DMA_CheckFifoParam>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2240      	movs	r2, #64	@ 0x40
 8006308:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006312:	2301      	movs	r3, #1
 8006314:	e016      	b.n	8006344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa32 	bl	8006788 <DMA_CalcBaseAndBitshift>
 8006324:	4603      	mov	r3, r0
 8006326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632c:	223f      	movs	r2, #63	@ 0x3f
 800632e:	409a      	lsls	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	f010803f 	.word	0xf010803f

08006350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800635e:	f7ff f9f7 	bl	8005750 <HAL_GetTick>
 8006362:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d008      	beq.n	8006382 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2280      	movs	r2, #128	@ 0x80
 8006374:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e052      	b.n	8006428 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0216 	bic.w	r2, r2, #22
 8006390:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <HAL_DMA_Abort+0x62>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0208 	bic.w	r2, r2, #8
 80063c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0201 	bic.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063d2:	e013      	b.n	80063fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063d4:	f7ff f9bc 	bl	8005750 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d90c      	bls.n	80063fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2203      	movs	r2, #3
 80063ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e015      	b.n	8006428 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e4      	bne.n	80063d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640e:	223f      	movs	r2, #63	@ 0x3f
 8006410:	409a      	lsls	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d004      	beq.n	800644e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2280      	movs	r2, #128	@ 0x80
 8006448:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e00c      	b.n	8006468 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2205      	movs	r2, #5
 8006452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0201 	bic.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006480:	4b8e      	ldr	r3, [pc, #568]	@ (80066bc <HAL_DMA_IRQHandler+0x248>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a8e      	ldr	r2, [pc, #568]	@ (80066c0 <HAL_DMA_IRQHandler+0x24c>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	0a9b      	lsrs	r3, r3, #10
 800648c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006492:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649e:	2208      	movs	r2, #8
 80064a0:	409a      	lsls	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01a      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0204 	bic.w	r2, r2, #4
 80064c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064cc:	2208      	movs	r2, #8
 80064ce:	409a      	lsls	r2, r3
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d8:	f043 0201 	orr.w	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e4:	2201      	movs	r2, #1
 80064e6:	409a      	lsls	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d012      	beq.n	8006516 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006502:	2201      	movs	r2, #1
 8006504:	409a      	lsls	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f043 0202 	orr.w	r2, r3, #2
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651a:	2204      	movs	r2, #4
 800651c:	409a      	lsls	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4013      	ands	r3, r2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d012      	beq.n	800654c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006538:	2204      	movs	r2, #4
 800653a:	409a      	lsls	r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006544:	f043 0204 	orr.w	r2, r3, #4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006550:	2210      	movs	r2, #16
 8006552:	409a      	lsls	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d043      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d03c      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	2210      	movs	r2, #16
 8006570:	409a      	lsls	r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d018      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d108      	bne.n	80065a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d024      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
 80065a2:	e01f      	b.n	80065e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01b      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
 80065b4:	e016      	b.n	80065e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0208 	bic.w	r2, r2, #8
 80065d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e8:	2220      	movs	r2, #32
 80065ea:	409a      	lsls	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 808f 	beq.w	8006714 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8087 	beq.w	8006714 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660a:	2220      	movs	r2, #32
 800660c:	409a      	lsls	r2, r3
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b05      	cmp	r3, #5
 800661c:	d136      	bne.n	800668c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0216 	bic.w	r2, r2, #22
 800662c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800663c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <HAL_DMA_IRQHandler+0x1da>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0208 	bic.w	r2, r2, #8
 800665c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006662:	223f      	movs	r2, #63	@ 0x3f
 8006664:	409a      	lsls	r2, r3
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667e:	2b00      	cmp	r3, #0
 8006680:	d07e      	beq.n	8006780 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
        }
        return;
 800668a:	e079      	b.n	8006780 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01d      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d031      	beq.n	8006714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
 80066b8:	e02c      	b.n	8006714 <HAL_DMA_IRQHandler+0x2a0>
 80066ba:	bf00      	nop
 80066bc:	20000064 	.word	0x20000064
 80066c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d023      	beq.n	8006714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
 80066d4:	e01e      	b.n	8006714 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10f      	bne.n	8006704 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0210 	bic.w	r2, r2, #16
 80066f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	2b00      	cmp	r3, #0
 800671a:	d032      	beq.n	8006782 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d022      	beq.n	800676e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2205      	movs	r2, #5
 800672c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	3301      	adds	r3, #1
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	429a      	cmp	r2, r3
 800674a:	d307      	bcc.n	800675c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f2      	bne.n	8006740 <HAL_DMA_IRQHandler+0x2cc>
 800675a:	e000      	b.n	800675e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800675c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
 800677e:	e000      	b.n	8006782 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006780:	bf00      	nop
    }
  }
}
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	3b10      	subs	r3, #16
 8006798:	4a14      	ldr	r2, [pc, #80]	@ (80067ec <DMA_CalcBaseAndBitshift+0x64>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	091b      	lsrs	r3, r3, #4
 80067a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067a2:	4a13      	ldr	r2, [pc, #76]	@ (80067f0 <DMA_CalcBaseAndBitshift+0x68>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d909      	bls.n	80067ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067be:	f023 0303 	bic.w	r3, r3, #3
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80067c8:	e007      	b.n	80067da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	aaaaaaab 	.word	0xaaaaaaab
 80067f0:	08010ccc 	.word	0x08010ccc

080067f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006804:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11f      	bne.n	800684e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b03      	cmp	r3, #3
 8006812:	d856      	bhi.n	80068c2 <DMA_CheckFifoParam+0xce>
 8006814:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <DMA_CheckFifoParam+0x28>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	0800682d 	.word	0x0800682d
 8006820:	0800683f 	.word	0x0800683f
 8006824:	0800682d 	.word	0x0800682d
 8006828:	080068c3 	.word	0x080068c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d046      	beq.n	80068c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800683c:	e043      	b.n	80068c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006846:	d140      	bne.n	80068ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800684c:	e03d      	b.n	80068ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006856:	d121      	bne.n	800689c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b03      	cmp	r3, #3
 800685c:	d837      	bhi.n	80068ce <DMA_CheckFifoParam+0xda>
 800685e:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <DMA_CheckFifoParam+0x70>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006875 	.word	0x08006875
 8006868:	0800687b 	.word	0x0800687b
 800686c:	08006875 	.word	0x08006875
 8006870:	0800688d 	.word	0x0800688d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
      break;
 8006878:	e030      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d025      	beq.n	80068d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800688a:	e022      	b.n	80068d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006890:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006894:	d11f      	bne.n	80068d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800689a:	e01c      	b.n	80068d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d903      	bls.n	80068aa <DMA_CheckFifoParam+0xb6>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d003      	beq.n	80068b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068a8:	e018      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
      break;
 80068ae:	e015      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
      break;
 80068c0:	e00b      	b.n	80068da <DMA_CheckFifoParam+0xe6>
      break;
 80068c2:	bf00      	nop
 80068c4:	e00a      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      break;
 80068c6:	bf00      	nop
 80068c8:	e008      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      break;
 80068ca:	bf00      	nop
 80068cc:	e006      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      break;
 80068ce:	bf00      	nop
 80068d0:	e004      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      break;
 80068d2:	bf00      	nop
 80068d4:	e002      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      break;   
 80068d6:	bf00      	nop
 80068d8:	e000      	b.n	80068dc <DMA_CheckFifoParam+0xe8>
      break;
 80068da:	bf00      	nop
    }
  } 
  
  return status; 
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop

080068ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	@ 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068fe:	2300      	movs	r3, #0
 8006900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	e165      	b.n	8006bd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006908:	2201      	movs	r2, #1
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4013      	ands	r3, r2
 800691a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	429a      	cmp	r2, r3
 8006922:	f040 8154 	bne.w	8006bce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b01      	cmp	r3, #1
 8006930:	d005      	beq.n	800693e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800693a:	2b02      	cmp	r3, #2
 800693c:	d130      	bne.n	80069a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	2203      	movs	r2, #3
 800694a:	fa02 f303 	lsl.w	r3, r2, r3
 800694e:	43db      	mvns	r3, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4013      	ands	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	4313      	orrs	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006974:	2201      	movs	r2, #1
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	43db      	mvns	r3, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4013      	ands	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	f003 0201 	and.w	r2, r3, #1
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	4313      	orrs	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d017      	beq.n	80069dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	2203      	movs	r2, #3
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	43db      	mvns	r3, r3
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4013      	ands	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d123      	bne.n	8006a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	08da      	lsrs	r2, r3, #3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3208      	adds	r2, #8
 80069f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	220f      	movs	r2, #15
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	08da      	lsrs	r2, r3, #3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3208      	adds	r2, #8
 8006a2a:	69b9      	ldr	r1, [r7, #24]
 8006a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	43db      	mvns	r3, r3
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	4013      	ands	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f003 0203 	and.w	r2, r3, #3
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 80ae 	beq.w	8006bce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	4b5d      	ldr	r3, [pc, #372]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7a:	4a5c      	ldr	r2, [pc, #368]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a82:	4b5a      	ldr	r3, [pc, #360]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a8e:	4a58      	ldr	r2, [pc, #352]	@ (8006bf0 <HAL_GPIO_Init+0x304>)
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	089b      	lsrs	r3, r3, #2
 8006a94:	3302      	adds	r3, #2
 8006a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	220f      	movs	r2, #15
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a4f      	ldr	r2, [pc, #316]	@ (8006bf4 <HAL_GPIO_Init+0x308>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d025      	beq.n	8006b06 <HAL_GPIO_Init+0x21a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a4e      	ldr	r2, [pc, #312]	@ (8006bf8 <HAL_GPIO_Init+0x30c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01f      	beq.n	8006b02 <HAL_GPIO_Init+0x216>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a4d      	ldr	r2, [pc, #308]	@ (8006bfc <HAL_GPIO_Init+0x310>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d019      	beq.n	8006afe <HAL_GPIO_Init+0x212>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a4c      	ldr	r2, [pc, #304]	@ (8006c00 <HAL_GPIO_Init+0x314>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_GPIO_Init+0x20e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8006c04 <HAL_GPIO_Init+0x318>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00d      	beq.n	8006af6 <HAL_GPIO_Init+0x20a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a4a      	ldr	r2, [pc, #296]	@ (8006c08 <HAL_GPIO_Init+0x31c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <HAL_GPIO_Init+0x206>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a49      	ldr	r2, [pc, #292]	@ (8006c0c <HAL_GPIO_Init+0x320>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d101      	bne.n	8006aee <HAL_GPIO_Init+0x202>
 8006aea:	2306      	movs	r3, #6
 8006aec:	e00c      	b.n	8006b08 <HAL_GPIO_Init+0x21c>
 8006aee:	2307      	movs	r3, #7
 8006af0:	e00a      	b.n	8006b08 <HAL_GPIO_Init+0x21c>
 8006af2:	2305      	movs	r3, #5
 8006af4:	e008      	b.n	8006b08 <HAL_GPIO_Init+0x21c>
 8006af6:	2304      	movs	r3, #4
 8006af8:	e006      	b.n	8006b08 <HAL_GPIO_Init+0x21c>
 8006afa:	2303      	movs	r3, #3
 8006afc:	e004      	b.n	8006b08 <HAL_GPIO_Init+0x21c>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e002      	b.n	8006b08 <HAL_GPIO_Init+0x21c>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <HAL_GPIO_Init+0x21c>
 8006b06:	2300      	movs	r3, #0
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	f002 0203 	and.w	r2, r2, #3
 8006b0e:	0092      	lsls	r2, r2, #2
 8006b10:	4093      	lsls	r3, r2
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b18:	4935      	ldr	r1, [pc, #212]	@ (8006bf0 <HAL_GPIO_Init+0x304>)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	089b      	lsrs	r3, r3, #2
 8006b1e:	3302      	adds	r3, #2
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b26:	4b3a      	ldr	r3, [pc, #232]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	4013      	ands	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b4a:	4a31      	ldr	r2, [pc, #196]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b50:	4b2f      	ldr	r3, [pc, #188]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b74:	4a26      	ldr	r2, [pc, #152]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b7a:	4b25      	ldr	r3, [pc, #148]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	43db      	mvns	r3, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	4013      	ands	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	43db      	mvns	r3, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bc8:	4a11      	ldr	r2, [pc, #68]	@ (8006c10 <HAL_GPIO_Init+0x324>)
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b0f      	cmp	r3, #15
 8006bd8:	f67f ae96 	bls.w	8006908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	3724      	adds	r7, #36	@ 0x24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40013800 	.word	0x40013800
 8006bf4:	40020000 	.word	0x40020000
 8006bf8:	40020400 	.word	0x40020400
 8006bfc:	40020800 	.word	0x40020800
 8006c00:	40020c00 	.word	0x40020c00
 8006c04:	40021000 	.word	0x40021000
 8006c08:	40021400 	.word	0x40021400
 8006c0c:	40021800 	.word	0x40021800
 8006c10:	40013c00 	.word	0x40013c00

08006c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	807b      	strh	r3, [r7, #2]
 8006c20:	4613      	mov	r3, r2
 8006c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c24:	787b      	ldrb	r3, [r7, #1]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c2a:	887a      	ldrh	r2, [r7, #2]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c30:	e003      	b.n	8006c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c32:	887b      	ldrh	r3, [r7, #2]
 8006c34:	041a      	lsls	r2, r3, #16
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	619a      	str	r2, [r3, #24]
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c52:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d006      	beq.n	8006c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c5e:	4a05      	ldr	r2, [pc, #20]	@ (8006c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fa fa96 	bl	8001198 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40013c00 	.word	0x40013c00

08006c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e12b      	b.n	8006ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fd f884 	bl	8003dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2224      	movs	r2, #36	@ 0x24
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0201 	bic.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f001 fee0 	bl	8008aa0 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4a81      	ldr	r2, [pc, #516]	@ (8006eec <HAL_I2C_Init+0x274>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d807      	bhi.n	8006cfc <HAL_I2C_Init+0x84>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a80      	ldr	r2, [pc, #512]	@ (8006ef0 <HAL_I2C_Init+0x278>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	bf94      	ite	ls
 8006cf4:	2301      	movls	r3, #1
 8006cf6:	2300      	movhi	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	e006      	b.n	8006d0a <HAL_I2C_Init+0x92>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4a7d      	ldr	r2, [pc, #500]	@ (8006ef4 <HAL_I2C_Init+0x27c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	bf94      	ite	ls
 8006d04:	2301      	movls	r3, #1
 8006d06:	2300      	movhi	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0e7      	b.n	8006ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a78      	ldr	r2, [pc, #480]	@ (8006ef8 <HAL_I2C_Init+0x280>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	0c9b      	lsrs	r3, r3, #18
 8006d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4a6a      	ldr	r2, [pc, #424]	@ (8006eec <HAL_I2C_Init+0x274>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d802      	bhi.n	8006d4c <HAL_I2C_Init+0xd4>
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	e009      	b.n	8006d60 <HAL_I2C_Init+0xe8>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d52:	fb02 f303 	mul.w	r3, r2, r3
 8006d56:	4a69      	ldr	r2, [pc, #420]	@ (8006efc <HAL_I2C_Init+0x284>)
 8006d58:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5c:	099b      	lsrs	r3, r3, #6
 8006d5e:	3301      	adds	r3, #1
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	430b      	orrs	r3, r1
 8006d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006d72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	495c      	ldr	r1, [pc, #368]	@ (8006eec <HAL_I2C_Init+0x274>)
 8006d7c:	428b      	cmp	r3, r1
 8006d7e:	d819      	bhi.n	8006db4 <HAL_I2C_Init+0x13c>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	1e59      	subs	r1, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d8e:	1c59      	adds	r1, r3, #1
 8006d90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d94:	400b      	ands	r3, r1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <HAL_I2C_Init+0x138>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1e59      	subs	r1, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006da8:	3301      	adds	r3, #1
 8006daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dae:	e051      	b.n	8006e54 <HAL_I2C_Init+0x1dc>
 8006db0:	2304      	movs	r3, #4
 8006db2:	e04f      	b.n	8006e54 <HAL_I2C_Init+0x1dc>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d111      	bne.n	8006de0 <HAL_I2C_Init+0x168>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	1e58      	subs	r0, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6859      	ldr	r1, [r3, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	440b      	add	r3, r1
 8006dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	e012      	b.n	8006e06 <HAL_I2C_Init+0x18e>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	1e58      	subs	r0, r3, #1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6859      	ldr	r1, [r3, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	0099      	lsls	r1, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006df6:	3301      	adds	r3, #1
 8006df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <HAL_I2C_Init+0x196>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e022      	b.n	8006e54 <HAL_I2C_Init+0x1dc>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10e      	bne.n	8006e34 <HAL_I2C_Init+0x1bc>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1e58      	subs	r0, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6859      	ldr	r1, [r3, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	440b      	add	r3, r1
 8006e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e28:	3301      	adds	r3, #1
 8006e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e32:	e00f      	b.n	8006e54 <HAL_I2C_Init+0x1dc>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	1e58      	subs	r0, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6859      	ldr	r1, [r3, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	0099      	lsls	r1, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	6809      	ldr	r1, [r1, #0]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006e82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6911      	ldr	r1, [r2, #16]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68d2      	ldr	r2, [r2, #12]
 8006e8e:	4311      	orrs	r1, r2
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6812      	ldr	r2, [r2, #0]
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f042 0201 	orr.w	r2, r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	000186a0 	.word	0x000186a0
 8006ef0:	001e847f 	.word	0x001e847f
 8006ef4:	003d08ff 	.word	0x003d08ff
 8006ef8:	431bde83 	.word	0x431bde83
 8006efc:	10624dd3 	.word	0x10624dd3

08006f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	607a      	str	r2, [r7, #4]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	817b      	strh	r3, [r7, #10]
 8006f10:	4613      	mov	r3, r2
 8006f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f14:	f7fe fc1c 	bl	8005750 <HAL_GetTick>
 8006f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	f040 80e0 	bne.w	80070e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2319      	movs	r3, #25
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4970      	ldr	r1, [pc, #448]	@ (80070f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f001 fa3c 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e0d3      	b.n	80070ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_I2C_Master_Transmit+0x50>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e0cc      	b.n	80070ea <HAL_I2C_Master_Transmit+0x1ea>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d007      	beq.n	8006f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2221      	movs	r2, #33	@ 0x21
 8006f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2210      	movs	r2, #16
 8006f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	893a      	ldrh	r2, [r7, #8]
 8006fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a50      	ldr	r2, [pc, #320]	@ (80070f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006fb8:	8979      	ldrh	r1, [r7, #10]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	6a3a      	ldr	r2, [r7, #32]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 ff28 	bl	8007e14 <I2C_MasterRequestWrite>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e08d      	b.n	80070ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006fe4:	e066      	b.n	80070b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	6a39      	ldr	r1, [r7, #32]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f001 fafa 	bl	80085e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d107      	bne.n	800700e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800700c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e06b      	b.n	80070ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	781a      	ldrb	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b04      	cmp	r3, #4
 800704e:	d11b      	bne.n	8007088 <HAL_I2C_Master_Transmit+0x188>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007054:	2b00      	cmp	r3, #0
 8007056:	d017      	beq.n	8007088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	6a39      	ldr	r1, [r7, #32]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f001 faf1 	bl	8008674 <I2C_WaitOnBTFFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	2b04      	cmp	r3, #4
 800709e:	d107      	bne.n	80070b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e01a      	b.n	80070ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d194      	bne.n	8006fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	e000      	b.n	80070ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80070e8:	2302      	movs	r3, #2
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	00100002 	.word	0x00100002
 80070f8:	ffff0000 	.word	0xffff0000

080070fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	@ 0x30
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	461a      	mov	r2, r3
 8007108:	460b      	mov	r3, r1
 800710a:	817b      	strh	r3, [r7, #10]
 800710c:	4613      	mov	r3, r2
 800710e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007110:	f7fe fb1e 	bl	8005750 <HAL_GetTick>
 8007114:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b20      	cmp	r3, #32
 8007120:	f040 8217 	bne.w	8007552 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	2319      	movs	r3, #25
 800712a:	2201      	movs	r2, #1
 800712c:	497c      	ldr	r1, [pc, #496]	@ (8007320 <HAL_I2C_Master_Receive+0x224>)
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 f93e 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
 800713c:	e20a      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_I2C_Master_Receive+0x50>
 8007148:	2302      	movs	r3, #2
 800714a:	e203      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d007      	beq.n	8007172 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2222      	movs	r2, #34	@ 0x22
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2210      	movs	r2, #16
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	893a      	ldrh	r2, [r7, #8]
 80071a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a5c      	ldr	r2, [pc, #368]	@ (8007324 <HAL_I2C_Master_Receive+0x228>)
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80071b4:	8979      	ldrh	r1, [r7, #10]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 feac 	bl	8007f18 <I2C_MasterRequestRead>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e1c4      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d113      	bne.n	80071fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d2:	2300      	movs	r3, #0
 80071d4:	623b      	str	r3, [r7, #32]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	623b      	str	r3, [r7, #32]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	e198      	b.n	800752c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d11b      	bne.n	800723a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007212:	2300      	movs	r3, #0
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e178      	b.n	800752c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800723e:	2b02      	cmp	r3, #2
 8007240:	d11b      	bne.n	800727a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007250:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007262:	2300      	movs	r3, #0
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	e158      	b.n	800752c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072a0:	e144      	b.n	800752c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	f200 80f1 	bhi.w	800748e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d123      	bne.n	80072fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fa23 	bl	8008704 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e145      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80072fa:	e117      	b.n	800752c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007300:	2b02      	cmp	r3, #2
 8007302:	d14e      	bne.n	80073a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	2200      	movs	r2, #0
 800730c:	4906      	ldr	r1, [pc, #24]	@ (8007328 <HAL_I2C_Master_Receive+0x22c>)
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f001 f84e 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e11a      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
 800731e:	bf00      	nop
 8007320:	00100002 	.word	0x00100002
 8007324:	ffff0000 	.word	0xffff0000
 8007328:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800733a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073a0:	e0c4      	b.n	800752c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	2200      	movs	r2, #0
 80073aa:	496c      	ldr	r1, [pc, #432]	@ (800755c <HAL_I2C_Master_Receive+0x460>)
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 ffff 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0cb      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	2200      	movs	r2, #0
 8007406:	4955      	ldr	r1, [pc, #340]	@ (800755c <HAL_I2C_Master_Receive+0x460>)
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 ffd1 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e09d      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800748c:	e04e      	b.n	800752c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800748e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007490:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f001 f936 	bl	8008704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e058      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d124      	bne.n	800752c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d107      	bne.n	80074fa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f aeb6 	bne.w	80072a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e000      	b.n	8007554 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007552:	2302      	movs	r3, #2
  }
}
 8007554:	4618      	mov	r0, r3
 8007556:	3728      	adds	r7, #40	@ 0x28
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	00010004 	.word	0x00010004

08007560 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	461a      	mov	r2, r3
 800756e:	4603      	mov	r3, r0
 8007570:	817b      	strh	r3, [r7, #10]
 8007572:	460b      	mov	r3, r1
 8007574:	813b      	strh	r3, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800757a:	f7fe f8e9 	bl	8005750 <HAL_GetTick>
 800757e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b20      	cmp	r3, #32
 800758a:	f040 80d9 	bne.w	8007740 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	2319      	movs	r3, #25
 8007594:	2201      	movs	r2, #1
 8007596:	496d      	ldr	r1, [pc, #436]	@ (800774c <HAL_I2C_Mem_Write+0x1ec>)
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 ff09 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80075a4:	2302      	movs	r3, #2
 80075a6:	e0cc      	b.n	8007742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_I2C_Mem_Write+0x56>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e0c5      	b.n	8007742 <HAL_I2C_Mem_Write+0x1e2>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d007      	beq.n	80075dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0201 	orr.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2221      	movs	r2, #33	@ 0x21
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2240      	movs	r2, #64	@ 0x40
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a3a      	ldr	r2, [r7, #32]
 8007606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800760c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a4d      	ldr	r2, [pc, #308]	@ (8007750 <HAL_I2C_Mem_Write+0x1f0>)
 800761c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800761e:	88f8      	ldrh	r0, [r7, #6]
 8007620:	893a      	ldrh	r2, [r7, #8]
 8007622:	8979      	ldrh	r1, [r7, #10]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4603      	mov	r3, r0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fd40 	bl	80080b4 <I2C_RequestMemoryWrite>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d052      	beq.n	80076e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e081      	b.n	8007742 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 ffce 	bl	80085e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	2b04      	cmp	r3, #4
 8007654:	d107      	bne.n	8007666 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e06b      	b.n	8007742 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007690:	b29b      	uxth	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d11b      	bne.n	80076e0 <HAL_I2C_Mem_Write+0x180>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d017      	beq.n	80076e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1aa      	bne.n	800763e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 ffc1 	bl	8008674 <I2C_WaitOnBTFFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00d      	beq.n	8007714 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d107      	bne.n	8007710 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800770e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e016      	b.n	8007742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	00100002 	.word	0x00100002
 8007750:	ffff0000 	.word	0xffff0000

08007754 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	@ 0x30
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	461a      	mov	r2, r3
 8007762:	4603      	mov	r3, r0
 8007764:	817b      	strh	r3, [r7, #10]
 8007766:	460b      	mov	r3, r1
 8007768:	813b      	strh	r3, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800776e:	f7fd ffef 	bl	8005750 <HAL_GetTick>
 8007772:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b20      	cmp	r3, #32
 800777e:	f040 8214 	bne.w	8007baa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	2319      	movs	r3, #25
 8007788:	2201      	movs	r2, #1
 800778a:	497b      	ldr	r1, [pc, #492]	@ (8007978 <HAL_I2C_Mem_Read+0x224>)
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fe0f 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007798:	2302      	movs	r3, #2
 800779a:	e207      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_I2C_Mem_Read+0x56>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e200      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d007      	beq.n	80077d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2222      	movs	r2, #34	@ 0x22
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2240      	movs	r2, #64	@ 0x40
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007800:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a5b      	ldr	r2, [pc, #364]	@ (800797c <HAL_I2C_Mem_Read+0x228>)
 8007810:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007812:	88f8      	ldrh	r0, [r7, #6]
 8007814:	893a      	ldrh	r2, [r7, #8]
 8007816:	8979      	ldrh	r1, [r7, #10]
 8007818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4603      	mov	r3, r0
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fcdc 	bl	80081e0 <I2C_RequestMemoryRead>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e1bc      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007836:	2b00      	cmp	r3, #0
 8007838:	d113      	bne.n	8007862 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800783a:	2300      	movs	r3, #0
 800783c:	623b      	str	r3, [r7, #32]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	623b      	str	r3, [r7, #32]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	623b      	str	r3, [r7, #32]
 800784e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e190      	b.n	8007b84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007866:	2b01      	cmp	r3, #1
 8007868:	d11b      	bne.n	80078a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e170      	b.n	8007b84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d11b      	bne.n	80078e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	e150      	b.n	8007b84 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078f8:	e144      	b.n	8007b84 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078fe:	2b03      	cmp	r3, #3
 8007900:	f200 80f1 	bhi.w	8007ae6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007908:	2b01      	cmp	r3, #1
 800790a:	d123      	bne.n	8007954 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800790c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fef7 	bl	8008704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e145      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007952:	e117      	b.n	8007b84 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007958:	2b02      	cmp	r3, #2
 800795a:	d14e      	bne.n	80079fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007962:	2200      	movs	r2, #0
 8007964:	4906      	ldr	r1, [pc, #24]	@ (8007980 <HAL_I2C_Mem_Read+0x22c>)
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 fd22 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e11a      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
 8007976:	bf00      	nop
 8007978:	00100002 	.word	0x00100002
 800797c:	ffff0000 	.word	0xffff0000
 8007980:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80079f8:	e0c4      	b.n	8007b84 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a00:	2200      	movs	r2, #0
 8007a02:	496c      	ldr	r1, [pc, #432]	@ (8007bb4 <HAL_I2C_Mem_Read+0x460>)
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fcd3 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0cb      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4955      	ldr	r1, [pc, #340]	@ (8007bb4 <HAL_I2C_Mem_Read+0x460>)
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fca5 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e09d      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ae4:	e04e      	b.n	8007b84 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fe0a 	bl	8008704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e058      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d124      	bne.n	8007b84 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d107      	bne.n	8007b52 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f aeb6 	bne.w	80078fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e000      	b.n	8007bac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3728      	adds	r7, #40	@ 0x28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	00010004 	.word	0x00010004

08007bb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	@ 0x28
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007bc8:	f7fd fdc2 	bl	8005750 <HAL_GetTick>
 8007bcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	f040 8111 	bne.w	8007e02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2319      	movs	r3, #25
 8007be6:	2201      	movs	r2, #1
 8007be8:	4988      	ldr	r1, [pc, #544]	@ (8007e0c <HAL_I2C_IsDeviceReady+0x254>)
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fbe0 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e104      	b.n	8007e04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_I2C_IsDeviceReady+0x50>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e0fd      	b.n	8007e04 <HAL_I2C_IsDeviceReady+0x24c>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d007      	beq.n	8007c2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0201 	orr.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2224      	movs	r2, #36	@ 0x24
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a70      	ldr	r2, [pc, #448]	@ (8007e10 <HAL_I2C_IsDeviceReady+0x258>)
 8007c50:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fb9e 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00d      	beq.n	8007c96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c88:	d103      	bne.n	8007c92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c90:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e0b6      	b.n	8007e04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c96:	897b      	ldrh	r3, [r7, #10]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ca4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007ca6:	f7fd fd53 	bl	8005750 <HAL_GetTick>
 8007caa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd0:	bf0c      	ite	eq
 8007cd2:	2301      	moveq	r3, #1
 8007cd4:	2300      	movne	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007cda:	e025      	b.n	8007d28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cdc:	f7fd fd38 	bl	8005750 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d302      	bcc.n	8007cf2 <HAL_I2C_IsDeviceReady+0x13a>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d103      	bne.n	8007cfa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	22a0      	movs	r2, #160	@ 0xa0
 8007cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	bf0c      	ite	eq
 8007d08:	2301      	moveq	r3, #1
 8007d0a:	2300      	movne	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d1e:	bf0c      	ite	eq
 8007d20:	2301      	moveq	r3, #1
 8007d22:	2300      	movne	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2ba0      	cmp	r3, #160	@ 0xa0
 8007d32:	d005      	beq.n	8007d40 <HAL_I2C_IsDeviceReady+0x188>
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d102      	bne.n	8007d40 <HAL_I2C_IsDeviceReady+0x188>
 8007d3a:	7dbb      	ldrb	r3, [r7, #22]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0cd      	beq.n	8007cdc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d129      	bne.n	8007daa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	2319      	movs	r3, #25
 8007d82:	2201      	movs	r2, #1
 8007d84:	4921      	ldr	r1, [pc, #132]	@ (8007e0c <HAL_I2C_IsDeviceReady+0x254>)
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 fb12 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e036      	b.n	8007e04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e02c      	b.n	8007e04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007db8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007dc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2319      	movs	r3, #25
 8007dca:	2201      	movs	r2, #1
 8007dcc:	490f      	ldr	r1, [pc, #60]	@ (8007e0c <HAL_I2C_IsDeviceReady+0x254>)
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 faee 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e012      	b.n	8007e04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	3301      	adds	r3, #1
 8007de2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	f4ff af32 	bcc.w	8007c52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007e02:	2302      	movs	r3, #2
  }
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	00100002 	.word	0x00100002
 8007e10:	ffff0000 	.word	0xffff0000

08007e14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af02      	add	r7, sp, #8
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	460b      	mov	r3, r1
 8007e22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d006      	beq.n	8007e3e <I2C_MasterRequestWrite+0x2a>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d003      	beq.n	8007e3e <I2C_MasterRequestWrite+0x2a>
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e3c:	d108      	bne.n	8007e50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e00b      	b.n	8007e68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e54:	2b12      	cmp	r3, #18
 8007e56:	d107      	bne.n	8007e68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 fa9b 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00d      	beq.n	8007e9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e8e:	d103      	bne.n	8007e98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e035      	b.n	8007f08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ea4:	d108      	bne.n	8007eb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ea6:	897b      	ldrh	r3, [r7, #10]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007eb4:	611a      	str	r2, [r3, #16]
 8007eb6:	e01b      	b.n	8007ef0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007eb8:	897b      	ldrh	r3, [r7, #10]
 8007eba:	11db      	asrs	r3, r3, #7
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0306 	and.w	r3, r3, #6
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f063 030f 	orn	r3, r3, #15
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	490e      	ldr	r1, [pc, #56]	@ (8007f10 <I2C_MasterRequestWrite+0xfc>)
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 fae4 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e010      	b.n	8007f08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ee6:	897b      	ldrh	r3, [r7, #10]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	4907      	ldr	r1, [pc, #28]	@ (8007f14 <I2C_MasterRequestWrite+0x100>)
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fad4 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	00010008 	.word	0x00010008
 8007f14:	00010002 	.word	0x00010002

08007f18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	460b      	mov	r3, r1
 8007f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d006      	beq.n	8007f52 <I2C_MasterRequestRead+0x3a>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d003      	beq.n	8007f52 <I2C_MasterRequestRead+0x3a>
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f50:	d108      	bne.n	8007f64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e00b      	b.n	8007f7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f68:	2b11      	cmp	r3, #17
 8007f6a:	d107      	bne.n	8007f7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 fa11 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00d      	beq.n	8007fb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fa2:	d103      	bne.n	8007fac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007faa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e079      	b.n	80080a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fb8:	d108      	bne.n	8007fcc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007fba:	897b      	ldrh	r3, [r7, #10]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	611a      	str	r2, [r3, #16]
 8007fca:	e05f      	b.n	800808c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fcc:	897b      	ldrh	r3, [r7, #10]
 8007fce:	11db      	asrs	r3, r3, #7
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f003 0306 	and.w	r3, r3, #6
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f063 030f 	orn	r3, r3, #15
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4930      	ldr	r1, [pc, #192]	@ (80080ac <I2C_MasterRequestRead+0x194>)
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fa5a 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e054      	b.n	80080a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ffa:	897b      	ldrh	r3, [r7, #10]
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4929      	ldr	r1, [pc, #164]	@ (80080b0 <I2C_MasterRequestRead+0x198>)
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fa4a 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e044      	b.n	80080a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	613b      	str	r3, [r7, #16]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800803e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f9af 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00d      	beq.n	8008074 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008066:	d103      	bne.n	8008070 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800806e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e017      	b.n	80080a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008074:	897b      	ldrh	r3, [r7, #10]
 8008076:	11db      	asrs	r3, r3, #7
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0306 	and.w	r3, r3, #6
 800807e:	b2db      	uxtb	r3, r3
 8008080:	f063 030e 	orn	r3, r3, #14
 8008084:	b2da      	uxtb	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	4907      	ldr	r1, [pc, #28]	@ (80080b0 <I2C_MasterRequestRead+0x198>)
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fa06 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	00010008 	.word	0x00010008
 80080b0:	00010002 	.word	0x00010002

080080b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	4603      	mov	r3, r0
 80080c4:	817b      	strh	r3, [r7, #10]
 80080c6:	460b      	mov	r3, r1
 80080c8:	813b      	strh	r3, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f960 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00d      	beq.n	8008112 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008104:	d103      	bne.n	800810e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800810c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e05f      	b.n	80081d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008112:	897b      	ldrh	r3, [r7, #10]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	461a      	mov	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008120:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	6a3a      	ldr	r2, [r7, #32]
 8008126:	492d      	ldr	r1, [pc, #180]	@ (80081dc <I2C_RequestMemoryWrite+0x128>)
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f9bb 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e04c      	b.n	80081d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800814e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008150:	6a39      	ldr	r1, [r7, #32]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 fa46 	bl	80085e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008162:	2b04      	cmp	r3, #4
 8008164:	d107      	bne.n	8008176 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008174:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e02b      	b.n	80081d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800817a:	88fb      	ldrh	r3, [r7, #6]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d105      	bne.n	800818c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008180:	893b      	ldrh	r3, [r7, #8]
 8008182:	b2da      	uxtb	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	611a      	str	r2, [r3, #16]
 800818a:	e021      	b.n	80081d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800818c:	893b      	ldrh	r3, [r7, #8]
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	b29b      	uxth	r3, r3
 8008192:	b2da      	uxtb	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800819a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800819c:	6a39      	ldr	r1, [r7, #32]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fa20 	bl	80085e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00d      	beq.n	80081c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d107      	bne.n	80081c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e005      	b.n	80081d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081c6:	893b      	ldrh	r3, [r7, #8]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	00010002 	.word	0x00010002

080081e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	4608      	mov	r0, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	817b      	strh	r3, [r7, #10]
 80081f2:	460b      	mov	r3, r1
 80081f4:	813b      	strh	r3, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008208:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	2200      	movs	r2, #0
 8008222:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 f8c2 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800823c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008240:	d103      	bne.n	800824a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008248:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e0aa      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800824e:	897b      	ldrh	r3, [r7, #10]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	461a      	mov	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800825c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	4952      	ldr	r1, [pc, #328]	@ (80083ac <I2C_RequestMemoryRead+0x1cc>)
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f91d 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e097      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800828a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800828c:	6a39      	ldr	r1, [r7, #32]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 f9a8 	bl	80085e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d107      	bne.n	80082b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e076      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d105      	bne.n	80082c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082bc:	893b      	ldrh	r3, [r7, #8]
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	611a      	str	r2, [r3, #16]
 80082c6:	e021      	b.n	800830c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082c8:	893b      	ldrh	r3, [r7, #8]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082d8:	6a39      	ldr	r1, [r7, #32]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f982 	bl	80085e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d107      	bne.n	80082fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e050      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008302:	893b      	ldrh	r3, [r7, #8]
 8008304:	b2da      	uxtb	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800830c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800830e:	6a39      	ldr	r1, [r7, #32]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f967 	bl	80085e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00d      	beq.n	8008338 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008320:	2b04      	cmp	r3, #4
 8008322:	d107      	bne.n	8008334 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008332:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e035      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008346:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	2200      	movs	r2, #0
 8008350:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f82b 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00d      	beq.n	800837c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800836e:	d103      	bne.n	8008378 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008376:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e013      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800837c:	897b      	ldrh	r3, [r7, #10]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	b2da      	uxtb	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	4906      	ldr	r1, [pc, #24]	@ (80083ac <I2C_RequestMemoryRead+0x1cc>)
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f886 	bl	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	00010002 	.word	0x00010002

080083b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083c0:	e048      	b.n	8008454 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d044      	beq.n	8008454 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7fd f9c1 	bl	8005750 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d139      	bne.n	8008454 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	0c1b      	lsrs	r3, r3, #16
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d10d      	bne.n	8008406 <I2C_WaitOnFlagUntilTimeout+0x56>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	43da      	mvns	r2, r3
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	4013      	ands	r3, r2
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bf0c      	ite	eq
 80083fc:	2301      	moveq	r3, #1
 80083fe:	2300      	movne	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	461a      	mov	r2, r3
 8008404:	e00c      	b.n	8008420 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	43da      	mvns	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4013      	ands	r3, r2
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	bf0c      	ite	eq
 8008418:	2301      	moveq	r3, #1
 800841a:	2300      	movne	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	461a      	mov	r2, r3
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	429a      	cmp	r2, r3
 8008424:	d116      	bne.n	8008454 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	f043 0220 	orr.w	r2, r3, #32
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e023      	b.n	800849c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	0c1b      	lsrs	r3, r3, #16
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b01      	cmp	r3, #1
 800845c:	d10d      	bne.n	800847a <I2C_WaitOnFlagUntilTimeout+0xca>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	43da      	mvns	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4013      	ands	r3, r2
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	bf0c      	ite	eq
 8008470:	2301      	moveq	r3, #1
 8008472:	2300      	movne	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	e00c      	b.n	8008494 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	43da      	mvns	r2, r3
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	4013      	ands	r3, r2
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	bf0c      	ite	eq
 800848c:	2301      	moveq	r3, #1
 800848e:	2300      	movne	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	429a      	cmp	r2, r3
 8008498:	d093      	beq.n	80083c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084b2:	e071      	b.n	8008598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084c2:	d123      	bne.n	800850c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80084dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f8:	f043 0204 	orr.w	r2, r3, #4
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e067      	b.n	80085dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008512:	d041      	beq.n	8008598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008514:	f7fd f91c 	bl	8005750 <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d302      	bcc.n	800852a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d136      	bne.n	8008598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	0c1b      	lsrs	r3, r3, #16
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b01      	cmp	r3, #1
 8008532:	d10c      	bne.n	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	43da      	mvns	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4013      	ands	r3, r2
 8008540:	b29b      	uxth	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	bf14      	ite	ne
 8008546:	2301      	movne	r3, #1
 8008548:	2300      	moveq	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	e00b      	b.n	8008566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	43da      	mvns	r2, r3
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	4013      	ands	r3, r2
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	bf14      	ite	ne
 8008560:	2301      	movne	r3, #1
 8008562:	2300      	moveq	r3, #0
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d016      	beq.n	8008598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e021      	b.n	80085dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	0c1b      	lsrs	r3, r3, #16
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d10c      	bne.n	80085bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	43da      	mvns	r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	4013      	ands	r3, r2
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bf14      	ite	ne
 80085b4:	2301      	movne	r3, #1
 80085b6:	2300      	moveq	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	e00b      	b.n	80085d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	43da      	mvns	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4013      	ands	r3, r2
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bf14      	ite	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	2300      	moveq	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f47f af6d 	bne.w	80084b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085f0:	e034      	b.n	800865c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 f8e3 	bl	80087be <I2C_IsAcknowledgeFailed>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e034      	b.n	800866c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d028      	beq.n	800865c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800860a:	f7fd f8a1 	bl	8005750 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	429a      	cmp	r2, r3
 8008618:	d302      	bcc.n	8008620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d11d      	bne.n	800865c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800862a:	2b80      	cmp	r3, #128	@ 0x80
 800862c:	d016      	beq.n	800865c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	f043 0220 	orr.w	r2, r3, #32
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e007      	b.n	800866c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008666:	2b80      	cmp	r3, #128	@ 0x80
 8008668:	d1c3      	bne.n	80085f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008680:	e034      	b.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f89b 	bl	80087be <I2C_IsAcknowledgeFailed>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e034      	b.n	80086fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008698:	d028      	beq.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800869a:	f7fd f859 	bl	8005750 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d302      	bcc.n	80086b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11d      	bne.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	f003 0304 	and.w	r3, r3, #4
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d016      	beq.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d8:	f043 0220 	orr.w	r2, r3, #32
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e007      	b.n	80086fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d1c3      	bne.n	8008682 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008710:	e049      	b.n	80087a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b10      	cmp	r3, #16
 800871e:	d119      	bne.n	8008754 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0210 	mvn.w	r2, #16
 8008728:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e030      	b.n	80087b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008754:	f7fc fffc 	bl	8005750 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	429a      	cmp	r2, r3
 8008762:	d302      	bcc.n	800876a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d11d      	bne.n	80087a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008774:	2b40      	cmp	r3, #64	@ 0x40
 8008776:	d016      	beq.n	80087a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	f043 0220 	orr.w	r2, r3, #32
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e007      	b.n	80087b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b0:	2b40      	cmp	r3, #64	@ 0x40
 80087b2:	d1ae      	bne.n	8008712 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087d4:	d11b      	bne.n	800880e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80087de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fa:	f043 0204 	orr.w	r2, r3, #4
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008826:	2300      	movs	r3, #0
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	4b20      	ldr	r3, [pc, #128]	@ (80088ac <HAL_PWREx_EnableOverDrive+0x90>)
 800882c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882e:	4a1f      	ldr	r2, [pc, #124]	@ (80088ac <HAL_PWREx_EnableOverDrive+0x90>)
 8008830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008834:	6413      	str	r3, [r2, #64]	@ 0x40
 8008836:	4b1d      	ldr	r3, [pc, #116]	@ (80088ac <HAL_PWREx_EnableOverDrive+0x90>)
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008842:	4b1b      	ldr	r3, [pc, #108]	@ (80088b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008848:	f7fc ff82 	bl	8005750 <HAL_GetTick>
 800884c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800884e:	e009      	b.n	8008864 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008850:	f7fc ff7e 	bl	8005750 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800885e:	d901      	bls.n	8008864 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e01f      	b.n	80088a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008864:	4b13      	ldr	r3, [pc, #76]	@ (80088b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800886c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008870:	d1ee      	bne.n	8008850 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008872:	4b11      	ldr	r3, [pc, #68]	@ (80088b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008874:	2201      	movs	r2, #1
 8008876:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008878:	f7fc ff6a 	bl	8005750 <HAL_GetTick>
 800887c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800887e:	e009      	b.n	8008894 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008880:	f7fc ff66 	bl	8005750 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800888e:	d901      	bls.n	8008894 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e007      	b.n	80088a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008894:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800889c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a0:	d1ee      	bne.n	8008880 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40023800 	.word	0x40023800
 80088b0:	420e0040 	.word	0x420e0040
 80088b4:	40007000 	.word	0x40007000
 80088b8:	420e0044 	.word	0x420e0044

080088bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e0cc      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088d0:	4b68      	ldr	r3, [pc, #416]	@ (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 030f 	and.w	r3, r3, #15
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d90c      	bls.n	80088f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088de:	4b65      	ldr	r3, [pc, #404]	@ (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e6:	4b63      	ldr	r3, [pc, #396]	@ (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d001      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0b8      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d020      	beq.n	8008946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008910:	4b59      	ldr	r3, [pc, #356]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	4a58      	ldr	r2, [pc, #352]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800891a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0308 	and.w	r3, r3, #8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d005      	beq.n	8008934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008928:	4b53      	ldr	r3, [pc, #332]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	4a52      	ldr	r2, [pc, #328]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008934:	4b50      	ldr	r3, [pc, #320]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	494d      	ldr	r1, [pc, #308]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	4313      	orrs	r3, r2
 8008944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d044      	beq.n	80089dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d107      	bne.n	800896a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800895a:	4b47      	ldr	r3, [pc, #284]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d119      	bne.n	800899a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e07f      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d003      	beq.n	800897a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008976:	2b03      	cmp	r3, #3
 8008978:	d107      	bne.n	800898a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e06f      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e067      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800899a:	4b37      	ldr	r3, [pc, #220]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f023 0203 	bic.w	r2, r3, #3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4934      	ldr	r1, [pc, #208]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089ac:	f7fc fed0 	bl	8005750 <HAL_GetTick>
 80089b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b2:	e00a      	b.n	80089ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b4:	f7fc fecc 	bl	8005750 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e04f      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ca:	4b2b      	ldr	r3, [pc, #172]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f003 020c 	and.w	r2, r3, #12
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	429a      	cmp	r2, r3
 80089da:	d1eb      	bne.n	80089b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089dc:	4b25      	ldr	r3, [pc, #148]	@ (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d20c      	bcs.n	8008a04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ea:	4b22      	ldr	r3, [pc, #136]	@ (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f2:	4b20      	ldr	r3, [pc, #128]	@ (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d001      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e032      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d008      	beq.n	8008a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a10:	4b19      	ldr	r3, [pc, #100]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	4916      	ldr	r1, [pc, #88]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0308 	and.w	r3, r3, #8
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a2e:	4b12      	ldr	r3, [pc, #72]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	490e      	ldr	r1, [pc, #56]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a42:	f000 f855 	bl	8008af0 <HAL_RCC_GetSysClockFreq>
 8008a46:	4602      	mov	r2, r0
 8008a48:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	091b      	lsrs	r3, r3, #4
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	490a      	ldr	r1, [pc, #40]	@ (8008a7c <HAL_RCC_ClockConfig+0x1c0>)
 8008a54:	5ccb      	ldrb	r3, [r1, r3]
 8008a56:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5a:	4a09      	ldr	r2, [pc, #36]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 8008a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008a5e:	4b09      	ldr	r3, [pc, #36]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fc fe30 	bl	80056c8 <HAL_InitTick>

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40023c00 	.word	0x40023c00
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	0800e0a0 	.word	0x0800e0a0
 8008a80:	20000064 	.word	0x20000064
 8008a84:	20000094 	.word	0x20000094

08008a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a8c:	4b03      	ldr	r3, [pc, #12]	@ (8008a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	20000064 	.word	0x20000064

08008aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008aa4:	f7ff fff0 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	0a9b      	lsrs	r3, r3, #10
 8008ab0:	f003 0307 	and.w	r3, r3, #7
 8008ab4:	4903      	ldr	r1, [pc, #12]	@ (8008ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ab6:	5ccb      	ldrb	r3, [r1, r3]
 8008ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	40023800 	.word	0x40023800
 8008ac4:	0800e0b0 	.word	0x0800e0b0

08008ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008acc:	f7ff ffdc 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	0b5b      	lsrs	r3, r3, #13
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	4903      	ldr	r1, [pc, #12]	@ (8008aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ade:	5ccb      	ldrb	r3, [r1, r3]
 8008ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40023800 	.word	0x40023800
 8008aec:	0800e0b0 	.word	0x0800e0b0

08008af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af4:	b0ae      	sub	sp, #184	@ 0xb8
 8008af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b16:	4bcb      	ldr	r3, [pc, #812]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 030c 	and.w	r3, r3, #12
 8008b1e:	2b0c      	cmp	r3, #12
 8008b20:	f200 8206 	bhi.w	8008f30 <HAL_RCC_GetSysClockFreq+0x440>
 8008b24:	a201      	add	r2, pc, #4	@ (adr r2, 8008b2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b61 	.word	0x08008b61
 8008b30:	08008f31 	.word	0x08008f31
 8008b34:	08008f31 	.word	0x08008f31
 8008b38:	08008f31 	.word	0x08008f31
 8008b3c:	08008b69 	.word	0x08008b69
 8008b40:	08008f31 	.word	0x08008f31
 8008b44:	08008f31 	.word	0x08008f31
 8008b48:	08008f31 	.word	0x08008f31
 8008b4c:	08008b71 	.word	0x08008b71
 8008b50:	08008f31 	.word	0x08008f31
 8008b54:	08008f31 	.word	0x08008f31
 8008b58:	08008f31 	.word	0x08008f31
 8008b5c:	08008d61 	.word	0x08008d61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b60:	4bb9      	ldr	r3, [pc, #740]	@ (8008e48 <HAL_RCC_GetSysClockFreq+0x358>)
 8008b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008b66:	e1e7      	b.n	8008f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b68:	4bb8      	ldr	r3, [pc, #736]	@ (8008e4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8008b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008b6e:	e1e3      	b.n	8008f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b70:	4bb4      	ldr	r3, [pc, #720]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b7c:	4bb1      	ldr	r3, [pc, #708]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d071      	beq.n	8008c6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b88:	4bae      	ldr	r3, [pc, #696]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	099b      	lsrs	r3, r3, #6
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b94:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bae:	4622      	mov	r2, r4
 8008bb0:	462b      	mov	r3, r5
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f04f 0100 	mov.w	r1, #0
 8008bba:	0159      	lsls	r1, r3, #5
 8008bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bc0:	0150      	lsls	r0, r2, #5
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	1a51      	subs	r1, r2, r1
 8008bca:	6439      	str	r1, [r7, #64]	@ 0x40
 8008bcc:	4629      	mov	r1, r5
 8008bce:	eb63 0301 	sbc.w	r3, r3, r1
 8008bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008be0:	4649      	mov	r1, r9
 8008be2:	018b      	lsls	r3, r1, #6
 8008be4:	4641      	mov	r1, r8
 8008be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bea:	4641      	mov	r1, r8
 8008bec:	018a      	lsls	r2, r1, #6
 8008bee:	4641      	mov	r1, r8
 8008bf0:	1a51      	subs	r1, r2, r1
 8008bf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	f04f 0300 	mov.w	r3, #0
 8008c04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008c08:	4649      	mov	r1, r9
 8008c0a:	00cb      	lsls	r3, r1, #3
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c12:	4641      	mov	r1, r8
 8008c14:	00ca      	lsls	r2, r1, #3
 8008c16:	4610      	mov	r0, r2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	189b      	adds	r3, r3, r2
 8008c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c22:	462b      	mov	r3, r5
 8008c24:	460a      	mov	r2, r1
 8008c26:	eb42 0303 	adc.w	r3, r2, r3
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008c38:	4629      	mov	r1, r5
 8008c3a:	024b      	lsls	r3, r1, #9
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c42:	4621      	mov	r1, r4
 8008c44:	024a      	lsls	r2, r1, #9
 8008c46:	4610      	mov	r0, r2
 8008c48:	4619      	mov	r1, r3
 8008c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008c5c:	f7f8 f834 	bl	8000cc8 <__aeabi_uldivmod>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4613      	mov	r3, r2
 8008c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c6a:	e067      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c6c:	4b75      	ldr	r3, [pc, #468]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	099b      	lsrs	r3, r3, #6
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c78:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c86:	2300      	movs	r3, #0
 8008c88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008c8e:	4622      	mov	r2, r4
 8008c90:	462b      	mov	r3, r5
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f04f 0100 	mov.w	r1, #0
 8008c9a:	0159      	lsls	r1, r3, #5
 8008c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ca0:	0150      	lsls	r0, r2, #5
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	1a51      	subs	r1, r2, r1
 8008caa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008cac:	4629      	mov	r1, r5
 8008cae:	eb63 0301 	sbc.w	r3, r3, r1
 8008cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	018b      	lsls	r3, r1, #6
 8008cc4:	4641      	mov	r1, r8
 8008cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cca:	4641      	mov	r1, r8
 8008ccc:	018a      	lsls	r2, r1, #6
 8008cce:	4641      	mov	r1, r8
 8008cd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ce6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cee:	4692      	mov	sl, r2
 8008cf0:	469b      	mov	fp, r3
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	eb1a 0303 	adds.w	r3, sl, r3
 8008cf8:	623b      	str	r3, [r7, #32]
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8008d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008d0e:	4629      	mov	r1, r5
 8008d10:	028b      	lsls	r3, r1, #10
 8008d12:	4621      	mov	r1, r4
 8008d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d18:	4621      	mov	r1, r4
 8008d1a:	028a      	lsls	r2, r1, #10
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d24:	2200      	movs	r2, #0
 8008d26:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d28:	677a      	str	r2, [r7, #116]	@ 0x74
 8008d2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008d2e:	f7f7 ffcb 	bl	8000cc8 <__aeabi_uldivmod>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4613      	mov	r3, r2
 8008d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008d3c:	4b41      	ldr	r3, [pc, #260]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	0c1b      	lsrs	r3, r3, #16
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	3301      	adds	r3, #1
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8008d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008d5e:	e0eb      	b.n	8008f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d60:	4b38      	ldr	r3, [pc, #224]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d6c:	4b35      	ldr	r3, [pc, #212]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d06b      	beq.n	8008e50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d78:	4b32      	ldr	r3, [pc, #200]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	099b      	lsrs	r3, r3, #6
 8008d7e:	2200      	movs	r2, #0
 8008d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008d94:	4622      	mov	r2, r4
 8008d96:	462b      	mov	r3, r5
 8008d98:	f04f 0000 	mov.w	r0, #0
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	0159      	lsls	r1, r3, #5
 8008da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008da6:	0150      	lsls	r0, r2, #5
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4621      	mov	r1, r4
 8008dae:	1a51      	subs	r1, r2, r1
 8008db0:	61b9      	str	r1, [r7, #24]
 8008db2:	4629      	mov	r1, r5
 8008db4:	eb63 0301 	sbc.w	r3, r3, r1
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	f04f 0200 	mov.w	r2, #0
 8008dbe:	f04f 0300 	mov.w	r3, #0
 8008dc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008dc6:	4659      	mov	r1, fp
 8008dc8:	018b      	lsls	r3, r1, #6
 8008dca:	4651      	mov	r1, sl
 8008dcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008dd0:	4651      	mov	r1, sl
 8008dd2:	018a      	lsls	r2, r1, #6
 8008dd4:	4651      	mov	r1, sl
 8008dd6:	ebb2 0801 	subs.w	r8, r2, r1
 8008dda:	4659      	mov	r1, fp
 8008ddc:	eb63 0901 	sbc.w	r9, r3, r1
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008df0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008df4:	4690      	mov	r8, r2
 8008df6:	4699      	mov	r9, r3
 8008df8:	4623      	mov	r3, r4
 8008dfa:	eb18 0303 	adds.w	r3, r8, r3
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	462b      	mov	r3, r5
 8008e02:	eb49 0303 	adc.w	r3, r9, r3
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008e14:	4629      	mov	r1, r5
 8008e16:	024b      	lsls	r3, r1, #9
 8008e18:	4621      	mov	r1, r4
 8008e1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e1e:	4621      	mov	r1, r4
 8008e20:	024a      	lsls	r2, r1, #9
 8008e22:	4610      	mov	r0, r2
 8008e24:	4619      	mov	r1, r3
 8008e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e2e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008e30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e34:	f7f7 ff48 	bl	8000cc8 <__aeabi_uldivmod>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e42:	e065      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0x420>
 8008e44:	40023800 	.word	0x40023800
 8008e48:	00f42400 	.word	0x00f42400
 8008e4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e50:	4b3d      	ldr	r3, [pc, #244]	@ (8008f48 <HAL_RCC_GetSysClockFreq+0x458>)
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	099b      	lsrs	r3, r3, #6
 8008e56:	2200      	movs	r2, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e60:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e62:	2300      	movs	r3, #0
 8008e64:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008e6a:	4642      	mov	r2, r8
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	f04f 0000 	mov.w	r0, #0
 8008e72:	f04f 0100 	mov.w	r1, #0
 8008e76:	0159      	lsls	r1, r3, #5
 8008e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e7c:	0150      	lsls	r0, r2, #5
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4641      	mov	r1, r8
 8008e84:	1a51      	subs	r1, r2, r1
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	4649      	mov	r1, r9
 8008e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	018b      	lsls	r3, r1, #6
 8008ea0:	4651      	mov	r1, sl
 8008ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	018a      	lsls	r2, r1, #6
 8008eaa:	4651      	mov	r1, sl
 8008eac:	1a54      	subs	r4, r2, r1
 8008eae:	4659      	mov	r1, fp
 8008eb0:	eb63 0501 	sbc.w	r5, r3, r1
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	00eb      	lsls	r3, r5, #3
 8008ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ec2:	00e2      	lsls	r2, r4, #3
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	4643      	mov	r3, r8
 8008eca:	18e3      	adds	r3, r4, r3
 8008ecc:	603b      	str	r3, [r7, #0]
 8008ece:	464b      	mov	r3, r9
 8008ed0:	eb45 0303 	adc.w	r3, r5, r3
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	028b      	lsls	r3, r1, #10
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008eec:	4621      	mov	r1, r4
 8008eee:	028a      	lsls	r2, r1, #10
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ef8:	2200      	movs	r2, #0
 8008efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008efc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008efe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f02:	f7f7 fee1 	bl	8000cc8 <__aeabi_uldivmod>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008f10:	4b0d      	ldr	r3, [pc, #52]	@ (8008f48 <HAL_RCC_GetSysClockFreq+0x458>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	0f1b      	lsrs	r3, r3, #28
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008f2e:	e003      	b.n	8008f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f30:	4b06      	ldr	r3, [pc, #24]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8008f32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008f36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	37b8      	adds	r7, #184	@ 0xb8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f46:	bf00      	nop
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	00f42400 	.word	0x00f42400

08008f50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e28d      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8083 	beq.w	8009076 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008f70:	4b94      	ldr	r3, [pc, #592]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f003 030c 	and.w	r3, r3, #12
 8008f78:	2b04      	cmp	r3, #4
 8008f7a:	d019      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008f7c:	4b91      	ldr	r3, [pc, #580]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f003 030c 	and.w	r3, r3, #12
        || \
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d106      	bne.n	8008f96 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008f88:	4b8e      	ldr	r3, [pc, #568]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f94:	d00c      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f96:	4b8b      	ldr	r3, [pc, #556]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008f9e:	2b0c      	cmp	r3, #12
 8008fa0:	d112      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fa2:	4b88      	ldr	r3, [pc, #544]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008faa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fae:	d10b      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fb0:	4b84      	ldr	r3, [pc, #528]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d05b      	beq.n	8009074 <HAL_RCC_OscConfig+0x124>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d157      	bne.n	8009074 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e25a      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fd0:	d106      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x90>
 8008fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a7b      	ldr	r2, [pc, #492]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	e01d      	b.n	800901c <HAL_RCC_OscConfig+0xcc>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fe8:	d10c      	bne.n	8009004 <HAL_RCC_OscConfig+0xb4>
 8008fea:	4b76      	ldr	r3, [pc, #472]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a75      	ldr	r2, [pc, #468]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	4b73      	ldr	r3, [pc, #460]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a72      	ldr	r2, [pc, #456]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8008ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e00b      	b.n	800901c <HAL_RCC_OscConfig+0xcc>
 8009004:	4b6f      	ldr	r3, [pc, #444]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a6e      	ldr	r2, [pc, #440]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 800900a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	4b6c      	ldr	r3, [pc, #432]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a6b      	ldr	r2, [pc, #428]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800901a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d013      	beq.n	800904c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009024:	f7fc fb94 	bl	8005750 <HAL_GetTick>
 8009028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800902c:	f7fc fb90 	bl	8005750 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b64      	cmp	r3, #100	@ 0x64
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e21f      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800903e:	4b61      	ldr	r3, [pc, #388]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0f0      	beq.n	800902c <HAL_RCC_OscConfig+0xdc>
 800904a:	e014      	b.n	8009076 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904c:	f7fc fb80 	bl	8005750 <HAL_GetTick>
 8009050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009052:	e008      	b.n	8009066 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009054:	f7fc fb7c 	bl	8005750 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2b64      	cmp	r3, #100	@ 0x64
 8009060:	d901      	bls.n	8009066 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e20b      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009066:	4b57      	ldr	r3, [pc, #348]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1f0      	bne.n	8009054 <HAL_RCC_OscConfig+0x104>
 8009072:	e000      	b.n	8009076 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d06f      	beq.n	8009162 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009082:	4b50      	ldr	r3, [pc, #320]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 030c 	and.w	r3, r3, #12
 800908a:	2b00      	cmp	r3, #0
 800908c:	d017      	beq.n	80090be <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800908e:	4b4d      	ldr	r3, [pc, #308]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f003 030c 	and.w	r3, r3, #12
        || \
 8009096:	2b08      	cmp	r3, #8
 8009098:	d105      	bne.n	80090a6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800909a:	4b4a      	ldr	r3, [pc, #296]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090a6:	4b47      	ldr	r3, [pc, #284]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80090ae:	2b0c      	cmp	r3, #12
 80090b0:	d11c      	bne.n	80090ec <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090b2:	4b44      	ldr	r3, [pc, #272]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d116      	bne.n	80090ec <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090be:	4b41      	ldr	r3, [pc, #260]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_RCC_OscConfig+0x186>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d001      	beq.n	80090d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e1d3      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090d6:	4b3b      	ldr	r3, [pc, #236]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4937      	ldr	r1, [pc, #220]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ea:	e03a      	b.n	8009162 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d020      	beq.n	8009136 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090f4:	4b34      	ldr	r3, [pc, #208]	@ (80091c8 <HAL_RCC_OscConfig+0x278>)
 80090f6:	2201      	movs	r2, #1
 80090f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fa:	f7fc fb29 	bl	8005750 <HAL_GetTick>
 80090fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009100:	e008      	b.n	8009114 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009102:	f7fc fb25 	bl	8005750 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b02      	cmp	r3, #2
 800910e:	d901      	bls.n	8009114 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e1b4      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009114:	4b2b      	ldr	r3, [pc, #172]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d0f0      	beq.n	8009102 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009120:	4b28      	ldr	r3, [pc, #160]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	4925      	ldr	r1, [pc, #148]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009130:	4313      	orrs	r3, r2
 8009132:	600b      	str	r3, [r1, #0]
 8009134:	e015      	b.n	8009162 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009136:	4b24      	ldr	r3, [pc, #144]	@ (80091c8 <HAL_RCC_OscConfig+0x278>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913c:	f7fc fb08 	bl	8005750 <HAL_GetTick>
 8009140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009142:	e008      	b.n	8009156 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009144:	f7fc fb04 	bl	8005750 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b02      	cmp	r3, #2
 8009150:	d901      	bls.n	8009156 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e193      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009156:	4b1b      	ldr	r3, [pc, #108]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f0      	bne.n	8009144 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d036      	beq.n	80091dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d016      	beq.n	80091a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009176:	4b15      	ldr	r3, [pc, #84]	@ (80091cc <HAL_RCC_OscConfig+0x27c>)
 8009178:	2201      	movs	r2, #1
 800917a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800917c:	f7fc fae8 	bl	8005750 <HAL_GetTick>
 8009180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009182:	e008      	b.n	8009196 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009184:	f7fc fae4 	bl	8005750 <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b02      	cmp	r3, #2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e173      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009196:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <HAL_RCC_OscConfig+0x274>)
 8009198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0f0      	beq.n	8009184 <HAL_RCC_OscConfig+0x234>
 80091a2:	e01b      	b.n	80091dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091a4:	4b09      	ldr	r3, [pc, #36]	@ (80091cc <HAL_RCC_OscConfig+0x27c>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091aa:	f7fc fad1 	bl	8005750 <HAL_GetTick>
 80091ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091b0:	e00e      	b.n	80091d0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091b2:	f7fc facd 	bl	8005750 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d907      	bls.n	80091d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e15c      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
 80091c4:	40023800 	.word	0x40023800
 80091c8:	42470000 	.word	0x42470000
 80091cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091d0:	4b8a      	ldr	r3, [pc, #552]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 80091d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1ea      	bne.n	80091b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8097 	beq.w	8009318 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ee:	4b83      	ldr	r3, [pc, #524]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 80091f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10f      	bne.n	800921a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091fa:	2300      	movs	r3, #0
 80091fc:	60bb      	str	r3, [r7, #8]
 80091fe:	4b7f      	ldr	r3, [pc, #508]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009202:	4a7e      	ldr	r2, [pc, #504]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009208:	6413      	str	r3, [r2, #64]	@ 0x40
 800920a:	4b7c      	ldr	r3, [pc, #496]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 800920c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009212:	60bb      	str	r3, [r7, #8]
 8009214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009216:	2301      	movs	r3, #1
 8009218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800921a:	4b79      	ldr	r3, [pc, #484]	@ (8009400 <HAL_RCC_OscConfig+0x4b0>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d118      	bne.n	8009258 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009226:	4b76      	ldr	r3, [pc, #472]	@ (8009400 <HAL_RCC_OscConfig+0x4b0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a75      	ldr	r2, [pc, #468]	@ (8009400 <HAL_RCC_OscConfig+0x4b0>)
 800922c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009232:	f7fc fa8d 	bl	8005750 <HAL_GetTick>
 8009236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009238:	e008      	b.n	800924c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800923a:	f7fc fa89 	bl	8005750 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b02      	cmp	r3, #2
 8009246:	d901      	bls.n	800924c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e118      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800924c:	4b6c      	ldr	r3, [pc, #432]	@ (8009400 <HAL_RCC_OscConfig+0x4b0>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0f0      	beq.n	800923a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d106      	bne.n	800926e <HAL_RCC_OscConfig+0x31e>
 8009260:	4b66      	ldr	r3, [pc, #408]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009264:	4a65      	ldr	r2, [pc, #404]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	6713      	str	r3, [r2, #112]	@ 0x70
 800926c:	e01c      	b.n	80092a8 <HAL_RCC_OscConfig+0x358>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	2b05      	cmp	r3, #5
 8009274:	d10c      	bne.n	8009290 <HAL_RCC_OscConfig+0x340>
 8009276:	4b61      	ldr	r3, [pc, #388]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800927a:	4a60      	ldr	r2, [pc, #384]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 800927c:	f043 0304 	orr.w	r3, r3, #4
 8009280:	6713      	str	r3, [r2, #112]	@ 0x70
 8009282:	4b5e      	ldr	r3, [pc, #376]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009286:	4a5d      	ldr	r2, [pc, #372]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009288:	f043 0301 	orr.w	r3, r3, #1
 800928c:	6713      	str	r3, [r2, #112]	@ 0x70
 800928e:	e00b      	b.n	80092a8 <HAL_RCC_OscConfig+0x358>
 8009290:	4b5a      	ldr	r3, [pc, #360]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009294:	4a59      	ldr	r2, [pc, #356]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	6713      	str	r3, [r2, #112]	@ 0x70
 800929c:	4b57      	ldr	r3, [pc, #348]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 800929e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a0:	4a56      	ldr	r2, [pc, #344]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 80092a2:	f023 0304 	bic.w	r3, r3, #4
 80092a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d015      	beq.n	80092dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b0:	f7fc fa4e 	bl	8005750 <HAL_GetTick>
 80092b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092b6:	e00a      	b.n	80092ce <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092b8:	f7fc fa4a 	bl	8005750 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d901      	bls.n	80092ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e0d7      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ce:	4b4b      	ldr	r3, [pc, #300]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 80092d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0ee      	beq.n	80092b8 <HAL_RCC_OscConfig+0x368>
 80092da:	e014      	b.n	8009306 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092dc:	f7fc fa38 	bl	8005750 <HAL_GetTick>
 80092e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092e2:	e00a      	b.n	80092fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092e4:	f7fc fa34 	bl	8005750 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e0c1      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092fa:	4b40      	ldr	r3, [pc, #256]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 80092fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1ee      	bne.n	80092e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d105      	bne.n	8009318 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800930c:	4b3b      	ldr	r3, [pc, #236]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 800930e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009310:	4a3a      	ldr	r2, [pc, #232]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 80ad 	beq.w	800947c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009322:	4b36      	ldr	r3, [pc, #216]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f003 030c 	and.w	r3, r3, #12
 800932a:	2b08      	cmp	r3, #8
 800932c:	d060      	beq.n	80093f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d145      	bne.n	80093c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009336:	4b33      	ldr	r3, [pc, #204]	@ (8009404 <HAL_RCC_OscConfig+0x4b4>)
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933c:	f7fc fa08 	bl	8005750 <HAL_GetTick>
 8009340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009342:	e008      	b.n	8009356 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009344:	f7fc fa04 	bl	8005750 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d901      	bls.n	8009356 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e093      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009356:	4b29      	ldr	r3, [pc, #164]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1f0      	bne.n	8009344 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69da      	ldr	r2, [r3, #28]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009370:	019b      	lsls	r3, r3, #6
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009378:	085b      	lsrs	r3, r3, #1
 800937a:	3b01      	subs	r3, #1
 800937c:	041b      	lsls	r3, r3, #16
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009384:	061b      	lsls	r3, r3, #24
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800938c:	071b      	lsls	r3, r3, #28
 800938e:	491b      	ldr	r1, [pc, #108]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 8009390:	4313      	orrs	r3, r2
 8009392:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009394:	4b1b      	ldr	r3, [pc, #108]	@ (8009404 <HAL_RCC_OscConfig+0x4b4>)
 8009396:	2201      	movs	r2, #1
 8009398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939a:	f7fc f9d9 	bl	8005750 <HAL_GetTick>
 800939e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093a0:	e008      	b.n	80093b4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093a2:	f7fc f9d5 	bl	8005750 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d901      	bls.n	80093b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e064      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b4:	4b11      	ldr	r3, [pc, #68]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0f0      	beq.n	80093a2 <HAL_RCC_OscConfig+0x452>
 80093c0:	e05c      	b.n	800947c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093c2:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <HAL_RCC_OscConfig+0x4b4>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c8:	f7fc f9c2 	bl	8005750 <HAL_GetTick>
 80093cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ce:	e008      	b.n	80093e2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093d0:	f7fc f9be 	bl	8005750 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e04d      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093e2:	4b06      	ldr	r3, [pc, #24]	@ (80093fc <HAL_RCC_OscConfig+0x4ac>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1f0      	bne.n	80093d0 <HAL_RCC_OscConfig+0x480>
 80093ee:	e045      	b.n	800947c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d107      	bne.n	8009408 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e040      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
 80093fc:	40023800 	.word	0x40023800
 8009400:	40007000 	.word	0x40007000
 8009404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009408:	4b1f      	ldr	r3, [pc, #124]	@ (8009488 <HAL_RCC_OscConfig+0x538>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d030      	beq.n	8009478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009420:	429a      	cmp	r2, r3
 8009422:	d129      	bne.n	8009478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800942e:	429a      	cmp	r2, r3
 8009430:	d122      	bne.n	8009478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009438:	4013      	ands	r3, r2
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800943e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009440:	4293      	cmp	r3, r2
 8009442:	d119      	bne.n	8009478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944e:	085b      	lsrs	r3, r3, #1
 8009450:	3b01      	subs	r3, #1
 8009452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009454:	429a      	cmp	r2, r3
 8009456:	d10f      	bne.n	8009478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009464:	429a      	cmp	r2, r3
 8009466:	d107      	bne.n	8009478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009472:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009474:	429a      	cmp	r2, r3
 8009476:	d001      	beq.n	800947c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40023800 	.word	0x40023800

0800948c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e041      	b.n	8009522 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fa fd92 	bl	8003fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f000 faec 	bl	8009aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <HAL_TIM_PWM_Start+0x24>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b01      	cmp	r3, #1
 8009546:	bf14      	ite	ne
 8009548:	2301      	movne	r3, #1
 800954a:	2300      	moveq	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	e022      	b.n	8009596 <HAL_TIM_PWM_Start+0x6a>
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b04      	cmp	r3, #4
 8009554:	d109      	bne.n	800956a <HAL_TIM_PWM_Start+0x3e>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	bf14      	ite	ne
 8009562:	2301      	movne	r3, #1
 8009564:	2300      	moveq	r3, #0
 8009566:	b2db      	uxtb	r3, r3
 8009568:	e015      	b.n	8009596 <HAL_TIM_PWM_Start+0x6a>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b08      	cmp	r3, #8
 800956e:	d109      	bne.n	8009584 <HAL_TIM_PWM_Start+0x58>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b01      	cmp	r3, #1
 800957a:	bf14      	ite	ne
 800957c:	2301      	movne	r3, #1
 800957e:	2300      	moveq	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	e008      	b.n	8009596 <HAL_TIM_PWM_Start+0x6a>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	bf14      	ite	ne
 8009590:	2301      	movne	r3, #1
 8009592:	2300      	moveq	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e07c      	b.n	8009698 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d104      	bne.n	80095ae <HAL_TIM_PWM_Start+0x82>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095ac:	e013      	b.n	80095d6 <HAL_TIM_PWM_Start+0xaa>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d104      	bne.n	80095be <HAL_TIM_PWM_Start+0x92>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095bc:	e00b      	b.n	80095d6 <HAL_TIM_PWM_Start+0xaa>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d104      	bne.n	80095ce <HAL_TIM_PWM_Start+0xa2>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2202      	movs	r2, #2
 80095c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095cc:	e003      	b.n	80095d6 <HAL_TIM_PWM_Start+0xaa>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2202      	movs	r2, #2
 80095d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2201      	movs	r2, #1
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fcbe 	bl	8009f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a2d      	ldr	r2, [pc, #180]	@ (80096a0 <HAL_TIM_PWM_Start+0x174>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d004      	beq.n	80095f8 <HAL_TIM_PWM_Start+0xcc>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a2c      	ldr	r2, [pc, #176]	@ (80096a4 <HAL_TIM_PWM_Start+0x178>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d101      	bne.n	80095fc <HAL_TIM_PWM_Start+0xd0>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <HAL_TIM_PWM_Start+0xd2>
 80095fc:	2300      	movs	r3, #0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009610:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a22      	ldr	r2, [pc, #136]	@ (80096a0 <HAL_TIM_PWM_Start+0x174>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d022      	beq.n	8009662 <HAL_TIM_PWM_Start+0x136>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009624:	d01d      	beq.n	8009662 <HAL_TIM_PWM_Start+0x136>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a1f      	ldr	r2, [pc, #124]	@ (80096a8 <HAL_TIM_PWM_Start+0x17c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d018      	beq.n	8009662 <HAL_TIM_PWM_Start+0x136>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a1d      	ldr	r2, [pc, #116]	@ (80096ac <HAL_TIM_PWM_Start+0x180>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d013      	beq.n	8009662 <HAL_TIM_PWM_Start+0x136>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a1c      	ldr	r2, [pc, #112]	@ (80096b0 <HAL_TIM_PWM_Start+0x184>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d00e      	beq.n	8009662 <HAL_TIM_PWM_Start+0x136>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a16      	ldr	r2, [pc, #88]	@ (80096a4 <HAL_TIM_PWM_Start+0x178>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d009      	beq.n	8009662 <HAL_TIM_PWM_Start+0x136>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a18      	ldr	r2, [pc, #96]	@ (80096b4 <HAL_TIM_PWM_Start+0x188>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d004      	beq.n	8009662 <HAL_TIM_PWM_Start+0x136>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a16      	ldr	r2, [pc, #88]	@ (80096b8 <HAL_TIM_PWM_Start+0x18c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d111      	bne.n	8009686 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b06      	cmp	r3, #6
 8009672:	d010      	beq.n	8009696 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f042 0201 	orr.w	r2, r2, #1
 8009682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009684:	e007      	b.n	8009696 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f042 0201 	orr.w	r2, r2, #1
 8009694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40000400 	.word	0x40000400
 80096ac:	40000800 	.word	0x40000800
 80096b0:	40000c00 	.word	0x40000c00
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40001800 	.word	0x40001800

080096bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e097      	b.n	8009800 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d106      	bne.n	80096ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7fa fbff 	bl	8003ee8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2202      	movs	r2, #2
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	6812      	ldr	r2, [r2, #0]
 80096fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009700:	f023 0307 	bic.w	r3, r3, #7
 8009704:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f000 f9c9 	bl	8009aa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	4313      	orrs	r3, r2
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800975c:	f023 030c 	bic.w	r3, r3, #12
 8009760:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800976c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	4313      	orrs	r3, r2
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	4313      	orrs	r3, r2
 800977e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	011a      	lsls	r2, r3, #4
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	031b      	lsls	r3, r3, #12
 800978c:	4313      	orrs	r3, r2
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	4313      	orrs	r3, r2
 8009792:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800979a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80097a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	4313      	orrs	r3, r2
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009818:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009820:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009828:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009830:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d110      	bne.n	800985a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d102      	bne.n	8009844 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800983e:	7b7b      	ldrb	r3, [r7, #13]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d001      	beq.n	8009848 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e069      	b.n	800991c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2202      	movs	r2, #2
 800984c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009858:	e031      	b.n	80098be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b04      	cmp	r3, #4
 800985e:	d110      	bne.n	8009882 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d102      	bne.n	800986c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009866:	7b3b      	ldrb	r3, [r7, #12]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d001      	beq.n	8009870 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e055      	b.n	800991c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009880:	e01d      	b.n	80098be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d108      	bne.n	800989a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009888:	7bbb      	ldrb	r3, [r7, #14]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d105      	bne.n	800989a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800988e:	7b7b      	ldrb	r3, [r7, #13]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d102      	bne.n	800989a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009894:	7b3b      	ldrb	r3, [r7, #12]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d001      	beq.n	800989e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e03e      	b.n	800991c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2202      	movs	r2, #2
 80098a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2202      	movs	r2, #2
 80098aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2202      	movs	r2, #2
 80098b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2202      	movs	r2, #2
 80098ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <HAL_TIM_Encoder_Start+0xc4>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d008      	beq.n	80098dc <HAL_TIM_Encoder_Start+0xd4>
 80098ca:	e00f      	b.n	80098ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2201      	movs	r2, #1
 80098d2:	2100      	movs	r1, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fb43 	bl	8009f60 <TIM_CCxChannelCmd>
      break;
 80098da:	e016      	b.n	800990a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2201      	movs	r2, #1
 80098e2:	2104      	movs	r1, #4
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fb3b 	bl	8009f60 <TIM_CCxChannelCmd>
      break;
 80098ea:	e00e      	b.n	800990a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2201      	movs	r2, #1
 80098f2:	2100      	movs	r1, #0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 fb33 	bl	8009f60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2201      	movs	r2, #1
 8009900:	2104      	movs	r1, #4
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fb2c 	bl	8009f60 <TIM_CCxChannelCmd>
      break;
 8009908:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f042 0201 	orr.w	r2, r2, #1
 8009918:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800993e:	2302      	movs	r3, #2
 8009940:	e0ae      	b.n	8009aa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b0c      	cmp	r3, #12
 800994e:	f200 809f 	bhi.w	8009a90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009952:	a201      	add	r2, pc, #4	@ (adr r2, 8009958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	0800998d 	.word	0x0800998d
 800995c:	08009a91 	.word	0x08009a91
 8009960:	08009a91 	.word	0x08009a91
 8009964:	08009a91 	.word	0x08009a91
 8009968:	080099cd 	.word	0x080099cd
 800996c:	08009a91 	.word	0x08009a91
 8009970:	08009a91 	.word	0x08009a91
 8009974:	08009a91 	.word	0x08009a91
 8009978:	08009a0f 	.word	0x08009a0f
 800997c:	08009a91 	.word	0x08009a91
 8009980:	08009a91 	.word	0x08009a91
 8009984:	08009a91 	.word	0x08009a91
 8009988:	08009a4f 	.word	0x08009a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f934 	bl	8009c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f042 0208 	orr.w	r2, r2, #8
 80099a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0204 	bic.w	r2, r2, #4
 80099b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6999      	ldr	r1, [r3, #24]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	691a      	ldr	r2, [r3, #16]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	619a      	str	r2, [r3, #24]
      break;
 80099ca:	e064      	b.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f984 	bl	8009ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6999      	ldr	r1, [r3, #24]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	021a      	lsls	r2, r3, #8
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	619a      	str	r2, [r3, #24]
      break;
 8009a0c:	e043      	b.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 f9d9 	bl	8009dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0208 	orr.w	r2, r2, #8
 8009a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69da      	ldr	r2, [r3, #28]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0204 	bic.w	r2, r2, #4
 8009a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69d9      	ldr	r1, [r3, #28]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	691a      	ldr	r2, [r3, #16]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	61da      	str	r2, [r3, #28]
      break;
 8009a4c:	e023      	b.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fa2d 	bl	8009eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69da      	ldr	r2, [r3, #28]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69da      	ldr	r2, [r3, #28]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69d9      	ldr	r1, [r3, #28]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	021a      	lsls	r2, r3, #8
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	61da      	str	r2, [r3, #28]
      break;
 8009a8e:	e002      	b.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	75fb      	strb	r3, [r7, #23]
      break;
 8009a94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a46      	ldr	r2, [pc, #280]	@ (8009bd4 <TIM_Base_SetConfig+0x12c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d013      	beq.n	8009ae8 <TIM_Base_SetConfig+0x40>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ac6:	d00f      	beq.n	8009ae8 <TIM_Base_SetConfig+0x40>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a43      	ldr	r2, [pc, #268]	@ (8009bd8 <TIM_Base_SetConfig+0x130>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d00b      	beq.n	8009ae8 <TIM_Base_SetConfig+0x40>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a42      	ldr	r2, [pc, #264]	@ (8009bdc <TIM_Base_SetConfig+0x134>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d007      	beq.n	8009ae8 <TIM_Base_SetConfig+0x40>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a41      	ldr	r2, [pc, #260]	@ (8009be0 <TIM_Base_SetConfig+0x138>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d003      	beq.n	8009ae8 <TIM_Base_SetConfig+0x40>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a40      	ldr	r2, [pc, #256]	@ (8009be4 <TIM_Base_SetConfig+0x13c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d108      	bne.n	8009afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a35      	ldr	r2, [pc, #212]	@ (8009bd4 <TIM_Base_SetConfig+0x12c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d02b      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b08:	d027      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a32      	ldr	r2, [pc, #200]	@ (8009bd8 <TIM_Base_SetConfig+0x130>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d023      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a31      	ldr	r2, [pc, #196]	@ (8009bdc <TIM_Base_SetConfig+0x134>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d01f      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a30      	ldr	r2, [pc, #192]	@ (8009be0 <TIM_Base_SetConfig+0x138>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d01b      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a2f      	ldr	r2, [pc, #188]	@ (8009be4 <TIM_Base_SetConfig+0x13c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d017      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8009be8 <TIM_Base_SetConfig+0x140>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d013      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a2d      	ldr	r2, [pc, #180]	@ (8009bec <TIM_Base_SetConfig+0x144>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d00f      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8009bf0 <TIM_Base_SetConfig+0x148>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d00b      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a2b      	ldr	r2, [pc, #172]	@ (8009bf4 <TIM_Base_SetConfig+0x14c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d007      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8009bf8 <TIM_Base_SetConfig+0x150>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d003      	beq.n	8009b5a <TIM_Base_SetConfig+0xb2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a29      	ldr	r2, [pc, #164]	@ (8009bfc <TIM_Base_SetConfig+0x154>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d108      	bne.n	8009b6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a10      	ldr	r2, [pc, #64]	@ (8009bd4 <TIM_Base_SetConfig+0x12c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_Base_SetConfig+0xf8>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a12      	ldr	r2, [pc, #72]	@ (8009be4 <TIM_Base_SetConfig+0x13c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d103      	bne.n	8009ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d105      	bne.n	8009bc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f023 0201 	bic.w	r2, r3, #1
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	611a      	str	r2, [r3, #16]
  }
}
 8009bc6:	bf00      	nop
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40010000 	.word	0x40010000
 8009bd8:	40000400 	.word	0x40000400
 8009bdc:	40000800 	.word	0x40000800
 8009be0:	40000c00 	.word	0x40000c00
 8009be4:	40010400 	.word	0x40010400
 8009be8:	40014000 	.word	0x40014000
 8009bec:	40014400 	.word	0x40014400
 8009bf0:	40014800 	.word	0x40014800
 8009bf4:	40001800 	.word	0x40001800
 8009bf8:	40001c00 	.word	0x40001c00
 8009bfc:	40002000 	.word	0x40002000

08009c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
 8009c14:	f023 0201 	bic.w	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 0303 	bic.w	r3, r3, #3
 8009c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f023 0302 	bic.w	r3, r3, #2
 8009c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a20      	ldr	r2, [pc, #128]	@ (8009cd8 <TIM_OC1_SetConfig+0xd8>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d003      	beq.n	8009c64 <TIM_OC1_SetConfig+0x64>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009cdc <TIM_OC1_SetConfig+0xdc>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d10c      	bne.n	8009c7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f023 0308 	bic.w	r3, r3, #8
 8009c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f023 0304 	bic.w	r3, r3, #4
 8009c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a15      	ldr	r2, [pc, #84]	@ (8009cd8 <TIM_OC1_SetConfig+0xd8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d003      	beq.n	8009c8e <TIM_OC1_SetConfig+0x8e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a14      	ldr	r2, [pc, #80]	@ (8009cdc <TIM_OC1_SetConfig+0xdc>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d111      	bne.n	8009cb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	621a      	str	r2, [r3, #32]
}
 8009ccc:	bf00      	nop
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40010400 	.word	0x40010400

08009ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	f023 0210 	bic.w	r2, r3, #16
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	f023 0320 	bic.w	r3, r3, #32
 8009d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a22      	ldr	r2, [pc, #136]	@ (8009dc4 <TIM_OC2_SetConfig+0xe4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d003      	beq.n	8009d48 <TIM_OC2_SetConfig+0x68>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a21      	ldr	r2, [pc, #132]	@ (8009dc8 <TIM_OC2_SetConfig+0xe8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d10d      	bne.n	8009d64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a17      	ldr	r2, [pc, #92]	@ (8009dc4 <TIM_OC2_SetConfig+0xe4>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d003      	beq.n	8009d74 <TIM_OC2_SetConfig+0x94>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a16      	ldr	r2, [pc, #88]	@ (8009dc8 <TIM_OC2_SetConfig+0xe8>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d113      	bne.n	8009d9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	621a      	str	r2, [r3, #32]
}
 8009db6:	bf00      	nop
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40010000 	.word	0x40010000
 8009dc8:	40010400 	.word	0x40010400

08009dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a21      	ldr	r2, [pc, #132]	@ (8009eac <TIM_OC3_SetConfig+0xe0>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d003      	beq.n	8009e32 <TIM_OC3_SetConfig+0x66>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a20      	ldr	r2, [pc, #128]	@ (8009eb0 <TIM_OC3_SetConfig+0xe4>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d10d      	bne.n	8009e4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a16      	ldr	r2, [pc, #88]	@ (8009eac <TIM_OC3_SetConfig+0xe0>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d003      	beq.n	8009e5e <TIM_OC3_SetConfig+0x92>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a15      	ldr	r2, [pc, #84]	@ (8009eb0 <TIM_OC3_SetConfig+0xe4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d113      	bne.n	8009e86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	621a      	str	r2, [r3, #32]
}
 8009ea0:	bf00      	nop
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	40010000 	.word	0x40010000
 8009eb0:	40010400 	.word	0x40010400

08009eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	021b      	lsls	r3, r3, #8
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	031b      	lsls	r3, r3, #12
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a12      	ldr	r2, [pc, #72]	@ (8009f58 <TIM_OC4_SetConfig+0xa4>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d003      	beq.n	8009f1c <TIM_OC4_SetConfig+0x68>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a11      	ldr	r2, [pc, #68]	@ (8009f5c <TIM_OC4_SetConfig+0xa8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d109      	bne.n	8009f30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	019b      	lsls	r3, r3, #6
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	621a      	str	r2, [r3, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	40010000 	.word	0x40010000
 8009f5c:	40010400 	.word	0x40010400

08009f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f003 031f 	and.w	r3, r3, #31
 8009f72:	2201      	movs	r2, #1
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6a1a      	ldr	r2, [r3, #32]
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	43db      	mvns	r3, r3
 8009f82:	401a      	ands	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a1a      	ldr	r2, [r3, #32]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f003 031f 	and.w	r3, r3, #31
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	fa01 f303 	lsl.w	r3, r1, r3
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
	...

08009fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e05a      	b.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a21      	ldr	r2, [pc, #132]	@ (800a088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d022      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a010:	d01d      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a1d      	ldr	r2, [pc, #116]	@ (800a08c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d018      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1b      	ldr	r2, [pc, #108]	@ (800a090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d013      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a1a      	ldr	r2, [pc, #104]	@ (800a094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d00e      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a18      	ldr	r2, [pc, #96]	@ (800a098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d009      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a17      	ldr	r2, [pc, #92]	@ (800a09c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d004      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a15      	ldr	r2, [pc, #84]	@ (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d10c      	bne.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	40010000 	.word	0x40010000
 800a08c:	40000400 	.word	0x40000400
 800a090:	40000800 	.word	0x40000800
 800a094:	40000c00 	.word	0x40000c00
 800a098:	40010400 	.word	0x40010400
 800a09c:	40014000 	.word	0x40014000
 800a0a0:	40001800 	.word	0x40001800

0800a0a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e042      	b.n	800a13c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d106      	bne.n	800a0d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7fa f802 	bl	80040d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2224      	movs	r2, #36	@ 0x24
 800a0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68da      	ldr	r2, [r3, #12]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a0e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fc85 	bl	800a9f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	695a      	ldr	r2, [r3, #20]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a10c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a11c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2220      	movs	r2, #32
 800a128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2220      	movs	r2, #32
 800a130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b0ba      	sub	sp, #232	@ 0xe8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a170:	2300      	movs	r3, #0
 800a172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10f      	bne.n	800a1aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <HAL_UART_IRQHandler+0x66>
 800a196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fb69 	bl	800a87a <UART_Receive_IT>
      return;
 800a1a8:	e25b      	b.n	800a662 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a1aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 80de 	beq.w	800a370 <HAL_UART_IRQHandler+0x22c>
 800a1b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 80d1 	beq.w	800a370 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <HAL_UART_IRQHandler+0xae>
 800a1da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d005      	beq.n	800a1f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ea:	f043 0201 	orr.w	r2, r3, #1
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1f6:	f003 0304 	and.w	r3, r3, #4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00b      	beq.n	800a216 <HAL_UART_IRQHandler+0xd2>
 800a1fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a20e:	f043 0202 	orr.w	r2, r3, #2
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a21a:	f003 0302 	and.w	r3, r3, #2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00b      	beq.n	800a23a <HAL_UART_IRQHandler+0xf6>
 800a222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d005      	beq.n	800a23a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a232:	f043 0204 	orr.w	r2, r3, #4
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a23e:	f003 0308 	and.w	r3, r3, #8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d011      	beq.n	800a26a <HAL_UART_IRQHandler+0x126>
 800a246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d105      	bne.n	800a25e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a262:	f043 0208 	orr.w	r2, r3, #8
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 81f2 	beq.w	800a658 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d008      	beq.n	800a292 <HAL_UART_IRQHandler+0x14e>
 800a280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 faf4 	bl	800a87a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29c:	2b40      	cmp	r3, #64	@ 0x40
 800a29e:	bf0c      	ite	eq
 800a2a0:	2301      	moveq	r3, #1
 800a2a2:	2300      	movne	r3, #0
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ae:	f003 0308 	and.w	r3, r3, #8
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d103      	bne.n	800a2be <HAL_UART_IRQHandler+0x17a>
 800a2b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d04f      	beq.n	800a35e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f9fc 	bl	800a6bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ce:	2b40      	cmp	r3, #64	@ 0x40
 800a2d0:	d141      	bne.n	800a356 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3314      	adds	r3, #20
 800a2d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3314      	adds	r3, #20
 800a2fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a30a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1d9      	bne.n	800a2d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a322:	2b00      	cmp	r3, #0
 800a324:	d013      	beq.n	800a34e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32a:	4a7e      	ldr	r2, [pc, #504]	@ (800a524 <HAL_UART_IRQHandler+0x3e0>)
 800a32c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a332:	4618      	mov	r0, r3
 800a334:	f7fc f87c 	bl	8006430 <HAL_DMA_Abort_IT>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d016      	beq.n	800a36c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a348:	4610      	mov	r0, r2
 800a34a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a34c:	e00e      	b.n	800a36c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f99e 	bl	800a690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a354:	e00a      	b.n	800a36c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f99a 	bl	800a690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35c:	e006      	b.n	800a36c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f996 	bl	800a690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a36a:	e175      	b.n	800a658 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a36c:	bf00      	nop
    return;
 800a36e:	e173      	b.n	800a658 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a374:	2b01      	cmp	r3, #1
 800a376:	f040 814f 	bne.w	800a618 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a37e:	f003 0310 	and.w	r3, r3, #16
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8148 	beq.w	800a618 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a38c:	f003 0310 	and.w	r3, r3, #16
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 8141 	beq.w	800a618 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a396:	2300      	movs	r3, #0
 800a398:	60bb      	str	r3, [r7, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60bb      	str	r3, [r7, #8]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	60bb      	str	r3, [r7, #8]
 800a3aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b6:	2b40      	cmp	r3, #64	@ 0x40
 800a3b8:	f040 80b6 	bne.w	800a528 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 8145 	beq.w	800a65c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	f080 813e 	bcs.w	800a65c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f2:	f000 8088 	beq.w	800a506 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	330c      	adds	r3, #12
 800a3fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a40c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	330c      	adds	r3, #12
 800a41e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a422:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a42e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a43a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1d9      	bne.n	800a3f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3314      	adds	r3, #20
 800a448:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a454:	f023 0301 	bic.w	r3, r3, #1
 800a458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3314      	adds	r3, #20
 800a462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a466:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a46a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a46e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e1      	bne.n	800a442 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3314      	adds	r3, #20
 800a484:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a48e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3314      	adds	r3, #20
 800a49e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a4a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a4a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a4a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a4b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e3      	bne.n	800a47e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	330c      	adds	r3, #12
 800a4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4d6:	f023 0310 	bic.w	r3, r3, #16
 800a4da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a4e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a4ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4f0:	e841 2300 	strex	r3, r2, [r1]
 800a4f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e3      	bne.n	800a4c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a500:	4618      	mov	r0, r3
 800a502:	f7fb ff25 	bl	8006350 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2202      	movs	r2, #2
 800a50a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a514:	b29b      	uxth	r3, r3
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f8c1 	bl	800a6a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a522:	e09b      	b.n	800a65c <HAL_UART_IRQHandler+0x518>
 800a524:	0800a783 	.word	0x0800a783
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a530:	b29b      	uxth	r3, r3
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 808e 	beq.w	800a660 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 8089 	beq.w	800a660 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	330c      	adds	r3, #12
 800a554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a564:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330c      	adds	r3, #12
 800a56e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a572:	647a      	str	r2, [r7, #68]	@ 0x44
 800a574:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e3      	bne.n	800a54e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3314      	adds	r3, #20
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	623b      	str	r3, [r7, #32]
   return(result);
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	f023 0301 	bic.w	r3, r3, #1
 800a59c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a5aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1e3      	bne.n	800a586 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	330c      	adds	r3, #12
 800a5d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	e853 3f00 	ldrex	r3, [r3]
 800a5da:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0310 	bic.w	r3, r3, #16
 800a5e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	330c      	adds	r3, #12
 800a5ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a5f0:	61fa      	str	r2, [r7, #28]
 800a5f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	69b9      	ldr	r1, [r7, #24]
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e3      	bne.n	800a5cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a60a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f847 	bl	800a6a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a616:	e023      	b.n	800a660 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a61c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a620:	2b00      	cmp	r3, #0
 800a622:	d009      	beq.n	800a638 <HAL_UART_IRQHandler+0x4f4>
 800a624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d003      	beq.n	800a638 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f8ba 	bl	800a7aa <UART_Transmit_IT>
    return;
 800a636:	e014      	b.n	800a662 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a63c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00e      	beq.n	800a662 <HAL_UART_IRQHandler+0x51e>
 800a644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d008      	beq.n	800a662 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f8fa 	bl	800a84a <UART_EndTransmit_IT>
    return;
 800a656:	e004      	b.n	800a662 <HAL_UART_IRQHandler+0x51e>
    return;
 800a658:	bf00      	nop
 800a65a:	e002      	b.n	800a662 <HAL_UART_IRQHandler+0x51e>
      return;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <HAL_UART_IRQHandler+0x51e>
      return;
 800a660:	bf00      	nop
  }
}
 800a662:	37e8      	adds	r7, #232	@ 0xe8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b095      	sub	sp, #84	@ 0x54
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	330c      	adds	r3, #12
 800a6ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ce:	e853 3f00 	ldrex	r3, [r3]
 800a6d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a6e4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e5      	bne.n	800a6c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3314      	adds	r3, #20
 800a6fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	61fb      	str	r3, [r7, #28]
   return(result);
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f023 0301 	bic.w	r3, r3, #1
 800a70e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3314      	adds	r3, #20
 800a716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a718:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a71a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a71e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e5      	bne.n	800a6f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a730:	2b01      	cmp	r3, #1
 800a732:	d119      	bne.n	800a768 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	330c      	adds	r3, #12
 800a73a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	e853 3f00 	ldrex	r3, [r3]
 800a742:	60bb      	str	r3, [r7, #8]
   return(result);
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f023 0310 	bic.w	r3, r3, #16
 800a74a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330c      	adds	r3, #12
 800a752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a754:	61ba      	str	r2, [r7, #24]
 800a756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a758:	6979      	ldr	r1, [r7, #20]
 800a75a:	69ba      	ldr	r2, [r7, #24]
 800a75c:	e841 2300 	strex	r3, r2, [r1]
 800a760:	613b      	str	r3, [r7, #16]
   return(result);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1e5      	bne.n	800a734 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2220      	movs	r2, #32
 800a76c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a776:	bf00      	nop
 800a778:	3754      	adds	r7, #84	@ 0x54
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a78e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff ff77 	bl	800a690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a2:	bf00      	nop
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b21      	cmp	r3, #33	@ 0x21
 800a7bc:	d13e      	bne.n	800a83c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7c6:	d114      	bne.n	800a7f2 <UART_Transmit_IT+0x48>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d110      	bne.n	800a7f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	1c9a      	adds	r2, r3, #2
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	621a      	str	r2, [r3, #32]
 800a7f0:	e008      	b.n	800a804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	1c59      	adds	r1, r3, #1
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	6211      	str	r1, [r2, #32]
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3b01      	subs	r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	4619      	mov	r1, r3
 800a812:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10f      	bne.n	800a838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	e000      	b.n	800a83e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a83c:	2302      	movs	r3, #2
  }
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a860:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fefc 	bl	800a668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b08c      	sub	sp, #48	@ 0x30
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b22      	cmp	r3, #34	@ 0x22
 800a88c:	f040 80ae 	bne.w	800a9ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a898:	d117      	bne.n	800a8ca <UART_Receive_IT+0x50>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d113      	bne.n	800a8ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c2:	1c9a      	adds	r2, r3, #2
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a8c8:	e026      	b.n	800a918 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8dc:	d007      	beq.n	800a8ee <UART_Receive_IT+0x74>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <UART_Receive_IT+0x82>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d106      	bne.n	800a8fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	e008      	b.n	800a90e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	3b01      	subs	r3, #1
 800a920:	b29b      	uxth	r3, r3
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4619      	mov	r1, r3
 800a926:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d15d      	bne.n	800a9e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f022 0220 	bic.w	r2, r2, #32
 800a93a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a94a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	695a      	ldr	r2, [r3, #20]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 0201 	bic.w	r2, r2, #1
 800a95a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2220      	movs	r2, #32
 800a960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d135      	bne.n	800a9de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	330c      	adds	r3, #12
 800a97e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	613b      	str	r3, [r7, #16]
   return(result);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f023 0310 	bic.w	r3, r3, #16
 800a98e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	330c      	adds	r3, #12
 800a996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a998:	623a      	str	r2, [r7, #32]
 800a99a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	69f9      	ldr	r1, [r7, #28]
 800a99e:	6a3a      	ldr	r2, [r7, #32]
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e5      	bne.n	800a978 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0310 	and.w	r3, r3, #16
 800a9b6:	2b10      	cmp	r3, #16
 800a9b8:	d10a      	bne.n	800a9d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff fe64 	bl	800a6a4 <HAL_UARTEx_RxEventCallback>
 800a9dc:	e002      	b.n	800a9e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff fe4c 	bl	800a67c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e002      	b.n	800a9ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e000      	b.n	800a9ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a9ec:	2302      	movs	r3, #2
  }
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3730      	adds	r7, #48	@ 0x30
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9fc:	b0c0      	sub	sp, #256	@ 0x100
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aa10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa14:	68d9      	ldr	r1, [r3, #12]
 800aa16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	ea40 0301 	orr.w	r3, r0, r1
 800aa20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	431a      	orrs	r2, r3
 800aa38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aa50:	f021 010c 	bic.w	r1, r1, #12
 800aa54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aa5e:	430b      	orrs	r3, r1
 800aa60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aa6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa72:	6999      	ldr	r1, [r3, #24]
 800aa74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	ea40 0301 	orr.w	r3, r0, r1
 800aa7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	4b8f      	ldr	r3, [pc, #572]	@ (800acc4 <UART_SetConfig+0x2cc>)
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d005      	beq.n	800aa98 <UART_SetConfig+0xa0>
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	4b8d      	ldr	r3, [pc, #564]	@ (800acc8 <UART_SetConfig+0x2d0>)
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d104      	bne.n	800aaa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa98:	f7fe f816 	bl	8008ac8 <HAL_RCC_GetPCLK2Freq>
 800aa9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aaa0:	e003      	b.n	800aaaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaa2:	f7fd fffd 	bl	8008aa0 <HAL_RCC_GetPCLK1Freq>
 800aaa6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aab4:	f040 810c 	bne.w	800acd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aac2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aaca:	4622      	mov	r2, r4
 800aacc:	462b      	mov	r3, r5
 800aace:	1891      	adds	r1, r2, r2
 800aad0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aad2:	415b      	adcs	r3, r3
 800aad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aada:	4621      	mov	r1, r4
 800aadc:	eb12 0801 	adds.w	r8, r2, r1
 800aae0:	4629      	mov	r1, r5
 800aae2:	eb43 0901 	adc.w	r9, r3, r1
 800aae6:	f04f 0200 	mov.w	r2, #0
 800aaea:	f04f 0300 	mov.w	r3, #0
 800aaee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aaf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aaf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aafa:	4690      	mov	r8, r2
 800aafc:	4699      	mov	r9, r3
 800aafe:	4623      	mov	r3, r4
 800ab00:	eb18 0303 	adds.w	r3, r8, r3
 800ab04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab08:	462b      	mov	r3, r5
 800ab0a:	eb49 0303 	adc.w	r3, r9, r3
 800ab0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ab12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ab22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ab26:	460b      	mov	r3, r1
 800ab28:	18db      	adds	r3, r3, r3
 800ab2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	eb42 0303 	adc.w	r3, r2, r3
 800ab32:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ab38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ab3c:	f7f6 f8c4 	bl	8000cc8 <__aeabi_uldivmod>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4b61      	ldr	r3, [pc, #388]	@ (800accc <UART_SetConfig+0x2d4>)
 800ab46:	fba3 2302 	umull	r2, r3, r3, r2
 800ab4a:	095b      	lsrs	r3, r3, #5
 800ab4c:	011c      	lsls	r4, r3, #4
 800ab4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab52:	2200      	movs	r2, #0
 800ab54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ab5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	1891      	adds	r1, r2, r2
 800ab66:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ab68:	415b      	adcs	r3, r3
 800ab6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab70:	4641      	mov	r1, r8
 800ab72:	eb12 0a01 	adds.w	sl, r2, r1
 800ab76:	4649      	mov	r1, r9
 800ab78:	eb43 0b01 	adc.w	fp, r3, r1
 800ab7c:	f04f 0200 	mov.w	r2, #0
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab90:	4692      	mov	sl, r2
 800ab92:	469b      	mov	fp, r3
 800ab94:	4643      	mov	r3, r8
 800ab96:	eb1a 0303 	adds.w	r3, sl, r3
 800ab9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab9e:	464b      	mov	r3, r9
 800aba0:	eb4b 0303 	adc.w	r3, fp, r3
 800aba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800abb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800abbc:	460b      	mov	r3, r1
 800abbe:	18db      	adds	r3, r3, r3
 800abc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800abc2:	4613      	mov	r3, r2
 800abc4:	eb42 0303 	adc.w	r3, r2, r3
 800abc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800abca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800abce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800abd2:	f7f6 f879 	bl	8000cc8 <__aeabi_uldivmod>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4611      	mov	r1, r2
 800abdc:	4b3b      	ldr	r3, [pc, #236]	@ (800accc <UART_SetConfig+0x2d4>)
 800abde:	fba3 2301 	umull	r2, r3, r3, r1
 800abe2:	095b      	lsrs	r3, r3, #5
 800abe4:	2264      	movs	r2, #100	@ 0x64
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
 800abea:	1acb      	subs	r3, r1, r3
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800abf2:	4b36      	ldr	r3, [pc, #216]	@ (800accc <UART_SetConfig+0x2d4>)
 800abf4:	fba3 2302 	umull	r2, r3, r3, r2
 800abf8:	095b      	lsrs	r3, r3, #5
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ac00:	441c      	add	r4, r3
 800ac02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ac10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ac14:	4642      	mov	r2, r8
 800ac16:	464b      	mov	r3, r9
 800ac18:	1891      	adds	r1, r2, r2
 800ac1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ac1c:	415b      	adcs	r3, r3
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ac24:	4641      	mov	r1, r8
 800ac26:	1851      	adds	r1, r2, r1
 800ac28:	6339      	str	r1, [r7, #48]	@ 0x30
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	414b      	adcs	r3, r1
 800ac2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac30:	f04f 0200 	mov.w	r2, #0
 800ac34:	f04f 0300 	mov.w	r3, #0
 800ac38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	00cb      	lsls	r3, r1, #3
 800ac40:	4651      	mov	r1, sl
 800ac42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac46:	4651      	mov	r1, sl
 800ac48:	00ca      	lsls	r2, r1, #3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4642      	mov	r2, r8
 800ac52:	189b      	adds	r3, r3, r2
 800ac54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac58:	464b      	mov	r3, r9
 800ac5a:	460a      	mov	r2, r1
 800ac5c:	eb42 0303 	adc.w	r3, r2, r3
 800ac60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ac74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ac78:	460b      	mov	r3, r1
 800ac7a:	18db      	adds	r3, r3, r3
 800ac7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac7e:	4613      	mov	r3, r2
 800ac80:	eb42 0303 	adc.w	r3, r2, r3
 800ac84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ac8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ac8e:	f7f6 f81b 	bl	8000cc8 <__aeabi_uldivmod>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4b0d      	ldr	r3, [pc, #52]	@ (800accc <UART_SetConfig+0x2d4>)
 800ac98:	fba3 1302 	umull	r1, r3, r3, r2
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	2164      	movs	r1, #100	@ 0x64
 800aca0:	fb01 f303 	mul.w	r3, r1, r3
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	3332      	adds	r3, #50	@ 0x32
 800acaa:	4a08      	ldr	r2, [pc, #32]	@ (800accc <UART_SetConfig+0x2d4>)
 800acac:	fba2 2303 	umull	r2, r3, r2, r3
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	f003 0207 	and.w	r2, r3, #7
 800acb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4422      	add	r2, r4
 800acbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800acc0:	e106      	b.n	800aed0 <UART_SetConfig+0x4d8>
 800acc2:	bf00      	nop
 800acc4:	40011000 	.word	0x40011000
 800acc8:	40011400 	.word	0x40011400
 800accc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800acd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800acda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800acde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ace2:	4642      	mov	r2, r8
 800ace4:	464b      	mov	r3, r9
 800ace6:	1891      	adds	r1, r2, r2
 800ace8:	6239      	str	r1, [r7, #32]
 800acea:	415b      	adcs	r3, r3
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
 800acee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acf2:	4641      	mov	r1, r8
 800acf4:	1854      	adds	r4, r2, r1
 800acf6:	4649      	mov	r1, r9
 800acf8:	eb43 0501 	adc.w	r5, r3, r1
 800acfc:	f04f 0200 	mov.w	r2, #0
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	00eb      	lsls	r3, r5, #3
 800ad06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad0a:	00e2      	lsls	r2, r4, #3
 800ad0c:	4614      	mov	r4, r2
 800ad0e:	461d      	mov	r5, r3
 800ad10:	4643      	mov	r3, r8
 800ad12:	18e3      	adds	r3, r4, r3
 800ad14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad18:	464b      	mov	r3, r9
 800ad1a:	eb45 0303 	adc.w	r3, r5, r3
 800ad1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ad3e:	4629      	mov	r1, r5
 800ad40:	008b      	lsls	r3, r1, #2
 800ad42:	4621      	mov	r1, r4
 800ad44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad48:	4621      	mov	r1, r4
 800ad4a:	008a      	lsls	r2, r1, #2
 800ad4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ad50:	f7f5 ffba 	bl	8000cc8 <__aeabi_uldivmod>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4b60      	ldr	r3, [pc, #384]	@ (800aedc <UART_SetConfig+0x4e4>)
 800ad5a:	fba3 2302 	umull	r2, r3, r3, r2
 800ad5e:	095b      	lsrs	r3, r3, #5
 800ad60:	011c      	lsls	r4, r3, #4
 800ad62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ad70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ad74:	4642      	mov	r2, r8
 800ad76:	464b      	mov	r3, r9
 800ad78:	1891      	adds	r1, r2, r2
 800ad7a:	61b9      	str	r1, [r7, #24]
 800ad7c:	415b      	adcs	r3, r3
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad84:	4641      	mov	r1, r8
 800ad86:	1851      	adds	r1, r2, r1
 800ad88:	6139      	str	r1, [r7, #16]
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	414b      	adcs	r3, r1
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	f04f 0300 	mov.w	r3, #0
 800ad98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad9c:	4659      	mov	r1, fp
 800ad9e:	00cb      	lsls	r3, r1, #3
 800ada0:	4651      	mov	r1, sl
 800ada2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ada6:	4651      	mov	r1, sl
 800ada8:	00ca      	lsls	r2, r1, #3
 800adaa:	4610      	mov	r0, r2
 800adac:	4619      	mov	r1, r3
 800adae:	4603      	mov	r3, r0
 800adb0:	4642      	mov	r2, r8
 800adb2:	189b      	adds	r3, r3, r2
 800adb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adb8:	464b      	mov	r3, r9
 800adba:	460a      	mov	r2, r1
 800adbc:	eb42 0303 	adc.w	r3, r2, r3
 800adc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800adc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800adce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800add0:	f04f 0200 	mov.w	r2, #0
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800addc:	4649      	mov	r1, r9
 800adde:	008b      	lsls	r3, r1, #2
 800ade0:	4641      	mov	r1, r8
 800ade2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ade6:	4641      	mov	r1, r8
 800ade8:	008a      	lsls	r2, r1, #2
 800adea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800adee:	f7f5 ff6b 	bl	8000cc8 <__aeabi_uldivmod>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4611      	mov	r1, r2
 800adf8:	4b38      	ldr	r3, [pc, #224]	@ (800aedc <UART_SetConfig+0x4e4>)
 800adfa:	fba3 2301 	umull	r2, r3, r3, r1
 800adfe:	095b      	lsrs	r3, r3, #5
 800ae00:	2264      	movs	r2, #100	@ 0x64
 800ae02:	fb02 f303 	mul.w	r3, r2, r3
 800ae06:	1acb      	subs	r3, r1, r3
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	3332      	adds	r3, #50	@ 0x32
 800ae0c:	4a33      	ldr	r2, [pc, #204]	@ (800aedc <UART_SetConfig+0x4e4>)
 800ae0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae18:	441c      	add	r4, r3
 800ae1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae1e:	2200      	movs	r2, #0
 800ae20:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae22:	677a      	str	r2, [r7, #116]	@ 0x74
 800ae24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ae28:	4642      	mov	r2, r8
 800ae2a:	464b      	mov	r3, r9
 800ae2c:	1891      	adds	r1, r2, r2
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	415b      	adcs	r3, r3
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae38:	4641      	mov	r1, r8
 800ae3a:	1851      	adds	r1, r2, r1
 800ae3c:	6039      	str	r1, [r7, #0]
 800ae3e:	4649      	mov	r1, r9
 800ae40:	414b      	adcs	r3, r1
 800ae42:	607b      	str	r3, [r7, #4]
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	f04f 0300 	mov.w	r3, #0
 800ae4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae50:	4659      	mov	r1, fp
 800ae52:	00cb      	lsls	r3, r1, #3
 800ae54:	4651      	mov	r1, sl
 800ae56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae5a:	4651      	mov	r1, sl
 800ae5c:	00ca      	lsls	r2, r1, #3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	4619      	mov	r1, r3
 800ae62:	4603      	mov	r3, r0
 800ae64:	4642      	mov	r2, r8
 800ae66:	189b      	adds	r3, r3, r2
 800ae68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae6a:	464b      	mov	r3, r9
 800ae6c:	460a      	mov	r2, r1
 800ae6e:	eb42 0303 	adc.w	r3, r2, r3
 800ae72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae7e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ae80:	f04f 0200 	mov.w	r2, #0
 800ae84:	f04f 0300 	mov.w	r3, #0
 800ae88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	008b      	lsls	r3, r1, #2
 800ae90:	4641      	mov	r1, r8
 800ae92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae96:	4641      	mov	r1, r8
 800ae98:	008a      	lsls	r2, r1, #2
 800ae9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ae9e:	f7f5 ff13 	bl	8000cc8 <__aeabi_uldivmod>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <UART_SetConfig+0x4e4>)
 800aea8:	fba3 1302 	umull	r1, r3, r3, r2
 800aeac:	095b      	lsrs	r3, r3, #5
 800aeae:	2164      	movs	r1, #100	@ 0x64
 800aeb0:	fb01 f303 	mul.w	r3, r1, r3
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	011b      	lsls	r3, r3, #4
 800aeb8:	3332      	adds	r3, #50	@ 0x32
 800aeba:	4a08      	ldr	r2, [pc, #32]	@ (800aedc <UART_SetConfig+0x4e4>)
 800aebc:	fba2 2303 	umull	r2, r3, r2, r3
 800aec0:	095b      	lsrs	r3, r3, #5
 800aec2:	f003 020f 	and.w	r2, r3, #15
 800aec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4422      	add	r2, r4
 800aece:	609a      	str	r2, [r3, #8]
}
 800aed0:	bf00      	nop
 800aed2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aed6:	46bd      	mov	sp, r7
 800aed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aedc:	51eb851f 	.word	0x51eb851f

0800aee0 <TCS3472_SelectSensor>:
    .yellow_min_ratio_g_to_b = 150, // G must be 1.5x greater than B
    .yellow_r_g_diff_percent = 80   // R and G must be within 20% of each other
};


void TCS3472_SelectSensor(uint8_t channel) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]
    i2c_mux_select(&mux, channel);
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	4619      	mov	r1, r3
 800aeee:	4805      	ldr	r0, [pc, #20]	@ (800af04 <TCS3472_SelectSensor+0x24>)
 800aef0:	f7f9 fdd6 	bl	8004aa0 <i2c_mux_select>
    HAL_Delay(2); // Small delay for mux to stabilize
 800aef4:	2002      	movs	r0, #2
 800aef6:	f7fa fc37 	bl	8005768 <HAL_Delay>
}
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	20000054 	.word	0x20000054

0800af08 <TCS3472_GetRGBC>:
    TCS3472_Write(TCS3472_REG_CONTROL, gain);
}

/* Get RGB and Clear values */
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
    /* Wait for data to be valid */
    while (!(TCS3472_Read8(TCS3472_REG_STATUS) & 0x01));
 800af16:	bf00      	nop
 800af18:	2013      	movs	r0, #19
 800af1a:	f000 f893 	bl	800b044 <TCS3472_Read8>
 800af1e:	4603      	mov	r3, r0
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	d0f7      	beq.n	800af18 <TCS3472_GetRGBC+0x10>

    /* Read all values */
    *c = TCS3472_Read16(TCS3472_REG_CDATAL);
 800af28:	2014      	movs	r0, #20
 800af2a:	f000 f8af 	bl	800b08c <TCS3472_Read16>
 800af2e:	4603      	mov	r3, r0
 800af30:	461a      	mov	r2, r3
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	801a      	strh	r2, [r3, #0]
    *r = TCS3472_Read16(TCS3472_REG_RDATAL);
 800af36:	2016      	movs	r0, #22
 800af38:	f000 f8a8 	bl	800b08c <TCS3472_Read16>
 800af3c:	4603      	mov	r3, r0
 800af3e:	461a      	mov	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	801a      	strh	r2, [r3, #0]
    *g = TCS3472_Read16(TCS3472_REG_GDATAL);
 800af44:	2018      	movs	r0, #24
 800af46:	f000 f8a1 	bl	800b08c <TCS3472_Read16>
 800af4a:	4603      	mov	r3, r0
 800af4c:	461a      	mov	r2, r3
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	801a      	strh	r2, [r3, #0]
    *b = TCS3472_Read16(TCS3472_REG_BDATAL);
 800af52:	201a      	movs	r0, #26
 800af54:	f000 f89a 	bl	800b08c <TCS3472_Read16>
 800af58:	4603      	mov	r3, r0
 800af5a:	461a      	mov	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	801a      	strh	r2, [r3, #0]
}
 800af60:	bf00      	nop
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <TCS3472_DetectLineColor>:

/* Detect line color based on RGB values */
Color TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
 800af68:	b490      	push	{r4, r7}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	4611      	mov	r1, r2
 800af74:	461a      	mov	r2, r3
 800af76:	4623      	mov	r3, r4
 800af78:	80fb      	strh	r3, [r7, #6]
 800af7a:	4603      	mov	r3, r0
 800af7c:	80bb      	strh	r3, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	807b      	strh	r3, [r7, #2]
 800af82:	4613      	mov	r3, r2
 800af84:	803b      	strh	r3, [r7, #0]
    /* If overall brightness is very low, it's black (background) */
    if (c < color_config.black_threshold) {
 800af86:	4b2e      	ldr	r3, [pc, #184]	@ (800b040 <TCS3472_DetectLineColor+0xd8>)
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	883a      	ldrh	r2, [r7, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d201      	bcs.n	800af94 <TCS3472_DetectLineColor+0x2c>
        return BLACK;
 800af90:	2305      	movs	r3, #5
 800af92:	e04f      	b.n	800b034 <TCS3472_DetectLineColor+0xcc>
    }

    /* If overall brightness is high, check if it's white or green */
    if (c > color_config.white_threshold) {
 800af94:	4b2a      	ldr	r3, [pc, #168]	@ (800b040 <TCS3472_DetectLineColor+0xd8>)
 800af96:	885b      	ldrh	r3, [r3, #2]
 800af98:	883a      	ldrh	r2, [r7, #0]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d949      	bls.n	800b032 <TCS3472_DetectLineColor+0xca>
        /* Calculate green-to-red ratio (multiplied by 100 to avoid floating point) */
        uint16_t g_to_r_ratio = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	81fb      	strh	r3, [r7, #14]

        /* Avoid division by zero */
        if (r > 10) {
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	2b0a      	cmp	r3, #10
 800afa6:	d907      	bls.n	800afb8 <TCS3472_DetectLineColor+0x50>
            g_to_r_ratio = (g * 100) / r;
 800afa8:	88bb      	ldrh	r3, [r7, #4]
 800afaa:	2264      	movs	r2, #100	@ 0x64
 800afac:	fb03 f202 	mul.w	r2, r3, r2
 800afb0:	88fb      	ldrh	r3, [r7, #6]
 800afb2:	fb92 f3f3 	sdiv	r3, r2, r3
 800afb6:	81fb      	strh	r3, [r7, #14]
        }

        /* If green is significantly higher than red, it's green */
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 800afb8:	4b21      	ldr	r3, [pc, #132]	@ (800b040 <TCS3472_DetectLineColor+0xd8>)
 800afba:	889b      	ldrh	r3, [r3, #4]
 800afbc:	89fa      	ldrh	r2, [r7, #14]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d30e      	bcc.n	800afe0 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 800afc2:	4b1f      	ldr	r3, [pc, #124]	@ (800b040 <TCS3472_DetectLineColor+0xd8>)
 800afc4:	88db      	ldrh	r3, [r3, #6]
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 800afc6:	89fa      	ldrh	r2, [r7, #14]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d809      	bhi.n	800afe0 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 800afcc:	88ba      	ldrh	r2, [r7, #4]
 800afce:	88fb      	ldrh	r3, [r7, #6]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d905      	bls.n	800afe0 <TCS3472_DetectLineColor+0x78>
            g > r && g > b) {
 800afd4:	88ba      	ldrh	r2, [r7, #4]
 800afd6:	887b      	ldrh	r3, [r7, #2]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d901      	bls.n	800afe0 <TCS3472_DetectLineColor+0x78>
            return GREEN;
 800afdc:	2301      	movs	r3, #1
 800afde:	e029      	b.n	800b034 <TCS3472_DetectLineColor+0xcc>
        }

        /* If all colors are relatively balanced and bright, it's white */
        if (r > 500 && g > 500 && b > 500 &&
 800afe0:	88fb      	ldrh	r3, [r7, #6]
 800afe2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800afe6:	d924      	bls.n	800b032 <TCS3472_DetectLineColor+0xca>
 800afe8:	88bb      	ldrh	r3, [r7, #4]
 800afea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800afee:	d920      	bls.n	800b032 <TCS3472_DetectLineColor+0xca>
 800aff0:	887b      	ldrh	r3, [r7, #2]
 800aff2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800aff6:	d91c      	bls.n	800b032 <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	2264      	movs	r2, #100	@ 0x64
 800affc:	fb03 f202 	mul.w	r2, r3, r2
 800b000:	883b      	ldrh	r3, [r7, #0]
 800b002:	fb92 f3f3 	sdiv	r3, r2, r3
        if (r > 500 && g > 500 && b > 500 &&
 800b006:	2b14      	cmp	r3, #20
 800b008:	dd13      	ble.n	800b032 <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 800b00a:	88bb      	ldrh	r3, [r7, #4]
 800b00c:	2264      	movs	r2, #100	@ 0x64
 800b00e:	fb03 f202 	mul.w	r2, r3, r2
 800b012:	883b      	ldrh	r3, [r7, #0]
 800b014:	fb92 f3f3 	sdiv	r3, r2, r3
 800b018:	2b14      	cmp	r3, #20
 800b01a:	dd0a      	ble.n	800b032 <TCS3472_DetectLineColor+0xca>
 800b01c:	887b      	ldrh	r3, [r7, #2]
 800b01e:	2264      	movs	r2, #100	@ 0x64
 800b020:	fb03 f202 	mul.w	r2, r3, r2
 800b024:	883b      	ldrh	r3, [r7, #0]
 800b026:	fb92 f3f3 	sdiv	r3, r2, r3
 800b02a:	2b14      	cmp	r3, #20
 800b02c:	dd01      	ble.n	800b032 <TCS3472_DetectLineColor+0xca>
            return WHITE;
 800b02e:	2300      	movs	r3, #0
 800b030:	e000      	b.n	800b034 <TCS3472_DetectLineColor+0xcc>
        }
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bc90      	pop	{r4, r7}
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	2000009c 	.word	0x2000009c

0800b044 <TCS3472_Read8>:
    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, data, 2, 100);
}

/* Read 8-bit value from TCS3472 register */
uint8_t TCS3472_Read8(uint8_t reg)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af02      	add	r7, sp, #8
 800b04a:	4603      	mov	r3, r0
 800b04c:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b054:	b2db      	uxtb	r3, r3
 800b056:	73fb      	strb	r3, [r7, #15]
    uint8_t value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 800b058:	f107 020f 	add.w	r2, r7, #15
 800b05c:	2364      	movs	r3, #100	@ 0x64
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	2301      	movs	r3, #1
 800b062:	2152      	movs	r1, #82	@ 0x52
 800b064:	4808      	ldr	r0, [pc, #32]	@ (800b088 <TCS3472_Read8+0x44>)
 800b066:	f7fb ff4b 	bl	8006f00 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, &value, 1, 100);
 800b06a:	f107 020e 	add.w	r2, r7, #14
 800b06e:	2364      	movs	r3, #100	@ 0x64
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	2301      	movs	r3, #1
 800b074:	2152      	movs	r1, #82	@ 0x52
 800b076:	4804      	ldr	r0, [pc, #16]	@ (800b088 <TCS3472_Read8+0x44>)
 800b078:	f7fc f840 	bl	80070fc <HAL_I2C_Master_Receive>

    return value;
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20000330 	.word	0x20000330

0800b08c <TCS3472_Read16>:

/* Read 16-bit value from TCS3472 register */
uint16_t TCS3472_Read16(uint8_t reg)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af02      	add	r7, sp, #8
 800b092:	4603      	mov	r3, r0
 800b094:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 800b0a0:	f107 020f 	add.w	r2, r7, #15
 800b0a4:	2364      	movs	r3, #100	@ 0x64
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	2152      	movs	r1, #82	@ 0x52
 800b0ac:	480c      	ldr	r0, [pc, #48]	@ (800b0e0 <TCS3472_Read16+0x54>)
 800b0ae:	f7fb ff27 	bl	8006f00 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, data, 2, 100);
 800b0b2:	f107 020c 	add.w	r2, r7, #12
 800b0b6:	2364      	movs	r3, #100	@ 0x64
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	2152      	movs	r1, #82	@ 0x52
 800b0be:	4808      	ldr	r0, [pc, #32]	@ (800b0e0 <TCS3472_Read16+0x54>)
 800b0c0:	f7fc f81c 	bl	80070fc <HAL_I2C_Master_Receive>

    return (data[1] << 8) | data[0];
 800b0c4:	7b7b      	ldrb	r3, [r7, #13]
 800b0c6:	b21b      	sxth	r3, r3
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	b21a      	sxth	r2, r3
 800b0cc:	7b3b      	ldrb	r3, [r7, #12]
 800b0ce:	b21b      	sxth	r3, r3
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	b21b      	sxth	r3, r3
 800b0d4:	b29b      	uxth	r3, r3
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20000330 	.word	0x20000330

0800b0e4 <__cvt>:
 800b0e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e8:	ec57 6b10 	vmov	r6, r7, d0
 800b0ec:	2f00      	cmp	r7, #0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	463b      	mov	r3, r7
 800b0f4:	bfbb      	ittet	lt
 800b0f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b0fa:	461f      	movlt	r7, r3
 800b0fc:	2300      	movge	r3, #0
 800b0fe:	232d      	movlt	r3, #45	@ 0x2d
 800b100:	700b      	strb	r3, [r1, #0]
 800b102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b104:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b108:	4691      	mov	r9, r2
 800b10a:	f023 0820 	bic.w	r8, r3, #32
 800b10e:	bfbc      	itt	lt
 800b110:	4632      	movlt	r2, r6
 800b112:	4616      	movlt	r6, r2
 800b114:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b118:	d005      	beq.n	800b126 <__cvt+0x42>
 800b11a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b11e:	d100      	bne.n	800b122 <__cvt+0x3e>
 800b120:	3401      	adds	r4, #1
 800b122:	2102      	movs	r1, #2
 800b124:	e000      	b.n	800b128 <__cvt+0x44>
 800b126:	2103      	movs	r1, #3
 800b128:	ab03      	add	r3, sp, #12
 800b12a:	9301      	str	r3, [sp, #4]
 800b12c:	ab02      	add	r3, sp, #8
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	ec47 6b10 	vmov	d0, r6, r7
 800b134:	4653      	mov	r3, sl
 800b136:	4622      	mov	r2, r4
 800b138:	f000 feb2 	bl	800bea0 <_dtoa_r>
 800b13c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b140:	4605      	mov	r5, r0
 800b142:	d119      	bne.n	800b178 <__cvt+0x94>
 800b144:	f019 0f01 	tst.w	r9, #1
 800b148:	d00e      	beq.n	800b168 <__cvt+0x84>
 800b14a:	eb00 0904 	add.w	r9, r0, r4
 800b14e:	2200      	movs	r2, #0
 800b150:	2300      	movs	r3, #0
 800b152:	4630      	mov	r0, r6
 800b154:	4639      	mov	r1, r7
 800b156:	f7f5 fcd7 	bl	8000b08 <__aeabi_dcmpeq>
 800b15a:	b108      	cbz	r0, 800b160 <__cvt+0x7c>
 800b15c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b160:	2230      	movs	r2, #48	@ 0x30
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	454b      	cmp	r3, r9
 800b166:	d31e      	bcc.n	800b1a6 <__cvt+0xc2>
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b16c:	1b5b      	subs	r3, r3, r5
 800b16e:	4628      	mov	r0, r5
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	b004      	add	sp, #16
 800b174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b17c:	eb00 0904 	add.w	r9, r0, r4
 800b180:	d1e5      	bne.n	800b14e <__cvt+0x6a>
 800b182:	7803      	ldrb	r3, [r0, #0]
 800b184:	2b30      	cmp	r3, #48	@ 0x30
 800b186:	d10a      	bne.n	800b19e <__cvt+0xba>
 800b188:	2200      	movs	r2, #0
 800b18a:	2300      	movs	r3, #0
 800b18c:	4630      	mov	r0, r6
 800b18e:	4639      	mov	r1, r7
 800b190:	f7f5 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 800b194:	b918      	cbnz	r0, 800b19e <__cvt+0xba>
 800b196:	f1c4 0401 	rsb	r4, r4, #1
 800b19a:	f8ca 4000 	str.w	r4, [sl]
 800b19e:	f8da 3000 	ldr.w	r3, [sl]
 800b1a2:	4499      	add	r9, r3
 800b1a4:	e7d3      	b.n	800b14e <__cvt+0x6a>
 800b1a6:	1c59      	adds	r1, r3, #1
 800b1a8:	9103      	str	r1, [sp, #12]
 800b1aa:	701a      	strb	r2, [r3, #0]
 800b1ac:	e7d9      	b.n	800b162 <__cvt+0x7e>

0800b1ae <__exponent>:
 800b1ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	bfba      	itte	lt
 800b1b4:	4249      	neglt	r1, r1
 800b1b6:	232d      	movlt	r3, #45	@ 0x2d
 800b1b8:	232b      	movge	r3, #43	@ 0x2b
 800b1ba:	2909      	cmp	r1, #9
 800b1bc:	7002      	strb	r2, [r0, #0]
 800b1be:	7043      	strb	r3, [r0, #1]
 800b1c0:	dd29      	ble.n	800b216 <__exponent+0x68>
 800b1c2:	f10d 0307 	add.w	r3, sp, #7
 800b1c6:	461d      	mov	r5, r3
 800b1c8:	270a      	movs	r7, #10
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b1d0:	fb07 1416 	mls	r4, r7, r6, r1
 800b1d4:	3430      	adds	r4, #48	@ 0x30
 800b1d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b1da:	460c      	mov	r4, r1
 800b1dc:	2c63      	cmp	r4, #99	@ 0x63
 800b1de:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	dcf1      	bgt.n	800b1ca <__exponent+0x1c>
 800b1e6:	3130      	adds	r1, #48	@ 0x30
 800b1e8:	1e94      	subs	r4, r2, #2
 800b1ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b1ee:	1c41      	adds	r1, r0, #1
 800b1f0:	4623      	mov	r3, r4
 800b1f2:	42ab      	cmp	r3, r5
 800b1f4:	d30a      	bcc.n	800b20c <__exponent+0x5e>
 800b1f6:	f10d 0309 	add.w	r3, sp, #9
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	42ac      	cmp	r4, r5
 800b1fe:	bf88      	it	hi
 800b200:	2300      	movhi	r3, #0
 800b202:	3302      	adds	r3, #2
 800b204:	4403      	add	r3, r0
 800b206:	1a18      	subs	r0, r3, r0
 800b208:	b003      	add	sp, #12
 800b20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b210:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b214:	e7ed      	b.n	800b1f2 <__exponent+0x44>
 800b216:	2330      	movs	r3, #48	@ 0x30
 800b218:	3130      	adds	r1, #48	@ 0x30
 800b21a:	7083      	strb	r3, [r0, #2]
 800b21c:	70c1      	strb	r1, [r0, #3]
 800b21e:	1d03      	adds	r3, r0, #4
 800b220:	e7f1      	b.n	800b206 <__exponent+0x58>
	...

0800b224 <_printf_float>:
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	b08d      	sub	sp, #52	@ 0x34
 800b22a:	460c      	mov	r4, r1
 800b22c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b230:	4616      	mov	r6, r2
 800b232:	461f      	mov	r7, r3
 800b234:	4605      	mov	r5, r0
 800b236:	f000 fd23 	bl	800bc80 <_localeconv_r>
 800b23a:	6803      	ldr	r3, [r0, #0]
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7f5 f836 	bl	80002b0 <strlen>
 800b244:	2300      	movs	r3, #0
 800b246:	930a      	str	r3, [sp, #40]	@ 0x28
 800b248:	f8d8 3000 	ldr.w	r3, [r8]
 800b24c:	9005      	str	r0, [sp, #20]
 800b24e:	3307      	adds	r3, #7
 800b250:	f023 0307 	bic.w	r3, r3, #7
 800b254:	f103 0208 	add.w	r2, r3, #8
 800b258:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b25c:	f8d4 b000 	ldr.w	fp, [r4]
 800b260:	f8c8 2000 	str.w	r2, [r8]
 800b264:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b268:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b26c:	9307      	str	r3, [sp, #28]
 800b26e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b272:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b27a:	4b9c      	ldr	r3, [pc, #624]	@ (800b4ec <_printf_float+0x2c8>)
 800b27c:	f04f 32ff 	mov.w	r2, #4294967295
 800b280:	f7f5 fc74 	bl	8000b6c <__aeabi_dcmpun>
 800b284:	bb70      	cbnz	r0, 800b2e4 <_printf_float+0xc0>
 800b286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b28a:	4b98      	ldr	r3, [pc, #608]	@ (800b4ec <_printf_float+0x2c8>)
 800b28c:	f04f 32ff 	mov.w	r2, #4294967295
 800b290:	f7f5 fc4e 	bl	8000b30 <__aeabi_dcmple>
 800b294:	bb30      	cbnz	r0, 800b2e4 <_printf_float+0xc0>
 800b296:	2200      	movs	r2, #0
 800b298:	2300      	movs	r3, #0
 800b29a:	4640      	mov	r0, r8
 800b29c:	4649      	mov	r1, r9
 800b29e:	f7f5 fc3d 	bl	8000b1c <__aeabi_dcmplt>
 800b2a2:	b110      	cbz	r0, 800b2aa <_printf_float+0x86>
 800b2a4:	232d      	movs	r3, #45	@ 0x2d
 800b2a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2aa:	4a91      	ldr	r2, [pc, #580]	@ (800b4f0 <_printf_float+0x2cc>)
 800b2ac:	4b91      	ldr	r3, [pc, #580]	@ (800b4f4 <_printf_float+0x2d0>)
 800b2ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2b2:	bf8c      	ite	hi
 800b2b4:	4690      	movhi	r8, r2
 800b2b6:	4698      	movls	r8, r3
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	6123      	str	r3, [r4, #16]
 800b2bc:	f02b 0304 	bic.w	r3, fp, #4
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	f04f 0900 	mov.w	r9, #0
 800b2c6:	9700      	str	r7, [sp, #0]
 800b2c8:	4633      	mov	r3, r6
 800b2ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f000 f9d2 	bl	800b678 <_printf_common>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f040 808d 	bne.w	800b3f4 <_printf_float+0x1d0>
 800b2da:	f04f 30ff 	mov.w	r0, #4294967295
 800b2de:	b00d      	add	sp, #52	@ 0x34
 800b2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	f7f5 fc3e 	bl	8000b6c <__aeabi_dcmpun>
 800b2f0:	b140      	cbz	r0, 800b304 <_printf_float+0xe0>
 800b2f2:	464b      	mov	r3, r9
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	bfbc      	itt	lt
 800b2f8:	232d      	movlt	r3, #45	@ 0x2d
 800b2fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b2fe:	4a7e      	ldr	r2, [pc, #504]	@ (800b4f8 <_printf_float+0x2d4>)
 800b300:	4b7e      	ldr	r3, [pc, #504]	@ (800b4fc <_printf_float+0x2d8>)
 800b302:	e7d4      	b.n	800b2ae <_printf_float+0x8a>
 800b304:	6863      	ldr	r3, [r4, #4]
 800b306:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b30a:	9206      	str	r2, [sp, #24]
 800b30c:	1c5a      	adds	r2, r3, #1
 800b30e:	d13b      	bne.n	800b388 <_printf_float+0x164>
 800b310:	2306      	movs	r3, #6
 800b312:	6063      	str	r3, [r4, #4]
 800b314:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b318:	2300      	movs	r3, #0
 800b31a:	6022      	str	r2, [r4, #0]
 800b31c:	9303      	str	r3, [sp, #12]
 800b31e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b320:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b324:	ab09      	add	r3, sp, #36	@ 0x24
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	6861      	ldr	r1, [r4, #4]
 800b32a:	ec49 8b10 	vmov	d0, r8, r9
 800b32e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b332:	4628      	mov	r0, r5
 800b334:	f7ff fed6 	bl	800b0e4 <__cvt>
 800b338:	9b06      	ldr	r3, [sp, #24]
 800b33a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b33c:	2b47      	cmp	r3, #71	@ 0x47
 800b33e:	4680      	mov	r8, r0
 800b340:	d129      	bne.n	800b396 <_printf_float+0x172>
 800b342:	1cc8      	adds	r0, r1, #3
 800b344:	db02      	blt.n	800b34c <_printf_float+0x128>
 800b346:	6863      	ldr	r3, [r4, #4]
 800b348:	4299      	cmp	r1, r3
 800b34a:	dd41      	ble.n	800b3d0 <_printf_float+0x1ac>
 800b34c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b350:	fa5f fa8a 	uxtb.w	sl, sl
 800b354:	3901      	subs	r1, #1
 800b356:	4652      	mov	r2, sl
 800b358:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b35c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b35e:	f7ff ff26 	bl	800b1ae <__exponent>
 800b362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b364:	1813      	adds	r3, r2, r0
 800b366:	2a01      	cmp	r2, #1
 800b368:	4681      	mov	r9, r0
 800b36a:	6123      	str	r3, [r4, #16]
 800b36c:	dc02      	bgt.n	800b374 <_printf_float+0x150>
 800b36e:	6822      	ldr	r2, [r4, #0]
 800b370:	07d2      	lsls	r2, r2, #31
 800b372:	d501      	bpl.n	800b378 <_printf_float+0x154>
 800b374:	3301      	adds	r3, #1
 800b376:	6123      	str	r3, [r4, #16]
 800b378:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0a2      	beq.n	800b2c6 <_printf_float+0xa2>
 800b380:	232d      	movs	r3, #45	@ 0x2d
 800b382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b386:	e79e      	b.n	800b2c6 <_printf_float+0xa2>
 800b388:	9a06      	ldr	r2, [sp, #24]
 800b38a:	2a47      	cmp	r2, #71	@ 0x47
 800b38c:	d1c2      	bne.n	800b314 <_printf_float+0xf0>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1c0      	bne.n	800b314 <_printf_float+0xf0>
 800b392:	2301      	movs	r3, #1
 800b394:	e7bd      	b.n	800b312 <_printf_float+0xee>
 800b396:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b39a:	d9db      	bls.n	800b354 <_printf_float+0x130>
 800b39c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3a0:	d118      	bne.n	800b3d4 <_printf_float+0x1b0>
 800b3a2:	2900      	cmp	r1, #0
 800b3a4:	6863      	ldr	r3, [r4, #4]
 800b3a6:	dd0b      	ble.n	800b3c0 <_printf_float+0x19c>
 800b3a8:	6121      	str	r1, [r4, #16]
 800b3aa:	b913      	cbnz	r3, 800b3b2 <_printf_float+0x18e>
 800b3ac:	6822      	ldr	r2, [r4, #0]
 800b3ae:	07d0      	lsls	r0, r2, #31
 800b3b0:	d502      	bpl.n	800b3b8 <_printf_float+0x194>
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	440b      	add	r3, r1
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3ba:	f04f 0900 	mov.w	r9, #0
 800b3be:	e7db      	b.n	800b378 <_printf_float+0x154>
 800b3c0:	b913      	cbnz	r3, 800b3c8 <_printf_float+0x1a4>
 800b3c2:	6822      	ldr	r2, [r4, #0]
 800b3c4:	07d2      	lsls	r2, r2, #31
 800b3c6:	d501      	bpl.n	800b3cc <_printf_float+0x1a8>
 800b3c8:	3302      	adds	r3, #2
 800b3ca:	e7f4      	b.n	800b3b6 <_printf_float+0x192>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e7f2      	b.n	800b3b6 <_printf_float+0x192>
 800b3d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d6:	4299      	cmp	r1, r3
 800b3d8:	db05      	blt.n	800b3e6 <_printf_float+0x1c2>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	6121      	str	r1, [r4, #16]
 800b3de:	07d8      	lsls	r0, r3, #31
 800b3e0:	d5ea      	bpl.n	800b3b8 <_printf_float+0x194>
 800b3e2:	1c4b      	adds	r3, r1, #1
 800b3e4:	e7e7      	b.n	800b3b6 <_printf_float+0x192>
 800b3e6:	2900      	cmp	r1, #0
 800b3e8:	bfd4      	ite	le
 800b3ea:	f1c1 0202 	rsble	r2, r1, #2
 800b3ee:	2201      	movgt	r2, #1
 800b3f0:	4413      	add	r3, r2
 800b3f2:	e7e0      	b.n	800b3b6 <_printf_float+0x192>
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	055a      	lsls	r2, r3, #21
 800b3f8:	d407      	bmi.n	800b40a <_printf_float+0x1e6>
 800b3fa:	6923      	ldr	r3, [r4, #16]
 800b3fc:	4642      	mov	r2, r8
 800b3fe:	4631      	mov	r1, r6
 800b400:	4628      	mov	r0, r5
 800b402:	47b8      	blx	r7
 800b404:	3001      	adds	r0, #1
 800b406:	d12b      	bne.n	800b460 <_printf_float+0x23c>
 800b408:	e767      	b.n	800b2da <_printf_float+0xb6>
 800b40a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b40e:	f240 80dd 	bls.w	800b5cc <_printf_float+0x3a8>
 800b412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b416:	2200      	movs	r2, #0
 800b418:	2300      	movs	r3, #0
 800b41a:	f7f5 fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d033      	beq.n	800b48a <_printf_float+0x266>
 800b422:	4a37      	ldr	r2, [pc, #220]	@ (800b500 <_printf_float+0x2dc>)
 800b424:	2301      	movs	r3, #1
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	f43f af54 	beq.w	800b2da <_printf_float+0xb6>
 800b432:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b436:	4543      	cmp	r3, r8
 800b438:	db02      	blt.n	800b440 <_printf_float+0x21c>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	07d8      	lsls	r0, r3, #31
 800b43e:	d50f      	bpl.n	800b460 <_printf_float+0x23c>
 800b440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b444:	4631      	mov	r1, r6
 800b446:	4628      	mov	r0, r5
 800b448:	47b8      	blx	r7
 800b44a:	3001      	adds	r0, #1
 800b44c:	f43f af45 	beq.w	800b2da <_printf_float+0xb6>
 800b450:	f04f 0900 	mov.w	r9, #0
 800b454:	f108 38ff 	add.w	r8, r8, #4294967295
 800b458:	f104 0a1a 	add.w	sl, r4, #26
 800b45c:	45c8      	cmp	r8, r9
 800b45e:	dc09      	bgt.n	800b474 <_printf_float+0x250>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	079b      	lsls	r3, r3, #30
 800b464:	f100 8103 	bmi.w	800b66e <_printf_float+0x44a>
 800b468:	68e0      	ldr	r0, [r4, #12]
 800b46a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b46c:	4298      	cmp	r0, r3
 800b46e:	bfb8      	it	lt
 800b470:	4618      	movlt	r0, r3
 800b472:	e734      	b.n	800b2de <_printf_float+0xba>
 800b474:	2301      	movs	r3, #1
 800b476:	4652      	mov	r2, sl
 800b478:	4631      	mov	r1, r6
 800b47a:	4628      	mov	r0, r5
 800b47c:	47b8      	blx	r7
 800b47e:	3001      	adds	r0, #1
 800b480:	f43f af2b 	beq.w	800b2da <_printf_float+0xb6>
 800b484:	f109 0901 	add.w	r9, r9, #1
 800b488:	e7e8      	b.n	800b45c <_printf_float+0x238>
 800b48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dc39      	bgt.n	800b504 <_printf_float+0x2e0>
 800b490:	4a1b      	ldr	r2, [pc, #108]	@ (800b500 <_printf_float+0x2dc>)
 800b492:	2301      	movs	r3, #1
 800b494:	4631      	mov	r1, r6
 800b496:	4628      	mov	r0, r5
 800b498:	47b8      	blx	r7
 800b49a:	3001      	adds	r0, #1
 800b49c:	f43f af1d 	beq.w	800b2da <_printf_float+0xb6>
 800b4a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4a4:	ea59 0303 	orrs.w	r3, r9, r3
 800b4a8:	d102      	bne.n	800b4b0 <_printf_float+0x28c>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	07d9      	lsls	r1, r3, #31
 800b4ae:	d5d7      	bpl.n	800b460 <_printf_float+0x23c>
 800b4b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f43f af0d 	beq.w	800b2da <_printf_float+0xb6>
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f104 0b1a 	add.w	fp, r4, #26
 800b4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ca:	425b      	negs	r3, r3
 800b4cc:	4553      	cmp	r3, sl
 800b4ce:	dc01      	bgt.n	800b4d4 <_printf_float+0x2b0>
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	e793      	b.n	800b3fc <_printf_float+0x1d8>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	465a      	mov	r2, fp
 800b4d8:	4631      	mov	r1, r6
 800b4da:	4628      	mov	r0, r5
 800b4dc:	47b8      	blx	r7
 800b4de:	3001      	adds	r0, #1
 800b4e0:	f43f aefb 	beq.w	800b2da <_printf_float+0xb6>
 800b4e4:	f10a 0a01 	add.w	sl, sl, #1
 800b4e8:	e7ee      	b.n	800b4c8 <_printf_float+0x2a4>
 800b4ea:	bf00      	nop
 800b4ec:	7fefffff 	.word	0x7fefffff
 800b4f0:	08010cd8 	.word	0x08010cd8
 800b4f4:	08010cd4 	.word	0x08010cd4
 800b4f8:	08010ce0 	.word	0x08010ce0
 800b4fc:	08010cdc 	.word	0x08010cdc
 800b500:	08010ce4 	.word	0x08010ce4
 800b504:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b506:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b50a:	4553      	cmp	r3, sl
 800b50c:	bfa8      	it	ge
 800b50e:	4653      	movge	r3, sl
 800b510:	2b00      	cmp	r3, #0
 800b512:	4699      	mov	r9, r3
 800b514:	dc36      	bgt.n	800b584 <_printf_float+0x360>
 800b516:	f04f 0b00 	mov.w	fp, #0
 800b51a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b51e:	f104 021a 	add.w	r2, r4, #26
 800b522:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b524:	9306      	str	r3, [sp, #24]
 800b526:	eba3 0309 	sub.w	r3, r3, r9
 800b52a:	455b      	cmp	r3, fp
 800b52c:	dc31      	bgt.n	800b592 <_printf_float+0x36e>
 800b52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b530:	459a      	cmp	sl, r3
 800b532:	dc3a      	bgt.n	800b5aa <_printf_float+0x386>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	07da      	lsls	r2, r3, #31
 800b538:	d437      	bmi.n	800b5aa <_printf_float+0x386>
 800b53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53c:	ebaa 0903 	sub.w	r9, sl, r3
 800b540:	9b06      	ldr	r3, [sp, #24]
 800b542:	ebaa 0303 	sub.w	r3, sl, r3
 800b546:	4599      	cmp	r9, r3
 800b548:	bfa8      	it	ge
 800b54a:	4699      	movge	r9, r3
 800b54c:	f1b9 0f00 	cmp.w	r9, #0
 800b550:	dc33      	bgt.n	800b5ba <_printf_float+0x396>
 800b552:	f04f 0800 	mov.w	r8, #0
 800b556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b55a:	f104 0b1a 	add.w	fp, r4, #26
 800b55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b560:	ebaa 0303 	sub.w	r3, sl, r3
 800b564:	eba3 0309 	sub.w	r3, r3, r9
 800b568:	4543      	cmp	r3, r8
 800b56a:	f77f af79 	ble.w	800b460 <_printf_float+0x23c>
 800b56e:	2301      	movs	r3, #1
 800b570:	465a      	mov	r2, fp
 800b572:	4631      	mov	r1, r6
 800b574:	4628      	mov	r0, r5
 800b576:	47b8      	blx	r7
 800b578:	3001      	adds	r0, #1
 800b57a:	f43f aeae 	beq.w	800b2da <_printf_float+0xb6>
 800b57e:	f108 0801 	add.w	r8, r8, #1
 800b582:	e7ec      	b.n	800b55e <_printf_float+0x33a>
 800b584:	4642      	mov	r2, r8
 800b586:	4631      	mov	r1, r6
 800b588:	4628      	mov	r0, r5
 800b58a:	47b8      	blx	r7
 800b58c:	3001      	adds	r0, #1
 800b58e:	d1c2      	bne.n	800b516 <_printf_float+0x2f2>
 800b590:	e6a3      	b.n	800b2da <_printf_float+0xb6>
 800b592:	2301      	movs	r3, #1
 800b594:	4631      	mov	r1, r6
 800b596:	4628      	mov	r0, r5
 800b598:	9206      	str	r2, [sp, #24]
 800b59a:	47b8      	blx	r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	f43f ae9c 	beq.w	800b2da <_printf_float+0xb6>
 800b5a2:	9a06      	ldr	r2, [sp, #24]
 800b5a4:	f10b 0b01 	add.w	fp, fp, #1
 800b5a8:	e7bb      	b.n	800b522 <_printf_float+0x2fe>
 800b5aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d1c0      	bne.n	800b53a <_printf_float+0x316>
 800b5b8:	e68f      	b.n	800b2da <_printf_float+0xb6>
 800b5ba:	9a06      	ldr	r2, [sp, #24]
 800b5bc:	464b      	mov	r3, r9
 800b5be:	4442      	add	r2, r8
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	47b8      	blx	r7
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	d1c3      	bne.n	800b552 <_printf_float+0x32e>
 800b5ca:	e686      	b.n	800b2da <_printf_float+0xb6>
 800b5cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5d0:	f1ba 0f01 	cmp.w	sl, #1
 800b5d4:	dc01      	bgt.n	800b5da <_printf_float+0x3b6>
 800b5d6:	07db      	lsls	r3, r3, #31
 800b5d8:	d536      	bpl.n	800b648 <_printf_float+0x424>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	4642      	mov	r2, r8
 800b5de:	4631      	mov	r1, r6
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	47b8      	blx	r7
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	f43f ae78 	beq.w	800b2da <_printf_float+0xb6>
 800b5ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b8      	blx	r7
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	f43f ae70 	beq.w	800b2da <_printf_float+0xb6>
 800b5fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5fe:	2200      	movs	r2, #0
 800b600:	2300      	movs	r3, #0
 800b602:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b606:	f7f5 fa7f 	bl	8000b08 <__aeabi_dcmpeq>
 800b60a:	b9c0      	cbnz	r0, 800b63e <_printf_float+0x41a>
 800b60c:	4653      	mov	r3, sl
 800b60e:	f108 0201 	add.w	r2, r8, #1
 800b612:	4631      	mov	r1, r6
 800b614:	4628      	mov	r0, r5
 800b616:	47b8      	blx	r7
 800b618:	3001      	adds	r0, #1
 800b61a:	d10c      	bne.n	800b636 <_printf_float+0x412>
 800b61c:	e65d      	b.n	800b2da <_printf_float+0xb6>
 800b61e:	2301      	movs	r3, #1
 800b620:	465a      	mov	r2, fp
 800b622:	4631      	mov	r1, r6
 800b624:	4628      	mov	r0, r5
 800b626:	47b8      	blx	r7
 800b628:	3001      	adds	r0, #1
 800b62a:	f43f ae56 	beq.w	800b2da <_printf_float+0xb6>
 800b62e:	f108 0801 	add.w	r8, r8, #1
 800b632:	45d0      	cmp	r8, sl
 800b634:	dbf3      	blt.n	800b61e <_printf_float+0x3fa>
 800b636:	464b      	mov	r3, r9
 800b638:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b63c:	e6df      	b.n	800b3fe <_printf_float+0x1da>
 800b63e:	f04f 0800 	mov.w	r8, #0
 800b642:	f104 0b1a 	add.w	fp, r4, #26
 800b646:	e7f4      	b.n	800b632 <_printf_float+0x40e>
 800b648:	2301      	movs	r3, #1
 800b64a:	4642      	mov	r2, r8
 800b64c:	e7e1      	b.n	800b612 <_printf_float+0x3ee>
 800b64e:	2301      	movs	r3, #1
 800b650:	464a      	mov	r2, r9
 800b652:	4631      	mov	r1, r6
 800b654:	4628      	mov	r0, r5
 800b656:	47b8      	blx	r7
 800b658:	3001      	adds	r0, #1
 800b65a:	f43f ae3e 	beq.w	800b2da <_printf_float+0xb6>
 800b65e:	f108 0801 	add.w	r8, r8, #1
 800b662:	68e3      	ldr	r3, [r4, #12]
 800b664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b666:	1a5b      	subs	r3, r3, r1
 800b668:	4543      	cmp	r3, r8
 800b66a:	dcf0      	bgt.n	800b64e <_printf_float+0x42a>
 800b66c:	e6fc      	b.n	800b468 <_printf_float+0x244>
 800b66e:	f04f 0800 	mov.w	r8, #0
 800b672:	f104 0919 	add.w	r9, r4, #25
 800b676:	e7f4      	b.n	800b662 <_printf_float+0x43e>

0800b678 <_printf_common>:
 800b678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	4616      	mov	r6, r2
 800b67e:	4698      	mov	r8, r3
 800b680:	688a      	ldr	r2, [r1, #8]
 800b682:	690b      	ldr	r3, [r1, #16]
 800b684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b688:	4293      	cmp	r3, r2
 800b68a:	bfb8      	it	lt
 800b68c:	4613      	movlt	r3, r2
 800b68e:	6033      	str	r3, [r6, #0]
 800b690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b694:	4607      	mov	r7, r0
 800b696:	460c      	mov	r4, r1
 800b698:	b10a      	cbz	r2, 800b69e <_printf_common+0x26>
 800b69a:	3301      	adds	r3, #1
 800b69c:	6033      	str	r3, [r6, #0]
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	0699      	lsls	r1, r3, #26
 800b6a2:	bf42      	ittt	mi
 800b6a4:	6833      	ldrmi	r3, [r6, #0]
 800b6a6:	3302      	addmi	r3, #2
 800b6a8:	6033      	strmi	r3, [r6, #0]
 800b6aa:	6825      	ldr	r5, [r4, #0]
 800b6ac:	f015 0506 	ands.w	r5, r5, #6
 800b6b0:	d106      	bne.n	800b6c0 <_printf_common+0x48>
 800b6b2:	f104 0a19 	add.w	sl, r4, #25
 800b6b6:	68e3      	ldr	r3, [r4, #12]
 800b6b8:	6832      	ldr	r2, [r6, #0]
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	42ab      	cmp	r3, r5
 800b6be:	dc26      	bgt.n	800b70e <_printf_common+0x96>
 800b6c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6c4:	6822      	ldr	r2, [r4, #0]
 800b6c6:	3b00      	subs	r3, #0
 800b6c8:	bf18      	it	ne
 800b6ca:	2301      	movne	r3, #1
 800b6cc:	0692      	lsls	r2, r2, #26
 800b6ce:	d42b      	bmi.n	800b728 <_printf_common+0xb0>
 800b6d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6d4:	4641      	mov	r1, r8
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	47c8      	blx	r9
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d01e      	beq.n	800b71c <_printf_common+0xa4>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	6922      	ldr	r2, [r4, #16]
 800b6e2:	f003 0306 	and.w	r3, r3, #6
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	bf02      	ittt	eq
 800b6ea:	68e5      	ldreq	r5, [r4, #12]
 800b6ec:	6833      	ldreq	r3, [r6, #0]
 800b6ee:	1aed      	subeq	r5, r5, r3
 800b6f0:	68a3      	ldr	r3, [r4, #8]
 800b6f2:	bf0c      	ite	eq
 800b6f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6f8:	2500      	movne	r5, #0
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	bfc4      	itt	gt
 800b6fe:	1a9b      	subgt	r3, r3, r2
 800b700:	18ed      	addgt	r5, r5, r3
 800b702:	2600      	movs	r6, #0
 800b704:	341a      	adds	r4, #26
 800b706:	42b5      	cmp	r5, r6
 800b708:	d11a      	bne.n	800b740 <_printf_common+0xc8>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e008      	b.n	800b720 <_printf_common+0xa8>
 800b70e:	2301      	movs	r3, #1
 800b710:	4652      	mov	r2, sl
 800b712:	4641      	mov	r1, r8
 800b714:	4638      	mov	r0, r7
 800b716:	47c8      	blx	r9
 800b718:	3001      	adds	r0, #1
 800b71a:	d103      	bne.n	800b724 <_printf_common+0xac>
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b724:	3501      	adds	r5, #1
 800b726:	e7c6      	b.n	800b6b6 <_printf_common+0x3e>
 800b728:	18e1      	adds	r1, r4, r3
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	2030      	movs	r0, #48	@ 0x30
 800b72e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b732:	4422      	add	r2, r4
 800b734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b73c:	3302      	adds	r3, #2
 800b73e:	e7c7      	b.n	800b6d0 <_printf_common+0x58>
 800b740:	2301      	movs	r3, #1
 800b742:	4622      	mov	r2, r4
 800b744:	4641      	mov	r1, r8
 800b746:	4638      	mov	r0, r7
 800b748:	47c8      	blx	r9
 800b74a:	3001      	adds	r0, #1
 800b74c:	d0e6      	beq.n	800b71c <_printf_common+0xa4>
 800b74e:	3601      	adds	r6, #1
 800b750:	e7d9      	b.n	800b706 <_printf_common+0x8e>
	...

0800b754 <_printf_i>:
 800b754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	7e0f      	ldrb	r7, [r1, #24]
 800b75a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b75c:	2f78      	cmp	r7, #120	@ 0x78
 800b75e:	4691      	mov	r9, r2
 800b760:	4680      	mov	r8, r0
 800b762:	460c      	mov	r4, r1
 800b764:	469a      	mov	sl, r3
 800b766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b76a:	d807      	bhi.n	800b77c <_printf_i+0x28>
 800b76c:	2f62      	cmp	r7, #98	@ 0x62
 800b76e:	d80a      	bhi.n	800b786 <_printf_i+0x32>
 800b770:	2f00      	cmp	r7, #0
 800b772:	f000 80d1 	beq.w	800b918 <_printf_i+0x1c4>
 800b776:	2f58      	cmp	r7, #88	@ 0x58
 800b778:	f000 80b8 	beq.w	800b8ec <_printf_i+0x198>
 800b77c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b784:	e03a      	b.n	800b7fc <_printf_i+0xa8>
 800b786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b78a:	2b15      	cmp	r3, #21
 800b78c:	d8f6      	bhi.n	800b77c <_printf_i+0x28>
 800b78e:	a101      	add	r1, pc, #4	@ (adr r1, 800b794 <_printf_i+0x40>)
 800b790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b794:	0800b7ed 	.word	0x0800b7ed
 800b798:	0800b801 	.word	0x0800b801
 800b79c:	0800b77d 	.word	0x0800b77d
 800b7a0:	0800b77d 	.word	0x0800b77d
 800b7a4:	0800b77d 	.word	0x0800b77d
 800b7a8:	0800b77d 	.word	0x0800b77d
 800b7ac:	0800b801 	.word	0x0800b801
 800b7b0:	0800b77d 	.word	0x0800b77d
 800b7b4:	0800b77d 	.word	0x0800b77d
 800b7b8:	0800b77d 	.word	0x0800b77d
 800b7bc:	0800b77d 	.word	0x0800b77d
 800b7c0:	0800b8ff 	.word	0x0800b8ff
 800b7c4:	0800b82b 	.word	0x0800b82b
 800b7c8:	0800b8b9 	.word	0x0800b8b9
 800b7cc:	0800b77d 	.word	0x0800b77d
 800b7d0:	0800b77d 	.word	0x0800b77d
 800b7d4:	0800b921 	.word	0x0800b921
 800b7d8:	0800b77d 	.word	0x0800b77d
 800b7dc:	0800b82b 	.word	0x0800b82b
 800b7e0:	0800b77d 	.word	0x0800b77d
 800b7e4:	0800b77d 	.word	0x0800b77d
 800b7e8:	0800b8c1 	.word	0x0800b8c1
 800b7ec:	6833      	ldr	r3, [r6, #0]
 800b7ee:	1d1a      	adds	r2, r3, #4
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6032      	str	r2, [r6, #0]
 800b7f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e09c      	b.n	800b93a <_printf_i+0x1e6>
 800b800:	6833      	ldr	r3, [r6, #0]
 800b802:	6820      	ldr	r0, [r4, #0]
 800b804:	1d19      	adds	r1, r3, #4
 800b806:	6031      	str	r1, [r6, #0]
 800b808:	0606      	lsls	r6, r0, #24
 800b80a:	d501      	bpl.n	800b810 <_printf_i+0xbc>
 800b80c:	681d      	ldr	r5, [r3, #0]
 800b80e:	e003      	b.n	800b818 <_printf_i+0xc4>
 800b810:	0645      	lsls	r5, r0, #25
 800b812:	d5fb      	bpl.n	800b80c <_printf_i+0xb8>
 800b814:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b818:	2d00      	cmp	r5, #0
 800b81a:	da03      	bge.n	800b824 <_printf_i+0xd0>
 800b81c:	232d      	movs	r3, #45	@ 0x2d
 800b81e:	426d      	negs	r5, r5
 800b820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b824:	4858      	ldr	r0, [pc, #352]	@ (800b988 <_printf_i+0x234>)
 800b826:	230a      	movs	r3, #10
 800b828:	e011      	b.n	800b84e <_printf_i+0xfa>
 800b82a:	6821      	ldr	r1, [r4, #0]
 800b82c:	6833      	ldr	r3, [r6, #0]
 800b82e:	0608      	lsls	r0, r1, #24
 800b830:	f853 5b04 	ldr.w	r5, [r3], #4
 800b834:	d402      	bmi.n	800b83c <_printf_i+0xe8>
 800b836:	0649      	lsls	r1, r1, #25
 800b838:	bf48      	it	mi
 800b83a:	b2ad      	uxthmi	r5, r5
 800b83c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b83e:	4852      	ldr	r0, [pc, #328]	@ (800b988 <_printf_i+0x234>)
 800b840:	6033      	str	r3, [r6, #0]
 800b842:	bf14      	ite	ne
 800b844:	230a      	movne	r3, #10
 800b846:	2308      	moveq	r3, #8
 800b848:	2100      	movs	r1, #0
 800b84a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b84e:	6866      	ldr	r6, [r4, #4]
 800b850:	60a6      	str	r6, [r4, #8]
 800b852:	2e00      	cmp	r6, #0
 800b854:	db05      	blt.n	800b862 <_printf_i+0x10e>
 800b856:	6821      	ldr	r1, [r4, #0]
 800b858:	432e      	orrs	r6, r5
 800b85a:	f021 0104 	bic.w	r1, r1, #4
 800b85e:	6021      	str	r1, [r4, #0]
 800b860:	d04b      	beq.n	800b8fa <_printf_i+0x1a6>
 800b862:	4616      	mov	r6, r2
 800b864:	fbb5 f1f3 	udiv	r1, r5, r3
 800b868:	fb03 5711 	mls	r7, r3, r1, r5
 800b86c:	5dc7      	ldrb	r7, [r0, r7]
 800b86e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b872:	462f      	mov	r7, r5
 800b874:	42bb      	cmp	r3, r7
 800b876:	460d      	mov	r5, r1
 800b878:	d9f4      	bls.n	800b864 <_printf_i+0x110>
 800b87a:	2b08      	cmp	r3, #8
 800b87c:	d10b      	bne.n	800b896 <_printf_i+0x142>
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	07df      	lsls	r7, r3, #31
 800b882:	d508      	bpl.n	800b896 <_printf_i+0x142>
 800b884:	6923      	ldr	r3, [r4, #16]
 800b886:	6861      	ldr	r1, [r4, #4]
 800b888:	4299      	cmp	r1, r3
 800b88a:	bfde      	ittt	le
 800b88c:	2330      	movle	r3, #48	@ 0x30
 800b88e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b892:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b896:	1b92      	subs	r2, r2, r6
 800b898:	6122      	str	r2, [r4, #16]
 800b89a:	f8cd a000 	str.w	sl, [sp]
 800b89e:	464b      	mov	r3, r9
 800b8a0:	aa03      	add	r2, sp, #12
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	f7ff fee7 	bl	800b678 <_printf_common>
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d14a      	bne.n	800b944 <_printf_i+0x1f0>
 800b8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b2:	b004      	add	sp, #16
 800b8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	f043 0320 	orr.w	r3, r3, #32
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	4832      	ldr	r0, [pc, #200]	@ (800b98c <_printf_i+0x238>)
 800b8c2:	2778      	movs	r7, #120	@ 0x78
 800b8c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	6831      	ldr	r1, [r6, #0]
 800b8cc:	061f      	lsls	r7, r3, #24
 800b8ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8d2:	d402      	bmi.n	800b8da <_printf_i+0x186>
 800b8d4:	065f      	lsls	r7, r3, #25
 800b8d6:	bf48      	it	mi
 800b8d8:	b2ad      	uxthmi	r5, r5
 800b8da:	6031      	str	r1, [r6, #0]
 800b8dc:	07d9      	lsls	r1, r3, #31
 800b8de:	bf44      	itt	mi
 800b8e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b8e4:	6023      	strmi	r3, [r4, #0]
 800b8e6:	b11d      	cbz	r5, 800b8f0 <_printf_i+0x19c>
 800b8e8:	2310      	movs	r3, #16
 800b8ea:	e7ad      	b.n	800b848 <_printf_i+0xf4>
 800b8ec:	4826      	ldr	r0, [pc, #152]	@ (800b988 <_printf_i+0x234>)
 800b8ee:	e7e9      	b.n	800b8c4 <_printf_i+0x170>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	f023 0320 	bic.w	r3, r3, #32
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	e7f6      	b.n	800b8e8 <_printf_i+0x194>
 800b8fa:	4616      	mov	r6, r2
 800b8fc:	e7bd      	b.n	800b87a <_printf_i+0x126>
 800b8fe:	6833      	ldr	r3, [r6, #0]
 800b900:	6825      	ldr	r5, [r4, #0]
 800b902:	6961      	ldr	r1, [r4, #20]
 800b904:	1d18      	adds	r0, r3, #4
 800b906:	6030      	str	r0, [r6, #0]
 800b908:	062e      	lsls	r6, r5, #24
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	d501      	bpl.n	800b912 <_printf_i+0x1be>
 800b90e:	6019      	str	r1, [r3, #0]
 800b910:	e002      	b.n	800b918 <_printf_i+0x1c4>
 800b912:	0668      	lsls	r0, r5, #25
 800b914:	d5fb      	bpl.n	800b90e <_printf_i+0x1ba>
 800b916:	8019      	strh	r1, [r3, #0]
 800b918:	2300      	movs	r3, #0
 800b91a:	6123      	str	r3, [r4, #16]
 800b91c:	4616      	mov	r6, r2
 800b91e:	e7bc      	b.n	800b89a <_printf_i+0x146>
 800b920:	6833      	ldr	r3, [r6, #0]
 800b922:	1d1a      	adds	r2, r3, #4
 800b924:	6032      	str	r2, [r6, #0]
 800b926:	681e      	ldr	r6, [r3, #0]
 800b928:	6862      	ldr	r2, [r4, #4]
 800b92a:	2100      	movs	r1, #0
 800b92c:	4630      	mov	r0, r6
 800b92e:	f7f4 fc6f 	bl	8000210 <memchr>
 800b932:	b108      	cbz	r0, 800b938 <_printf_i+0x1e4>
 800b934:	1b80      	subs	r0, r0, r6
 800b936:	6060      	str	r0, [r4, #4]
 800b938:	6863      	ldr	r3, [r4, #4]
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	2300      	movs	r3, #0
 800b93e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b942:	e7aa      	b.n	800b89a <_printf_i+0x146>
 800b944:	6923      	ldr	r3, [r4, #16]
 800b946:	4632      	mov	r2, r6
 800b948:	4649      	mov	r1, r9
 800b94a:	4640      	mov	r0, r8
 800b94c:	47d0      	blx	sl
 800b94e:	3001      	adds	r0, #1
 800b950:	d0ad      	beq.n	800b8ae <_printf_i+0x15a>
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	079b      	lsls	r3, r3, #30
 800b956:	d413      	bmi.n	800b980 <_printf_i+0x22c>
 800b958:	68e0      	ldr	r0, [r4, #12]
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	4298      	cmp	r0, r3
 800b95e:	bfb8      	it	lt
 800b960:	4618      	movlt	r0, r3
 800b962:	e7a6      	b.n	800b8b2 <_printf_i+0x15e>
 800b964:	2301      	movs	r3, #1
 800b966:	4632      	mov	r2, r6
 800b968:	4649      	mov	r1, r9
 800b96a:	4640      	mov	r0, r8
 800b96c:	47d0      	blx	sl
 800b96e:	3001      	adds	r0, #1
 800b970:	d09d      	beq.n	800b8ae <_printf_i+0x15a>
 800b972:	3501      	adds	r5, #1
 800b974:	68e3      	ldr	r3, [r4, #12]
 800b976:	9903      	ldr	r1, [sp, #12]
 800b978:	1a5b      	subs	r3, r3, r1
 800b97a:	42ab      	cmp	r3, r5
 800b97c:	dcf2      	bgt.n	800b964 <_printf_i+0x210>
 800b97e:	e7eb      	b.n	800b958 <_printf_i+0x204>
 800b980:	2500      	movs	r5, #0
 800b982:	f104 0619 	add.w	r6, r4, #25
 800b986:	e7f5      	b.n	800b974 <_printf_i+0x220>
 800b988:	08010ce6 	.word	0x08010ce6
 800b98c:	08010cf7 	.word	0x08010cf7

0800b990 <std>:
 800b990:	2300      	movs	r3, #0
 800b992:	b510      	push	{r4, lr}
 800b994:	4604      	mov	r4, r0
 800b996:	e9c0 3300 	strd	r3, r3, [r0]
 800b99a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b99e:	6083      	str	r3, [r0, #8]
 800b9a0:	8181      	strh	r1, [r0, #12]
 800b9a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9a4:	81c2      	strh	r2, [r0, #14]
 800b9a6:	6183      	str	r3, [r0, #24]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	2208      	movs	r2, #8
 800b9ac:	305c      	adds	r0, #92	@ 0x5c
 800b9ae:	f000 f94c 	bl	800bc4a <memset>
 800b9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b9e8 <std+0x58>)
 800b9b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b9ec <std+0x5c>)
 800b9b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b9f0 <std+0x60>)
 800b9bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9be:	4b0d      	ldr	r3, [pc, #52]	@ (800b9f4 <std+0x64>)
 800b9c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b9f8 <std+0x68>)
 800b9c4:	6224      	str	r4, [r4, #32]
 800b9c6:	429c      	cmp	r4, r3
 800b9c8:	d006      	beq.n	800b9d8 <std+0x48>
 800b9ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b9ce:	4294      	cmp	r4, r2
 800b9d0:	d002      	beq.n	800b9d8 <std+0x48>
 800b9d2:	33d0      	adds	r3, #208	@ 0xd0
 800b9d4:	429c      	cmp	r4, r3
 800b9d6:	d105      	bne.n	800b9e4 <std+0x54>
 800b9d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9e0:	f000 b9c2 	b.w	800bd68 <__retarget_lock_init_recursive>
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0800bbc5 	.word	0x0800bbc5
 800b9ec:	0800bbe7 	.word	0x0800bbe7
 800b9f0:	0800bc1f 	.word	0x0800bc1f
 800b9f4:	0800bc43 	.word	0x0800bc43
 800b9f8:	20000db4 	.word	0x20000db4

0800b9fc <stdio_exit_handler>:
 800b9fc:	4a02      	ldr	r2, [pc, #8]	@ (800ba08 <stdio_exit_handler+0xc>)
 800b9fe:	4903      	ldr	r1, [pc, #12]	@ (800ba0c <stdio_exit_handler+0x10>)
 800ba00:	4803      	ldr	r0, [pc, #12]	@ (800ba10 <stdio_exit_handler+0x14>)
 800ba02:	f000 b869 	b.w	800bad8 <_fwalk_sglue>
 800ba06:	bf00      	nop
 800ba08:	200000a8 	.word	0x200000a8
 800ba0c:	0800d6ed 	.word	0x0800d6ed
 800ba10:	200000b8 	.word	0x200000b8

0800ba14 <cleanup_stdio>:
 800ba14:	6841      	ldr	r1, [r0, #4]
 800ba16:	4b0c      	ldr	r3, [pc, #48]	@ (800ba48 <cleanup_stdio+0x34>)
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	b510      	push	{r4, lr}
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	d001      	beq.n	800ba24 <cleanup_stdio+0x10>
 800ba20:	f001 fe64 	bl	800d6ec <_fflush_r>
 800ba24:	68a1      	ldr	r1, [r4, #8]
 800ba26:	4b09      	ldr	r3, [pc, #36]	@ (800ba4c <cleanup_stdio+0x38>)
 800ba28:	4299      	cmp	r1, r3
 800ba2a:	d002      	beq.n	800ba32 <cleanup_stdio+0x1e>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f001 fe5d 	bl	800d6ec <_fflush_r>
 800ba32:	68e1      	ldr	r1, [r4, #12]
 800ba34:	4b06      	ldr	r3, [pc, #24]	@ (800ba50 <cleanup_stdio+0x3c>)
 800ba36:	4299      	cmp	r1, r3
 800ba38:	d004      	beq.n	800ba44 <cleanup_stdio+0x30>
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba40:	f001 be54 	b.w	800d6ec <_fflush_r>
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	bf00      	nop
 800ba48:	20000db4 	.word	0x20000db4
 800ba4c:	20000e1c 	.word	0x20000e1c
 800ba50:	20000e84 	.word	0x20000e84

0800ba54 <global_stdio_init.part.0>:
 800ba54:	b510      	push	{r4, lr}
 800ba56:	4b0b      	ldr	r3, [pc, #44]	@ (800ba84 <global_stdio_init.part.0+0x30>)
 800ba58:	4c0b      	ldr	r4, [pc, #44]	@ (800ba88 <global_stdio_init.part.0+0x34>)
 800ba5a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba8c <global_stdio_init.part.0+0x38>)
 800ba5c:	601a      	str	r2, [r3, #0]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	2200      	movs	r2, #0
 800ba62:	2104      	movs	r1, #4
 800ba64:	f7ff ff94 	bl	800b990 <std>
 800ba68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	2109      	movs	r1, #9
 800ba70:	f7ff ff8e 	bl	800b990 <std>
 800ba74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba78:	2202      	movs	r2, #2
 800ba7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba7e:	2112      	movs	r1, #18
 800ba80:	f7ff bf86 	b.w	800b990 <std>
 800ba84:	20000eec 	.word	0x20000eec
 800ba88:	20000db4 	.word	0x20000db4
 800ba8c:	0800b9fd 	.word	0x0800b9fd

0800ba90 <__sfp_lock_acquire>:
 800ba90:	4801      	ldr	r0, [pc, #4]	@ (800ba98 <__sfp_lock_acquire+0x8>)
 800ba92:	f000 b96a 	b.w	800bd6a <__retarget_lock_acquire_recursive>
 800ba96:	bf00      	nop
 800ba98:	20000ef5 	.word	0x20000ef5

0800ba9c <__sfp_lock_release>:
 800ba9c:	4801      	ldr	r0, [pc, #4]	@ (800baa4 <__sfp_lock_release+0x8>)
 800ba9e:	f000 b965 	b.w	800bd6c <__retarget_lock_release_recursive>
 800baa2:	bf00      	nop
 800baa4:	20000ef5 	.word	0x20000ef5

0800baa8 <__sinit>:
 800baa8:	b510      	push	{r4, lr}
 800baaa:	4604      	mov	r4, r0
 800baac:	f7ff fff0 	bl	800ba90 <__sfp_lock_acquire>
 800bab0:	6a23      	ldr	r3, [r4, #32]
 800bab2:	b11b      	cbz	r3, 800babc <__sinit+0x14>
 800bab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bab8:	f7ff bff0 	b.w	800ba9c <__sfp_lock_release>
 800babc:	4b04      	ldr	r3, [pc, #16]	@ (800bad0 <__sinit+0x28>)
 800babe:	6223      	str	r3, [r4, #32]
 800bac0:	4b04      	ldr	r3, [pc, #16]	@ (800bad4 <__sinit+0x2c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1f5      	bne.n	800bab4 <__sinit+0xc>
 800bac8:	f7ff ffc4 	bl	800ba54 <global_stdio_init.part.0>
 800bacc:	e7f2      	b.n	800bab4 <__sinit+0xc>
 800bace:	bf00      	nop
 800bad0:	0800ba15 	.word	0x0800ba15
 800bad4:	20000eec 	.word	0x20000eec

0800bad8 <_fwalk_sglue>:
 800bad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800badc:	4607      	mov	r7, r0
 800bade:	4688      	mov	r8, r1
 800bae0:	4614      	mov	r4, r2
 800bae2:	2600      	movs	r6, #0
 800bae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bae8:	f1b9 0901 	subs.w	r9, r9, #1
 800baec:	d505      	bpl.n	800bafa <_fwalk_sglue+0x22>
 800baee:	6824      	ldr	r4, [r4, #0]
 800baf0:	2c00      	cmp	r4, #0
 800baf2:	d1f7      	bne.n	800bae4 <_fwalk_sglue+0xc>
 800baf4:	4630      	mov	r0, r6
 800baf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bafa:	89ab      	ldrh	r3, [r5, #12]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d907      	bls.n	800bb10 <_fwalk_sglue+0x38>
 800bb00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb04:	3301      	adds	r3, #1
 800bb06:	d003      	beq.n	800bb10 <_fwalk_sglue+0x38>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4638      	mov	r0, r7
 800bb0c:	47c0      	blx	r8
 800bb0e:	4306      	orrs	r6, r0
 800bb10:	3568      	adds	r5, #104	@ 0x68
 800bb12:	e7e9      	b.n	800bae8 <_fwalk_sglue+0x10>

0800bb14 <sniprintf>:
 800bb14:	b40c      	push	{r2, r3}
 800bb16:	b530      	push	{r4, r5, lr}
 800bb18:	4b18      	ldr	r3, [pc, #96]	@ (800bb7c <sniprintf+0x68>)
 800bb1a:	1e0c      	subs	r4, r1, #0
 800bb1c:	681d      	ldr	r5, [r3, #0]
 800bb1e:	b09d      	sub	sp, #116	@ 0x74
 800bb20:	da08      	bge.n	800bb34 <sniprintf+0x20>
 800bb22:	238b      	movs	r3, #139	@ 0x8b
 800bb24:	602b      	str	r3, [r5, #0]
 800bb26:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2a:	b01d      	add	sp, #116	@ 0x74
 800bb2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb30:	b002      	add	sp, #8
 800bb32:	4770      	bx	lr
 800bb34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb3c:	f04f 0300 	mov.w	r3, #0
 800bb40:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bb42:	bf14      	ite	ne
 800bb44:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb48:	4623      	moveq	r3, r4
 800bb4a:	9304      	str	r3, [sp, #16]
 800bb4c:	9307      	str	r3, [sp, #28]
 800bb4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb52:	9002      	str	r0, [sp, #8]
 800bb54:	9006      	str	r0, [sp, #24]
 800bb56:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb5c:	ab21      	add	r3, sp, #132	@ 0x84
 800bb5e:	a902      	add	r1, sp, #8
 800bb60:	4628      	mov	r0, r5
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	f001 fc42 	bl	800d3ec <_svfiprintf_r>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	bfbc      	itt	lt
 800bb6c:	238b      	movlt	r3, #139	@ 0x8b
 800bb6e:	602b      	strlt	r3, [r5, #0]
 800bb70:	2c00      	cmp	r4, #0
 800bb72:	d0da      	beq.n	800bb2a <sniprintf+0x16>
 800bb74:	9b02      	ldr	r3, [sp, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	e7d6      	b.n	800bb2a <sniprintf+0x16>
 800bb7c:	200000b4 	.word	0x200000b4

0800bb80 <siprintf>:
 800bb80:	b40e      	push	{r1, r2, r3}
 800bb82:	b510      	push	{r4, lr}
 800bb84:	b09d      	sub	sp, #116	@ 0x74
 800bb86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb88:	9002      	str	r0, [sp, #8]
 800bb8a:	9006      	str	r0, [sp, #24]
 800bb8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb90:	480a      	ldr	r0, [pc, #40]	@ (800bbbc <siprintf+0x3c>)
 800bb92:	9107      	str	r1, [sp, #28]
 800bb94:	9104      	str	r1, [sp, #16]
 800bb96:	490a      	ldr	r1, [pc, #40]	@ (800bbc0 <siprintf+0x40>)
 800bb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9c:	9105      	str	r1, [sp, #20]
 800bb9e:	2400      	movs	r4, #0
 800bba0:	a902      	add	r1, sp, #8
 800bba2:	6800      	ldr	r0, [r0, #0]
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bba8:	f001 fc20 	bl	800d3ec <_svfiprintf_r>
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	701c      	strb	r4, [r3, #0]
 800bbb0:	b01d      	add	sp, #116	@ 0x74
 800bbb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbb6:	b003      	add	sp, #12
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	200000b4 	.word	0x200000b4
 800bbc0:	ffff0208 	.word	0xffff0208

0800bbc4 <__sread>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbcc:	f000 f87e 	bl	800bccc <_read_r>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	bfab      	itete	ge
 800bbd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbd6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbd8:	181b      	addge	r3, r3, r0
 800bbda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbde:	bfac      	ite	ge
 800bbe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbe2:	81a3      	strhlt	r3, [r4, #12]
 800bbe4:	bd10      	pop	{r4, pc}

0800bbe6 <__swrite>:
 800bbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	461f      	mov	r7, r3
 800bbec:	898b      	ldrh	r3, [r1, #12]
 800bbee:	05db      	lsls	r3, r3, #23
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	4616      	mov	r6, r2
 800bbf6:	d505      	bpl.n	800bc04 <__swrite+0x1e>
 800bbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f000 f852 	bl	800bca8 <_lseek_r>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	4632      	mov	r2, r6
 800bc12:	463b      	mov	r3, r7
 800bc14:	4628      	mov	r0, r5
 800bc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1a:	f000 b869 	b.w	800bcf0 <_write_r>

0800bc1e <__sseek>:
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	460c      	mov	r4, r1
 800bc22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc26:	f000 f83f 	bl	800bca8 <_lseek_r>
 800bc2a:	1c43      	adds	r3, r0, #1
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	bf15      	itete	ne
 800bc30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc3a:	81a3      	strheq	r3, [r4, #12]
 800bc3c:	bf18      	it	ne
 800bc3e:	81a3      	strhne	r3, [r4, #12]
 800bc40:	bd10      	pop	{r4, pc}

0800bc42 <__sclose>:
 800bc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc46:	f000 b81f 	b.w	800bc88 <_close_r>

0800bc4a <memset>:
 800bc4a:	4402      	add	r2, r0
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d100      	bne.n	800bc54 <memset+0xa>
 800bc52:	4770      	bx	lr
 800bc54:	f803 1b01 	strb.w	r1, [r3], #1
 800bc58:	e7f9      	b.n	800bc4e <memset+0x4>

0800bc5a <strncpy>:
 800bc5a:	b510      	push	{r4, lr}
 800bc5c:	3901      	subs	r1, #1
 800bc5e:	4603      	mov	r3, r0
 800bc60:	b132      	cbz	r2, 800bc70 <strncpy+0x16>
 800bc62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bc66:	f803 4b01 	strb.w	r4, [r3], #1
 800bc6a:	3a01      	subs	r2, #1
 800bc6c:	2c00      	cmp	r4, #0
 800bc6e:	d1f7      	bne.n	800bc60 <strncpy+0x6>
 800bc70:	441a      	add	r2, r3
 800bc72:	2100      	movs	r1, #0
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d100      	bne.n	800bc7a <strncpy+0x20>
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc7e:	e7f9      	b.n	800bc74 <strncpy+0x1a>

0800bc80 <_localeconv_r>:
 800bc80:	4800      	ldr	r0, [pc, #0]	@ (800bc84 <_localeconv_r+0x4>)
 800bc82:	4770      	bx	lr
 800bc84:	200001f4 	.word	0x200001f4

0800bc88 <_close_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d06      	ldr	r5, [pc, #24]	@ (800bca4 <_close_r+0x1c>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	f7f8 fbda 	bl	800444c <_close>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_close_r+0x1a>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_close_r+0x1a>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	20000ef0 	.word	0x20000ef0

0800bca8 <_lseek_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	@ (800bcc8 <_lseek_r+0x20>)
 800bcac:	4604      	mov	r4, r0
 800bcae:	4608      	mov	r0, r1
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	602a      	str	r2, [r5, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f7f8 fbef 	bl	800449a <_lseek>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_lseek_r+0x1e>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_lseek_r+0x1e>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20000ef0 	.word	0x20000ef0

0800bccc <_read_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d07      	ldr	r5, [pc, #28]	@ (800bcec <_read_r+0x20>)
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	602a      	str	r2, [r5, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f7f8 fb7d 	bl	80043da <_read>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d102      	bne.n	800bcea <_read_r+0x1e>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	b103      	cbz	r3, 800bcea <_read_r+0x1e>
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	20000ef0 	.word	0x20000ef0

0800bcf0 <_write_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d07      	ldr	r5, [pc, #28]	@ (800bd10 <_write_r+0x20>)
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	4608      	mov	r0, r1
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	602a      	str	r2, [r5, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f7f8 fb88 	bl	8004414 <_write>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d102      	bne.n	800bd0e <_write_r+0x1e>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b103      	cbz	r3, 800bd0e <_write_r+0x1e>
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20000ef0 	.word	0x20000ef0

0800bd14 <__errno>:
 800bd14:	4b01      	ldr	r3, [pc, #4]	@ (800bd1c <__errno+0x8>)
 800bd16:	6818      	ldr	r0, [r3, #0]
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	200000b4 	.word	0x200000b4

0800bd20 <__libc_init_array>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	4d0d      	ldr	r5, [pc, #52]	@ (800bd58 <__libc_init_array+0x38>)
 800bd24:	4c0d      	ldr	r4, [pc, #52]	@ (800bd5c <__libc_init_array+0x3c>)
 800bd26:	1b64      	subs	r4, r4, r5
 800bd28:	10a4      	asrs	r4, r4, #2
 800bd2a:	2600      	movs	r6, #0
 800bd2c:	42a6      	cmp	r6, r4
 800bd2e:	d109      	bne.n	800bd44 <__libc_init_array+0x24>
 800bd30:	4d0b      	ldr	r5, [pc, #44]	@ (800bd60 <__libc_init_array+0x40>)
 800bd32:	4c0c      	ldr	r4, [pc, #48]	@ (800bd64 <__libc_init_array+0x44>)
 800bd34:	f002 f906 	bl	800df44 <_init>
 800bd38:	1b64      	subs	r4, r4, r5
 800bd3a:	10a4      	asrs	r4, r4, #2
 800bd3c:	2600      	movs	r6, #0
 800bd3e:	42a6      	cmp	r6, r4
 800bd40:	d105      	bne.n	800bd4e <__libc_init_array+0x2e>
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd48:	4798      	blx	r3
 800bd4a:	3601      	adds	r6, #1
 800bd4c:	e7ee      	b.n	800bd2c <__libc_init_array+0xc>
 800bd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd52:	4798      	blx	r3
 800bd54:	3601      	adds	r6, #1
 800bd56:	e7f2      	b.n	800bd3e <__libc_init_array+0x1e>
 800bd58:	08011054 	.word	0x08011054
 800bd5c:	08011054 	.word	0x08011054
 800bd60:	08011054 	.word	0x08011054
 800bd64:	08011058 	.word	0x08011058

0800bd68 <__retarget_lock_init_recursive>:
 800bd68:	4770      	bx	lr

0800bd6a <__retarget_lock_acquire_recursive>:
 800bd6a:	4770      	bx	lr

0800bd6c <__retarget_lock_release_recursive>:
 800bd6c:	4770      	bx	lr

0800bd6e <memcpy>:
 800bd6e:	440a      	add	r2, r1
 800bd70:	4291      	cmp	r1, r2
 800bd72:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd76:	d100      	bne.n	800bd7a <memcpy+0xc>
 800bd78:	4770      	bx	lr
 800bd7a:	b510      	push	{r4, lr}
 800bd7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd84:	4291      	cmp	r1, r2
 800bd86:	d1f9      	bne.n	800bd7c <memcpy+0xe>
 800bd88:	bd10      	pop	{r4, pc}

0800bd8a <quorem>:
 800bd8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8e:	6903      	ldr	r3, [r0, #16]
 800bd90:	690c      	ldr	r4, [r1, #16]
 800bd92:	42a3      	cmp	r3, r4
 800bd94:	4607      	mov	r7, r0
 800bd96:	db7e      	blt.n	800be96 <quorem+0x10c>
 800bd98:	3c01      	subs	r4, #1
 800bd9a:	f101 0814 	add.w	r8, r1, #20
 800bd9e:	00a3      	lsls	r3, r4, #2
 800bda0:	f100 0514 	add.w	r5, r0, #20
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdaa:	9301      	str	r3, [sp, #4]
 800bdac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdc0:	d32e      	bcc.n	800be20 <quorem+0x96>
 800bdc2:	f04f 0a00 	mov.w	sl, #0
 800bdc6:	46c4      	mov	ip, r8
 800bdc8:	46ae      	mov	lr, r5
 800bdca:	46d3      	mov	fp, sl
 800bdcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdd0:	b298      	uxth	r0, r3
 800bdd2:	fb06 a000 	mla	r0, r6, r0, sl
 800bdd6:	0c02      	lsrs	r2, r0, #16
 800bdd8:	0c1b      	lsrs	r3, r3, #16
 800bdda:	fb06 2303 	mla	r3, r6, r3, r2
 800bdde:	f8de 2000 	ldr.w	r2, [lr]
 800bde2:	b280      	uxth	r0, r0
 800bde4:	b292      	uxth	r2, r2
 800bde6:	1a12      	subs	r2, r2, r0
 800bde8:	445a      	add	r2, fp
 800bdea:	f8de 0000 	ldr.w	r0, [lr]
 800bdee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdf8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bdfc:	b292      	uxth	r2, r2
 800bdfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be02:	45e1      	cmp	r9, ip
 800be04:	f84e 2b04 	str.w	r2, [lr], #4
 800be08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be0c:	d2de      	bcs.n	800bdcc <quorem+0x42>
 800be0e:	9b00      	ldr	r3, [sp, #0]
 800be10:	58eb      	ldr	r3, [r5, r3]
 800be12:	b92b      	cbnz	r3, 800be20 <quorem+0x96>
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	3b04      	subs	r3, #4
 800be18:	429d      	cmp	r5, r3
 800be1a:	461a      	mov	r2, r3
 800be1c:	d32f      	bcc.n	800be7e <quorem+0xf4>
 800be1e:	613c      	str	r4, [r7, #16]
 800be20:	4638      	mov	r0, r7
 800be22:	f001 f97f 	bl	800d124 <__mcmp>
 800be26:	2800      	cmp	r0, #0
 800be28:	db25      	blt.n	800be76 <quorem+0xec>
 800be2a:	4629      	mov	r1, r5
 800be2c:	2000      	movs	r0, #0
 800be2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800be32:	f8d1 c000 	ldr.w	ip, [r1]
 800be36:	fa1f fe82 	uxth.w	lr, r2
 800be3a:	fa1f f38c 	uxth.w	r3, ip
 800be3e:	eba3 030e 	sub.w	r3, r3, lr
 800be42:	4403      	add	r3, r0
 800be44:	0c12      	lsrs	r2, r2, #16
 800be46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be4e:	b29b      	uxth	r3, r3
 800be50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be54:	45c1      	cmp	r9, r8
 800be56:	f841 3b04 	str.w	r3, [r1], #4
 800be5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be5e:	d2e6      	bcs.n	800be2e <quorem+0xa4>
 800be60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be68:	b922      	cbnz	r2, 800be74 <quorem+0xea>
 800be6a:	3b04      	subs	r3, #4
 800be6c:	429d      	cmp	r5, r3
 800be6e:	461a      	mov	r2, r3
 800be70:	d30b      	bcc.n	800be8a <quorem+0x100>
 800be72:	613c      	str	r4, [r7, #16]
 800be74:	3601      	adds	r6, #1
 800be76:	4630      	mov	r0, r6
 800be78:	b003      	add	sp, #12
 800be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7e:	6812      	ldr	r2, [r2, #0]
 800be80:	3b04      	subs	r3, #4
 800be82:	2a00      	cmp	r2, #0
 800be84:	d1cb      	bne.n	800be1e <quorem+0x94>
 800be86:	3c01      	subs	r4, #1
 800be88:	e7c6      	b.n	800be18 <quorem+0x8e>
 800be8a:	6812      	ldr	r2, [r2, #0]
 800be8c:	3b04      	subs	r3, #4
 800be8e:	2a00      	cmp	r2, #0
 800be90:	d1ef      	bne.n	800be72 <quorem+0xe8>
 800be92:	3c01      	subs	r4, #1
 800be94:	e7ea      	b.n	800be6c <quorem+0xe2>
 800be96:	2000      	movs	r0, #0
 800be98:	e7ee      	b.n	800be78 <quorem+0xee>
 800be9a:	0000      	movs	r0, r0
 800be9c:	0000      	movs	r0, r0
	...

0800bea0 <_dtoa_r>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	69c7      	ldr	r7, [r0, #28]
 800bea6:	b097      	sub	sp, #92	@ 0x5c
 800bea8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800beac:	ec55 4b10 	vmov	r4, r5, d0
 800beb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800beb2:	9107      	str	r1, [sp, #28]
 800beb4:	4681      	mov	r9, r0
 800beb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800beb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800beba:	b97f      	cbnz	r7, 800bedc <_dtoa_r+0x3c>
 800bebc:	2010      	movs	r0, #16
 800bebe:	f000 fe09 	bl	800cad4 <malloc>
 800bec2:	4602      	mov	r2, r0
 800bec4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bec8:	b920      	cbnz	r0, 800bed4 <_dtoa_r+0x34>
 800beca:	4ba9      	ldr	r3, [pc, #676]	@ (800c170 <_dtoa_r+0x2d0>)
 800becc:	21ef      	movs	r1, #239	@ 0xef
 800bece:	48a9      	ldr	r0, [pc, #676]	@ (800c174 <_dtoa_r+0x2d4>)
 800bed0:	f001 fc5e 	bl	800d790 <__assert_func>
 800bed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bed8:	6007      	str	r7, [r0, #0]
 800beda:	60c7      	str	r7, [r0, #12]
 800bedc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bee0:	6819      	ldr	r1, [r3, #0]
 800bee2:	b159      	cbz	r1, 800befc <_dtoa_r+0x5c>
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	604a      	str	r2, [r1, #4]
 800bee8:	2301      	movs	r3, #1
 800beea:	4093      	lsls	r3, r2
 800beec:	608b      	str	r3, [r1, #8]
 800beee:	4648      	mov	r0, r9
 800bef0:	f000 fee6 	bl	800ccc0 <_Bfree>
 800bef4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	1e2b      	subs	r3, r5, #0
 800befe:	bfb9      	ittee	lt
 800bf00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf04:	9305      	strlt	r3, [sp, #20]
 800bf06:	2300      	movge	r3, #0
 800bf08:	6033      	strge	r3, [r6, #0]
 800bf0a:	9f05      	ldr	r7, [sp, #20]
 800bf0c:	4b9a      	ldr	r3, [pc, #616]	@ (800c178 <_dtoa_r+0x2d8>)
 800bf0e:	bfbc      	itt	lt
 800bf10:	2201      	movlt	r2, #1
 800bf12:	6032      	strlt	r2, [r6, #0]
 800bf14:	43bb      	bics	r3, r7
 800bf16:	d112      	bne.n	800bf3e <_dtoa_r+0x9e>
 800bf18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf24:	4323      	orrs	r3, r4
 800bf26:	f000 855a 	beq.w	800c9de <_dtoa_r+0xb3e>
 800bf2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c18c <_dtoa_r+0x2ec>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 855c 	beq.w	800c9ee <_dtoa_r+0xb4e>
 800bf36:	f10a 0303 	add.w	r3, sl, #3
 800bf3a:	f000 bd56 	b.w	800c9ea <_dtoa_r+0xb4a>
 800bf3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf42:	2200      	movs	r2, #0
 800bf44:	ec51 0b17 	vmov	r0, r1, d7
 800bf48:	2300      	movs	r3, #0
 800bf4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf4e:	f7f4 fddb 	bl	8000b08 <__aeabi_dcmpeq>
 800bf52:	4680      	mov	r8, r0
 800bf54:	b158      	cbz	r0, 800bf6e <_dtoa_r+0xce>
 800bf56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf58:	2301      	movs	r3, #1
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf5e:	b113      	cbz	r3, 800bf66 <_dtoa_r+0xc6>
 800bf60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf62:	4b86      	ldr	r3, [pc, #536]	@ (800c17c <_dtoa_r+0x2dc>)
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c190 <_dtoa_r+0x2f0>
 800bf6a:	f000 bd40 	b.w	800c9ee <_dtoa_r+0xb4e>
 800bf6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf72:	aa14      	add	r2, sp, #80	@ 0x50
 800bf74:	a915      	add	r1, sp, #84	@ 0x54
 800bf76:	4648      	mov	r0, r9
 800bf78:	f001 f984 	bl	800d284 <__d2b>
 800bf7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf80:	9002      	str	r0, [sp, #8]
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	d078      	beq.n	800c078 <_dtoa_r+0x1d8>
 800bf86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bf8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4b76      	ldr	r3, [pc, #472]	@ (800c180 <_dtoa_r+0x2e0>)
 800bfa6:	f7f4 f98f 	bl	80002c8 <__aeabi_dsub>
 800bfaa:	a36b      	add	r3, pc, #428	@ (adr r3, 800c158 <_dtoa_r+0x2b8>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f7f4 fb42 	bl	8000638 <__aeabi_dmul>
 800bfb4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c160 <_dtoa_r+0x2c0>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f7f4 f987 	bl	80002cc <__adddf3>
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	f7f4 face 	bl	8000564 <__aeabi_i2d>
 800bfc8:	a367      	add	r3, pc, #412	@ (adr r3, 800c168 <_dtoa_r+0x2c8>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 fb33 	bl	8000638 <__aeabi_dmul>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	4629      	mov	r1, r5
 800bfda:	f7f4 f977 	bl	80002cc <__adddf3>
 800bfde:	4604      	mov	r4, r0
 800bfe0:	460d      	mov	r5, r1
 800bfe2:	f7f4 fdd9 	bl	8000b98 <__aeabi_d2iz>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	4607      	mov	r7, r0
 800bfea:	2300      	movs	r3, #0
 800bfec:	4620      	mov	r0, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	f7f4 fd94 	bl	8000b1c <__aeabi_dcmplt>
 800bff4:	b140      	cbz	r0, 800c008 <_dtoa_r+0x168>
 800bff6:	4638      	mov	r0, r7
 800bff8:	f7f4 fab4 	bl	8000564 <__aeabi_i2d>
 800bffc:	4622      	mov	r2, r4
 800bffe:	462b      	mov	r3, r5
 800c000:	f7f4 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 800c004:	b900      	cbnz	r0, 800c008 <_dtoa_r+0x168>
 800c006:	3f01      	subs	r7, #1
 800c008:	2f16      	cmp	r7, #22
 800c00a:	d852      	bhi.n	800c0b2 <_dtoa_r+0x212>
 800c00c:	4b5d      	ldr	r3, [pc, #372]	@ (800c184 <_dtoa_r+0x2e4>)
 800c00e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c01a:	f7f4 fd7f 	bl	8000b1c <__aeabi_dcmplt>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d049      	beq.n	800c0b6 <_dtoa_r+0x216>
 800c022:	3f01      	subs	r7, #1
 800c024:	2300      	movs	r3, #0
 800c026:	9310      	str	r3, [sp, #64]	@ 0x40
 800c028:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c02a:	1b9b      	subs	r3, r3, r6
 800c02c:	1e5a      	subs	r2, r3, #1
 800c02e:	bf45      	ittet	mi
 800c030:	f1c3 0301 	rsbmi	r3, r3, #1
 800c034:	9300      	strmi	r3, [sp, #0]
 800c036:	2300      	movpl	r3, #0
 800c038:	2300      	movmi	r3, #0
 800c03a:	9206      	str	r2, [sp, #24]
 800c03c:	bf54      	ite	pl
 800c03e:	9300      	strpl	r3, [sp, #0]
 800c040:	9306      	strmi	r3, [sp, #24]
 800c042:	2f00      	cmp	r7, #0
 800c044:	db39      	blt.n	800c0ba <_dtoa_r+0x21a>
 800c046:	9b06      	ldr	r3, [sp, #24]
 800c048:	970d      	str	r7, [sp, #52]	@ 0x34
 800c04a:	443b      	add	r3, r7
 800c04c:	9306      	str	r3, [sp, #24]
 800c04e:	2300      	movs	r3, #0
 800c050:	9308      	str	r3, [sp, #32]
 800c052:	9b07      	ldr	r3, [sp, #28]
 800c054:	2b09      	cmp	r3, #9
 800c056:	d863      	bhi.n	800c120 <_dtoa_r+0x280>
 800c058:	2b05      	cmp	r3, #5
 800c05a:	bfc4      	itt	gt
 800c05c:	3b04      	subgt	r3, #4
 800c05e:	9307      	strgt	r3, [sp, #28]
 800c060:	9b07      	ldr	r3, [sp, #28]
 800c062:	f1a3 0302 	sub.w	r3, r3, #2
 800c066:	bfcc      	ite	gt
 800c068:	2400      	movgt	r4, #0
 800c06a:	2401      	movle	r4, #1
 800c06c:	2b03      	cmp	r3, #3
 800c06e:	d863      	bhi.n	800c138 <_dtoa_r+0x298>
 800c070:	e8df f003 	tbb	[pc, r3]
 800c074:	2b375452 	.word	0x2b375452
 800c078:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c07c:	441e      	add	r6, r3
 800c07e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c082:	2b20      	cmp	r3, #32
 800c084:	bfc1      	itttt	gt
 800c086:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c08a:	409f      	lslgt	r7, r3
 800c08c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c090:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c094:	bfd6      	itet	le
 800c096:	f1c3 0320 	rsble	r3, r3, #32
 800c09a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c09e:	fa04 f003 	lslle.w	r0, r4, r3
 800c0a2:	f7f4 fa4f 	bl	8000544 <__aeabi_ui2d>
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0ac:	3e01      	subs	r6, #1
 800c0ae:	9212      	str	r2, [sp, #72]	@ 0x48
 800c0b0:	e776      	b.n	800bfa0 <_dtoa_r+0x100>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e7b7      	b.n	800c026 <_dtoa_r+0x186>
 800c0b6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c0b8:	e7b6      	b.n	800c028 <_dtoa_r+0x188>
 800c0ba:	9b00      	ldr	r3, [sp, #0]
 800c0bc:	1bdb      	subs	r3, r3, r7
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	427b      	negs	r3, r7
 800c0c2:	9308      	str	r3, [sp, #32]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0c8:	e7c3      	b.n	800c052 <_dtoa_r+0x1b2>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0d0:	eb07 0b03 	add.w	fp, r7, r3
 800c0d4:	f10b 0301 	add.w	r3, fp, #1
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	9303      	str	r3, [sp, #12]
 800c0dc:	bfb8      	it	lt
 800c0de:	2301      	movlt	r3, #1
 800c0e0:	e006      	b.n	800c0f0 <_dtoa_r+0x250>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dd28      	ble.n	800c13e <_dtoa_r+0x29e>
 800c0ec:	469b      	mov	fp, r3
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	2204      	movs	r2, #4
 800c0f8:	f102 0514 	add.w	r5, r2, #20
 800c0fc:	429d      	cmp	r5, r3
 800c0fe:	d926      	bls.n	800c14e <_dtoa_r+0x2ae>
 800c100:	6041      	str	r1, [r0, #4]
 800c102:	4648      	mov	r0, r9
 800c104:	f000 fd9c 	bl	800cc40 <_Balloc>
 800c108:	4682      	mov	sl, r0
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d142      	bne.n	800c194 <_dtoa_r+0x2f4>
 800c10e:	4b1e      	ldr	r3, [pc, #120]	@ (800c188 <_dtoa_r+0x2e8>)
 800c110:	4602      	mov	r2, r0
 800c112:	f240 11af 	movw	r1, #431	@ 0x1af
 800c116:	e6da      	b.n	800bece <_dtoa_r+0x2e>
 800c118:	2300      	movs	r3, #0
 800c11a:	e7e3      	b.n	800c0e4 <_dtoa_r+0x244>
 800c11c:	2300      	movs	r3, #0
 800c11e:	e7d5      	b.n	800c0cc <_dtoa_r+0x22c>
 800c120:	2401      	movs	r4, #1
 800c122:	2300      	movs	r3, #0
 800c124:	9307      	str	r3, [sp, #28]
 800c126:	9409      	str	r4, [sp, #36]	@ 0x24
 800c128:	f04f 3bff 	mov.w	fp, #4294967295
 800c12c:	2200      	movs	r2, #0
 800c12e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c132:	2312      	movs	r3, #18
 800c134:	920c      	str	r2, [sp, #48]	@ 0x30
 800c136:	e7db      	b.n	800c0f0 <_dtoa_r+0x250>
 800c138:	2301      	movs	r3, #1
 800c13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c13c:	e7f4      	b.n	800c128 <_dtoa_r+0x288>
 800c13e:	f04f 0b01 	mov.w	fp, #1
 800c142:	f8cd b00c 	str.w	fp, [sp, #12]
 800c146:	465b      	mov	r3, fp
 800c148:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c14c:	e7d0      	b.n	800c0f0 <_dtoa_r+0x250>
 800c14e:	3101      	adds	r1, #1
 800c150:	0052      	lsls	r2, r2, #1
 800c152:	e7d1      	b.n	800c0f8 <_dtoa_r+0x258>
 800c154:	f3af 8000 	nop.w
 800c158:	636f4361 	.word	0x636f4361
 800c15c:	3fd287a7 	.word	0x3fd287a7
 800c160:	8b60c8b3 	.word	0x8b60c8b3
 800c164:	3fc68a28 	.word	0x3fc68a28
 800c168:	509f79fb 	.word	0x509f79fb
 800c16c:	3fd34413 	.word	0x3fd34413
 800c170:	08010d15 	.word	0x08010d15
 800c174:	08010d2c 	.word	0x08010d2c
 800c178:	7ff00000 	.word	0x7ff00000
 800c17c:	08010ce5 	.word	0x08010ce5
 800c180:	3ff80000 	.word	0x3ff80000
 800c184:	08010e80 	.word	0x08010e80
 800c188:	08010d84 	.word	0x08010d84
 800c18c:	08010d11 	.word	0x08010d11
 800c190:	08010ce4 	.word	0x08010ce4
 800c194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c198:	6018      	str	r0, [r3, #0]
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	2b0e      	cmp	r3, #14
 800c19e:	f200 80a1 	bhi.w	800c2e4 <_dtoa_r+0x444>
 800c1a2:	2c00      	cmp	r4, #0
 800c1a4:	f000 809e 	beq.w	800c2e4 <_dtoa_r+0x444>
 800c1a8:	2f00      	cmp	r7, #0
 800c1aa:	dd33      	ble.n	800c214 <_dtoa_r+0x374>
 800c1ac:	4b9c      	ldr	r3, [pc, #624]	@ (800c420 <_dtoa_r+0x580>)
 800c1ae:	f007 020f 	and.w	r2, r7, #15
 800c1b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1b6:	ed93 7b00 	vldr	d7, [r3]
 800c1ba:	05f8      	lsls	r0, r7, #23
 800c1bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c1c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1c4:	d516      	bpl.n	800c1f4 <_dtoa_r+0x354>
 800c1c6:	4b97      	ldr	r3, [pc, #604]	@ (800c424 <_dtoa_r+0x584>)
 800c1c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1d0:	f7f4 fb5c 	bl	800088c <__aeabi_ddiv>
 800c1d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1d8:	f004 040f 	and.w	r4, r4, #15
 800c1dc:	2603      	movs	r6, #3
 800c1de:	4d91      	ldr	r5, [pc, #580]	@ (800c424 <_dtoa_r+0x584>)
 800c1e0:	b954      	cbnz	r4, 800c1f8 <_dtoa_r+0x358>
 800c1e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ea:	f7f4 fb4f 	bl	800088c <__aeabi_ddiv>
 800c1ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1f2:	e028      	b.n	800c246 <_dtoa_r+0x3a6>
 800c1f4:	2602      	movs	r6, #2
 800c1f6:	e7f2      	b.n	800c1de <_dtoa_r+0x33e>
 800c1f8:	07e1      	lsls	r1, r4, #31
 800c1fa:	d508      	bpl.n	800c20e <_dtoa_r+0x36e>
 800c1fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c200:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c204:	f7f4 fa18 	bl	8000638 <__aeabi_dmul>
 800c208:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c20c:	3601      	adds	r6, #1
 800c20e:	1064      	asrs	r4, r4, #1
 800c210:	3508      	adds	r5, #8
 800c212:	e7e5      	b.n	800c1e0 <_dtoa_r+0x340>
 800c214:	f000 80af 	beq.w	800c376 <_dtoa_r+0x4d6>
 800c218:	427c      	negs	r4, r7
 800c21a:	4b81      	ldr	r3, [pc, #516]	@ (800c420 <_dtoa_r+0x580>)
 800c21c:	4d81      	ldr	r5, [pc, #516]	@ (800c424 <_dtoa_r+0x584>)
 800c21e:	f004 020f 	and.w	r2, r4, #15
 800c222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c22e:	f7f4 fa03 	bl	8000638 <__aeabi_dmul>
 800c232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c236:	1124      	asrs	r4, r4, #4
 800c238:	2300      	movs	r3, #0
 800c23a:	2602      	movs	r6, #2
 800c23c:	2c00      	cmp	r4, #0
 800c23e:	f040 808f 	bne.w	800c360 <_dtoa_r+0x4c0>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1d3      	bne.n	800c1ee <_dtoa_r+0x34e>
 800c246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c248:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 8094 	beq.w	800c37a <_dtoa_r+0x4da>
 800c252:	4b75      	ldr	r3, [pc, #468]	@ (800c428 <_dtoa_r+0x588>)
 800c254:	2200      	movs	r2, #0
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f4 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f000 808b 	beq.w	800c37a <_dtoa_r+0x4da>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 8087 	beq.w	800c37a <_dtoa_r+0x4da>
 800c26c:	f1bb 0f00 	cmp.w	fp, #0
 800c270:	dd34      	ble.n	800c2dc <_dtoa_r+0x43c>
 800c272:	4620      	mov	r0, r4
 800c274:	4b6d      	ldr	r3, [pc, #436]	@ (800c42c <_dtoa_r+0x58c>)
 800c276:	2200      	movs	r2, #0
 800c278:	4629      	mov	r1, r5
 800c27a:	f7f4 f9dd 	bl	8000638 <__aeabi_dmul>
 800c27e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c282:	f107 38ff 	add.w	r8, r7, #4294967295
 800c286:	3601      	adds	r6, #1
 800c288:	465c      	mov	r4, fp
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7f4 f96a 	bl	8000564 <__aeabi_i2d>
 800c290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c294:	f7f4 f9d0 	bl	8000638 <__aeabi_dmul>
 800c298:	4b65      	ldr	r3, [pc, #404]	@ (800c430 <_dtoa_r+0x590>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	f7f4 f816 	bl	80002cc <__adddf3>
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	d16a      	bne.n	800c380 <_dtoa_r+0x4e0>
 800c2aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ae:	4b61      	ldr	r3, [pc, #388]	@ (800c434 <_dtoa_r+0x594>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f7f4 f809 	bl	80002c8 <__aeabi_dsub>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4633      	mov	r3, r6
 800c2c2:	f7f4 fc49 	bl	8000b58 <__aeabi_dcmpgt>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f040 8298 	bne.w	800c7fc <_dtoa_r+0x95c>
 800c2cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d0:	462a      	mov	r2, r5
 800c2d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2d6:	f7f4 fc21 	bl	8000b1c <__aeabi_dcmplt>
 800c2da:	bb38      	cbnz	r0, 800c32c <_dtoa_r+0x48c>
 800c2dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c2e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f2c0 8157 	blt.w	800c59a <_dtoa_r+0x6fa>
 800c2ec:	2f0e      	cmp	r7, #14
 800c2ee:	f300 8154 	bgt.w	800c59a <_dtoa_r+0x6fa>
 800c2f2:	4b4b      	ldr	r3, [pc, #300]	@ (800c420 <_dtoa_r+0x580>)
 800c2f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2f8:	ed93 7b00 	vldr	d7, [r3]
 800c2fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	ed8d 7b00 	vstr	d7, [sp]
 800c304:	f280 80e5 	bge.w	800c4d2 <_dtoa_r+0x632>
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f300 80e1 	bgt.w	800c4d2 <_dtoa_r+0x632>
 800c310:	d10c      	bne.n	800c32c <_dtoa_r+0x48c>
 800c312:	4b48      	ldr	r3, [pc, #288]	@ (800c434 <_dtoa_r+0x594>)
 800c314:	2200      	movs	r2, #0
 800c316:	ec51 0b17 	vmov	r0, r1, d7
 800c31a:	f7f4 f98d 	bl	8000638 <__aeabi_dmul>
 800c31e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c322:	f7f4 fc0f 	bl	8000b44 <__aeabi_dcmpge>
 800c326:	2800      	cmp	r0, #0
 800c328:	f000 8266 	beq.w	800c7f8 <_dtoa_r+0x958>
 800c32c:	2400      	movs	r4, #0
 800c32e:	4625      	mov	r5, r4
 800c330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c332:	4656      	mov	r6, sl
 800c334:	ea6f 0803 	mvn.w	r8, r3
 800c338:	2700      	movs	r7, #0
 800c33a:	4621      	mov	r1, r4
 800c33c:	4648      	mov	r0, r9
 800c33e:	f000 fcbf 	bl	800ccc0 <_Bfree>
 800c342:	2d00      	cmp	r5, #0
 800c344:	f000 80bd 	beq.w	800c4c2 <_dtoa_r+0x622>
 800c348:	b12f      	cbz	r7, 800c356 <_dtoa_r+0x4b6>
 800c34a:	42af      	cmp	r7, r5
 800c34c:	d003      	beq.n	800c356 <_dtoa_r+0x4b6>
 800c34e:	4639      	mov	r1, r7
 800c350:	4648      	mov	r0, r9
 800c352:	f000 fcb5 	bl	800ccc0 <_Bfree>
 800c356:	4629      	mov	r1, r5
 800c358:	4648      	mov	r0, r9
 800c35a:	f000 fcb1 	bl	800ccc0 <_Bfree>
 800c35e:	e0b0      	b.n	800c4c2 <_dtoa_r+0x622>
 800c360:	07e2      	lsls	r2, r4, #31
 800c362:	d505      	bpl.n	800c370 <_dtoa_r+0x4d0>
 800c364:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c368:	f7f4 f966 	bl	8000638 <__aeabi_dmul>
 800c36c:	3601      	adds	r6, #1
 800c36e:	2301      	movs	r3, #1
 800c370:	1064      	asrs	r4, r4, #1
 800c372:	3508      	adds	r5, #8
 800c374:	e762      	b.n	800c23c <_dtoa_r+0x39c>
 800c376:	2602      	movs	r6, #2
 800c378:	e765      	b.n	800c246 <_dtoa_r+0x3a6>
 800c37a:	9c03      	ldr	r4, [sp, #12]
 800c37c:	46b8      	mov	r8, r7
 800c37e:	e784      	b.n	800c28a <_dtoa_r+0x3ea>
 800c380:	4b27      	ldr	r3, [pc, #156]	@ (800c420 <_dtoa_r+0x580>)
 800c382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c38c:	4454      	add	r4, sl
 800c38e:	2900      	cmp	r1, #0
 800c390:	d054      	beq.n	800c43c <_dtoa_r+0x59c>
 800c392:	4929      	ldr	r1, [pc, #164]	@ (800c438 <_dtoa_r+0x598>)
 800c394:	2000      	movs	r0, #0
 800c396:	f7f4 fa79 	bl	800088c <__aeabi_ddiv>
 800c39a:	4633      	mov	r3, r6
 800c39c:	462a      	mov	r2, r5
 800c39e:	f7f3 ff93 	bl	80002c8 <__aeabi_dsub>
 800c3a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3a6:	4656      	mov	r6, sl
 800c3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3ac:	f7f4 fbf4 	bl	8000b98 <__aeabi_d2iz>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	f7f4 f8d7 	bl	8000564 <__aeabi_i2d>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3be:	f7f3 ff83 	bl	80002c8 <__aeabi_dsub>
 800c3c2:	3530      	adds	r5, #48	@ 0x30
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3cc:	f806 5b01 	strb.w	r5, [r6], #1
 800c3d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3d4:	f7f4 fba2 	bl	8000b1c <__aeabi_dcmplt>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d172      	bne.n	800c4c2 <_dtoa_r+0x622>
 800c3dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3e0:	4911      	ldr	r1, [pc, #68]	@ (800c428 <_dtoa_r+0x588>)
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	f7f3 ff70 	bl	80002c8 <__aeabi_dsub>
 800c3e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3ec:	f7f4 fb96 	bl	8000b1c <__aeabi_dcmplt>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	f040 80b4 	bne.w	800c55e <_dtoa_r+0x6be>
 800c3f6:	42a6      	cmp	r6, r4
 800c3f8:	f43f af70 	beq.w	800c2dc <_dtoa_r+0x43c>
 800c3fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c400:	4b0a      	ldr	r3, [pc, #40]	@ (800c42c <_dtoa_r+0x58c>)
 800c402:	2200      	movs	r2, #0
 800c404:	f7f4 f918 	bl	8000638 <__aeabi_dmul>
 800c408:	4b08      	ldr	r3, [pc, #32]	@ (800c42c <_dtoa_r+0x58c>)
 800c40a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c40e:	2200      	movs	r2, #0
 800c410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c414:	f7f4 f910 	bl	8000638 <__aeabi_dmul>
 800c418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c41c:	e7c4      	b.n	800c3a8 <_dtoa_r+0x508>
 800c41e:	bf00      	nop
 800c420:	08010e80 	.word	0x08010e80
 800c424:	08010e58 	.word	0x08010e58
 800c428:	3ff00000 	.word	0x3ff00000
 800c42c:	40240000 	.word	0x40240000
 800c430:	401c0000 	.word	0x401c0000
 800c434:	40140000 	.word	0x40140000
 800c438:	3fe00000 	.word	0x3fe00000
 800c43c:	4631      	mov	r1, r6
 800c43e:	4628      	mov	r0, r5
 800c440:	f7f4 f8fa 	bl	8000638 <__aeabi_dmul>
 800c444:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c448:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c44a:	4656      	mov	r6, sl
 800c44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c450:	f7f4 fba2 	bl	8000b98 <__aeabi_d2iz>
 800c454:	4605      	mov	r5, r0
 800c456:	f7f4 f885 	bl	8000564 <__aeabi_i2d>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c462:	f7f3 ff31 	bl	80002c8 <__aeabi_dsub>
 800c466:	3530      	adds	r5, #48	@ 0x30
 800c468:	f806 5b01 	strb.w	r5, [r6], #1
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	42a6      	cmp	r6, r4
 800c472:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	d124      	bne.n	800c4c6 <_dtoa_r+0x626>
 800c47c:	4baf      	ldr	r3, [pc, #700]	@ (800c73c <_dtoa_r+0x89c>)
 800c47e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c482:	f7f3 ff23 	bl	80002cc <__adddf3>
 800c486:	4602      	mov	r2, r0
 800c488:	460b      	mov	r3, r1
 800c48a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c48e:	f7f4 fb63 	bl	8000b58 <__aeabi_dcmpgt>
 800c492:	2800      	cmp	r0, #0
 800c494:	d163      	bne.n	800c55e <_dtoa_r+0x6be>
 800c496:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c49a:	49a8      	ldr	r1, [pc, #672]	@ (800c73c <_dtoa_r+0x89c>)
 800c49c:	2000      	movs	r0, #0
 800c49e:	f7f3 ff13 	bl	80002c8 <__aeabi_dsub>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4aa:	f7f4 fb37 	bl	8000b1c <__aeabi_dcmplt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f43f af14 	beq.w	800c2dc <_dtoa_r+0x43c>
 800c4b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c4b6:	1e73      	subs	r3, r6, #1
 800c4b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4be:	2b30      	cmp	r3, #48	@ 0x30
 800c4c0:	d0f8      	beq.n	800c4b4 <_dtoa_r+0x614>
 800c4c2:	4647      	mov	r7, r8
 800c4c4:	e03b      	b.n	800c53e <_dtoa_r+0x69e>
 800c4c6:	4b9e      	ldr	r3, [pc, #632]	@ (800c740 <_dtoa_r+0x8a0>)
 800c4c8:	f7f4 f8b6 	bl	8000638 <__aeabi_dmul>
 800c4cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4d0:	e7bc      	b.n	800c44c <_dtoa_r+0x5ac>
 800c4d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4d6:	4656      	mov	r6, sl
 800c4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 f9d4 	bl	800088c <__aeabi_ddiv>
 800c4e4:	f7f4 fb58 	bl	8000b98 <__aeabi_d2iz>
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	f7f4 f83b 	bl	8000564 <__aeabi_i2d>
 800c4ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f2:	f7f4 f8a1 	bl	8000638 <__aeabi_dmul>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c502:	f7f3 fee1 	bl	80002c8 <__aeabi_dsub>
 800c506:	f806 4b01 	strb.w	r4, [r6], #1
 800c50a:	9d03      	ldr	r5, [sp, #12]
 800c50c:	eba6 040a 	sub.w	r4, r6, sl
 800c510:	42a5      	cmp	r5, r4
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	d133      	bne.n	800c580 <_dtoa_r+0x6e0>
 800c518:	f7f3 fed8 	bl	80002cc <__adddf3>
 800c51c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c520:	4604      	mov	r4, r0
 800c522:	460d      	mov	r5, r1
 800c524:	f7f4 fb18 	bl	8000b58 <__aeabi_dcmpgt>
 800c528:	b9c0      	cbnz	r0, 800c55c <_dtoa_r+0x6bc>
 800c52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c52e:	4620      	mov	r0, r4
 800c530:	4629      	mov	r1, r5
 800c532:	f7f4 fae9 	bl	8000b08 <__aeabi_dcmpeq>
 800c536:	b110      	cbz	r0, 800c53e <_dtoa_r+0x69e>
 800c538:	f018 0f01 	tst.w	r8, #1
 800c53c:	d10e      	bne.n	800c55c <_dtoa_r+0x6bc>
 800c53e:	9902      	ldr	r1, [sp, #8]
 800c540:	4648      	mov	r0, r9
 800c542:	f000 fbbd 	bl	800ccc0 <_Bfree>
 800c546:	2300      	movs	r3, #0
 800c548:	7033      	strb	r3, [r6, #0]
 800c54a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c54c:	3701      	adds	r7, #1
 800c54e:	601f      	str	r7, [r3, #0]
 800c550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 824b 	beq.w	800c9ee <_dtoa_r+0xb4e>
 800c558:	601e      	str	r6, [r3, #0]
 800c55a:	e248      	b.n	800c9ee <_dtoa_r+0xb4e>
 800c55c:	46b8      	mov	r8, r7
 800c55e:	4633      	mov	r3, r6
 800c560:	461e      	mov	r6, r3
 800c562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c566:	2a39      	cmp	r2, #57	@ 0x39
 800c568:	d106      	bne.n	800c578 <_dtoa_r+0x6d8>
 800c56a:	459a      	cmp	sl, r3
 800c56c:	d1f8      	bne.n	800c560 <_dtoa_r+0x6c0>
 800c56e:	2230      	movs	r2, #48	@ 0x30
 800c570:	f108 0801 	add.w	r8, r8, #1
 800c574:	f88a 2000 	strb.w	r2, [sl]
 800c578:	781a      	ldrb	r2, [r3, #0]
 800c57a:	3201      	adds	r2, #1
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	e7a0      	b.n	800c4c2 <_dtoa_r+0x622>
 800c580:	4b6f      	ldr	r3, [pc, #444]	@ (800c740 <_dtoa_r+0x8a0>)
 800c582:	2200      	movs	r2, #0
 800c584:	f7f4 f858 	bl	8000638 <__aeabi_dmul>
 800c588:	2200      	movs	r2, #0
 800c58a:	2300      	movs	r3, #0
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	f7f4 faba 	bl	8000b08 <__aeabi_dcmpeq>
 800c594:	2800      	cmp	r0, #0
 800c596:	d09f      	beq.n	800c4d8 <_dtoa_r+0x638>
 800c598:	e7d1      	b.n	800c53e <_dtoa_r+0x69e>
 800c59a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	f000 80ea 	beq.w	800c776 <_dtoa_r+0x8d6>
 800c5a2:	9a07      	ldr	r2, [sp, #28]
 800c5a4:	2a01      	cmp	r2, #1
 800c5a6:	f300 80cd 	bgt.w	800c744 <_dtoa_r+0x8a4>
 800c5aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5ac:	2a00      	cmp	r2, #0
 800c5ae:	f000 80c1 	beq.w	800c734 <_dtoa_r+0x894>
 800c5b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5b6:	9c08      	ldr	r4, [sp, #32]
 800c5b8:	9e00      	ldr	r6, [sp, #0]
 800c5ba:	9a00      	ldr	r2, [sp, #0]
 800c5bc:	441a      	add	r2, r3
 800c5be:	9200      	str	r2, [sp, #0]
 800c5c0:	9a06      	ldr	r2, [sp, #24]
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	441a      	add	r2, r3
 800c5c6:	4648      	mov	r0, r9
 800c5c8:	9206      	str	r2, [sp, #24]
 800c5ca:	f000 fc2d 	bl	800ce28 <__i2b>
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	b166      	cbz	r6, 800c5ec <_dtoa_r+0x74c>
 800c5d2:	9b06      	ldr	r3, [sp, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dd09      	ble.n	800c5ec <_dtoa_r+0x74c>
 800c5d8:	42b3      	cmp	r3, r6
 800c5da:	9a00      	ldr	r2, [sp, #0]
 800c5dc:	bfa8      	it	ge
 800c5de:	4633      	movge	r3, r6
 800c5e0:	1ad2      	subs	r2, r2, r3
 800c5e2:	9200      	str	r2, [sp, #0]
 800c5e4:	9a06      	ldr	r2, [sp, #24]
 800c5e6:	1af6      	subs	r6, r6, r3
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	9306      	str	r3, [sp, #24]
 800c5ec:	9b08      	ldr	r3, [sp, #32]
 800c5ee:	b30b      	cbz	r3, 800c634 <_dtoa_r+0x794>
 800c5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f000 80c6 	beq.w	800c784 <_dtoa_r+0x8e4>
 800c5f8:	2c00      	cmp	r4, #0
 800c5fa:	f000 80c0 	beq.w	800c77e <_dtoa_r+0x8de>
 800c5fe:	4629      	mov	r1, r5
 800c600:	4622      	mov	r2, r4
 800c602:	4648      	mov	r0, r9
 800c604:	f000 fcc8 	bl	800cf98 <__pow5mult>
 800c608:	9a02      	ldr	r2, [sp, #8]
 800c60a:	4601      	mov	r1, r0
 800c60c:	4605      	mov	r5, r0
 800c60e:	4648      	mov	r0, r9
 800c610:	f000 fc20 	bl	800ce54 <__multiply>
 800c614:	9902      	ldr	r1, [sp, #8]
 800c616:	4680      	mov	r8, r0
 800c618:	4648      	mov	r0, r9
 800c61a:	f000 fb51 	bl	800ccc0 <_Bfree>
 800c61e:	9b08      	ldr	r3, [sp, #32]
 800c620:	1b1b      	subs	r3, r3, r4
 800c622:	9308      	str	r3, [sp, #32]
 800c624:	f000 80b1 	beq.w	800c78a <_dtoa_r+0x8ea>
 800c628:	9a08      	ldr	r2, [sp, #32]
 800c62a:	4641      	mov	r1, r8
 800c62c:	4648      	mov	r0, r9
 800c62e:	f000 fcb3 	bl	800cf98 <__pow5mult>
 800c632:	9002      	str	r0, [sp, #8]
 800c634:	2101      	movs	r1, #1
 800c636:	4648      	mov	r0, r9
 800c638:	f000 fbf6 	bl	800ce28 <__i2b>
 800c63c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c63e:	4604      	mov	r4, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 81d8 	beq.w	800c9f6 <_dtoa_r+0xb56>
 800c646:	461a      	mov	r2, r3
 800c648:	4601      	mov	r1, r0
 800c64a:	4648      	mov	r0, r9
 800c64c:	f000 fca4 	bl	800cf98 <__pow5mult>
 800c650:	9b07      	ldr	r3, [sp, #28]
 800c652:	2b01      	cmp	r3, #1
 800c654:	4604      	mov	r4, r0
 800c656:	f300 809f 	bgt.w	800c798 <_dtoa_r+0x8f8>
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f040 8097 	bne.w	800c790 <_dtoa_r+0x8f0>
 800c662:	9b05      	ldr	r3, [sp, #20]
 800c664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f040 8093 	bne.w	800c794 <_dtoa_r+0x8f4>
 800c66e:	9b05      	ldr	r3, [sp, #20]
 800c670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c674:	0d1b      	lsrs	r3, r3, #20
 800c676:	051b      	lsls	r3, r3, #20
 800c678:	b133      	cbz	r3, 800c688 <_dtoa_r+0x7e8>
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	3301      	adds	r3, #1
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	9b06      	ldr	r3, [sp, #24]
 800c682:	3301      	adds	r3, #1
 800c684:	9306      	str	r3, [sp, #24]
 800c686:	2301      	movs	r3, #1
 800c688:	9308      	str	r3, [sp, #32]
 800c68a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 81b8 	beq.w	800ca02 <_dtoa_r+0xb62>
 800c692:	6923      	ldr	r3, [r4, #16]
 800c694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c698:	6918      	ldr	r0, [r3, #16]
 800c69a:	f000 fb79 	bl	800cd90 <__hi0bits>
 800c69e:	f1c0 0020 	rsb	r0, r0, #32
 800c6a2:	9b06      	ldr	r3, [sp, #24]
 800c6a4:	4418      	add	r0, r3
 800c6a6:	f010 001f 	ands.w	r0, r0, #31
 800c6aa:	f000 8082 	beq.w	800c7b2 <_dtoa_r+0x912>
 800c6ae:	f1c0 0320 	rsb	r3, r0, #32
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	dd73      	ble.n	800c79e <_dtoa_r+0x8fe>
 800c6b6:	9b00      	ldr	r3, [sp, #0]
 800c6b8:	f1c0 001c 	rsb	r0, r0, #28
 800c6bc:	4403      	add	r3, r0
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	9b06      	ldr	r3, [sp, #24]
 800c6c2:	4403      	add	r3, r0
 800c6c4:	4406      	add	r6, r0
 800c6c6:	9306      	str	r3, [sp, #24]
 800c6c8:	9b00      	ldr	r3, [sp, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dd05      	ble.n	800c6da <_dtoa_r+0x83a>
 800c6ce:	9902      	ldr	r1, [sp, #8]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4648      	mov	r0, r9
 800c6d4:	f000 fcba 	bl	800d04c <__lshift>
 800c6d8:	9002      	str	r0, [sp, #8]
 800c6da:	9b06      	ldr	r3, [sp, #24]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dd05      	ble.n	800c6ec <_dtoa_r+0x84c>
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4648      	mov	r0, r9
 800c6e6:	f000 fcb1 	bl	800d04c <__lshift>
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d061      	beq.n	800c7b6 <_dtoa_r+0x916>
 800c6f2:	9802      	ldr	r0, [sp, #8]
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	f000 fd15 	bl	800d124 <__mcmp>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	da5b      	bge.n	800c7b6 <_dtoa_r+0x916>
 800c6fe:	2300      	movs	r3, #0
 800c700:	9902      	ldr	r1, [sp, #8]
 800c702:	220a      	movs	r2, #10
 800c704:	4648      	mov	r0, r9
 800c706:	f000 fafd 	bl	800cd04 <__multadd>
 800c70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c70c:	9002      	str	r0, [sp, #8]
 800c70e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8177 	beq.w	800ca06 <_dtoa_r+0xb66>
 800c718:	4629      	mov	r1, r5
 800c71a:	2300      	movs	r3, #0
 800c71c:	220a      	movs	r2, #10
 800c71e:	4648      	mov	r0, r9
 800c720:	f000 faf0 	bl	800cd04 <__multadd>
 800c724:	f1bb 0f00 	cmp.w	fp, #0
 800c728:	4605      	mov	r5, r0
 800c72a:	dc6f      	bgt.n	800c80c <_dtoa_r+0x96c>
 800c72c:	9b07      	ldr	r3, [sp, #28]
 800c72e:	2b02      	cmp	r3, #2
 800c730:	dc49      	bgt.n	800c7c6 <_dtoa_r+0x926>
 800c732:	e06b      	b.n	800c80c <_dtoa_r+0x96c>
 800c734:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c736:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c73a:	e73c      	b.n	800c5b6 <_dtoa_r+0x716>
 800c73c:	3fe00000 	.word	0x3fe00000
 800c740:	40240000 	.word	0x40240000
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	1e5c      	subs	r4, r3, #1
 800c748:	9b08      	ldr	r3, [sp, #32]
 800c74a:	42a3      	cmp	r3, r4
 800c74c:	db09      	blt.n	800c762 <_dtoa_r+0x8c2>
 800c74e:	1b1c      	subs	r4, r3, r4
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f6bf af30 	bge.w	800c5b8 <_dtoa_r+0x718>
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	9a03      	ldr	r2, [sp, #12]
 800c75c:	1a9e      	subs	r6, r3, r2
 800c75e:	2300      	movs	r3, #0
 800c760:	e72b      	b.n	800c5ba <_dtoa_r+0x71a>
 800c762:	9b08      	ldr	r3, [sp, #32]
 800c764:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c766:	9408      	str	r4, [sp, #32]
 800c768:	1ae3      	subs	r3, r4, r3
 800c76a:	441a      	add	r2, r3
 800c76c:	9e00      	ldr	r6, [sp, #0]
 800c76e:	9b03      	ldr	r3, [sp, #12]
 800c770:	920d      	str	r2, [sp, #52]	@ 0x34
 800c772:	2400      	movs	r4, #0
 800c774:	e721      	b.n	800c5ba <_dtoa_r+0x71a>
 800c776:	9c08      	ldr	r4, [sp, #32]
 800c778:	9e00      	ldr	r6, [sp, #0]
 800c77a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c77c:	e728      	b.n	800c5d0 <_dtoa_r+0x730>
 800c77e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c782:	e751      	b.n	800c628 <_dtoa_r+0x788>
 800c784:	9a08      	ldr	r2, [sp, #32]
 800c786:	9902      	ldr	r1, [sp, #8]
 800c788:	e750      	b.n	800c62c <_dtoa_r+0x78c>
 800c78a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c78e:	e751      	b.n	800c634 <_dtoa_r+0x794>
 800c790:	2300      	movs	r3, #0
 800c792:	e779      	b.n	800c688 <_dtoa_r+0x7e8>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	e777      	b.n	800c688 <_dtoa_r+0x7e8>
 800c798:	2300      	movs	r3, #0
 800c79a:	9308      	str	r3, [sp, #32]
 800c79c:	e779      	b.n	800c692 <_dtoa_r+0x7f2>
 800c79e:	d093      	beq.n	800c6c8 <_dtoa_r+0x828>
 800c7a0:	9a00      	ldr	r2, [sp, #0]
 800c7a2:	331c      	adds	r3, #28
 800c7a4:	441a      	add	r2, r3
 800c7a6:	9200      	str	r2, [sp, #0]
 800c7a8:	9a06      	ldr	r2, [sp, #24]
 800c7aa:	441a      	add	r2, r3
 800c7ac:	441e      	add	r6, r3
 800c7ae:	9206      	str	r2, [sp, #24]
 800c7b0:	e78a      	b.n	800c6c8 <_dtoa_r+0x828>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	e7f4      	b.n	800c7a0 <_dtoa_r+0x900>
 800c7b6:	9b03      	ldr	r3, [sp, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	46b8      	mov	r8, r7
 800c7bc:	dc20      	bgt.n	800c800 <_dtoa_r+0x960>
 800c7be:	469b      	mov	fp, r3
 800c7c0:	9b07      	ldr	r3, [sp, #28]
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	dd1e      	ble.n	800c804 <_dtoa_r+0x964>
 800c7c6:	f1bb 0f00 	cmp.w	fp, #0
 800c7ca:	f47f adb1 	bne.w	800c330 <_dtoa_r+0x490>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	465b      	mov	r3, fp
 800c7d2:	2205      	movs	r2, #5
 800c7d4:	4648      	mov	r0, r9
 800c7d6:	f000 fa95 	bl	800cd04 <__multadd>
 800c7da:	4601      	mov	r1, r0
 800c7dc:	4604      	mov	r4, r0
 800c7de:	9802      	ldr	r0, [sp, #8]
 800c7e0:	f000 fca0 	bl	800d124 <__mcmp>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	f77f ada3 	ble.w	800c330 <_dtoa_r+0x490>
 800c7ea:	4656      	mov	r6, sl
 800c7ec:	2331      	movs	r3, #49	@ 0x31
 800c7ee:	f806 3b01 	strb.w	r3, [r6], #1
 800c7f2:	f108 0801 	add.w	r8, r8, #1
 800c7f6:	e59f      	b.n	800c338 <_dtoa_r+0x498>
 800c7f8:	9c03      	ldr	r4, [sp, #12]
 800c7fa:	46b8      	mov	r8, r7
 800c7fc:	4625      	mov	r5, r4
 800c7fe:	e7f4      	b.n	800c7ea <_dtoa_r+0x94a>
 800c800:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 8101 	beq.w	800ca0e <_dtoa_r+0xb6e>
 800c80c:	2e00      	cmp	r6, #0
 800c80e:	dd05      	ble.n	800c81c <_dtoa_r+0x97c>
 800c810:	4629      	mov	r1, r5
 800c812:	4632      	mov	r2, r6
 800c814:	4648      	mov	r0, r9
 800c816:	f000 fc19 	bl	800d04c <__lshift>
 800c81a:	4605      	mov	r5, r0
 800c81c:	9b08      	ldr	r3, [sp, #32]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d05c      	beq.n	800c8dc <_dtoa_r+0xa3c>
 800c822:	6869      	ldr	r1, [r5, #4]
 800c824:	4648      	mov	r0, r9
 800c826:	f000 fa0b 	bl	800cc40 <_Balloc>
 800c82a:	4606      	mov	r6, r0
 800c82c:	b928      	cbnz	r0, 800c83a <_dtoa_r+0x99a>
 800c82e:	4b82      	ldr	r3, [pc, #520]	@ (800ca38 <_dtoa_r+0xb98>)
 800c830:	4602      	mov	r2, r0
 800c832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c836:	f7ff bb4a 	b.w	800bece <_dtoa_r+0x2e>
 800c83a:	692a      	ldr	r2, [r5, #16]
 800c83c:	3202      	adds	r2, #2
 800c83e:	0092      	lsls	r2, r2, #2
 800c840:	f105 010c 	add.w	r1, r5, #12
 800c844:	300c      	adds	r0, #12
 800c846:	f7ff fa92 	bl	800bd6e <memcpy>
 800c84a:	2201      	movs	r2, #1
 800c84c:	4631      	mov	r1, r6
 800c84e:	4648      	mov	r0, r9
 800c850:	f000 fbfc 	bl	800d04c <__lshift>
 800c854:	f10a 0301 	add.w	r3, sl, #1
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	eb0a 030b 	add.w	r3, sl, fp
 800c85e:	9308      	str	r3, [sp, #32]
 800c860:	9b04      	ldr	r3, [sp, #16]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	462f      	mov	r7, r5
 800c868:	9306      	str	r3, [sp, #24]
 800c86a:	4605      	mov	r5, r0
 800c86c:	9b00      	ldr	r3, [sp, #0]
 800c86e:	9802      	ldr	r0, [sp, #8]
 800c870:	4621      	mov	r1, r4
 800c872:	f103 3bff 	add.w	fp, r3, #4294967295
 800c876:	f7ff fa88 	bl	800bd8a <quorem>
 800c87a:	4603      	mov	r3, r0
 800c87c:	3330      	adds	r3, #48	@ 0x30
 800c87e:	9003      	str	r0, [sp, #12]
 800c880:	4639      	mov	r1, r7
 800c882:	9802      	ldr	r0, [sp, #8]
 800c884:	9309      	str	r3, [sp, #36]	@ 0x24
 800c886:	f000 fc4d 	bl	800d124 <__mcmp>
 800c88a:	462a      	mov	r2, r5
 800c88c:	9004      	str	r0, [sp, #16]
 800c88e:	4621      	mov	r1, r4
 800c890:	4648      	mov	r0, r9
 800c892:	f000 fc63 	bl	800d15c <__mdiff>
 800c896:	68c2      	ldr	r2, [r0, #12]
 800c898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89a:	4606      	mov	r6, r0
 800c89c:	bb02      	cbnz	r2, 800c8e0 <_dtoa_r+0xa40>
 800c89e:	4601      	mov	r1, r0
 800c8a0:	9802      	ldr	r0, [sp, #8]
 800c8a2:	f000 fc3f 	bl	800d124 <__mcmp>
 800c8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4648      	mov	r0, r9
 800c8ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8b2:	f000 fa05 	bl	800ccc0 <_Bfree>
 800c8b6:	9b07      	ldr	r3, [sp, #28]
 800c8b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c8ba:	9e00      	ldr	r6, [sp, #0]
 800c8bc:	ea42 0103 	orr.w	r1, r2, r3
 800c8c0:	9b06      	ldr	r3, [sp, #24]
 800c8c2:	4319      	orrs	r1, r3
 800c8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c6:	d10d      	bne.n	800c8e4 <_dtoa_r+0xa44>
 800c8c8:	2b39      	cmp	r3, #57	@ 0x39
 800c8ca:	d027      	beq.n	800c91c <_dtoa_r+0xa7c>
 800c8cc:	9a04      	ldr	r2, [sp, #16]
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	dd01      	ble.n	800c8d6 <_dtoa_r+0xa36>
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	3331      	adds	r3, #49	@ 0x31
 800c8d6:	f88b 3000 	strb.w	r3, [fp]
 800c8da:	e52e      	b.n	800c33a <_dtoa_r+0x49a>
 800c8dc:	4628      	mov	r0, r5
 800c8de:	e7b9      	b.n	800c854 <_dtoa_r+0x9b4>
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	e7e2      	b.n	800c8aa <_dtoa_r+0xa0a>
 800c8e4:	9904      	ldr	r1, [sp, #16]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	db04      	blt.n	800c8f4 <_dtoa_r+0xa54>
 800c8ea:	9807      	ldr	r0, [sp, #28]
 800c8ec:	4301      	orrs	r1, r0
 800c8ee:	9806      	ldr	r0, [sp, #24]
 800c8f0:	4301      	orrs	r1, r0
 800c8f2:	d120      	bne.n	800c936 <_dtoa_r+0xa96>
 800c8f4:	2a00      	cmp	r2, #0
 800c8f6:	ddee      	ble.n	800c8d6 <_dtoa_r+0xa36>
 800c8f8:	9902      	ldr	r1, [sp, #8]
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	4648      	mov	r0, r9
 800c900:	f000 fba4 	bl	800d04c <__lshift>
 800c904:	4621      	mov	r1, r4
 800c906:	9002      	str	r0, [sp, #8]
 800c908:	f000 fc0c 	bl	800d124 <__mcmp>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	9b00      	ldr	r3, [sp, #0]
 800c910:	dc02      	bgt.n	800c918 <_dtoa_r+0xa78>
 800c912:	d1e0      	bne.n	800c8d6 <_dtoa_r+0xa36>
 800c914:	07da      	lsls	r2, r3, #31
 800c916:	d5de      	bpl.n	800c8d6 <_dtoa_r+0xa36>
 800c918:	2b39      	cmp	r3, #57	@ 0x39
 800c91a:	d1da      	bne.n	800c8d2 <_dtoa_r+0xa32>
 800c91c:	2339      	movs	r3, #57	@ 0x39
 800c91e:	f88b 3000 	strb.w	r3, [fp]
 800c922:	4633      	mov	r3, r6
 800c924:	461e      	mov	r6, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c92c:	2a39      	cmp	r2, #57	@ 0x39
 800c92e:	d04e      	beq.n	800c9ce <_dtoa_r+0xb2e>
 800c930:	3201      	adds	r2, #1
 800c932:	701a      	strb	r2, [r3, #0]
 800c934:	e501      	b.n	800c33a <_dtoa_r+0x49a>
 800c936:	2a00      	cmp	r2, #0
 800c938:	dd03      	ble.n	800c942 <_dtoa_r+0xaa2>
 800c93a:	2b39      	cmp	r3, #57	@ 0x39
 800c93c:	d0ee      	beq.n	800c91c <_dtoa_r+0xa7c>
 800c93e:	3301      	adds	r3, #1
 800c940:	e7c9      	b.n	800c8d6 <_dtoa_r+0xa36>
 800c942:	9a00      	ldr	r2, [sp, #0]
 800c944:	9908      	ldr	r1, [sp, #32]
 800c946:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c94a:	428a      	cmp	r2, r1
 800c94c:	d028      	beq.n	800c9a0 <_dtoa_r+0xb00>
 800c94e:	9902      	ldr	r1, [sp, #8]
 800c950:	2300      	movs	r3, #0
 800c952:	220a      	movs	r2, #10
 800c954:	4648      	mov	r0, r9
 800c956:	f000 f9d5 	bl	800cd04 <__multadd>
 800c95a:	42af      	cmp	r7, r5
 800c95c:	9002      	str	r0, [sp, #8]
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	f04f 020a 	mov.w	r2, #10
 800c966:	4639      	mov	r1, r7
 800c968:	4648      	mov	r0, r9
 800c96a:	d107      	bne.n	800c97c <_dtoa_r+0xadc>
 800c96c:	f000 f9ca 	bl	800cd04 <__multadd>
 800c970:	4607      	mov	r7, r0
 800c972:	4605      	mov	r5, r0
 800c974:	9b00      	ldr	r3, [sp, #0]
 800c976:	3301      	adds	r3, #1
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	e777      	b.n	800c86c <_dtoa_r+0x9cc>
 800c97c:	f000 f9c2 	bl	800cd04 <__multadd>
 800c980:	4629      	mov	r1, r5
 800c982:	4607      	mov	r7, r0
 800c984:	2300      	movs	r3, #0
 800c986:	220a      	movs	r2, #10
 800c988:	4648      	mov	r0, r9
 800c98a:	f000 f9bb 	bl	800cd04 <__multadd>
 800c98e:	4605      	mov	r5, r0
 800c990:	e7f0      	b.n	800c974 <_dtoa_r+0xad4>
 800c992:	f1bb 0f00 	cmp.w	fp, #0
 800c996:	bfcc      	ite	gt
 800c998:	465e      	movgt	r6, fp
 800c99a:	2601      	movle	r6, #1
 800c99c:	4456      	add	r6, sl
 800c99e:	2700      	movs	r7, #0
 800c9a0:	9902      	ldr	r1, [sp, #8]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	4648      	mov	r0, r9
 800c9a8:	f000 fb50 	bl	800d04c <__lshift>
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	9002      	str	r0, [sp, #8]
 800c9b0:	f000 fbb8 	bl	800d124 <__mcmp>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	dcb4      	bgt.n	800c922 <_dtoa_r+0xa82>
 800c9b8:	d102      	bne.n	800c9c0 <_dtoa_r+0xb20>
 800c9ba:	9b00      	ldr	r3, [sp, #0]
 800c9bc:	07db      	lsls	r3, r3, #31
 800c9be:	d4b0      	bmi.n	800c922 <_dtoa_r+0xa82>
 800c9c0:	4633      	mov	r3, r6
 800c9c2:	461e      	mov	r6, r3
 800c9c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9c8:	2a30      	cmp	r2, #48	@ 0x30
 800c9ca:	d0fa      	beq.n	800c9c2 <_dtoa_r+0xb22>
 800c9cc:	e4b5      	b.n	800c33a <_dtoa_r+0x49a>
 800c9ce:	459a      	cmp	sl, r3
 800c9d0:	d1a8      	bne.n	800c924 <_dtoa_r+0xa84>
 800c9d2:	2331      	movs	r3, #49	@ 0x31
 800c9d4:	f108 0801 	add.w	r8, r8, #1
 800c9d8:	f88a 3000 	strb.w	r3, [sl]
 800c9dc:	e4ad      	b.n	800c33a <_dtoa_r+0x49a>
 800c9de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca3c <_dtoa_r+0xb9c>
 800c9e4:	b11b      	cbz	r3, 800c9ee <_dtoa_r+0xb4e>
 800c9e6:	f10a 0308 	add.w	r3, sl, #8
 800c9ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	4650      	mov	r0, sl
 800c9f0:	b017      	add	sp, #92	@ 0x5c
 800c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f6:	9b07      	ldr	r3, [sp, #28]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	f77f ae2e 	ble.w	800c65a <_dtoa_r+0x7ba>
 800c9fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca00:	9308      	str	r3, [sp, #32]
 800ca02:	2001      	movs	r0, #1
 800ca04:	e64d      	b.n	800c6a2 <_dtoa_r+0x802>
 800ca06:	f1bb 0f00 	cmp.w	fp, #0
 800ca0a:	f77f aed9 	ble.w	800c7c0 <_dtoa_r+0x920>
 800ca0e:	4656      	mov	r6, sl
 800ca10:	9802      	ldr	r0, [sp, #8]
 800ca12:	4621      	mov	r1, r4
 800ca14:	f7ff f9b9 	bl	800bd8a <quorem>
 800ca18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ca1c:	f806 3b01 	strb.w	r3, [r6], #1
 800ca20:	eba6 020a 	sub.w	r2, r6, sl
 800ca24:	4593      	cmp	fp, r2
 800ca26:	ddb4      	ble.n	800c992 <_dtoa_r+0xaf2>
 800ca28:	9902      	ldr	r1, [sp, #8]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	220a      	movs	r2, #10
 800ca2e:	4648      	mov	r0, r9
 800ca30:	f000 f968 	bl	800cd04 <__multadd>
 800ca34:	9002      	str	r0, [sp, #8]
 800ca36:	e7eb      	b.n	800ca10 <_dtoa_r+0xb70>
 800ca38:	08010d84 	.word	0x08010d84
 800ca3c:	08010d08 	.word	0x08010d08

0800ca40 <_free_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4605      	mov	r5, r0
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d041      	beq.n	800cacc <_free_r+0x8c>
 800ca48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca4c:	1f0c      	subs	r4, r1, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bfb8      	it	lt
 800ca52:	18e4      	addlt	r4, r4, r3
 800ca54:	f000 f8e8 	bl	800cc28 <__malloc_lock>
 800ca58:	4a1d      	ldr	r2, [pc, #116]	@ (800cad0 <_free_r+0x90>)
 800ca5a:	6813      	ldr	r3, [r2, #0]
 800ca5c:	b933      	cbnz	r3, 800ca6c <_free_r+0x2c>
 800ca5e:	6063      	str	r3, [r4, #4]
 800ca60:	6014      	str	r4, [r2, #0]
 800ca62:	4628      	mov	r0, r5
 800ca64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca68:	f000 b8e4 	b.w	800cc34 <__malloc_unlock>
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	d908      	bls.n	800ca82 <_free_r+0x42>
 800ca70:	6820      	ldr	r0, [r4, #0]
 800ca72:	1821      	adds	r1, r4, r0
 800ca74:	428b      	cmp	r3, r1
 800ca76:	bf01      	itttt	eq
 800ca78:	6819      	ldreq	r1, [r3, #0]
 800ca7a:	685b      	ldreq	r3, [r3, #4]
 800ca7c:	1809      	addeq	r1, r1, r0
 800ca7e:	6021      	streq	r1, [r4, #0]
 800ca80:	e7ed      	b.n	800ca5e <_free_r+0x1e>
 800ca82:	461a      	mov	r2, r3
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	b10b      	cbz	r3, 800ca8c <_free_r+0x4c>
 800ca88:	42a3      	cmp	r3, r4
 800ca8a:	d9fa      	bls.n	800ca82 <_free_r+0x42>
 800ca8c:	6811      	ldr	r1, [r2, #0]
 800ca8e:	1850      	adds	r0, r2, r1
 800ca90:	42a0      	cmp	r0, r4
 800ca92:	d10b      	bne.n	800caac <_free_r+0x6c>
 800ca94:	6820      	ldr	r0, [r4, #0]
 800ca96:	4401      	add	r1, r0
 800ca98:	1850      	adds	r0, r2, r1
 800ca9a:	4283      	cmp	r3, r0
 800ca9c:	6011      	str	r1, [r2, #0]
 800ca9e:	d1e0      	bne.n	800ca62 <_free_r+0x22>
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	6053      	str	r3, [r2, #4]
 800caa6:	4408      	add	r0, r1
 800caa8:	6010      	str	r0, [r2, #0]
 800caaa:	e7da      	b.n	800ca62 <_free_r+0x22>
 800caac:	d902      	bls.n	800cab4 <_free_r+0x74>
 800caae:	230c      	movs	r3, #12
 800cab0:	602b      	str	r3, [r5, #0]
 800cab2:	e7d6      	b.n	800ca62 <_free_r+0x22>
 800cab4:	6820      	ldr	r0, [r4, #0]
 800cab6:	1821      	adds	r1, r4, r0
 800cab8:	428b      	cmp	r3, r1
 800caba:	bf04      	itt	eq
 800cabc:	6819      	ldreq	r1, [r3, #0]
 800cabe:	685b      	ldreq	r3, [r3, #4]
 800cac0:	6063      	str	r3, [r4, #4]
 800cac2:	bf04      	itt	eq
 800cac4:	1809      	addeq	r1, r1, r0
 800cac6:	6021      	streq	r1, [r4, #0]
 800cac8:	6054      	str	r4, [r2, #4]
 800caca:	e7ca      	b.n	800ca62 <_free_r+0x22>
 800cacc:	bd38      	pop	{r3, r4, r5, pc}
 800cace:	bf00      	nop
 800cad0:	20000efc 	.word	0x20000efc

0800cad4 <malloc>:
 800cad4:	4b02      	ldr	r3, [pc, #8]	@ (800cae0 <malloc+0xc>)
 800cad6:	4601      	mov	r1, r0
 800cad8:	6818      	ldr	r0, [r3, #0]
 800cada:	f000 b825 	b.w	800cb28 <_malloc_r>
 800cade:	bf00      	nop
 800cae0:	200000b4 	.word	0x200000b4

0800cae4 <sbrk_aligned>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	4e0f      	ldr	r6, [pc, #60]	@ (800cb24 <sbrk_aligned+0x40>)
 800cae8:	460c      	mov	r4, r1
 800caea:	6831      	ldr	r1, [r6, #0]
 800caec:	4605      	mov	r5, r0
 800caee:	b911      	cbnz	r1, 800caf6 <sbrk_aligned+0x12>
 800caf0:	f000 fe3e 	bl	800d770 <_sbrk_r>
 800caf4:	6030      	str	r0, [r6, #0]
 800caf6:	4621      	mov	r1, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	f000 fe39 	bl	800d770 <_sbrk_r>
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	d103      	bne.n	800cb0a <sbrk_aligned+0x26>
 800cb02:	f04f 34ff 	mov.w	r4, #4294967295
 800cb06:	4620      	mov	r0, r4
 800cb08:	bd70      	pop	{r4, r5, r6, pc}
 800cb0a:	1cc4      	adds	r4, r0, #3
 800cb0c:	f024 0403 	bic.w	r4, r4, #3
 800cb10:	42a0      	cmp	r0, r4
 800cb12:	d0f8      	beq.n	800cb06 <sbrk_aligned+0x22>
 800cb14:	1a21      	subs	r1, r4, r0
 800cb16:	4628      	mov	r0, r5
 800cb18:	f000 fe2a 	bl	800d770 <_sbrk_r>
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d1f2      	bne.n	800cb06 <sbrk_aligned+0x22>
 800cb20:	e7ef      	b.n	800cb02 <sbrk_aligned+0x1e>
 800cb22:	bf00      	nop
 800cb24:	20000ef8 	.word	0x20000ef8

0800cb28 <_malloc_r>:
 800cb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb2c:	1ccd      	adds	r5, r1, #3
 800cb2e:	f025 0503 	bic.w	r5, r5, #3
 800cb32:	3508      	adds	r5, #8
 800cb34:	2d0c      	cmp	r5, #12
 800cb36:	bf38      	it	cc
 800cb38:	250c      	movcc	r5, #12
 800cb3a:	2d00      	cmp	r5, #0
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	db01      	blt.n	800cb44 <_malloc_r+0x1c>
 800cb40:	42a9      	cmp	r1, r5
 800cb42:	d904      	bls.n	800cb4e <_malloc_r+0x26>
 800cb44:	230c      	movs	r3, #12
 800cb46:	6033      	str	r3, [r6, #0]
 800cb48:	2000      	movs	r0, #0
 800cb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc24 <_malloc_r+0xfc>
 800cb52:	f000 f869 	bl	800cc28 <__malloc_lock>
 800cb56:	f8d8 3000 	ldr.w	r3, [r8]
 800cb5a:	461c      	mov	r4, r3
 800cb5c:	bb44      	cbnz	r4, 800cbb0 <_malloc_r+0x88>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	4630      	mov	r0, r6
 800cb62:	f7ff ffbf 	bl	800cae4 <sbrk_aligned>
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	4604      	mov	r4, r0
 800cb6a:	d158      	bne.n	800cc1e <_malloc_r+0xf6>
 800cb6c:	f8d8 4000 	ldr.w	r4, [r8]
 800cb70:	4627      	mov	r7, r4
 800cb72:	2f00      	cmp	r7, #0
 800cb74:	d143      	bne.n	800cbfe <_malloc_r+0xd6>
 800cb76:	2c00      	cmp	r4, #0
 800cb78:	d04b      	beq.n	800cc12 <_malloc_r+0xea>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	4630      	mov	r0, r6
 800cb80:	eb04 0903 	add.w	r9, r4, r3
 800cb84:	f000 fdf4 	bl	800d770 <_sbrk_r>
 800cb88:	4581      	cmp	r9, r0
 800cb8a:	d142      	bne.n	800cc12 <_malloc_r+0xea>
 800cb8c:	6821      	ldr	r1, [r4, #0]
 800cb8e:	1a6d      	subs	r5, r5, r1
 800cb90:	4629      	mov	r1, r5
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7ff ffa6 	bl	800cae4 <sbrk_aligned>
 800cb98:	3001      	adds	r0, #1
 800cb9a:	d03a      	beq.n	800cc12 <_malloc_r+0xea>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	442b      	add	r3, r5
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	f8d8 3000 	ldr.w	r3, [r8]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	bb62      	cbnz	r2, 800cc04 <_malloc_r+0xdc>
 800cbaa:	f8c8 7000 	str.w	r7, [r8]
 800cbae:	e00f      	b.n	800cbd0 <_malloc_r+0xa8>
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	1b52      	subs	r2, r2, r5
 800cbb4:	d420      	bmi.n	800cbf8 <_malloc_r+0xd0>
 800cbb6:	2a0b      	cmp	r2, #11
 800cbb8:	d917      	bls.n	800cbea <_malloc_r+0xc2>
 800cbba:	1961      	adds	r1, r4, r5
 800cbbc:	42a3      	cmp	r3, r4
 800cbbe:	6025      	str	r5, [r4, #0]
 800cbc0:	bf18      	it	ne
 800cbc2:	6059      	strne	r1, [r3, #4]
 800cbc4:	6863      	ldr	r3, [r4, #4]
 800cbc6:	bf08      	it	eq
 800cbc8:	f8c8 1000 	streq.w	r1, [r8]
 800cbcc:	5162      	str	r2, [r4, r5]
 800cbce:	604b      	str	r3, [r1, #4]
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f000 f82f 	bl	800cc34 <__malloc_unlock>
 800cbd6:	f104 000b 	add.w	r0, r4, #11
 800cbda:	1d23      	adds	r3, r4, #4
 800cbdc:	f020 0007 	bic.w	r0, r0, #7
 800cbe0:	1ac2      	subs	r2, r0, r3
 800cbe2:	bf1c      	itt	ne
 800cbe4:	1a1b      	subne	r3, r3, r0
 800cbe6:	50a3      	strne	r3, [r4, r2]
 800cbe8:	e7af      	b.n	800cb4a <_malloc_r+0x22>
 800cbea:	6862      	ldr	r2, [r4, #4]
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	bf0c      	ite	eq
 800cbf0:	f8c8 2000 	streq.w	r2, [r8]
 800cbf4:	605a      	strne	r2, [r3, #4]
 800cbf6:	e7eb      	b.n	800cbd0 <_malloc_r+0xa8>
 800cbf8:	4623      	mov	r3, r4
 800cbfa:	6864      	ldr	r4, [r4, #4]
 800cbfc:	e7ae      	b.n	800cb5c <_malloc_r+0x34>
 800cbfe:	463c      	mov	r4, r7
 800cc00:	687f      	ldr	r7, [r7, #4]
 800cc02:	e7b6      	b.n	800cb72 <_malloc_r+0x4a>
 800cc04:	461a      	mov	r2, r3
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	d1fb      	bne.n	800cc04 <_malloc_r+0xdc>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	6053      	str	r3, [r2, #4]
 800cc10:	e7de      	b.n	800cbd0 <_malloc_r+0xa8>
 800cc12:	230c      	movs	r3, #12
 800cc14:	6033      	str	r3, [r6, #0]
 800cc16:	4630      	mov	r0, r6
 800cc18:	f000 f80c 	bl	800cc34 <__malloc_unlock>
 800cc1c:	e794      	b.n	800cb48 <_malloc_r+0x20>
 800cc1e:	6005      	str	r5, [r0, #0]
 800cc20:	e7d6      	b.n	800cbd0 <_malloc_r+0xa8>
 800cc22:	bf00      	nop
 800cc24:	20000efc 	.word	0x20000efc

0800cc28 <__malloc_lock>:
 800cc28:	4801      	ldr	r0, [pc, #4]	@ (800cc30 <__malloc_lock+0x8>)
 800cc2a:	f7ff b89e 	b.w	800bd6a <__retarget_lock_acquire_recursive>
 800cc2e:	bf00      	nop
 800cc30:	20000ef4 	.word	0x20000ef4

0800cc34 <__malloc_unlock>:
 800cc34:	4801      	ldr	r0, [pc, #4]	@ (800cc3c <__malloc_unlock+0x8>)
 800cc36:	f7ff b899 	b.w	800bd6c <__retarget_lock_release_recursive>
 800cc3a:	bf00      	nop
 800cc3c:	20000ef4 	.word	0x20000ef4

0800cc40 <_Balloc>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	69c6      	ldr	r6, [r0, #28]
 800cc44:	4604      	mov	r4, r0
 800cc46:	460d      	mov	r5, r1
 800cc48:	b976      	cbnz	r6, 800cc68 <_Balloc+0x28>
 800cc4a:	2010      	movs	r0, #16
 800cc4c:	f7ff ff42 	bl	800cad4 <malloc>
 800cc50:	4602      	mov	r2, r0
 800cc52:	61e0      	str	r0, [r4, #28]
 800cc54:	b920      	cbnz	r0, 800cc60 <_Balloc+0x20>
 800cc56:	4b18      	ldr	r3, [pc, #96]	@ (800ccb8 <_Balloc+0x78>)
 800cc58:	4818      	ldr	r0, [pc, #96]	@ (800ccbc <_Balloc+0x7c>)
 800cc5a:	216b      	movs	r1, #107	@ 0x6b
 800cc5c:	f000 fd98 	bl	800d790 <__assert_func>
 800cc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc64:	6006      	str	r6, [r0, #0]
 800cc66:	60c6      	str	r6, [r0, #12]
 800cc68:	69e6      	ldr	r6, [r4, #28]
 800cc6a:	68f3      	ldr	r3, [r6, #12]
 800cc6c:	b183      	cbz	r3, 800cc90 <_Balloc+0x50>
 800cc6e:	69e3      	ldr	r3, [r4, #28]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc76:	b9b8      	cbnz	r0, 800cca8 <_Balloc+0x68>
 800cc78:	2101      	movs	r1, #1
 800cc7a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc7e:	1d72      	adds	r2, r6, #5
 800cc80:	0092      	lsls	r2, r2, #2
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fda2 	bl	800d7cc <_calloc_r>
 800cc88:	b160      	cbz	r0, 800cca4 <_Balloc+0x64>
 800cc8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc8e:	e00e      	b.n	800ccae <_Balloc+0x6e>
 800cc90:	2221      	movs	r2, #33	@ 0x21
 800cc92:	2104      	movs	r1, #4
 800cc94:	4620      	mov	r0, r4
 800cc96:	f000 fd99 	bl	800d7cc <_calloc_r>
 800cc9a:	69e3      	ldr	r3, [r4, #28]
 800cc9c:	60f0      	str	r0, [r6, #12]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1e4      	bne.n	800cc6e <_Balloc+0x2e>
 800cca4:	2000      	movs	r0, #0
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	6802      	ldr	r2, [r0, #0]
 800ccaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccb4:	e7f7      	b.n	800cca6 <_Balloc+0x66>
 800ccb6:	bf00      	nop
 800ccb8:	08010d15 	.word	0x08010d15
 800ccbc:	08010d95 	.word	0x08010d95

0800ccc0 <_Bfree>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	69c6      	ldr	r6, [r0, #28]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	b976      	cbnz	r6, 800cce8 <_Bfree+0x28>
 800ccca:	2010      	movs	r0, #16
 800cccc:	f7ff ff02 	bl	800cad4 <malloc>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	61e8      	str	r0, [r5, #28]
 800ccd4:	b920      	cbnz	r0, 800cce0 <_Bfree+0x20>
 800ccd6:	4b09      	ldr	r3, [pc, #36]	@ (800ccfc <_Bfree+0x3c>)
 800ccd8:	4809      	ldr	r0, [pc, #36]	@ (800cd00 <_Bfree+0x40>)
 800ccda:	218f      	movs	r1, #143	@ 0x8f
 800ccdc:	f000 fd58 	bl	800d790 <__assert_func>
 800cce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cce4:	6006      	str	r6, [r0, #0]
 800cce6:	60c6      	str	r6, [r0, #12]
 800cce8:	b13c      	cbz	r4, 800ccfa <_Bfree+0x3a>
 800ccea:	69eb      	ldr	r3, [r5, #28]
 800ccec:	6862      	ldr	r2, [r4, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccf4:	6021      	str	r1, [r4, #0]
 800ccf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	08010d15 	.word	0x08010d15
 800cd00:	08010d95 	.word	0x08010d95

0800cd04 <__multadd>:
 800cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd08:	690d      	ldr	r5, [r1, #16]
 800cd0a:	4607      	mov	r7, r0
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	461e      	mov	r6, r3
 800cd10:	f101 0c14 	add.w	ip, r1, #20
 800cd14:	2000      	movs	r0, #0
 800cd16:	f8dc 3000 	ldr.w	r3, [ip]
 800cd1a:	b299      	uxth	r1, r3
 800cd1c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd20:	0c1e      	lsrs	r6, r3, #16
 800cd22:	0c0b      	lsrs	r3, r1, #16
 800cd24:	fb02 3306 	mla	r3, r2, r6, r3
 800cd28:	b289      	uxth	r1, r1
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd30:	4285      	cmp	r5, r0
 800cd32:	f84c 1b04 	str.w	r1, [ip], #4
 800cd36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd3a:	dcec      	bgt.n	800cd16 <__multadd+0x12>
 800cd3c:	b30e      	cbz	r6, 800cd82 <__multadd+0x7e>
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	42ab      	cmp	r3, r5
 800cd42:	dc19      	bgt.n	800cd78 <__multadd+0x74>
 800cd44:	6861      	ldr	r1, [r4, #4]
 800cd46:	4638      	mov	r0, r7
 800cd48:	3101      	adds	r1, #1
 800cd4a:	f7ff ff79 	bl	800cc40 <_Balloc>
 800cd4e:	4680      	mov	r8, r0
 800cd50:	b928      	cbnz	r0, 800cd5e <__multadd+0x5a>
 800cd52:	4602      	mov	r2, r0
 800cd54:	4b0c      	ldr	r3, [pc, #48]	@ (800cd88 <__multadd+0x84>)
 800cd56:	480d      	ldr	r0, [pc, #52]	@ (800cd8c <__multadd+0x88>)
 800cd58:	21ba      	movs	r1, #186	@ 0xba
 800cd5a:	f000 fd19 	bl	800d790 <__assert_func>
 800cd5e:	6922      	ldr	r2, [r4, #16]
 800cd60:	3202      	adds	r2, #2
 800cd62:	f104 010c 	add.w	r1, r4, #12
 800cd66:	0092      	lsls	r2, r2, #2
 800cd68:	300c      	adds	r0, #12
 800cd6a:	f7ff f800 	bl	800bd6e <memcpy>
 800cd6e:	4621      	mov	r1, r4
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ffa5 	bl	800ccc0 <_Bfree>
 800cd76:	4644      	mov	r4, r8
 800cd78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd7c:	3501      	adds	r5, #1
 800cd7e:	615e      	str	r6, [r3, #20]
 800cd80:	6125      	str	r5, [r4, #16]
 800cd82:	4620      	mov	r0, r4
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	08010d84 	.word	0x08010d84
 800cd8c:	08010d95 	.word	0x08010d95

0800cd90 <__hi0bits>:
 800cd90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd94:	4603      	mov	r3, r0
 800cd96:	bf36      	itet	cc
 800cd98:	0403      	lslcc	r3, r0, #16
 800cd9a:	2000      	movcs	r0, #0
 800cd9c:	2010      	movcc	r0, #16
 800cd9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cda2:	bf3c      	itt	cc
 800cda4:	021b      	lslcc	r3, r3, #8
 800cda6:	3008      	addcc	r0, #8
 800cda8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdac:	bf3c      	itt	cc
 800cdae:	011b      	lslcc	r3, r3, #4
 800cdb0:	3004      	addcc	r0, #4
 800cdb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdb6:	bf3c      	itt	cc
 800cdb8:	009b      	lslcc	r3, r3, #2
 800cdba:	3002      	addcc	r0, #2
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	db05      	blt.n	800cdcc <__hi0bits+0x3c>
 800cdc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdc4:	f100 0001 	add.w	r0, r0, #1
 800cdc8:	bf08      	it	eq
 800cdca:	2020      	moveq	r0, #32
 800cdcc:	4770      	bx	lr

0800cdce <__lo0bits>:
 800cdce:	6803      	ldr	r3, [r0, #0]
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	f013 0007 	ands.w	r0, r3, #7
 800cdd6:	d00b      	beq.n	800cdf0 <__lo0bits+0x22>
 800cdd8:	07d9      	lsls	r1, r3, #31
 800cdda:	d421      	bmi.n	800ce20 <__lo0bits+0x52>
 800cddc:	0798      	lsls	r0, r3, #30
 800cdde:	bf49      	itett	mi
 800cde0:	085b      	lsrmi	r3, r3, #1
 800cde2:	089b      	lsrpl	r3, r3, #2
 800cde4:	2001      	movmi	r0, #1
 800cde6:	6013      	strmi	r3, [r2, #0]
 800cde8:	bf5c      	itt	pl
 800cdea:	6013      	strpl	r3, [r2, #0]
 800cdec:	2002      	movpl	r0, #2
 800cdee:	4770      	bx	lr
 800cdf0:	b299      	uxth	r1, r3
 800cdf2:	b909      	cbnz	r1, 800cdf8 <__lo0bits+0x2a>
 800cdf4:	0c1b      	lsrs	r3, r3, #16
 800cdf6:	2010      	movs	r0, #16
 800cdf8:	b2d9      	uxtb	r1, r3
 800cdfa:	b909      	cbnz	r1, 800ce00 <__lo0bits+0x32>
 800cdfc:	3008      	adds	r0, #8
 800cdfe:	0a1b      	lsrs	r3, r3, #8
 800ce00:	0719      	lsls	r1, r3, #28
 800ce02:	bf04      	itt	eq
 800ce04:	091b      	lsreq	r3, r3, #4
 800ce06:	3004      	addeq	r0, #4
 800ce08:	0799      	lsls	r1, r3, #30
 800ce0a:	bf04      	itt	eq
 800ce0c:	089b      	lsreq	r3, r3, #2
 800ce0e:	3002      	addeq	r0, #2
 800ce10:	07d9      	lsls	r1, r3, #31
 800ce12:	d403      	bmi.n	800ce1c <__lo0bits+0x4e>
 800ce14:	085b      	lsrs	r3, r3, #1
 800ce16:	f100 0001 	add.w	r0, r0, #1
 800ce1a:	d003      	beq.n	800ce24 <__lo0bits+0x56>
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	4770      	bx	lr
 800ce20:	2000      	movs	r0, #0
 800ce22:	4770      	bx	lr
 800ce24:	2020      	movs	r0, #32
 800ce26:	4770      	bx	lr

0800ce28 <__i2b>:
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	2101      	movs	r1, #1
 800ce2e:	f7ff ff07 	bl	800cc40 <_Balloc>
 800ce32:	4602      	mov	r2, r0
 800ce34:	b928      	cbnz	r0, 800ce42 <__i2b+0x1a>
 800ce36:	4b05      	ldr	r3, [pc, #20]	@ (800ce4c <__i2b+0x24>)
 800ce38:	4805      	ldr	r0, [pc, #20]	@ (800ce50 <__i2b+0x28>)
 800ce3a:	f240 1145 	movw	r1, #325	@ 0x145
 800ce3e:	f000 fca7 	bl	800d790 <__assert_func>
 800ce42:	2301      	movs	r3, #1
 800ce44:	6144      	str	r4, [r0, #20]
 800ce46:	6103      	str	r3, [r0, #16]
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	bf00      	nop
 800ce4c:	08010d84 	.word	0x08010d84
 800ce50:	08010d95 	.word	0x08010d95

0800ce54 <__multiply>:
 800ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	4617      	mov	r7, r2
 800ce5a:	690a      	ldr	r2, [r1, #16]
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	bfa8      	it	ge
 800ce62:	463b      	movge	r3, r7
 800ce64:	4689      	mov	r9, r1
 800ce66:	bfa4      	itt	ge
 800ce68:	460f      	movge	r7, r1
 800ce6a:	4699      	movge	r9, r3
 800ce6c:	693d      	ldr	r5, [r7, #16]
 800ce6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	eb05 060a 	add.w	r6, r5, sl
 800ce7a:	42b3      	cmp	r3, r6
 800ce7c:	b085      	sub	sp, #20
 800ce7e:	bfb8      	it	lt
 800ce80:	3101      	addlt	r1, #1
 800ce82:	f7ff fedd 	bl	800cc40 <_Balloc>
 800ce86:	b930      	cbnz	r0, 800ce96 <__multiply+0x42>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	4b41      	ldr	r3, [pc, #260]	@ (800cf90 <__multiply+0x13c>)
 800ce8c:	4841      	ldr	r0, [pc, #260]	@ (800cf94 <__multiply+0x140>)
 800ce8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce92:	f000 fc7d 	bl	800d790 <__assert_func>
 800ce96:	f100 0414 	add.w	r4, r0, #20
 800ce9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce9e:	4623      	mov	r3, r4
 800cea0:	2200      	movs	r2, #0
 800cea2:	4573      	cmp	r3, lr
 800cea4:	d320      	bcc.n	800cee8 <__multiply+0x94>
 800cea6:	f107 0814 	add.w	r8, r7, #20
 800ceaa:	f109 0114 	add.w	r1, r9, #20
 800ceae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ceb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ceb6:	9302      	str	r3, [sp, #8]
 800ceb8:	1beb      	subs	r3, r5, r7
 800ceba:	3b15      	subs	r3, #21
 800cebc:	f023 0303 	bic.w	r3, r3, #3
 800cec0:	3304      	adds	r3, #4
 800cec2:	3715      	adds	r7, #21
 800cec4:	42bd      	cmp	r5, r7
 800cec6:	bf38      	it	cc
 800cec8:	2304      	movcc	r3, #4
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	9103      	str	r1, [sp, #12]
 800ced0:	428b      	cmp	r3, r1
 800ced2:	d80c      	bhi.n	800ceee <__multiply+0x9a>
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	dd03      	ble.n	800cee0 <__multiply+0x8c>
 800ced8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d055      	beq.n	800cf8c <__multiply+0x138>
 800cee0:	6106      	str	r6, [r0, #16]
 800cee2:	b005      	add	sp, #20
 800cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee8:	f843 2b04 	str.w	r2, [r3], #4
 800ceec:	e7d9      	b.n	800cea2 <__multiply+0x4e>
 800ceee:	f8b1 a000 	ldrh.w	sl, [r1]
 800cef2:	f1ba 0f00 	cmp.w	sl, #0
 800cef6:	d01f      	beq.n	800cf38 <__multiply+0xe4>
 800cef8:	46c4      	mov	ip, r8
 800cefa:	46a1      	mov	r9, r4
 800cefc:	2700      	movs	r7, #0
 800cefe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf02:	f8d9 3000 	ldr.w	r3, [r9]
 800cf06:	fa1f fb82 	uxth.w	fp, r2
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf10:	443b      	add	r3, r7
 800cf12:	f8d9 7000 	ldr.w	r7, [r9]
 800cf16:	0c12      	lsrs	r2, r2, #16
 800cf18:	0c3f      	lsrs	r7, r7, #16
 800cf1a:	fb0a 7202 	mla	r2, sl, r2, r7
 800cf1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf28:	4565      	cmp	r5, ip
 800cf2a:	f849 3b04 	str.w	r3, [r9], #4
 800cf2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cf32:	d8e4      	bhi.n	800cefe <__multiply+0xaa>
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	50e7      	str	r7, [r4, r3]
 800cf38:	9b03      	ldr	r3, [sp, #12]
 800cf3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf3e:	3104      	adds	r1, #4
 800cf40:	f1b9 0f00 	cmp.w	r9, #0
 800cf44:	d020      	beq.n	800cf88 <__multiply+0x134>
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	4647      	mov	r7, r8
 800cf4a:	46a4      	mov	ip, r4
 800cf4c:	f04f 0a00 	mov.w	sl, #0
 800cf50:	f8b7 b000 	ldrh.w	fp, [r7]
 800cf54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cf58:	fb09 220b 	mla	r2, r9, fp, r2
 800cf5c:	4452      	add	r2, sl
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf64:	f84c 3b04 	str.w	r3, [ip], #4
 800cf68:	f857 3b04 	ldr.w	r3, [r7], #4
 800cf6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf70:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf74:	fb09 330a 	mla	r3, r9, sl, r3
 800cf78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cf7c:	42bd      	cmp	r5, r7
 800cf7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf82:	d8e5      	bhi.n	800cf50 <__multiply+0xfc>
 800cf84:	9a01      	ldr	r2, [sp, #4]
 800cf86:	50a3      	str	r3, [r4, r2]
 800cf88:	3404      	adds	r4, #4
 800cf8a:	e79f      	b.n	800cecc <__multiply+0x78>
 800cf8c:	3e01      	subs	r6, #1
 800cf8e:	e7a1      	b.n	800ced4 <__multiply+0x80>
 800cf90:	08010d84 	.word	0x08010d84
 800cf94:	08010d95 	.word	0x08010d95

0800cf98 <__pow5mult>:
 800cf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf9c:	4615      	mov	r5, r2
 800cf9e:	f012 0203 	ands.w	r2, r2, #3
 800cfa2:	4607      	mov	r7, r0
 800cfa4:	460e      	mov	r6, r1
 800cfa6:	d007      	beq.n	800cfb8 <__pow5mult+0x20>
 800cfa8:	4c25      	ldr	r4, [pc, #148]	@ (800d040 <__pow5mult+0xa8>)
 800cfaa:	3a01      	subs	r2, #1
 800cfac:	2300      	movs	r3, #0
 800cfae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfb2:	f7ff fea7 	bl	800cd04 <__multadd>
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	10ad      	asrs	r5, r5, #2
 800cfba:	d03d      	beq.n	800d038 <__pow5mult+0xa0>
 800cfbc:	69fc      	ldr	r4, [r7, #28]
 800cfbe:	b97c      	cbnz	r4, 800cfe0 <__pow5mult+0x48>
 800cfc0:	2010      	movs	r0, #16
 800cfc2:	f7ff fd87 	bl	800cad4 <malloc>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	61f8      	str	r0, [r7, #28]
 800cfca:	b928      	cbnz	r0, 800cfd8 <__pow5mult+0x40>
 800cfcc:	4b1d      	ldr	r3, [pc, #116]	@ (800d044 <__pow5mult+0xac>)
 800cfce:	481e      	ldr	r0, [pc, #120]	@ (800d048 <__pow5mult+0xb0>)
 800cfd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfd4:	f000 fbdc 	bl	800d790 <__assert_func>
 800cfd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfdc:	6004      	str	r4, [r0, #0]
 800cfde:	60c4      	str	r4, [r0, #12]
 800cfe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfe8:	b94c      	cbnz	r4, 800cffe <__pow5mult+0x66>
 800cfea:	f240 2171 	movw	r1, #625	@ 0x271
 800cfee:	4638      	mov	r0, r7
 800cff0:	f7ff ff1a 	bl	800ce28 <__i2b>
 800cff4:	2300      	movs	r3, #0
 800cff6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cffa:	4604      	mov	r4, r0
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	f04f 0900 	mov.w	r9, #0
 800d002:	07eb      	lsls	r3, r5, #31
 800d004:	d50a      	bpl.n	800d01c <__pow5mult+0x84>
 800d006:	4631      	mov	r1, r6
 800d008:	4622      	mov	r2, r4
 800d00a:	4638      	mov	r0, r7
 800d00c:	f7ff ff22 	bl	800ce54 <__multiply>
 800d010:	4631      	mov	r1, r6
 800d012:	4680      	mov	r8, r0
 800d014:	4638      	mov	r0, r7
 800d016:	f7ff fe53 	bl	800ccc0 <_Bfree>
 800d01a:	4646      	mov	r6, r8
 800d01c:	106d      	asrs	r5, r5, #1
 800d01e:	d00b      	beq.n	800d038 <__pow5mult+0xa0>
 800d020:	6820      	ldr	r0, [r4, #0]
 800d022:	b938      	cbnz	r0, 800d034 <__pow5mult+0x9c>
 800d024:	4622      	mov	r2, r4
 800d026:	4621      	mov	r1, r4
 800d028:	4638      	mov	r0, r7
 800d02a:	f7ff ff13 	bl	800ce54 <__multiply>
 800d02e:	6020      	str	r0, [r4, #0]
 800d030:	f8c0 9000 	str.w	r9, [r0]
 800d034:	4604      	mov	r4, r0
 800d036:	e7e4      	b.n	800d002 <__pow5mult+0x6a>
 800d038:	4630      	mov	r0, r6
 800d03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d03e:	bf00      	nop
 800d040:	08010e48 	.word	0x08010e48
 800d044:	08010d15 	.word	0x08010d15
 800d048:	08010d95 	.word	0x08010d95

0800d04c <__lshift>:
 800d04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d050:	460c      	mov	r4, r1
 800d052:	6849      	ldr	r1, [r1, #4]
 800d054:	6923      	ldr	r3, [r4, #16]
 800d056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d05a:	68a3      	ldr	r3, [r4, #8]
 800d05c:	4607      	mov	r7, r0
 800d05e:	4691      	mov	r9, r2
 800d060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d064:	f108 0601 	add.w	r6, r8, #1
 800d068:	42b3      	cmp	r3, r6
 800d06a:	db0b      	blt.n	800d084 <__lshift+0x38>
 800d06c:	4638      	mov	r0, r7
 800d06e:	f7ff fde7 	bl	800cc40 <_Balloc>
 800d072:	4605      	mov	r5, r0
 800d074:	b948      	cbnz	r0, 800d08a <__lshift+0x3e>
 800d076:	4602      	mov	r2, r0
 800d078:	4b28      	ldr	r3, [pc, #160]	@ (800d11c <__lshift+0xd0>)
 800d07a:	4829      	ldr	r0, [pc, #164]	@ (800d120 <__lshift+0xd4>)
 800d07c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d080:	f000 fb86 	bl	800d790 <__assert_func>
 800d084:	3101      	adds	r1, #1
 800d086:	005b      	lsls	r3, r3, #1
 800d088:	e7ee      	b.n	800d068 <__lshift+0x1c>
 800d08a:	2300      	movs	r3, #0
 800d08c:	f100 0114 	add.w	r1, r0, #20
 800d090:	f100 0210 	add.w	r2, r0, #16
 800d094:	4618      	mov	r0, r3
 800d096:	4553      	cmp	r3, sl
 800d098:	db33      	blt.n	800d102 <__lshift+0xb6>
 800d09a:	6920      	ldr	r0, [r4, #16]
 800d09c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0a0:	f104 0314 	add.w	r3, r4, #20
 800d0a4:	f019 091f 	ands.w	r9, r9, #31
 800d0a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0b0:	d02b      	beq.n	800d10a <__lshift+0xbe>
 800d0b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d0b6:	468a      	mov	sl, r1
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d0c0:	4310      	orrs	r0, r2
 800d0c2:	f84a 0b04 	str.w	r0, [sl], #4
 800d0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ca:	459c      	cmp	ip, r3
 800d0cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0d0:	d8f3      	bhi.n	800d0ba <__lshift+0x6e>
 800d0d2:	ebac 0304 	sub.w	r3, ip, r4
 800d0d6:	3b15      	subs	r3, #21
 800d0d8:	f023 0303 	bic.w	r3, r3, #3
 800d0dc:	3304      	adds	r3, #4
 800d0de:	f104 0015 	add.w	r0, r4, #21
 800d0e2:	4560      	cmp	r0, ip
 800d0e4:	bf88      	it	hi
 800d0e6:	2304      	movhi	r3, #4
 800d0e8:	50ca      	str	r2, [r1, r3]
 800d0ea:	b10a      	cbz	r2, 800d0f0 <__lshift+0xa4>
 800d0ec:	f108 0602 	add.w	r6, r8, #2
 800d0f0:	3e01      	subs	r6, #1
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	612e      	str	r6, [r5, #16]
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	f7ff fde2 	bl	800ccc0 <_Bfree>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d102:	f842 0f04 	str.w	r0, [r2, #4]!
 800d106:	3301      	adds	r3, #1
 800d108:	e7c5      	b.n	800d096 <__lshift+0x4a>
 800d10a:	3904      	subs	r1, #4
 800d10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d110:	f841 2f04 	str.w	r2, [r1, #4]!
 800d114:	459c      	cmp	ip, r3
 800d116:	d8f9      	bhi.n	800d10c <__lshift+0xc0>
 800d118:	e7ea      	b.n	800d0f0 <__lshift+0xa4>
 800d11a:	bf00      	nop
 800d11c:	08010d84 	.word	0x08010d84
 800d120:	08010d95 	.word	0x08010d95

0800d124 <__mcmp>:
 800d124:	690a      	ldr	r2, [r1, #16]
 800d126:	4603      	mov	r3, r0
 800d128:	6900      	ldr	r0, [r0, #16]
 800d12a:	1a80      	subs	r0, r0, r2
 800d12c:	b530      	push	{r4, r5, lr}
 800d12e:	d10e      	bne.n	800d14e <__mcmp+0x2a>
 800d130:	3314      	adds	r3, #20
 800d132:	3114      	adds	r1, #20
 800d134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d13c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d144:	4295      	cmp	r5, r2
 800d146:	d003      	beq.n	800d150 <__mcmp+0x2c>
 800d148:	d205      	bcs.n	800d156 <__mcmp+0x32>
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295
 800d14e:	bd30      	pop	{r4, r5, pc}
 800d150:	42a3      	cmp	r3, r4
 800d152:	d3f3      	bcc.n	800d13c <__mcmp+0x18>
 800d154:	e7fb      	b.n	800d14e <__mcmp+0x2a>
 800d156:	2001      	movs	r0, #1
 800d158:	e7f9      	b.n	800d14e <__mcmp+0x2a>
	...

0800d15c <__mdiff>:
 800d15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	4689      	mov	r9, r1
 800d162:	4606      	mov	r6, r0
 800d164:	4611      	mov	r1, r2
 800d166:	4648      	mov	r0, r9
 800d168:	4614      	mov	r4, r2
 800d16a:	f7ff ffdb 	bl	800d124 <__mcmp>
 800d16e:	1e05      	subs	r5, r0, #0
 800d170:	d112      	bne.n	800d198 <__mdiff+0x3c>
 800d172:	4629      	mov	r1, r5
 800d174:	4630      	mov	r0, r6
 800d176:	f7ff fd63 	bl	800cc40 <_Balloc>
 800d17a:	4602      	mov	r2, r0
 800d17c:	b928      	cbnz	r0, 800d18a <__mdiff+0x2e>
 800d17e:	4b3f      	ldr	r3, [pc, #252]	@ (800d27c <__mdiff+0x120>)
 800d180:	f240 2137 	movw	r1, #567	@ 0x237
 800d184:	483e      	ldr	r0, [pc, #248]	@ (800d280 <__mdiff+0x124>)
 800d186:	f000 fb03 	bl	800d790 <__assert_func>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d190:	4610      	mov	r0, r2
 800d192:	b003      	add	sp, #12
 800d194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d198:	bfbc      	itt	lt
 800d19a:	464b      	movlt	r3, r9
 800d19c:	46a1      	movlt	r9, r4
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1a4:	bfba      	itte	lt
 800d1a6:	461c      	movlt	r4, r3
 800d1a8:	2501      	movlt	r5, #1
 800d1aa:	2500      	movge	r5, #0
 800d1ac:	f7ff fd48 	bl	800cc40 <_Balloc>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	b918      	cbnz	r0, 800d1bc <__mdiff+0x60>
 800d1b4:	4b31      	ldr	r3, [pc, #196]	@ (800d27c <__mdiff+0x120>)
 800d1b6:	f240 2145 	movw	r1, #581	@ 0x245
 800d1ba:	e7e3      	b.n	800d184 <__mdiff+0x28>
 800d1bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1c0:	6926      	ldr	r6, [r4, #16]
 800d1c2:	60c5      	str	r5, [r0, #12]
 800d1c4:	f109 0310 	add.w	r3, r9, #16
 800d1c8:	f109 0514 	add.w	r5, r9, #20
 800d1cc:	f104 0e14 	add.w	lr, r4, #20
 800d1d0:	f100 0b14 	add.w	fp, r0, #20
 800d1d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	46d9      	mov	r9, fp
 800d1e0:	f04f 0c00 	mov.w	ip, #0
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1ee:	9301      	str	r3, [sp, #4]
 800d1f0:	fa1f f38a 	uxth.w	r3, sl
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	b283      	uxth	r3, r0
 800d1f8:	1acb      	subs	r3, r1, r3
 800d1fa:	0c00      	lsrs	r0, r0, #16
 800d1fc:	4463      	add	r3, ip
 800d1fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d202:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d206:	b29b      	uxth	r3, r3
 800d208:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d20c:	4576      	cmp	r6, lr
 800d20e:	f849 3b04 	str.w	r3, [r9], #4
 800d212:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d216:	d8e5      	bhi.n	800d1e4 <__mdiff+0x88>
 800d218:	1b33      	subs	r3, r6, r4
 800d21a:	3b15      	subs	r3, #21
 800d21c:	f023 0303 	bic.w	r3, r3, #3
 800d220:	3415      	adds	r4, #21
 800d222:	3304      	adds	r3, #4
 800d224:	42a6      	cmp	r6, r4
 800d226:	bf38      	it	cc
 800d228:	2304      	movcc	r3, #4
 800d22a:	441d      	add	r5, r3
 800d22c:	445b      	add	r3, fp
 800d22e:	461e      	mov	r6, r3
 800d230:	462c      	mov	r4, r5
 800d232:	4544      	cmp	r4, r8
 800d234:	d30e      	bcc.n	800d254 <__mdiff+0xf8>
 800d236:	f108 0103 	add.w	r1, r8, #3
 800d23a:	1b49      	subs	r1, r1, r5
 800d23c:	f021 0103 	bic.w	r1, r1, #3
 800d240:	3d03      	subs	r5, #3
 800d242:	45a8      	cmp	r8, r5
 800d244:	bf38      	it	cc
 800d246:	2100      	movcc	r1, #0
 800d248:	440b      	add	r3, r1
 800d24a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d24e:	b191      	cbz	r1, 800d276 <__mdiff+0x11a>
 800d250:	6117      	str	r7, [r2, #16]
 800d252:	e79d      	b.n	800d190 <__mdiff+0x34>
 800d254:	f854 1b04 	ldr.w	r1, [r4], #4
 800d258:	46e6      	mov	lr, ip
 800d25a:	0c08      	lsrs	r0, r1, #16
 800d25c:	fa1c fc81 	uxtah	ip, ip, r1
 800d260:	4471      	add	r1, lr
 800d262:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d266:	b289      	uxth	r1, r1
 800d268:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d26c:	f846 1b04 	str.w	r1, [r6], #4
 800d270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d274:	e7dd      	b.n	800d232 <__mdiff+0xd6>
 800d276:	3f01      	subs	r7, #1
 800d278:	e7e7      	b.n	800d24a <__mdiff+0xee>
 800d27a:	bf00      	nop
 800d27c:	08010d84 	.word	0x08010d84
 800d280:	08010d95 	.word	0x08010d95

0800d284 <__d2b>:
 800d284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d288:	460f      	mov	r7, r1
 800d28a:	2101      	movs	r1, #1
 800d28c:	ec59 8b10 	vmov	r8, r9, d0
 800d290:	4616      	mov	r6, r2
 800d292:	f7ff fcd5 	bl	800cc40 <_Balloc>
 800d296:	4604      	mov	r4, r0
 800d298:	b930      	cbnz	r0, 800d2a8 <__d2b+0x24>
 800d29a:	4602      	mov	r2, r0
 800d29c:	4b23      	ldr	r3, [pc, #140]	@ (800d32c <__d2b+0xa8>)
 800d29e:	4824      	ldr	r0, [pc, #144]	@ (800d330 <__d2b+0xac>)
 800d2a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2a4:	f000 fa74 	bl	800d790 <__assert_func>
 800d2a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2b0:	b10d      	cbz	r5, 800d2b6 <__d2b+0x32>
 800d2b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2b6:	9301      	str	r3, [sp, #4]
 800d2b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d2bc:	d023      	beq.n	800d306 <__d2b+0x82>
 800d2be:	4668      	mov	r0, sp
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	f7ff fd84 	bl	800cdce <__lo0bits>
 800d2c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2ca:	b1d0      	cbz	r0, 800d302 <__d2b+0x7e>
 800d2cc:	f1c0 0320 	rsb	r3, r0, #32
 800d2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d4:	430b      	orrs	r3, r1
 800d2d6:	40c2      	lsrs	r2, r0
 800d2d8:	6163      	str	r3, [r4, #20]
 800d2da:	9201      	str	r2, [sp, #4]
 800d2dc:	9b01      	ldr	r3, [sp, #4]
 800d2de:	61a3      	str	r3, [r4, #24]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	bf0c      	ite	eq
 800d2e4:	2201      	moveq	r2, #1
 800d2e6:	2202      	movne	r2, #2
 800d2e8:	6122      	str	r2, [r4, #16]
 800d2ea:	b1a5      	cbz	r5, 800d316 <__d2b+0x92>
 800d2ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2f0:	4405      	add	r5, r0
 800d2f2:	603d      	str	r5, [r7, #0]
 800d2f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2f8:	6030      	str	r0, [r6, #0]
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	b003      	add	sp, #12
 800d2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d302:	6161      	str	r1, [r4, #20]
 800d304:	e7ea      	b.n	800d2dc <__d2b+0x58>
 800d306:	a801      	add	r0, sp, #4
 800d308:	f7ff fd61 	bl	800cdce <__lo0bits>
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	6163      	str	r3, [r4, #20]
 800d310:	3020      	adds	r0, #32
 800d312:	2201      	movs	r2, #1
 800d314:	e7e8      	b.n	800d2e8 <__d2b+0x64>
 800d316:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d31a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d31e:	6038      	str	r0, [r7, #0]
 800d320:	6918      	ldr	r0, [r3, #16]
 800d322:	f7ff fd35 	bl	800cd90 <__hi0bits>
 800d326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d32a:	e7e5      	b.n	800d2f8 <__d2b+0x74>
 800d32c:	08010d84 	.word	0x08010d84
 800d330:	08010d95 	.word	0x08010d95

0800d334 <__ssputs_r>:
 800d334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d338:	688e      	ldr	r6, [r1, #8]
 800d33a:	461f      	mov	r7, r3
 800d33c:	42be      	cmp	r6, r7
 800d33e:	680b      	ldr	r3, [r1, #0]
 800d340:	4682      	mov	sl, r0
 800d342:	460c      	mov	r4, r1
 800d344:	4690      	mov	r8, r2
 800d346:	d82d      	bhi.n	800d3a4 <__ssputs_r+0x70>
 800d348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d34c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d350:	d026      	beq.n	800d3a0 <__ssputs_r+0x6c>
 800d352:	6965      	ldr	r5, [r4, #20]
 800d354:	6909      	ldr	r1, [r1, #16]
 800d356:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d35a:	eba3 0901 	sub.w	r9, r3, r1
 800d35e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d362:	1c7b      	adds	r3, r7, #1
 800d364:	444b      	add	r3, r9
 800d366:	106d      	asrs	r5, r5, #1
 800d368:	429d      	cmp	r5, r3
 800d36a:	bf38      	it	cc
 800d36c:	461d      	movcc	r5, r3
 800d36e:	0553      	lsls	r3, r2, #21
 800d370:	d527      	bpl.n	800d3c2 <__ssputs_r+0x8e>
 800d372:	4629      	mov	r1, r5
 800d374:	f7ff fbd8 	bl	800cb28 <_malloc_r>
 800d378:	4606      	mov	r6, r0
 800d37a:	b360      	cbz	r0, 800d3d6 <__ssputs_r+0xa2>
 800d37c:	6921      	ldr	r1, [r4, #16]
 800d37e:	464a      	mov	r2, r9
 800d380:	f7fe fcf5 	bl	800bd6e <memcpy>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d38e:	81a3      	strh	r3, [r4, #12]
 800d390:	6126      	str	r6, [r4, #16]
 800d392:	6165      	str	r5, [r4, #20]
 800d394:	444e      	add	r6, r9
 800d396:	eba5 0509 	sub.w	r5, r5, r9
 800d39a:	6026      	str	r6, [r4, #0]
 800d39c:	60a5      	str	r5, [r4, #8]
 800d39e:	463e      	mov	r6, r7
 800d3a0:	42be      	cmp	r6, r7
 800d3a2:	d900      	bls.n	800d3a6 <__ssputs_r+0x72>
 800d3a4:	463e      	mov	r6, r7
 800d3a6:	6820      	ldr	r0, [r4, #0]
 800d3a8:	4632      	mov	r2, r6
 800d3aa:	4641      	mov	r1, r8
 800d3ac:	f000 f9c6 	bl	800d73c <memmove>
 800d3b0:	68a3      	ldr	r3, [r4, #8]
 800d3b2:	1b9b      	subs	r3, r3, r6
 800d3b4:	60a3      	str	r3, [r4, #8]
 800d3b6:	6823      	ldr	r3, [r4, #0]
 800d3b8:	4433      	add	r3, r6
 800d3ba:	6023      	str	r3, [r4, #0]
 800d3bc:	2000      	movs	r0, #0
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	462a      	mov	r2, r5
 800d3c4:	f000 fa28 	bl	800d818 <_realloc_r>
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	d1e0      	bne.n	800d390 <__ssputs_r+0x5c>
 800d3ce:	6921      	ldr	r1, [r4, #16]
 800d3d0:	4650      	mov	r0, sl
 800d3d2:	f7ff fb35 	bl	800ca40 <_free_r>
 800d3d6:	230c      	movs	r3, #12
 800d3d8:	f8ca 3000 	str.w	r3, [sl]
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3e2:	81a3      	strh	r3, [r4, #12]
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e8:	e7e9      	b.n	800d3be <__ssputs_r+0x8a>
	...

0800d3ec <_svfiprintf_r>:
 800d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	4698      	mov	r8, r3
 800d3f2:	898b      	ldrh	r3, [r1, #12]
 800d3f4:	061b      	lsls	r3, r3, #24
 800d3f6:	b09d      	sub	sp, #116	@ 0x74
 800d3f8:	4607      	mov	r7, r0
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	4614      	mov	r4, r2
 800d3fe:	d510      	bpl.n	800d422 <_svfiprintf_r+0x36>
 800d400:	690b      	ldr	r3, [r1, #16]
 800d402:	b973      	cbnz	r3, 800d422 <_svfiprintf_r+0x36>
 800d404:	2140      	movs	r1, #64	@ 0x40
 800d406:	f7ff fb8f 	bl	800cb28 <_malloc_r>
 800d40a:	6028      	str	r0, [r5, #0]
 800d40c:	6128      	str	r0, [r5, #16]
 800d40e:	b930      	cbnz	r0, 800d41e <_svfiprintf_r+0x32>
 800d410:	230c      	movs	r3, #12
 800d412:	603b      	str	r3, [r7, #0]
 800d414:	f04f 30ff 	mov.w	r0, #4294967295
 800d418:	b01d      	add	sp, #116	@ 0x74
 800d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41e:	2340      	movs	r3, #64	@ 0x40
 800d420:	616b      	str	r3, [r5, #20]
 800d422:	2300      	movs	r3, #0
 800d424:	9309      	str	r3, [sp, #36]	@ 0x24
 800d426:	2320      	movs	r3, #32
 800d428:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d42c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d430:	2330      	movs	r3, #48	@ 0x30
 800d432:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5d0 <_svfiprintf_r+0x1e4>
 800d436:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d43a:	f04f 0901 	mov.w	r9, #1
 800d43e:	4623      	mov	r3, r4
 800d440:	469a      	mov	sl, r3
 800d442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d446:	b10a      	cbz	r2, 800d44c <_svfiprintf_r+0x60>
 800d448:	2a25      	cmp	r2, #37	@ 0x25
 800d44a:	d1f9      	bne.n	800d440 <_svfiprintf_r+0x54>
 800d44c:	ebba 0b04 	subs.w	fp, sl, r4
 800d450:	d00b      	beq.n	800d46a <_svfiprintf_r+0x7e>
 800d452:	465b      	mov	r3, fp
 800d454:	4622      	mov	r2, r4
 800d456:	4629      	mov	r1, r5
 800d458:	4638      	mov	r0, r7
 800d45a:	f7ff ff6b 	bl	800d334 <__ssputs_r>
 800d45e:	3001      	adds	r0, #1
 800d460:	f000 80a7 	beq.w	800d5b2 <_svfiprintf_r+0x1c6>
 800d464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d466:	445a      	add	r2, fp
 800d468:	9209      	str	r2, [sp, #36]	@ 0x24
 800d46a:	f89a 3000 	ldrb.w	r3, [sl]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f000 809f 	beq.w	800d5b2 <_svfiprintf_r+0x1c6>
 800d474:	2300      	movs	r3, #0
 800d476:	f04f 32ff 	mov.w	r2, #4294967295
 800d47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d47e:	f10a 0a01 	add.w	sl, sl, #1
 800d482:	9304      	str	r3, [sp, #16]
 800d484:	9307      	str	r3, [sp, #28]
 800d486:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d48a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d48c:	4654      	mov	r4, sl
 800d48e:	2205      	movs	r2, #5
 800d490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d494:	484e      	ldr	r0, [pc, #312]	@ (800d5d0 <_svfiprintf_r+0x1e4>)
 800d496:	f7f2 febb 	bl	8000210 <memchr>
 800d49a:	9a04      	ldr	r2, [sp, #16]
 800d49c:	b9d8      	cbnz	r0, 800d4d6 <_svfiprintf_r+0xea>
 800d49e:	06d0      	lsls	r0, r2, #27
 800d4a0:	bf44      	itt	mi
 800d4a2:	2320      	movmi	r3, #32
 800d4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4a8:	0711      	lsls	r1, r2, #28
 800d4aa:	bf44      	itt	mi
 800d4ac:	232b      	movmi	r3, #43	@ 0x2b
 800d4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4b8:	d015      	beq.n	800d4e6 <_svfiprintf_r+0xfa>
 800d4ba:	9a07      	ldr	r2, [sp, #28]
 800d4bc:	4654      	mov	r4, sl
 800d4be:	2000      	movs	r0, #0
 800d4c0:	f04f 0c0a 	mov.w	ip, #10
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4ca:	3b30      	subs	r3, #48	@ 0x30
 800d4cc:	2b09      	cmp	r3, #9
 800d4ce:	d94b      	bls.n	800d568 <_svfiprintf_r+0x17c>
 800d4d0:	b1b0      	cbz	r0, 800d500 <_svfiprintf_r+0x114>
 800d4d2:	9207      	str	r2, [sp, #28]
 800d4d4:	e014      	b.n	800d500 <_svfiprintf_r+0x114>
 800d4d6:	eba0 0308 	sub.w	r3, r0, r8
 800d4da:	fa09 f303 	lsl.w	r3, r9, r3
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	46a2      	mov	sl, r4
 800d4e4:	e7d2      	b.n	800d48c <_svfiprintf_r+0xa0>
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	1d19      	adds	r1, r3, #4
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	9103      	str	r1, [sp, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	bfbb      	ittet	lt
 800d4f2:	425b      	neglt	r3, r3
 800d4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4f8:	9307      	strge	r3, [sp, #28]
 800d4fa:	9307      	strlt	r3, [sp, #28]
 800d4fc:	bfb8      	it	lt
 800d4fe:	9204      	strlt	r2, [sp, #16]
 800d500:	7823      	ldrb	r3, [r4, #0]
 800d502:	2b2e      	cmp	r3, #46	@ 0x2e
 800d504:	d10a      	bne.n	800d51c <_svfiprintf_r+0x130>
 800d506:	7863      	ldrb	r3, [r4, #1]
 800d508:	2b2a      	cmp	r3, #42	@ 0x2a
 800d50a:	d132      	bne.n	800d572 <_svfiprintf_r+0x186>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	1d1a      	adds	r2, r3, #4
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	9203      	str	r2, [sp, #12]
 800d514:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d518:	3402      	adds	r4, #2
 800d51a:	9305      	str	r3, [sp, #20]
 800d51c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d5e0 <_svfiprintf_r+0x1f4>
 800d520:	7821      	ldrb	r1, [r4, #0]
 800d522:	2203      	movs	r2, #3
 800d524:	4650      	mov	r0, sl
 800d526:	f7f2 fe73 	bl	8000210 <memchr>
 800d52a:	b138      	cbz	r0, 800d53c <_svfiprintf_r+0x150>
 800d52c:	9b04      	ldr	r3, [sp, #16]
 800d52e:	eba0 000a 	sub.w	r0, r0, sl
 800d532:	2240      	movs	r2, #64	@ 0x40
 800d534:	4082      	lsls	r2, r0
 800d536:	4313      	orrs	r3, r2
 800d538:	3401      	adds	r4, #1
 800d53a:	9304      	str	r3, [sp, #16]
 800d53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d540:	4824      	ldr	r0, [pc, #144]	@ (800d5d4 <_svfiprintf_r+0x1e8>)
 800d542:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d546:	2206      	movs	r2, #6
 800d548:	f7f2 fe62 	bl	8000210 <memchr>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d036      	beq.n	800d5be <_svfiprintf_r+0x1d2>
 800d550:	4b21      	ldr	r3, [pc, #132]	@ (800d5d8 <_svfiprintf_r+0x1ec>)
 800d552:	bb1b      	cbnz	r3, 800d59c <_svfiprintf_r+0x1b0>
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	3307      	adds	r3, #7
 800d558:	f023 0307 	bic.w	r3, r3, #7
 800d55c:	3308      	adds	r3, #8
 800d55e:	9303      	str	r3, [sp, #12]
 800d560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d562:	4433      	add	r3, r6
 800d564:	9309      	str	r3, [sp, #36]	@ 0x24
 800d566:	e76a      	b.n	800d43e <_svfiprintf_r+0x52>
 800d568:	fb0c 3202 	mla	r2, ip, r2, r3
 800d56c:	460c      	mov	r4, r1
 800d56e:	2001      	movs	r0, #1
 800d570:	e7a8      	b.n	800d4c4 <_svfiprintf_r+0xd8>
 800d572:	2300      	movs	r3, #0
 800d574:	3401      	adds	r4, #1
 800d576:	9305      	str	r3, [sp, #20]
 800d578:	4619      	mov	r1, r3
 800d57a:	f04f 0c0a 	mov.w	ip, #10
 800d57e:	4620      	mov	r0, r4
 800d580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d584:	3a30      	subs	r2, #48	@ 0x30
 800d586:	2a09      	cmp	r2, #9
 800d588:	d903      	bls.n	800d592 <_svfiprintf_r+0x1a6>
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0c6      	beq.n	800d51c <_svfiprintf_r+0x130>
 800d58e:	9105      	str	r1, [sp, #20]
 800d590:	e7c4      	b.n	800d51c <_svfiprintf_r+0x130>
 800d592:	fb0c 2101 	mla	r1, ip, r1, r2
 800d596:	4604      	mov	r4, r0
 800d598:	2301      	movs	r3, #1
 800d59a:	e7f0      	b.n	800d57e <_svfiprintf_r+0x192>
 800d59c:	ab03      	add	r3, sp, #12
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	462a      	mov	r2, r5
 800d5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d5dc <_svfiprintf_r+0x1f0>)
 800d5a4:	a904      	add	r1, sp, #16
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	f7fd fe3c 	bl	800b224 <_printf_float>
 800d5ac:	1c42      	adds	r2, r0, #1
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	d1d6      	bne.n	800d560 <_svfiprintf_r+0x174>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	065b      	lsls	r3, r3, #25
 800d5b6:	f53f af2d 	bmi.w	800d414 <_svfiprintf_r+0x28>
 800d5ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5bc:	e72c      	b.n	800d418 <_svfiprintf_r+0x2c>
 800d5be:	ab03      	add	r3, sp, #12
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	462a      	mov	r2, r5
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <_svfiprintf_r+0x1f0>)
 800d5c6:	a904      	add	r1, sp, #16
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	f7fe f8c3 	bl	800b754 <_printf_i>
 800d5ce:	e7ed      	b.n	800d5ac <_svfiprintf_r+0x1c0>
 800d5d0:	08010dee 	.word	0x08010dee
 800d5d4:	08010df8 	.word	0x08010df8
 800d5d8:	0800b225 	.word	0x0800b225
 800d5dc:	0800d335 	.word	0x0800d335
 800d5e0:	08010df4 	.word	0x08010df4

0800d5e4 <__sflush_r>:
 800d5e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ec:	0716      	lsls	r6, r2, #28
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	d454      	bmi.n	800d69e <__sflush_r+0xba>
 800d5f4:	684b      	ldr	r3, [r1, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dc02      	bgt.n	800d600 <__sflush_r+0x1c>
 800d5fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	dd48      	ble.n	800d692 <__sflush_r+0xae>
 800d600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d602:	2e00      	cmp	r6, #0
 800d604:	d045      	beq.n	800d692 <__sflush_r+0xae>
 800d606:	2300      	movs	r3, #0
 800d608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d60c:	682f      	ldr	r7, [r5, #0]
 800d60e:	6a21      	ldr	r1, [r4, #32]
 800d610:	602b      	str	r3, [r5, #0]
 800d612:	d030      	beq.n	800d676 <__sflush_r+0x92>
 800d614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	0759      	lsls	r1, r3, #29
 800d61a:	d505      	bpl.n	800d628 <__sflush_r+0x44>
 800d61c:	6863      	ldr	r3, [r4, #4]
 800d61e:	1ad2      	subs	r2, r2, r3
 800d620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d622:	b10b      	cbz	r3, 800d628 <__sflush_r+0x44>
 800d624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d626:	1ad2      	subs	r2, r2, r3
 800d628:	2300      	movs	r3, #0
 800d62a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d62c:	6a21      	ldr	r1, [r4, #32]
 800d62e:	4628      	mov	r0, r5
 800d630:	47b0      	blx	r6
 800d632:	1c43      	adds	r3, r0, #1
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	d106      	bne.n	800d646 <__sflush_r+0x62>
 800d638:	6829      	ldr	r1, [r5, #0]
 800d63a:	291d      	cmp	r1, #29
 800d63c:	d82b      	bhi.n	800d696 <__sflush_r+0xb2>
 800d63e:	4a2a      	ldr	r2, [pc, #168]	@ (800d6e8 <__sflush_r+0x104>)
 800d640:	40ca      	lsrs	r2, r1
 800d642:	07d6      	lsls	r6, r2, #31
 800d644:	d527      	bpl.n	800d696 <__sflush_r+0xb2>
 800d646:	2200      	movs	r2, #0
 800d648:	6062      	str	r2, [r4, #4]
 800d64a:	04d9      	lsls	r1, r3, #19
 800d64c:	6922      	ldr	r2, [r4, #16]
 800d64e:	6022      	str	r2, [r4, #0]
 800d650:	d504      	bpl.n	800d65c <__sflush_r+0x78>
 800d652:	1c42      	adds	r2, r0, #1
 800d654:	d101      	bne.n	800d65a <__sflush_r+0x76>
 800d656:	682b      	ldr	r3, [r5, #0]
 800d658:	b903      	cbnz	r3, 800d65c <__sflush_r+0x78>
 800d65a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d65c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d65e:	602f      	str	r7, [r5, #0]
 800d660:	b1b9      	cbz	r1, 800d692 <__sflush_r+0xae>
 800d662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d666:	4299      	cmp	r1, r3
 800d668:	d002      	beq.n	800d670 <__sflush_r+0x8c>
 800d66a:	4628      	mov	r0, r5
 800d66c:	f7ff f9e8 	bl	800ca40 <_free_r>
 800d670:	2300      	movs	r3, #0
 800d672:	6363      	str	r3, [r4, #52]	@ 0x34
 800d674:	e00d      	b.n	800d692 <__sflush_r+0xae>
 800d676:	2301      	movs	r3, #1
 800d678:	4628      	mov	r0, r5
 800d67a:	47b0      	blx	r6
 800d67c:	4602      	mov	r2, r0
 800d67e:	1c50      	adds	r0, r2, #1
 800d680:	d1c9      	bne.n	800d616 <__sflush_r+0x32>
 800d682:	682b      	ldr	r3, [r5, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d0c6      	beq.n	800d616 <__sflush_r+0x32>
 800d688:	2b1d      	cmp	r3, #29
 800d68a:	d001      	beq.n	800d690 <__sflush_r+0xac>
 800d68c:	2b16      	cmp	r3, #22
 800d68e:	d11e      	bne.n	800d6ce <__sflush_r+0xea>
 800d690:	602f      	str	r7, [r5, #0]
 800d692:	2000      	movs	r0, #0
 800d694:	e022      	b.n	800d6dc <__sflush_r+0xf8>
 800d696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d69a:	b21b      	sxth	r3, r3
 800d69c:	e01b      	b.n	800d6d6 <__sflush_r+0xf2>
 800d69e:	690f      	ldr	r7, [r1, #16]
 800d6a0:	2f00      	cmp	r7, #0
 800d6a2:	d0f6      	beq.n	800d692 <__sflush_r+0xae>
 800d6a4:	0793      	lsls	r3, r2, #30
 800d6a6:	680e      	ldr	r6, [r1, #0]
 800d6a8:	bf08      	it	eq
 800d6aa:	694b      	ldreq	r3, [r1, #20]
 800d6ac:	600f      	str	r7, [r1, #0]
 800d6ae:	bf18      	it	ne
 800d6b0:	2300      	movne	r3, #0
 800d6b2:	eba6 0807 	sub.w	r8, r6, r7
 800d6b6:	608b      	str	r3, [r1, #8]
 800d6b8:	f1b8 0f00 	cmp.w	r8, #0
 800d6bc:	dde9      	ble.n	800d692 <__sflush_r+0xae>
 800d6be:	6a21      	ldr	r1, [r4, #32]
 800d6c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6c2:	4643      	mov	r3, r8
 800d6c4:	463a      	mov	r2, r7
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	47b0      	blx	r6
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	dc08      	bgt.n	800d6e0 <__sflush_r+0xfc>
 800d6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6d6:	81a3      	strh	r3, [r4, #12]
 800d6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e0:	4407      	add	r7, r0
 800d6e2:	eba8 0800 	sub.w	r8, r8, r0
 800d6e6:	e7e7      	b.n	800d6b8 <__sflush_r+0xd4>
 800d6e8:	20400001 	.word	0x20400001

0800d6ec <_fflush_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	690b      	ldr	r3, [r1, #16]
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	b913      	cbnz	r3, 800d6fc <_fflush_r+0x10>
 800d6f6:	2500      	movs	r5, #0
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	b118      	cbz	r0, 800d706 <_fflush_r+0x1a>
 800d6fe:	6a03      	ldr	r3, [r0, #32]
 800d700:	b90b      	cbnz	r3, 800d706 <_fflush_r+0x1a>
 800d702:	f7fe f9d1 	bl	800baa8 <__sinit>
 800d706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0f3      	beq.n	800d6f6 <_fflush_r+0xa>
 800d70e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d710:	07d0      	lsls	r0, r2, #31
 800d712:	d404      	bmi.n	800d71e <_fflush_r+0x32>
 800d714:	0599      	lsls	r1, r3, #22
 800d716:	d402      	bmi.n	800d71e <_fflush_r+0x32>
 800d718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d71a:	f7fe fb26 	bl	800bd6a <__retarget_lock_acquire_recursive>
 800d71e:	4628      	mov	r0, r5
 800d720:	4621      	mov	r1, r4
 800d722:	f7ff ff5f 	bl	800d5e4 <__sflush_r>
 800d726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d728:	07da      	lsls	r2, r3, #31
 800d72a:	4605      	mov	r5, r0
 800d72c:	d4e4      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d72e:	89a3      	ldrh	r3, [r4, #12]
 800d730:	059b      	lsls	r3, r3, #22
 800d732:	d4e1      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d736:	f7fe fb19 	bl	800bd6c <__retarget_lock_release_recursive>
 800d73a:	e7dd      	b.n	800d6f8 <_fflush_r+0xc>

0800d73c <memmove>:
 800d73c:	4288      	cmp	r0, r1
 800d73e:	b510      	push	{r4, lr}
 800d740:	eb01 0402 	add.w	r4, r1, r2
 800d744:	d902      	bls.n	800d74c <memmove+0x10>
 800d746:	4284      	cmp	r4, r0
 800d748:	4623      	mov	r3, r4
 800d74a:	d807      	bhi.n	800d75c <memmove+0x20>
 800d74c:	1e43      	subs	r3, r0, #1
 800d74e:	42a1      	cmp	r1, r4
 800d750:	d008      	beq.n	800d764 <memmove+0x28>
 800d752:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d75a:	e7f8      	b.n	800d74e <memmove+0x12>
 800d75c:	4402      	add	r2, r0
 800d75e:	4601      	mov	r1, r0
 800d760:	428a      	cmp	r2, r1
 800d762:	d100      	bne.n	800d766 <memmove+0x2a>
 800d764:	bd10      	pop	{r4, pc}
 800d766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d76a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d76e:	e7f7      	b.n	800d760 <memmove+0x24>

0800d770 <_sbrk_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4d06      	ldr	r5, [pc, #24]	@ (800d78c <_sbrk_r+0x1c>)
 800d774:	2300      	movs	r3, #0
 800d776:	4604      	mov	r4, r0
 800d778:	4608      	mov	r0, r1
 800d77a:	602b      	str	r3, [r5, #0]
 800d77c:	f7f6 fe9a 	bl	80044b4 <_sbrk>
 800d780:	1c43      	adds	r3, r0, #1
 800d782:	d102      	bne.n	800d78a <_sbrk_r+0x1a>
 800d784:	682b      	ldr	r3, [r5, #0]
 800d786:	b103      	cbz	r3, 800d78a <_sbrk_r+0x1a>
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	bd38      	pop	{r3, r4, r5, pc}
 800d78c:	20000ef0 	.word	0x20000ef0

0800d790 <__assert_func>:
 800d790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d792:	4614      	mov	r4, r2
 800d794:	461a      	mov	r2, r3
 800d796:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <__assert_func+0x2c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4605      	mov	r5, r0
 800d79c:	68d8      	ldr	r0, [r3, #12]
 800d79e:	b14c      	cbz	r4, 800d7b4 <__assert_func+0x24>
 800d7a0:	4b07      	ldr	r3, [pc, #28]	@ (800d7c0 <__assert_func+0x30>)
 800d7a2:	9100      	str	r1, [sp, #0]
 800d7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7a8:	4906      	ldr	r1, [pc, #24]	@ (800d7c4 <__assert_func+0x34>)
 800d7aa:	462b      	mov	r3, r5
 800d7ac:	f000 f870 	bl	800d890 <fiprintf>
 800d7b0:	f000 f880 	bl	800d8b4 <abort>
 800d7b4:	4b04      	ldr	r3, [pc, #16]	@ (800d7c8 <__assert_func+0x38>)
 800d7b6:	461c      	mov	r4, r3
 800d7b8:	e7f3      	b.n	800d7a2 <__assert_func+0x12>
 800d7ba:	bf00      	nop
 800d7bc:	200000b4 	.word	0x200000b4
 800d7c0:	08010e09 	.word	0x08010e09
 800d7c4:	08010e16 	.word	0x08010e16
 800d7c8:	08010e44 	.word	0x08010e44

0800d7cc <_calloc_r>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	fba1 5402 	umull	r5, r4, r1, r2
 800d7d2:	b934      	cbnz	r4, 800d7e2 <_calloc_r+0x16>
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	f7ff f9a7 	bl	800cb28 <_malloc_r>
 800d7da:	4606      	mov	r6, r0
 800d7dc:	b928      	cbnz	r0, 800d7ea <_calloc_r+0x1e>
 800d7de:	4630      	mov	r0, r6
 800d7e0:	bd70      	pop	{r4, r5, r6, pc}
 800d7e2:	220c      	movs	r2, #12
 800d7e4:	6002      	str	r2, [r0, #0]
 800d7e6:	2600      	movs	r6, #0
 800d7e8:	e7f9      	b.n	800d7de <_calloc_r+0x12>
 800d7ea:	462a      	mov	r2, r5
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	f7fe fa2c 	bl	800bc4a <memset>
 800d7f2:	e7f4      	b.n	800d7de <_calloc_r+0x12>

0800d7f4 <__ascii_mbtowc>:
 800d7f4:	b082      	sub	sp, #8
 800d7f6:	b901      	cbnz	r1, 800d7fa <__ascii_mbtowc+0x6>
 800d7f8:	a901      	add	r1, sp, #4
 800d7fa:	b142      	cbz	r2, 800d80e <__ascii_mbtowc+0x1a>
 800d7fc:	b14b      	cbz	r3, 800d812 <__ascii_mbtowc+0x1e>
 800d7fe:	7813      	ldrb	r3, [r2, #0]
 800d800:	600b      	str	r3, [r1, #0]
 800d802:	7812      	ldrb	r2, [r2, #0]
 800d804:	1e10      	subs	r0, r2, #0
 800d806:	bf18      	it	ne
 800d808:	2001      	movne	r0, #1
 800d80a:	b002      	add	sp, #8
 800d80c:	4770      	bx	lr
 800d80e:	4610      	mov	r0, r2
 800d810:	e7fb      	b.n	800d80a <__ascii_mbtowc+0x16>
 800d812:	f06f 0001 	mvn.w	r0, #1
 800d816:	e7f8      	b.n	800d80a <__ascii_mbtowc+0x16>

0800d818 <_realloc_r>:
 800d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	4607      	mov	r7, r0
 800d81e:	4614      	mov	r4, r2
 800d820:	460d      	mov	r5, r1
 800d822:	b921      	cbnz	r1, 800d82e <_realloc_r+0x16>
 800d824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d828:	4611      	mov	r1, r2
 800d82a:	f7ff b97d 	b.w	800cb28 <_malloc_r>
 800d82e:	b92a      	cbnz	r2, 800d83c <_realloc_r+0x24>
 800d830:	f7ff f906 	bl	800ca40 <_free_r>
 800d834:	4625      	mov	r5, r4
 800d836:	4628      	mov	r0, r5
 800d838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d83c:	f000 f841 	bl	800d8c2 <_malloc_usable_size_r>
 800d840:	4284      	cmp	r4, r0
 800d842:	4606      	mov	r6, r0
 800d844:	d802      	bhi.n	800d84c <_realloc_r+0x34>
 800d846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d84a:	d8f4      	bhi.n	800d836 <_realloc_r+0x1e>
 800d84c:	4621      	mov	r1, r4
 800d84e:	4638      	mov	r0, r7
 800d850:	f7ff f96a 	bl	800cb28 <_malloc_r>
 800d854:	4680      	mov	r8, r0
 800d856:	b908      	cbnz	r0, 800d85c <_realloc_r+0x44>
 800d858:	4645      	mov	r5, r8
 800d85a:	e7ec      	b.n	800d836 <_realloc_r+0x1e>
 800d85c:	42b4      	cmp	r4, r6
 800d85e:	4622      	mov	r2, r4
 800d860:	4629      	mov	r1, r5
 800d862:	bf28      	it	cs
 800d864:	4632      	movcs	r2, r6
 800d866:	f7fe fa82 	bl	800bd6e <memcpy>
 800d86a:	4629      	mov	r1, r5
 800d86c:	4638      	mov	r0, r7
 800d86e:	f7ff f8e7 	bl	800ca40 <_free_r>
 800d872:	e7f1      	b.n	800d858 <_realloc_r+0x40>

0800d874 <__ascii_wctomb>:
 800d874:	4603      	mov	r3, r0
 800d876:	4608      	mov	r0, r1
 800d878:	b141      	cbz	r1, 800d88c <__ascii_wctomb+0x18>
 800d87a:	2aff      	cmp	r2, #255	@ 0xff
 800d87c:	d904      	bls.n	800d888 <__ascii_wctomb+0x14>
 800d87e:	228a      	movs	r2, #138	@ 0x8a
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	f04f 30ff 	mov.w	r0, #4294967295
 800d886:	4770      	bx	lr
 800d888:	700a      	strb	r2, [r1, #0]
 800d88a:	2001      	movs	r0, #1
 800d88c:	4770      	bx	lr
	...

0800d890 <fiprintf>:
 800d890:	b40e      	push	{r1, r2, r3}
 800d892:	b503      	push	{r0, r1, lr}
 800d894:	4601      	mov	r1, r0
 800d896:	ab03      	add	r3, sp, #12
 800d898:	4805      	ldr	r0, [pc, #20]	@ (800d8b0 <fiprintf+0x20>)
 800d89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d89e:	6800      	ldr	r0, [r0, #0]
 800d8a0:	9301      	str	r3, [sp, #4]
 800d8a2:	f000 f83f 	bl	800d924 <_vfiprintf_r>
 800d8a6:	b002      	add	sp, #8
 800d8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8ac:	b003      	add	sp, #12
 800d8ae:	4770      	bx	lr
 800d8b0:	200000b4 	.word	0x200000b4

0800d8b4 <abort>:
 800d8b4:	b508      	push	{r3, lr}
 800d8b6:	2006      	movs	r0, #6
 800d8b8:	f000 fa08 	bl	800dccc <raise>
 800d8bc:	2001      	movs	r0, #1
 800d8be:	f7f6 fd81 	bl	80043c4 <_exit>

0800d8c2 <_malloc_usable_size_r>:
 800d8c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8c6:	1f18      	subs	r0, r3, #4
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	bfbc      	itt	lt
 800d8cc:	580b      	ldrlt	r3, [r1, r0]
 800d8ce:	18c0      	addlt	r0, r0, r3
 800d8d0:	4770      	bx	lr

0800d8d2 <__sfputc_r>:
 800d8d2:	6893      	ldr	r3, [r2, #8]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	b410      	push	{r4}
 800d8da:	6093      	str	r3, [r2, #8]
 800d8dc:	da08      	bge.n	800d8f0 <__sfputc_r+0x1e>
 800d8de:	6994      	ldr	r4, [r2, #24]
 800d8e0:	42a3      	cmp	r3, r4
 800d8e2:	db01      	blt.n	800d8e8 <__sfputc_r+0x16>
 800d8e4:	290a      	cmp	r1, #10
 800d8e6:	d103      	bne.n	800d8f0 <__sfputc_r+0x1e>
 800d8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8ec:	f000 b932 	b.w	800db54 <__swbuf_r>
 800d8f0:	6813      	ldr	r3, [r2, #0]
 800d8f2:	1c58      	adds	r0, r3, #1
 800d8f4:	6010      	str	r0, [r2, #0]
 800d8f6:	7019      	strb	r1, [r3, #0]
 800d8f8:	4608      	mov	r0, r1
 800d8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <__sfputs_r>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	4606      	mov	r6, r0
 800d904:	460f      	mov	r7, r1
 800d906:	4614      	mov	r4, r2
 800d908:	18d5      	adds	r5, r2, r3
 800d90a:	42ac      	cmp	r4, r5
 800d90c:	d101      	bne.n	800d912 <__sfputs_r+0x12>
 800d90e:	2000      	movs	r0, #0
 800d910:	e007      	b.n	800d922 <__sfputs_r+0x22>
 800d912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d916:	463a      	mov	r2, r7
 800d918:	4630      	mov	r0, r6
 800d91a:	f7ff ffda 	bl	800d8d2 <__sfputc_r>
 800d91e:	1c43      	adds	r3, r0, #1
 800d920:	d1f3      	bne.n	800d90a <__sfputs_r+0xa>
 800d922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d924 <_vfiprintf_r>:
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d928:	460d      	mov	r5, r1
 800d92a:	b09d      	sub	sp, #116	@ 0x74
 800d92c:	4614      	mov	r4, r2
 800d92e:	4698      	mov	r8, r3
 800d930:	4606      	mov	r6, r0
 800d932:	b118      	cbz	r0, 800d93c <_vfiprintf_r+0x18>
 800d934:	6a03      	ldr	r3, [r0, #32]
 800d936:	b90b      	cbnz	r3, 800d93c <_vfiprintf_r+0x18>
 800d938:	f7fe f8b6 	bl	800baa8 <__sinit>
 800d93c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d93e:	07d9      	lsls	r1, r3, #31
 800d940:	d405      	bmi.n	800d94e <_vfiprintf_r+0x2a>
 800d942:	89ab      	ldrh	r3, [r5, #12]
 800d944:	059a      	lsls	r2, r3, #22
 800d946:	d402      	bmi.n	800d94e <_vfiprintf_r+0x2a>
 800d948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d94a:	f7fe fa0e 	bl	800bd6a <__retarget_lock_acquire_recursive>
 800d94e:	89ab      	ldrh	r3, [r5, #12]
 800d950:	071b      	lsls	r3, r3, #28
 800d952:	d501      	bpl.n	800d958 <_vfiprintf_r+0x34>
 800d954:	692b      	ldr	r3, [r5, #16]
 800d956:	b99b      	cbnz	r3, 800d980 <_vfiprintf_r+0x5c>
 800d958:	4629      	mov	r1, r5
 800d95a:	4630      	mov	r0, r6
 800d95c:	f000 f938 	bl	800dbd0 <__swsetup_r>
 800d960:	b170      	cbz	r0, 800d980 <_vfiprintf_r+0x5c>
 800d962:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d964:	07dc      	lsls	r4, r3, #31
 800d966:	d504      	bpl.n	800d972 <_vfiprintf_r+0x4e>
 800d968:	f04f 30ff 	mov.w	r0, #4294967295
 800d96c:	b01d      	add	sp, #116	@ 0x74
 800d96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d972:	89ab      	ldrh	r3, [r5, #12]
 800d974:	0598      	lsls	r0, r3, #22
 800d976:	d4f7      	bmi.n	800d968 <_vfiprintf_r+0x44>
 800d978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d97a:	f7fe f9f7 	bl	800bd6c <__retarget_lock_release_recursive>
 800d97e:	e7f3      	b.n	800d968 <_vfiprintf_r+0x44>
 800d980:	2300      	movs	r3, #0
 800d982:	9309      	str	r3, [sp, #36]	@ 0x24
 800d984:	2320      	movs	r3, #32
 800d986:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d98a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d98e:	2330      	movs	r3, #48	@ 0x30
 800d990:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db40 <_vfiprintf_r+0x21c>
 800d994:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d998:	f04f 0901 	mov.w	r9, #1
 800d99c:	4623      	mov	r3, r4
 800d99e:	469a      	mov	sl, r3
 800d9a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9a4:	b10a      	cbz	r2, 800d9aa <_vfiprintf_r+0x86>
 800d9a6:	2a25      	cmp	r2, #37	@ 0x25
 800d9a8:	d1f9      	bne.n	800d99e <_vfiprintf_r+0x7a>
 800d9aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d9ae:	d00b      	beq.n	800d9c8 <_vfiprintf_r+0xa4>
 800d9b0:	465b      	mov	r3, fp
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f7ff ffa2 	bl	800d900 <__sfputs_r>
 800d9bc:	3001      	adds	r0, #1
 800d9be:	f000 80a7 	beq.w	800db10 <_vfiprintf_r+0x1ec>
 800d9c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9c4:	445a      	add	r2, fp
 800d9c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f000 809f 	beq.w	800db10 <_vfiprintf_r+0x1ec>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9dc:	f10a 0a01 	add.w	sl, sl, #1
 800d9e0:	9304      	str	r3, [sp, #16]
 800d9e2:	9307      	str	r3, [sp, #28]
 800d9e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9ea:	4654      	mov	r4, sl
 800d9ec:	2205      	movs	r2, #5
 800d9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f2:	4853      	ldr	r0, [pc, #332]	@ (800db40 <_vfiprintf_r+0x21c>)
 800d9f4:	f7f2 fc0c 	bl	8000210 <memchr>
 800d9f8:	9a04      	ldr	r2, [sp, #16]
 800d9fa:	b9d8      	cbnz	r0, 800da34 <_vfiprintf_r+0x110>
 800d9fc:	06d1      	lsls	r1, r2, #27
 800d9fe:	bf44      	itt	mi
 800da00:	2320      	movmi	r3, #32
 800da02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da06:	0713      	lsls	r3, r2, #28
 800da08:	bf44      	itt	mi
 800da0a:	232b      	movmi	r3, #43	@ 0x2b
 800da0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da10:	f89a 3000 	ldrb.w	r3, [sl]
 800da14:	2b2a      	cmp	r3, #42	@ 0x2a
 800da16:	d015      	beq.n	800da44 <_vfiprintf_r+0x120>
 800da18:	9a07      	ldr	r2, [sp, #28]
 800da1a:	4654      	mov	r4, sl
 800da1c:	2000      	movs	r0, #0
 800da1e:	f04f 0c0a 	mov.w	ip, #10
 800da22:	4621      	mov	r1, r4
 800da24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da28:	3b30      	subs	r3, #48	@ 0x30
 800da2a:	2b09      	cmp	r3, #9
 800da2c:	d94b      	bls.n	800dac6 <_vfiprintf_r+0x1a2>
 800da2e:	b1b0      	cbz	r0, 800da5e <_vfiprintf_r+0x13a>
 800da30:	9207      	str	r2, [sp, #28]
 800da32:	e014      	b.n	800da5e <_vfiprintf_r+0x13a>
 800da34:	eba0 0308 	sub.w	r3, r0, r8
 800da38:	fa09 f303 	lsl.w	r3, r9, r3
 800da3c:	4313      	orrs	r3, r2
 800da3e:	9304      	str	r3, [sp, #16]
 800da40:	46a2      	mov	sl, r4
 800da42:	e7d2      	b.n	800d9ea <_vfiprintf_r+0xc6>
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	1d19      	adds	r1, r3, #4
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	9103      	str	r1, [sp, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	bfbb      	ittet	lt
 800da50:	425b      	neglt	r3, r3
 800da52:	f042 0202 	orrlt.w	r2, r2, #2
 800da56:	9307      	strge	r3, [sp, #28]
 800da58:	9307      	strlt	r3, [sp, #28]
 800da5a:	bfb8      	it	lt
 800da5c:	9204      	strlt	r2, [sp, #16]
 800da5e:	7823      	ldrb	r3, [r4, #0]
 800da60:	2b2e      	cmp	r3, #46	@ 0x2e
 800da62:	d10a      	bne.n	800da7a <_vfiprintf_r+0x156>
 800da64:	7863      	ldrb	r3, [r4, #1]
 800da66:	2b2a      	cmp	r3, #42	@ 0x2a
 800da68:	d132      	bne.n	800dad0 <_vfiprintf_r+0x1ac>
 800da6a:	9b03      	ldr	r3, [sp, #12]
 800da6c:	1d1a      	adds	r2, r3, #4
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	9203      	str	r2, [sp, #12]
 800da72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da76:	3402      	adds	r4, #2
 800da78:	9305      	str	r3, [sp, #20]
 800da7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db50 <_vfiprintf_r+0x22c>
 800da7e:	7821      	ldrb	r1, [r4, #0]
 800da80:	2203      	movs	r2, #3
 800da82:	4650      	mov	r0, sl
 800da84:	f7f2 fbc4 	bl	8000210 <memchr>
 800da88:	b138      	cbz	r0, 800da9a <_vfiprintf_r+0x176>
 800da8a:	9b04      	ldr	r3, [sp, #16]
 800da8c:	eba0 000a 	sub.w	r0, r0, sl
 800da90:	2240      	movs	r2, #64	@ 0x40
 800da92:	4082      	lsls	r2, r0
 800da94:	4313      	orrs	r3, r2
 800da96:	3401      	adds	r4, #1
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da9e:	4829      	ldr	r0, [pc, #164]	@ (800db44 <_vfiprintf_r+0x220>)
 800daa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800daa4:	2206      	movs	r2, #6
 800daa6:	f7f2 fbb3 	bl	8000210 <memchr>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d03f      	beq.n	800db2e <_vfiprintf_r+0x20a>
 800daae:	4b26      	ldr	r3, [pc, #152]	@ (800db48 <_vfiprintf_r+0x224>)
 800dab0:	bb1b      	cbnz	r3, 800dafa <_vfiprintf_r+0x1d6>
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	3307      	adds	r3, #7
 800dab6:	f023 0307 	bic.w	r3, r3, #7
 800daba:	3308      	adds	r3, #8
 800dabc:	9303      	str	r3, [sp, #12]
 800dabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac0:	443b      	add	r3, r7
 800dac2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dac4:	e76a      	b.n	800d99c <_vfiprintf_r+0x78>
 800dac6:	fb0c 3202 	mla	r2, ip, r2, r3
 800daca:	460c      	mov	r4, r1
 800dacc:	2001      	movs	r0, #1
 800dace:	e7a8      	b.n	800da22 <_vfiprintf_r+0xfe>
 800dad0:	2300      	movs	r3, #0
 800dad2:	3401      	adds	r4, #1
 800dad4:	9305      	str	r3, [sp, #20]
 800dad6:	4619      	mov	r1, r3
 800dad8:	f04f 0c0a 	mov.w	ip, #10
 800dadc:	4620      	mov	r0, r4
 800dade:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dae2:	3a30      	subs	r2, #48	@ 0x30
 800dae4:	2a09      	cmp	r2, #9
 800dae6:	d903      	bls.n	800daf0 <_vfiprintf_r+0x1cc>
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d0c6      	beq.n	800da7a <_vfiprintf_r+0x156>
 800daec:	9105      	str	r1, [sp, #20]
 800daee:	e7c4      	b.n	800da7a <_vfiprintf_r+0x156>
 800daf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800daf4:	4604      	mov	r4, r0
 800daf6:	2301      	movs	r3, #1
 800daf8:	e7f0      	b.n	800dadc <_vfiprintf_r+0x1b8>
 800dafa:	ab03      	add	r3, sp, #12
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	462a      	mov	r2, r5
 800db00:	4b12      	ldr	r3, [pc, #72]	@ (800db4c <_vfiprintf_r+0x228>)
 800db02:	a904      	add	r1, sp, #16
 800db04:	4630      	mov	r0, r6
 800db06:	f7fd fb8d 	bl	800b224 <_printf_float>
 800db0a:	4607      	mov	r7, r0
 800db0c:	1c78      	adds	r0, r7, #1
 800db0e:	d1d6      	bne.n	800dabe <_vfiprintf_r+0x19a>
 800db10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db12:	07d9      	lsls	r1, r3, #31
 800db14:	d405      	bmi.n	800db22 <_vfiprintf_r+0x1fe>
 800db16:	89ab      	ldrh	r3, [r5, #12]
 800db18:	059a      	lsls	r2, r3, #22
 800db1a:	d402      	bmi.n	800db22 <_vfiprintf_r+0x1fe>
 800db1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db1e:	f7fe f925 	bl	800bd6c <__retarget_lock_release_recursive>
 800db22:	89ab      	ldrh	r3, [r5, #12]
 800db24:	065b      	lsls	r3, r3, #25
 800db26:	f53f af1f 	bmi.w	800d968 <_vfiprintf_r+0x44>
 800db2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db2c:	e71e      	b.n	800d96c <_vfiprintf_r+0x48>
 800db2e:	ab03      	add	r3, sp, #12
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	462a      	mov	r2, r5
 800db34:	4b05      	ldr	r3, [pc, #20]	@ (800db4c <_vfiprintf_r+0x228>)
 800db36:	a904      	add	r1, sp, #16
 800db38:	4630      	mov	r0, r6
 800db3a:	f7fd fe0b 	bl	800b754 <_printf_i>
 800db3e:	e7e4      	b.n	800db0a <_vfiprintf_r+0x1e6>
 800db40:	08010dee 	.word	0x08010dee
 800db44:	08010df8 	.word	0x08010df8
 800db48:	0800b225 	.word	0x0800b225
 800db4c:	0800d901 	.word	0x0800d901
 800db50:	08010df4 	.word	0x08010df4

0800db54 <__swbuf_r>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	460e      	mov	r6, r1
 800db58:	4614      	mov	r4, r2
 800db5a:	4605      	mov	r5, r0
 800db5c:	b118      	cbz	r0, 800db66 <__swbuf_r+0x12>
 800db5e:	6a03      	ldr	r3, [r0, #32]
 800db60:	b90b      	cbnz	r3, 800db66 <__swbuf_r+0x12>
 800db62:	f7fd ffa1 	bl	800baa8 <__sinit>
 800db66:	69a3      	ldr	r3, [r4, #24]
 800db68:	60a3      	str	r3, [r4, #8]
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	071a      	lsls	r2, r3, #28
 800db6e:	d501      	bpl.n	800db74 <__swbuf_r+0x20>
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	b943      	cbnz	r3, 800db86 <__swbuf_r+0x32>
 800db74:	4621      	mov	r1, r4
 800db76:	4628      	mov	r0, r5
 800db78:	f000 f82a 	bl	800dbd0 <__swsetup_r>
 800db7c:	b118      	cbz	r0, 800db86 <__swbuf_r+0x32>
 800db7e:	f04f 37ff 	mov.w	r7, #4294967295
 800db82:	4638      	mov	r0, r7
 800db84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	6922      	ldr	r2, [r4, #16]
 800db8a:	1a98      	subs	r0, r3, r2
 800db8c:	6963      	ldr	r3, [r4, #20]
 800db8e:	b2f6      	uxtb	r6, r6
 800db90:	4283      	cmp	r3, r0
 800db92:	4637      	mov	r7, r6
 800db94:	dc05      	bgt.n	800dba2 <__swbuf_r+0x4e>
 800db96:	4621      	mov	r1, r4
 800db98:	4628      	mov	r0, r5
 800db9a:	f7ff fda7 	bl	800d6ec <_fflush_r>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d1ed      	bne.n	800db7e <__swbuf_r+0x2a>
 800dba2:	68a3      	ldr	r3, [r4, #8]
 800dba4:	3b01      	subs	r3, #1
 800dba6:	60a3      	str	r3, [r4, #8]
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	1c5a      	adds	r2, r3, #1
 800dbac:	6022      	str	r2, [r4, #0]
 800dbae:	701e      	strb	r6, [r3, #0]
 800dbb0:	6962      	ldr	r2, [r4, #20]
 800dbb2:	1c43      	adds	r3, r0, #1
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d004      	beq.n	800dbc2 <__swbuf_r+0x6e>
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	07db      	lsls	r3, r3, #31
 800dbbc:	d5e1      	bpl.n	800db82 <__swbuf_r+0x2e>
 800dbbe:	2e0a      	cmp	r6, #10
 800dbc0:	d1df      	bne.n	800db82 <__swbuf_r+0x2e>
 800dbc2:	4621      	mov	r1, r4
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f7ff fd91 	bl	800d6ec <_fflush_r>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d0d9      	beq.n	800db82 <__swbuf_r+0x2e>
 800dbce:	e7d6      	b.n	800db7e <__swbuf_r+0x2a>

0800dbd0 <__swsetup_r>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	4b29      	ldr	r3, [pc, #164]	@ (800dc78 <__swsetup_r+0xa8>)
 800dbd4:	4605      	mov	r5, r0
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	460c      	mov	r4, r1
 800dbda:	b118      	cbz	r0, 800dbe4 <__swsetup_r+0x14>
 800dbdc:	6a03      	ldr	r3, [r0, #32]
 800dbde:	b90b      	cbnz	r3, 800dbe4 <__swsetup_r+0x14>
 800dbe0:	f7fd ff62 	bl	800baa8 <__sinit>
 800dbe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe8:	0719      	lsls	r1, r3, #28
 800dbea:	d422      	bmi.n	800dc32 <__swsetup_r+0x62>
 800dbec:	06da      	lsls	r2, r3, #27
 800dbee:	d407      	bmi.n	800dc00 <__swsetup_r+0x30>
 800dbf0:	2209      	movs	r2, #9
 800dbf2:	602a      	str	r2, [r5, #0]
 800dbf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbf8:	81a3      	strh	r3, [r4, #12]
 800dbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800dbfe:	e033      	b.n	800dc68 <__swsetup_r+0x98>
 800dc00:	0758      	lsls	r0, r3, #29
 800dc02:	d512      	bpl.n	800dc2a <__swsetup_r+0x5a>
 800dc04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc06:	b141      	cbz	r1, 800dc1a <__swsetup_r+0x4a>
 800dc08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc0c:	4299      	cmp	r1, r3
 800dc0e:	d002      	beq.n	800dc16 <__swsetup_r+0x46>
 800dc10:	4628      	mov	r0, r5
 800dc12:	f7fe ff15 	bl	800ca40 <_free_r>
 800dc16:	2300      	movs	r3, #0
 800dc18:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc1a:	89a3      	ldrh	r3, [r4, #12]
 800dc1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	2300      	movs	r3, #0
 800dc24:	6063      	str	r3, [r4, #4]
 800dc26:	6923      	ldr	r3, [r4, #16]
 800dc28:	6023      	str	r3, [r4, #0]
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	f043 0308 	orr.w	r3, r3, #8
 800dc30:	81a3      	strh	r3, [r4, #12]
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	b94b      	cbnz	r3, 800dc4a <__swsetup_r+0x7a>
 800dc36:	89a3      	ldrh	r3, [r4, #12]
 800dc38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc40:	d003      	beq.n	800dc4a <__swsetup_r+0x7a>
 800dc42:	4621      	mov	r1, r4
 800dc44:	4628      	mov	r0, r5
 800dc46:	f000 f883 	bl	800dd50 <__smakebuf_r>
 800dc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc4e:	f013 0201 	ands.w	r2, r3, #1
 800dc52:	d00a      	beq.n	800dc6a <__swsetup_r+0x9a>
 800dc54:	2200      	movs	r2, #0
 800dc56:	60a2      	str	r2, [r4, #8]
 800dc58:	6962      	ldr	r2, [r4, #20]
 800dc5a:	4252      	negs	r2, r2
 800dc5c:	61a2      	str	r2, [r4, #24]
 800dc5e:	6922      	ldr	r2, [r4, #16]
 800dc60:	b942      	cbnz	r2, 800dc74 <__swsetup_r+0xa4>
 800dc62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc66:	d1c5      	bne.n	800dbf4 <__swsetup_r+0x24>
 800dc68:	bd38      	pop	{r3, r4, r5, pc}
 800dc6a:	0799      	lsls	r1, r3, #30
 800dc6c:	bf58      	it	pl
 800dc6e:	6962      	ldrpl	r2, [r4, #20]
 800dc70:	60a2      	str	r2, [r4, #8]
 800dc72:	e7f4      	b.n	800dc5e <__swsetup_r+0x8e>
 800dc74:	2000      	movs	r0, #0
 800dc76:	e7f7      	b.n	800dc68 <__swsetup_r+0x98>
 800dc78:	200000b4 	.word	0x200000b4

0800dc7c <_raise_r>:
 800dc7c:	291f      	cmp	r1, #31
 800dc7e:	b538      	push	{r3, r4, r5, lr}
 800dc80:	4605      	mov	r5, r0
 800dc82:	460c      	mov	r4, r1
 800dc84:	d904      	bls.n	800dc90 <_raise_r+0x14>
 800dc86:	2316      	movs	r3, #22
 800dc88:	6003      	str	r3, [r0, #0]
 800dc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc92:	b112      	cbz	r2, 800dc9a <_raise_r+0x1e>
 800dc94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc98:	b94b      	cbnz	r3, 800dcae <_raise_r+0x32>
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f000 f830 	bl	800dd00 <_getpid_r>
 800dca0:	4622      	mov	r2, r4
 800dca2:	4601      	mov	r1, r0
 800dca4:	4628      	mov	r0, r5
 800dca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcaa:	f000 b817 	b.w	800dcdc <_kill_r>
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d00a      	beq.n	800dcc8 <_raise_r+0x4c>
 800dcb2:	1c59      	adds	r1, r3, #1
 800dcb4:	d103      	bne.n	800dcbe <_raise_r+0x42>
 800dcb6:	2316      	movs	r3, #22
 800dcb8:	6003      	str	r3, [r0, #0]
 800dcba:	2001      	movs	r0, #1
 800dcbc:	e7e7      	b.n	800dc8e <_raise_r+0x12>
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	4798      	blx	r3
 800dcc8:	2000      	movs	r0, #0
 800dcca:	e7e0      	b.n	800dc8e <_raise_r+0x12>

0800dccc <raise>:
 800dccc:	4b02      	ldr	r3, [pc, #8]	@ (800dcd8 <raise+0xc>)
 800dcce:	4601      	mov	r1, r0
 800dcd0:	6818      	ldr	r0, [r3, #0]
 800dcd2:	f7ff bfd3 	b.w	800dc7c <_raise_r>
 800dcd6:	bf00      	nop
 800dcd8:	200000b4 	.word	0x200000b4

0800dcdc <_kill_r>:
 800dcdc:	b538      	push	{r3, r4, r5, lr}
 800dcde:	4d07      	ldr	r5, [pc, #28]	@ (800dcfc <_kill_r+0x20>)
 800dce0:	2300      	movs	r3, #0
 800dce2:	4604      	mov	r4, r0
 800dce4:	4608      	mov	r0, r1
 800dce6:	4611      	mov	r1, r2
 800dce8:	602b      	str	r3, [r5, #0]
 800dcea:	f7f6 fb5b 	bl	80043a4 <_kill>
 800dcee:	1c43      	adds	r3, r0, #1
 800dcf0:	d102      	bne.n	800dcf8 <_kill_r+0x1c>
 800dcf2:	682b      	ldr	r3, [r5, #0]
 800dcf4:	b103      	cbz	r3, 800dcf8 <_kill_r+0x1c>
 800dcf6:	6023      	str	r3, [r4, #0]
 800dcf8:	bd38      	pop	{r3, r4, r5, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000ef0 	.word	0x20000ef0

0800dd00 <_getpid_r>:
 800dd00:	f7f6 bb48 	b.w	8004394 <_getpid>

0800dd04 <__swhatbuf_r>:
 800dd04:	b570      	push	{r4, r5, r6, lr}
 800dd06:	460c      	mov	r4, r1
 800dd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	b096      	sub	sp, #88	@ 0x58
 800dd10:	4615      	mov	r5, r2
 800dd12:	461e      	mov	r6, r3
 800dd14:	da0d      	bge.n	800dd32 <__swhatbuf_r+0x2e>
 800dd16:	89a3      	ldrh	r3, [r4, #12]
 800dd18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd1c:	f04f 0100 	mov.w	r1, #0
 800dd20:	bf14      	ite	ne
 800dd22:	2340      	movne	r3, #64	@ 0x40
 800dd24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd28:	2000      	movs	r0, #0
 800dd2a:	6031      	str	r1, [r6, #0]
 800dd2c:	602b      	str	r3, [r5, #0]
 800dd2e:	b016      	add	sp, #88	@ 0x58
 800dd30:	bd70      	pop	{r4, r5, r6, pc}
 800dd32:	466a      	mov	r2, sp
 800dd34:	f000 f848 	bl	800ddc8 <_fstat_r>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	dbec      	blt.n	800dd16 <__swhatbuf_r+0x12>
 800dd3c:	9901      	ldr	r1, [sp, #4]
 800dd3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd46:	4259      	negs	r1, r3
 800dd48:	4159      	adcs	r1, r3
 800dd4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd4e:	e7eb      	b.n	800dd28 <__swhatbuf_r+0x24>

0800dd50 <__smakebuf_r>:
 800dd50:	898b      	ldrh	r3, [r1, #12]
 800dd52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd54:	079d      	lsls	r5, r3, #30
 800dd56:	4606      	mov	r6, r0
 800dd58:	460c      	mov	r4, r1
 800dd5a:	d507      	bpl.n	800dd6c <__smakebuf_r+0x1c>
 800dd5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	6123      	str	r3, [r4, #16]
 800dd64:	2301      	movs	r3, #1
 800dd66:	6163      	str	r3, [r4, #20]
 800dd68:	b003      	add	sp, #12
 800dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6c:	ab01      	add	r3, sp, #4
 800dd6e:	466a      	mov	r2, sp
 800dd70:	f7ff ffc8 	bl	800dd04 <__swhatbuf_r>
 800dd74:	9f00      	ldr	r7, [sp, #0]
 800dd76:	4605      	mov	r5, r0
 800dd78:	4639      	mov	r1, r7
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f7fe fed4 	bl	800cb28 <_malloc_r>
 800dd80:	b948      	cbnz	r0, 800dd96 <__smakebuf_r+0x46>
 800dd82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd86:	059a      	lsls	r2, r3, #22
 800dd88:	d4ee      	bmi.n	800dd68 <__smakebuf_r+0x18>
 800dd8a:	f023 0303 	bic.w	r3, r3, #3
 800dd8e:	f043 0302 	orr.w	r3, r3, #2
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	e7e2      	b.n	800dd5c <__smakebuf_r+0xc>
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	6020      	str	r0, [r4, #0]
 800dd9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd9e:	81a3      	strh	r3, [r4, #12]
 800dda0:	9b01      	ldr	r3, [sp, #4]
 800dda2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dda6:	b15b      	cbz	r3, 800ddc0 <__smakebuf_r+0x70>
 800dda8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddac:	4630      	mov	r0, r6
 800ddae:	f000 f81d 	bl	800ddec <_isatty_r>
 800ddb2:	b128      	cbz	r0, 800ddc0 <__smakebuf_r+0x70>
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	f023 0303 	bic.w	r3, r3, #3
 800ddba:	f043 0301 	orr.w	r3, r3, #1
 800ddbe:	81a3      	strh	r3, [r4, #12]
 800ddc0:	89a3      	ldrh	r3, [r4, #12]
 800ddc2:	431d      	orrs	r5, r3
 800ddc4:	81a5      	strh	r5, [r4, #12]
 800ddc6:	e7cf      	b.n	800dd68 <__smakebuf_r+0x18>

0800ddc8 <_fstat_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4d07      	ldr	r5, [pc, #28]	@ (800dde8 <_fstat_r+0x20>)
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4604      	mov	r4, r0
 800ddd0:	4608      	mov	r0, r1
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	602b      	str	r3, [r5, #0]
 800ddd6:	f7f6 fb45 	bl	8004464 <_fstat>
 800ddda:	1c43      	adds	r3, r0, #1
 800dddc:	d102      	bne.n	800dde4 <_fstat_r+0x1c>
 800ddde:	682b      	ldr	r3, [r5, #0]
 800dde0:	b103      	cbz	r3, 800dde4 <_fstat_r+0x1c>
 800dde2:	6023      	str	r3, [r4, #0]
 800dde4:	bd38      	pop	{r3, r4, r5, pc}
 800dde6:	bf00      	nop
 800dde8:	20000ef0 	.word	0x20000ef0

0800ddec <_isatty_r>:
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4d06      	ldr	r5, [pc, #24]	@ (800de08 <_isatty_r+0x1c>)
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	4608      	mov	r0, r1
 800ddf6:	602b      	str	r3, [r5, #0]
 800ddf8:	f7f6 fb44 	bl	8004484 <_isatty>
 800ddfc:	1c43      	adds	r3, r0, #1
 800ddfe:	d102      	bne.n	800de06 <_isatty_r+0x1a>
 800de00:	682b      	ldr	r3, [r5, #0]
 800de02:	b103      	cbz	r3, 800de06 <_isatty_r+0x1a>
 800de04:	6023      	str	r3, [r4, #0]
 800de06:	bd38      	pop	{r3, r4, r5, pc}
 800de08:	20000ef0 	.word	0x20000ef0

0800de0c <fmaxf>:
 800de0c:	b508      	push	{r3, lr}
 800de0e:	ed2d 8b02 	vpush	{d8}
 800de12:	eeb0 8a40 	vmov.f32	s16, s0
 800de16:	eef0 8a60 	vmov.f32	s17, s1
 800de1a:	f000 f831 	bl	800de80 <__fpclassifyf>
 800de1e:	b930      	cbnz	r0, 800de2e <fmaxf+0x22>
 800de20:	eeb0 8a68 	vmov.f32	s16, s17
 800de24:	eeb0 0a48 	vmov.f32	s0, s16
 800de28:	ecbd 8b02 	vpop	{d8}
 800de2c:	bd08      	pop	{r3, pc}
 800de2e:	eeb0 0a68 	vmov.f32	s0, s17
 800de32:	f000 f825 	bl	800de80 <__fpclassifyf>
 800de36:	2800      	cmp	r0, #0
 800de38:	d0f4      	beq.n	800de24 <fmaxf+0x18>
 800de3a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de42:	dded      	ble.n	800de20 <fmaxf+0x14>
 800de44:	e7ee      	b.n	800de24 <fmaxf+0x18>

0800de46 <fminf>:
 800de46:	b508      	push	{r3, lr}
 800de48:	ed2d 8b02 	vpush	{d8}
 800de4c:	eeb0 8a40 	vmov.f32	s16, s0
 800de50:	eef0 8a60 	vmov.f32	s17, s1
 800de54:	f000 f814 	bl	800de80 <__fpclassifyf>
 800de58:	b930      	cbnz	r0, 800de68 <fminf+0x22>
 800de5a:	eeb0 8a68 	vmov.f32	s16, s17
 800de5e:	eeb0 0a48 	vmov.f32	s0, s16
 800de62:	ecbd 8b02 	vpop	{d8}
 800de66:	bd08      	pop	{r3, pc}
 800de68:	eeb0 0a68 	vmov.f32	s0, s17
 800de6c:	f000 f808 	bl	800de80 <__fpclassifyf>
 800de70:	2800      	cmp	r0, #0
 800de72:	d0f4      	beq.n	800de5e <fminf+0x18>
 800de74:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7c:	d5ed      	bpl.n	800de5a <fminf+0x14>
 800de7e:	e7ee      	b.n	800de5e <fminf+0x18>

0800de80 <__fpclassifyf>:
 800de80:	ee10 3a10 	vmov	r3, s0
 800de84:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800de88:	d00d      	beq.n	800dea6 <__fpclassifyf+0x26>
 800de8a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800de8e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800de92:	d30a      	bcc.n	800deaa <__fpclassifyf+0x2a>
 800de94:	4b07      	ldr	r3, [pc, #28]	@ (800deb4 <__fpclassifyf+0x34>)
 800de96:	1e42      	subs	r2, r0, #1
 800de98:	429a      	cmp	r2, r3
 800de9a:	d908      	bls.n	800deae <__fpclassifyf+0x2e>
 800de9c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800dea0:	4258      	negs	r0, r3
 800dea2:	4158      	adcs	r0, r3
 800dea4:	4770      	bx	lr
 800dea6:	2002      	movs	r0, #2
 800dea8:	4770      	bx	lr
 800deaa:	2004      	movs	r0, #4
 800deac:	4770      	bx	lr
 800deae:	2003      	movs	r0, #3
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	007ffffe 	.word	0x007ffffe

0800deb8 <round>:
 800deb8:	ec51 0b10 	vmov	r0, r1, d0
 800debc:	b570      	push	{r4, r5, r6, lr}
 800debe:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800dec2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800dec6:	2a13      	cmp	r2, #19
 800dec8:	460b      	mov	r3, r1
 800deca:	4605      	mov	r5, r0
 800decc:	dc1b      	bgt.n	800df06 <round+0x4e>
 800dece:	2a00      	cmp	r2, #0
 800ded0:	da0b      	bge.n	800deea <round+0x32>
 800ded2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ded6:	3201      	adds	r2, #1
 800ded8:	bf04      	itt	eq
 800deda:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800dede:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800dee2:	2200      	movs	r2, #0
 800dee4:	4619      	mov	r1, r3
 800dee6:	4610      	mov	r0, r2
 800dee8:	e015      	b.n	800df16 <round+0x5e>
 800deea:	4c15      	ldr	r4, [pc, #84]	@ (800df40 <round+0x88>)
 800deec:	4114      	asrs	r4, r2
 800deee:	ea04 0601 	and.w	r6, r4, r1
 800def2:	4306      	orrs	r6, r0
 800def4:	d00f      	beq.n	800df16 <round+0x5e>
 800def6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800defa:	fa41 f202 	asr.w	r2, r1, r2
 800defe:	4413      	add	r3, r2
 800df00:	ea23 0304 	bic.w	r3, r3, r4
 800df04:	e7ed      	b.n	800dee2 <round+0x2a>
 800df06:	2a33      	cmp	r2, #51	@ 0x33
 800df08:	dd08      	ble.n	800df1c <round+0x64>
 800df0a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800df0e:	d102      	bne.n	800df16 <round+0x5e>
 800df10:	4602      	mov	r2, r0
 800df12:	f7f2 f9db 	bl	80002cc <__adddf3>
 800df16:	ec41 0b10 	vmov	d0, r0, r1
 800df1a:	bd70      	pop	{r4, r5, r6, pc}
 800df1c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800df20:	f04f 34ff 	mov.w	r4, #4294967295
 800df24:	40f4      	lsrs	r4, r6
 800df26:	4204      	tst	r4, r0
 800df28:	d0f5      	beq.n	800df16 <round+0x5e>
 800df2a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800df2e:	2201      	movs	r2, #1
 800df30:	408a      	lsls	r2, r1
 800df32:	1952      	adds	r2, r2, r5
 800df34:	bf28      	it	cs
 800df36:	3301      	addcs	r3, #1
 800df38:	ea22 0204 	bic.w	r2, r2, r4
 800df3c:	e7d2      	b.n	800dee4 <round+0x2c>
 800df3e:	bf00      	nop
 800df40:	000fffff 	.word	0x000fffff

0800df44 <_init>:
 800df44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df46:	bf00      	nop
 800df48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df4a:	bc08      	pop	{r3}
 800df4c:	469e      	mov	lr, r3
 800df4e:	4770      	bx	lr

0800df50 <_fini>:
 800df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df52:	bf00      	nop
 800df54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df56:	bc08      	pop	{r3}
 800df58:	469e      	mov	lr, r3
 800df5a:	4770      	bx	lr
