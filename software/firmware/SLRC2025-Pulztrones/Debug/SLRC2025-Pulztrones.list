
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb3c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000339c  0800fd10  0800fd10  00010d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130ac  080130ac  00015284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080130ac  080130ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130b4  080130b4  00015284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130b4  080130b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080130b8  080130b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  080130bc  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc8  20000284  08013340  00015284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f4c  08013340  00015f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2a6  00000000  00000000  000152b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053da  00000000  00000000  0003255a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  00037938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155b  00000000  00000000  00039518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c1f  00000000  00000000  0003aa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028cd8  00000000  00000000  00064692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9929  00000000  00000000  0008d36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082b8  00000000  00000000  00176cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0017ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000284 	.word	0x20000284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fcf4 	.word	0x0800fcf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000288 	.word	0x20000288
 800020c:	0800fcf4 	.word	0x0800fcf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Arm_Init>:
/**
  * @brief  Initialize the robot arm controller
  * @retval int: 0 if successful, -1 if error
  */
int Arm_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    // Check if already initialized
    if (initialized)
 8000ff8:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <Arm_Init+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <Arm_Init+0x10>
        return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e05e      	b.n	80010c2 <Arm_Init+0xce>

    // Register the four servos for the arm if they don't exist already
    if (servoIds[0] == -1) {
 8001004:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <Arm_Init+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d10c      	bne.n	8001028 <Arm_Init+0x34>
        servoIds[0] = Servo_Register(12, "Base", 0.0f, 180.0f, ARM_HOME_BASE_ANGLE);
 800100e:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 80010d0 <Arm_Init+0xdc>
 8001012:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80010d4 <Arm_Init+0xe0>
 8001016:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80010d8 <Arm_Init+0xe4>
 800101a:	4930      	ldr	r1, [pc, #192]	@ (80010dc <Arm_Init+0xe8>)
 800101c:	200c      	movs	r0, #12
 800101e:	f003 f911 	bl	8004244 <Servo_Register>
 8001022:	4603      	mov	r3, r0
 8001024:	4a29      	ldr	r2, [pc, #164]	@ (80010cc <Arm_Init+0xd8>)
 8001026:	6013      	str	r3, [r2, #0]
    }

    if (servoIds[1] == -1) {
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <Arm_Init+0xd8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d10c      	bne.n	800104c <Arm_Init+0x58>
        servoIds[1] = Servo_Register(13, "Link1", 0.0f, 180.0f, ARM_HOME_LINK1_ANGLE);
 8001032:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001036:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80010d4 <Arm_Init+0xe0>
 800103a:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80010d8 <Arm_Init+0xe4>
 800103e:	4928      	ldr	r1, [pc, #160]	@ (80010e0 <Arm_Init+0xec>)
 8001040:	200d      	movs	r0, #13
 8001042:	f003 f8ff 	bl	8004244 <Servo_Register>
 8001046:	4603      	mov	r3, r0
 8001048:	4a20      	ldr	r2, [pc, #128]	@ (80010cc <Arm_Init+0xd8>)
 800104a:	6053      	str	r3, [r2, #4]
    }

    if (servoIds[2] == -1) {
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <Arm_Init+0xd8>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d10c      	bne.n	8001070 <Arm_Init+0x7c>
        servoIds[2] = Servo_Register(14, "Link2", 0.0f, 180.0f, ARM_HOME_LINK2_ANGLE);
 8001056:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80010e4 <Arm_Init+0xf0>
 800105a:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80010d4 <Arm_Init+0xe0>
 800105e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80010d8 <Arm_Init+0xe4>
 8001062:	4921      	ldr	r1, [pc, #132]	@ (80010e8 <Arm_Init+0xf4>)
 8001064:	200e      	movs	r0, #14
 8001066:	f003 f8ed 	bl	8004244 <Servo_Register>
 800106a:	4603      	mov	r3, r0
 800106c:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <Arm_Init+0xd8>)
 800106e:	6093      	str	r3, [r2, #8]
    }

    if (servoIds[3] == -1) {
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <Arm_Init+0xd8>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d10c      	bne.n	8001094 <Arm_Init+0xa0>
        servoIds[3] = Servo_Register(15, "Link3", 0.0f, 180.0f, ARM_HOME_LINK3_ANGLE);
 800107a:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 80010ec <Arm_Init+0xf8>
 800107e:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80010d4 <Arm_Init+0xe0>
 8001082:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80010d8 <Arm_Init+0xe4>
 8001086:	491a      	ldr	r1, [pc, #104]	@ (80010f0 <Arm_Init+0xfc>)
 8001088:	200f      	movs	r0, #15
 800108a:	f003 f8db 	bl	8004244 <Servo_Register>
 800108e:	4603      	mov	r3, r0
 8001090:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <Arm_Init+0xd8>)
 8001092:	60d3      	str	r3, [r2, #12]
    }

    // Check if all servos were registered successfully
    if (servoIds[0] < 0 || servoIds[1] < 0 || servoIds[2] < 0 || servoIds[3] < 0) {
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <Arm_Init+0xd8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0b      	blt.n	80010b4 <Arm_Init+0xc0>
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <Arm_Init+0xd8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db07      	blt.n	80010b4 <Arm_Init+0xc0>
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <Arm_Init+0xd8>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db03      	blt.n	80010b4 <Arm_Init+0xc0>
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <Arm_Init+0xd8>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da02      	bge.n	80010ba <Arm_Init+0xc6>
        return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e003      	b.n	80010c2 <Arm_Init+0xce>
    }

    initialized = 1;
 80010ba:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <Arm_Init+0xd4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
    return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002a0 	.word	0x200002a0
 80010cc:	20000000 	.word	0x20000000
 80010d0:	42d20000 	.word	0x42d20000
 80010d4:	43340000 	.word	0x43340000
 80010d8:	00000000 	.word	0x00000000
 80010dc:	0800fd10 	.word	0x0800fd10
 80010e0:	0800fd18 	.word	0x0800fd18
 80010e4:	42be0000 	.word	0x42be0000
 80010e8:	0800fd20 	.word	0x0800fd20
 80010ec:	42a00000 	.word	0x42a00000
 80010f0:	0800fd28 	.word	0x0800fd28

080010f4 <Arm_MoveServoGradually>:
  * @param  stepDelay: Delay between steps in milliseconds (larger = slower)
  * @retval int: 0 if successful, -1 if error
  * @note   This function blocks until movement is complete
  */
int Arm_MoveServoGradually(int servoId, float targetAngle, float stepSize, uint16_t stepDelay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001100:	edc7 0a01 	vstr	s1, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
    // Check if servo ID is valid
    if (servoId < 0) {
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da02      	bge.n	8001114 <Arm_MoveServoGradually+0x20>
        return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e06f      	b.n	80011f4 <Arm_MoveServoGradually+0x100>
    }

    // Get current angle
    float currentAngle = Servo_GetAngle(servoId);
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f003 f9f5 	bl	8004504 <Servo_GetAngle>
 800111a:	ed87 0a07 	vstr	s0, [r7, #28]
    if (currentAngle < 0.0f) { // Error
 800111e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d502      	bpl.n	8001132 <Arm_MoveServoGradually+0x3e>
        return -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	e060      	b.n	80011f4 <Arm_MoveServoGradually+0x100>
    }

    // If already at target position (or very close), no need to move
    if (fabsf(currentAngle - targetAngle) < stepSize) {
 8001132:	ed97 7a07 	vldr	s14, [r7, #28]
 8001136:	edd7 7a02 	vldr	s15, [r7, #8]
 800113a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113e:	eef0 7ae7 	vabs.f32	s15, s15
 8001142:	ed97 7a01 	vldr	s14, [r7, #4]
 8001146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	dd01      	ble.n	8001154 <Arm_MoveServoGradually+0x60>
        return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e04f      	b.n	80011f4 <Arm_MoveServoGradually+0x100>
    }

    // Determine direction of movement
    float direction = (targetAngle > currentAngle) ? 1.0f : -1.0f;
 8001154:	ed97 7a02 	vldr	s14, [r7, #8]
 8001158:	edd7 7a07 	vldr	s15, [r7, #28]
 800115c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	dd02      	ble.n	800116c <Arm_MoveServoGradually+0x78>
 8001166:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800116a:	e000      	b.n	800116e <Arm_MoveServoGradually+0x7a>
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Arm_MoveServoGradually+0x108>)
 800116e:	617b      	str	r3, [r7, #20]

    // Calculate number of steps needed
    int steps = (int)(fabsf(targetAngle - currentAngle) / stepSize);
 8001170:	ed97 7a02 	vldr	s14, [r7, #8]
 8001174:	edd7 7a07 	vldr	s15, [r7, #28]
 8001178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117c:	eef0 6ae7 	vabs.f32	s13, s15
 8001180:	ed97 7a01 	vldr	s14, [r7, #4]
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118c:	ee17 3a90 	vmov	r3, s15
 8001190:	613b      	str	r3, [r7, #16]

    // Move in steps until target is reached
    for (int i = 0; i < steps; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	e01d      	b.n	80011d4 <Arm_MoveServoGradually+0xe0>
        currentAngle += direction * stepSize;
 8001198:	ed97 7a05 	vldr	s14, [r7, #20]
 800119c:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80011a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ac:	edc7 7a07 	vstr	s15, [r7, #28]

        // Set new position
        if (Servo_SetAngle(servoId, currentAngle) != 0) {
 80011b0:	ed97 0a07 	vldr	s0, [r7, #28]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f003 f931 	bl	800441c <Servo_SetAngle>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <Arm_MoveServoGradually+0xd2>
            return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	e016      	b.n	80011f4 <Arm_MoveServoGradually+0x100>
        }

        // Delay between steps
        HAL_Delay(stepDelay);
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 f8bd 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbdd      	blt.n	8001198 <Arm_MoveServoGradually+0xa4>
    }

    // Final step to ensure we reach exactly the target angle
    if (Servo_SetAngle(servoId, targetAngle) != 0) {
 80011dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f003 f91b 	bl	800441c <Servo_SetAngle>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <Arm_MoveServoGradually+0xfe>
        return -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	e000      	b.n	80011f4 <Arm_MoveServoGradually+0x100>
    }

    return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	bf800000 	.word	0xbf800000

08001200 <Arm_MoveServo>:
  * @param  targetAngle: Desired final angle in degrees
  * @retval int: 0 if successful, -1 if error
  * @note   This function blocks until movement is complete
  */
int Arm_MoveServo(int servoId, float targetAngle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	ed87 0a00 	vstr	s0, [r7]
    return Arm_MoveServoGradually(servoId, targetAngle, ARM_DEFAULT_STEP, ARM_DEFAULT_DELAY);
 800120c:	210f      	movs	r1, #15
 800120e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001212:	ed97 0a00 	vldr	s0, [r7]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff6c 	bl	80010f4 <Arm_MoveServoGradually>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <pickup_and_Store>:
{
    return Arm_MoveTo(ARM_HOME_BASE_ANGLE, ARM_HOME_LINK1_ANGLE,
                      ARM_HOME_LINK2_ANGLE, ARM_HOME_LINK3_ANGLE);
}

void pickup_and_Store(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	Arm_MoveServo(ARM_LINK2_SERVO,75);
 800122e:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8001360 <pickup_and_Store+0x138>
 8001232:	2002      	movs	r0, #2
 8001234:	f7ff ffe4 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_BASE_SERVO,14);
 8001238:	eeb2 0a0c 	vmov.f32	s0, #44	@ 0x41600000  14.0
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ffdf 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK2_SERVO,90);
 8001242:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8001364 <pickup_and_Store+0x13c>
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff ffda 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK3_SERVO,15);
 800124c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001250:	2003      	movs	r0, #3
 8001252:	f7ff ffd5 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK1_SERVO,70);
 8001256:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8001368 <pickup_and_Store+0x140>
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff ffd0 	bl	8001200 <Arm_MoveServo>

// read color
	Color Ball_color = GetBallColor();
 8001260:	f002 f8f8 	bl	8003454 <GetBallColor>
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2000);
 8001268:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800126c:	f005 f86c 	bl	8006348 <HAL_Delay>
	Arm_MoveServo(ARM_LINK1_SERVO,50);
 8001270:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800136c <pickup_and_Store+0x144>
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff ffc3 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_BASE_SERVO,5);
 800127a:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff ffbe 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK3_SERVO,15);
 8001284:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff ffb9 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK1_SERVO,75);//70
 800128e:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001360 <pickup_and_Store+0x138>
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff ffb4 	bl	8001200 <Arm_MoveServo>


// vaccum pump on
	turn_on_air_pump();
 8001298:	f000 f926 	bl	80014e8 <turn_on_air_pump>

//time to suck the ball
	HAL_Delay(2000);
 800129c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012a0:	f005 f852 	bl	8006348 <HAL_Delay>

// vaccum pump off
	turn_off_air_pump();
 80012a4:	f000 f92c 	bl	8001500 <turn_off_air_pump>


	Arm_MoveServo(ARM_LINK1_SERVO,10);
 80012a8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff ffa7 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK2_SERVO,75);
 80012b2:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001360 <pickup_and_Store+0x138>
 80012b6:	2002      	movs	r0, #2
 80012b8:	f7ff ffa2 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK3_SERVO,100);
 80012bc:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001370 <pickup_and_Store+0x148>
 80012c0:	2003      	movs	r0, #3
 80012c2:	f7ff ff9d 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK2_SERVO,25);
 80012c6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff ff98 	bl	8001200 <Arm_MoveServo>

	if(Ball_color == WHITE){
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10a      	bne.n	80012ec <pickup_and_Store+0xc4>
		// bad potatoes - white
		Arm_MoveServo(ARM_BASE_SERVO,180);
 80012d6:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001374 <pickup_and_Store+0x14c>
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ff90 	bl	8001200 <Arm_MoveServo>
		Arm_MoveServo(ARM_LINK3_SERVO,120);
 80012e0:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001378 <pickup_and_Store+0x150>
 80012e4:	2003      	movs	r0, #3
 80012e6:	f7ff ff8b 	bl	8001200 <Arm_MoveServo>
 80012ea:	e009      	b.n	8001300 <pickup_and_Store+0xd8>
		//HAL_Delay(8000);
	}
	else{
		//good potatoes -yellow
		Arm_MoveServo(ARM_BASE_SERVO,160);
 80012ec:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800137c <pickup_and_Store+0x154>
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ff85 	bl	8001200 <Arm_MoveServo>
		Arm_MoveServo(ARM_LINK3_SERVO,110);
 80012f6:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001380 <pickup_and_Store+0x158>
 80012fa:	2003      	movs	r0, #3
 80012fc:	f7ff ff80 	bl	8001200 <Arm_MoveServo>
		//HAL_Delay(8000);
	}



	HAL_Delay(10000);
 8001300:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001304:	f005 f820 	bl	8006348 <HAL_Delay>
	// time to drop the ball



	Arm_MoveServo(ARM_LINK3_SERVO,100);
 8001308:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001370 <pickup_and_Store+0x148>
 800130c:	2003      	movs	r0, #3
 800130e:	f7ff ff77 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_BASE_SERVO,105);
 8001312:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001384 <pickup_and_Store+0x15c>
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ff72 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK3_SERVO,80);
 800131c:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001388 <pickup_and_Store+0x160>
 8001320:	2003      	movs	r0, #3
 8001322:	f7ff ff6d 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK2_SERVO,75);
 8001326:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001360 <pickup_and_Store+0x138>
 800132a:	2002      	movs	r0, #2
 800132c:	f7ff ff68 	bl	8001200 <Arm_MoveServo>

	Arm_MoveServo(ARM_LINK3_SERVO,80);
 8001330:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001388 <pickup_and_Store+0x160>
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff ff63 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK2_SERVO,75);
 800133a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001360 <pickup_and_Store+0x138>
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff ff5e 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_BASE_SERVO,105);
 8001344:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001384 <pickup_and_Store+0x15c>
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ff59 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK2_SERVO,95);
 800134e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800138c <pickup_and_Store+0x164>
 8001352:	2002      	movs	r0, #2
 8001354:	f7ff ff54 	bl	8001200 <Arm_MoveServo>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	42960000 	.word	0x42960000
 8001364:	42b40000 	.word	0x42b40000
 8001368:	428c0000 	.word	0x428c0000
 800136c:	42480000 	.word	0x42480000
 8001370:	42c80000 	.word	0x42c80000
 8001374:	43340000 	.word	0x43340000
 8001378:	42f00000 	.word	0x42f00000
 800137c:	43200000 	.word	0x43200000
 8001380:	42dc0000 	.word	0x42dc0000
 8001384:	42d20000 	.word	0x42d20000
 8001388:	42a00000 	.word	0x42a00000
 800138c:	42be0000 	.word	0x42be0000

08001390 <return_home>:
}




void return_home(void){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	Arm_MoveServo(ARM_LINK3_SERVO,80);
 8001394:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80013c0 <return_home+0x30>
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff ff31 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK1_SERVO,10);
 800139e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff ff2c 	bl	8001200 <Arm_MoveServo>
//	Arm_MoveServo(ARM_LINK2_SERVO, 95);//135
	Arm_MoveServo(ARM_BASE_SERVO, 105);
 80013a8:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80013c4 <return_home+0x34>
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ff27 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_LINK2_SERVO, 95);
 80013b2:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80013c8 <return_home+0x38>
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff ff22 	bl	8001200 <Arm_MoveServo>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	42a00000 	.word	0x42a00000
 80013c4:	42d20000 	.word	0x42d20000
 80013c8:	42be0000 	.word	0x42be0000

080013cc <Arm_color_calibration_position>:

void Arm_color_calibration_position(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	Arm_MoveServo(ARM_LINK2_SERVO, 85);
 80013d0:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80013e8 <Arm_color_calibration_position+0x1c>
 80013d4:	2002      	movs	r0, #2
 80013d6:	f7ff ff13 	bl	8001200 <Arm_MoveServo>
	Arm_MoveServo(ARM_BASE_SERVO, 10);
 80013da:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff ff0e 	bl	8001200 <Arm_MoveServo>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	42aa0000 	.word	0x42aa0000

080013ec <init_ball_storage>:
#include "ballstorage.h"

int good_potato_storage; // left
int bad_potato_storage; // right

void init_ball_storage(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	good_potato_storage = Servo_Register(4, "good_potato_storage", 0, 180, 90);
 80013f0:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8001444 <init_ball_storage+0x58>
 80013f4:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001448 <init_ball_storage+0x5c>
 80013f8:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800144c <init_ball_storage+0x60>
 80013fc:	4914      	ldr	r1, [pc, #80]	@ (8001450 <init_ball_storage+0x64>)
 80013fe:	2004      	movs	r0, #4
 8001400:	f002 ff20 	bl	8004244 <Servo_Register>
 8001404:	4603      	mov	r3, r0
 8001406:	4a13      	ldr	r2, [pc, #76]	@ (8001454 <init_ball_storage+0x68>)
 8001408:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(good_potato_storage, 90);
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <init_ball_storage+0x68>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001444 <init_ball_storage+0x58>
 8001412:	4618      	mov	r0, r3
 8001414:	f003 f802 	bl	800441c <Servo_SetAngle>

	bad_potato_storage = Servo_Register(5, "bad_potato_storage", 0, 180, 90);
 8001418:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8001444 <init_ball_storage+0x58>
 800141c:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001448 <init_ball_storage+0x5c>
 8001420:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800144c <init_ball_storage+0x60>
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <init_ball_storage+0x6c>)
 8001426:	2005      	movs	r0, #5
 8001428:	f002 ff0c 	bl	8004244 <Servo_Register>
 800142c:	4603      	mov	r3, r0
 800142e:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <init_ball_storage+0x70>)
 8001430:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(bad_potato_storage, 90);
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <init_ball_storage+0x70>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8001444 <init_ball_storage+0x58>
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ffee 	bl	800441c <Servo_SetAngle>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	42b40000 	.word	0x42b40000
 8001448:	43340000 	.word	0x43340000
 800144c:	00000000 	.word	0x00000000
 8001450:	0800fd30 	.word	0x0800fd30
 8001454:	200002a4 	.word	0x200002a4
 8001458:	0800fd44 	.word	0x0800fd44
 800145c:	200002a8 	.word	0x200002a8

08001460 <drop_good_potatos>:

void drop_good_potatos(){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	Servo_SetAngle(good_potato_storage, 37);
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <drop_good_potatos+0x2c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001490 <drop_good_potatos+0x30>
 800146c:	4618      	mov	r0, r3
 800146e:	f002 ffd5 	bl	800441c <Servo_SetAngle>
	HAL_Delay(4000);
 8001472:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001476:	f004 ff67 	bl	8006348 <HAL_Delay>
	Servo_SetAngle(good_potato_storage, 90);
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <drop_good_potatos+0x2c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001494 <drop_good_potatos+0x34>
 8001482:	4618      	mov	r0, r3
 8001484:	f002 ffca 	bl	800441c <Servo_SetAngle>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200002a4 	.word	0x200002a4
 8001490:	42140000 	.word	0x42140000
 8001494:	42b40000 	.word	0x42b40000

08001498 <drop_bad_potatos>:

void drop_bad_potatos(){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	Servo_SetAngle(bad_potato_storage, 155);
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <drop_bad_potatos+0x2c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80014c8 <drop_bad_potatos+0x30>
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 ffb9 	bl	800441c <Servo_SetAngle>
	HAL_Delay(4000);
 80014aa:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80014ae:	f004 ff4b 	bl	8006348 <HAL_Delay>
	Servo_SetAngle(bad_potato_storage, 90);
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <drop_bad_potatos+0x2c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80014cc <drop_bad_potatos+0x34>
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 ffae 	bl	800441c <Servo_SetAngle>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200002a8 	.word	0x200002a8
 80014c8:	431b0000 	.word	0x431b0000
 80014cc:	42b40000 	.word	0x42b40000

080014d0 <turn_on_water_pump>:
const int BOX_THRESHOLD = 50; // minimum value to register a box


//***** Pump Controlling functions ******************************************************//

void turn_on_water_pump(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2104      	movs	r1, #4
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <turn_on_water_pump+0x14>)
 80014da:	f006 f98b 	bl	80077f4 <HAL_GPIO_WritePin>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020800 	.word	0x40020800

080014e8 <turn_on_air_pump>:

void turn_off_water_pump(){
	HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, 1);
}

void turn_on_air_pump(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2102      	movs	r1, #2
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <turn_on_air_pump+0x14>)
 80014f2:	f006 f97f 	bl	80077f4 <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020800 	.word	0x40020800

08001500 <turn_off_air_pump>:

void turn_off_air_pump(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	2102      	movs	r1, #2
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <turn_off_air_pump+0x14>)
 800150a:	f006 f973 	bl	80077f4 <HAL_GPIO_WritePin>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40020800 	.word	0x40020800

08001518 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t prevokbtncount = 0;

volatile uint32_t nextbtncount = 1;
volatile uint32_t prevnextbtncount = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001522:	f004 ff05 	bl	8006330 <HAL_GetTick>
 8001526:	4603      	mov	r3, r0
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_GPIO_EXTI_Callback+0x70>)
 800152a:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 650))  // Replace BUTTON_PIN with actual GPIO pin
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001532:	d10e      	bne.n	8001552 <HAL_GPIO_EXTI_Callback+0x3a>
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <HAL_GPIO_EXTI_Callback+0x70>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_GPIO_EXTI_Callback+0x74>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f240 228a 	movw	r2, #650	@ 0x28a
 8001542:	4293      	cmp	r3, r2
 8001544:	d905      	bls.n	8001552 <HAL_GPIO_EXTI_Callback+0x3a>
	{
    	nextbtncount++; // Set flag when button is pressed
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_GPIO_EXTI_Callback+0x78>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a10      	ldr	r2, [pc, #64]	@ (8001590 <HAL_GPIO_EXTI_Callback+0x78>)
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e011      	b.n	8001576 <HAL_GPIO_EXTI_Callback+0x5e>
		//Buzzer_On();
	}
    else if (GPIO_Pin == GPIO_PIN_11 && (currentMillis - previousMillis > 650)){
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001558:	d10d      	bne.n	8001576 <HAL_GPIO_EXTI_Callback+0x5e>
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_GPIO_EXTI_Callback+0x70>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_GPIO_EXTI_Callback+0x74>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f240 228a 	movw	r2, #650	@ 0x28a
 8001568:	4293      	cmp	r3, r2
 800156a:	d904      	bls.n	8001576 <HAL_GPIO_EXTI_Callback+0x5e>
    	okbtncount++;
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x7c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001574:	6013      	str	r3, [r2, #0]
    }

    previousMillis = currentMillis;
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <HAL_GPIO_EXTI_Callback+0x70>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a04      	ldr	r2, [pc, #16]	@ (800158c <HAL_GPIO_EXTI_Callback+0x74>)
 800157c:	6013      	str	r3, [r2, #0]
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002b0 	.word	0x200002b0
 800158c:	200002ac 	.word	0x200002ac
 8001590:	20000010 	.word	0x20000010
 8001594:	200002b4 	.word	0x200002b4

08001598 <Reset_buttons>:

void Reset_buttons(){
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	okbtncount = 0;
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <Reset_buttons+0x28>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
	prevokbtncount = 0;
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <Reset_buttons+0x2c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

	nextbtncount = 0;
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <Reset_buttons+0x30>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
	prevnextbtncount = 0;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <Reset_buttons+0x34>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200002b4 	.word	0x200002b4
 80015c4:	200002b8 	.word	0x200002b8
 80015c8:	20000010 	.word	0x20000010
 80015cc:	200002bc 	.word	0x200002bc

080015d0 <binaryToDecimal4Bit>:



int binaryToDecimal4Bit(int binaryArray[]) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
    // For 4-bit number where index 0 is the least significant bit
    return binaryArray[0] * 1 +    // 2^0 = 1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
           binaryArray[1] * 2 +    // 2^1 = 2
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	005b      	lsls	r3, r3, #1
    return binaryArray[0] * 1 +    // 2^0 = 1
 80015e4:	441a      	add	r2, r3
           binaryArray[2] * 4 +    // 2^2 = 4
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3308      	adds	r3, #8
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	009b      	lsls	r3, r3, #2
           binaryArray[1] * 2 +    // 2^1 = 2
 80015ee:	441a      	add	r2, r3
           binaryArray[3] * 8;     // 2^3 = 8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	330c      	adds	r3, #12
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	00db      	lsls	r3, r3, #3
           binaryArray[2] * 4 +    // 2^2 = 4
 80015f8:	4413      	add	r3, r2
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <isEven>:

// Returns 0 if number is odd, 1 if even
int isEven(int number) {
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
    return !(number % 2);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf0c      	ite	eq
 8001618:	2301      	moveq	r3, #1
 800161a:	2300      	movne	r3, #0
 800161c:	b2db      	uxtb	r3, r3
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <Controller_EnableControllers>:

/**
 * Enable motor controllers.
 */
void Controller_EnableControllers(Controller *controller) {
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <Controller_DisableControllers>:

/**
 * Disable motor controllers.
 */
void Controller_DisableControllers(Controller *controller) {
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <Controller_ResetControllers>:

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <Controller_Stop>:

void Controller_Stop(){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8001700:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001714 <Controller_Stop+0x18>
 8001704:	f001 f9a0 	bl	8002a48 <setMotorLPWM>
	setMotorRPWM(0);
 8001708:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001714 <Controller_Stop+0x18>
 800170c:	f001 f9e2 	bl	8002ad4 <setMotorRPWM>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	00000000 	.word	0x00000000

08001718 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b090      	sub	sp, #64	@ 0x40
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	ed87 0a02 	vstr	s0, [r7, #8]
 8001724:	edc7 0a01 	vstr	s1, [r7, #4]
 8001728:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001738:	4b6c      	ldr	r3, [pc, #432]	@ (80018ec <UpdateControllers+0x1d4>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001746:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 800174a:	f000 fae9 	bl	8001d20 <robot_fwd_change>
 800174e:	eeb0 7a40 	vmov.f32	s14, s0
 8001752:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001756:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	edd3 7a02 	vldr	s15, [r3, #8]
 8001776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	4b58      	ldr	r3, [pc, #352]	@ (80018f0 <UpdateControllers+0x1d8>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001796:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <UpdateControllers+0x1dc>)
 8001798:	edd3 6a00 	vldr	s13, [r3]
 800179c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 80017ac:	4b4f      	ldr	r3, [pc, #316]	@ (80018ec <UpdateControllers+0x1d4>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80017be:	f000 fac1 	bl	8001d44 <robot_rot_change>
 80017c2:	eeb0 7a40 	vmov.f32	s14, s0
 80017c6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80017e4:	edd7 7a00 	vldr	s15, [r7]
 80017e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80017fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001802:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	ed93 7a01 	vldr	s14, [r3, #4]
 8001814:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <UpdateControllers+0x1e0>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181e:	4b37      	ldr	r3, [pc, #220]	@ (80018fc <UpdateControllers+0x1e4>)
 8001820:	edd3 6a00 	vldr	s13, [r3]
 8001824:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001834:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001838:	edd7 7a08 	vldr	s15, [r7, #32]
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001844:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001848:	edd7 7a08 	vldr	s15, [r7, #32]
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001854:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <UpdateControllers+0x1e8>)
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	edd7 7a01 	vldr	s15, [r7, #4]
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <UpdateControllers+0x1ec>)
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186c:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 8001870:	ed97 7a02 	vldr	s14, [r7, #8]
 8001874:	edd7 7a07 	vldr	s15, [r7, #28]
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 8001880:	ed97 7a02 	vldr	s14, [r7, #8]
 8001884:	edd7 7a07 	vldr	s15, [r7, #28]
 8001888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188c:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001896:	2b00      	cmp	r3, #0
 8001898:	d017      	beq.n	80018ca <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 800189a:	ed97 0a06 	vldr	s0, [r7, #24]
 800189e:	f000 f833 	bl	8001908 <leftFeedForward>
 80018a2:	eeb0 7a40 	vmov.f32	s14, s0
 80018a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80018aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ae:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 80018b2:	ed97 0a05 	vldr	s0, [r7, #20]
 80018b6:	f000 f88d 	bl	80019d4 <rightFeedForward>
 80018ba:	eeb0 7a40 	vmov.f32	s14, s0
 80018be:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80018d4:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80018d8:	f001 f8b6 	bl	8002a48 <setMotorLPWM>
        setMotorRPWM(right_output);
 80018dc:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80018e0:	f001 f8f8 	bl	8002ad4 <setMotorRPWM>
    }


}
 80018e4:	bf00      	nop
 80018e6:	3740      	adds	r7, #64	@ 0x40
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	08010098 	.word	0x08010098
 80018f0:	080100a8 	.word	0x080100a8
 80018f4:	080100ac 	.word	0x080100ac
 80018f8:	080100b0 	.word	0x080100b0
 80018fc:	080100b4 	.word	0x080100b4
 8001900:	08010088 	.word	0x08010088
 8001904:	08010090 	.word	0x08010090

08001908 <leftFeedForward>:


float leftFeedForward(float speed) {
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 8001912:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <leftFeedForward+0xb8>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ed97 7a01 	vldr	s14, [r7, #4]
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001920:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001924:	edd7 7a01 	vldr	s15, [r7, #4]
 8001928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd09      	ble.n	8001946 <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <leftFeedForward+0xbc>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ed97 7a05 	vldr	s14, [r7, #20]
 800193c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001940:	edc7 7a05 	vstr	s15, [r7, #20]
 8001944:	e00f      	b.n	8001966 <leftFeedForward+0x5e>
  } else if (speed < 0) {
 8001946:	edd7 7a01 	vldr	s15, [r7, #4]
 800194a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d508      	bpl.n	8001966 <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <leftFeedForward+0xbc>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ed97 7a05 	vldr	s14, [r7, #20]
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001966:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <leftFeedForward+0xc0>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001970:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <leftFeedForward+0xc4>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 8001982:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <leftFeedForward+0xc0>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <leftFeedForward+0xc8>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 800199a:	ed97 7a05 	vldr	s14, [r7, #20]
 800199e:	edd7 7a03 	vldr	s15, [r7, #12]
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	ee07 3a90 	vmov	s15, r3
}
 80019b0:	eeb0 0a67 	vmov.f32	s0, s15
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	0801009c 	.word	0x0801009c
 80019c4:	080100a4 	.word	0x080100a4
 80019c8:	200002c0 	.word	0x200002c0
 80019cc:	08010094 	.word	0x08010094
 80019d0:	080100a0 	.word	0x080100a0

080019d4 <rightFeedForward>:

float rightFeedForward(float speed) {
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 80019de:	4b2b      	ldr	r3, [pc, #172]	@ (8001a8c <rightFeedForward+0xb8>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ec:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 80019f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	dd09      	ble.n	8001a12 <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 80019fe:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <rightFeedForward+0xbc>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a10:	e00f      	b.n	8001a32 <rightFeedForward+0x5e>
  } else if (speed < 0) {
 8001a12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d508      	bpl.n	8001a32 <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <rightFeedForward+0xbc>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2e:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <rightFeedForward+0xc0>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <rightFeedForward+0xc4>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4a:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 8001a4e:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <rightFeedForward+0xc0>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <rightFeedForward+0xc8>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a62:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 8001a66:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a72:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	ee07 3a90 	vmov	s15, r3
}
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	0801009c 	.word	0x0801009c
 8001a90:	080100a4 	.word	0x080100a4
 8001a94:	200002c0 	.word	0x200002c0
 8001a98:	08010094 	.word	0x08010094
 8001a9c:	080100a0 	.word	0x080100a0

08001aa0 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <Delay_Init+0x38>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10e      	bne.n	8001ace <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <Delay_Init+0x38>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <Delay_Init+0x38>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aba:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <Delay_Init+0x3c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <Delay_Init+0x3c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <Delay_Init+0x3c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6013      	str	r3, [r2, #0]
    }
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000edf0 	.word	0xe000edf0
 8001adc:	e0001000 	.word	0xe0001000

08001ae0 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <delayMicroseconds+0x38>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	22b4      	movs	r2, #180	@ 0xb4
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001af8:	bf00      	nop
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <delayMicroseconds+0x38>)
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f8      	bhi.n	8001afa <delayMicroseconds+0x1a>
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e0001000 	.word	0xe0001000

08001b1c <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8001b20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	b21b      	sxth	r3, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <getLeftEncoderCounts+0x14>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	b21b      	sxth	r3, r3
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40010000 	.word	0x40010000

08001b4c <resetEncoders>:

void resetEncoders() {
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <resetEncoders+0x44>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001b56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	m_robot_distance = 0;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <resetEncoders+0x48>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <resetEncoders+0x4c>)
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
	left_delta = 0;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <resetEncoders+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	801a      	strh	r2, [r3, #0]
	right_delta = 0;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <resetEncoders+0x54>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	801a      	strh	r2, [r3, #0]
	previous_left_count = 0;
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <resetEncoders+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	801a      	strh	r2, [r3, #0]
	previous_right_count = 0;
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <resetEncoders+0x5c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	801a      	strh	r2, [r3, #0]

}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40010000 	.word	0x40010000
 8001b94:	200002c4 	.word	0x200002c4
 8001b98:	200002c8 	.word	0x200002c8
 8001b9c:	200002cc 	.word	0x200002cc
 8001ba0:	200002ce 	.word	0x200002ce
 8001ba4:	200002d0 	.word	0x200002d0
 8001ba8:	200002d2 	.word	0x200002d2

08001bac <resetEncodersinSystick>:

void resetEncodersinSystick() {
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <resetEncodersinSystick+0x1c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001bb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 8001bd6:	f7ff ffad 	bl	8001b34 <getLeftEncoderCounts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 8001bde:	f7ff ff9d 	bl	8001b1c <getRightEncoderCounts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 8001be6:	89fa      	ldrh	r2, [r7, #14]
 8001be8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <update_Encoder_Data+0x108>)
 8001bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <update_Encoder_Data+0x10c>)
 8001bf8:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 8001bfa:	4a37      	ldr	r2, [pc, #220]	@ (8001cd8 <update_Encoder_Data+0x108>)
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001c00:	89ba      	ldrh	r2, [r7, #12]
 8001c02:	4b37      	ldr	r3, [pc, #220]	@ (8001ce0 <update_Encoder_Data+0x110>)
 8001c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <update_Encoder_Data+0x114>)
 8001c12:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 8001c14:	4a32      	ldr	r2, [pc, #200]	@ (8001ce0 <update_Encoder_Data+0x110>)
 8001c16:	89bb      	ldrh	r3, [r7, #12]
 8001c18:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 8001c1a:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <update_Encoder_Data+0x10c>)
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc9f 	bl	8000564 <__aeabi_i2d>
 8001c26:	a32a      	add	r3, pc, #168	@ (adr r3, 8001cd0 <update_Encoder_Data+0x100>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fd04 	bl	8000638 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe fff6 	bl	8000c28 <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <update_Encoder_Data+0x114>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc8c 	bl	8000564 <__aeabi_i2d>
 8001c4c:	a320      	add	r3, pc, #128	@ (adr r3, 8001cd0 <update_Encoder_Data+0x100>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fcf1 	bl	8000638 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ffe3 	bl	8000c28 <__aeabi_d2f>
 8001c62:	4603      	mov	r3, r0
 8001c64:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 8001c66:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <update_Encoder_Data+0x118>)
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <update_Encoder_Data+0x11c>)
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <update_Encoder_Data+0x118>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <update_Encoder_Data+0x11c>)
 8001c92:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 8001c96:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ca2:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <update_Encoder_Data+0x120>)
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <update_Encoder_Data+0x124>)
 8001cae:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <update_Encoder_Data+0x128>)
 8001cb4:	ed93 7a00 	vldr	s14, [r3]
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <update_Encoder_Data+0x124>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <update_Encoder_Data+0x128>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]


}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	f76b218d 	.word	0xf76b218d
 8001cd4:	3faf8e12 	.word	0x3faf8e12
 8001cd8:	200002d0 	.word	0x200002d0
 8001cdc:	200002cc 	.word	0x200002cc
 8001ce0:	200002d2 	.word	0x200002d2
 8001ce4:	200002ce 	.word	0x200002ce
 8001ce8:	200002d4 	.word	0x200002d4
 8001cec:	200002c4 	.word	0x200002c4
 8001cf0:	0801008c 	.word	0x0801008c
 8001cf4:	200002d8 	.word	0x200002d8
 8001cf8:	200002c8 	.word	0x200002c8

08001cfc <robot_distance>:

float robot_distance() {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
    float distance;
    distance = m_robot_distance;
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <robot_distance+0x20>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	607b      	str	r3, [r7, #4]
    return distance;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	ee07 3a90 	vmov	s15, r3
}
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	200002c4 	.word	0x200002c4

08001d20 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <robot_fwd_change+0x20>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	607b      	str	r3, [r7, #4]
	return distance;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	ee07 3a90 	vmov	s15, r3
}
 8001d32:	eeb0 0a67 	vmov.f32	s0, s15
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	200002d4 	.word	0x200002d4

08001d44 <robot_rot_change>:

float robot_rot_change() {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <robot_rot_change+0x20>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	607b      	str	r3, [r7, #4]
	return distance;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	ee07 3a90 	vmov	s15, r3
}
 8001d56:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	200002d8 	.word	0x200002d8

08001d68 <analogReadIRs>:
	{93912.65, 13.94, -209.14},  //Right Back
	{78382.44, 9.55, -27.92},  //Right Front
};


void analogReadIRs(void){
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
	for (uint8_t i = 10; i < 15; i++)
 8001d6e:	230a      	movs	r3, #10
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	e00c      	b.n	8001d8e <analogReadIRs+0x26>
	    {
	        IRsensorValues[i] = AnalogMux_ReadChannel(i);
 8001d74:	79fc      	ldrb	r4, [r7, #7]
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fd51 	bl	8005820 <AnalogMux_ReadChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <analogReadIRs+0x38>)
 8001d84:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint8_t i = 10; i < 15; i++)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b0e      	cmp	r3, #14
 8001d92:	d9ef      	bls.n	8001d74 <analogReadIRs+0xc>
	    }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200002dc 	.word	0x200002dc

08001da4 <readRawIR>:


uint16_t readRawIR(IR ir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	switch(ir){
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d81c      	bhi.n	8001dee <readRawIR+0x4a>
 8001db4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <readRawIR+0x18>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	08001dd1 	.word	0x08001dd1
 8001dc0:	08001ddd 	.word	0x08001ddd
 8001dc4:	08001dd7 	.word	0x08001dd7
 8001dc8:	08001de3 	.word	0x08001de3
 8001dcc:	08001de9 	.word	0x08001de9
	case IR_FRONT:
		return IRsensorValues[10];
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <readRawIR+0x5c>)
 8001dd2:	8a9b      	ldrh	r3, [r3, #20]
 8001dd4:	e00d      	b.n	8001df2 <readRawIR+0x4e>
		break;
	case IR_LEFT_BACK:
		return IRsensorValues[11];
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <readRawIR+0x5c>)
 8001dd8:	8adb      	ldrh	r3, [r3, #22]
 8001dda:	e00a      	b.n	8001df2 <readRawIR+0x4e>
		break;
	case IR_LEFT_FORWARD:
		return IRsensorValues[12];
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <readRawIR+0x5c>)
 8001dde:	8b1b      	ldrh	r3, [r3, #24]
 8001de0:	e007      	b.n	8001df2 <readRawIR+0x4e>
		break;
	case IR_RIGHT_BACK:
		return IRsensorValues[13];
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <readRawIR+0x5c>)
 8001de4:	8b5b      	ldrh	r3, [r3, #26]
 8001de6:	e004      	b.n	8001df2 <readRawIR+0x4e>
		break;
	case IR_RIGHT_FORWARD:
		return IRsensorValues[14];
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <readRawIR+0x5c>)
 8001dea:	8b9b      	ldrh	r3, [r3, #28]
 8001dec:	e001      	b.n	8001df2 <readRawIR+0x4e>
		break;
	default:
		return -1;
 8001dee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		break;
	}
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200002dc 	.word	0x200002dc

08001e04 <getIRDistance>:

uint16_t getIRDistance(IR ir, uint16_t raw){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	80bb      	strh	r3, [r7, #4]
	IR_Calibration_t *cal = &IR_calibration[ir];
 8001e14:	79fa      	ldrb	r2, [r7, #7]
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4a16      	ldr	r2, [pc, #88]	@ (8001e78 <getIRDistance+0x74>)
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
	return (int)round(((cal->a)/(raw - cal->c)) - cal->b);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	edd3 6a00 	vldr	s13, [r3]
 8001e2a:	88bb      	ldrh	r3, [r7, #4]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	ee17 0a90 	vmov	r0, s15
 8001e50:	f7fe fb9a 	bl	8000588 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	ec43 2b10 	vmov	d0, r2, r3
 8001e5c:	f00d ff04 	bl	800fc68 <round>
 8001e60:	ec53 2b10 	vmov	r2, r3, d0
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fe96 	bl	8000b98 <__aeabi_d2iz>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	b29b      	uxth	r3, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000014 	.word	0x20000014

08001e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e80:	f004 f9f0 	bl	8006264 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e84:	f000 f87c 	bl	8001f80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e88:	f000 fb5e 	bl	8002548 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e8c:	f000 fb3c 	bl	8002508 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001e90:	f000 fabc 	bl	800240c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001e94:	f000 f994 	bl	80021c0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e98:	f000 f9ea 	bl	8002270 <MX_TIM2_Init>
	MX_I2C2_Init();
 8001e9c:	f000 f962 	bl	8002164 <MX_I2C2_Init>
	MX_USART3_UART_Init();
 8001ea0:	f000 fade 	bl	8002460 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001ea4:	f000 fb06 	bl	80024b4 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001ea8:	f000 f8dc 	bl	8002064 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001eac:	f000 f92c 	bl	8002108 <MX_I2C1_Init>
	MX_TIM3_Init();
 8001eb0:	f000 fa32 	bl	8002318 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001eb4:	213c      	movs	r1, #60	@ 0x3c
 8001eb6:	482a      	ldr	r0, [pc, #168]	@ (8001f60 <main+0xe4>)
 8001eb8:	f008 fa96 	bl	800a3e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001ebc:	213c      	movs	r1, #60	@ 0x3c
 8001ebe:	4829      	ldr	r0, [pc, #164]	@ (8001f64 <main+0xe8>)
 8001ec0:	f008 fa92 	bl	800a3e8 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4828      	ldr	r0, [pc, #160]	@ (8001f68 <main+0xec>)
 8001ec8:	f008 f920 	bl	800a10c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4826      	ldr	r0, [pc, #152]	@ (8001f68 <main+0xec>)
 8001ed0:	f008 f91c 	bl	800a10c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	4824      	ldr	r0, [pc, #144]	@ (8001f68 <main+0xec>)
 8001ed8:	f008 f918 	bl	800a10c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001edc:	210c      	movs	r1, #12
 8001ede:	4822      	ldr	r0, [pc, #136]	@ (8001f68 <main+0xec>)
 8001ee0:	f008 f914 	bl	800a10c <HAL_TIM_PWM_Start>

	turn_off_air_pump();
 8001ee4:	f7ff fb0c 	bl	8001500 <turn_off_air_pump>
	turn_on_water_pump();
 8001ee8:	f7ff faf2 	bl	80014d0 <turn_on_water_pump>


	/*--------------------- OLED Display --------------------------------*/
	Init_Display();
 8001eec:	f003 fdd6 	bl	8005a9c <Init_Display>


	/*---------------------Delay--------------------------------*/
	Delay_Init();
 8001ef0:	f7ff fdd6 	bl	8001aa0 <Delay_Init>
	/*-------------------------------------------------------------------*/

	/*---------------------Servos--------------------------------*/
	// Initialize servo system
	Servo_Init(50);  // 50Hz frequency for servos
 8001ef4:	2032      	movs	r0, #50	@ 0x32
 8001ef6:	f002 f981 	bl	80041fc <Servo_Init>
	// Initialize arm
	Arm_Init();
 8001efa:	f7ff f87b 	bl	8000ff4 <Arm_Init>

	// Init ball storage
	init_ball_storage();
 8001efe:	f7ff fa75 	bl	80013ec <init_ball_storage>


	/*-------------------------------------------------------------------*/

	Controller_Init(&controller);
 8001f02:	481a      	ldr	r0, [pc, #104]	@ (8001f6c <main+0xf0>)
 8001f04:	f7ff fb91 	bl	800162a <Controller_Init>
	Profile_Reset(&forward_profile);
 8001f08:	4819      	ldr	r0, [pc, #100]	@ (8001f70 <main+0xf4>)
 8001f0a:	f000 fe29 	bl	8002b60 <Profile_Reset>
	Profile_Reset(&rotation_profile);
 8001f0e:	4819      	ldr	r0, [pc, #100]	@ (8001f74 <main+0xf8>)
 8001f10:	f000 fe26 	bl	8002b60 <Profile_Reset>
	Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <main+0xf8>)
 8001f16:	4a16      	ldr	r2, [pc, #88]	@ (8001f70 <main+0xf4>)
 8001f18:	4914      	ldr	r1, [pc, #80]	@ (8001f6c <main+0xf0>)
 8001f1a:	4817      	ldr	r0, [pc, #92]	@ (8001f78 <main+0xfc>)
 8001f1c:	f000 fbe3 	bl	80026e6 <Motion_Init>
	Controller_ResetControllers(&controller);
 8001f20:	4812      	ldr	r0, [pc, #72]	@ (8001f6c <main+0xf0>)
 8001f22:	f7ff fbd0 	bl	80016c6 <Controller_ResetControllers>

	Buzzer_UniquePattern();
 8001f26:	f003 fb35 	bl	8005594 <Buzzer_UniquePattern>

	Buzzer_Toggle(200);
 8001f2a:	20c8      	movs	r0, #200	@ 0xc8
 8001f2c:	f003 fb20 	bl	8005570 <Buzzer_Toggle>
	HAL_Delay(2000);
 8001f30:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f34:	f004 fa08 	bl	8006348 <HAL_Delay>
	/*--------------- Raykha calibration ----------------------------------*/
	RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4810      	ldr	r0, [pc, #64]	@ (8001f7c <main+0x100>)
 8001f3c:	f001 f81c 	bl	8002f78 <RAYKHA_Calibrate>
	/*-------------------------------------------------------------------*/
	HAL_Delay(2000);
 8001f40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f44:	f004 fa00 	bl	8006348 <HAL_Delay>
	//Buzzer_Toggle(200);


	/*----------------- Begin color sensor init--------------------------------*/
	Buzzer_Toggle(100);
 8001f48:	2064      	movs	r0, #100	@ 0x64
 8001f4a:	f003 fb11 	bl	8005570 <Buzzer_Toggle>
	init_color_sensors();
 8001f4e:	f00a ff85 	bl	800ce5c <init_color_sensors>
	caliberate_color_sensors();
 8001f52:	f00a ff8e 	bl	800ce72 <caliberate_color_sensors>
	//set_steering_mode(STEERING_OFF);
	//Motion_SpinTurn(&motion, 90, 200.0, 20.0);

  //---------------- End of Motion controller tests---------------------------------------------
	//box_manupilation();
	selectTask();
 8001f56:	f003 f9a7 	bl	80052a8 <selectTask>



    /* USER CODE BEGIN 3 */

	  runCurrentTask();
 8001f5a:	f003 fa5d 	bl	8005418 <runCurrentTask>
 8001f5e:	e7fc      	b.n	8001f5a <main+0xde>
 8001f60:	200003ec 	.word	0x200003ec
 8001f64:	20000434 	.word	0x20000434
 8001f68:	2000047c 	.word	0x2000047c
 8001f6c:	200006e0 	.word	0x200006e0
 8001f70:	20000698 	.word	0x20000698
 8001f74:	200006bc 	.word	0x200006bc
 8001f78:	2000062c 	.word	0x2000062c
 8001f7c:	20000600 	.word	0x20000600

08001f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b094      	sub	sp, #80	@ 0x50
 8001f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	2234      	movs	r2, #52	@ 0x34
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00b fd33 	bl	800d9fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800205c <SystemClock_Config+0xdc>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	4a2b      	ldr	r2, [pc, #172]	@ (800205c <SystemClock_Config+0xdc>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb4:	4b29      	ldr	r3, [pc, #164]	@ (800205c <SystemClock_Config+0xdc>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <SystemClock_Config+0xe0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	@ (8002060 <SystemClock_Config+0xe0>)
 8001fca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <SystemClock_Config+0xe0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ff4:	23b4      	movs	r3, #180	@ 0xb4
 8001ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002000:	2302      	movs	r3, #2
 8002002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4618      	mov	r0, r3
 800200a:	f007 fd91 	bl	8009b30 <HAL_RCC_OscConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002014:	f000 fb60 	bl	80026d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002018:	f007 f9f0 	bl	80093fc <HAL_PWREx_EnableOverDrive>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002022:	f000 fb59 	bl	80026d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002026:	230f      	movs	r3, #15
 8002028:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202a:	2302      	movs	r3, #2
 800202c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002032:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800203c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	2105      	movs	r1, #5
 8002044:	4618      	mov	r0, r3
 8002046:	f007 fa29 	bl	800949c <HAL_RCC_ClockConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002050:	f000 fb42 	bl	80026d8 <Error_Handler>
  }
}
 8002054:	bf00      	nop
 8002056:	3750      	adds	r7, #80	@ 0x50
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000

08002064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800206a:	463b      	mov	r3, r7
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <MX_ADC1_Init+0x98>)
 8002078:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <MX_ADC1_Init+0x9c>)
 800207a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <MX_ADC1_Init+0x98>)
 800207e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002082:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <MX_ADC1_Init+0x98>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <MX_ADC1_Init+0x98>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <MX_ADC1_Init+0x98>)
 8002092:	2201      	movs	r2, #1
 8002094:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <MX_ADC1_Init+0x98>)
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020a6:	4a17      	ldr	r2, [pc, #92]	@ (8002104 <MX_ADC1_Init+0xa0>)
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020b6:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020be:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020c4:	480d      	ldr	r0, [pc, #52]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020c6:	f004 f963 	bl	8006390 <HAL_ADC_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020d0:	f000 fb02 	bl	80026d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020d4:	230a      	movs	r3, #10
 80020d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020d8:	2301      	movs	r3, #1
 80020da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e0:	463b      	mov	r3, r7
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_ADC1_Init+0x98>)
 80020e6:	f004 fb35 	bl	8006754 <HAL_ADC_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020f0:	f000 faf2 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200002fc 	.word	0x200002fc
 8002100:	40012000 	.word	0x40012000
 8002104:	0f000001 	.word	0x0f000001

08002108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <MX_I2C1_Init+0x50>)
 800210e:	4a13      	ldr	r2, [pc, #76]	@ (800215c <MX_I2C1_Init+0x54>)
 8002110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002112:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <MX_I2C1_Init+0x50>)
 8002114:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <MX_I2C1_Init+0x58>)
 8002116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002118:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <MX_I2C1_Init+0x50>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <MX_I2C1_Init+0x50>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <MX_I2C1_Init+0x50>)
 8002126:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800212a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <MX_I2C1_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <MX_I2C1_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002138:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <MX_I2C1_Init+0x50>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <MX_I2C1_Init+0x50>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002144:	4804      	ldr	r0, [pc, #16]	@ (8002158 <MX_I2C1_Init+0x50>)
 8002146:	f005 fb87 	bl	8007858 <HAL_I2C_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002150:	f000 fac2 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000344 	.word	0x20000344
 800215c:	40005400 	.word	0x40005400
 8002160:	00061a80 	.word	0x00061a80

08002164 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <MX_I2C2_Init+0x50>)
 800216a:	4a13      	ldr	r2, [pc, #76]	@ (80021b8 <MX_I2C2_Init+0x54>)
 800216c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <MX_I2C2_Init+0x50>)
 8002170:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <MX_I2C2_Init+0x58>)
 8002172:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <MX_I2C2_Init+0x50>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_I2C2_Init+0x50>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <MX_I2C2_Init+0x50>)
 8002182:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002186:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <MX_I2C2_Init+0x50>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <MX_I2C2_Init+0x50>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <MX_I2C2_Init+0x50>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <MX_I2C2_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <MX_I2C2_Init+0x50>)
 80021a2:	f005 fb59 	bl	8007858 <HAL_I2C_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021ac:	f000 fa94 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000398 	.word	0x20000398
 80021b8:	40005800 	.word	0x40005800
 80021bc:	000186a0 	.word	0x000186a0

080021c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	@ 0x30
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	2224      	movs	r2, #36	@ 0x24
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00b fc13 	bl	800d9fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021dc:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <MX_TIM1_Init+0xa8>)
 80021de:	4a23      	ldr	r2, [pc, #140]	@ (800226c <MX_TIM1_Init+0xac>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <MX_TIM1_Init+0xa8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <MX_TIM1_Init+0xa8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <MX_TIM1_Init+0xa8>)
 80021f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <MX_TIM1_Init+0xa8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <MX_TIM1_Init+0xa8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <MX_TIM1_Init+0xa8>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002208:	2303      	movs	r3, #3
 800220a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002210:	2301      	movs	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002220:	2301      	movs	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	480d      	ldr	r0, [pc, #52]	@ (8002268 <MX_TIM1_Init+0xa8>)
 8002234:	f008 f832 	bl	800a29c <HAL_TIM_Encoder_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800223e:	f000 fa4b 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	@ (8002268 <MX_TIM1_Init+0xa8>)
 8002250:	f008 fc9c 	bl	800ab8c <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800225a:	f000 fa3d 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	3730      	adds	r7, #48	@ 0x30
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200003ec 	.word	0x200003ec
 800226c:	40010000 	.word	0x40010000

08002270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	@ 0x30
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	2224      	movs	r2, #36	@ 0x24
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f00b fbbb 	bl	800d9fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <MX_TIM2_Init+0xa4>)
 800228e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002294:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <MX_TIM2_Init+0xa4>)
 8002296:	2200      	movs	r2, #0
 8002298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <MX_TIM2_Init+0xa4>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80022a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <MX_TIM2_Init+0xa4>)
 80022a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <MX_TIM2_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <MX_TIM2_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022b4:	2303      	movs	r3, #3
 80022b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022b8:	2300      	movs	r3, #0
 80022ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022bc:	2301      	movs	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022cc:	2301      	movs	r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	4619      	mov	r1, r3
 80022de:	480d      	ldr	r0, [pc, #52]	@ (8002314 <MX_TIM2_Init+0xa4>)
 80022e0:	f007 ffdc 	bl	800a29c <HAL_TIM_Encoder_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022ea:	f000 f9f5 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4806      	ldr	r0, [pc, #24]	@ (8002314 <MX_TIM2_Init+0xa4>)
 80022fc:	f008 fc46 	bl	800ab8c <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002306:	f000 f9e7 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	3730      	adds	r7, #48	@ 0x30
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000434 	.word	0x20000434

08002318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231e:	f107 0320 	add.w	r3, r7, #32
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	611a      	str	r2, [r3, #16]
 8002336:	615a      	str	r2, [r3, #20]
 8002338:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800233a:	4b32      	ldr	r3, [pc, #200]	@ (8002404 <MX_TIM3_Init+0xec>)
 800233c:	4a32      	ldr	r2, [pc, #200]	@ (8002408 <MX_TIM3_Init+0xf0>)
 800233e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002340:	4b30      	ldr	r3, [pc, #192]	@ (8002404 <MX_TIM3_Init+0xec>)
 8002342:	2200      	movs	r2, #0
 8002344:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <MX_TIM3_Init+0xec>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 800234c:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <MX_TIM3_Init+0xec>)
 800234e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002352:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002354:	4b2b      	ldr	r3, [pc, #172]	@ (8002404 <MX_TIM3_Init+0xec>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235a:	4b2a      	ldr	r3, [pc, #168]	@ (8002404 <MX_TIM3_Init+0xec>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002360:	4828      	ldr	r0, [pc, #160]	@ (8002404 <MX_TIM3_Init+0xec>)
 8002362:	f007 fe83 	bl	800a06c <HAL_TIM_PWM_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800236c:	f000 f9b4 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002378:	f107 0320 	add.w	r3, r7, #32
 800237c:	4619      	mov	r1, r3
 800237e:	4821      	ldr	r0, [pc, #132]	@ (8002404 <MX_TIM3_Init+0xec>)
 8002380:	f008 fc04 	bl	800ab8c <HAL_TIMEx_MasterConfigSynchronization>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800238a:	f000 f9a5 	bl	80026d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238e:	2360      	movs	r3, #96	@ 0x60
 8002390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2200      	movs	r2, #0
 80023a2:	4619      	mov	r1, r3
 80023a4:	4817      	ldr	r0, [pc, #92]	@ (8002404 <MX_TIM3_Init+0xec>)
 80023a6:	f008 f8ad 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023b0:	f000 f992 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	2204      	movs	r2, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4812      	ldr	r0, [pc, #72]	@ (8002404 <MX_TIM3_Init+0xec>)
 80023bc:	f008 f8a2 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80023c6:	f000 f987 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2208      	movs	r2, #8
 80023ce:	4619      	mov	r1, r3
 80023d0:	480c      	ldr	r0, [pc, #48]	@ (8002404 <MX_TIM3_Init+0xec>)
 80023d2:	f008 f897 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80023dc:	f000 f97c 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	220c      	movs	r2, #12
 80023e4:	4619      	mov	r1, r3
 80023e6:	4807      	ldr	r0, [pc, #28]	@ (8002404 <MX_TIM3_Init+0xec>)
 80023e8:	f008 f88c 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80023f2:	f000 f971 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023f6:	4803      	ldr	r0, [pc, #12]	@ (8002404 <MX_TIM3_Init+0xec>)
 80023f8:	f002 fa5c 	bl	80048b4 <HAL_TIM_MspPostInit>

}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	@ 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000047c 	.word	0x2000047c
 8002408:	40000400 	.word	0x40000400

0800240c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002410:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <MX_USART2_UART_Init+0x50>)
 8002414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 8002418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800241c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	@ (8002458 <MX_USART2_UART_Init+0x4c>)
 8002444:	f008 fc1e 	bl	800ac84 <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800244e:	f000 f943 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200004c4 	.word	0x200004c4
 800245c:	40004400 	.word	0x40004400

08002460 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <MX_USART3_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 800246c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002470:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	@ (80024ac <MX_USART3_UART_Init+0x4c>)
 8002498:	f008 fbf4 	bl	800ac84 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f000 f919 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000050c 	.word	0x2000050c
 80024b0:	40004800 	.word	0x40004800

080024b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <MX_USART6_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <MX_USART6_UART_Init+0x4c>)
 80024ec:	f008 fbca 	bl	800ac84 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024f6:	f000 f8ef 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000554 	.word	0x20000554
 8002504:	40011400 	.word	0x40011400

08002508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <MX_DMA_Init+0x3c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a0b      	ldr	r2, [pc, #44]	@ (8002544 <MX_DMA_Init+0x3c>)
 8002518:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <MX_DMA_Init+0x3c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	2039      	movs	r0, #57	@ 0x39
 8002530:	f004 fc19 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002534:	2039      	movs	r0, #57	@ 0x39
 8002536:	f004 fc32 	bl	8006d9e <HAL_NVIC_EnableIRQ>

}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800

08002548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	@ 0x28
 800254c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b59      	ldr	r3, [pc, #356]	@ (80026c8 <MX_GPIO_Init+0x180>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a58      	ldr	r2, [pc, #352]	@ (80026c8 <MX_GPIO_Init+0x180>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b56      	ldr	r3, [pc, #344]	@ (80026c8 <MX_GPIO_Init+0x180>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b52      	ldr	r3, [pc, #328]	@ (80026c8 <MX_GPIO_Init+0x180>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a51      	ldr	r2, [pc, #324]	@ (80026c8 <MX_GPIO_Init+0x180>)
 8002584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b4f      	ldr	r3, [pc, #316]	@ (80026c8 <MX_GPIO_Init+0x180>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <MX_GPIO_Init+0x180>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a4a      	ldr	r2, [pc, #296]	@ (80026c8 <MX_GPIO_Init+0x180>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b48      	ldr	r3, [pc, #288]	@ (80026c8 <MX_GPIO_Init+0x180>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	4b44      	ldr	r3, [pc, #272]	@ (80026c8 <MX_GPIO_Init+0x180>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a43      	ldr	r2, [pc, #268]	@ (80026c8 <MX_GPIO_Init+0x180>)
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b41      	ldr	r3, [pc, #260]	@ (80026c8 <MX_GPIO_Init+0x180>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2102      	movs	r1, #2
 80025d2:	483e      	ldr	r0, [pc, #248]	@ (80026cc <MX_GPIO_Init+0x184>)
 80025d4:	f005 f90e 	bl	80077f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	2104      	movs	r1, #4
 80025dc:	483b      	ldr	r0, [pc, #236]	@ (80026cc <MX_GPIO_Init+0x184>)
 80025de:	f005 f909 	bl	80077f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2120      	movs	r1, #32
 80025e6:	483a      	ldr	r0, [pc, #232]	@ (80026d0 <MX_GPIO_Init+0x188>)
 80025e8:	f005 f904 	bl	80077f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80025f2:	4838      	ldr	r0, [pc, #224]	@ (80026d4 <MX_GPIO_Init+0x18c>)
 80025f4:	f005 f8fe 	bl	80077f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC11 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_11;
 80025f8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80025fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	482f      	ldr	r0, [pc, #188]	@ (80026cc <MX_GPIO_Init+0x184>)
 8002610:	f004 ff5c 	bl	80074cc <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
 8002614:	2302      	movs	r3, #2
 8002616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002618:	2301      	movs	r3, #1
 800261a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002620:	2302      	movs	r3, #2
 8002622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	4828      	ldr	r0, [pc, #160]	@ (80026cc <MX_GPIO_Init+0x184>)
 800262c:	f004 ff4e 	bl	80074cc <HAL_GPIO_Init>

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
 8002630:	2304      	movs	r3, #4
 8002632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
 8002636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002638:	2301      	movs	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4619      	mov	r1, r3
 8002646:	4821      	ldr	r0, [pc, #132]	@ (80026cc <MX_GPIO_Init+0x184>)
 8002648:	f004 ff40 	bl	80074cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800264c:	2308      	movs	r3, #8
 800264e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002650:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	481a      	ldr	r0, [pc, #104]	@ (80026cc <MX_GPIO_Init+0x184>)
 8002662:	f004 ff33 	bl	80074cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002666:	2320      	movs	r3, #32
 8002668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266a:	2301      	movs	r3, #1
 800266c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	4814      	ldr	r0, [pc, #80]	@ (80026d0 <MX_GPIO_Init+0x188>)
 800267e:	f004 ff25 	bl	80074cc <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8002682:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	2301      	movs	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	480e      	ldr	r0, [pc, #56]	@ (80026d4 <MX_GPIO_Init+0x18c>)
 800269c:	f004 ff16 	bl	80074cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	2009      	movs	r0, #9
 80026a6:	f004 fb5e 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80026aa:	2009      	movs	r0, #9
 80026ac:	f004 fb77 	bl	8006d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	2028      	movs	r0, #40	@ 0x28
 80026b6:	f004 fb56 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026ba:	2028      	movs	r0, #40	@ 0x28
 80026bc:	f004 fb6f 	bl	8006d9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	@ 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400

080026d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026dc:	b672      	cpsid	i
}
 80026de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Buzzer_ErrorPattern();
 80026e0:	f002 ff8b 	bl	80055fa <Buzzer_ErrorPattern>
 80026e4:	e7fc      	b.n	80026e0 <Error_Handler+0x8>

080026e6 <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 80026e6:	b4b0      	push	{r4, r5, r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4614      	mov	r4, r2
 80026fa:	461d      	mov	r5, r3
 80026fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002710:	4615      	mov	r5, r2
 8002712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8002726:	4615      	mov	r5, r2
 8002728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800272c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002730:	682b      	ldr	r3, [r5, #0]
 8002732:	6023      	str	r3, [r4, #0]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bcb0      	pop	{r4, r5, r7}
 800273c:	4770      	bx	lr

0800273e <Motion_ResetDriveSystem>:

void Motion_ResetDriveSystem(Motion *motion) {
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	Motion_Stop(motion);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f81b 	bl	8002782 <Motion_Stop>
	Motion_DisableDrive(motion);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f822 	bl	8002796 <Motion_DisableDrive>
    resetEncoders();
 8002752:	f7ff f9fb 	bl	8001b4c <resetEncoders>
    Profile_Reset(&(motion->forward));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3324      	adds	r3, #36	@ 0x24
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fa00 	bl	8002b60 <Profile_Reset>
    Profile_Reset(&(motion->rotation));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3348      	adds	r3, #72	@ 0x48
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f9fb 	bl	8002b60 <Profile_Reset>
    Controller_ResetControllers(&(motion->controller));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe ffaa 	bl	80016c6 <Controller_ResetControllers>
    Controller_EnableControllers(&(motion->controller));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe ff8a 	bl	800168e <Controller_EnableControllers>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <Motion_Stop>:

void Motion_Stop(Motion *motion) {
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
	Controller_Stop();
 800278a:	f7fe ffb7 	bl	80016fc <Controller_Stop>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <Motion_DisableDrive>:

void Motion_DisableDrive(Motion *motion) {
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
	Controller_DisableControllers(&(motion->controller));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe ff82 	bl	80016aa <Controller_DisableControllers>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3324      	adds	r3, #36	@ 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 facc 	bl	8002d58 <Profile_GetSpeed>
 80027c0:	eef0 7a40 	vmov.f32	s15, s0
}
 80027c4:	eeb0 0a67 	vmov.f32	s0, s15
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3348      	adds	r3, #72	@ 0x48
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fabc 	bl	8002d58 <Profile_GetSpeed>
 80027e0:	eef0 7a40 	vmov.f32	s15, s0
}
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <Motion_StartMove>:
float Motion_Alpha(Motion *motion) {
    return Profile_GetAcceleration(&(motion->rotation));
}


void Motion_StartMove(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6178      	str	r0, [r7, #20]
 80027f6:	ed87 0a04 	vstr	s0, [r7, #16]
 80027fa:	edc7 0a03 	vstr	s1, [r7, #12]
 80027fe:	ed87 1a02 	vstr	s2, [r7, #8]
 8002802:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(&(motion->forward), distance, top_speed, final_speed, acceleration);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3324      	adds	r3, #36	@ 0x24
 800280a:	edd7 1a01 	vldr	s3, [r7, #4]
 800280e:	ed97 1a02 	vldr	s2, [r7, #8]
 8002812:	edd7 0a03 	vldr	s1, [r7, #12]
 8002816:	ed97 0a04 	vldr	s0, [r7, #16]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f9b9 	bl	8002b92 <Profile_Start>
}
 8002820:	bf00      	nop
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <Motion_Move>:
uint8_t Motion_MoveFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->forward));
}

// wait untill mition is completed
void Motion_Move(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6178      	str	r0, [r7, #20]
 8002830:	ed87 0a04 	vstr	s0, [r7, #16]
 8002834:	edc7 0a03 	vstr	s1, [r7, #12]
 8002838:	ed87 1a02 	vstr	s2, [r7, #8]
 800283c:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Move(&(motion->forward), distance, top_speed, final_speed, acceleration);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3324      	adds	r3, #36	@ 0x24
 8002844:	edd7 1a01 	vldr	s3, [r7, #4]
 8002848:	ed97 1a02 	vldr	s2, [r7, #8]
 800284c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002850:	ed97 0a04 	vldr	s0, [r7, #16]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fa27 	bl	8002ca8 <Profile_Move>
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <Motion_Turn>:
uint8_t Motion_TurnFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->rotation));
}

//wait untill motion is finished
void Motion_Turn(Motion *motion, float angle, float omega, float alpha) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002870:	edc7 0a01 	vstr	s1, [r7, #4]
 8002874:	ed87 1a00 	vstr	s2, [r7]
    Profile_Move(&(motion->rotation), angle, omega, 0, alpha);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3348      	adds	r3, #72	@ 0x48
 800287c:	edd7 1a00 	vldr	s3, [r7]
 8002880:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 800289c <Motion_Turn+0x38>
 8002884:	edd7 0a01 	vldr	s1, [r7, #4]
 8002888:	ed97 0a02 	vldr	s0, [r7, #8]
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fa0b 	bl	8002ca8 <Profile_Move>
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	00000000 	.word	0x00000000

080028a0 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3324      	adds	r3, #36	@ 0x24
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fa81 	bl	8002db4 <Profile_Update>
    Profile_Update(&(motion->rotation));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3348      	adds	r3, #72	@ 0x48
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fa7c 	bl	8002db4 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <Motion_SpinTurn>:

/**
  *
  * @brief turn in place. Force forward speed to zero
  */
void Motion_SpinTurn(Motion *motion, float angle, float omega, float alpha) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80028d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80028d4:	ed87 1a00 	vstr	s2, [r7]
    Profile_SetTargetSpeed(&(motion->forward), 0);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3324      	adds	r3, #36	@ 0x24
 80028dc:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8002920 <Motion_SpinTurn+0x5c>
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fa57 	bl	8002d94 <Profile_SetTargetSpeed>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80028e6:	e002      	b.n	80028ee <Motion_SpinTurn+0x2a>
        HAL_Delay(2);
 80028e8:	2002      	movs	r0, #2
 80028ea:	f003 fd2d 	bl	8006348 <HAL_Delay>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3324      	adds	r3, #36	@ 0x24
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fa30 	bl	8002d58 <Profile_GetSpeed>
 80028f8:	eef0 7a40 	vmov.f32	s15, s0
 80028fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d1f0      	bne.n	80028e8 <Motion_SpinTurn+0x24>
    }
    Motion_Turn(motion, angle, omega, alpha);
 8002906:	ed97 1a00 	vldr	s2, [r7]
 800290a:	edd7 0a01 	vldr	s1, [r7, #4]
 800290e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ffa6 	bl	8002864 <Motion_Turn>
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00000000 	.word	0x00000000

08002924 <Motion_StopAfter>:
   *
   * Calling this with the robot stationary is undefined. Don't do that.
   *
   * @brief bring the robot to a halt after a specific distance
   */
void Motion_StopAfter(Motion *motion, float distance) {
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	ed2d 8b02 	vpush	{d8}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	ed87 0a00 	vstr	s0, [r7]
    Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), 0, Profile_GetAcceleration(&(motion->forward)));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3324      	adds	r3, #36	@ 0x24
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fa0a 	bl	8002d58 <Profile_GetSpeed>
 8002944:	eeb0 8a40 	vmov.f32	s16, s0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3324      	adds	r3, #36	@ 0x24
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fa12 	bl	8002d76 <Profile_GetAcceleration>
 8002952:	eef0 7a40 	vmov.f32	s15, s0
 8002956:	eef0 1a67 	vmov.f32	s3, s15
 800295a:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8002978 <Motion_StopAfter+0x54>
 800295e:	eef0 0a48 	vmov.f32	s1, s16
 8002962:	ed97 0a00 	vldr	s0, [r7]
 8002966:	4620      	mov	r0, r4
 8002968:	f000 f99e 	bl	8002ca8 <Profile_Move>
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	ecbd 8b02 	vpop	{d8}
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	00000000 	.word	0x00000000

0800297c <Motion_SwitchToNextMotionAfter>:

// Test
void Motion_SwitchToNextMotionAfter(Motion *motion, float distance){
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	ed2d 8b02 	vpush	{d8}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	ed87 0a00 	vstr	s0, [r7]
	Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), Profile_GetSpeed(&(motion->forward)), Profile_GetAcceleration(&(motion->forward)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3324      	adds	r3, #36	@ 0x24
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f9de 	bl	8002d58 <Profile_GetSpeed>
 800299c:	eeb0 8a40 	vmov.f32	s16, s0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3324      	adds	r3, #36	@ 0x24
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 f9d7 	bl	8002d58 <Profile_GetSpeed>
 80029aa:	eef0 8a40 	vmov.f32	s17, s0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3324      	adds	r3, #36	@ 0x24
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f9df 	bl	8002d76 <Profile_GetAcceleration>
 80029b8:	eef0 7a40 	vmov.f32	s15, s0
 80029bc:	eef0 1a67 	vmov.f32	s3, s15
 80029c0:	eeb0 1a68 	vmov.f32	s2, s17
 80029c4:	eef0 0a48 	vmov.f32	s1, s16
 80029c8:	ed97 0a00 	vldr	s0, [r7]
 80029cc:	4620      	mov	r0, r4
 80029ce:	f000 f96b 	bl	8002ca8 <Profile_Move>
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	ecbd 8b02 	vpop	{d8}
 80029dc:	bd90      	pop	{r4, r7, pc}
	...

080029e0 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fd fdcc 	bl	8000588 <__aeabi_f2d>
 80029f0:	a313      	add	r3, pc, #76	@ (adr r3, 8002a40 <limitPWM+0x60>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fe f8af 	bl	8000b58 <__aeabi_dcmpgt>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <limitPWM+0x24>
		return PWM_MAX;
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <limitPWM+0x58>)
 8002a02:	e00d      	b.n	8002a20 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7fd fdbf 	bl	8000588 <__aeabi_f2d>
 8002a0a:	a309      	add	r3, pc, #36	@ (adr r3, 8002a30 <limitPWM+0x50>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f7fe f884 	bl	8000b1c <__aeabi_dcmplt>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <limitPWM+0x3e>
		return -PWM_MAX;
 8002a1a:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <limitPWM+0x5c>)
 8002a1c:	e000      	b.n	8002a20 <limitPWM+0x40>
	return pwm;
 8002a1e:	687b      	ldr	r3, [r7, #4]
}
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	70a3d70a 	.word	0x70a3d70a
 8002a34:	bfef0a3d 	.word	0xbfef0a3d
 8002a38:	3f7851ec 	.word	0x3f7851ec
 8002a3c:	bf7851ec 	.word	0xbf7851ec
 8002a40:	70a3d70a 	.word	0x70a3d70a
 8002a44:	3fef0a3d 	.word	0x3fef0a3d

08002a48 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	db13      	blt.n	8002a88 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <setMotorLPWM+0x84>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a6a:	f7ff ffb9 	bl	80029e0 <limitPWM>
 8002a6e:	eef0 7a40 	vmov.f32	s15, s0
 8002a72:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002ad0 <setMotorLPWM+0x88>
 8002a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7a:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <setMotorLPWM+0x84>)
 8002a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a80:	ee17 2a90 	vmov	r2, s15
 8002a84:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002a86:	e01c      	b.n	8002ac2 <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a94:	d400      	bmi.n	8002a98 <setMotorLPWM+0x50>
}
 8002a96:	e014      	b.n	8002ac2 <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <setMotorLPWM+0x84>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002a9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002aa2:	f7ff ff9d 	bl	80029e0 <limitPWM>
 8002aa6:	eef0 7a40 	vmov.f32	s15, s0
 8002aaa:	eef1 7a67 	vneg.f32	s15, s15
 8002aae:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ad0 <setMotorLPWM+0x88>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <setMotorLPWM+0x84>)
 8002ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abc:	ee17 2a90 	vmov	r2, s15
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	45e0f800 	.word	0x45e0f800

08002ad4 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	db13      	blt.n	8002b14 <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 8002aec:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <setMotorRPWM+0x84>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002af2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002af6:	f7ff ff73 	bl	80029e0 <limitPWM>
 8002afa:	eef0 7a40 	vmov.f32	s15, s0
 8002afe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002b5c <setMotorRPWM+0x88>
 8002b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <setMotorRPWM+0x84>)
 8002b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0c:	ee17 2a90 	vmov	r2, s15
 8002b10:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002b12:	e01c      	b.n	8002b4e <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 8002b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	d400      	bmi.n	8002b24 <setMotorRPWM+0x50>
}
 8002b22:	e014      	b.n	8002b4e <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <setMotorRPWM+0x84>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002b2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b2e:	f7ff ff57 	bl	80029e0 <limitPWM>
 8002b32:	eef0 7a40 	vmov.f32	s15, s0
 8002b36:	eef1 7a67 	vneg.f32	s15, s15
 8002b3a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b5c <setMotorRPWM+0x88>
 8002b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <setMotorRPWM+0x84>)
 8002b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b48:	ee17 2a90 	vmov	r2, s15
 8002b4c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	45e0f800 	.word	0x45e0f800

08002b60 <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6178      	str	r0, [r7, #20]
 8002b9a:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b9e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002ba2:	ed87 1a02 	vstr	s2, [r7, #8]
 8002ba6:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 8002baa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d502      	bpl.n	8002bbe <Profile_Start+0x2c>
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	e000      	b.n	8002bc0 <Profile_Start+0x2e>
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 8002bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d505      	bpl.n	8002bde <Profile_Start+0x4c>
 8002bd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bd6:	eef1 7a67 	vneg.f32	s15, s15
 8002bda:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 8002bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	d503      	bpl.n	8002bf8 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	701a      	strb	r2, [r3, #0]
        return;
 8002bf6:	e052      	b.n	8002c9e <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 8002bf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c08:	dd01      	ble.n	8002c0e <Profile_Start+0x7c>
        final_speed = top_speed;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c2e:	eef0 7ae7 	vabs.f32	s15, s15
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c4e:	eef0 7ae7 	vabs.f32	s15, s15
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8002c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c60:	eef0 7ae7 	vabs.f32	s15, s15
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	db07      	blt.n	8002c8e <Profile_Start+0xfc>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8c:	e001      	b.n	8002c92 <Profile_Start+0x100>
 8002c8e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
}
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6178      	str	r0, [r7, #20]
 8002cb0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002cb4:	edc7 0a03 	vstr	s1, [r7, #12]
 8002cb8:	ed87 1a02 	vstr	s2, [r7, #8]
 8002cbc:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 8002cc0:	edd7 1a01 	vldr	s3, [r7, #4]
 8002cc4:	ed97 1a02 	vldr	s2, [r7, #8]
 8002cc8:	edd7 0a03 	vldr	s1, [r7, #12]
 8002ccc:	ed97 0a04 	vldr	s0, [r7, #16]
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f7ff ff5e 	bl	8002b92 <Profile_Start>
    Profile_WaitUntilFinished(profile);
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f000 f804 	bl	8002ce4 <Profile_WaitUntilFinished>
}
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <Profile_WaitUntilFinished>:
    profile->speed = profile->target_speed;
    profile->state = PS_FINISHED;
}

// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 8002cec:	e002      	b.n	8002cf4 <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 8002cee:	2002      	movs	r0, #2
 8002cf0:	f003 fb2a 	bl	8006348 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d1f7      	bne.n	8002cee <Profile_WaitUntilFinished+0xa>
    }
}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	edd3 6a07 	vldr	s13, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d34:	eef0 7ae7 	vabs.f32	s15, s15
 8002d38:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d46:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	ee07 3a90 	vmov	s15, r3
}
 8002d68:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <Profile_GetAcceleration>:

// Get the current acceleration
float Profile_GetAcceleration(const Profile *profile) {
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
    return profile->acceleration;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	ee07 3a90 	vmov	s15, r3
}
 8002d86:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <Profile_SetTargetSpeed>:
void Profile_SetSpeed(Profile *profile, float speed) {
    profile->speed = speed;
}

// Set the target speed
void Profile_SetTargetSpeed(Profile *profile, float speed) {
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	ed87 0a00 	vstr	s0, [r7]
    profile->target_speed = speed;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	619a      	str	r2, [r3, #24]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b5 	beq.w	8002f32 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	ed93 7a04 	vldr	s14, [r3, #16]
 8002dce:	4b5b      	ldr	r3, [pc, #364]	@ (8002f3c <Profile_Update+0x188>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd8:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edd3 7a08 	vldr	s15, [r3, #32]
 8002de2:	eeb0 7ae7 	vabs.f32	s14, s15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dec:	eef0 7ae7 	vabs.f32	s15, s15
 8002df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d128      	bne.n	8002e54 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff80 	bl	8002d08 <Profile_GetBrakingDistance>
 8002e08:	eeb0 7a40 	vmov.f32	s14, s0
 8002e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	d51c      	bpl.n	8002e54 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d10b      	bne.n	8002e48 <Profile_Update+0x94>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e46:	e002      	b.n	8002e4e <Profile_Update+0x9a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	d519      	bpl.n	8002e9e <Profile_Update+0xea>
        profile->speed += delta_v;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e92:	dd28      	ble.n	8002ee6 <Profile_Update+0x132>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	e023      	b.n	8002ee6 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	dd18      	ble.n	8002ee6 <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002edc:	d503      	bpl.n	8002ee6 <Profile_Update+0x132>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <Profile_Update+0x188>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d011      	beq.n	8002f34 <Profile_Update+0x180>
 8002f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f14:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	d508      	bpl.n	8002f34 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2203      	movs	r2, #3
 8002f26:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
 8002f30:	e000      	b.n	8002f34 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002f32:	bf00      	nop
    }

}
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08010098 	.word	0x08010098

08002f40 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	e00c      	b.n	8002f68 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	18d4      	adds	r4, r2, r3
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 fc61 	bl	8005820 <AnalogMux_ReadChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	3301      	adds	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b09      	cmp	r3, #9
 8002f6c:	d9ef      	bls.n	8002f4e <RAYKHA_ReadRaw+0xe>
    }
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	@ 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
	display_clear();
 8002f84:	f002 fdea 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 8002f88:	4891      	ldr	r0, [pc, #580]	@ (80031d0 <RAYKHA_Calibrate+0x258>)
 8002f8a:	f002 fe19 	bl	8005bc0 <display_headding>

	display_message("RAYKHA Calibration", 2, 25);
 8002f8e:	2219      	movs	r2, #25
 8002f90:	2102      	movs	r1, #2
 8002f92:	4890      	ldr	r0, [pc, #576]	@ (80031d4 <RAYKHA_Calibrate+0x25c>)
 8002f94:	f002 fdea 	bl	8005b6c <display_message>
	display_message("Press OK to Start...", 2, 40);
 8002f98:	2228      	movs	r2, #40	@ 0x28
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	488e      	ldr	r0, [pc, #568]	@ (80031d8 <RAYKHA_Calibrate+0x260>)
 8002f9e:	f002 fde5 	bl	8005b6c <display_message>

	while(okbtncount == prevokbtncount);
 8002fa2:	bf00      	nop
 8002fa4:	4b8d      	ldr	r3, [pc, #564]	@ (80031dc <RAYKHA_Calibrate+0x264>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80031e0 <RAYKHA_Calibrate+0x268>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d0f9      	beq.n	8002fa4 <RAYKHA_Calibrate+0x2c>
	Reset_buttons();
 8002fb0:	f7fe faf2 	bl	8001598 <Reset_buttons>

	display_clear();
 8002fb4:	f002 fdd2 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 8002fb8:	4885      	ldr	r0, [pc, #532]	@ (80031d0 <RAYKHA_Calibrate+0x258>)
 8002fba:	f002 fe01 	bl	8005bc0 <display_headding>
	display_message("RAYKHA", 2, 25);
 8002fbe:	2219      	movs	r2, #25
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4888      	ldr	r0, [pc, #544]	@ (80031e4 <RAYKHA_Calibrate+0x26c>)
 8002fc4:	f002 fdd2 	bl	8005b6c <display_message>
	display_message("Calibrating....", 2, 40);
 8002fc8:	2228      	movs	r2, #40	@ 0x28
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4886      	ldr	r0, [pc, #536]	@ (80031e8 <RAYKHA_Calibrate+0x270>)
 8002fce:	f002 fdcd 	bl	8005b6c <display_message>

	HAL_Delay(1000);
 8002fd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fd6:	f003 f9b7 	bl	8006348 <HAL_Delay>
	Buzzer_Toggle(100);
 8002fda:	2064      	movs	r0, #100	@ 0x64
 8002fdc:	f002 fac8 	bl	8005570 <Buzzer_Toggle>
	HAL_Delay(1000);
 8002fe0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fe4:	f003 f9b0 	bl	8006348 <HAL_Delay>


	uint16_t sensor_values[RAYKHA_NUM_SENSORS];

	// Initialize calibration data
	for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fee:	e013      	b.n	8003018 <RAYKHA_Calibrate+0xa0>
	{
		calibration->min_values[i] = 0xFFFF;  // Max possible value
 8002ff0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002ffa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		calibration->max_values[i] = 0;       // Min possible value
 8002ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	3308      	adds	r3, #8
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	2200      	movs	r2, #0
 800300c:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800300e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003012:	3301      	adds	r3, #1
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800301c:	2b09      	cmp	r3, #9
 800301e:	d9e7      	bls.n	8002ff0 <RAYKHA_Calibrate+0x78>
	}

	calibration->line_type = line_type;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	for(uint8_t i = 0; i < 100; i++){
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800302e:	e0ad      	b.n	800318c <RAYKHA_Calibrate+0x214>
		// Take multiple samples for more accurate calibration
		for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8003030:	2300      	movs	r3, #0
 8003032:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003036:	e053      	b.n	80030e0 <RAYKHA_Calibrate+0x168>
		{
			// Read raw sensor values
			RAYKHA_ReadRaw(sensor_values);
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff7f 	bl	8002f40 <RAYKHA_ReadRaw>

			// Update min and max values
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003042:	2300      	movs	r3, #0
 8003044:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8003048:	e03e      	b.n	80030c8 <RAYKHA_Calibrate+0x150>
			{
				if (sensor_values[i] < calibration->min_values[i])
 800304a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	3328      	adds	r3, #40	@ 0x28
 8003052:	443b      	add	r3, r7
 8003054:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8003058:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003062:	429a      	cmp	r2, r3
 8003064:	d20b      	bcs.n	800307e <RAYKHA_Calibrate+0x106>
				{
					calibration->min_values[i] = sensor_values[i];
 8003066:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800306a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	3328      	adds	r3, #40	@ 0x28
 8003072:	443b      	add	r3, r7
 8003074:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
				if (sensor_values[i] > calibration->max_values[i])
 800307e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	3328      	adds	r3, #40	@ 0x28
 8003086:	443b      	add	r3, r7
 8003088:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 800308c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	3308      	adds	r3, #8
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d90f      	bls.n	80030be <RAYKHA_Calibrate+0x146>
				{
					calibration->max_values[i] = sensor_values[i];
 800309e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030a2:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	3328      	adds	r3, #40	@ 0x28
 80030aa:	443b      	add	r3, r7
 80030ac:	f833 0c1c 	ldrh.w	r0, [r3, #-28]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	f101 0308 	add.w	r3, r1, #8
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	4602      	mov	r2, r0
 80030bc:	809a      	strh	r2, [r3, #4]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80030be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030c2:	3301      	adds	r3, #1
 80030c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80030c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d9bc      	bls.n	800304a <RAYKHA_Calibrate+0xd2>
				}
			}

			// Short delay between samples
			HAL_Delay(10);
 80030d0:	200a      	movs	r0, #10
 80030d2:	f003 f939 	bl	8006348 <HAL_Delay>
		for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 80030d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030da:	3301      	adds	r3, #1
 80030dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80030e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d9a7      	bls.n	8003038 <RAYKHA_Calibrate+0xc0>
		}

		// Add small margins to avoid edge cases
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ee:	e044      	b.n	800317a <RAYKHA_Calibrate+0x202>
		{
			if (calibration->min_values[i] > 20)
 80030f0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030fa:	2b14      	cmp	r3, #20
 80030fc:	d90c      	bls.n	8003118 <RAYKHA_Calibrate+0x1a0>
				calibration->min_values[i] -= 20;
 80030fe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003108:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800310c:	3b14      	subs	r3, #20
 800310e:	b299      	uxth	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003116:	e005      	b.n	8003124 <RAYKHA_Calibrate+0x1ac>
			else
				calibration->min_values[i] = 0;
 8003118:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2100      	movs	r1, #0
 8003120:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if (calibration->max_values[i] < 4075)
 8003124:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	3308      	adds	r3, #8
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	889b      	ldrh	r3, [r3, #4]
 8003132:	f640 72ea 	movw	r2, #4074	@ 0xfea
 8003136:	4293      	cmp	r3, r2
 8003138:	d811      	bhi.n	800315e <RAYKHA_Calibrate+0x1e6>
				calibration->max_values[i] += 20;
 800313a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	3308      	adds	r3, #8
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	889a      	ldrh	r2, [r3, #4]
 8003148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800314c:	3214      	adds	r2, #20
 800314e:	b291      	uxth	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	3308      	adds	r3, #8
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	460a      	mov	r2, r1
 800315a:	809a      	strh	r2, [r3, #4]
 800315c:	e008      	b.n	8003170 <RAYKHA_Calibrate+0x1f8>
			else
				calibration->max_values[i] = 4095;
 800315e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	3308      	adds	r3, #8
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800316e:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003174:	3301      	adds	r3, #1
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800317e:	2b09      	cmp	r3, #9
 8003180:	d9b6      	bls.n	80030f0 <RAYKHA_Calibrate+0x178>
	for(uint8_t i = 0; i < 100; i++){
 8003182:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003186:	3301      	adds	r3, #1
 8003188:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800318c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003190:	2b63      	cmp	r3, #99	@ 0x63
 8003192:	f67f af4d 	bls.w	8003030 <RAYKHA_Calibrate+0xb8>
		}
	}

	display_clear();
 8003196:	f002 fce1 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800319a:	480d      	ldr	r0, [pc, #52]	@ (80031d0 <RAYKHA_Calibrate+0x258>)
 800319c:	f002 fd10 	bl	8005bc0 <display_headding>
	display_message("RAYKHA", 2, 25);
 80031a0:	2219      	movs	r2, #25
 80031a2:	2102      	movs	r1, #2
 80031a4:	480f      	ldr	r0, [pc, #60]	@ (80031e4 <RAYKHA_Calibrate+0x26c>)
 80031a6:	f002 fce1 	bl	8005b6c <display_message>
	display_message("Calibrated.", 2, 40);
 80031aa:	2228      	movs	r2, #40	@ 0x28
 80031ac:	2102      	movs	r1, #2
 80031ae:	480f      	ldr	r0, [pc, #60]	@ (80031ec <RAYKHA_Calibrate+0x274>)
 80031b0:	f002 fcdc 	bl	8005b6c <display_message>

	Buzzer_Toggle(100);
 80031b4:	2064      	movs	r0, #100	@ 0x64
 80031b6:	f002 f9db 	bl	8005570 <Buzzer_Toggle>
	HAL_Delay(300);
 80031ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80031be:	f003 f8c3 	bl	8006348 <HAL_Delay>
	Buzzer_Toggle(200);
 80031c2:	20c8      	movs	r0, #200	@ 0xc8
 80031c4:	f002 f9d4 	bl	8005570 <Buzzer_Toggle>

}
 80031c8:	bf00      	nop
 80031ca:	3728      	adds	r7, #40	@ 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	0800fd58 	.word	0x0800fd58
 80031d4:	0800fd64 	.word	0x0800fd64
 80031d8:	0800fd78 	.word	0x0800fd78
 80031dc:	200002b4 	.word	0x200002b4
 80031e0:	200002b8 	.word	0x200002b8
 80031e4:	0800fd90 	.word	0x0800fd90
 80031e8:	0800fd98 	.word	0x0800fd98
 80031ec:	0800fda8 	.word	0x0800fda8

080031f0 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 80031f0:	b5b0      	push	{r4, r5, r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 80031fa:	f107 0308 	add.w	r3, r7, #8
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fe9e 	bl	8002f40 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e05a      	b.n	80032c0 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	3320      	adds	r3, #32
 8003210:	443b      	add	r3, r7
 8003212:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003216:	7ff9      	ldrb	r1, [r7, #31]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800321e:	429a      	cmp	r2, r3
 8003220:	d206      	bcs.n	8003230 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8003222:	7ffb      	ldrb	r3, [r7, #31]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	2200      	movs	r2, #0
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e044      	b.n	80032ba <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8003230:	7ffb      	ldrb	r3, [r7, #31]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	3320      	adds	r3, #32
 8003236:	443b      	add	r3, r7
 8003238:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800323c:	7ffb      	ldrb	r3, [r7, #31]
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	889b      	ldrh	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d907      	bls.n	800325c <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 800324c:	7ffb      	ldrb	r3, [r7, #31]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	e02e      	b.n	80032ba <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 800325c:	7ffb      	ldrb	r3, [r7, #31]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	3320      	adds	r3, #32
 8003262:	443b      	add	r3, r7
 8003264:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8003268:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8003270:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	3308      	adds	r3, #8
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	18d4      	adds	r4, r2, r3
 8003284:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	462a      	mov	r2, r5
 800328e:	f000 f879 	bl	8003384 <map_range>
 8003292:	4603      	mov	r3, r0
 8003294:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800329c:	2b01      	cmp	r3, #1
 800329e:	d10c      	bne.n	80032ba <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 80032a0:	7ffb      	ldrb	r3, [r7, #31]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	881a      	ldrh	r2, [r3, #0]
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	440b      	add	r3, r1
 80032b2:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 80032b6:	b292      	uxth	r2, r2
 80032b8:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	3301      	adds	r3, #1
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	d9a1      	bls.n	800320a <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bdb0      	pop	{r4, r5, r7, pc}

080032d0 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	73bb      	strb	r3, [r7, #14]
 80032ea:	e01c      	b.n	8003326 <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 80032ec:	7bbb      	ldrb	r3, [r7, #14]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 80032f8:	89bb      	ldrh	r3, [r7, #12]
 80032fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80032fc:	d901      	bls.n	8003302 <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8003302:	89bb      	ldrh	r3, [r7, #12]
 8003304:	7bba      	ldrb	r2, [r7, #14]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4413      	add	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
        sum += value;
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	3301      	adds	r3, #1
 8003324:	73bb      	strb	r3, [r7, #14]
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	2b09      	cmp	r3, #9
 800332a:	d9df      	bls.n	80032ec <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <RAYKHA_GetLinePosition+0x68>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b63      	cmp	r3, #99	@ 0x63
 8003336:	d802      	bhi.n	800333e <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	e003      	b.n	8003346 <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 800335c:	6839      	ldr	r1, [r7, #0]
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb6 	bl	80032d0 <RAYKHA_GetLinePosition>
 8003364:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d102      	bne.n	8003374 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 800336e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003372:	e003      	b.n	800337c <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 800337a:	3b14      	subs	r3, #20
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8003384:	b490      	push	{r4, r7}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	4604      	mov	r4, r0
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	461a      	mov	r2, r3
 8003392:	4623      	mov	r3, r4
 8003394:	80fb      	strh	r3, [r7, #6]
 8003396:	4603      	mov	r3, r0
 8003398:	80bb      	strh	r3, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	807b      	strh	r3, [r7, #2]
 800339e:	4613      	mov	r3, r2
 80033a0:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	88bb      	ldrh	r3, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d801      	bhi.n	80033ae <map_range+0x2a>
 80033aa:	883b      	ldrh	r3, [r7, #0]
 80033ac:	e01d      	b.n	80033ea <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	88bb      	ldrh	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	8b39      	ldrh	r1, [r7, #24]
 80033b6:	883a      	ldrh	r2, [r7, #0]
 80033b8:	1a8a      	subs	r2, r1, r2
 80033ba:	fb03 f202 	mul.w	r2, r3, r2
 80033be:	8879      	ldrh	r1, [r7, #2]
 80033c0:	88bb      	ldrh	r3, [r7, #4]
 80033c2:	1acb      	subs	r3, r1, r3
 80033c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80033c8:	883b      	ldrh	r3, [r7, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 80033ce:	883b      	ldrh	r3, [r7, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	da01      	bge.n	80033da <map_range+0x56>
 80033d6:	883b      	ldrh	r3, [r7, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 80033da:	8b3b      	ldrh	r3, [r7, #24]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	429a      	cmp	r2, r3
 80033e0:	dd01      	ble.n	80033e6 <map_range+0x62>
 80033e2:	8b3b      	ldrh	r3, [r7, #24]
 80033e4:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	b29b      	uxth	r3, r3
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc90      	pop	{r4, r7}
 80033f2:	4770      	bx	lr

080033f4 <GetLineColor>:
//	}
//	return WHITE;
//}


Color GetLineColor(uint8_t column, uint8_t row){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	460a      	mov	r2, r1
 80033fe:	71fb      	strb	r3, [r7, #7]
 8003400:	4613      	mov	r3, r2
 8003402:	71bb      	strb	r3, [r7, #6]
	TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 8003404:	2001      	movs	r0, #1
 8003406:	f008 fc3f 	bl	800bc88 <TCS3472_SelectSensor>
	TCS3472_GetRGBC(&r_line, &g_line, &b_line, &c_line);
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <GetLineColor+0x4c>)
 800340c:	4a0d      	ldr	r2, [pc, #52]	@ (8003444 <GetLineColor+0x50>)
 800340e:	490e      	ldr	r1, [pc, #56]	@ (8003448 <GetLineColor+0x54>)
 8003410:	480e      	ldr	r0, [pc, #56]	@ (800344c <GetLineColor+0x58>)
 8003412:	f008 fca4 	bl	800bd5e <TCS3472_GetRGBC>
	line_color = TCS3472_DetectLineColor(r_line, g_line, b_line, c_line);
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <GetLineColor+0x58>)
 8003418:	8818      	ldrh	r0, [r3, #0]
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <GetLineColor+0x54>)
 800341c:	8819      	ldrh	r1, [r3, #0]
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <GetLineColor+0x50>)
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <GetLineColor+0x4c>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	f008 fccb 	bl	800bdc0 <TCS3472_DetectLineColor>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <GetLineColor+0x5c>)
 8003430:	701a      	strb	r2, [r3, #0]
	return line_color;
 8003432:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <GetLineColor+0x5c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000df2 	.word	0x20000df2
 8003444:	20000df0 	.word	0x20000df0
 8003448:	20000dee 	.word	0x20000dee
 800344c:	20000dec 	.word	0x20000dec
 8003450:	20000dfc 	.word	0x20000dfc

08003454 <GetBallColor>:
//	}
//	return WHITE;
//}


Color GetBallColor(){
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	/* Get RGB and Clear values from object sensor */
	TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 8003458:	2002      	movs	r0, #2
 800345a:	f008 fc15 	bl	800bc88 <TCS3472_SelectSensor>
	TCS3472_GetRGBC(&r_obj, &g_obj, &b_obj, &c_obj);
 800345e:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <GetBallColor+0x50>)
 8003460:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <GetBallColor+0x54>)
 8003462:	4912      	ldr	r1, [pc, #72]	@ (80034ac <GetBallColor+0x58>)
 8003464:	4812      	ldr	r0, [pc, #72]	@ (80034b0 <GetBallColor+0x5c>)
 8003466:	f008 fc7a 	bl	800bd5e <TCS3472_GetRGBC>
	object_color = TCS3472_DetectWhiteVsYellow(r_obj, g_obj, b_obj, c_obj);
 800346a:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <GetBallColor+0x5c>)
 800346c:	8818      	ldrh	r0, [r3, #0]
 800346e:	4b0f      	ldr	r3, [pc, #60]	@ (80034ac <GetBallColor+0x58>)
 8003470:	8819      	ldrh	r1, [r3, #0]
 8003472:	4b0d      	ldr	r3, [pc, #52]	@ (80034a8 <GetBallColor+0x54>)
 8003474:	881a      	ldrh	r2, [r3, #0]
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <GetBallColor+0x50>)
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	f009 fb81 	bl	800cb80 <TCS3472_DetectWhiteVsYellow>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <GetBallColor+0x60>)
 8003484:	701a      	strb	r2, [r3, #0]

	if(object_color == WHITE){
 8003486:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <GetBallColor+0x60>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <GetBallColor+0x3e>
		return WHITE;
 800348e:	2300      	movs	r3, #0
 8003490:	e006      	b.n	80034a0 <GetBallColor+0x4c>
	}
	else if(object_color == YELLOW){
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <GetBallColor+0x60>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d101      	bne.n	800349e <GetBallColor+0x4a>
		return YELLOW;
 800349a:	2302      	movs	r3, #2
 800349c:	e000      	b.n	80034a0 <GetBallColor+0x4c>
	}
	return WHITE;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000dfa 	.word	0x20000dfa
 80034a8:	20000df8 	.word	0x20000df8
 80034ac:	20000df6 	.word	0x20000df6
 80034b0:	20000df4 	.word	0x20000df4
 80034b4:	20000dfd 	.word	0x20000dfd

080034b8 <Robot_LineFollowUntillJunction>:




//------------------------------------------------------------------------------//
JunctionType Robot_LineFollowUntillJunction(){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80034bc:	2007      	movs	r0, #7
 80034be:	f000 fd1b 	bl	8003ef8 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 80034c2:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <Robot_LineFollowUntillJunction+0x74>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ce:	4b17      	ldr	r3, [pc, #92]	@ (800352c <Robot_LineFollowUntillJunction+0x74>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	ee07 3a10 	vmov	s14, r3
 80034d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <Robot_LineFollowUntillJunction+0x78>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	ee06 3a90 	vmov	s13, r3
 80034e2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80034e6:	eef0 1a66 	vmov.f32	s3, s13
 80034ea:	eeb0 1a47 	vmov.f32	s2, s14
 80034ee:	eef0 0a67 	vmov.f32	s1, s15
 80034f2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003534 <Robot_LineFollowUntillJunction+0x7c>
 80034f6:	4810      	ldr	r0, [pc, #64]	@ (8003538 <Robot_LineFollowUntillJunction+0x80>)
 80034f8:	f7ff f979 	bl	80027ee <Motion_StartMove>
	junction = STRAIGHT_LINE;
 80034fc:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <Robot_LineFollowUntillJunction+0x84>)
 80034fe:	2204      	movs	r2, #4
 8003500:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 8003502:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <Robot_LineFollowUntillJunction+0x84>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d100      	bne.n	800350c <Robot_LineFollowUntillJunction+0x54>
 800350a:	e7fa      	b.n	8003502 <Robot_LineFollowUntillJunction+0x4a>
			break;
 800350c:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 800350e:	2003      	movs	r0, #3
 8003510:	f000 fcf2 	bl	8003ef8 <set_steering_mode>
	Motion_StopAfter(&motion, 55);
 8003514:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003540 <Robot_LineFollowUntillJunction+0x88>
 8003518:	4807      	ldr	r0, [pc, #28]	@ (8003538 <Robot_LineFollowUntillJunction+0x80>)
 800351a:	f7ff fa03 	bl	8002924 <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 800351e:	4806      	ldr	r0, [pc, #24]	@ (8003538 <Robot_LineFollowUntillJunction+0x80>)
 8003520:	f7ff f90d 	bl	800273e <Motion_ResetDriveSystem>
	return junction;
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <Robot_LineFollowUntillJunction+0x84>)
 8003526:	781b      	ldrb	r3, [r3, #0]

}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	080100cc 	.word	0x080100cc
 8003530:	080100d0 	.word	0x080100d0
 8003534:	44bb8000 	.word	0x44bb8000
 8003538:	2000062c 	.word	0x2000062c
 800353c:	20000770 	.word	0x20000770
 8003540:	425c0000 	.word	0x425c0000

08003544 <Robot_LineFollowUntillJunctionAndNotStop>:
JunctionType Robot_LineFollowUntillJunctionAndNotStop(){
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 8003548:	2007      	movs	r0, #7
 800354a:	f000 fcd5 	bl	8003ef8 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 800354e:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	ee07 3a10 	vmov	s14, r3
 8003562:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003566:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <Robot_LineFollowUntillJunctionAndNotStop+0x74>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	ee06 3a90 	vmov	s13, r3
 800356e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003572:	eef0 1a66 	vmov.f32	s3, s13
 8003576:	eeb0 1a47 	vmov.f32	s2, s14
 800357a:	eef0 0a67 	vmov.f32	s1, s15
 800357e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80035bc <Robot_LineFollowUntillJunctionAndNotStop+0x78>
 8003582:	480f      	ldr	r0, [pc, #60]	@ (80035c0 <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 8003584:	f7ff f933 	bl	80027ee <Motion_StartMove>
	junction = STRAIGHT_LINE;
 8003588:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 800358a:	2204      	movs	r2, #4
 800358c:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 800358e:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b04      	cmp	r3, #4
 8003594:	d100      	bne.n	8003598 <Robot_LineFollowUntillJunctionAndNotStop+0x54>
 8003596:	e7fa      	b.n	800358e <Robot_LineFollowUntillJunctionAndNotStop+0x4a>
			break;
 8003598:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 800359a:	2003      	movs	r0, #3
 800359c:	f000 fcac 	bl	8003ef8 <set_steering_mode>
	//Motion_StopAfter(&motion, 45);
	Motion_SwitchToNextMotionAfter(&motion, 45);
 80035a0:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80035c8 <Robot_LineFollowUntillJunctionAndNotStop+0x84>
 80035a4:	4806      	ldr	r0, [pc, #24]	@ (80035c0 <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 80035a6:	f7ff f9e9 	bl	800297c <Motion_SwitchToNextMotionAfter>

	//Motion_ResetDriveSystem(&motion);
	return junction;
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 80035ac:	781b      	ldrb	r3, [r3, #0]

}
 80035ae:	4618      	mov	r0, r3
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	080100cc 	.word	0x080100cc
 80035b8:	080100d0 	.word	0x080100d0
 80035bc:	44bb8000 	.word	0x44bb8000
 80035c0:	2000062c 	.word	0x2000062c
 80035c4:	20000770 	.word	0x20000770
 80035c8:	42340000 	.word	0x42340000

080035cc <Robot_FollowLineGivenDistance>:


void Robot_FollowLineGivenDistance(int distnace){
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80035d4:	2007      	movs	r0, #7
 80035d6:	f000 fc8f 	bl	8003ef8 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, 0    , FORWARD_ACCELERATION_1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <Robot_FollowLineGivenDistance+0x5c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	ee07 3a10 	vmov	s14, r3
 80035ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035f0:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <Robot_FollowLineGivenDistance+0x60>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	ee06 3a90 	vmov	s13, r3
 80035f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80035fc:	eef0 1a66 	vmov.f32	s3, s13
 8003600:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8003630 <Robot_FollowLineGivenDistance+0x64>
 8003604:	eef0 0a47 	vmov.f32	s1, s14
 8003608:	eeb0 0a67 	vmov.f32	s0, s15
 800360c:	4809      	ldr	r0, [pc, #36]	@ (8003634 <Robot_FollowLineGivenDistance+0x68>)
 800360e:	f7ff f90b 	bl	8002828 <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	set_steering_mode(STEERING_OFF);
 8003612:	2003      	movs	r0, #3
 8003614:	f000 fc70 	bl	8003ef8 <set_steering_mode>
	Motion_ResetDriveSystem(&motion);
 8003618:	4806      	ldr	r0, [pc, #24]	@ (8003634 <Robot_FollowLineGivenDistance+0x68>)
 800361a:	f7ff f890 	bl	800273e <Motion_ResetDriveSystem>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	080100d4 	.word	0x080100d4
 800362c:	080100d8 	.word	0x080100d8
 8003630:	00000000 	.word	0x00000000
 8003634:	2000062c 	.word	0x2000062c

08003638 <Robot_FollowLineGivenDistanceandNotStop>:

void Robot_FollowLineGivenDistanceandNotStop(int distnace){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 8003640:	2007      	movs	r0, #7
 8003642:	f000 fc59 	bl	8003ef8 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, FORWARD_SPEED_1    , FORWARD_ACCELERATION_1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003650:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	ee07 3a10 	vmov	s14, r3
 8003658:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800365c:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	ee06 3a90 	vmov	s13, r3
 8003664:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <Robot_FollowLineGivenDistanceandNotStop+0x60>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	ee06 3a10 	vmov	s12, r3
 8003670:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003674:	eef0 1a46 	vmov.f32	s3, s12
 8003678:	eeb0 1a66 	vmov.f32	s2, s13
 800367c:	eef0 0a47 	vmov.f32	s1, s14
 8003680:	eeb0 0a67 	vmov.f32	s0, s15
 8003684:	4805      	ldr	r0, [pc, #20]	@ (800369c <Robot_FollowLineGivenDistanceandNotStop+0x64>)
 8003686:	f7ff f8cf 	bl	8002828 <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	//set_steering_mode(STEERING_OFF);
	//Motion_ResetDriveSystem(&motion);
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	080100d4 	.word	0x080100d4
 8003698:	080100d8 	.word	0x080100d8
 800369c:	2000062c 	.word	0x2000062c

080036a0 <Robot_MoveForwardUntillLine>:

JunctionType Robot_MoveForwardUntillLine(){
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_OFF_READLINE);
 80036a4:	2004      	movs	r0, #4
 80036a6:	f000 fc27 	bl	8003ef8 <set_steering_mode>
	Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 80036aa:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <Robot_MoveForwardUntillLine+0x68>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <Robot_MoveForwardUntillLine+0x6c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	ee07 3a10 	vmov	s14, r3
 80036be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036c2:	eef0 1a47 	vmov.f32	s3, s14
 80036c6:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8003710 <Robot_MoveForwardUntillLine+0x70>
 80036ca:	eef0 0a67 	vmov.f32	s1, s15
 80036ce:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8003714 <Robot_MoveForwardUntillLine+0x74>
 80036d2:	4811      	ldr	r0, [pc, #68]	@ (8003718 <Robot_MoveForwardUntillLine+0x78>)
 80036d4:	f7ff f88b 	bl	80027ee <Motion_StartMove>
	junction = NO_LINE;
 80036d8:	4b10      	ldr	r3, [pc, #64]	@ (800371c <Robot_MoveForwardUntillLine+0x7c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != NO_LINE){
 80036de:	4b0f      	ldr	r3, [pc, #60]	@ (800371c <Robot_MoveForwardUntillLine+0x7c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d100      	bne.n	80036e8 <Robot_MoveForwardUntillLine+0x48>
 80036e6:	e7fa      	b.n	80036de <Robot_MoveForwardUntillLine+0x3e>
			break;
 80036e8:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80036ea:	2003      	movs	r0, #3
 80036ec:	f000 fc04 	bl	8003ef8 <set_steering_mode>
	Motion_StopAfter(&motion, 60);
 80036f0:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8003720 <Robot_MoveForwardUntillLine+0x80>
 80036f4:	4808      	ldr	r0, [pc, #32]	@ (8003718 <Robot_MoveForwardUntillLine+0x78>)
 80036f6:	f7ff f915 	bl	8002924 <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 80036fa:	4807      	ldr	r0, [pc, #28]	@ (8003718 <Robot_MoveForwardUntillLine+0x78>)
 80036fc:	f7ff f81f 	bl	800273e <Motion_ResetDriveSystem>
	return junction;
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <Robot_MoveForwardUntillLine+0x7c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	080100d4 	.word	0x080100d4
 800370c:	080100d8 	.word	0x080100d8
 8003710:	00000000 	.word	0x00000000
 8003714:	44bb8000 	.word	0x44bb8000
 8003718:	2000062c 	.word	0x2000062c
 800371c:	20000770 	.word	0x20000770
 8003720:	42700000 	.word	0x42700000

08003724 <Robot_MoveForwardGivenDistance>:

void Robot_MoveForwardGivenDistance(int distnace){
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 800372c:	2003      	movs	r0, #3
 800372e:	f000 fbe3 	bl	8003ef8 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800373c:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <Robot_MoveForwardGivenDistance+0x54>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	ee07 3a10 	vmov	s14, r3
 8003744:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003748:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <Robot_MoveForwardGivenDistance+0x58>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	ee06 3a90 	vmov	s13, r3
 8003750:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003754:	eef0 1a66 	vmov.f32	s3, s13
 8003758:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8003780 <Robot_MoveForwardGivenDistance+0x5c>
 800375c:	eef0 0a47 	vmov.f32	s1, s14
 8003760:	eeb0 0a67 	vmov.f32	s0, s15
 8003764:	4807      	ldr	r0, [pc, #28]	@ (8003784 <Robot_MoveForwardGivenDistance+0x60>)
 8003766:	f7ff f85f 	bl	8002828 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 800376a:	4806      	ldr	r0, [pc, #24]	@ (8003784 <Robot_MoveForwardGivenDistance+0x60>)
 800376c:	f7fe ffe7 	bl	800273e <Motion_ResetDriveSystem>
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	080100d4 	.word	0x080100d4
 800377c:	080100d8 	.word	0x080100d8
 8003780:	00000000 	.word	0x00000000
 8003784:	2000062c 	.word	0x2000062c

08003788 <Robot_MoveReverseGivenDistanceSLOW>:

void Robot_MoveReverseGivenDistanceSLOW(int distnace){
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 8003790:	2003      	movs	r0, #3
 8003792:	f000 fbb1 	bl	8003ef8 <set_steering_mode>
	Motion_Move(&motion, -1 * distnace, FORWARD_SPEED_2, 0, FORWARD_ACCELERATION_2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	425b      	negs	r3, r3
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <Robot_MoveReverseGivenDistanceSLOW+0x58>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	ee07 3a10 	vmov	s14, r3
 80037aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80037ae:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <Robot_MoveReverseGivenDistanceSLOW+0x5c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	ee06 3a90 	vmov	s13, r3
 80037b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80037ba:	eef0 1a66 	vmov.f32	s3, s13
 80037be:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80037e8 <Robot_MoveReverseGivenDistanceSLOW+0x60>
 80037c2:	eef0 0a47 	vmov.f32	s1, s14
 80037c6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ca:	4808      	ldr	r0, [pc, #32]	@ (80037ec <Robot_MoveReverseGivenDistanceSLOW+0x64>)
 80037cc:	f7ff f82c 	bl	8002828 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 80037d0:	4806      	ldr	r0, [pc, #24]	@ (80037ec <Robot_MoveReverseGivenDistanceSLOW+0x64>)
 80037d2:	f7fe ffb4 	bl	800273e <Motion_ResetDriveSystem>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	080100dc 	.word	0x080100dc
 80037e4:	080100e0 	.word	0x080100e0
 80037e8:	00000000 	.word	0x00000000
 80037ec:	2000062c 	.word	0x2000062c

080037f0 <Robot_MoveForwardGivenDistanceSLOW>:

void Robot_MoveForwardGivenDistanceSLOW(int distnace){
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 80037f8:	2003      	movs	r0, #3
 80037fa:	f000 fb7d 	bl	8003ef8 <set_steering_mode>
	Motion_Move(&motion, 1 * distnace, FORWARD_SPEED_2, 0, FORWARD_ACCELERATION_2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003808:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <Robot_MoveForwardGivenDistanceSLOW+0x54>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	ee07 3a10 	vmov	s14, r3
 8003810:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003814:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <Robot_MoveForwardGivenDistanceSLOW+0x58>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	ee06 3a90 	vmov	s13, r3
 800381c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003820:	eef0 1a66 	vmov.f32	s3, s13
 8003824:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 800384c <Robot_MoveForwardGivenDistanceSLOW+0x5c>
 8003828:	eef0 0a47 	vmov.f32	s1, s14
 800382c:	eeb0 0a67 	vmov.f32	s0, s15
 8003830:	4807      	ldr	r0, [pc, #28]	@ (8003850 <Robot_MoveForwardGivenDistanceSLOW+0x60>)
 8003832:	f7fe fff9 	bl	8002828 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 8003836:	4806      	ldr	r0, [pc, #24]	@ (8003850 <Robot_MoveForwardGivenDistanceSLOW+0x60>)
 8003838:	f7fe ff81 	bl	800273e <Motion_ResetDriveSystem>
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	080100dc 	.word	0x080100dc
 8003848:	080100e0 	.word	0x080100e0
 800384c:	00000000 	.word	0x00000000
 8003850:	2000062c 	.word	0x2000062c

08003854 <Robot_MoveReverseGivenDistance>:

void Robot_MoveReverseGivenDistance(int distnace){
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 800385c:	2003      	movs	r0, #3
 800385e:	f000 fb4b 	bl	8003ef8 <set_steering_mode>
	Motion_Move(&motion, -1 * distnace, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	425b      	negs	r3, r3
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386e:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <Robot_MoveReverseGivenDistance+0x58>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	ee07 3a10 	vmov	s14, r3
 8003876:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <Robot_MoveReverseGivenDistance+0x5c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	ee06 3a90 	vmov	s13, r3
 8003882:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003886:	eef0 1a66 	vmov.f32	s3, s13
 800388a:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80038b4 <Robot_MoveReverseGivenDistance+0x60>
 800388e:	eef0 0a47 	vmov.f32	s1, s14
 8003892:	eeb0 0a67 	vmov.f32	s0, s15
 8003896:	4808      	ldr	r0, [pc, #32]	@ (80038b8 <Robot_MoveReverseGivenDistance+0x64>)
 8003898:	f7fe ffc6 	bl	8002828 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 800389c:	4806      	ldr	r0, [pc, #24]	@ (80038b8 <Robot_MoveReverseGivenDistance+0x64>)
 800389e:	f7fe ff4e 	bl	800273e <Motion_ResetDriveSystem>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	080100d4 	.word	0x080100d4
 80038b0:	080100d8 	.word	0x080100d8
 80038b4:	00000000 	.word	0x00000000
 80038b8:	2000062c 	.word	0x2000062c

080038bc <Robot_TurnRight90Inplace>:

void Robot_TurnRight90Inplace(){
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <Robot_TurnRight90Inplace+0x44>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 fd3f 	bl	8006348 <HAL_Delay>
	Motion_SpinTurn(&motion, -88.5, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 80038ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003904 <Robot_TurnRight90Inplace+0x48>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <Robot_TurnRight90Inplace+0x4c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	ee07 3a10 	vmov	s14, r3
 80038de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038e2:	eeb0 1a47 	vmov.f32	s2, s14
 80038e6:	eef0 0a67 	vmov.f32	s1, s15
 80038ea:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800390c <Robot_TurnRight90Inplace+0x50>
 80038ee:	4808      	ldr	r0, [pc, #32]	@ (8003910 <Robot_TurnRight90Inplace+0x54>)
 80038f0:	f7fe ffe8 	bl	80028c4 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 80038f4:	4806      	ldr	r0, [pc, #24]	@ (8003910 <Robot_TurnRight90Inplace+0x54>)
 80038f6:	f7fe ff22 	bl	800273e <Motion_ResetDriveSystem>
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	080100f4 	.word	0x080100f4
 8003904:	080100e4 	.word	0x080100e4
 8003908:	080100e8 	.word	0x080100e8
 800390c:	c2b10000 	.word	0xc2b10000
 8003910:	2000062c 	.word	0x2000062c

08003914 <robot_TurnRight180Inplace>:

void robot_TurnRight180Inplace(){
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003918:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <robot_TurnRight180Inplace+0x44>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fd13 	bl	8006348 <HAL_Delay>
	Motion_SpinTurn(&motion, -180, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 8003922:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <robot_TurnRight180Inplace+0x48>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800392e:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <robot_TurnRight180Inplace+0x4c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	ee07 3a10 	vmov	s14, r3
 8003936:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800393a:	eeb0 1a47 	vmov.f32	s2, s14
 800393e:	eef0 0a67 	vmov.f32	s1, s15
 8003942:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003964 <robot_TurnRight180Inplace+0x50>
 8003946:	4808      	ldr	r0, [pc, #32]	@ (8003968 <robot_TurnRight180Inplace+0x54>)
 8003948:	f7fe ffbc 	bl	80028c4 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 800394c:	4806      	ldr	r0, [pc, #24]	@ (8003968 <robot_TurnRight180Inplace+0x54>)
 800394e:	f7fe fef6 	bl	800273e <Motion_ResetDriveSystem>
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	080100f4 	.word	0x080100f4
 800395c:	080100e4 	.word	0x080100e4
 8003960:	080100e8 	.word	0x080100e8
 8003964:	c3340000 	.word	0xc3340000
 8003968:	2000062c 	.word	0x2000062c

0800396c <Robot_TurnRightInplace>:

void Robot_TurnRightInplace(float angle){
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_Delay(MOTION_DELAY);
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <Robot_TurnRightInplace+0x54>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f002 fce4 	bl	8006348 <HAL_Delay>
	Motion_SpinTurn(&motion, -1 * angle, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 8003980:	edd7 7a01 	vldr	s15, [r7, #4]
 8003984:	eef1 7a67 	vneg.f32	s15, s15
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <Robot_TurnRightInplace+0x58>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	ee07 3a10 	vmov	s14, r3
 8003990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <Robot_TurnRightInplace+0x5c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	ee06 3a90 	vmov	s13, r3
 800399c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80039a0:	eeb0 1a66 	vmov.f32	s2, s13
 80039a4:	eef0 0a47 	vmov.f32	s1, s14
 80039a8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ac:	4807      	ldr	r0, [pc, #28]	@ (80039cc <Robot_TurnRightInplace+0x60>)
 80039ae:	f7fe ff89 	bl	80028c4 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 80039b2:	4806      	ldr	r0, [pc, #24]	@ (80039cc <Robot_TurnRightInplace+0x60>)
 80039b4:	f7fe fec3 	bl	800273e <Motion_ResetDriveSystem>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	080100f4 	.word	0x080100f4
 80039c4:	080100e4 	.word	0x080100e4
 80039c8:	080100e8 	.word	0x080100e8
 80039cc:	2000062c 	.word	0x2000062c

080039d0 <Robot_TurnLeft90Inplace>:

void Robot_TurnLeft90Inplace(){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 80039d4:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <Robot_TurnLeft90Inplace+0x4c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 fcb5 	bl	8006348 <HAL_Delay>
	Motion_SpinTurn(&motion, 86, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <Robot_TurnLeft90Inplace+0x50>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003a24 <Robot_TurnLeft90Inplace+0x54>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	ee07 3a10 	vmov	s14, r3
 80039f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80039f6:	eeb0 1a47 	vmov.f32	s2, s14
 80039fa:	eef0 0a67 	vmov.f32	s1, s15
 80039fe:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003a28 <Robot_TurnLeft90Inplace+0x58>
 8003a02:	480a      	ldr	r0, [pc, #40]	@ (8003a2c <Robot_TurnLeft90Inplace+0x5c>)
 8003a04:	f7fe ff5e 	bl	80028c4 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 8003a08:	4808      	ldr	r0, [pc, #32]	@ (8003a2c <Robot_TurnLeft90Inplace+0x5c>)
 8003a0a:	f7fe fe98 	bl	800273e <Motion_ResetDriveSystem>
	HAL_Delay(MOTION_DELAY);
 8003a0e:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <Robot_TurnLeft90Inplace+0x4c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 fc98 	bl	8006348 <HAL_Delay>
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	080100f4 	.word	0x080100f4
 8003a20:	080100e4 	.word	0x080100e4
 8003a24:	080100e8 	.word	0x080100e8
 8003a28:	42ac0000 	.word	0x42ac0000
 8003a2c:	2000062c 	.word	0x2000062c

08003a30 <Robot_TurnLeftInplace>:

void Robot_TurnLeftInplace(float angle){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_Delay(MOTION_DELAY);
 8003a3a:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <Robot_TurnLeftInplace+0x58>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f002 fc82 	bl	8006348 <HAL_Delay>
	Motion_SpinTurn(&motion, angle, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <Robot_TurnLeftInplace+0x5c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <Robot_TurnLeftInplace+0x60>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	ee07 3a10 	vmov	s14, r3
 8003a58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a5c:	eeb0 1a47 	vmov.f32	s2, s14
 8003a60:	eef0 0a67 	vmov.f32	s1, s15
 8003a64:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a68:	480a      	ldr	r0, [pc, #40]	@ (8003a94 <Robot_TurnLeftInplace+0x64>)
 8003a6a:	f7fe ff2b 	bl	80028c4 <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 8003a6e:	4809      	ldr	r0, [pc, #36]	@ (8003a94 <Robot_TurnLeftInplace+0x64>)
 8003a70:	f7fe fe65 	bl	800273e <Motion_ResetDriveSystem>
	HAL_Delay(MOTION_DELAY);
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <Robot_TurnLeftInplace+0x58>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fc65 	bl	8006348 <HAL_Delay>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	080100f4 	.word	0x080100f4
 8003a8c:	080100e4 	.word	0x080100e4
 8003a90:	080100e8 	.word	0x080100e8
 8003a94:	2000062c 	.word	0x2000062c

08003a98 <Robot_moveForwardUntillFrontWall>:


float Robot_moveForwardUntillFrontWall(){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
		see_front_wall = 0;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <Robot_moveForwardUntillFrontWall+0x7c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
	 	set_steering_mode(STEERING_OFF_READIR);
 8003aa4:	2005      	movs	r0, #5
 8003aa6:	f000 fa27 	bl	8003ef8 <set_steering_mode>
	    Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <Robot_moveForwardUntillFrontWall+0x80>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab6:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <Robot_moveForwardUntillFrontWall+0x84>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	ee07 3a10 	vmov	s14, r3
 8003abe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ac2:	eef0 1a47 	vmov.f32	s3, s14
 8003ac6:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8003b20 <Robot_moveForwardUntillFrontWall+0x88>
 8003aca:	eef0 0a67 	vmov.f32	s1, s15
 8003ace:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003b24 <Robot_moveForwardUntillFrontWall+0x8c>
 8003ad2:	4815      	ldr	r0, [pc, #84]	@ (8003b28 <Robot_moveForwardUntillFrontWall+0x90>)
 8003ad4:	f7fe fe8b 	bl	80027ee <Motion_StartMove>
	    while(1){
	    	if(see_front_wall){
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <Robot_moveForwardUntillFrontWall+0x7c>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d100      	bne.n	8003ae4 <Robot_moveForwardUntillFrontWall+0x4c>
 8003ae2:	e7f9      	b.n	8003ad8 <Robot_moveForwardUntillFrontWall+0x40>
	    		break;
 8003ae4:	bf00      	nop
	    	}
		}
		set_steering_mode(STEERING_OFF);
 8003ae6:	2003      	movs	r0, #3
 8003ae8:	f000 fa06 	bl	8003ef8 <set_steering_mode>
	    Motion_StopAfter(&motion, 30);
 8003aec:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003af0:	480d      	ldr	r0, [pc, #52]	@ (8003b28 <Robot_moveForwardUntillFrontWall+0x90>)
 8003af2:	f7fe ff17 	bl	8002924 <Motion_StopAfter>

		float distance = robot_distance();
 8003af6:	f7fe f901 	bl	8001cfc <robot_distance>
 8003afa:	ed87 0a01 	vstr	s0, [r7, #4]
		Motion_ResetDriveSystem(&motion);
 8003afe:	480a      	ldr	r0, [pc, #40]	@ (8003b28 <Robot_moveForwardUntillFrontWall+0x90>)
 8003b00:	f7fe fe1d 	bl	800273e <Motion_ResetDriveSystem>

		return distance;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	ee07 3a90 	vmov	s15, r3
}
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000754 	.word	0x20000754
 8003b18:	080100d4 	.word	0x080100d4
 8003b1c:	080100d8 	.word	0x080100d8
 8003b20:	00000000 	.word	0x00000000
 8003b24:	44bb8000 	.word	0x44bb8000
 8003b28:	2000062c 	.word	0x2000062c

08003b2c <Robot_adjust_using_front_wall>:


void Robot_adjust_using_front_wall(){
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_FRONT_WALL);
 8003b30:	2006      	movs	r0, #6
 8003b32:	f000 f9e1 	bl	8003ef8 <set_steering_mode>
	NonBlockingDelay(2500);
 8003b36:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003b3a:	f001 f9bf 	bl	8004ebc <NonBlockingDelay>
	while(!IsDelayComplete()){
 8003b3e:	bf00      	nop
 8003b40:	f001 f9ce 	bl	8004ee0 <IsDelayComplete>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0fa      	beq.n	8003b40 <Robot_adjust_using_front_wall+0x14>

	}

	set_steering_mode(STEERING_OFF);
 8003b4a:	2003      	movs	r0, #3
 8003b4c:	f000 f9d4 	bl	8003ef8 <set_steering_mode>
	Motion_ResetDriveSystem(&motion);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <Robot_adjust_using_front_wall+0x30>)
 8003b52:	f7fe fdf4 	bl	800273e <Motion_ResetDriveSystem>
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000062c 	.word	0x2000062c

08003b60 <Robot_read_Barcode>:
int barcode[4];
int barcode_index = 0;
int stripCounter = 0;
int consecutiveEdges = 0;

uint8_t Robot_read_Barcode(){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
	Motion_ResetDriveSystem(&motion);
 8003b66:	4861      	ldr	r0, [pc, #388]	@ (8003cec <Robot_read_Barcode+0x18c>)
 8003b68:	f7fe fde9 	bl	800273e <Motion_ResetDriveSystem>
	HAL_Delay(1000);
 8003b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b70:	f002 fbea 	bl	8006348 <HAL_Delay>
	set_steering_mode(STEERING_OFF_READLINE);
 8003b74:	2004      	movs	r0, #4
 8003b76:	f000 f9bf 	bl	8003ef8 <set_steering_mode>

	int currentColor = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
	int previousColor = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
	int lastStripStart = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]

	Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 8003b86:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf0 <Robot_read_Barcode+0x190>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b92:	4b58      	ldr	r3, [pc, #352]	@ (8003cf4 <Robot_read_Barcode+0x194>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	ee07 3a10 	vmov	s14, r3
 8003b9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003b9e:	eef0 1a47 	vmov.f32	s3, s14
 8003ba2:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 8003cf8 <Robot_read_Barcode+0x198>
 8003ba6:	eef0 0a67 	vmov.f32	s1, s15
 8003baa:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003cfc <Robot_read_Barcode+0x19c>
 8003bae:	484f      	ldr	r0, [pc, #316]	@ (8003cec <Robot_read_Barcode+0x18c>)
 8003bb0:	f7fe fe1d 	bl	80027ee <Motion_StartMove>

	while(1){
		float distance = robot_distance();
 8003bb4:	f7fe f8a2 	bl	8001cfc <robot_distance>
 8003bb8:	ed87 0a02 	vstr	s0, [r7, #8]

		if(on_line == 1){
 8003bbc:	4b50      	ldr	r3, [pc, #320]	@ (8003d00 <Robot_read_Barcode+0x1a0>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d102      	bne.n	8003bcc <Robot_read_Barcode+0x6c>
			currentColor = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e001      	b.n	8003bd0 <Robot_read_Barcode+0x70>
		}
		else{
			currentColor = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
		}

		if(currentColor == 1 && previousColor == 0){
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10b      	bne.n	8003bee <Robot_read_Barcode+0x8e>
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <Robot_read_Barcode+0x8e>
			lastStripStart = distance;
 8003bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be4:	ee17 3a90 	vmov	r3, s15
 8003be8:	60fb      	str	r3, [r7, #12]
			previousColor = 1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
		}
		if(currentColor == 0 && previousColor == 1){
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d15c      	bne.n	8003cae <Robot_read_Barcode+0x14e>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d159      	bne.n	8003cae <Robot_read_Barcode+0x14e>
			if(stripCounter == 0){
 8003bfa:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <Robot_read_Barcode+0x1a4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <Robot_read_Barcode+0xb2>
				stripCounter++;
 8003c02:	4b40      	ldr	r3, [pc, #256]	@ (8003d04 <Robot_read_Barcode+0x1a4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	4a3e      	ldr	r2, [pc, #248]	@ (8003d04 <Robot_read_Barcode+0x1a4>)
 8003c0a:	6013      	str	r3, [r2, #0]
				previousColor = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
				continue;
 8003c10:	e051      	b.n	8003cb6 <Robot_read_Barcode+0x156>
			}
			float strip_length = distance - lastStripStart;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c24:	edc7 7a01 	vstr	s15, [r7, #4]

			UART_Transmit_Float(&huart3, "l", strip_length, 2);
 8003c28:	2202      	movs	r2, #2
 8003c2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c2e:	4936      	ldr	r1, [pc, #216]	@ (8003d08 <Robot_read_Barcode+0x1a8>)
 8003c30:	4836      	ldr	r0, [pc, #216]	@ (8003d0c <Robot_read_Barcode+0x1ac>)
 8003c32:	f001 fc31 	bl	8005498 <UART_Transmit_Float>

			if(strip_length < 50 && strip_length > 30){
 8003c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c3a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003d10 <Robot_read_Barcode+0x1b0>
 8003c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c46:	d519      	bpl.n	8003c7c <Robot_read_Barcode+0x11c>
 8003c48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c4c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c58:	dd10      	ble.n	8003c7c <Robot_read_Barcode+0x11c>
				consecutiveEdges++;
 8003c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003d14 <Robot_read_Barcode+0x1b4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	4a2c      	ldr	r2, [pc, #176]	@ (8003d14 <Robot_read_Barcode+0x1b4>)
 8003c62:	6013      	str	r3, [r2, #0]
				barcode[barcode_index] = 0;
 8003c64:	4b2c      	ldr	r3, [pc, #176]	@ (8003d18 <Robot_read_Barcode+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <Robot_read_Barcode+0x1bc>)
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				barcode_index++;
 8003c70:	4b29      	ldr	r3, [pc, #164]	@ (8003d18 <Robot_read_Barcode+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a28      	ldr	r2, [pc, #160]	@ (8003d18 <Robot_read_Barcode+0x1b8>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e016      	b.n	8003caa <Robot_read_Barcode+0x14a>
			}
			else if(strip_length > 55){
 8003c7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c80:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003d20 <Robot_read_Barcode+0x1c0>
 8003c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	dd0d      	ble.n	8003caa <Robot_read_Barcode+0x14a>
				barcode[barcode_index] = 1;
 8003c8e:	4b22      	ldr	r3, [pc, #136]	@ (8003d18 <Robot_read_Barcode+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <Robot_read_Barcode+0x1bc>)
 8003c94:	2101      	movs	r1, #1
 8003c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				barcode_index++;
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <Robot_read_Barcode+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d18 <Robot_read_Barcode+0x1b8>)
 8003ca2:	6013      	str	r3, [r2, #0]
				consecutiveEdges = 0;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <Robot_read_Barcode+0x1b4>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
			}

			//barcode[barcode_index] = distance - di;
			//Serial2.println(barcode[barcode_index - 1]);
			//barcode_index++;
			previousColor = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]

		}

		if(barcode_index == 4){
 8003cae:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <Robot_read_Barcode+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d000      	beq.n	8003cb8 <Robot_read_Barcode+0x158>
	while(1){
 8003cb6:	e77d      	b.n	8003bb4 <Robot_read_Barcode+0x54>
			break;
 8003cb8:	bf00      	nop
		}
	}

	set_steering_mode(STEERING_OFF);
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f000 f91c 	bl	8003ef8 <set_steering_mode>
	Motion_StopAfter(&motion, 55);
 8003cc0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003d20 <Robot_read_Barcode+0x1c0>
 8003cc4:	4809      	ldr	r0, [pc, #36]	@ (8003cec <Robot_read_Barcode+0x18c>)
 8003cc6:	f7fe fe2d 	bl	8002924 <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 8003cca:	4808      	ldr	r0, [pc, #32]	@ (8003cec <Robot_read_Barcode+0x18c>)
 8003ccc:	f7fe fd37 	bl	800273e <Motion_ResetDriveSystem>

	return isEven(binaryToDecimal4Bit(barcode));
 8003cd0:	4812      	ldr	r0, [pc, #72]	@ (8003d1c <Robot_read_Barcode+0x1bc>)
 8003cd2:	f7fd fc7d 	bl	80015d0 <binaryToDecimal4Bit>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd fc94 	bl	8001606 <isEven>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	b2db      	uxtb	r3, r3
	//return binaryToDecimal4Bit(barcode);

}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	2000062c 	.word	0x2000062c
 8003cf0:	080100d4 	.word	0x080100d4
 8003cf4:	080100d8 	.word	0x080100d8
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	44bb8000 	.word	0x44bb8000
 8003d00:	20000755 	.word	0x20000755
 8003d04:	20000718 	.word	0x20000718
 8003d08:	0800fdb4 	.word	0x0800fdb4
 8003d0c:	2000050c 	.word	0x2000050c
 8003d10:	42480000 	.word	0x42480000
 8003d14:	2000071c 	.word	0x2000071c
 8003d18:	20000714 	.word	0x20000714
 8003d1c:	20000704 	.word	0x20000704
 8003d20:	425c0000 	.word	0x425c0000

08003d24 <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 8003d2a:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <DetectJunction+0x94>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e00e      	b.n	8003d54 <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 8003d36:	4a21      	ldr	r2, [pc, #132]	@ (8003dbc <DetectJunction+0x98>)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d3e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003d42:	d904      	bls.n	8003d4e <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 8003d44:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <DetectJunction+0x94>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <DetectJunction+0x94>)
 8003d4c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b09      	cmp	r3, #9
 8003d58:	dded      	ble.n	8003d36 <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 8003d5a:	4b18      	ldr	r3, [pc, #96]	@ (8003dbc <DetectJunction+0x98>)
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 8003d60:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <DetectJunction+0x98>)
 8003d62:	8a5b      	ldrh	r3, [r3, #18]
 8003d64:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 8003d66:	4b14      	ldr	r3, [pc, #80]	@ (8003db8 <DetectJunction+0x94>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	dd17      	ble.n	8003d9e <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003d74:	dd05      	ble.n	8003d82 <DetectJunction+0x5e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003d7c:	dd01      	ble.n	8003d82 <DetectJunction+0x5e>
			return T_JUNCTION;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e014      	b.n	8003dac <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003d88:	dd01      	ble.n	8003d8e <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e00e      	b.n	8003dac <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003d94:	dd01      	ble.n	8003d9a <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 8003d96:	2302      	movs	r3, #2
 8003d98:	e008      	b.n	8003dac <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	e006      	b.n	8003dac <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <DetectJunction+0x94>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <DetectJunction+0x86>
		return NO_LINE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e000      	b.n	8003dac <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 8003daa:	2304      	movs	r3, #4
	}
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	2000077c 	.word	0x2000077c
 8003dbc:	20000758 	.word	0x20000758

08003dc0 <get_steering_feedback>:
	rfs.raw = 0;
	rrs.raw = 0;
}


float get_steering_feedback() {
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 8003dc4:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <get_steering_feedback+0x18>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	ee07 3a90 	vmov	s15, r3
}
 8003dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	20000728 	.word	0x20000728

08003ddc <CalculateSteeringAdjustment>:
float pTerm;
float dTerm;


/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	if (g_steering_mode == STEERING_FRONT_WALL) {
 8003de2:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <CalculateSteeringAdjustment+0xec>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b06      	cmp	r3, #6
 8003dea:	d11b      	bne.n	8003e24 <CalculateSteeringAdjustment+0x48>
		pTerm = STEERING_FRONT_KP * m_cross_track_error;
 8003dec:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <CalculateSteeringAdjustment+0xf0>)
 8003dee:	ed93 7a00 	vldr	s14, [r3]
 8003df2:	4b37      	ldr	r3, [pc, #220]	@ (8003ed0 <CalculateSteeringAdjustment+0xf4>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfc:	4b35      	ldr	r3, [pc, #212]	@ (8003ed4 <CalculateSteeringAdjustment+0xf8>)
 8003dfe:	edc3 7a00 	vstr	s15, [r3]
		dTerm = STEERING_FRONT_KD * (m_cross_track_error - m_last_steering_error);
 8003e02:	4b33      	ldr	r3, [pc, #204]	@ (8003ed0 <CalculateSteeringAdjustment+0xf4>)
 8003e04:	ed93 7a00 	vldr	s14, [r3]
 8003e08:	4b33      	ldr	r3, [pc, #204]	@ (8003ed8 <CalculateSteeringAdjustment+0xfc>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e12:	4b32      	ldr	r3, [pc, #200]	@ (8003edc <CalculateSteeringAdjustment+0x100>)
 8003e14:	edd3 7a00 	vldr	s15, [r3]
 8003e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1c:	4b30      	ldr	r3, [pc, #192]	@ (8003ee0 <CalculateSteeringAdjustment+0x104>)
 8003e1e:	edc3 7a00 	vstr	s15, [r3]
 8003e22:	e01a      	b.n	8003e5a <CalculateSteeringAdjustment+0x7e>
	} else {
		pTerm = STEERING_KP * m_cross_track_error;
 8003e24:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <CalculateSteeringAdjustment+0x108>)
 8003e26:	ed93 7a00 	vldr	s14, [r3]
 8003e2a:	4b29      	ldr	r3, [pc, #164]	@ (8003ed0 <CalculateSteeringAdjustment+0xf4>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e34:	4b27      	ldr	r3, [pc, #156]	@ (8003ed4 <CalculateSteeringAdjustment+0xf8>)
 8003e36:	edc3 7a00 	vstr	s15, [r3]
		dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 8003e3a:	4b25      	ldr	r3, [pc, #148]	@ (8003ed0 <CalculateSteeringAdjustment+0xf4>)
 8003e3c:	ed93 7a00 	vldr	s14, [r3]
 8003e40:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <CalculateSteeringAdjustment+0xfc>)
 8003e42:	edd3 7a00 	vldr	s15, [r3]
 8003e46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ee8 <CalculateSteeringAdjustment+0x10c>)
 8003e4c:	edd3 7a00 	vldr	s15, [r3]
 8003e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e54:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <CalculateSteeringAdjustment+0x104>)
 8003e56:	edc3 7a00 	vstr	s15, [r3]
	}

//    float pTerm = STEERING_KP * m_cross_track_error;
//    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 8003e5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <CalculateSteeringAdjustment+0x104>)
 8003e5c:	ed93 7a00 	vldr	s14, [r3]
 8003e60:	4b22      	ldr	r3, [pc, #136]	@ (8003eec <CalculateSteeringAdjustment+0x110>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed4 <CalculateSteeringAdjustment+0xf8>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e74:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 8003e78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef0 <CalculateSteeringAdjustment+0x114>)
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	eef1 7a67 	vneg.f32	s15, s15
 8003e82:	eef0 0a67 	vmov.f32	s1, s15
 8003e86:	ed97 0a01 	vldr	s0, [r7, #4]
 8003e8a:	f00b fe97 	bl	800fbbc <fmaxf>
 8003e8e:	eeb0 7a40 	vmov.f32	s14, s0
 8003e92:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <CalculateSteeringAdjustment+0x114>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	eef0 0a67 	vmov.f32	s1, s15
 8003e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea0:	f00b fea9 	bl	800fbf6 <fminf>
 8003ea4:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	@ (8003ed0 <CalculateSteeringAdjustment+0xf4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <CalculateSteeringAdjustment+0xfc>)
 8003eae:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 8003eb0:	4a10      	ldr	r2, [pc, #64]	@ (8003ef4 <CalculateSteeringAdjustment+0x118>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6013      	str	r3, [r2, #0]
    return adjustment;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000060 	.word	0x20000060
 8003ecc:	080100c0 	.word	0x080100c0
 8003ed0:	20000724 	.word	0x20000724
 8003ed4:	20000780 	.word	0x20000780
 8003ed8:	20000720 	.word	0x20000720
 8003edc:	080100c4 	.word	0x080100c4
 8003ee0:	20000784 	.word	0x20000784
 8003ee4:	080100b8 	.word	0x080100b8
 8003ee8:	080100bc 	.word	0x080100bc
 8003eec:	08010094 	.word	0x08010094
 8003ef0:	080100c8 	.word	0x080100c8
 8003ef4:	20000728 	.word	0x20000728

08003ef8 <set_steering_mode>:

void set_steering_mode(uint8_t mode){
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
	m_last_steering_error = m_cross_track_error;
 8003f02:	4b08      	ldr	r3, [pc, #32]	@ (8003f24 <set_steering_mode+0x2c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a08      	ldr	r2, [pc, #32]	@ (8003f28 <set_steering_mode+0x30>)
 8003f08:	6013      	str	r3, [r2, #0]
	m_steering_adjustment = 0;
 8003f0a:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <set_steering_mode+0x34>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
	g_steering_mode = mode;
 8003f12:	4a07      	ldr	r2, [pc, #28]	@ (8003f30 <set_steering_mode+0x38>)
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	7013      	strb	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	20000724 	.word	0x20000724
 8003f28:	20000720 	.word	0x20000720
 8003f2c:	20000728 	.word	0x20000728
 8003f30:	20000060 	.word	0x20000060

08003f34 <Sensors_Update>:




/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	error = 0;
 8003f38:	4b45      	ldr	r3, [pc, #276]	@ (8004050 <Sensors_Update+0x11c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 8003f3e:	4b45      	ldr	r3, [pc, #276]	@ (8004054 <Sensors_Update+0x120>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b07      	cmp	r3, #7
 8003f46:	d115      	bne.n	8003f74 <Sensors_Update+0x40>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003f48:	4943      	ldr	r1, [pc, #268]	@ (8004058 <Sensors_Update+0x124>)
 8003f4a:	4844      	ldr	r0, [pc, #272]	@ (800405c <Sensors_Update+0x128>)
 8003f4c:	f7ff f950 	bl	80031f0 <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8003f50:	4941      	ldr	r1, [pc, #260]	@ (8004058 <Sensors_Update+0x124>)
 8003f52:	4842      	ldr	r0, [pc, #264]	@ (800405c <Sensors_Update+0x128>)
 8003f54:	f7ff f9fd 	bl	8003352 <RAYKHA_GetPositionForPID>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4a41      	ldr	r2, [pc, #260]	@ (8004060 <Sensors_Update+0x12c>)
 8003f5c:	6013      	str	r3, [r2, #0]

		error = line_position;
 8003f5e:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <Sensors_Update+0x12c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a3b      	ldr	r2, [pc, #236]	@ (8004050 <Sensors_Update+0x11c>)
 8003f64:	6013      	str	r3, [r2, #0]

		junction = DetectJunction();
 8003f66:	f7ff fedd 	bl	8003d24 <DetectJunction>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004064 <Sensors_Update+0x130>)
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e05f      	b.n	8004034 <Sensors_Update+0x100>

	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 8003f74:	4b37      	ldr	r3, [pc, #220]	@ (8004054 <Sensors_Update+0x120>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d122      	bne.n	8003fc4 <Sensors_Update+0x90>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003f7e:	4936      	ldr	r1, [pc, #216]	@ (8004058 <Sensors_Update+0x124>)
 8003f80:	4836      	ldr	r0, [pc, #216]	@ (800405c <Sensors_Update+0x128>)
 8003f82:	f7ff f935 	bl	80031f0 <RAYKHA_ReadCalibrated>
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8003f86:	4934      	ldr	r1, [pc, #208]	@ (8004058 <Sensors_Update+0x124>)
 8003f88:	4834      	ldr	r0, [pc, #208]	@ (800405c <Sensors_Update+0x128>)
 8003f8a:	f7ff f9e2 	bl	8003352 <RAYKHA_GetPositionForPID>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4a33      	ldr	r2, [pc, #204]	@ (8004060 <Sensors_Update+0x12c>)
 8003f92:	6013      	str	r3, [r2, #0]
		junction = DetectJunction();
 8003f94:	f7ff fec6 	bl	8003d24 <DetectJunction>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <Sensors_Update+0x130>)
 8003f9e:	701a      	strb	r2, [r3, #0]

		if(sensor_values[4] > LINE_THRESHOLD || sensor_values[5] > LINE_THRESHOLD){
 8003fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800405c <Sensors_Update+0x128>)
 8003fa2:	891b      	ldrh	r3, [r3, #8]
 8003fa4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003fa8:	d804      	bhi.n	8003fb4 <Sensors_Update+0x80>
 8003faa:	4b2c      	ldr	r3, [pc, #176]	@ (800405c <Sensors_Update+0x128>)
 8003fac:	895b      	ldrh	r3, [r3, #10]
 8003fae:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003fb2:	d903      	bls.n	8003fbc <Sensors_Update+0x88>
			on_line = 1;
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004068 <Sensors_Update+0x134>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e03b      	b.n	8004034 <Sensors_Update+0x100>
		}
		else{
			on_line = 0;
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <Sensors_Update+0x134>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e037      	b.n	8004034 <Sensors_Update+0x100>
		}


	}
	else if(g_steering_mode == STEER_LEFT_WALL){
 8003fc4:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <Sensors_Update+0x120>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d11c      	bne.n	8004008 <Sensors_Update+0xd4>
		RangeAllIRSensors();
 8003fce:	f000 f85b 	bl	8004088 <RangeAllIRSensors>
		// Calculate the wall angle using the difference between front and rear sensors
		//wall_angle = lfs.value - lrs.value;

		// Calculate distance error - how far we are from the desired distance to wall
		//distance_error = SIDE_NOMINAL - left_wall_avg;
		distance_error = SIDE_NOMINAL - lrs.value;
 8003fd2:	4b26      	ldr	r3, [pc, #152]	@ (800406c <Sensors_Update+0x138>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b26      	ldr	r3, [pc, #152]	@ (8004070 <Sensors_Update+0x13c>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	4a25      	ldr	r2, [pc, #148]	@ (8004074 <Sensors_Update+0x140>)
 8003fde:	6013      	str	r3, [r2, #0]

		// Combine both angle and distance for proportional control
		// Adjust weights as needed based on testing
		//error = 25 * (distance_error + (wall_angle * WALL_ANGLE_WEIGHT));
		error = 3.5 * distance_error;
 8003fe0:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <Sensors_Update+0x140>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fabd 	bl	8000564 <__aeabi_i2d>
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <Sensors_Update+0x144>)
 8003ff0:	f7fc fb22 	bl	8000638 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fdcc 	bl	8000b98 <__aeabi_d2iz>
 8004000:	4603      	mov	r3, r0
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <Sensors_Update+0x11c>)
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e015      	b.n	8004034 <Sensors_Update+0x100>



    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 8004008:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <Sensors_Update+0x120>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b06      	cmp	r3, #6
 8004010:	d109      	bne.n	8004026 <Sensors_Update+0xf2>
    	RangeAllIRSensors();
 8004012:	f000 f839 	bl	8004088 <RangeAllIRSensors>

		error = lfs.value - rfs.value;
 8004016:	4b19      	ldr	r3, [pc, #100]	@ (800407c <Sensors_Update+0x148>)
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <Sensors_Update+0x14c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	4a0b      	ldr	r2, [pc, #44]	@ (8004050 <Sensors_Update+0x11c>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e006      	b.n	8004034 <Sensors_Update+0x100>
    }
    else if(g_steering_mode == STEERING_OFF_READIR){
 8004026:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <Sensors_Update+0x120>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b05      	cmp	r3, #5
 800402e:	d101      	bne.n	8004034 <Sensors_Update+0x100>
    	RangeAllIRSensors();
 8004030:	f000 f82a 	bl	8004088 <RangeAllIRSensors>

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8004034:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <Sensors_Update+0x11c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <Sensors_Update+0x150>)
 8004042:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 8004046:	f7ff fec9 	bl	8003ddc <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000774 	.word	0x20000774
 8004054:	20000060 	.word	0x20000060
 8004058:	20000600 	.word	0x20000600
 800405c:	20000758 	.word	0x20000758
 8004060:	2000076c 	.word	0x2000076c
 8004064:	20000770 	.word	0x20000770
 8004068:	20000755 	.word	0x20000755
 800406c:	080100ec 	.word	0x080100ec
 8004070:	20000734 	.word	0x20000734
 8004074:	20000778 	.word	0x20000778
 8004078:	400c0000 	.word	0x400c0000
 800407c:	2000072c 	.word	0x2000072c
 8004080:	20000744 	.word	0x20000744
 8004084:	20000724 	.word	0x20000724

08004088 <RangeAllIRSensors>:


void RangeAllIRSensors(void){
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
	analogReadIRs();
 800408c:	f7fd fe6c 	bl	8001d68 <analogReadIRs>

	lfs.raw = readRawIR(IR_LEFT_BACK);
 8004090:	2002      	movs	r0, #2
 8004092:	f7fd fe87 	bl	8001da4 <readRawIR>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	4b4f      	ldr	r3, [pc, #316]	@ (80041d8 <RangeAllIRSensors+0x150>)
 800409c:	801a      	strh	r2, [r3, #0]
	lrs.raw = readRawIR(IR_LEFT_FORWARD);
 800409e:	2001      	movs	r0, #1
 80040a0:	f7fd fe80 	bl	8001da4 <readRawIR>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b4c      	ldr	r3, [pc, #304]	@ (80041dc <RangeAllIRSensors+0x154>)
 80040aa:	801a      	strh	r2, [r3, #0]

	fs.raw = readRawIR(IR_FRONT);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fd fe79 	bl	8001da4 <readRawIR>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b4a      	ldr	r3, [pc, #296]	@ (80041e0 <RangeAllIRSensors+0x158>)
 80040b8:	801a      	strh	r2, [r3, #0]

	rfs.raw = readRawIR(IR_RIGHT_FORWARD);
 80040ba:	2004      	movs	r0, #4
 80040bc:	f7fd fe72 	bl	8001da4 <readRawIR>
 80040c0:	4603      	mov	r3, r0
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <RangeAllIRSensors+0x15c>)
 80040c6:	801a      	strh	r2, [r3, #0]
	rrs.raw = readRawIR(IR_RIGHT_BACK);
 80040c8:	2003      	movs	r0, #3
 80040ca:	f7fd fe6b 	bl	8001da4 <readRawIR>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b45      	ldr	r3, [pc, #276]	@ (80041e8 <RangeAllIRSensors+0x160>)
 80040d4:	801a      	strh	r2, [r3, #0]


	if(lfs.raw < 400)lfs.raw = 400;
 80040d6:	4b40      	ldr	r3, [pc, #256]	@ (80041d8 <RangeAllIRSensors+0x150>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80040e0:	d203      	bcs.n	80040ea <RangeAllIRSensors+0x62>
 80040e2:	4b3d      	ldr	r3, [pc, #244]	@ (80041d8 <RangeAllIRSensors+0x150>)
 80040e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80040e8:	801a      	strh	r2, [r3, #0]
	if(lrs.raw < 300)lrs.raw = 300;
 80040ea:	4b3c      	ldr	r3, [pc, #240]	@ (80041dc <RangeAllIRSensors+0x154>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80040f4:	d203      	bcs.n	80040fe <RangeAllIRSensors+0x76>
 80040f6:	4b39      	ldr	r3, [pc, #228]	@ (80041dc <RangeAllIRSensors+0x154>)
 80040f8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040fc:	801a      	strh	r2, [r3, #0]

	if(fs.raw < 400)fs.raw = 400;
 80040fe:	4b38      	ldr	r3, [pc, #224]	@ (80041e0 <RangeAllIRSensors+0x158>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004108:	d203      	bcs.n	8004112 <RangeAllIRSensors+0x8a>
 800410a:	4b35      	ldr	r3, [pc, #212]	@ (80041e0 <RangeAllIRSensors+0x158>)
 800410c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004110:	801a      	strh	r2, [r3, #0]

	if(rfs.raw < 350)rfs.raw = 350;
 8004112:	4b34      	ldr	r3, [pc, #208]	@ (80041e4 <RangeAllIRSensors+0x15c>)
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800411c:	d203      	bcs.n	8004126 <RangeAllIRSensors+0x9e>
 800411e:	4b31      	ldr	r3, [pc, #196]	@ (80041e4 <RangeAllIRSensors+0x15c>)
 8004120:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004124:	801a      	strh	r2, [r3, #0]
	if(rrs.raw < 200)rrs.raw = 200;
 8004126:	4b30      	ldr	r3, [pc, #192]	@ (80041e8 <RangeAllIRSensors+0x160>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	2bc7      	cmp	r3, #199	@ 0xc7
 800412e:	d802      	bhi.n	8004136 <RangeAllIRSensors+0xae>
 8004130:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <RangeAllIRSensors+0x160>)
 8004132:	22c8      	movs	r2, #200	@ 0xc8
 8004134:	801a      	strh	r2, [r3, #0]


	lfs.value = getIRDistance(IR_LEFT_FORWARD, lfs.raw);
 8004136:	4b28      	ldr	r3, [pc, #160]	@ (80041d8 <RangeAllIRSensors+0x150>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4619      	mov	r1, r3
 800413e:	2001      	movs	r0, #1
 8004140:	f7fd fe60 	bl	8001e04 <getIRDistance>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <RangeAllIRSensors+0x150>)
 800414a:	605a      	str	r2, [r3, #4]
	lrs.value = getIRDistance(IR_LEFT_BACK, lrs.raw);
 800414c:	4b23      	ldr	r3, [pc, #140]	@ (80041dc <RangeAllIRSensors+0x154>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	4619      	mov	r1, r3
 8004154:	2002      	movs	r0, #2
 8004156:	f7fd fe55 	bl	8001e04 <getIRDistance>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	4b1f      	ldr	r3, [pc, #124]	@ (80041dc <RangeAllIRSensors+0x154>)
 8004160:	605a      	str	r2, [r3, #4]

	fs.value = getIRDistance(IR_FRONT, fs.raw);
 8004162:	4b1f      	ldr	r3, [pc, #124]	@ (80041e0 <RangeAllIRSensors+0x158>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	2000      	movs	r0, #0
 800416c:	f7fd fe4a 	bl	8001e04 <getIRDistance>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <RangeAllIRSensors+0x158>)
 8004176:	605a      	str	r2, [r3, #4]

	rfs.value = getIRDistance(IR_RIGHT_FORWARD, rfs.raw);
 8004178:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <RangeAllIRSensors+0x15c>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	4619      	mov	r1, r3
 8004180:	2004      	movs	r0, #4
 8004182:	f7fd fe3f 	bl	8001e04 <getIRDistance>
 8004186:	4603      	mov	r3, r0
 8004188:	461a      	mov	r2, r3
 800418a:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <RangeAllIRSensors+0x15c>)
 800418c:	605a      	str	r2, [r3, #4]
	rrs.value = getIRDistance(IR_RIGHT_BACK, rrs.raw);
 800418e:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <RangeAllIRSensors+0x160>)
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	2003      	movs	r0, #3
 8004198:	f7fd fe34 	bl	8001e04 <getIRDistance>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <RangeAllIRSensors+0x160>)
 80041a2:	605a      	str	r2, [r3, #4]
	//right_wall_avg = 0.5 * (rfs.value + rrs.value);

//	see_left_wall = (left_wall_avg < LEFT_THRESHOLD);
//	see_right_wall = (right_wall_avg < RIGHT_THRESHOLD);

	see_front_wall = (rfs.value < FRONT_THRESHOLD);
 80041a4:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <RangeAllIRSensors+0x15c>)
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <RangeAllIRSensors+0x164>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	bfb4      	ite	lt
 80041b0:	2301      	movlt	r3, #1
 80041b2:	2300      	movge	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b0d      	ldr	r3, [pc, #52]	@ (80041f0 <RangeAllIRSensors+0x168>)
 80041ba:	701a      	strb	r2, [r3, #0]
	see_box = (lrs.value < BOX_THRESHOLD);
 80041bc:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <RangeAllIRSensors+0x154>)
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <RangeAllIRSensors+0x16c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	bfb4      	ite	lt
 80041c8:	2301      	movlt	r3, #1
 80041ca:	2300      	movge	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <RangeAllIRSensors+0x170>)
 80041d2:	701a      	strb	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	2000072c 	.word	0x2000072c
 80041dc:	20000734 	.word	0x20000734
 80041e0:	2000073c 	.word	0x2000073c
 80041e4:	20000744 	.word	0x20000744
 80041e8:	2000074c 	.word	0x2000074c
 80041ec:	080100f0 	.word	0x080100f0
 80041f0:	20000754 	.word	0x20000754
 80041f4:	080100fc 	.word	0x080100fc
 80041f8:	20000756 	.word	0x20000756

080041fc <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8004206:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <Servo_Init+0x3c>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d110      	bne.n	8004230 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	4618      	mov	r0, r3
 8004212:	f001 fba1 	bl	8005958 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8004216:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800421a:	2100      	movs	r1, #0
 800421c:	4807      	ldr	r0, [pc, #28]	@ (800423c <Servo_Init+0x40>)
 800421e:	f009 fbec 	bl	800d9fa <memset>
    servoCount = 0;
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <Servo_Init+0x44>)
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8004228:	4b03      	ldr	r3, [pc, #12]	@ (8004238 <Servo_Init+0x3c>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e000      	b.n	8004232 <Servo_Init+0x36>
        return;
 8004230:	bf00      	nop
}
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	200009c9 	.word	0x200009c9
 800423c:	20000788 	.word	0x20000788
 8004240:	200009c8 	.word	0x200009c8

08004244 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle, float init_angle)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	6139      	str	r1, [r7, #16]
 800424e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004252:	edc7 0a02 	vstr	s1, [r7, #8]
 8004256:	ed87 1a01 	vstr	s2, [r7, #4]
 800425a:	75fb      	strb	r3, [r7, #23]
    // Check if initialized
    if (!isInitialized)
 800425c:	4b69      	ldr	r3, [pc, #420]	@ (8004404 <Servo_Register+0x1c0>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <Servo_Register+0x26>
        return -1;
 8004264:	f04f 33ff 	mov.w	r3, #4294967295
 8004268:	e0c7      	b.n	80043fa <Servo_Register+0x1b6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 800426a:	4b67      	ldr	r3, [pc, #412]	@ (8004408 <Servo_Register+0x1c4>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d902      	bls.n	8004278 <Servo_Register+0x34>
        return -1;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	e0c0      	b.n	80043fa <Servo_Register+0x1b6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d902      	bls.n	8004284 <Servo_Register+0x40>
        return -1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e0ba      	b.n	80043fa <Servo_Register+0x1b6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e01b      	b.n	80042c2 <Servo_Register+0x7e>
        if (servos[i].initialized && servos[i].channel == channel)
 800428a:	4960      	ldr	r1, [pc, #384]	@ (800440c <Servo_Register+0x1c8>)
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	3310      	adds	r3, #16
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <Servo_Register+0x78>
 80042a0:	495a      	ldr	r1, [pc, #360]	@ (800440c <Servo_Register+0x1c8>)
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	7dfa      	ldrb	r2, [r7, #23]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d102      	bne.n	80042bc <Servo_Register+0x78>
            return -1;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ba:	e09e      	b.n	80043fa <Servo_Register+0x1b6>
    for (int i = 0; i < servoCount; i++) {
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3301      	adds	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	4b51      	ldr	r3, [pc, #324]	@ (8004408 <Servo_Register+0x1c4>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	dbdd      	blt.n	800428a <Servo_Register+0x46>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 80042ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80042d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042da:	d502      	bpl.n	80042e2 <Servo_Register+0x9e>
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 80042e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80042e6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004410 <Servo_Register+0x1cc>
 80042ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f2:	dd01      	ble.n	80042f8 <Servo_Register+0xb4>
 80042f4:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <Servo_Register+0x1d0>)
 80042f6:	60bb      	str	r3, [r7, #8]
    if (minAngle >= maxAngle) return -1;
 80042f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80042fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	db02      	blt.n	8004310 <Servo_Register+0xcc>
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e074      	b.n	80043fa <Servo_Register+0x1b6>

    // Register the servo
    int servoId = servoCount;
 8004310:	4b3d      	ldr	r3, [pc, #244]	@ (8004408 <Servo_Register+0x1c4>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	61bb      	str	r3, [r7, #24]
    servos[servoId].channel = channel;
 8004316:	493d      	ldr	r1, [pc, #244]	@ (800440c <Servo_Register+0x1c8>)
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	7dfa      	ldrb	r2, [r7, #23]
 8004326:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8004328:	4938      	ldr	r1, [pc, #224]	@ (800440c <Servo_Register+0x1c8>)
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	3304      	adds	r3, #4
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 800433c:	4933      	ldr	r1, [pc, #204]	@ (800440c <Servo_Register+0x1c8>)
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3308      	adds	r3, #8
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	601a      	str	r2, [r3, #0]
    //servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
    servos[servoId].currentAngle = init_angle;
 8004350:	492e      	ldr	r1, [pc, #184]	@ (800440c <Servo_Register+0x1c8>)
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	330c      	adds	r3, #12
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
    servos[servoId].initialized = 1;
 8004364:	4929      	ldr	r1, [pc, #164]	@ (800440c <Servo_Register+0x1c8>)
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3310      	adds	r3, #16
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <Servo_Register+0x16c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	3310      	adds	r3, #16
 800438a:	4a20      	ldr	r2, [pc, #128]	@ (800440c <Servo_Register+0x1c8>)
 800438c:	4413      	add	r3, r2
 800438e:	3301      	adds	r3, #1
 8004390:	220f      	movs	r2, #15
 8004392:	6939      	ldr	r1, [r7, #16]
 8004394:	4618      	mov	r0, r3
 8004396:	f009 fb38 	bl	800da0a <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 800439a:	491c      	ldr	r1, [pc, #112]	@ (800440c <Servo_Register+0x1c8>)
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3320      	adds	r3, #32
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e00d      	b.n	80043cc <Servo_Register+0x188>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	3310      	adds	r3, #16
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <Servo_Register+0x1c8>)
 80043be:	4413      	add	r3, r2
 80043c0:	1c58      	adds	r0, r3, #1
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4a14      	ldr	r2, [pc, #80]	@ (8004418 <Servo_Register+0x1d4>)
 80043c6:	2110      	movs	r1, #16
 80043c8:	f009 fa7c 	bl	800d8c4 <sniprintf>
    }

    // Update servo count
    servoCount++;
 80043cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <Servo_Register+0x1c4>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <Servo_Register+0x1c4>)
 80043d6:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 80043d8:	490c      	ldr	r1, [pc, #48]	@ (800440c <Servo_Register+0x1c8>)
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	330c      	adds	r3, #12
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	eeb0 0a67 	vmov.f32	s0, s15
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 faf4 	bl	80059e0 <PCA9685_SetServoAngle>

    return servoId;
 80043f8:	69bb      	ldr	r3, [r7, #24]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200009c9 	.word	0x200009c9
 8004408:	200009c8 	.word	0x200009c8
 800440c:	20000788 	.word	0x20000788
 8004410:	43340000 	.word	0x43340000
 8004414:	43340000 	.word	0x43340000
 8004418:	0800fdb8 	.word	0x0800fdb8

0800441c <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	db10      	blt.n	8004450 <Servo_SetAngle+0x34>
 800442e:	4b33      	ldr	r3, [pc, #204]	@ (80044fc <Servo_SetAngle+0xe0>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4293      	cmp	r3, r2
 8004438:	da0a      	bge.n	8004450 <Servo_SetAngle+0x34>
 800443a:	4931      	ldr	r1, [pc, #196]	@ (8004500 <Servo_SetAngle+0xe4>)
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	3310      	adds	r3, #16
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <Servo_SetAngle+0x3a>
        return -1;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	e04d      	b.n	80044f2 <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8004456:	492a      	ldr	r1, [pc, #168]	@ (8004500 <Servo_SetAngle+0xe4>)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3304      	adds	r3, #4
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	ed97 7a00 	vldr	s14, [r7]
 800446e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004476:	d509      	bpl.n	800448c <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8004478:	4921      	ldr	r1, [pc, #132]	@ (8004500 <Servo_SetAngle+0xe4>)
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3304      	adds	r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 800448c:	491c      	ldr	r1, [pc, #112]	@ (8004500 <Servo_SetAngle+0xe4>)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3308      	adds	r3, #8
 800449c:	edd3 7a00 	vldr	s15, [r3]
 80044a0:	ed97 7a00 	vldr	s14, [r7]
 80044a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ac:	dd09      	ble.n	80044c2 <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 80044ae:	4914      	ldr	r1, [pc, #80]	@ (8004500 <Servo_SetAngle+0xe4>)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3308      	adds	r3, #8
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 80044c2:	490f      	ldr	r1, [pc, #60]	@ (8004500 <Servo_SetAngle+0xe4>)
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	330c      	adds	r3, #12
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 80044d6:	490a      	ldr	r1, [pc, #40]	@ (8004500 <Servo_SetAngle+0xe4>)
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	ed97 0a00 	vldr	s0, [r7]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fa78 	bl	80059e0 <PCA9685_SetServoAngle>

    return 0;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200009c8 	.word	0x200009c8
 8004500:	20000788 	.word	0x20000788

08004504 <Servo_GetAngle>:
  * @brief  Get current angle of a servo
  * @param  servoId: ID returned from Servo_Register
  * @retval float: Current angle in degrees or -1.0f if error
  */
float Servo_GetAngle(int servoId)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	db10      	blt.n	8004534 <Servo_GetAngle+0x30>
 8004512:	4b12      	ldr	r3, [pc, #72]	@ (800455c <Servo_GetAngle+0x58>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4293      	cmp	r3, r2
 800451c:	da0a      	bge.n	8004534 <Servo_GetAngle+0x30>
 800451e:	4910      	ldr	r1, [pc, #64]	@ (8004560 <Servo_GetAngle+0x5c>)
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	3310      	adds	r3, #16
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <Servo_GetAngle+0x34>
        return -1.0f;
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <Servo_GetAngle+0x60>)
 8004536:	e008      	b.n	800454a <Servo_GetAngle+0x46>

    return servos[servoId].currentAngle;
 8004538:	4909      	ldr	r1, [pc, #36]	@ (8004560 <Servo_GetAngle+0x5c>)
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	330c      	adds	r3, #12
 8004548:	681b      	ldr	r3, [r3, #0]
}
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eeb0 0a67 	vmov.f32	s0, s15
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	200009c8 	.word	0x200009c8
 8004560:	20000788 	.word	0x20000788
 8004564:	bf800000 	.word	0xbf800000

08004568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	4a0f      	ldr	r2, [pc, #60]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800457c:	6453      	str	r3, [r2, #68]	@ 0x44
 800457e:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	4a08      	ldr	r2, [pc, #32]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	@ 0x40
 800459a:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <HAL_MspInit+0x4c>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045a6:	2007      	movs	r0, #7
 80045a8:	f002 fbd2 	bl	8006d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40023800 	.word	0x40023800

080045b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	@ 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a17      	ldr	r2, [pc, #92]	@ (8004634 <HAL_ADC_MspInit+0x7c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d127      	bne.n	800462a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	4b16      	ldr	r3, [pc, #88]	@ (8004638 <HAL_ADC_MspInit+0x80>)
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <HAL_ADC_MspInit+0x80>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ea:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <HAL_ADC_MspInit+0x80>)
 80045ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004638 <HAL_ADC_MspInit+0x80>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004638 <HAL_ADC_MspInit+0x80>)
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6313      	str	r3, [r2, #48]	@ 0x30
 8004606:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <HAL_ADC_MspInit+0x80>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004616:	2303      	movs	r3, #3
 8004618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 800461e:	f107 0314 	add.w	r3, r7, #20
 8004622:	4619      	mov	r1, r3
 8004624:	4805      	ldr	r0, [pc, #20]	@ (800463c <HAL_ADC_MspInit+0x84>)
 8004626:	f002 ff51 	bl	80074cc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800462a:	bf00      	nop
 800462c:	3728      	adds	r7, #40	@ 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40012000 	.word	0x40012000
 8004638:	40023800 	.word	0x40023800
 800463c:	40020800 	.word	0x40020800

08004640 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	@ 0x30
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004648:	f107 031c 	add.w	r3, r7, #28
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a42      	ldr	r2, [pc, #264]	@ (8004768 <HAL_I2C_MspInit+0x128>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d12c      	bne.n	80046bc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	4b41      	ldr	r3, [pc, #260]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	4a40      	ldr	r2, [pc, #256]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	6313      	str	r3, [r2, #48]	@ 0x30
 8004672:	4b3e      	ldr	r3, [pc, #248]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800467e:	23c0      	movs	r3, #192	@ 0xc0
 8004680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004682:	2312      	movs	r3, #18
 8004684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004686:	2300      	movs	r3, #0
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800468a:	2303      	movs	r3, #3
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800468e:	2304      	movs	r3, #4
 8004690:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004692:	f107 031c 	add.w	r3, r7, #28
 8004696:	4619      	mov	r1, r3
 8004698:	4835      	ldr	r0, [pc, #212]	@ (8004770 <HAL_I2C_MspInit+0x130>)
 800469a:	f002 ff17 	bl	80074cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	4b32      	ldr	r3, [pc, #200]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	4a31      	ldr	r2, [pc, #196]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ae:	4b2f      	ldr	r3, [pc, #188]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80046ba:	e050      	b.n	800475e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004774 <HAL_I2C_MspInit+0x134>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d14b      	bne.n	800475e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	4b28      	ldr	r3, [pc, #160]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	4a27      	ldr	r2, [pc, #156]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046d6:	4b25      	ldr	r3, [pc, #148]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b21      	ldr	r3, [pc, #132]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	4a20      	ldr	r2, [pc, #128]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046f2:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004704:	2312      	movs	r3, #18
 8004706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470c:	2303      	movs	r3, #3
 800470e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004710:	2304      	movs	r3, #4
 8004712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004714:	f107 031c 	add.w	r3, r7, #28
 8004718:	4619      	mov	r1, r3
 800471a:	4815      	ldr	r0, [pc, #84]	@ (8004770 <HAL_I2C_MspInit+0x130>)
 800471c:	f002 fed6 	bl	80074cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004726:	2312      	movs	r3, #18
 8004728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	2300      	movs	r3, #0
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472e:	2303      	movs	r3, #3
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004732:	2304      	movs	r3, #4
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004736:	f107 031c 	add.w	r3, r7, #28
 800473a:	4619      	mov	r1, r3
 800473c:	480e      	ldr	r0, [pc, #56]	@ (8004778 <HAL_I2C_MspInit+0x138>)
 800473e:	f002 fec5 	bl	80074cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	4b09      	ldr	r3, [pc, #36]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	4a08      	ldr	r2, [pc, #32]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 800474c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004750:	6413      	str	r3, [r2, #64]	@ 0x40
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <HAL_I2C_MspInit+0x12c>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
}
 800475e:	bf00      	nop
 8004760:	3730      	adds	r7, #48	@ 0x30
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40005400 	.word	0x40005400
 800476c:	40023800 	.word	0x40023800
 8004770:	40020400 	.word	0x40020400
 8004774:	40005800 	.word	0x40005800
 8004778:	40020800 	.word	0x40020800

0800477c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	@ 0x30
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	f107 031c 	add.w	r3, r7, #28
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a32      	ldr	r2, [pc, #200]	@ (8004864 <HAL_TIM_Encoder_MspInit+0xe8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d12d      	bne.n	80047fa <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a6:	4a30      	ldr	r2, [pc, #192]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	4b2a      	ldr	r3, [pc, #168]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ca:	4b27      	ldr	r3, [pc, #156]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 80047d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80047da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047dc:	2302      	movs	r3, #2
 80047de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ec:	f107 031c 	add.w	r3, r7, #28
 80047f0:	4619      	mov	r1, r3
 80047f2:	481e      	ldr	r0, [pc, #120]	@ (800486c <HAL_TIM_Encoder_MspInit+0xf0>)
 80047f4:	f002 fe6a 	bl	80074cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80047f8:	e030      	b.n	800485c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004802:	d12b      	bne.n	800485c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	4b17      	ldr	r3, [pc, #92]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	4a16      	ldr	r2, [pc, #88]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6413      	str	r3, [r2, #64]	@ 0x40
 8004814:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	4a0f      	ldr	r2, [pc, #60]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004830:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <HAL_TIM_Encoder_MspInit+0xec>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 800483c:	2303      	movs	r3, #3
 800483e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	2302      	movs	r3, #2
 8004842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004848:	2300      	movs	r3, #0
 800484a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800484c:	2301      	movs	r3, #1
 800484e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004850:	f107 031c 	add.w	r3, r7, #28
 8004854:	4619      	mov	r1, r3
 8004856:	4805      	ldr	r0, [pc, #20]	@ (800486c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004858:	f002 fe38 	bl	80074cc <HAL_GPIO_Init>
}
 800485c:	bf00      	nop
 800485e:	3730      	adds	r7, #48	@ 0x30
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40010000 	.word	0x40010000
 8004868:	40023800 	.word	0x40023800
 800486c:	40020000 	.word	0x40020000

08004870 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a0b      	ldr	r2, [pc, #44]	@ (80048ac <HAL_TIM_PWM_MspInit+0x3c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10d      	bne.n	800489e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <HAL_TIM_PWM_MspInit+0x40>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	4a09      	ldr	r2, [pc, #36]	@ (80048b0 <HAL_TIM_PWM_MspInit+0x40>)
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	6413      	str	r3, [r2, #64]	@ 0x40
 8004892:	4b07      	ldr	r3, [pc, #28]	@ (80048b0 <HAL_TIM_PWM_MspInit+0x40>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40023800 	.word	0x40023800

080048b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	@ 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a21      	ldr	r2, [pc, #132]	@ (8004958 <HAL_TIM_MspPostInit+0xa4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d13b      	bne.n	800494e <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_TIM_MspPostInit+0xa8>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	4a1f      	ldr	r2, [pc, #124]	@ (800495c <HAL_TIM_MspPostInit+0xa8>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048e6:	4b1d      	ldr	r3, [pc, #116]	@ (800495c <HAL_TIM_MspPostInit+0xa8>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	4b19      	ldr	r3, [pc, #100]	@ (800495c <HAL_TIM_MspPostInit+0xa8>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	4a18      	ldr	r2, [pc, #96]	@ (800495c <HAL_TIM_MspPostInit+0xa8>)
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	6313      	str	r3, [r2, #48]	@ 0x30
 8004902:	4b16      	ldr	r3, [pc, #88]	@ (800495c <HAL_TIM_MspPostInit+0xa8>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800490e:	23c0      	movs	r3, #192	@ 0xc0
 8004910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004912:	2302      	movs	r3, #2
 8004914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491a:	2300      	movs	r3, #0
 800491c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800491e:	2302      	movs	r3, #2
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	4619      	mov	r1, r3
 8004928:	480d      	ldr	r0, [pc, #52]	@ (8004960 <HAL_TIM_MspPostInit+0xac>)
 800492a:	f002 fdcf 	bl	80074cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800492e:	2303      	movs	r3, #3
 8004930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004932:	2302      	movs	r3, #2
 8004934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493a:	2300      	movs	r3, #0
 800493c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800493e:	2302      	movs	r3, #2
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004942:	f107 0314 	add.w	r3, r7, #20
 8004946:	4619      	mov	r1, r3
 8004948:	4806      	ldr	r0, [pc, #24]	@ (8004964 <HAL_TIM_MspPostInit+0xb0>)
 800494a:	f002 fdbf 	bl	80074cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800494e:	bf00      	nop
 8004950:	3728      	adds	r7, #40	@ 0x28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40000400 	.word	0x40000400
 800495c:	40023800 	.word	0x40023800
 8004960:	40020000 	.word	0x40020000
 8004964:	40020400 	.word	0x40020400

08004968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	@ 0x38
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a66      	ldr	r2, [pc, #408]	@ (8004b20 <HAL_UART_MspInit+0x1b8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d12c      	bne.n	80049e4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	623b      	str	r3, [r7, #32]
 800498e:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	4a64      	ldr	r2, [pc, #400]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004998:	6413      	str	r3, [r2, #64]	@ 0x40
 800499a:	4b62      	ldr	r3, [pc, #392]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	4a5d      	ldr	r2, [pc, #372]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049c2:	230c      	movs	r3, #12
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c6:	2302      	movs	r3, #2
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ce:	2303      	movs	r3, #3
 80049d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d2:	2307      	movs	r3, #7
 80049d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049da:	4619      	mov	r1, r3
 80049dc:	4852      	ldr	r0, [pc, #328]	@ (8004b28 <HAL_UART_MspInit+0x1c0>)
 80049de:	f002 fd75 	bl	80074cc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80049e2:	e099      	b.n	8004b18 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a50      	ldr	r2, [pc, #320]	@ (8004b2c <HAL_UART_MspInit+0x1c4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d12d      	bne.n	8004a4a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	4a4b      	ldr	r2, [pc, #300]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fe:	4b49      	ldr	r3, [pc, #292]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	4b45      	ldr	r3, [pc, #276]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	4a44      	ldr	r2, [pc, #272]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a1a:	4b42      	ldr	r3, [pc, #264]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8004a26:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a34:	2303      	movs	r3, #3
 8004a36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a38:	2307      	movs	r3, #7
 8004a3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a40:	4619      	mov	r1, r3
 8004a42:	483b      	ldr	r0, [pc, #236]	@ (8004b30 <HAL_UART_MspInit+0x1c8>)
 8004a44:	f002 fd42 	bl	80074cc <HAL_GPIO_Init>
}
 8004a48:	e066      	b.n	8004b18 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a39      	ldr	r2, [pc, #228]	@ (8004b34 <HAL_UART_MspInit+0x1cc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d161      	bne.n	8004b18 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004a54:	2300      	movs	r3, #0
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	4b32      	ldr	r3, [pc, #200]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5c:	4a31      	ldr	r2, [pc, #196]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a5e:	f043 0320 	orr.w	r3, r3, #32
 8004a62:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a64:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	4b2b      	ldr	r3, [pc, #172]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a78:	4a2a      	ldr	r2, [pc, #168]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a7a:	f043 0304 	orr.w	r3, r3, #4
 8004a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a80:	4b28      	ldr	r3, [pc, #160]	@ (8004b24 <HAL_UART_MspInit+0x1bc>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a8c:	23c0      	movs	r3, #192	@ 0xc0
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4822      	ldr	r0, [pc, #136]	@ (8004b30 <HAL_UART_MspInit+0x1c8>)
 8004aa8:	f002 fd10 	bl	80074cc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004aac:	4b22      	ldr	r3, [pc, #136]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004aae:	4a23      	ldr	r2, [pc, #140]	@ (8004b3c <HAL_UART_MspInit+0x1d4>)
 8004ab0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004ab2:	4b21      	ldr	r3, [pc, #132]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004ab4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004ab8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aba:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004ac8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004acc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ace:	4b1a      	ldr	r3, [pc, #104]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad4:	4b18      	ldr	r3, [pc, #96]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004ada:	4b17      	ldr	r3, [pc, #92]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ae0:	4b15      	ldr	r3, [pc, #84]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ae6:	4b14      	ldr	r3, [pc, #80]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004aec:	4812      	ldr	r0, [pc, #72]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004aee:	f002 f971 	bl	8006dd4 <HAL_DMA_Init>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_MspInit+0x194>
      Error_Handler();
 8004af8:	f7fd fdee 	bl	80026d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0e      	ldr	r2, [pc, #56]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004b00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b02:	4a0d      	ldr	r2, [pc, #52]	@ (8004b38 <HAL_UART_MspInit+0x1d0>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2047      	movs	r0, #71	@ 0x47
 8004b0e:	f002 f92a 	bl	8006d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004b12:	2047      	movs	r0, #71	@ 0x47
 8004b14:	f002 f943 	bl	8006d9e <HAL_NVIC_EnableIRQ>
}
 8004b18:	bf00      	nop
 8004b1a:	3738      	adds	r7, #56	@ 0x38
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40004400 	.word	0x40004400
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	40004800 	.word	0x40004800
 8004b30:	40020800 	.word	0x40020800
 8004b34:	40011400 	.word	0x40011400
 8004b38:	2000059c 	.word	0x2000059c
 8004b3c:	40026428 	.word	0x40026428

08004b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <NMI_Handler+0x4>

08004b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <HardFault_Handler+0x4>

08004b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b54:	bf00      	nop
 8004b56:	e7fd      	b.n	8004b54 <MemManage_Handler+0x4>

08004b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <BusFault_Handler+0x4>

08004b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b64:	bf00      	nop
 8004b66:	e7fd      	b.n	8004b64 <UsageFault_Handler+0x4>

08004b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b98:	f001 fbb6 	bl	8006308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <SysTick_Handler+0x3c>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <SysTick_Handler+0x3c>)
 8004ba8:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8004baa:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <SysTick_Handler+0x40>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 8004bb4:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <SysTick_Handler+0x3c>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b13      	cmp	r3, #19
 8004bbc:	d904      	bls.n	8004bc8 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <SysTick_Handler+0x3c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 8004bc4:	f000 f908 	bl	8004dd8 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8004bc8:	f000 f93e 	bl	8004e48 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004bcc:	bf00      	nop
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	200009ca 	.word	0x200009ca
 8004bd4:	200005fc 	.word	0x200005fc

08004bd8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004bdc:	2008      	movs	r0, #8
 8004bde:	f002 fe23 	bl	8007828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004bea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004bee:	f002 fe1b 	bl	8007828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004bf2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004bf6:	f002 fe17 	bl	8007828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004c04:	4802      	ldr	r0, [pc, #8]	@ (8004c10 <DMA2_Stream1_IRQHandler+0x10>)
 8004c06:	f002 fa25 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000059c 	.word	0x2000059c

08004c14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_IRQn 0 */
  //HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */


	HAL_UART_IRQHandler(&huart6);
 8004c18:	4802      	ldr	r0, [pc, #8]	@ (8004c24 <USART6_IRQHandler+0x10>)
 8004c1a:	f006 f90f 	bl	800ae3c <HAL_UART_IRQHandler>


  /* USER CODE END USART6_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000554 	.word	0x20000554

08004c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return 1;
 8004c2c:	2301      	movs	r3, #1
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_kill>:

int _kill(int pid, int sig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c42:	f008 ff3f 	bl	800dac4 <__errno>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2216      	movs	r2, #22
 8004c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8004c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <_exit>:

void _exit (int status)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c60:	f04f 31ff 	mov.w	r1, #4294967295
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ffe7 	bl	8004c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <_exit+0x12>

08004c6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b086      	sub	sp, #24
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e00a      	b.n	8004c96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c80:	f3af 8000 	nop.w
 8004c84:	4601      	mov	r1, r0
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	60ba      	str	r2, [r7, #8]
 8004c8c:	b2ca      	uxtb	r2, r1
 8004c8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3301      	adds	r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	dbf0      	blt.n	8004c80 <_read+0x12>
  }

  return len;
 8004c9e:	687b      	ldr	r3, [r7, #4]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e009      	b.n	8004cce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	60ba      	str	r2, [r7, #8]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	dbf1      	blt.n	8004cba <_write+0x12>
  }
  return len;
 8004cd6:	687b      	ldr	r3, [r7, #4]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_close>:

int _close(int file)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d08:	605a      	str	r2, [r3, #4]
  return 0;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <_isatty>:

int _isatty(int file)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d20:	2301      	movs	r3, #1
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d50:	4a14      	ldr	r2, [pc, #80]	@ (8004da4 <_sbrk+0x5c>)
 8004d52:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <_sbrk+0x60>)
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d5c:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <_sbrk+0x64>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d64:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <_sbrk+0x64>)
 8004d66:	4a12      	ldr	r2, [pc, #72]	@ (8004db0 <_sbrk+0x68>)
 8004d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <_sbrk+0x64>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d207      	bcs.n	8004d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d78:	f008 fea4 	bl	800dac4 <__errno>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	220c      	movs	r2, #12
 8004d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	e009      	b.n	8004d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d88:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <_sbrk+0x64>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d8e:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <_sbrk+0x64>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	4a05      	ldr	r2, [pc, #20]	@ (8004dac <_sbrk+0x64>)
 8004d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20020000 	.word	0x20020000
 8004da8:	00000400 	.word	0x00000400
 8004dac:	200009cc 	.word	0x200009cc
 8004db0:	20000f50 	.word	0x20000f50

08004db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004db8:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <SystemInit+0x20>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbe:	4a05      	ldr	r2, [pc, #20]	@ (8004dd4 <SystemInit+0x20>)
 8004dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	ed2d 8b02 	vpush	{d8}
 8004dde:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 8004de0:	f7fc fef6 	bl	8001bd0 <update_Encoder_Data>
		Motion_Update(&motion);
 8004de4:	4810      	ldr	r0, [pc, #64]	@ (8004e28 <SysTickFunction+0x50>)
 8004de6:	f7fd fd5b 	bl	80028a0 <Motion_Update>
		Sensors_Update();
 8004dea:	f7ff f8a3 	bl	8003f34 <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 8004dee:	480e      	ldr	r0, [pc, #56]	@ (8004e28 <SysTickFunction+0x50>)
 8004df0:	f7fd fcdd 	bl	80027ae <Motion_Velocity>
 8004df4:	eeb0 8a40 	vmov.f32	s16, s0
 8004df8:	480b      	ldr	r0, [pc, #44]	@ (8004e28 <SysTickFunction+0x50>)
 8004dfa:	f7fd fce8 	bl	80027ce <Motion_Omega>
 8004dfe:	eef0 8a40 	vmov.f32	s17, s0
 8004e02:	f7fe ffdd 	bl	8003dc0 <get_steering_feedback>
 8004e06:	eef0 7a40 	vmov.f32	s15, s0
 8004e0a:	eeb0 1a67 	vmov.f32	s2, s15
 8004e0e:	eef0 0a68 	vmov.f32	s1, s17
 8004e12:	eeb0 0a48 	vmov.f32	s0, s16
 8004e16:	4805      	ldr	r0, [pc, #20]	@ (8004e2c <SysTickFunction+0x54>)
 8004e18:	f7fc fc7e 	bl	8001718 <UpdateControllers>
		//UART_Transmit_Int(&huart3, "L", linecolorRPI);
		//UART_Transmit_Int(&huart3, "B", ballcolorRPI);



}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	ecbd 8b02 	vpop	{d8}
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	2000062c 	.word	0x2000062c
 8004e2c:	200006e0 	.word	0x200006e0

08004e30 <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 8004e34:	4b03      	ldr	r3, [pc, #12]	@ (8004e44 <EnableSysTickFunction+0x14>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 8004e3a:	200a      	movs	r0, #10
 8004e3c:	f001 fa84 	bl	8006348 <HAL_Delay>
}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200005fc 	.word	0x200005fc

08004e48 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8004e4e:	f7fc fe65 	bl	8001b1c <getRightEncoderCounts>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	f647 1318 	movw	r3, #31000	@ 0x7918
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	dc15      	bgt.n	8004e8a <CheckEncoderCounts+0x42>
 8004e5e:	f7fc fe69 	bl	8001b34 <getLeftEncoderCounts>
 8004e62:	4603      	mov	r3, r0
 8004e64:	461a      	mov	r2, r3
 8004e66:	f647 1318 	movw	r3, #31000	@ 0x7918
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	dc0d      	bgt.n	8004e8a <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8004e6e:	f7fc fe55 	bl	8001b1c <getRightEncoderCounts>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <CheckEncoderCounts+0x6c>)
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	db06      	blt.n	8004e8a <CheckEncoderCounts+0x42>
 8004e7c:	f7fc fe5a 	bl	8001b34 <getLeftEncoderCounts>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <CheckEncoderCounts+0x6c>)
 8004e86:	429a      	cmp	r2, r3
 8004e88:	da10      	bge.n	8004eac <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8004e8a:	f7fc fe47 	bl	8001b1c <getRightEncoderCounts>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	b29c      	uxth	r4, r3
 8004e92:	f7fc fe4f 	bl	8001b34 <getLeftEncoderCounts>
 8004e96:	4603      	mov	r3, r0
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ae3      	subs	r3, r4, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 8004ea0:	f7fc fe84 	bl	8001bac <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8004ea4:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <CheckEncoderCounts+0x70>)
 8004ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eaa:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd90      	pop	{r4, r7, pc}
 8004eb4:	ffff86e8 	.word	0xffff86e8
 8004eb8:	40010000 	.word	0x40010000

08004ebc <NonBlockingDelay>:
Color goodpotato = RED;


// Start a non-blocking delay (delay in milliseconds)
void NonBlockingDelay(uint32_t delay_ms)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
    delay_end_time = HAL_GetTick() + delay_ms;  // Set the target time
 8004ec4:	f001 fa34 	bl	8006330 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	4a03      	ldr	r2, [pc, #12]	@ (8004edc <NonBlockingDelay+0x20>)
 8004ed0:	6013      	str	r3, [r2, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200009d0 	.word	0x200009d0

08004ee0 <IsDelayComplete>:

// Check if the delay is complete
uint8_t IsDelayComplete(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
    return (HAL_GetTick() >= delay_end_time);  // Return true if the current time has passed the target time
 8004ee4:	f001 fa24 	bl	8006330 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b04      	ldr	r3, [pc, #16]	@ (8004efc <IsDelayComplete+0x1c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	bf2c      	ite	cs
 8004ef2:	2301      	movcs	r3, #1
 8004ef4:	2300      	movcc	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	200009d0 	.word	0x200009d0

08004f00 <executePlantationTask>:

Color ballcolor;

int potato_row[5] = {-1, -1, -1, -1, -1};

void executePlantationTask(void) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	//StartLineColorDetection();
	Buzzer_Toggle(100);
 8004f06:	2064      	movs	r0, #100	@ 0x64
 8004f08:	f000 fb32 	bl	8005570 <Buzzer_Toggle>
	HAL_Delay(2000);
 8004f0c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004f10:	f001 fa1a 	bl	8006348 <HAL_Delay>
	Buzzer_Toggle(300);
 8004f14:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004f18:	f000 fb2a 	bl	8005570 <Buzzer_Toggle>
	Robot_MoveForwardUntillLine();
 8004f1c:	f7fe fbc0 	bl	80036a0 <Robot_MoveForwardUntillLine>
	Robot_TurnLeft90Inplace();
 8004f20:	f7fe fd56 	bl	80039d0 <Robot_TurnLeft90Inplace>
	moveToCenterofNextCell();
 8004f24:	f000 f87c 	bl	8005020 <moveToCenterofNextCell>

	//Start the task
	for(uint8_t row = 0; row < 3; row ++){
 8004f28:	2300      	movs	r3, #0
 8004f2a:	71fb      	strb	r3, [r7, #7]
 8004f2c:	e046      	b.n	8004fbc <executePlantationTask+0xbc>
		for(uint8_t column = 0; column < 5; column ++){
 8004f2e:	2300      	movs	r3, #0
 8004f30:	71bb      	strb	r3, [r7, #6]
 8004f32:	e03d      	b.n	8004fb0 <executePlantationTask+0xb0>


			if(potato_row[column] == -1){
 8004f34:	79bb      	ldrb	r3, [r7, #6]
 8004f36:	4a28      	ldr	r2, [pc, #160]	@ (8004fd8 <executePlantationTask+0xd8>)
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d11c      	bne.n	8004f7c <executePlantationTask+0x7c>
				linecolor = GetLineColor(column, row);
 8004f42:	79fa      	ldrb	r2, [r7, #7]
 8004f44:	79bb      	ldrb	r3, [r7, #6]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe fa53 	bl	80033f4 <GetLineColor>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461a      	mov	r2, r3
 8004f52:	4b22      	ldr	r3, [pc, #136]	@ (8004fdc <executePlantationTask+0xdc>)
 8004f54:	701a      	strb	r2, [r3, #0]

				if(linecolor == GREEN){
 8004f56:	4b21      	ldr	r3, [pc, #132]	@ (8004fdc <executePlantationTask+0xdc>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10e      	bne.n	8004f7c <executePlantationTask+0x7c>
					potato_row[column] = row;
 8004f5e:	79bb      	ldrb	r3, [r7, #6]
 8004f60:	79fa      	ldrb	r2, [r7, #7]
 8004f62:	491d      	ldr	r1, [pc, #116]	@ (8004fd8 <executePlantationTask+0xd8>)
 8004f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

					//Dummy function
					ballcolor = picktheBall(column, row);
 8004f68:	79fa      	ldrb	r2, [r7, #7]
 8004f6a:	79bb      	ldrb	r3, [r7, #6]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f896 	bl	80050a0 <picktheBall>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b19      	ldr	r3, [pc, #100]	@ (8004fe0 <executePlantationTask+0xe0>)
 8004f7a:	701a      	strb	r2, [r3, #0]

					//Todo: store the ball based on color
				}
			}
			if(column != 4){
 8004f7c:	79bb      	ldrb	r3, [r7, #6]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d002      	beq.n	8004f88 <executePlantationTask+0x88>
				moveToCenterofNextCell();
 8004f82:	f000 f84d 	bl	8005020 <moveToCenterofNextCell>
 8004f86:	e010      	b.n	8004faa <executePlantationTask+0xaa>
			}
			else{
				Robot_MoveReverseGivenDistance(65);
 8004f88:	2041      	movs	r0, #65	@ 0x41
 8004f8a:	f7fe fc63 	bl	8003854 <Robot_MoveReverseGivenDistance>
				robot_TurnRight180Inplace();
 8004f8e:	f7fe fcc1 	bl	8003914 <robot_TurnRight180Inplace>

				if(row == 2){
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d106      	bne.n	8004fa6 <executePlantationTask+0xa6>
					Robot_LineFollowUntillJunction();
 8004f98:	f7fe fa8e 	bl	80034b8 <Robot_LineFollowUntillJunction>
					Robot_TurnRight90Inplace();
 8004f9c:	f7fe fc8e 	bl	80038bc <Robot_TurnRight90Inplace>
					moveToCenterofNextColumnfromSecondRow();
 8004fa0:	f000 f876 	bl	8005090 <moveToCenterofNextColumnfromSecondRow>
					break;
 8004fa4:	e007      	b.n	8004fb6 <executePlantationTask+0xb6>
				}
				moveTocolumn0Fromcolumn4();
 8004fa6:	f000 f81d 	bl	8004fe4 <moveTocolumn0Fromcolumn4>
		for(uint8_t column = 0; column < 5; column ++){
 8004faa:	79bb      	ldrb	r3, [r7, #6]
 8004fac:	3301      	adds	r3, #1
 8004fae:	71bb      	strb	r3, [r7, #6]
 8004fb0:	79bb      	ldrb	r3, [r7, #6]
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d9be      	bls.n	8004f34 <executePlantationTask+0x34>
	for(uint8_t row = 0; row < 3; row ++){
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	71fb      	strb	r3, [r7, #7]
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d9b5      	bls.n	8004f2e <executePlantationTask+0x2e>
			}
		}
	}

	Robot_LineFollowUntillJunctionAndNotStop();
 8004fc2:	f7fe fabf 	bl	8003544 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_MoveForwardGivenDistance(145);
 8004fc6:	2091      	movs	r0, #145	@ 0x91
 8004fc8:	f7fe fbac 	bl	8003724 <Robot_MoveForwardGivenDistance>
	Robot_TurnRight90Inplace();
 8004fcc:	f7fe fc76 	bl	80038bc <Robot_TurnRight90Inplace>
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	2000006c 	.word	0x2000006c
 8004fdc:	200009d4 	.word	0x200009d4
 8004fe0:	200009d5 	.word	0x200009d5

08004fe4 <moveTocolumn0Fromcolumn4>:


void moveTocolumn0Fromcolumn4(){
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
	moveToCenterofNextCellandNotStop();
 8004fe8:	f000 f828 	bl	800503c <moveToCenterofNextCellandNotStop>
	moveToCenterofNextCell();
 8004fec:	f000 f818 	bl	8005020 <moveToCenterofNextCell>
	moveToCenterofNextCellandNotStop();
 8004ff0:	f000 f824 	bl	800503c <moveToCenterofNextCellandNotStop>
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 8004ff4:	f000 f822 	bl	800503c <moveToCenterofNextCellandNotStop>

	//Robot_LineFollowUntillJunction();
	//moveToCenterofNextCell();
	Robot_LineFollowUntillJunctionAndNotStop();
 8004ff8:	f7fe faa4 	bl	8003544 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL - 35);
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <moveTocolumn0Fromcolumn4+0x38>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3b23      	subs	r3, #35	@ 0x23
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe fae2 	bl	80035cc <Robot_FollowLineGivenDistance>


	Robot_TurnLeft90Inplace();
 8005008:	f7fe fce2 	bl	80039d0 <Robot_TurnLeft90Inplace>
	//Robot_LineFollowUntillJunction();
	Robot_MoveForwardUntillLine();
 800500c:	f7fe fb48 	bl	80036a0 <Robot_MoveForwardUntillLine>
	Robot_TurnLeft90Inplace();
 8005010:	f7fe fcde 	bl	80039d0 <Robot_TurnLeft90Inplace>
	//Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
	moveToCenterofNextCell();
 8005014:	f000 f804 	bl	8005020 <moveToCenterofNextCell>

}
 8005018:	bf00      	nop
 800501a:	bd80      	pop	{r7, pc}
 800501c:	080100f8 	.word	0x080100f8

08005020 <moveToCenterofNextCell>:

void moveToCenterofNextCell(){
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 8005024:	f7fe fa8e 	bl	8003544 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
 8005028:	4b03      	ldr	r3, [pc, #12]	@ (8005038 <moveToCenterofNextCell+0x18>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe facd 	bl	80035cc <Robot_FollowLineGivenDistance>
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	080100f8 	.word	0x080100f8

0800503c <moveToCenterofNextCellandNotStop>:

void moveToCenterofNextCellandNotStop(){
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 8005040:	f7fe fa80 	bl	8003544 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistanceandNotStop(DISTACE_TO_CENTER_OF_CELL);
 8005044:	4b03      	ldr	r3, [pc, #12]	@ (8005054 <moveToCenterofNextCellandNotStop+0x18>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe faf5 	bl	8003638 <Robot_FollowLineGivenDistanceandNotStop>
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	080100f8 	.word	0x080100f8

08005058 <moveToCenterofCellinZeroRow>:

void moveToCenterofCellinZeroRow(){
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunction();
 800505c:	f7fe fa2c 	bl	80034b8 <Robot_LineFollowUntillJunction>
	Robot_TurnRight90Inplace();
 8005060:	f7fe fc2c 	bl	80038bc <Robot_TurnRight90Inplace>
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <moveToCenterofCellinZeroRow+0x24>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe faaf 	bl	80035cc <Robot_FollowLineGivenDistance>
	HAL_Delay(MOTION_DELAY);
 800506e:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <moveToCenterofCellinZeroRow+0x28>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f001 f968 	bl	8006348 <HAL_Delay>
}
 8005078:	bf00      	nop
 800507a:	bd80      	pop	{r7, pc}
 800507c:	080100f8 	.word	0x080100f8
 8005080:	080100f4 	.word	0x080100f4

08005084 <moveToCenterofNextColumnfromFirstRow>:

void moveToCenterofNextColumnfromFirstRow(){
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
	moveToCenterofCellinZeroRow();
 8005088:	f7ff ffe6 	bl	8005058 <moveToCenterofCellinZeroRow>
}
 800508c:	bf00      	nop
 800508e:	bd80      	pop	{r7, pc}

08005090 <moveToCenterofNextColumnfromSecondRow>:

void moveToCenterofNextColumnfromSecondRow(){
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 8005094:	f7ff ffd2 	bl	800503c <moveToCenterofNextCellandNotStop>
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromFirstRow();
 8005098:	f7ff fff4 	bl	8005084 <moveToCenterofNextColumnfromFirstRow>
}
 800509c:	bf00      	nop
 800509e:	bd80      	pop	{r7, pc}

080050a0 <picktheBall>:
	moveToCenterofNextCellandNotStop();
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromSecondRow();
}

Color picktheBall(uint8_t column, uint8_t row){
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	460a      	mov	r2, r1
 80050aa:	71fb      	strb	r3, [r7, #7]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71bb      	strb	r3, [r7, #6]


	Robot_TurnRight90Inplace();
 80050b0:	f7fe fc04 	bl	80038bc <Robot_TurnRight90Inplace>


//	//ToDo: Get ball color
//	ballcolor = GetBallColor(column, row);

	pickup_and_Store();
 80050b4:	f7fc f8b8 	bl	8001228 <pickup_and_Store>
	//ToDo: Pick The ball

	//retrive_and_drop();


	Buzzer_Toggle(100);
 80050b8:	2064      	movs	r0, #100	@ 0x64
 80050ba:	f000 fa59 	bl	8005570 <Buzzer_Toggle>

	Robot_TurnLeft90Inplace();
 80050be:	f7fe fc87 	bl	80039d0 <Robot_TurnLeft90Inplace>



	//Robot_TurnLeft90Inplace();

	return ballcolor;
 80050c2:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <picktheBall+0x30>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200009d5 	.word	0x200009d5

080050d4 <executeMuddyRoadTask>:


//================================================================================================

//---------Start 0f Muddy Road Task (Navigate through random walls)--------------------
void executeMuddyRoadTask(void){
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
//	Robot_LineFollowUntillJunctionAndNotStop();
//	Robot_MoveForwardGivenDistance(145);
//	Robot_TurnRight90Inplace();


	float distance_traveled = Robot_moveForwardUntillFrontWall();
 80050da:	f7fe fcdd 	bl	8003a98 <Robot_moveForwardUntillFrontWall>
 80050de:	ed87 0a01 	vstr	s0, [r7, #4]

	float remaining_distance = 550 - distance_traveled;
 80050e2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800514c <executeMuddyRoadTask+0x78>
 80050e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80050ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ee:	edc7 7a00 	vstr	s15, [r7]

	Robot_adjust_using_front_wall();
 80050f2:	f7fe fd1b 	bl	8003b2c <Robot_adjust_using_front_wall>

	Robot_MoveReverseGivenDistance(50);
 80050f6:	2032      	movs	r0, #50	@ 0x32
 80050f8:	f7fe fbac 	bl	8003854 <Robot_MoveReverseGivenDistance>

	Robot_TurnLeft90Inplace();
 80050fc:	f7fe fc68 	bl	80039d0 <Robot_TurnLeft90Inplace>

	Robot_MoveForwardGivenDistance(190);
 8005100:	20be      	movs	r0, #190	@ 0xbe
 8005102:	f7fe fb0f 	bl	8003724 <Robot_MoveForwardGivenDistance>

	Robot_TurnRightInplace(45);
 8005106:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8005150 <executeMuddyRoadTask+0x7c>
 800510a:	f7fe fc2f 	bl	800396c <Robot_TurnRightInplace>

	Robot_MoveForwardGivenDistance(205);
 800510e:	20cd      	movs	r0, #205	@ 0xcd
 8005110:	f7fe fb08 	bl	8003724 <Robot_MoveForwardGivenDistance>

	Robot_TurnRightInplace(45);
 8005114:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8005150 <executeMuddyRoadTask+0x7c>
 8005118:	f7fe fc28 	bl	800396c <Robot_TurnRightInplace>

	Robot_MoveForwardGivenDistance(remaining_distance);
 800511c:	edd7 7a00 	vldr	s15, [r7]
 8005120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005124:	ee17 0a90 	vmov	r0, s15
 8005128:	f7fe fafc 	bl	8003724 <Robot_MoveForwardGivenDistance>

	Robot_TurnRightInplace(45);//55
 800512c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005150 <executeMuddyRoadTask+0x7c>
 8005130:	f7fe fc1c 	bl	800396c <Robot_TurnRightInplace>

	Robot_MoveForwardGivenDistance(152);//130
 8005134:	2098      	movs	r0, #152	@ 0x98
 8005136:	f7fe faf5 	bl	8003724 <Robot_MoveForwardGivenDistance>

	Robot_TurnRightInplace(132);//122
 800513a:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8005154 <executeMuddyRoadTask+0x80>
 800513e:	f7fe fc15 	bl	800396c <Robot_TurnRightInplace>



}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	44098000 	.word	0x44098000
 8005150:	42340000 	.word	0x42340000
 8005154:	43040000 	.word	0x43040000

08005158 <executeRampTask>:





void executeRampTask(void){
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
	Robot_MoveReverseGivenDistanceSLOW(675);
 800515c:	f240 20a3 	movw	r0, #675	@ 0x2a3
 8005160:	f7fe fb12 	bl	8003788 <Robot_MoveReverseGivenDistanceSLOW>
	Robot_TurnRightInplace(183);
 8005164:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8005180 <executeRampTask+0x28>
 8005168:	f7fe fc00 	bl	800396c <Robot_TurnRightInplace>

	Robot_MoveForwardGivenDistanceSLOW(590); // 490
 800516c:	f240 204e 	movw	r0, #590	@ 0x24e
 8005170:	f7fe fb3e 	bl	80037f0 <Robot_MoveForwardGivenDistanceSLOW>

	Buzzer_Toggle(100);
 8005174:	2064      	movs	r0, #100	@ 0x64
 8005176:	f000 f9fb 	bl	8005570 <Buzzer_Toggle>
//	Robot_moveForwardUntillFrontWall();
	//Robot_MoveForwardGivenDistanceFAST(100);
	//Robot_MoveForwardGivenDistanceFAST(325);


}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	43370000 	.word	0x43370000

08005184 <navigateToQR>:


void navigateToQR(){
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
//	Robot_TurnRight90Inplace();

		Robot_moveForwardUntillFrontWall();
 8005188:	f7fe fc86 	bl	8003a98 <Robot_moveForwardUntillFrontWall>

		Robot_adjust_using_front_wall();
 800518c:	f7fe fcce 	bl	8003b2c <Robot_adjust_using_front_wall>

		Robot_MoveReverseGivenDistance(100);
 8005190:	2064      	movs	r0, #100	@ 0x64
 8005192:	f7fe fb5f 	bl	8003854 <Robot_MoveReverseGivenDistance>

		Robot_TurnRight90Inplace();
 8005196:	f7fe fb91 	bl	80038bc <Robot_TurnRight90Inplace>

//		Buzzer_Toggle(100);
//
		Robot_MoveForwardGivenDistance(350);
 800519a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800519e:	f7fe fac1 	bl	8003724 <Robot_MoveForwardGivenDistance>

		Robot_TurnRightInplace(45);
 80051a2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80051d4 <navigateToQR+0x50>
 80051a6:	f7fe fbe1 	bl	800396c <Robot_TurnRightInplace>

		Robot_MoveForwardGivenDistance(60);
 80051aa:	203c      	movs	r0, #60	@ 0x3c
 80051ac:	f7fe faba 	bl	8003724 <Robot_MoveForwardGivenDistance>

		Robot_TurnLeftInplace(45);
 80051b0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80051d4 <navigateToQR+0x50>
 80051b4:	f7fe fc3c 	bl	8003a30 <Robot_TurnLeftInplace>

		Robot_moveForwardUntillFrontWall();
 80051b8:	f7fe fc6e 	bl	8003a98 <Robot_moveForwardUntillFrontWall>

		Robot_adjust_using_front_wall();
 80051bc:	f7fe fcb6 	bl	8003b2c <Robot_adjust_using_front_wall>

		////
		Robot_MoveReverseGivenDistance(50);
 80051c0:	2032      	movs	r0, #50	@ 0x32
 80051c2:	f7fe fb47 	bl	8003854 <Robot_MoveReverseGivenDistance>

		Robot_TurnRight90Inplace();
 80051c6:	f7fe fb79 	bl	80038bc <Robot_TurnRight90Inplace>

		Robot_MoveReverseGivenDistance(70);
 80051ca:	2046      	movs	r0, #70	@ 0x46
 80051cc:	f7fe fb42 	bl	8003854 <Robot_MoveReverseGivenDistance>


}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	42340000 	.word	0x42340000

080051d8 <executeQR>:


//Robot_read_Barcode();

void executeQR(){
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0

	Robot_MoveForwardUntillLine();
 80051de:	f7fe fa5f 	bl	80036a0 <Robot_MoveForwardUntillLine>

	Robot_MoveForwardGivenDistance(450);
 80051e2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80051e6:	f7fe fa9d 	bl	8003724 <Robot_MoveForwardGivenDistance>

	Robot_TurnLeft90Inplace();
 80051ea:	f7fe fbf1 	bl	80039d0 <Robot_TurnLeft90Inplace>

	Robot_MoveReverseGivenDistance(50);
 80051ee:	2032      	movs	r0, #50	@ 0x32
 80051f0:	f7fe fb30 	bl	8003854 <Robot_MoveReverseGivenDistance>

	//read
	uint8_t num = Robot_read_Barcode();
 80051f4:	f7fe fcb4 	bl	8003b60 <Robot_read_Barcode>
 80051f8:	4603      	mov	r3, r0
 80051fa:	71fb      	strb	r3, [r7, #7]

	display_big_number(num);
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fc62 	bl	8005ac8 <display_big_number>

	if(num == 0){
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <executeQR+0x3a>
		goodpotato = BLUE;
 800520a:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <executeQR+0x50>)
 800520c:	2203      	movs	r2, #3
 800520e:	701a      	strb	r2, [r3, #0]
	}
	else if(num == 1){
		goodpotato = RED;
	}
}
 8005210:	e005      	b.n	800521e <executeQR+0x46>
	else if(num == 1){
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d102      	bne.n	800521e <executeQR+0x46>
		goodpotato = RED;
 8005218:	4b03      	ldr	r3, [pc, #12]	@ (8005228 <executeQR+0x50>)
 800521a:	2204      	movs	r2, #4
 800521c:	701a      	strb	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000068 	.word	0x20000068

0800522c <executeCollectionPointTask>:



void executeCollectionPointTask(void){
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
	Robot_MoveForwardUntillLine();
 8005230:	f7fe fa36 	bl	80036a0 <Robot_MoveForwardUntillLine>
	Robot_TurnLeft90Inplace();
 8005234:	f7fe fbcc 	bl	80039d0 <Robot_TurnLeft90Inplace>
	Robot_LineFollowUntillJunction();
 8005238:	f7fe f93e 	bl	80034b8 <Robot_LineFollowUntillJunction>
	Robot_MoveReverseGivenDistance(50);
 800523c:	2032      	movs	r0, #50	@ 0x32
 800523e:	f7fe fb09 	bl	8003854 <Robot_MoveReverseGivenDistance>
	robot_TurnRight180Inplace();
 8005242:	f7fe fb67 	bl	8003914 <robot_TurnRight180Inplace>
	Robot_FollowLineGivenDistance(243);
 8005246:	20f3      	movs	r0, #243	@ 0xf3
 8005248:	f7fe f9c0 	bl	80035cc <Robot_FollowLineGivenDistance>
	Robot_TurnLeft90Inplace();
 800524c:	f7fe fbc0 	bl	80039d0 <Robot_TurnLeft90Inplace>
	Robot_MoveReverseGivenDistance(150);
 8005250:	2096      	movs	r0, #150	@ 0x96
 8005252:	f7fe faff 	bl	8003854 <Robot_MoveReverseGivenDistance>
	Robot_TurnLeft90Inplace();
 8005256:	f7fe fbbb 	bl	80039d0 <Robot_TurnLeft90Inplace>

	Robot_MoveReverseGivenDistance(185);
 800525a:	20b9      	movs	r0, #185	@ 0xb9
 800525c:	f7fe fafa 	bl	8003854 <Robot_MoveReverseGivenDistance>

	if(goodpotato == BLUE){
 8005260:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <executeCollectionPointTask+0x78>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d102      	bne.n	800526e <executeCollectionPointTask+0x42>
		drop_good_potatos();
 8005268:	f7fc f8fa 	bl	8001460 <drop_good_potatos>
 800526c:	e001      	b.n	8005272 <executeCollectionPointTask+0x46>
	}
	else{
		drop_bad_potatos();
 800526e:	f7fc f913 	bl	8001498 <drop_bad_potatos>
	}

	Robot_MoveForwardGivenDistance(40);
 8005272:	2028      	movs	r0, #40	@ 0x28
 8005274:	f7fe fa56 	bl	8003724 <Robot_MoveForwardGivenDistance>

	Robot_TurnLeft90Inplace();
 8005278:	f7fe fbaa 	bl	80039d0 <Robot_TurnLeft90Inplace>

	Robot_MoveForwardGivenDistance(600);
 800527c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8005280:	f7fe fa50 	bl	8003724 <Robot_MoveForwardGivenDistance>

	Robot_TurnRight90Inplace();
 8005284:	f7fe fb1a 	bl	80038bc <Robot_TurnRight90Inplace>

	Robot_MoveReverseGivenDistance(60);
 8005288:	203c      	movs	r0, #60	@ 0x3c
 800528a:	f7fe fae3 	bl	8003854 <Robot_MoveReverseGivenDistance>

	if(goodpotato == RED){
 800528e:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <executeCollectionPointTask+0x78>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b04      	cmp	r3, #4
 8005294:	d102      	bne.n	800529c <executeCollectionPointTask+0x70>
		drop_good_potatos();
 8005296:	f7fc f8e3 	bl	8001460 <drop_good_potatos>
	else{
		drop_bad_potatos();
	}


}
 800529a:	e001      	b.n	80052a0 <executeCollectionPointTask+0x74>
		drop_bad_potatos();
 800529c:	f7fc f8fc 	bl	8001498 <drop_bad_potatos>
}
 80052a0:	bf00      	nop
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20000068 	.word	0x20000068

080052a8 <selectTask>:


// -----------------------------Task manager function---------------------------------
void selectTask(){
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
	display_clear();
 80052ac:	f000 fc56 	bl	8005b5c <display_clear>
	display_headding("Tasks");
 80052b0:	484b      	ldr	r0, [pc, #300]	@ (80053e0 <selectTask+0x138>)
 80052b2:	f000 fc85 	bl	8005bc0 <display_headding>

	while(1){
		if(prevnextbtncount != nextbtncount){
 80052b6:	4b4b      	ldr	r3, [pc, #300]	@ (80053e4 <selectTask+0x13c>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b4b      	ldr	r3, [pc, #300]	@ (80053e8 <selectTask+0x140>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d073      	beq.n	80053aa <selectTask+0x102>
			display_big_number(nextbtncount);
 80052c2:	4b49      	ldr	r3, [pc, #292]	@ (80053e8 <selectTask+0x140>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fbfd 	bl	8005ac8 <display_big_number>
			switch(nextbtncount){
 80052ce:	4b46      	ldr	r3, [pc, #280]	@ (80053e8 <selectTask+0x140>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	d863      	bhi.n	80053a0 <selectTask+0xf8>
 80052d8:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <selectTask+0x38>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f9 	.word	0x080052f9
 80052e4:	08005315 	.word	0x08005315
 80052e8:	08005331 	.word	0x08005331
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	08005369 	.word	0x08005369
 80052f4:	08005385 	.word	0x08005385
			case 1:
				display_message("                 ", 12, 45);
 80052f8:	222d      	movs	r2, #45	@ 0x2d
 80052fa:	210c      	movs	r1, #12
 80052fc:	483b      	ldr	r0, [pc, #236]	@ (80053ec <selectTask+0x144>)
 80052fe:	f000 fc35 	bl	8005b6c <display_message>
				display_message("Plantation Task", 12, 45);
 8005302:	222d      	movs	r2, #45	@ 0x2d
 8005304:	210c      	movs	r1, #12
 8005306:	483a      	ldr	r0, [pc, #232]	@ (80053f0 <selectTask+0x148>)
 8005308:	f000 fc30 	bl	8005b6c <display_message>
				currentTask = TASK_PLANTATION;
 800530c:	4b39      	ldr	r3, [pc, #228]	@ (80053f4 <selectTask+0x14c>)
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
				break;
 8005312:	e046      	b.n	80053a2 <selectTask+0xfa>
			case 2:
				display_message("                 ", 12, 45);
 8005314:	222d      	movs	r2, #45	@ 0x2d
 8005316:	210c      	movs	r1, #12
 8005318:	4834      	ldr	r0, [pc, #208]	@ (80053ec <selectTask+0x144>)
 800531a:	f000 fc27 	bl	8005b6c <display_message>
				display_message("Muddy Road", 12, 45);
 800531e:	222d      	movs	r2, #45	@ 0x2d
 8005320:	210c      	movs	r1, #12
 8005322:	4835      	ldr	r0, [pc, #212]	@ (80053f8 <selectTask+0x150>)
 8005324:	f000 fc22 	bl	8005b6c <display_message>
				currentTask = TASK_MUDDY_ROAD;
 8005328:	4b32      	ldr	r3, [pc, #200]	@ (80053f4 <selectTask+0x14c>)
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
				break;
 800532e:	e038      	b.n	80053a2 <selectTask+0xfa>
			case 3:
				display_message("                 ", 12, 45);
 8005330:	222d      	movs	r2, #45	@ 0x2d
 8005332:	210c      	movs	r1, #12
 8005334:	482d      	ldr	r0, [pc, #180]	@ (80053ec <selectTask+0x144>)
 8005336:	f000 fc19 	bl	8005b6c <display_message>
				display_message("Ramp", 12, 45);
 800533a:	222d      	movs	r2, #45	@ 0x2d
 800533c:	210c      	movs	r1, #12
 800533e:	482f      	ldr	r0, [pc, #188]	@ (80053fc <selectTask+0x154>)
 8005340:	f000 fc14 	bl	8005b6c <display_message>
				currentTask = TASK_RAMP;
 8005344:	4b2b      	ldr	r3, [pc, #172]	@ (80053f4 <selectTask+0x14c>)
 8005346:	2202      	movs	r2, #2
 8005348:	701a      	strb	r2, [r3, #0]
				break;
 800534a:	e02a      	b.n	80053a2 <selectTask+0xfa>
			case 4:
				display_message("                 ", 12, 45);
 800534c:	222d      	movs	r2, #45	@ 0x2d
 800534e:	210c      	movs	r1, #12
 8005350:	4826      	ldr	r0, [pc, #152]	@ (80053ec <selectTask+0x144>)
 8005352:	f000 fc0b 	bl	8005b6c <display_message>
				display_message("NAV QR", 12, 45);
 8005356:	222d      	movs	r2, #45	@ 0x2d
 8005358:	210c      	movs	r1, #12
 800535a:	4829      	ldr	r0, [pc, #164]	@ (8005400 <selectTask+0x158>)
 800535c:	f000 fc06 	bl	8005b6c <display_message>
				currentTask = NAVIGATE_T0_QR;
 8005360:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <selectTask+0x14c>)
 8005362:	2203      	movs	r2, #3
 8005364:	701a      	strb	r2, [r3, #0]
				break;
 8005366:	e01c      	b.n	80053a2 <selectTask+0xfa>
			case 5:
				display_message("                 ", 12, 45);
 8005368:	222d      	movs	r2, #45	@ 0x2d
 800536a:	210c      	movs	r1, #12
 800536c:	481f      	ldr	r0, [pc, #124]	@ (80053ec <selectTask+0x144>)
 800536e:	f000 fbfd 	bl	8005b6c <display_message>
				display_message("Read QR", 12, 45);
 8005372:	222d      	movs	r2, #45	@ 0x2d
 8005374:	210c      	movs	r1, #12
 8005376:	4823      	ldr	r0, [pc, #140]	@ (8005404 <selectTask+0x15c>)
 8005378:	f000 fbf8 	bl	8005b6c <display_message>
				currentTask = TASK_QR;
 800537c:	4b1d      	ldr	r3, [pc, #116]	@ (80053f4 <selectTask+0x14c>)
 800537e:	2204      	movs	r2, #4
 8005380:	701a      	strb	r2, [r3, #0]
				break;
 8005382:	e00e      	b.n	80053a2 <selectTask+0xfa>
			case 6:
				display_message("                 ", 12, 45);
 8005384:	222d      	movs	r2, #45	@ 0x2d
 8005386:	210c      	movs	r1, #12
 8005388:	4818      	ldr	r0, [pc, #96]	@ (80053ec <selectTask+0x144>)
 800538a:	f000 fbef 	bl	8005b6c <display_message>
				display_message("Collection Point", 12, 45);
 800538e:	222d      	movs	r2, #45	@ 0x2d
 8005390:	210c      	movs	r1, #12
 8005392:	481d      	ldr	r0, [pc, #116]	@ (8005408 <selectTask+0x160>)
 8005394:	f000 fbea 	bl	8005b6c <display_message>
				currentTask = TASK_COLLECTION_POINT;
 8005398:	4b16      	ldr	r3, [pc, #88]	@ (80053f4 <selectTask+0x14c>)
 800539a:	2205      	movs	r2, #5
 800539c:	701a      	strb	r2, [r3, #0]
				break;
 800539e:	e000      	b.n	80053a2 <selectTask+0xfa>
			default:
				break;
 80053a0:	bf00      	nop
			}
			prevnextbtncount = nextbtncount;
 80053a2:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <selectTask+0x140>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a0f      	ldr	r2, [pc, #60]	@ (80053e4 <selectTask+0x13c>)
 80053a8:	6013      	str	r3, [r2, #0]
		}
		if(prevokbtncount != okbtncount){
 80053aa:	4b18      	ldr	r3, [pc, #96]	@ (800540c <selectTask+0x164>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b18      	ldr	r3, [pc, #96]	@ (8005410 <selectTask+0x168>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	f43f af7f 	beq.w	80052b6 <selectTask+0xe>
			prevokbtncount = okbtncount;
 80053b8:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <selectTask+0x168>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a13      	ldr	r2, [pc, #76]	@ (800540c <selectTask+0x164>)
 80053be:	6013      	str	r3, [r2, #0]
			break;
 80053c0:	bf00      	nop
		}
	}
	display_headding("Start Task");
 80053c2:	4814      	ldr	r0, [pc, #80]	@ (8005414 <selectTask+0x16c>)
 80053c4:	f000 fbfc 	bl	8005bc0 <display_headding>
	while(okbtncount == prevokbtncount);
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <selectTask+0x168>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b0f      	ldr	r3, [pc, #60]	@ (800540c <selectTask+0x164>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d0f9      	beq.n	80053c8 <selectTask+0x120>
	Reset_buttons();
 80053d4:	f7fc f8e0 	bl	8001598 <Reset_buttons>
	runCurrentTask();
 80053d8:	f000 f81e 	bl	8005418 <runCurrentTask>
}
 80053dc:	bf00      	nop
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	0800fdc0 	.word	0x0800fdc0
 80053e4:	200002bc 	.word	0x200002bc
 80053e8:	20000010 	.word	0x20000010
 80053ec:	0800fdc8 	.word	0x0800fdc8
 80053f0:	0800fddc 	.word	0x0800fddc
 80053f4:	20000050 	.word	0x20000050
 80053f8:	0800fdec 	.word	0x0800fdec
 80053fc:	0800fdf8 	.word	0x0800fdf8
 8005400:	0800fe00 	.word	0x0800fe00
 8005404:	0800fe08 	.word	0x0800fe08
 8005408:	0800fe10 	.word	0x0800fe10
 800540c:	200002b8 	.word	0x200002b8
 8005410:	200002b4 	.word	0x200002b4
 8005414:	0800fe24 	.word	0x0800fe24

08005418 <runCurrentTask>:



void runCurrentTask() {
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
	EnableSysTickFunction();
 800541c:	f7ff fd08 	bl	8004e30 <EnableSysTickFunction>

    switch (currentTask) {
 8005420:	4b1c      	ldr	r3, [pc, #112]	@ (8005494 <runCurrentTask+0x7c>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b05      	cmp	r3, #5
 8005428:	d831      	bhi.n	800548e <runCurrentTask+0x76>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <runCurrentTask+0x18>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005449 	.word	0x08005449
 8005434:	08005455 	.word	0x08005455
 8005438:	08005461 	.word	0x08005461
 800543c:	0800546d 	.word	0x0800546d
 8005440:	08005479 	.word	0x08005479
 8005444:	08005485 	.word	0x08005485
        case TASK_PLANTATION:
            executePlantationTask();
 8005448:	f7ff fd5a 	bl	8004f00 <executePlantationTask>
            currentTask = TASK_MUDDY_ROAD;
 800544c:	4b11      	ldr	r3, [pc, #68]	@ (8005494 <runCurrentTask+0x7c>)
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
            break;
 8005452:	e01d      	b.n	8005490 <runCurrentTask+0x78>
        case TASK_MUDDY_ROAD:
        	executeMuddyRoadTask();
 8005454:	f7ff fe3e 	bl	80050d4 <executeMuddyRoadTask>
		    currentTask = TASK_RAMP;
 8005458:	4b0e      	ldr	r3, [pc, #56]	@ (8005494 <runCurrentTask+0x7c>)
 800545a:	2202      	movs	r2, #2
 800545c:	701a      	strb	r2, [r3, #0]
		    break;
 800545e:	e017      	b.n	8005490 <runCurrentTask+0x78>
        case TASK_RAMP:
        	executeRampTask();
 8005460:	f7ff fe7a 	bl	8005158 <executeRampTask>
        	currentTask = NAVIGATE_T0_QR;
 8005464:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <runCurrentTask+0x7c>)
 8005466:	2203      	movs	r2, #3
 8005468:	701a      	strb	r2, [r3, #0]
        	break;
 800546a:	e011      	b.n	8005490 <runCurrentTask+0x78>
        case NAVIGATE_T0_QR:
        	navigateToQR();
 800546c:	f7ff fe8a 	bl	8005184 <navigateToQR>
        	currentTask = TASK_QR;
 8005470:	4b08      	ldr	r3, [pc, #32]	@ (8005494 <runCurrentTask+0x7c>)
 8005472:	2204      	movs	r2, #4
 8005474:	701a      	strb	r2, [r3, #0]
        	break;
 8005476:	e00b      	b.n	8005490 <runCurrentTask+0x78>
        case TASK_QR:
        	executeQR();
 8005478:	f7ff feae 	bl	80051d8 <executeQR>
        	currentTask = TASK_COLLECTION_POINT;
 800547c:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <runCurrentTask+0x7c>)
 800547e:	2205      	movs	r2, #5
 8005480:	701a      	strb	r2, [r3, #0]
        	break;
 8005482:	e005      	b.n	8005490 <runCurrentTask+0x78>
        case TASK_COLLECTION_POINT:
        	executeCollectionPointTask();
 8005484:	f7ff fed2 	bl	800522c <executeCollectionPointTask>
        	currentTask = TASK_NONE;
 8005488:	4b02      	ldr	r3, [pc, #8]	@ (8005494 <runCurrentTask+0x7c>)
 800548a:	220a      	movs	r2, #10
 800548c:	701a      	strb	r2, [r3, #0]
        default:
            break;
 800548e:	bf00      	nop
    }

    // Print final status after execution

}
 8005490:	bf00      	nop
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000050 	.word	0x20000050

08005498 <UART_Transmit_Float>:
    HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

// UART Transmit function for float (send float formatted as string with customizable header)
void UART_Transmit_Float(UART_HandleTypeDef *huart, const char *header, float number, uint8_t decimal_points)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b094      	sub	sp, #80	@ 0x50
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	70fb      	strb	r3, [r7, #3]
    char buffer[50];  // Buffer to hold the formatted string

    // Format the float value into the buffer with the specified decimal points
    // You can change %.2f to another precision, such as %.3f, %.4f, etc.
    sprintf(buffer, "%s:%.5f\r\n", header, number);  // Use header string as prefix
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fb f86c 	bl	8000588 <__aeabi_f2d>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	f107 0014 	add.w	r0, r7, #20
 80054b8:	e9cd 2300 	strd	r2, r3, [sp]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	490a      	ldr	r1, [pc, #40]	@ (80054e8 <UART_Transmit_Float+0x50>)
 80054c0:	f008 fa36 	bl	800d930 <siprintf>

    // Transmit the formatted string via UART
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fa fef1 	bl	80002b0 <strlen>
 80054ce:	4603      	mov	r3, r0
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	f107 0114 	add.w	r1, r7, #20
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f005 fc22 	bl	800ad24 <HAL_UART_Transmit>
}
 80054e0:	bf00      	nop
 80054e2:	3748      	adds	r7, #72	@ 0x48
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	0800fe30 	.word	0x0800fe30

080054ec <Reset_Handler>:
 80054ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005524 <LoopFillZerobss+0xe>
 80054f0:	f7ff fc60 	bl	8004db4 <SystemInit>
 80054f4:	480c      	ldr	r0, [pc, #48]	@ (8005528 <LoopFillZerobss+0x12>)
 80054f6:	490d      	ldr	r1, [pc, #52]	@ (800552c <LoopFillZerobss+0x16>)
 80054f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005530 <LoopFillZerobss+0x1a>)
 80054fa:	2300      	movs	r3, #0
 80054fc:	e002      	b.n	8005504 <LoopCopyDataInit>

080054fe <CopyDataInit>:
 80054fe:	58d4      	ldr	r4, [r2, r3]
 8005500:	50c4      	str	r4, [r0, r3]
 8005502:	3304      	adds	r3, #4

08005504 <LoopCopyDataInit>:
 8005504:	18c4      	adds	r4, r0, r3
 8005506:	428c      	cmp	r4, r1
 8005508:	d3f9      	bcc.n	80054fe <CopyDataInit>
 800550a:	4a0a      	ldr	r2, [pc, #40]	@ (8005534 <LoopFillZerobss+0x1e>)
 800550c:	4c0a      	ldr	r4, [pc, #40]	@ (8005538 <LoopFillZerobss+0x22>)
 800550e:	2300      	movs	r3, #0
 8005510:	e001      	b.n	8005516 <LoopFillZerobss>

08005512 <FillZerobss>:
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	3204      	adds	r2, #4

08005516 <LoopFillZerobss>:
 8005516:	42a2      	cmp	r2, r4
 8005518:	d3fb      	bcc.n	8005512 <FillZerobss>
 800551a:	f008 fad9 	bl	800dad0 <__libc_init_array>
 800551e:	f7fc fcad 	bl	8001e7c <main>
 8005522:	4770      	bx	lr
 8005524:	20020000 	.word	0x20020000
 8005528:	20000000 	.word	0x20000000
 800552c:	20000284 	.word	0x20000284
 8005530:	080130bc 	.word	0x080130bc
 8005534:	20000284 	.word	0x20000284
 8005538:	20000f4c 	.word	0x20000f4c

0800553c <ADC_IRQHandler>:
 800553c:	e7fe      	b.n	800553c <ADC_IRQHandler>
	...

08005540 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8005544:	2201      	movs	r2, #1
 8005546:	2120      	movs	r1, #32
 8005548:	4802      	ldr	r0, [pc, #8]	@ (8005554 <Buzzer_On+0x14>)
 800554a:	f002 f953 	bl	80077f4 <HAL_GPIO_WritePin>
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40020000 	.word	0x40020000

08005558 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800555c:	2200      	movs	r2, #0
 800555e:	2120      	movs	r1, #32
 8005560:	4802      	ldr	r0, [pc, #8]	@ (800556c <Buzzer_Off+0x14>)
 8005562:	f002 f947 	bl	80077f4 <HAL_GPIO_WritePin>
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40020000 	.word	0x40020000

08005570 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8005578:	f7ff ffe2 	bl	8005540 <Buzzer_On>
    HAL_Delay(delay);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fee3 	bl	8006348 <HAL_Delay>
    Buzzer_Off();
 8005582:	f7ff ffe9 	bl	8005558 <Buzzer_Off>
    HAL_Delay(delay);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fede 	bl	8006348 <HAL_Delay>
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 8005598:	f7ff ffd2 	bl	8005540 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800559c:	2064      	movs	r0, #100	@ 0x64
 800559e:	f000 fed3 	bl	8006348 <HAL_Delay>
    Buzzer_Off();
 80055a2:	f7ff ffd9 	bl	8005558 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80055a6:	2064      	movs	r0, #100	@ 0x64
 80055a8:	f000 fece 	bl	8006348 <HAL_Delay>

    Buzzer_On();
 80055ac:	f7ff ffc8 	bl	8005540 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80055b0:	2064      	movs	r0, #100	@ 0x64
 80055b2:	f000 fec9 	bl	8006348 <HAL_Delay>
    Buzzer_Off();
 80055b6:	f7ff ffcf 	bl	8005558 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80055ba:	2064      	movs	r0, #100	@ 0x64
 80055bc:	f000 fec4 	bl	8006348 <HAL_Delay>

    Buzzer_On();
 80055c0:	f7ff ffbe 	bl	8005540 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80055c4:	20c8      	movs	r0, #200	@ 0xc8
 80055c6:	f000 febf 	bl	8006348 <HAL_Delay>
    Buzzer_Off();
 80055ca:	f7ff ffc5 	bl	8005558 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80055ce:	2064      	movs	r0, #100	@ 0x64
 80055d0:	f000 feba 	bl	8006348 <HAL_Delay>

    Buzzer_On();
 80055d4:	f7ff ffb4 	bl	8005540 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80055d8:	2064      	movs	r0, #100	@ 0x64
 80055da:	f000 feb5 	bl	8006348 <HAL_Delay>
    Buzzer_Off();
 80055de:	f7ff ffbb 	bl	8005558 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80055e2:	2064      	movs	r0, #100	@ 0x64
 80055e4:	f000 feb0 	bl	8006348 <HAL_Delay>

    Buzzer_On();
 80055e8:	f7ff ffaa 	bl	8005540 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80055ec:	20c8      	movs	r0, #200	@ 0xc8
 80055ee:	f000 feab 	bl	8006348 <HAL_Delay>
    Buzzer_Off();
 80055f2:	f7ff ffb1 	bl	8005558 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}

080055fa <Buzzer_ErrorPattern>:
    Buzzer_Off();
}


void Buzzer_ErrorPattern(void)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
    // Three short beeps
    for (int i = 0; i < 3; i++) {
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e00c      	b.n	8005620 <Buzzer_ErrorPattern+0x26>
        Buzzer_On();
 8005606:	f7ff ff9b 	bl	8005540 <Buzzer_On>
        HAL_Delay(100);
 800560a:	2064      	movs	r0, #100	@ 0x64
 800560c:	f000 fe9c 	bl	8006348 <HAL_Delay>
        Buzzer_Off();
 8005610:	f7ff ffa2 	bl	8005558 <Buzzer_Off>
        HAL_Delay(100);
 8005614:	2064      	movs	r0, #100	@ 0x64
 8005616:	f000 fe97 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b02      	cmp	r3, #2
 8005624:	ddef      	ble.n	8005606 <Buzzer_ErrorPattern+0xc>
    }

    // Three long beeps
    for (int i = 0; i < 3; i++) {
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	e00d      	b.n	8005648 <Buzzer_ErrorPattern+0x4e>
        Buzzer_On();
 800562c:	f7ff ff88 	bl	8005540 <Buzzer_On>
        HAL_Delay(300);
 8005630:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005634:	f000 fe88 	bl	8006348 <HAL_Delay>
        Buzzer_Off();
 8005638:	f7ff ff8e 	bl	8005558 <Buzzer_Off>
        HAL_Delay(100);
 800563c:	2064      	movs	r0, #100	@ 0x64
 800563e:	f000 fe83 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3301      	adds	r3, #1
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b02      	cmp	r3, #2
 800564c:	ddee      	ble.n	800562c <Buzzer_ErrorPattern+0x32>
    }

    // Three short beeps again
    for (int i = 0; i < 3; i++) {
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	e00c      	b.n	800566e <Buzzer_ErrorPattern+0x74>
        Buzzer_On();
 8005654:	f7ff ff74 	bl	8005540 <Buzzer_On>
        HAL_Delay(100);
 8005658:	2064      	movs	r0, #100	@ 0x64
 800565a:	f000 fe75 	bl	8006348 <HAL_Delay>
        Buzzer_Off();
 800565e:	f7ff ff7b 	bl	8005558 <Buzzer_Off>
        HAL_Delay(100);
 8005662:	2064      	movs	r0, #100	@ 0x64
 8005664:	f000 fe70 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3301      	adds	r3, #1
 800566c:	607b      	str	r3, [r7, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b02      	cmp	r3, #2
 8005672:	ddef      	ble.n	8005654 <Buzzer_ErrorPattern+0x5a>
    }

    // 1-second pause before repeating
    HAL_Delay(1000);
 8005674:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005678:	f000 fe66 	bl	8006348 <HAL_Delay>
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <i2c_mux_select>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 800568e:	2201      	movs	r2, #1
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f805 	bl	80056ac <i2c_mux_select_multi>
 80056a2:	4603      	mov	r3, r0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <i2c_mux_select_multi>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <i2c_mux_select_multi+0x18>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e02f      	b.n	8005724 <i2c_mux_select_multi+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7a9b      	ldrb	r3, [r3, #10]
 80056c8:	3370      	adds	r3, #112	@ 0x70
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	b299      	uxth	r1, r3
 80056d8:	1cfa      	adds	r2, r7, #3
 80056da:	2301      	movs	r3, #1
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2301      	movs	r3, #1
 80056e0:	f002 f9fe 	bl	8007ae0 <HAL_I2C_Master_Transmit>
 80056e4:	4603      	mov	r3, r0
 80056e6:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <i2c_mux_select_multi+0x46>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e018      	b.n	8005724 <i2c_mux_select_multi+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	b299      	uxth	r1, r3
 80056fe:	f107 020d 	add.w	r2, r7, #13
 8005702:	2301      	movs	r3, #1
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	2301      	movs	r3, #1
 8005708:	f002 fae8 	bl	8007cdc <HAL_I2C_Master_Receive>
 800570c:	4603      	mov	r3, r0
 800570e:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 8005710:	7bbb      	ldrb	r3, [r7, #14]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <i2c_mux_select_multi+0x72>
 8005716:	7b7a      	ldrb	r2, [r7, #13]
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	429a      	cmp	r2, r3
 800571c:	d001      	beq.n	8005722 <i2c_mux_select_multi+0x76>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <i2c_mux_select_multi+0x78>
	return 0;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d901      	bls.n	8005740 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 800573c:	230f      	movs	r3, #15
 800573e:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d006      	beq.n	8005758 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 800574a:	2201      	movs	r2, #1
 800574c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005750:	4823      	ldr	r0, [pc, #140]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 8005752:	f002 f84f 	bl	80077f4 <HAL_GPIO_WritePin>
 8005756:	e005      	b.n	8005764 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8005758:	2200      	movs	r2, #0
 800575a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800575e:	4820      	ldr	r0, [pc, #128]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 8005760:	f002 f848 	bl	80077f4 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d006      	beq.n	800577c <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 800576e:	2201      	movs	r2, #1
 8005770:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005774:	481a      	ldr	r0, [pc, #104]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 8005776:	f002 f83d 	bl	80077f4 <HAL_GPIO_WritePin>
 800577a:	e005      	b.n	8005788 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005782:	4817      	ldr	r0, [pc, #92]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 8005784:	f002 f836 	bl	80077f4 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 8005792:	2201      	movs	r2, #1
 8005794:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005798:	4811      	ldr	r0, [pc, #68]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 800579a:	f002 f82b 	bl	80077f4 <HAL_GPIO_WritePin>
 800579e:	e005      	b.n	80057ac <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 80057a0:	2200      	movs	r2, #0
 80057a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80057a6:	480e      	ldr	r0, [pc, #56]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 80057a8:	f002 f824 	bl	80077f4 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d006      	beq.n	80057c4 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 80057b6:	2201      	movs	r2, #1
 80057b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057bc:	4808      	ldr	r0, [pc, #32]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 80057be:	f002 f819 	bl	80077f4 <HAL_GPIO_WritePin>
 80057c2:	e005      	b.n	80057d0 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057ca:	4805      	ldr	r0, [pc, #20]	@ (80057e0 <AnalogMux_SelectChannel+0xb4>)
 80057cc:	f002 f812 	bl	80077f4 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 80057d0:	2001      	movs	r0, #1
 80057d2:	f7fc f985 	bl	8001ae0 <delayMicroseconds>
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40020400 	.word	0x40020400

080057e4 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 80057ee:	480b      	ldr	r0, [pc, #44]	@ (800581c <AnalogMux_ReadADC+0x38>)
 80057f0:	f000 fe12 	bl	8006418 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80057f4:	2164      	movs	r1, #100	@ 0x64
 80057f6:	4809      	ldr	r0, [pc, #36]	@ (800581c <AnalogMux_ReadADC+0x38>)
 80057f8:	f000 ff13 	bl	8006622 <HAL_ADC_PollForConversion>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 8005802:	4806      	ldr	r0, [pc, #24]	@ (800581c <AnalogMux_ReadADC+0x38>)
 8005804:	f000 ff98 	bl	8006738 <HAL_ADC_GetValue>
 8005808:	4603      	mov	r3, r0
 800580a:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 800580c:	4803      	ldr	r0, [pc, #12]	@ (800581c <AnalogMux_ReadADC+0x38>)
 800580e:	f000 fed5 	bl	80065bc <HAL_ADC_Stop>

    return adcValue;
 8005812:	88fb      	ldrh	r3, [r7, #6]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200002fc 	.word	0x200002fc

08005820 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff ff7d 	bl	800572c <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 8005832:	2005      	movs	r0, #5
 8005834:	f7fc f954 	bl	8001ae0 <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8005838:	f7ff ffd4 	bl	80057e4 <AnalogMux_ReadADC>
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af04      	add	r7, sp, #16
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
 8005852:	460b      	mov	r3, r1
 8005854:	71bb      	strb	r3, [r7, #6]
 8005856:	4613      	mov	r3, r2
 8005858:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	b29a      	uxth	r2, r3
 800585e:	230a      	movs	r3, #10
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	2301      	movs	r3, #1
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	f107 030f 	add.w	r3, r7, #15
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	2301      	movs	r3, #1
 800586e:	2180      	movs	r1, #128	@ 0x80
 8005870:	4819      	ldr	r0, [pc, #100]	@ (80058d8 <PCA9685_SetBit+0x90>)
 8005872:	f002 fd5f 	bl	8008334 <HAL_I2C_Mem_Read>
  if (Value == 0)
 8005876:	797b      	ldrb	r3, [r7, #5]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10d      	bne.n	8005898 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800587c:	79bb      	ldrb	r3, [r7, #6]
 800587e:	2201      	movs	r2, #1
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	b25b      	sxtb	r3, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	b25a      	sxtb	r2, r3
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	b25b      	sxtb	r3, r3
 800588e:	4013      	ands	r3, r2
 8005890:	b25b      	sxtb	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	73fb      	strb	r3, [r7, #15]
 8005896:	e00a      	b.n	80058ae <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8005898:	79bb      	ldrb	r3, [r7, #6]
 800589a:	2201      	movs	r2, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	b25a      	sxtb	r2, r3
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b25b      	sxtb	r3, r3
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	230a      	movs	r3, #10
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	2301      	movs	r3, #1
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	f107 030f 	add.w	r3, r7, #15
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	2301      	movs	r3, #1
 80058c2:	2180      	movs	r1, #128	@ 0x80
 80058c4:	4804      	ldr	r0, [pc, #16]	@ (80058d8 <PCA9685_SetBit+0x90>)
 80058c6:	f002 fc3b 	bl	8008140 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80058ca:	2001      	movs	r0, #1
 80058cc:	f000 fd3c 	bl	8006348 <HAL_Delay>
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000398 	.word	0x20000398

080058dc <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af04      	add	r7, sp, #16
 80058e2:	4603      	mov	r3, r0
 80058e4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d902      	bls.n	80058f6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80058f0:	2303      	movs	r3, #3
 80058f2:	73fb      	strb	r3, [r7, #15]
 80058f4:	e00c      	b.n	8005910 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b18      	cmp	r3, #24
 80058fa:	d802      	bhi.n	8005902 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 80058fc:	23ff      	movs	r3, #255	@ 0xff
 80058fe:	73fb      	strb	r3, [r7, #15]
 8005900:	e006      	b.n	8005910 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	031b      	lsls	r3, r3, #12
 8005906:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <PCA9685_SetPWMFrequency+0x74>)
 8005908:	fb92 f3f3 	sdiv	r3, r2, r3
 800590c:	b2db      	uxtb	r3, r3
 800590e:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8005910:	2201      	movs	r2, #1
 8005912:	2104      	movs	r1, #4
 8005914:	2000      	movs	r0, #0
 8005916:	f7ff ff97 	bl	8005848 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 800591a:	230a      	movs	r3, #10
 800591c:	9302      	str	r3, [sp, #8]
 800591e:	2301      	movs	r3, #1
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	f107 030f 	add.w	r3, r7, #15
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2301      	movs	r3, #1
 800592a:	22fe      	movs	r2, #254	@ 0xfe
 800592c:	2180      	movs	r1, #128	@ 0x80
 800592e:	4809      	ldr	r0, [pc, #36]	@ (8005954 <PCA9685_SetPWMFrequency+0x78>)
 8005930:	f002 fc06 	bl	8008140 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2104      	movs	r1, #4
 8005938:	2000      	movs	r0, #0
 800593a:	f7ff ff85 	bl	8005848 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 800593e:	2201      	movs	r2, #1
 8005940:	2107      	movs	r1, #7
 8005942:	2000      	movs	r0, #0
 8005944:	f7ff ff80 	bl	8005848 <PCA9685_SetBit>
}
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	017d7840 	.word	0x017d7840
 8005954:	20000398 	.word	0x20000398

08005958 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ffb9 	bl	80058dc <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800596a:	2201      	movs	r2, #1
 800596c:	2105      	movs	r1, #5
 800596e:	2000      	movs	r0, #0
 8005970:	f7ff ff6a 	bl	8005848 <PCA9685_SetBit>
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af04      	add	r7, sp, #16
 8005982:	4603      	mov	r3, r0
 8005984:	71fb      	strb	r3, [r7, #7]
 8005986:	460b      	mov	r3, r1
 8005988:	80bb      	strh	r3, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	b2db      	uxtb	r3, r3
 8005994:	3306      	adds	r3, #6
 8005996:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8005998:	88bb      	ldrh	r3, [r7, #4]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 800599e:	88bb      	ldrh	r3, [r7, #4]
 80059a0:	0a1b      	lsrs	r3, r3, #8
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 80059a8:	887b      	ldrh	r3, [r7, #2]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 80059ae:	887b      	ldrh	r3, [r7, #2]
 80059b0:	0a1b      	lsrs	r3, r3, #8
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	230a      	movs	r3, #10
 80059be:	9302      	str	r3, [sp, #8]
 80059c0:	2304      	movs	r3, #4
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2301      	movs	r3, #1
 80059cc:	2180      	movs	r1, #128	@ 0x80
 80059ce:	4803      	ldr	r0, [pc, #12]	@ (80059dc <PCA9685_SetPWM+0x60>)
 80059d0:	f002 fbb6 	bl	8008140 <HAL_I2C_Mem_Write>
}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000398 	.word	0x20000398

080059e0 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	ed87 0a00 	vstr	s0, [r7]
 80059ec:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 80059ee:	edd7 7a00 	vldr	s15, [r7]
 80059f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fa:	d502      	bpl.n	8005a02 <PCA9685_SetServoAngle+0x22>
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8005a02:	edd7 7a00 	vldr	s15, [r7]
 8005a06:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005a90 <PCA9685_SetServoAngle+0xb0>
 8005a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	dd01      	ble.n	8005a18 <PCA9685_SetServoAngle+0x38>
 8005a14:	4b1f      	ldr	r3, [pc, #124]	@ (8005a94 <PCA9685_SetServoAngle+0xb4>)
 8005a16:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8005a18:	6838      	ldr	r0, [r7, #0]
 8005a1a:	f7fa fdb5 	bl	8000588 <__aeabi_f2d>
 8005a1e:	a318      	add	r3, pc, #96	@ (adr r3, 8005a80 <PCA9685_SetServoAngle+0xa0>)
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f7fa fe08 	bl	8000638 <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	4b18      	ldr	r3, [pc, #96]	@ (8005a98 <PCA9685_SetServoAngle+0xb8>)
 8005a36:	f7fa ff29 	bl	800088c <__aeabi_ddiv>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	a311      	add	r3, pc, #68	@ (adr r3, 8005a88 <PCA9685_SetServoAngle+0xa8>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fc40 	bl	80002cc <__adddf3>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4610      	mov	r0, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	f7fb f8e8 	bl	8000c28 <__aeabi_d2f>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8005a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a64:	ee17 3a90 	vmov	r3, s15
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff ff84 	bl	800597c <PCA9685_SetPWM>
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	f3af 8000 	nop.w
 8005a80:	00000000 	.word	0x00000000
 8005a84:	40799800 	.word	0x40799800
 8005a88:	9999999a 	.word	0x9999999a
 8005a8c:	40599999 	.word	0x40599999
 8005a90:	43340000 	.word	0x43340000
 8005a94:	43340000 	.word	0x43340000
 8005a98:	40668000 	.word	0x40668000

08005a9c <Init_Display>:

#include "display.h"

char bufnum[7];

void Init_Display(){
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af02      	add	r7, sp, #8
	SSD1306_Init();
 8005aa2:	f000 f89b 	bl	8005bdc <SSD1306_Init>
	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	2340      	movs	r3, #64	@ 0x40
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2380      	movs	r3, #128	@ 0x80
 8005ab0:	4a04      	ldr	r2, [pc, #16]	@ (8005ac4 <Init_Display+0x28>)
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f000 faba 	bl	800602e <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8005aba:	f000 f959 	bl	8005d70 <SSD1306_UpdateScreen>
}
 8005abe:	bf00      	nop
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	08010118 	.word	0x08010118

08005ac8 <display_big_number>:

void display_big_number(uint8_t number){
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	71fb      	strb	r3, [r7, #7]
	//SSD1306_Clear();
	sprintf (bufnum, "%d", number);
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4909      	ldr	r1, [pc, #36]	@ (8005afc <display_big_number+0x34>)
 8005ad8:	4809      	ldr	r0, [pc, #36]	@ (8005b00 <display_big_number+0x38>)
 8005ada:	f007 ff29 	bl	800d930 <siprintf>

    SSD1306_GotoXY (25,22); // goto 10, 10
 8005ade:	2116      	movs	r1, #22
 8005ae0:	2019      	movs	r0, #25
 8005ae2:	f000 f9eb 	bl	8005ebc <SSD1306_GotoXY>
    SSD1306_Puts (bufnum, &Font_16x26, 1); // print Hello
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4906      	ldr	r1, [pc, #24]	@ (8005b04 <display_big_number+0x3c>)
 8005aea:	4805      	ldr	r0, [pc, #20]	@ (8005b00 <display_big_number+0x38>)
 8005aec:	f000 fa7a 	bl	8005fe4 <SSD1306_Puts>

    SSD1306_UpdateScreen(); // update screen
 8005af0:	f000 f93e 	bl	8005d70 <SSD1306_UpdateScreen>
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	0800fe90 	.word	0x0800fe90
 8005b00:	200009d8 	.word	0x200009d8
 8005b04:	20000090 	.word	0x20000090

08005b08 <display_text>:


void display_text(const char *text, uint8_t x, uint8_t y) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b090      	sub	sp, #64	@ 0x40
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
 8005b14:	4613      	mov	r3, r2
 8005b16:	70bb      	strb	r3, [r7, #2]
    char buffer[50];  // Adjust size based on your needs
    strncpy(buffer, text, sizeof(buffer) - 1);
 8005b18:	f107 030c 	add.w	r3, r7, #12
 8005b1c:	2231      	movs	r2, #49	@ 0x31
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f007 ff72 	bl	800da0a <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';  // Ensure null-termination
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    SSD1306_GotoXY(x, y); // Set cursor position
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	78ba      	ldrb	r2, [r7, #2]
 8005b32:	b292      	uxth	r2, r2
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f9c0 	bl	8005ebc <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_11x18, 1); // Display the text with the specified font
 8005b3c:	f107 030c 	add.w	r3, r7, #12
 8005b40:	2201      	movs	r2, #1
 8005b42:	4905      	ldr	r1, [pc, #20]	@ (8005b58 <display_text+0x50>)
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fa4d 	bl	8005fe4 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // Refresh the screen to show the text
 8005b4a:	f000 f911 	bl	8005d70 <SSD1306_UpdateScreen>
}
 8005b4e:	bf00      	nop
 8005b50:	3740      	adds	r7, #64	@ 0x40
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000088 	.word	0x20000088

08005b5c <display_clear>:

void display_clear(){
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8005b60:	f000 facd 	bl	80060fe <SSD1306_Clear>
	SSD1306_UpdateScreen(); // update screen
 8005b64:	f000 f904 	bl	8005d70 <SSD1306_UpdateScreen>
}
 8005b68:	bf00      	nop
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <display_message>:

void display_message(const char *text, uint8_t x, uint8_t y){
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b090      	sub	sp, #64	@ 0x40
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	70bb      	strb	r3, [r7, #2]
	char buffer[50];  // Adjust size based on your needs
	strncpy(buffer, text, sizeof(buffer) - 1);
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	2231      	movs	r2, #49	@ 0x31
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f007 ff40 	bl	800da0a <strncpy>
	buffer[sizeof(buffer) - 1] = '\0';  // Ensure null-termination
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	SSD1306_GotoXY(x, y); // Set cursor position
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	78ba      	ldrb	r2, [r7, #2]
 8005b96:	b292      	uxth	r2, r2
 8005b98:	4611      	mov	r1, r2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f98e 	bl	8005ebc <SSD1306_GotoXY>
	SSD1306_Puts(buffer, &Font_7x10, 1); // Display the text with the specified font
 8005ba0:	f107 030c 	add.w	r3, r7, #12
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4905      	ldr	r1, [pc, #20]	@ (8005bbc <display_message+0x50>)
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fa1b 	bl	8005fe4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Refresh the screen to show the text
 8005bae:	f000 f8df 	bl	8005d70 <SSD1306_UpdateScreen>
}
 8005bb2:	bf00      	nop
 8005bb4:	3740      	adds	r7, #64	@ 0x40
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000080 	.word	0x20000080

08005bc0 <display_headding>:

void display_headding(const char *text){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	display_text(text, 2, 3);
 8005bc8:	2203      	movs	r2, #3
 8005bca:	2102      	movs	r1, #2
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ff9b 	bl	8005b08 <display_text>
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0

	i2c_mux_select(&mux, 0);
 8005be2:	2100      	movs	r1, #0
 8005be4:	485f      	ldr	r0, [pc, #380]	@ (8005d64 <SSD1306_Init+0x188>)
 8005be6:	f7ff fd4d 	bl	8005684 <i2c_mux_select>

	/* Init I2C */
	ssd1306_I2C_Init();
 8005bea:	f000 fa91 	bl	8006110 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8005bee:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	2178      	movs	r1, #120	@ 0x78
 8005bf6:	485c      	ldr	r0, [pc, #368]	@ (8005d68 <SSD1306_Init+0x18c>)
 8005bf8:	f002 fdce 	bl	8008798 <HAL_I2C_IsDeviceReady>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <SSD1306_Init+0x2a>
		/* Return false */
		return 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e0a9      	b.n	8005d5a <SSD1306_Init+0x17e>
	}

	/* A little delay */
	uint32_t p = 2500;
 8005c06:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8005c0a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005c0c:	e002      	b.n	8005c14 <SSD1306_Init+0x38>
		p--;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f9      	bne.n	8005c0e <SSD1306_Init+0x32>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8005c1a:	22ae      	movs	r2, #174	@ 0xae
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	2078      	movs	r0, #120	@ 0x78
 8005c20:	f000 fafc 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8005c24:	2220      	movs	r2, #32
 8005c26:	2100      	movs	r1, #0
 8005c28:	2078      	movs	r0, #120	@ 0x78
 8005c2a:	f000 faf7 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005c2e:	2210      	movs	r2, #16
 8005c30:	2100      	movs	r1, #0
 8005c32:	2078      	movs	r0, #120	@ 0x78
 8005c34:	f000 faf2 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005c38:	22b0      	movs	r2, #176	@ 0xb0
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	2078      	movs	r0, #120	@ 0x78
 8005c3e:	f000 faed 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8005c42:	22c8      	movs	r2, #200	@ 0xc8
 8005c44:	2100      	movs	r1, #0
 8005c46:	2078      	movs	r0, #120	@ 0x78
 8005c48:	f000 fae8 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2100      	movs	r1, #0
 8005c50:	2078      	movs	r0, #120	@ 0x78
 8005c52:	f000 fae3 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005c56:	2210      	movs	r2, #16
 8005c58:	2100      	movs	r1, #0
 8005c5a:	2078      	movs	r0, #120	@ 0x78
 8005c5c:	f000 fade 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8005c60:	2240      	movs	r2, #64	@ 0x40
 8005c62:	2100      	movs	r1, #0
 8005c64:	2078      	movs	r0, #120	@ 0x78
 8005c66:	f000 fad9 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8005c6a:	2281      	movs	r2, #129	@ 0x81
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	2078      	movs	r0, #120	@ 0x78
 8005c70:	f000 fad4 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005c74:	22ff      	movs	r2, #255	@ 0xff
 8005c76:	2100      	movs	r1, #0
 8005c78:	2078      	movs	r0, #120	@ 0x78
 8005c7a:	f000 facf 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8005c7e:	22a1      	movs	r2, #161	@ 0xa1
 8005c80:	2100      	movs	r1, #0
 8005c82:	2078      	movs	r0, #120	@ 0x78
 8005c84:	f000 faca 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005c88:	22a6      	movs	r2, #166	@ 0xa6
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	2078      	movs	r0, #120	@ 0x78
 8005c8e:	f000 fac5 	bl	800621c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005c92:	22a8      	movs	r2, #168	@ 0xa8
 8005c94:	2100      	movs	r1, #0
 8005c96:	2078      	movs	r0, #120	@ 0x78
 8005c98:	f000 fac0 	bl	800621c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8005c9c:	223f      	movs	r2, #63	@ 0x3f
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2078      	movs	r0, #120	@ 0x78
 8005ca2:	f000 fabb 	bl	800621c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005ca6:	22a4      	movs	r2, #164	@ 0xa4
 8005ca8:	2100      	movs	r1, #0
 8005caa:	2078      	movs	r0, #120	@ 0x78
 8005cac:	f000 fab6 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8005cb0:	22d3      	movs	r2, #211	@ 0xd3
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	2078      	movs	r0, #120	@ 0x78
 8005cb6:	f000 fab1 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	2078      	movs	r0, #120	@ 0x78
 8005cc0:	f000 faac 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8005cc4:	22d5      	movs	r2, #213	@ 0xd5
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	2078      	movs	r0, #120	@ 0x78
 8005cca:	f000 faa7 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8005cce:	22f0      	movs	r2, #240	@ 0xf0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	2078      	movs	r0, #120	@ 0x78
 8005cd4:	f000 faa2 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8005cd8:	22d9      	movs	r2, #217	@ 0xd9
 8005cda:	2100      	movs	r1, #0
 8005cdc:	2078      	movs	r0, #120	@ 0x78
 8005cde:	f000 fa9d 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8005ce2:	2222      	movs	r2, #34	@ 0x22
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	2078      	movs	r0, #120	@ 0x78
 8005ce8:	f000 fa98 	bl	800621c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8005cec:	22da      	movs	r2, #218	@ 0xda
 8005cee:	2100      	movs	r1, #0
 8005cf0:	2078      	movs	r0, #120	@ 0x78
 8005cf2:	f000 fa93 	bl	800621c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8005cf6:	2212      	movs	r2, #18
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	2078      	movs	r0, #120	@ 0x78
 8005cfc:	f000 fa8e 	bl	800621c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8005d00:	22db      	movs	r2, #219	@ 0xdb
 8005d02:	2100      	movs	r1, #0
 8005d04:	2078      	movs	r0, #120	@ 0x78
 8005d06:	f000 fa89 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2078      	movs	r0, #120	@ 0x78
 8005d10:	f000 fa84 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8005d14:	228d      	movs	r2, #141	@ 0x8d
 8005d16:	2100      	movs	r1, #0
 8005d18:	2078      	movs	r0, #120	@ 0x78
 8005d1a:	f000 fa7f 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8005d1e:	2214      	movs	r2, #20
 8005d20:	2100      	movs	r1, #0
 8005d22:	2078      	movs	r0, #120	@ 0x78
 8005d24:	f000 fa7a 	bl	800621c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005d28:	22af      	movs	r2, #175	@ 0xaf
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	2078      	movs	r0, #120	@ 0x78
 8005d2e:	f000 fa75 	bl	800621c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8005d32:	222e      	movs	r2, #46	@ 0x2e
 8005d34:	2100      	movs	r1, #0
 8005d36:	2078      	movs	r0, #120	@ 0x78
 8005d38:	f000 fa70 	bl	800621c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	f000 f845 	bl	8005dcc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8005d42:	f000 f815 	bl	8005d70 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8005d46:	4b09      	ldr	r3, [pc, #36]	@ (8005d6c <SSD1306_Init+0x190>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005d4c:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <SSD1306_Init+0x190>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8005d52:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <SSD1306_Init+0x190>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8005d58:	2301      	movs	r3, #1
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000054 	.word	0x20000054
 8005d68:	20000344 	.word	0x20000344
 8005d6c:	20000de0 	.word	0x20000de0

08005d70 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8005d76:	2300      	movs	r3, #0
 8005d78:	71fb      	strb	r3, [r7, #7]
 8005d7a:	e01d      	b.n	8005db8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	3b50      	subs	r3, #80	@ 0x50
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	2100      	movs	r1, #0
 8005d86:	2078      	movs	r0, #120	@ 0x78
 8005d88:	f000 fa48 	bl	800621c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2100      	movs	r1, #0
 8005d90:	2078      	movs	r0, #120	@ 0x78
 8005d92:	f000 fa43 	bl	800621c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8005d96:	2210      	movs	r2, #16
 8005d98:	2100      	movs	r1, #0
 8005d9a:	2078      	movs	r0, #120	@ 0x78
 8005d9c:	f000 fa3e 	bl	800621c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	01db      	lsls	r3, r3, #7
 8005da4:	4a08      	ldr	r2, [pc, #32]	@ (8005dc8 <SSD1306_UpdateScreen+0x58>)
 8005da6:	441a      	add	r2, r3
 8005da8:	2380      	movs	r3, #128	@ 0x80
 8005daa:	2140      	movs	r1, #64	@ 0x40
 8005dac:	2078      	movs	r0, #120	@ 0x78
 8005dae:	f000 f9c9 	bl	8006144 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	3301      	adds	r3, #1
 8005db6:	71fb      	strb	r3, [r7, #7]
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b07      	cmp	r3, #7
 8005dbc:	d9de      	bls.n	8005d7c <SSD1306_UpdateScreen+0xc>
	}
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	200009e0 	.word	0x200009e0

08005dcc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <SSD1306_Fill+0x14>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e000      	b.n	8005de2 <SSD1306_Fill+0x16>
 8005de0:	23ff      	movs	r3, #255	@ 0xff
 8005de2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005de6:	4619      	mov	r1, r3
 8005de8:	4803      	ldr	r0, [pc, #12]	@ (8005df8 <SSD1306_Fill+0x2c>)
 8005dea:	f007 fe06 	bl	800d9fa <memset>
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200009e0 	.word	0x200009e0

08005dfc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	80fb      	strh	r3, [r7, #6]
 8005e06:	460b      	mov	r3, r1
 8005e08:	80bb      	strh	r3, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	70fb      	strb	r3, [r7, #3]
	if (
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e12:	d848      	bhi.n	8005ea6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8005e14:	88bb      	ldrh	r3, [r7, #4]
 8005e16:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e18:	d845      	bhi.n	8005ea6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8005e1a:	4b26      	ldr	r3, [pc, #152]	@ (8005eb4 <SSD1306_DrawPixel+0xb8>)
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bf0c      	ite	eq
 8005e28:	2301      	moveq	r3, #1
 8005e2a:	2300      	movne	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d11a      	bne.n	8005e6c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	88bb      	ldrh	r3, [r7, #4]
 8005e3a:	08db      	lsrs	r3, r3, #3
 8005e3c:	b298      	uxth	r0, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	01db      	lsls	r3, r3, #7
 8005e42:	4413      	add	r3, r2
 8005e44:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <SSD1306_DrawPixel+0xbc>)
 8005e46:	5cd3      	ldrb	r3, [r2, r3]
 8005e48:	b25a      	sxtb	r2, r3
 8005e4a:	88bb      	ldrh	r3, [r7, #4]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b259      	sxtb	r1, r3
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	4603      	mov	r3, r0
 8005e60:	01db      	lsls	r3, r3, #7
 8005e62:	4413      	add	r3, r2
 8005e64:	b2c9      	uxtb	r1, r1
 8005e66:	4a14      	ldr	r2, [pc, #80]	@ (8005eb8 <SSD1306_DrawPixel+0xbc>)
 8005e68:	54d1      	strb	r1, [r2, r3]
 8005e6a:	e01d      	b.n	8005ea8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	88bb      	ldrh	r3, [r7, #4]
 8005e70:	08db      	lsrs	r3, r3, #3
 8005e72:	b298      	uxth	r0, r3
 8005e74:	4603      	mov	r3, r0
 8005e76:	01db      	lsls	r3, r3, #7
 8005e78:	4413      	add	r3, r2
 8005e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8005eb8 <SSD1306_DrawPixel+0xbc>)
 8005e7c:	5cd3      	ldrb	r3, [r2, r3]
 8005e7e:	b25a      	sxtb	r2, r3
 8005e80:	88bb      	ldrh	r3, [r7, #4]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2101      	movs	r1, #1
 8005e88:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8c:	b25b      	sxtb	r3, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	b25b      	sxtb	r3, r3
 8005e92:	4013      	ands	r3, r2
 8005e94:	b259      	sxtb	r1, r3
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	01db      	lsls	r3, r3, #7
 8005e9c:	4413      	add	r3, r2
 8005e9e:	b2c9      	uxtb	r1, r1
 8005ea0:	4a05      	ldr	r2, [pc, #20]	@ (8005eb8 <SSD1306_DrawPixel+0xbc>)
 8005ea2:	54d1      	strb	r1, [r2, r3]
 8005ea4:	e000      	b.n	8005ea8 <SSD1306_DrawPixel+0xac>
		return;
 8005ea6:	bf00      	nop
	}
}
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000de0 	.word	0x20000de0
 8005eb8:	200009e0 	.word	0x200009e0

08005ebc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	460a      	mov	r2, r1
 8005ec6:	80fb      	strh	r3, [r7, #6]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005ecc:	4a05      	ldr	r2, [pc, #20]	@ (8005ee4 <SSD1306_GotoXY+0x28>)
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8005ed2:	4a04      	ldr	r2, [pc, #16]	@ (8005ee4 <SSD1306_GotoXY+0x28>)
 8005ed4:	88bb      	ldrh	r3, [r7, #4]
 8005ed6:	8053      	strh	r3, [r2, #2]
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000de0 	.word	0x20000de0

08005ee8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005ef8:	4b39      	ldr	r3, [pc, #228]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	4413      	add	r3, r2
	if (
 8005f04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f06:	dc07      	bgt.n	8005f18 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005f08:	4b35      	ldr	r3, [pc, #212]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005f0a:	885b      	ldrh	r3, [r3, #2]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005f14:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f16:	dd01      	ble.n	8005f1c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e05d      	b.n	8005fd8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e04b      	b.n	8005fba <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	3b20      	subs	r3, #32
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	7849      	ldrb	r1, [r1, #1]
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4619      	mov	r1, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	440b      	add	r3, r1
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	e030      	b.n	8005fa8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005f56:	4b22      	ldr	r3, [pc, #136]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005f58:	881a      	ldrh	r2, [r3, #0]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	b298      	uxth	r0, r3
 8005f62:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005f64:	885a      	ldrh	r2, [r3, #2]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	79ba      	ldrb	r2, [r7, #6]
 8005f70:	4619      	mov	r1, r3
 8005f72:	f7ff ff43 	bl	8005dfc <SSD1306_DrawPixel>
 8005f76:	e014      	b.n	8005fa2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005f78:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	b298      	uxth	r0, r3
 8005f84:	4b16      	ldr	r3, [pc, #88]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005f86:	885a      	ldrh	r2, [r3, #2]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	b299      	uxth	r1, r3
 8005f90:	79bb      	ldrb	r3, [r7, #6]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f7ff ff2d 	bl	8005dfc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d3c8      	bcc.n	8005f46 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d3ad      	bcc.n	8005f22 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8005fc6:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	7812      	ldrb	r2, [r2, #0]
 8005fce:	4413      	add	r3, r2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	4b03      	ldr	r3, [pc, #12]	@ (8005fe0 <SSD1306_Putc+0xf8>)
 8005fd4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000de0 	.word	0x20000de0

08005fe4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005ff2:	e012      	b.n	800601a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	79fa      	ldrb	r2, [r7, #7]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff ff73 	bl	8005ee8 <SSD1306_Putc>
 8006002:	4603      	mov	r3, r0
 8006004:	461a      	mov	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d002      	beq.n	8006014 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	e008      	b.n	8006026 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e8      	bne.n	8005ff4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	781b      	ldrb	r3, [r3, #0]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	60ba      	str	r2, [r7, #8]
 8006036:	461a      	mov	r2, r3
 8006038:	4603      	mov	r3, r0
 800603a:	81fb      	strh	r3, [r7, #14]
 800603c:	460b      	mov	r3, r1
 800603e:	81bb      	strh	r3, [r7, #12]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8006044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006048:	3307      	adds	r3, #7
 800604a:	2b00      	cmp	r3, #0
 800604c:	da00      	bge.n	8006050 <SSD1306_DrawBitmap+0x22>
 800604e:	3307      	adds	r3, #7
 8006050:	10db      	asrs	r3, r3, #3
 8006052:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8006058:	2300      	movs	r3, #0
 800605a:	82bb      	strh	r3, [r7, #20]
 800605c:	e044      	b.n	80060e8 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800605e:	2300      	movs	r3, #0
 8006060:	827b      	strh	r3, [r7, #18]
 8006062:	e02f      	b.n	80060c4 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8006064:	8a7b      	ldrh	r3, [r7, #18]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
 8006074:	e012      	b.n	800609c <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8006076:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800607a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800607e:	fb03 f202 	mul.w	r2, r3, r2
 8006082:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006086:	2b00      	cmp	r3, #0
 8006088:	da00      	bge.n	800608c <SSD1306_DrawBitmap+0x5e>
 800608a:	3307      	adds	r3, #7
 800608c:	10db      	asrs	r3, r3, #3
 800608e:	b21b      	sxth	r3, r3
 8006090:	4413      	add	r3, r2
 8006092:	461a      	mov	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4413      	add	r3, r2
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800609c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	da09      	bge.n	80060b8 <SSD1306_DrawBitmap+0x8a>
 80060a4:	89fa      	ldrh	r2, [r7, #14]
 80060a6:	8a7b      	ldrh	r3, [r7, #18]
 80060a8:	4413      	add	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	89b9      	ldrh	r1, [r7, #12]
 80060ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fea2 	bl	8005dfc <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80060b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	827b      	strh	r3, [r7, #18]
 80060c4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80060c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	dbc9      	blt.n	8006064 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80060d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3301      	adds	r3, #1
 80060d8:	b29b      	uxth	r3, r3
 80060da:	82bb      	strh	r3, [r7, #20]
 80060dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3301      	adds	r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	81bb      	strh	r3, [r7, #12]
 80060e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80060ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	dbb4      	blt.n	800605e <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006102:	2000      	movs	r0, #0
 8006104:	f7ff fe62 	bl	8005dcc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8006108:	f7ff fe32 	bl	8005d70 <SSD1306_UpdateScreen>
}
 800610c:	bf00      	nop
 800610e:	bd80      	pop	{r7, pc}

08006110 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
	i2c_mux_select(&mux, 0);
 8006116:	2100      	movs	r1, #0
 8006118:	4808      	ldr	r0, [pc, #32]	@ (800613c <ssd1306_I2C_Init+0x2c>)
 800611a:	f7ff fab3 	bl	8005684 <i2c_mux_select>
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800611e:	4b08      	ldr	r3, [pc, #32]	@ (8006140 <ssd1306_I2C_Init+0x30>)
 8006120:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006122:	e002      	b.n	800612a <ssd1306_I2C_Init+0x1a>
		p--;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3b01      	subs	r3, #1
 8006128:	607b      	str	r3, [r7, #4]
	while(p>0)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f9      	bne.n	8006124 <ssd1306_I2C_Init+0x14>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000054 	.word	0x20000054
 8006140:	0003d090 	.word	0x0003d090

08006144 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b0c7      	sub	sp, #284	@ 0x11c
 8006148:	af02      	add	r7, sp, #8
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8006152:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8006156:	600a      	str	r2, [r1, #0]
 8006158:	4619      	mov	r1, r3
 800615a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800615e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8006162:	4622      	mov	r2, r4
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800616a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800616e:	4602      	mov	r2, r0
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006176:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800617a:	460a      	mov	r2, r1
 800617c:	801a      	strh	r2, [r3, #0]
i2c_mux_select(&mux, 0);
 800617e:	2100      	movs	r1, #0
 8006180:	4824      	ldr	r0, [pc, #144]	@ (8006214 <ssd1306_I2C_WriteMulti+0xd0>)
 8006182:	f7ff fa7f 	bl	8005684 <i2c_mux_select>
uint8_t dt[256];
dt[0] = reg;
 8006186:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8006192:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800619a:	2300      	movs	r3, #0
 800619c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80061a0:	e015      	b.n	80061ce <ssd1306_I2C_WriteMulti+0x8a>
dt[i+1] = data[i];
 80061a2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80061a6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80061aa:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	441a      	add	r2, r3
 80061b2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80061b6:	3301      	adds	r3, #1
 80061b8:	7811      	ldrb	r1, [r2, #0]
 80061ba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80061be:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80061c2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80061c4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80061c8:	3301      	adds	r3, #1
 80061ca:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80061ce:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80061d8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80061dc:	8812      	ldrh	r2, [r2, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d8df      	bhi.n	80061a2 <ssd1306_I2C_WriteMulti+0x5e>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80061e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061e6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b299      	uxth	r1, r3
 80061ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f107 020c 	add.w	r2, r7, #12
 8006200:	200a      	movs	r0, #10
 8006202:	9000      	str	r0, [sp, #0]
 8006204:	4804      	ldr	r0, [pc, #16]	@ (8006218 <ssd1306_I2C_WriteMulti+0xd4>)
 8006206:	f001 fc6b 	bl	8007ae0 <HAL_I2C_Master_Transmit>
}
 800620a:	bf00      	nop
 800620c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8006210:	46bd      	mov	sp, r7
 8006212:	bd90      	pop	{r4, r7, pc}
 8006214:	20000054 	.word	0x20000054
 8006218:	20000344 	.word	0x20000344

0800621c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af02      	add	r7, sp, #8
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
 8006226:	460b      	mov	r3, r1
 8006228:	71bb      	strb	r3, [r7, #6]
 800622a:	4613      	mov	r3, r2
 800622c:	717b      	strb	r3, [r7, #5]
	i2c_mux_select(&mux, 0);
 800622e:	2100      	movs	r1, #0
 8006230:	480a      	ldr	r0, [pc, #40]	@ (800625c <ssd1306_I2C_Write+0x40>)
 8006232:	f7ff fa27 	bl	8005684 <i2c_mux_select>
	uint8_t dt[2];
	dt[0] = reg;
 8006236:	79bb      	ldrb	r3, [r7, #6]
 8006238:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800623a:	797b      	ldrb	r3, [r7, #5]
 800623c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	b299      	uxth	r1, r3
 8006242:	f107 020c 	add.w	r2, r7, #12
 8006246:	230a      	movs	r3, #10
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2302      	movs	r3, #2
 800624c:	4804      	ldr	r0, [pc, #16]	@ (8006260 <ssd1306_I2C_Write+0x44>)
 800624e:	f001 fc47 	bl	8007ae0 <HAL_I2C_Master_Transmit>
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000054 	.word	0x20000054
 8006260:	20000344 	.word	0x20000344

08006264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006268:	4b0e      	ldr	r3, [pc, #56]	@ (80062a4 <HAL_Init+0x40>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a0d      	ldr	r2, [pc, #52]	@ (80062a4 <HAL_Init+0x40>)
 800626e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006274:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <HAL_Init+0x40>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a0a      	ldr	r2, [pc, #40]	@ (80062a4 <HAL_Init+0x40>)
 800627a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800627e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006280:	4b08      	ldr	r3, [pc, #32]	@ (80062a4 <HAL_Init+0x40>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a07      	ldr	r2, [pc, #28]	@ (80062a4 <HAL_Init+0x40>)
 8006286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800628c:	2003      	movs	r0, #3
 800628e:	f000 fd5f 	bl	8006d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006292:	2000      	movs	r0, #0
 8006294:	f000 f808 	bl	80062a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006298:	f7fe f966 	bl	8004568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40023c00 	.word	0x40023c00

080062a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062b0:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <HAL_InitTick+0x54>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <HAL_InitTick+0x58>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	4619      	mov	r1, r3
 80062ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062be:	fbb3 f3f1 	udiv	r3, r3, r1
 80062c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fd77 	bl	8006dba <HAL_SYSTICK_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e00e      	b.n	80062f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b0f      	cmp	r3, #15
 80062da:	d80a      	bhi.n	80062f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062dc:	2200      	movs	r2, #0
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	f000 fd3f 	bl	8006d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062e8:	4a06      	ldr	r2, [pc, #24]	@ (8006304 <HAL_InitTick+0x5c>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e000      	b.n	80062f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000064 	.word	0x20000064
 8006300:	2000009c 	.word	0x2000009c
 8006304:	20000098 	.word	0x20000098

08006308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <HAL_IncTick+0x20>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	4b06      	ldr	r3, [pc, #24]	@ (800632c <HAL_IncTick+0x24>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4413      	add	r3, r2
 8006318:	4a04      	ldr	r2, [pc, #16]	@ (800632c <HAL_IncTick+0x24>)
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	2000009c 	.word	0x2000009c
 800632c:	20000de8 	.word	0x20000de8

08006330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return uwTick;
 8006334:	4b03      	ldr	r3, [pc, #12]	@ (8006344 <HAL_GetTick+0x14>)
 8006336:	681b      	ldr	r3, [r3, #0]
}
 8006338:	4618      	mov	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000de8 	.word	0x20000de8

08006348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006350:	f7ff ffee 	bl	8006330 <HAL_GetTick>
 8006354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d005      	beq.n	800636e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006362:	4b0a      	ldr	r3, [pc, #40]	@ (800638c <HAL_Delay+0x44>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800636e:	bf00      	nop
 8006370:	f7ff ffde 	bl	8006330 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d8f7      	bhi.n	8006370 <HAL_Delay+0x28>
  {
  }
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	2000009c 	.word	0x2000009c

08006390 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e033      	b.n	800640e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fe f902 	bl	80045b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	f003 0310 	and.w	r3, r3, #16
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d118      	bne.n	8006400 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063d6:	f023 0302 	bic.w	r3, r3, #2
 80063da:	f043 0202 	orr.w	r2, r3, #2
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fae8 	bl	80069b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	f043 0201 	orr.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80063fe:	e001      	b.n	8006404 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_ADC_Start+0x1a>
 800642e:	2302      	movs	r3, #2
 8006430:	e0b2      	b.n	8006598 <HAL_ADC_Start+0x180>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d018      	beq.n	800647a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006458:	4b52      	ldr	r3, [pc, #328]	@ (80065a4 <HAL_ADC_Start+0x18c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a52      	ldr	r2, [pc, #328]	@ (80065a8 <HAL_ADC_Start+0x190>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	0c9a      	lsrs	r2, r3, #18
 8006464:	4613      	mov	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	4413      	add	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800646c:	e002      	b.n	8006474 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3b01      	subs	r3, #1
 8006472:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f9      	bne.n	800646e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d17a      	bne.n	800657e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006490:	f023 0301 	bic.w	r3, r3, #1
 8006494:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80064b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c6:	d106      	bne.n	80064d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064cc:	f023 0206 	bic.w	r2, r3, #6
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80064d4:	e002      	b.n	80064dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064e4:	4b31      	ldr	r3, [pc, #196]	@ (80065ac <HAL_ADC_Start+0x194>)
 80064e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80064f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d12a      	bne.n	8006554 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2b      	ldr	r2, [pc, #172]	@ (80065b0 <HAL_ADC_Start+0x198>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d015      	beq.n	8006534 <HAL_ADC_Start+0x11c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a29      	ldr	r2, [pc, #164]	@ (80065b4 <HAL_ADC_Start+0x19c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d105      	bne.n	800651e <HAL_ADC_Start+0x106>
 8006512:	4b26      	ldr	r3, [pc, #152]	@ (80065ac <HAL_ADC_Start+0x194>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a25      	ldr	r2, [pc, #148]	@ (80065b8 <HAL_ADC_Start+0x1a0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d136      	bne.n	8006596 <HAL_ADC_Start+0x17e>
 8006528:	4b20      	ldr	r3, [pc, #128]	@ (80065ac <HAL_ADC_Start+0x194>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	d130      	bne.n	8006596 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d129      	bne.n	8006596 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	e020      	b.n	8006596 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a15      	ldr	r2, [pc, #84]	@ (80065b0 <HAL_ADC_Start+0x198>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d11b      	bne.n	8006596 <HAL_ADC_Start+0x17e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d114      	bne.n	8006596 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800657a:	609a      	str	r2, [r3, #8]
 800657c:	e00b      	b.n	8006596 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	f043 0210 	orr.w	r2, r3, #16
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20000064 	.word	0x20000064
 80065a8:	431bde83 	.word	0x431bde83
 80065ac:	40012300 	.word	0x40012300
 80065b0:	40012000 	.word	0x40012000
 80065b4:	40012100 	.word	0x40012100
 80065b8:	40012200 	.word	0x40012200

080065bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_ADC_Stop+0x16>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e021      	b.n	8006616 <HAL_ADC_Stop+0x5a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663e:	d113      	bne.n	8006668 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800664a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800664e:	d10b      	bne.n	8006668 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	f043 0220 	orr.w	r2, r3, #32
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e063      	b.n	8006730 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006668:	f7ff fe62 	bl	8006330 <HAL_GetTick>
 800666c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800666e:	e021      	b.n	80066b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d01d      	beq.n	80066b4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <HAL_ADC_PollForConversion+0x6c>
 800667e:	f7ff fe57 	bl	8006330 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d212      	bcs.n	80066b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d00b      	beq.n	80066b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a0:	f043 0204 	orr.w	r2, r3, #4
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e03d      	b.n	8006730 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d1d6      	bne.n	8006670 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0212 	mvn.w	r2, #18
 80066ca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d123      	bne.n	800672e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d11f      	bne.n	800672e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006706:	2b00      	cmp	r3, #0
 8006708:	d111      	bne.n	800672e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_ADC_ConfigChannel+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e113      	b.n	8006998 <HAL_ADC_ConfigChannel+0x244>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b09      	cmp	r3, #9
 800677e:	d925      	bls.n	80067cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68d9      	ldr	r1, [r3, #12]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	4613      	mov	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4413      	add	r3, r2
 8006794:	3b1e      	subs	r3, #30
 8006796:	2207      	movs	r2, #7
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	43da      	mvns	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	400a      	ands	r2, r1
 80067a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68d9      	ldr	r1, [r3, #12]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	4618      	mov	r0, r3
 80067b8:	4603      	mov	r3, r0
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	4403      	add	r3, r0
 80067be:	3b1e      	subs	r3, #30
 80067c0:	409a      	lsls	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e022      	b.n	8006812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6919      	ldr	r1, [r3, #16]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	4613      	mov	r3, r2
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	4413      	add	r3, r2
 80067e0:	2207      	movs	r2, #7
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43da      	mvns	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	400a      	ands	r2, r1
 80067ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6919      	ldr	r1, [r3, #16]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	4618      	mov	r0, r3
 8006802:	4603      	mov	r3, r0
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4403      	add	r3, r0
 8006808:	409a      	lsls	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b06      	cmp	r3, #6
 8006818:	d824      	bhi.n	8006864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	3b05      	subs	r3, #5
 800682c:	221f      	movs	r2, #31
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43da      	mvns	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	400a      	ands	r2, r1
 800683a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	4618      	mov	r0, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	3b05      	subs	r3, #5
 8006856:	fa00 f203 	lsl.w	r2, r0, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	635a      	str	r2, [r3, #52]	@ 0x34
 8006862:	e04c      	b.n	80068fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d824      	bhi.n	80068b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	3b23      	subs	r3, #35	@ 0x23
 800687e:	221f      	movs	r2, #31
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	43da      	mvns	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	400a      	ands	r2, r1
 800688c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	4618      	mov	r0, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	3b23      	subs	r3, #35	@ 0x23
 80068a8:	fa00 f203 	lsl.w	r2, r0, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80068b4:	e023      	b.n	80068fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	3b41      	subs	r3, #65	@ 0x41
 80068c8:	221f      	movs	r2, #31
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	43da      	mvns	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	400a      	ands	r2, r1
 80068d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	4618      	mov	r0, r3
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	3b41      	subs	r3, #65	@ 0x41
 80068f2:	fa00 f203 	lsl.w	r2, r0, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068fe:	4b29      	ldr	r3, [pc, #164]	@ (80069a4 <HAL_ADC_ConfigChannel+0x250>)
 8006900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a28      	ldr	r2, [pc, #160]	@ (80069a8 <HAL_ADC_ConfigChannel+0x254>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d10f      	bne.n	800692c <HAL_ADC_ConfigChannel+0x1d8>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b12      	cmp	r3, #18
 8006912:	d10b      	bne.n	800692c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <HAL_ADC_ConfigChannel+0x254>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d12b      	bne.n	800698e <HAL_ADC_ConfigChannel+0x23a>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <HAL_ADC_ConfigChannel+0x258>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <HAL_ADC_ConfigChannel+0x1f4>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b11      	cmp	r3, #17
 8006946:	d122      	bne.n	800698e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a11      	ldr	r2, [pc, #68]	@ (80069ac <HAL_ADC_ConfigChannel+0x258>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d111      	bne.n	800698e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800696a:	4b11      	ldr	r3, [pc, #68]	@ (80069b0 <HAL_ADC_ConfigChannel+0x25c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a11      	ldr	r2, [pc, #68]	@ (80069b4 <HAL_ADC_ConfigChannel+0x260>)
 8006970:	fba2 2303 	umull	r2, r3, r2, r3
 8006974:	0c9a      	lsrs	r2, r3, #18
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006980:	e002      	b.n	8006988 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	3b01      	subs	r3, #1
 8006986:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f9      	bne.n	8006982 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40012300 	.word	0x40012300
 80069a8:	40012000 	.word	0x40012000
 80069ac:	10000012 	.word	0x10000012
 80069b0:	20000064 	.word	0x20000064
 80069b4:	431bde83 	.word	0x431bde83

080069b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069c0:	4b79      	ldr	r3, [pc, #484]	@ (8006ba8 <ADC_Init+0x1f0>)
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	431a      	orrs	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6859      	ldr	r1, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	021a      	lsls	r2, r3, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6859      	ldr	r1, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6899      	ldr	r1, [r3, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4a:	4a58      	ldr	r2, [pc, #352]	@ (8006bac <ADC_Init+0x1f4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d022      	beq.n	8006a96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6899      	ldr	r1, [r3, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6899      	ldr	r1, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	e00f      	b.n	8006ab6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006ab4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0202 	bic.w	r2, r2, #2
 8006ac4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6899      	ldr	r1, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	7e1b      	ldrb	r3, [r3, #24]
 8006ad0:	005a      	lsls	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006af2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006b02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	035a      	lsls	r2, r3, #13
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	e007      	b.n	8006b2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	051a      	lsls	r2, r3, #20
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b6e:	025a      	lsls	r2, r3, #9
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6899      	ldr	r1, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	029a      	lsls	r2, r3, #10
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	609a      	str	r2, [r3, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	40012300 	.word	0x40012300
 8006bac:	0f000001 	.word	0x0f000001

08006bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006be2:	4a04      	ldr	r2, [pc, #16]	@ (8006bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	60d3      	str	r3, [r2, #12]
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	e000ed00 	.word	0xe000ed00

08006bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bfc:	4b04      	ldr	r3, [pc, #16]	@ (8006c10 <__NVIC_GetPriorityGrouping+0x18>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	f003 0307 	and.w	r3, r3, #7
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	e000ed00 	.word	0xe000ed00

08006c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	db0b      	blt.n	8006c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	f003 021f 	and.w	r2, r3, #31
 8006c2c:	4907      	ldr	r1, [pc, #28]	@ (8006c4c <__NVIC_EnableIRQ+0x38>)
 8006c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	2001      	movs	r0, #1
 8006c36:	fa00 f202 	lsl.w	r2, r0, r2
 8006c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	e000e100 	.word	0xe000e100

08006c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	6039      	str	r1, [r7, #0]
 8006c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	db0a      	blt.n	8006c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	490c      	ldr	r1, [pc, #48]	@ (8006c9c <__NVIC_SetPriority+0x4c>)
 8006c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6e:	0112      	lsls	r2, r2, #4
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	440b      	add	r3, r1
 8006c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c78:	e00a      	b.n	8006c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	4908      	ldr	r1, [pc, #32]	@ (8006ca0 <__NVIC_SetPriority+0x50>)
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	3b04      	subs	r3, #4
 8006c88:	0112      	lsls	r2, r2, #4
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	761a      	strb	r2, [r3, #24]
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	e000e100 	.word	0xe000e100
 8006ca0:	e000ed00 	.word	0xe000ed00

08006ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b089      	sub	sp, #36	@ 0x24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f1c3 0307 	rsb	r3, r3, #7
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	bf28      	it	cs
 8006cc2:	2304      	movcs	r3, #4
 8006cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	2b06      	cmp	r3, #6
 8006ccc:	d902      	bls.n	8006cd4 <NVIC_EncodePriority+0x30>
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3b03      	subs	r3, #3
 8006cd2:	e000      	b.n	8006cd6 <NVIC_EncodePriority+0x32>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43da      	mvns	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	401a      	ands	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cec:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	43d9      	mvns	r1, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cfc:	4313      	orrs	r3, r2
         );
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3724      	adds	r7, #36	@ 0x24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d1c:	d301      	bcc.n	8006d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e00f      	b.n	8006d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d22:	4a0a      	ldr	r2, [pc, #40]	@ (8006d4c <SysTick_Config+0x40>)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d2a:	210f      	movs	r1, #15
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	f7ff ff8e 	bl	8006c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <SysTick_Config+0x40>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d3a:	4b04      	ldr	r3, [pc, #16]	@ (8006d4c <SysTick_Config+0x40>)
 8006d3c:	2207      	movs	r2, #7
 8006d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	e000e010 	.word	0xe000e010

08006d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff29 	bl	8006bb0 <__NVIC_SetPriorityGrouping>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d78:	f7ff ff3e 	bl	8006bf8 <__NVIC_GetPriorityGrouping>
 8006d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	6978      	ldr	r0, [r7, #20]
 8006d84:	f7ff ff8e 	bl	8006ca4 <NVIC_EncodePriority>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ff5d 	bl	8006c50 <__NVIC_SetPriority>
}
 8006d96:	bf00      	nop
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	4603      	mov	r3, r0
 8006da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ff31 	bl	8006c14 <__NVIC_EnableIRQ>
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff ffa2 	bl	8006d0c <SysTick_Config>
 8006dc8:	4603      	mov	r3, r0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006de0:	f7ff faa6 	bl	8006330 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e099      	b.n	8006f24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e10:	e00f      	b.n	8006e32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e12:	f7ff fa8d 	bl	8006330 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b05      	cmp	r3, #5
 8006e1e:	d908      	bls.n	8006e32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e078      	b.n	8006f24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e8      	bne.n	8006e12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4b38      	ldr	r3, [pc, #224]	@ (8006f2c <HAL_DMA_Init+0x158>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d107      	bne.n	8006e9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e94:	4313      	orrs	r3, r2
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0307 	bic.w	r3, r3, #7
 8006eb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d117      	bne.n	8006ef6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fa7b 	bl	80073d4 <DMA_CheckFifoParam>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2240      	movs	r2, #64	@ 0x40
 8006ee8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e016      	b.n	8006f24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa32 	bl	8007368 <DMA_CalcBaseAndBitshift>
 8006f04:	4603      	mov	r3, r0
 8006f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0c:	223f      	movs	r2, #63	@ 0x3f
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	f010803f 	.word	0xf010803f

08006f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f3e:	f7ff f9f7 	bl	8006330 <HAL_GetTick>
 8006f42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d008      	beq.n	8006f62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2280      	movs	r2, #128	@ 0x80
 8006f54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e052      	b.n	8007008 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0216 	bic.w	r2, r2, #22
 8006f70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <HAL_DMA_Abort+0x62>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0208 	bic.w	r2, r2, #8
 8006fa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0201 	bic.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fb2:	e013      	b.n	8006fdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fb4:	f7ff f9bc 	bl	8006330 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b05      	cmp	r3, #5
 8006fc0:	d90c      	bls.n	8006fdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2203      	movs	r2, #3
 8006fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e015      	b.n	8007008 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e4      	bne.n	8006fb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fee:	223f      	movs	r2, #63	@ 0x3f
 8006ff0:	409a      	lsls	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d004      	beq.n	800702e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2280      	movs	r2, #128	@ 0x80
 8007028:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e00c      	b.n	8007048 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2205      	movs	r2, #5
 8007032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007060:	4b8e      	ldr	r3, [pc, #568]	@ (800729c <HAL_DMA_IRQHandler+0x248>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a8e      	ldr	r2, [pc, #568]	@ (80072a0 <HAL_DMA_IRQHandler+0x24c>)
 8007066:	fba2 2303 	umull	r2, r3, r2, r3
 800706a:	0a9b      	lsrs	r3, r3, #10
 800706c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007072:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800707e:	2208      	movs	r2, #8
 8007080:	409a      	lsls	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01a      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0204 	bic.w	r2, r2, #4
 80070a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ac:	2208      	movs	r2, #8
 80070ae:	409a      	lsls	r2, r3
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b8:	f043 0201 	orr.w	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c4:	2201      	movs	r2, #1
 80070c6:	409a      	lsls	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d012      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e2:	2201      	movs	r2, #1
 80070e4:	409a      	lsls	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ee:	f043 0202 	orr.w	r2, r3, #2
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fa:	2204      	movs	r2, #4
 80070fc:	409a      	lsls	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d012      	beq.n	800712c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007118:	2204      	movs	r2, #4
 800711a:	409a      	lsls	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007124:	f043 0204 	orr.w	r2, r3, #4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007130:	2210      	movs	r2, #16
 8007132:	409a      	lsls	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d043      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d03c      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800714e:	2210      	movs	r2, #16
 8007150:	409a      	lsls	r2, r3
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d018      	beq.n	8007196 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d108      	bne.n	8007184 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d024      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
 8007182:	e01f      	b.n	80071c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01b      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
 8007194:	e016      	b.n	80071c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d107      	bne.n	80071b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0208 	bic.w	r2, r2, #8
 80071b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c8:	2220      	movs	r2, #32
 80071ca:	409a      	lsls	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 808f 	beq.w	80072f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8087 	beq.w	80072f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ea:	2220      	movs	r2, #32
 80071ec:	409a      	lsls	r2, r3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b05      	cmp	r3, #5
 80071fc:	d136      	bne.n	800726c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0216 	bic.w	r2, r2, #22
 800720c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695a      	ldr	r2, [r3, #20]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800721c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <HAL_DMA_IRQHandler+0x1da>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0208 	bic.w	r2, r2, #8
 800723c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007242:	223f      	movs	r2, #63	@ 0x3f
 8007244:	409a      	lsls	r2, r3
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725e:	2b00      	cmp	r3, #0
 8007260:	d07e      	beq.n	8007360 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
        }
        return;
 800726a:	e079      	b.n	8007360 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01d      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10d      	bne.n	80072a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728c:	2b00      	cmp	r3, #0
 800728e:	d031      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	e02c      	b.n	80072f4 <HAL_DMA_IRQHandler+0x2a0>
 800729a:	bf00      	nop
 800729c:	20000064 	.word	0x20000064
 80072a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d023      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
 80072b4:	e01e      	b.n	80072f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10f      	bne.n	80072e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0210 	bic.w	r2, r2, #16
 80072d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d032      	beq.n	8007362 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d022      	beq.n	800734e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2205      	movs	r2, #5
 800730c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	3301      	adds	r3, #1
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	429a      	cmp	r2, r3
 800732a:	d307      	bcc.n	800733c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f2      	bne.n	8007320 <HAL_DMA_IRQHandler+0x2cc>
 800733a:	e000      	b.n	800733e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800733c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
 800735e:	e000      	b.n	8007362 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007360:	bf00      	nop
    }
  }
}
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	3b10      	subs	r3, #16
 8007378:	4a14      	ldr	r2, [pc, #80]	@ (80073cc <DMA_CalcBaseAndBitshift+0x64>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	091b      	lsrs	r3, r3, #4
 8007380:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007382:	4a13      	ldr	r2, [pc, #76]	@ (80073d0 <DMA_CalcBaseAndBitshift+0x68>)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b03      	cmp	r3, #3
 8007394:	d909      	bls.n	80073aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800739e:	f023 0303 	bic.w	r3, r3, #3
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80073a8:	e007      	b.n	80073ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80073b2:	f023 0303 	bic.w	r3, r3, #3
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	aaaaaaab 	.word	0xaaaaaaab
 80073d0:	08012d2c 	.word	0x08012d2c

080073d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d11f      	bne.n	800742e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d856      	bhi.n	80074a2 <DMA_CheckFifoParam+0xce>
 80073f4:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <DMA_CheckFifoParam+0x28>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	0800741f 	.word	0x0800741f
 8007404:	0800740d 	.word	0x0800740d
 8007408:	080074a3 	.word	0x080074a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d046      	beq.n	80074a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800741c:	e043      	b.n	80074a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007426:	d140      	bne.n	80074aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800742c:	e03d      	b.n	80074aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007436:	d121      	bne.n	800747c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d837      	bhi.n	80074ae <DMA_CheckFifoParam+0xda>
 800743e:	a201      	add	r2, pc, #4	@ (adr r2, 8007444 <DMA_CheckFifoParam+0x70>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007455 	.word	0x08007455
 8007448:	0800745b 	.word	0x0800745b
 800744c:	08007455 	.word	0x08007455
 8007450:	0800746d 	.word	0x0800746d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
      break;
 8007458:	e030      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d025      	beq.n	80074b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800746a:	e022      	b.n	80074b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007470:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007474:	d11f      	bne.n	80074b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800747a:	e01c      	b.n	80074b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d903      	bls.n	800748a <DMA_CheckFifoParam+0xb6>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d003      	beq.n	8007490 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007488:	e018      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
      break;
 800748e:	e015      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00e      	beq.n	80074ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
      break;
 80074a0:	e00b      	b.n	80074ba <DMA_CheckFifoParam+0xe6>
      break;
 80074a2:	bf00      	nop
 80074a4:	e00a      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      break;
 80074a6:	bf00      	nop
 80074a8:	e008      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      break;
 80074aa:	bf00      	nop
 80074ac:	e006      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      break;
 80074ae:	bf00      	nop
 80074b0:	e004      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      break;
 80074b2:	bf00      	nop
 80074b4:	e002      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      break;   
 80074b6:	bf00      	nop
 80074b8:	e000      	b.n	80074bc <DMA_CheckFifoParam+0xe8>
      break;
 80074ba:	bf00      	nop
    }
  } 
  
  return status; 
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop

080074cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b089      	sub	sp, #36	@ 0x24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074da:	2300      	movs	r3, #0
 80074dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074de:	2300      	movs	r3, #0
 80074e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	e165      	b.n	80077b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80074e8:	2201      	movs	r2, #1
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4013      	ands	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	429a      	cmp	r2, r3
 8007502:	f040 8154 	bne.w	80077ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b01      	cmp	r3, #1
 8007510:	d005      	beq.n	800751e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800751a:	2b02      	cmp	r3, #2
 800751c:	d130      	bne.n	8007580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	2203      	movs	r2, #3
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	4313      	orrs	r3, r2
 8007546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007554:	2201      	movs	r2, #1
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	43db      	mvns	r3, r3
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	4013      	ands	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	f003 0201 	and.w	r2, r3, #1
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	4313      	orrs	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	2b03      	cmp	r3, #3
 800758a:	d017      	beq.n	80075bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	2203      	movs	r2, #3
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	4013      	ands	r3, r2
 80075a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d123      	bne.n	8007610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	08da      	lsrs	r2, r3, #3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3208      	adds	r2, #8
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	220f      	movs	r2, #15
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	43db      	mvns	r3, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	4313      	orrs	r3, r2
 8007600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	08da      	lsrs	r2, r3, #3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3208      	adds	r2, #8
 800760a:	69b9      	ldr	r1, [r7, #24]
 800760c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	2203      	movs	r2, #3
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	43db      	mvns	r3, r3
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	4013      	ands	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 0203 	and.w	r2, r3, #3
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4313      	orrs	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80ae 	beq.w	80077ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	4b5d      	ldr	r3, [pc, #372]	@ (80077cc <HAL_GPIO_Init+0x300>)
 8007658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765a:	4a5c      	ldr	r2, [pc, #368]	@ (80077cc <HAL_GPIO_Init+0x300>)
 800765c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007660:	6453      	str	r3, [r2, #68]	@ 0x44
 8007662:	4b5a      	ldr	r3, [pc, #360]	@ (80077cc <HAL_GPIO_Init+0x300>)
 8007664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800766e:	4a58      	ldr	r2, [pc, #352]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	3302      	adds	r3, #2
 8007676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	220f      	movs	r2, #15
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	43db      	mvns	r3, r3
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	4013      	ands	r3, r2
 8007690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a4f      	ldr	r2, [pc, #316]	@ (80077d4 <HAL_GPIO_Init+0x308>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d025      	beq.n	80076e6 <HAL_GPIO_Init+0x21a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a4e      	ldr	r2, [pc, #312]	@ (80077d8 <HAL_GPIO_Init+0x30c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d01f      	beq.n	80076e2 <HAL_GPIO_Init+0x216>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a4d      	ldr	r2, [pc, #308]	@ (80077dc <HAL_GPIO_Init+0x310>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d019      	beq.n	80076de <HAL_GPIO_Init+0x212>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a4c      	ldr	r2, [pc, #304]	@ (80077e0 <HAL_GPIO_Init+0x314>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_GPIO_Init+0x20e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a4b      	ldr	r2, [pc, #300]	@ (80077e4 <HAL_GPIO_Init+0x318>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00d      	beq.n	80076d6 <HAL_GPIO_Init+0x20a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a4a      	ldr	r2, [pc, #296]	@ (80077e8 <HAL_GPIO_Init+0x31c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d007      	beq.n	80076d2 <HAL_GPIO_Init+0x206>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a49      	ldr	r2, [pc, #292]	@ (80077ec <HAL_GPIO_Init+0x320>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <HAL_GPIO_Init+0x202>
 80076ca:	2306      	movs	r3, #6
 80076cc:	e00c      	b.n	80076e8 <HAL_GPIO_Init+0x21c>
 80076ce:	2307      	movs	r3, #7
 80076d0:	e00a      	b.n	80076e8 <HAL_GPIO_Init+0x21c>
 80076d2:	2305      	movs	r3, #5
 80076d4:	e008      	b.n	80076e8 <HAL_GPIO_Init+0x21c>
 80076d6:	2304      	movs	r3, #4
 80076d8:	e006      	b.n	80076e8 <HAL_GPIO_Init+0x21c>
 80076da:	2303      	movs	r3, #3
 80076dc:	e004      	b.n	80076e8 <HAL_GPIO_Init+0x21c>
 80076de:	2302      	movs	r3, #2
 80076e0:	e002      	b.n	80076e8 <HAL_GPIO_Init+0x21c>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <HAL_GPIO_Init+0x21c>
 80076e6:	2300      	movs	r3, #0
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	f002 0203 	and.w	r2, r2, #3
 80076ee:	0092      	lsls	r2, r2, #2
 80076f0:	4093      	lsls	r3, r2
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076f8:	4935      	ldr	r1, [pc, #212]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	089b      	lsrs	r3, r3, #2
 80076fe:	3302      	adds	r3, #2
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007706:	4b3a      	ldr	r3, [pc, #232]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	43db      	mvns	r3, r3
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	4013      	ands	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800772a:	4a31      	ldr	r2, [pc, #196]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007730:	4b2f      	ldr	r3, [pc, #188]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	43db      	mvns	r3, r3
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	4013      	ands	r3, r2
 800773e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007754:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800775a:	4b25      	ldr	r3, [pc, #148]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	43db      	mvns	r3, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4013      	ands	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800777e:	4a1c      	ldr	r2, [pc, #112]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007784:	4b1a      	ldr	r3, [pc, #104]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	43db      	mvns	r3, r3
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	4013      	ands	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077a8:	4a11      	ldr	r2, [pc, #68]	@ (80077f0 <HAL_GPIO_Init+0x324>)
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	3301      	adds	r3, #1
 80077b2:	61fb      	str	r3, [r7, #28]
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2b0f      	cmp	r3, #15
 80077b8:	f67f ae96 	bls.w	80074e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	3724      	adds	r7, #36	@ 0x24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800
 80077d0:	40013800 	.word	0x40013800
 80077d4:	40020000 	.word	0x40020000
 80077d8:	40020400 	.word	0x40020400
 80077dc:	40020800 	.word	0x40020800
 80077e0:	40020c00 	.word	0x40020c00
 80077e4:	40021000 	.word	0x40021000
 80077e8:	40021400 	.word	0x40021400
 80077ec:	40021800 	.word	0x40021800
 80077f0:	40013c00 	.word	0x40013c00

080077f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	807b      	strh	r3, [r7, #2]
 8007800:	4613      	mov	r3, r2
 8007802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007804:	787b      	ldrb	r3, [r7, #1]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800780a:	887a      	ldrh	r2, [r7, #2]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007810:	e003      	b.n	800781a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007812:	887b      	ldrh	r3, [r7, #2]
 8007814:	041a      	lsls	r2, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	619a      	str	r2, [r3, #24]
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
	...

08007828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007832:	4b08      	ldr	r3, [pc, #32]	@ (8007854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007834:	695a      	ldr	r2, [r3, #20]
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d006      	beq.n	800784c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800783e:	4a05      	ldr	r2, [pc, #20]	@ (8007854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	4618      	mov	r0, r3
 8007848:	f7f9 fe66 	bl	8001518 <HAL_GPIO_EXTI_Callback>
  }
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40013c00 	.word	0x40013c00

08007858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e12b      	b.n	8007ac2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fc fede 	bl	8004640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2224      	movs	r2, #36	@ 0x24
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0201 	bic.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078bc:	f001 fee0 	bl	8009680 <HAL_RCC_GetPCLK1Freq>
 80078c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4a81      	ldr	r2, [pc, #516]	@ (8007acc <HAL_I2C_Init+0x274>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d807      	bhi.n	80078dc <HAL_I2C_Init+0x84>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a80      	ldr	r2, [pc, #512]	@ (8007ad0 <HAL_I2C_Init+0x278>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	bf94      	ite	ls
 80078d4:	2301      	movls	r3, #1
 80078d6:	2300      	movhi	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	e006      	b.n	80078ea <HAL_I2C_Init+0x92>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4a7d      	ldr	r2, [pc, #500]	@ (8007ad4 <HAL_I2C_Init+0x27c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	bf94      	ite	ls
 80078e4:	2301      	movls	r3, #1
 80078e6:	2300      	movhi	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e0e7      	b.n	8007ac2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4a78      	ldr	r2, [pc, #480]	@ (8007ad8 <HAL_I2C_Init+0x280>)
 80078f6:	fba2 2303 	umull	r2, r3, r2, r3
 80078fa:	0c9b      	lsrs	r3, r3, #18
 80078fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	4a6a      	ldr	r2, [pc, #424]	@ (8007acc <HAL_I2C_Init+0x274>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d802      	bhi.n	800792c <HAL_I2C_Init+0xd4>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	3301      	adds	r3, #1
 800792a:	e009      	b.n	8007940 <HAL_I2C_Init+0xe8>
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007932:	fb02 f303 	mul.w	r3, r2, r3
 8007936:	4a69      	ldr	r2, [pc, #420]	@ (8007adc <HAL_I2C_Init+0x284>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	099b      	lsrs	r3, r3, #6
 800793e:	3301      	adds	r3, #1
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	430b      	orrs	r3, r1
 8007946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007952:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	495c      	ldr	r1, [pc, #368]	@ (8007acc <HAL_I2C_Init+0x274>)
 800795c:	428b      	cmp	r3, r1
 800795e:	d819      	bhi.n	8007994 <HAL_I2C_Init+0x13c>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	1e59      	subs	r1, r3, #1
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	fbb1 f3f3 	udiv	r3, r1, r3
 800796e:	1c59      	adds	r1, r3, #1
 8007970:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007974:	400b      	ands	r3, r1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <HAL_I2C_Init+0x138>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1e59      	subs	r1, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	fbb1 f3f3 	udiv	r3, r1, r3
 8007988:	3301      	adds	r3, #1
 800798a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800798e:	e051      	b.n	8007a34 <HAL_I2C_Init+0x1dc>
 8007990:	2304      	movs	r3, #4
 8007992:	e04f      	b.n	8007a34 <HAL_I2C_Init+0x1dc>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d111      	bne.n	80079c0 <HAL_I2C_Init+0x168>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	1e58      	subs	r0, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6859      	ldr	r1, [r3, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	440b      	add	r3, r1
 80079aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80079ae:	3301      	adds	r3, #1
 80079b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	e012      	b.n	80079e6 <HAL_I2C_Init+0x18e>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	1e58      	subs	r0, r3, #1
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6859      	ldr	r1, [r3, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	0099      	lsls	r1, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80079d6:	3301      	adds	r3, #1
 80079d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_I2C_Init+0x196>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e022      	b.n	8007a34 <HAL_I2C_Init+0x1dc>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10e      	bne.n	8007a14 <HAL_I2C_Init+0x1bc>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	1e58      	subs	r0, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	440b      	add	r3, r1
 8007a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a08:	3301      	adds	r3, #1
 8007a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a12:	e00f      	b.n	8007a34 <HAL_I2C_Init+0x1dc>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1e58      	subs	r0, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6859      	ldr	r1, [r3, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	0099      	lsls	r1, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	6809      	ldr	r1, [r1, #0]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69da      	ldr	r2, [r3, #28]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007a62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6911      	ldr	r1, [r2, #16]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	68d2      	ldr	r2, [r2, #12]
 8007a6e:	4311      	orrs	r1, r2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695a      	ldr	r2, [r3, #20]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	000186a0 	.word	0x000186a0
 8007ad0:	001e847f 	.word	0x001e847f
 8007ad4:	003d08ff 	.word	0x003d08ff
 8007ad8:	431bde83 	.word	0x431bde83
 8007adc:	10624dd3 	.word	0x10624dd3

08007ae0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	461a      	mov	r2, r3
 8007aec:	460b      	mov	r3, r1
 8007aee:	817b      	strh	r3, [r7, #10]
 8007af0:	4613      	mov	r3, r2
 8007af2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007af4:	f7fe fc1c 	bl	8006330 <HAL_GetTick>
 8007af8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	f040 80e0 	bne.w	8007cc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	2319      	movs	r3, #25
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4970      	ldr	r1, [pc, #448]	@ (8007cd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f001 fa3c 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e0d3      	b.n	8007cca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_I2C_Master_Transmit+0x50>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e0cc      	b.n	8007cca <HAL_I2C_Master_Transmit+0x1ea>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d007      	beq.n	8007b56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0201 	orr.w	r2, r2, #1
 8007b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2221      	movs	r2, #33	@ 0x21
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2210      	movs	r2, #16
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	893a      	ldrh	r2, [r7, #8]
 8007b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4a50      	ldr	r2, [pc, #320]	@ (8007cd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007b96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b98:	8979      	ldrh	r1, [r7, #10]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6a3a      	ldr	r2, [r7, #32]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 ff28 	bl	80089f4 <I2C_MasterRequestWrite>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e08d      	b.n	8007cca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	613b      	str	r3, [r7, #16]
 8007bc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007bc4:	e066      	b.n	8007c94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	6a39      	ldr	r1, [r7, #32]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f001 fafa 	bl	80091c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00d      	beq.n	8007bf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d107      	bne.n	8007bee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e06b      	b.n	8007cca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	781a      	ldrb	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d11b      	bne.n	8007c68 <HAL_I2C_Master_Transmit+0x188>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	6a39      	ldr	r1, [r7, #32]
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f001 faf1 	bl	8009254 <I2C_WaitOnBTFFlagUntilTimeout>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00d      	beq.n	8007c94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d107      	bne.n	8007c90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e01a      	b.n	8007cca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d194      	bne.n	8007bc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e000      	b.n	8007cca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007cc8:	2302      	movs	r3, #2
  }
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	00100002 	.word	0x00100002
 8007cd8:	ffff0000 	.word	0xffff0000

08007cdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08c      	sub	sp, #48	@ 0x30
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	460b      	mov	r3, r1
 8007cea:	817b      	strh	r3, [r7, #10]
 8007cec:	4613      	mov	r3, r2
 8007cee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cf0:	f7fe fb1e 	bl	8006330 <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	f040 8217 	bne.w	8008132 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	2319      	movs	r3, #25
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	497c      	ldr	r1, [pc, #496]	@ (8007f00 <HAL_I2C_Master_Receive+0x224>)
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f001 f93e 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e20a      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_I2C_Master_Receive+0x50>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e203      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d007      	beq.n	8007d52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0201 	orr.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2222      	movs	r2, #34	@ 0x22
 8007d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2210      	movs	r2, #16
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	893a      	ldrh	r2, [r7, #8]
 8007d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a5c      	ldr	r2, [pc, #368]	@ (8007f04 <HAL_I2C_Master_Receive+0x228>)
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d94:	8979      	ldrh	r1, [r7, #10]
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 feac 	bl	8008af8 <I2C_MasterRequestRead>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e1c4      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d113      	bne.n	8007dda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db2:	2300      	movs	r3, #0
 8007db4:	623b      	str	r3, [r7, #32]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	623b      	str	r3, [r7, #32]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	623b      	str	r3, [r7, #32]
 8007dc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e198      	b.n	800810c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d11b      	bne.n	8007e1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007df2:	2300      	movs	r3, #0
 8007df4:	61fb      	str	r3, [r7, #28]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	e178      	b.n	800810c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d11b      	bne.n	8007e5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e42:	2300      	movs	r3, #0
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	e158      	b.n	800810c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e80:	e144      	b.n	800810c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	f200 80f1 	bhi.w	800806e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d123      	bne.n	8007edc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f001 fa23 	bl	80092e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e145      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007eda:	e117      	b.n	800810c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d14e      	bne.n	8007f82 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eea:	2200      	movs	r2, #0
 8007eec:	4906      	ldr	r1, [pc, #24]	@ (8007f08 <HAL_I2C_Master_Receive+0x22c>)
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 f84e 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e11a      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
 8007efe:	bf00      	nop
 8007f00:	00100002 	.word	0x00100002
 8007f04:	ffff0000 	.word	0xffff0000
 8007f08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691a      	ldr	r2, [r3, #16]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f80:	e0c4      	b.n	800810c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	2200      	movs	r2, #0
 8007f8a:	496c      	ldr	r1, [pc, #432]	@ (800813c <HAL_I2C_Master_Receive+0x460>)
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 ffff 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0cb      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4955      	ldr	r1, [pc, #340]	@ (800813c <HAL_I2C_Master_Receive+0x460>)
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 ffd1 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e09d      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800806c:	e04e      	b.n	800810c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800806e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008070:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f001 f936 	bl	80092e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e058      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d124      	bne.n	800810c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d107      	bne.n	80080da <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080d8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	b2d2      	uxtb	r2, r2
 80080e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f aeb6 	bne.w	8007e82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2220      	movs	r2, #32
 800811a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	e000      	b.n	8008134 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008132:	2302      	movs	r3, #2
  }
}
 8008134:	4618      	mov	r0, r3
 8008136:	3728      	adds	r7, #40	@ 0x28
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	00010004 	.word	0x00010004

08008140 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	4608      	mov	r0, r1
 800814a:	4611      	mov	r1, r2
 800814c:	461a      	mov	r2, r3
 800814e:	4603      	mov	r3, r0
 8008150:	817b      	strh	r3, [r7, #10]
 8008152:	460b      	mov	r3, r1
 8008154:	813b      	strh	r3, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800815a:	f7fe f8e9 	bl	8006330 <HAL_GetTick>
 800815e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b20      	cmp	r3, #32
 800816a:	f040 80d9 	bne.w	8008320 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	2319      	movs	r3, #25
 8008174:	2201      	movs	r2, #1
 8008176:	496d      	ldr	r1, [pc, #436]	@ (800832c <HAL_I2C_Mem_Write+0x1ec>)
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 ff09 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
 8008186:	e0cc      	b.n	8008322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_I2C_Mem_Write+0x56>
 8008192:	2302      	movs	r3, #2
 8008194:	e0c5      	b.n	8008322 <HAL_I2C_Mem_Write+0x1e2>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d007      	beq.n	80081bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0201 	orr.w	r2, r2, #1
 80081ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2221      	movs	r2, #33	@ 0x21
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2240      	movs	r2, #64	@ 0x40
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a3a      	ldr	r2, [r7, #32]
 80081e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80081ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a4d      	ldr	r2, [pc, #308]	@ (8008330 <HAL_I2C_Mem_Write+0x1f0>)
 80081fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081fe:	88f8      	ldrh	r0, [r7, #6]
 8008200:	893a      	ldrh	r2, [r7, #8]
 8008202:	8979      	ldrh	r1, [r7, #10]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4603      	mov	r3, r0
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 fd40 	bl	8008c94 <I2C_RequestMemoryWrite>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d052      	beq.n	80082c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e081      	b.n	8008322 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 ffce 	bl	80091c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008232:	2b04      	cmp	r3, #4
 8008234:	d107      	bne.n	8008246 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e06b      	b.n	8008322 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824e:	781a      	ldrb	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b04      	cmp	r3, #4
 8008286:	d11b      	bne.n	80082c0 <HAL_I2C_Mem_Write+0x180>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828c:	2b00      	cmp	r3, #0
 800828e:	d017      	beq.n	80082c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008294:	781a      	ldrb	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	3b01      	subs	r3, #1
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1aa      	bne.n	800821e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 ffc1 	bl	8009254 <I2C_WaitOnBTFFlagUntilTimeout>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00d      	beq.n	80082f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d107      	bne.n	80082f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e016      	b.n	8008322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e000      	b.n	8008322 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008320:	2302      	movs	r3, #2
  }
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	00100002 	.word	0x00100002
 8008330:	ffff0000 	.word	0xffff0000

08008334 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08c      	sub	sp, #48	@ 0x30
 8008338:	af02      	add	r7, sp, #8
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	4608      	mov	r0, r1
 800833e:	4611      	mov	r1, r2
 8008340:	461a      	mov	r2, r3
 8008342:	4603      	mov	r3, r0
 8008344:	817b      	strh	r3, [r7, #10]
 8008346:	460b      	mov	r3, r1
 8008348:	813b      	strh	r3, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800834e:	f7fd ffef 	bl	8006330 <HAL_GetTick>
 8008352:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b20      	cmp	r3, #32
 800835e:	f040 8214 	bne.w	800878a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	2319      	movs	r3, #25
 8008368:	2201      	movs	r2, #1
 800836a:	497b      	ldr	r1, [pc, #492]	@ (8008558 <HAL_I2C_Mem_Read+0x224>)
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fe0f 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008378:	2302      	movs	r3, #2
 800837a:	e207      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_I2C_Mem_Read+0x56>
 8008386:	2302      	movs	r3, #2
 8008388:	e200      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b01      	cmp	r3, #1
 800839e:	d007      	beq.n	80083b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2222      	movs	r2, #34	@ 0x22
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2240      	movs	r2, #64	@ 0x40
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80083e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4a5b      	ldr	r2, [pc, #364]	@ (800855c <HAL_I2C_Mem_Read+0x228>)
 80083f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083f2:	88f8      	ldrh	r0, [r7, #6]
 80083f4:	893a      	ldrh	r2, [r7, #8]
 80083f6:	8979      	ldrh	r1, [r7, #10]
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4603      	mov	r3, r0
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 fcdc 	bl	8008dc0 <I2C_RequestMemoryRead>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e1bc      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d113      	bne.n	8008442 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800841a:	2300      	movs	r3, #0
 800841c:	623b      	str	r3, [r7, #32]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	623b      	str	r3, [r7, #32]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	623b      	str	r3, [r7, #32]
 800842e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e190      	b.n	8008764 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008446:	2b01      	cmp	r3, #1
 8008448:	d11b      	bne.n	8008482 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e170      	b.n	8008764 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008486:	2b02      	cmp	r3, #2
 8008488:	d11b      	bne.n	80084c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008498:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084aa:	2300      	movs	r3, #0
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	61bb      	str	r3, [r7, #24]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	61bb      	str	r3, [r7, #24]
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	e150      	b.n	8008764 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80084d8:	e144      	b.n	8008764 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084de:	2b03      	cmp	r3, #3
 80084e0:	f200 80f1 	bhi.w	80086c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d123      	bne.n	8008534 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fef7 	bl	80092e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e145      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691a      	ldr	r2, [r3, #16]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800851c:	3b01      	subs	r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008532:	e117      	b.n	8008764 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008538:	2b02      	cmp	r3, #2
 800853a:	d14e      	bne.n	80085da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800853c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008542:	2200      	movs	r2, #0
 8008544:	4906      	ldr	r1, [pc, #24]	@ (8008560 <HAL_I2C_Mem_Read+0x22c>)
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 fd22 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e11a      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
 8008556:	bf00      	nop
 8008558:	00100002 	.word	0x00100002
 800855c:	ffff0000 	.word	0xffff0000
 8008560:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800859c:	b29b      	uxth	r3, r3
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80085d8:	e0c4      	b.n	8008764 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e0:	2200      	movs	r2, #0
 80085e2:	496c      	ldr	r1, [pc, #432]	@ (8008794 <HAL_I2C_Mem_Read+0x460>)
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fcd3 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e0cb      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691a      	ldr	r2, [r3, #16]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863c:	2200      	movs	r2, #0
 800863e:	4955      	ldr	r1, [pc, #340]	@ (8008794 <HAL_I2C_Mem_Read+0x460>)
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 fca5 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e09d      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800865e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691a      	ldr	r2, [r3, #16]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800867c:	3b01      	subs	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008688:	b29b      	uxth	r3, r3
 800868a:	3b01      	subs	r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	3b01      	subs	r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086c4:	e04e      	b.n	8008764 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fe0a 	bl	80092e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e058      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008702:	b29b      	uxth	r3, r3
 8008704:	3b01      	subs	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b04      	cmp	r3, #4
 8008718:	d124      	bne.n	8008764 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800871e:	2b03      	cmp	r3, #3
 8008720:	d107      	bne.n	8008732 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008730:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	691a      	ldr	r2, [r3, #16]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875a:	b29b      	uxth	r3, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	f47f aeb6 	bne.w	80084da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	e000      	b.n	800878c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800878a:	2302      	movs	r3, #2
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3728      	adds	r7, #40	@ 0x28
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	00010004 	.word	0x00010004

08008798 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	@ 0x28
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	460b      	mov	r3, r1
 80087a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80087a8:	f7fd fdc2 	bl	8006330 <HAL_GetTick>
 80087ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	f040 8111 	bne.w	80089e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	2319      	movs	r3, #25
 80087c6:	2201      	movs	r2, #1
 80087c8:	4988      	ldr	r1, [pc, #544]	@ (80089ec <HAL_I2C_IsDeviceReady+0x254>)
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fbe0 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80087d6:	2302      	movs	r3, #2
 80087d8:	e104      	b.n	80089e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d101      	bne.n	80087e8 <HAL_I2C_IsDeviceReady+0x50>
 80087e4:	2302      	movs	r3, #2
 80087e6:	e0fd      	b.n	80089e4 <HAL_I2C_IsDeviceReady+0x24c>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d007      	beq.n	800880e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f042 0201 	orr.w	r2, r2, #1
 800880c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800881c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2224      	movs	r2, #36	@ 0x24
 8008822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4a70      	ldr	r2, [pc, #448]	@ (80089f0 <HAL_I2C_IsDeviceReady+0x258>)
 8008830:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008840:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2200      	movs	r2, #0
 800884a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fb9e 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00d      	beq.n	8008876 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008868:	d103      	bne.n	8008872 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008870:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e0b6      	b.n	80089e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008876:	897b      	ldrh	r3, [r7, #10]
 8008878:	b2db      	uxtb	r3, r3
 800887a:	461a      	mov	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008884:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008886:	f7fd fd53 	bl	8006330 <HAL_GetTick>
 800888a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b02      	cmp	r3, #2
 8008898:	bf0c      	ite	eq
 800889a:	2301      	moveq	r3, #1
 800889c:	2300      	movne	r3, #0
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b0:	bf0c      	ite	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	2300      	movne	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80088ba:	e025      	b.n	8008908 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088bc:	f7fd fd38 	bl	8006330 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d302      	bcc.n	80088d2 <HAL_I2C_IsDeviceReady+0x13a>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	22a0      	movs	r2, #160	@ 0xa0
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	bf0c      	ite	eq
 80088e8:	2301      	moveq	r3, #1
 80088ea:	2300      	movne	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088fe:	bf0c      	ite	eq
 8008900:	2301      	moveq	r3, #1
 8008902:	2300      	movne	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2ba0      	cmp	r3, #160	@ 0xa0
 8008912:	d005      	beq.n	8008920 <HAL_I2C_IsDeviceReady+0x188>
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d102      	bne.n	8008920 <HAL_I2C_IsDeviceReady+0x188>
 800891a:	7dbb      	ldrb	r3, [r7, #22]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0cd      	beq.n	80088bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b02      	cmp	r3, #2
 8008934:	d129      	bne.n	800898a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008944:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008946:	2300      	movs	r3, #0
 8008948:	613b      	str	r3, [r7, #16]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	613b      	str	r3, [r7, #16]
 800895a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2319      	movs	r3, #25
 8008962:	2201      	movs	r2, #1
 8008964:	4921      	ldr	r1, [pc, #132]	@ (80089ec <HAL_I2C_IsDeviceReady+0x254>)
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 fb12 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e036      	b.n	80089e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2220      	movs	r2, #32
 800897a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e02c      	b.n	80089e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008998:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80089a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2319      	movs	r3, #25
 80089aa:	2201      	movs	r2, #1
 80089ac:	490f      	ldr	r1, [pc, #60]	@ (80089ec <HAL_I2C_IsDeviceReady+0x254>)
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 faee 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e012      	b.n	80089e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	3301      	adds	r3, #1
 80089c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	f4ff af32 	bcc.w	8008832 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e000      	b.n	80089e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80089e2:	2302      	movs	r3, #2
  }
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3720      	adds	r7, #32
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	00100002 	.word	0x00100002
 80089f0:	ffff0000 	.word	0xffff0000

080089f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af02      	add	r7, sp, #8
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	607a      	str	r2, [r7, #4]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	460b      	mov	r3, r1
 8008a02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d006      	beq.n	8008a1e <I2C_MasterRequestWrite+0x2a>
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d003      	beq.n	8008a1e <I2C_MasterRequestWrite+0x2a>
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a1c:	d108      	bne.n	8008a30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e00b      	b.n	8008a48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a34:	2b12      	cmp	r3, #18
 8008a36:	d107      	bne.n	8008a48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fa9b 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00d      	beq.n	8008a7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a6e:	d103      	bne.n	8008a78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e035      	b.n	8008ae8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a84:	d108      	bne.n	8008a98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a86:	897b      	ldrh	r3, [r7, #10]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008a94:	611a      	str	r2, [r3, #16]
 8008a96:	e01b      	b.n	8008ad0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a98:	897b      	ldrh	r3, [r7, #10]
 8008a9a:	11db      	asrs	r3, r3, #7
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0306 	and.w	r3, r3, #6
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f063 030f 	orn	r3, r3, #15
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	490e      	ldr	r1, [pc, #56]	@ (8008af0 <I2C_MasterRequestWrite+0xfc>)
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fae4 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e010      	b.n	8008ae8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008ac6:	897b      	ldrh	r3, [r7, #10]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	4907      	ldr	r1, [pc, #28]	@ (8008af4 <I2C_MasterRequestWrite+0x100>)
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fad4 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e000      	b.n	8008ae8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	00010008 	.word	0x00010008
 8008af4:	00010002 	.word	0x00010002

08008af8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	607a      	str	r2, [r7, #4]
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	460b      	mov	r3, r1
 8008b06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	d006      	beq.n	8008b32 <I2C_MasterRequestRead+0x3a>
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d003      	beq.n	8008b32 <I2C_MasterRequestRead+0x3a>
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b30:	d108      	bne.n	8008b44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	e00b      	b.n	8008b5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b48:	2b11      	cmp	r3, #17
 8008b4a:	d107      	bne.n	8008b5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fa11 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00d      	beq.n	8008b90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b82:	d103      	bne.n	8008b8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e079      	b.n	8008c84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b98:	d108      	bne.n	8008bac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b9a:	897b      	ldrh	r3, [r7, #10]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	611a      	str	r2, [r3, #16]
 8008baa:	e05f      	b.n	8008c6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008bac:	897b      	ldrh	r3, [r7, #10]
 8008bae:	11db      	asrs	r3, r3, #7
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0306 	and.w	r3, r3, #6
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f063 030f 	orn	r3, r3, #15
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4930      	ldr	r1, [pc, #192]	@ (8008c8c <I2C_MasterRequestRead+0x194>)
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fa5a 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e054      	b.n	8008c84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008bda:	897b      	ldrh	r3, [r7, #10]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	4929      	ldr	r1, [pc, #164]	@ (8008c90 <I2C_MasterRequestRead+0x198>)
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fa4a 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e044      	b.n	8008c84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f9af 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00d      	beq.n	8008c54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c46:	d103      	bne.n	8008c50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c4e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e017      	b.n	8008c84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008c54:	897b      	ldrh	r3, [r7, #10]
 8008c56:	11db      	asrs	r3, r3, #7
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	f003 0306 	and.w	r3, r3, #6
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f063 030e 	orn	r3, r3, #14
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4907      	ldr	r1, [pc, #28]	@ (8008c90 <I2C_MasterRequestRead+0x198>)
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 fa06 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	00010008 	.word	0x00010008
 8008c90:	00010002 	.word	0x00010002

08008c94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	817b      	strh	r3, [r7, #10]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	813b      	strh	r3, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 f960 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00d      	beq.n	8008cf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce4:	d103      	bne.n	8008cee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e05f      	b.n	8008db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008cf2:	897b      	ldrh	r3, [r7, #10]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008d00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	6a3a      	ldr	r2, [r7, #32]
 8008d06:	492d      	ldr	r1, [pc, #180]	@ (8008dbc <I2C_RequestMemoryWrite+0x128>)
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f9bb 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e04c      	b.n	8008db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d30:	6a39      	ldr	r1, [r7, #32]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 fa46 	bl	80091c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00d      	beq.n	8008d5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d107      	bne.n	8008d56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e02b      	b.n	8008db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d105      	bne.n	8008d6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d60:	893b      	ldrh	r3, [r7, #8]
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	611a      	str	r2, [r3, #16]
 8008d6a:	e021      	b.n	8008db0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d6c:	893b      	ldrh	r3, [r7, #8]
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d7c:	6a39      	ldr	r1, [r7, #32]
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 fa20 	bl	80091c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00d      	beq.n	8008da6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d107      	bne.n	8008da2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008da0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e005      	b.n	8008db2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008da6:	893b      	ldrh	r3, [r7, #8]
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	00010002 	.word	0x00010002

08008dc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	4608      	mov	r0, r1
 8008dca:	4611      	mov	r1, r2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4603      	mov	r3, r0
 8008dd0:	817b      	strh	r3, [r7, #10]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	813b      	strh	r3, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008de8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008df8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f8c2 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00d      	beq.n	8008e2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e20:	d103      	bne.n	8008e2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e0aa      	b.n	8008f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e2e:	897b      	ldrh	r3, [r7, #10]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008e3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	6a3a      	ldr	r2, [r7, #32]
 8008e42:	4952      	ldr	r1, [pc, #328]	@ (8008f8c <I2C_RequestMemoryRead+0x1cc>)
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f91d 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e097      	b.n	8008f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e6c:	6a39      	ldr	r1, [r7, #32]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f9a8 	bl	80091c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00d      	beq.n	8008e96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d107      	bne.n	8008e92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e076      	b.n	8008f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d105      	bne.n	8008ea8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e9c:	893b      	ldrh	r3, [r7, #8]
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	611a      	str	r2, [r3, #16]
 8008ea6:	e021      	b.n	8008eec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ea8:	893b      	ldrh	r3, [r7, #8]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eb8:	6a39      	ldr	r1, [r7, #32]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 f982 	bl	80091c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00d      	beq.n	8008ee2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d107      	bne.n	8008ede <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008edc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e050      	b.n	8008f84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ee2:	893b      	ldrh	r3, [r7, #8]
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eee:	6a39      	ldr	r1, [r7, #32]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 f967 	bl	80091c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00d      	beq.n	8008f18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d107      	bne.n	8008f14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e035      	b.n	8008f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f82b 	bl	8008f90 <I2C_WaitOnFlagUntilTimeout>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00d      	beq.n	8008f5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f4e:	d103      	bne.n	8008f58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e013      	b.n	8008f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008f5c:	897b      	ldrh	r3, [r7, #10]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f043 0301 	orr.w	r3, r3, #1
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6e:	6a3a      	ldr	r2, [r7, #32]
 8008f70:	4906      	ldr	r1, [pc, #24]	@ (8008f8c <I2C_RequestMemoryRead+0x1cc>)
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 f886 	bl	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	00010002 	.word	0x00010002

08008f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fa0:	e048      	b.n	8009034 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa8:	d044      	beq.n	8009034 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008faa:	f7fd f9c1 	bl	8006330 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d302      	bcc.n	8008fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d139      	bne.n	8009034 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	0c1b      	lsrs	r3, r3, #16
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d10d      	bne.n	8008fe6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	43da      	mvns	r2, r3
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bf0c      	ite	eq
 8008fdc:	2301      	moveq	r3, #1
 8008fde:	2300      	movne	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	e00c      	b.n	8009000 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	43da      	mvns	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2301      	moveq	r3, #1
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	429a      	cmp	r2, r3
 8009004:	d116      	bne.n	8009034 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2220      	movs	r2, #32
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009020:	f043 0220 	orr.w	r2, r3, #32
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e023      	b.n	800907c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	0c1b      	lsrs	r3, r3, #16
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b01      	cmp	r3, #1
 800903c:	d10d      	bne.n	800905a <I2C_WaitOnFlagUntilTimeout+0xca>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	43da      	mvns	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4013      	ands	r3, r2
 800904a:	b29b      	uxth	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	bf0c      	ite	eq
 8009050:	2301      	moveq	r3, #1
 8009052:	2300      	movne	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	e00c      	b.n	8009074 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	43da      	mvns	r2, r3
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4013      	ands	r3, r2
 8009066:	b29b      	uxth	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	429a      	cmp	r2, r3
 8009078:	d093      	beq.n	8008fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009092:	e071      	b.n	8009178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800909e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090a2:	d123      	bne.n	80090ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80090bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d8:	f043 0204 	orr.w	r2, r3, #4
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e067      	b.n	80091bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d041      	beq.n	8009178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f4:	f7fd f91c 	bl	8006330 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d302      	bcc.n	800910a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d136      	bne.n	8009178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	0c1b      	lsrs	r3, r3, #16
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b01      	cmp	r3, #1
 8009112:	d10c      	bne.n	800912e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	43da      	mvns	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4013      	ands	r3, r2
 8009120:	b29b      	uxth	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	bf14      	ite	ne
 8009126:	2301      	movne	r3, #1
 8009128:	2300      	moveq	r3, #0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	e00b      	b.n	8009146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	43da      	mvns	r2, r3
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	4013      	ands	r3, r2
 800913a:	b29b      	uxth	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	bf14      	ite	ne
 8009140:	2301      	movne	r3, #1
 8009142:	2300      	moveq	r3, #0
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d016      	beq.n	8009178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009164:	f043 0220 	orr.w	r2, r3, #32
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e021      	b.n	80091bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	0c1b      	lsrs	r3, r3, #16
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b01      	cmp	r3, #1
 8009180:	d10c      	bne.n	800919c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	43da      	mvns	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	4013      	ands	r3, r2
 800918e:	b29b      	uxth	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	bf14      	ite	ne
 8009194:	2301      	movne	r3, #1
 8009196:	2300      	moveq	r3, #0
 8009198:	b2db      	uxtb	r3, r3
 800919a:	e00b      	b.n	80091b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	43da      	mvns	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	4013      	ands	r3, r2
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bf14      	ite	ne
 80091ae:	2301      	movne	r3, #1
 80091b0:	2300      	moveq	r3, #0
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f47f af6d 	bne.w	8009094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091d0:	e034      	b.n	800923c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f8e3 	bl	800939e <I2C_IsAcknowledgeFailed>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e034      	b.n	800924c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e8:	d028      	beq.n	800923c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ea:	f7fd f8a1 	bl	8006330 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d302      	bcc.n	8009200 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d11d      	bne.n	800923c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800920a:	2b80      	cmp	r3, #128	@ 0x80
 800920c:	d016      	beq.n	800923c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009228:	f043 0220 	orr.w	r2, r3, #32
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e007      	b.n	800924c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009246:	2b80      	cmp	r3, #128	@ 0x80
 8009248:	d1c3      	bne.n	80091d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009260:	e034      	b.n	80092cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f89b 	bl	800939e <I2C_IsAcknowledgeFailed>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e034      	b.n	80092dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009278:	d028      	beq.n	80092cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800927a:	f7fd f859 	bl	8006330 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	429a      	cmp	r2, r3
 8009288:	d302      	bcc.n	8009290 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11d      	bne.n	80092cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b04      	cmp	r3, #4
 800929c:	d016      	beq.n	80092cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b8:	f043 0220 	orr.w	r2, r3, #32
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e007      	b.n	80092dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	f003 0304 	and.w	r3, r3, #4
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d1c3      	bne.n	8009262 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092f0:	e049      	b.n	8009386 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	f003 0310 	and.w	r3, r3, #16
 80092fc:	2b10      	cmp	r3, #16
 80092fe:	d119      	bne.n	8009334 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f06f 0210 	mvn.w	r2, #16
 8009308:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e030      	b.n	8009396 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009334:	f7fc fffc 	bl	8006330 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	429a      	cmp	r2, r3
 8009342:	d302      	bcc.n	800934a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d11d      	bne.n	8009386 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009354:	2b40      	cmp	r3, #64	@ 0x40
 8009356:	d016      	beq.n	8009386 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	f043 0220 	orr.w	r2, r3, #32
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e007      	b.n	8009396 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009390:	2b40      	cmp	r3, #64	@ 0x40
 8009392:	d1ae      	bne.n	80092f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093b4:	d11b      	bne.n	80093ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80093be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093da:	f043 0204 	orr.w	r2, r3, #4
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009406:	2300      	movs	r3, #0
 8009408:	603b      	str	r3, [r7, #0]
 800940a:	4b20      	ldr	r3, [pc, #128]	@ (800948c <HAL_PWREx_EnableOverDrive+0x90>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	4a1f      	ldr	r2, [pc, #124]	@ (800948c <HAL_PWREx_EnableOverDrive+0x90>)
 8009410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009414:	6413      	str	r3, [r2, #64]	@ 0x40
 8009416:	4b1d      	ldr	r3, [pc, #116]	@ (800948c <HAL_PWREx_EnableOverDrive+0x90>)
 8009418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009422:	4b1b      	ldr	r3, [pc, #108]	@ (8009490 <HAL_PWREx_EnableOverDrive+0x94>)
 8009424:	2201      	movs	r2, #1
 8009426:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009428:	f7fc ff82 	bl	8006330 <HAL_GetTick>
 800942c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800942e:	e009      	b.n	8009444 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009430:	f7fc ff7e 	bl	8006330 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800943e:	d901      	bls.n	8009444 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e01f      	b.n	8009484 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009444:	4b13      	ldr	r3, [pc, #76]	@ (8009494 <HAL_PWREx_EnableOverDrive+0x98>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009450:	d1ee      	bne.n	8009430 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009452:	4b11      	ldr	r3, [pc, #68]	@ (8009498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009454:	2201      	movs	r2, #1
 8009456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009458:	f7fc ff6a 	bl	8006330 <HAL_GetTick>
 800945c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800945e:	e009      	b.n	8009474 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009460:	f7fc ff66 	bl	8006330 <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800946e:	d901      	bls.n	8009474 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e007      	b.n	8009484 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009474:	4b07      	ldr	r3, [pc, #28]	@ (8009494 <HAL_PWREx_EnableOverDrive+0x98>)
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800947c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009480:	d1ee      	bne.n	8009460 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	40023800 	.word	0x40023800
 8009490:	420e0040 	.word	0x420e0040
 8009494:	40007000 	.word	0x40007000
 8009498:	420e0044 	.word	0x420e0044

0800949c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e0cc      	b.n	800964a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094b0:	4b68      	ldr	r3, [pc, #416]	@ (8009654 <HAL_RCC_ClockConfig+0x1b8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d90c      	bls.n	80094d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094be:	4b65      	ldr	r3, [pc, #404]	@ (8009654 <HAL_RCC_ClockConfig+0x1b8>)
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094c6:	4b63      	ldr	r3, [pc, #396]	@ (8009654 <HAL_RCC_ClockConfig+0x1b8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 030f 	and.w	r3, r3, #15
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d001      	beq.n	80094d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e0b8      	b.n	800964a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d020      	beq.n	8009526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094f0:	4b59      	ldr	r3, [pc, #356]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	4a58      	ldr	r2, [pc, #352]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 80094f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80094fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0308 	and.w	r3, r3, #8
 8009504:	2b00      	cmp	r3, #0
 8009506:	d005      	beq.n	8009514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009508:	4b53      	ldr	r3, [pc, #332]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	4a52      	ldr	r2, [pc, #328]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800950e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009514:	4b50      	ldr	r3, [pc, #320]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	494d      	ldr	r1, [pc, #308]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 8009522:	4313      	orrs	r3, r2
 8009524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d044      	beq.n	80095bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d107      	bne.n	800954a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800953a:	4b47      	ldr	r3, [pc, #284]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d119      	bne.n	800957a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e07f      	b.n	800964a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d003      	beq.n	800955a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009556:	2b03      	cmp	r3, #3
 8009558:	d107      	bne.n	800956a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800955a:	4b3f      	ldr	r3, [pc, #252]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e06f      	b.n	800964a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800956a:	4b3b      	ldr	r3, [pc, #236]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e067      	b.n	800964a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800957a:	4b37      	ldr	r3, [pc, #220]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f023 0203 	bic.w	r2, r3, #3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	4934      	ldr	r1, [pc, #208]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 8009588:	4313      	orrs	r3, r2
 800958a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800958c:	f7fc fed0 	bl	8006330 <HAL_GetTick>
 8009590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009592:	e00a      	b.n	80095aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009594:	f7fc fecc 	bl	8006330 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d901      	bls.n	80095aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e04f      	b.n	800964a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095aa:	4b2b      	ldr	r3, [pc, #172]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f003 020c 	and.w	r2, r3, #12
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d1eb      	bne.n	8009594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095bc:	4b25      	ldr	r3, [pc, #148]	@ (8009654 <HAL_RCC_ClockConfig+0x1b8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d20c      	bcs.n	80095e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ca:	4b22      	ldr	r3, [pc, #136]	@ (8009654 <HAL_RCC_ClockConfig+0x1b8>)
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095d2:	4b20      	ldr	r3, [pc, #128]	@ (8009654 <HAL_RCC_ClockConfig+0x1b8>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d001      	beq.n	80095e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e032      	b.n	800964a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d008      	beq.n	8009602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095f0:	4b19      	ldr	r3, [pc, #100]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	4916      	ldr	r1, [pc, #88]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0308 	and.w	r3, r3, #8
 800960a:	2b00      	cmp	r3, #0
 800960c:	d009      	beq.n	8009622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800960e:	4b12      	ldr	r3, [pc, #72]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	490e      	ldr	r1, [pc, #56]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800961e:	4313      	orrs	r3, r2
 8009620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009622:	f000 f855 	bl	80096d0 <HAL_RCC_GetSysClockFreq>
 8009626:	4602      	mov	r2, r0
 8009628:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <HAL_RCC_ClockConfig+0x1bc>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	091b      	lsrs	r3, r3, #4
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	490a      	ldr	r1, [pc, #40]	@ (800965c <HAL_RCC_ClockConfig+0x1c0>)
 8009634:	5ccb      	ldrb	r3, [r1, r3]
 8009636:	fa22 f303 	lsr.w	r3, r2, r3
 800963a:	4a09      	ldr	r2, [pc, #36]	@ (8009660 <HAL_RCC_ClockConfig+0x1c4>)
 800963c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800963e:	4b09      	ldr	r3, [pc, #36]	@ (8009664 <HAL_RCC_ClockConfig+0x1c8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4618      	mov	r0, r3
 8009644:	f7fc fe30 	bl	80062a8 <HAL_InitTick>

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	40023c00 	.word	0x40023c00
 8009658:	40023800 	.word	0x40023800
 800965c:	08010100 	.word	0x08010100
 8009660:	20000064 	.word	0x20000064
 8009664:	20000098 	.word	0x20000098

08009668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800966c:	4b03      	ldr	r3, [pc, #12]	@ (800967c <HAL_RCC_GetHCLKFreq+0x14>)
 800966e:	681b      	ldr	r3, [r3, #0]
}
 8009670:	4618      	mov	r0, r3
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	20000064 	.word	0x20000064

08009680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009684:	f7ff fff0 	bl	8009668 <HAL_RCC_GetHCLKFreq>
 8009688:	4602      	mov	r2, r0
 800968a:	4b05      	ldr	r3, [pc, #20]	@ (80096a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	0a9b      	lsrs	r3, r3, #10
 8009690:	f003 0307 	and.w	r3, r3, #7
 8009694:	4903      	ldr	r1, [pc, #12]	@ (80096a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009696:	5ccb      	ldrb	r3, [r1, r3]
 8009698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800969c:	4618      	mov	r0, r3
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	40023800 	.word	0x40023800
 80096a4:	08010110 	.word	0x08010110

080096a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80096ac:	f7ff ffdc 	bl	8009668 <HAL_RCC_GetHCLKFreq>
 80096b0:	4602      	mov	r2, r0
 80096b2:	4b05      	ldr	r3, [pc, #20]	@ (80096c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	0b5b      	lsrs	r3, r3, #13
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	4903      	ldr	r1, [pc, #12]	@ (80096cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80096be:	5ccb      	ldrb	r3, [r1, r3]
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	40023800 	.word	0x40023800
 80096cc:	08010110 	.word	0x08010110

080096d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096d4:	b0ae      	sub	sp, #184	@ 0xb8
 80096d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096f6:	4bcb      	ldr	r3, [pc, #812]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f003 030c 	and.w	r3, r3, #12
 80096fe:	2b0c      	cmp	r3, #12
 8009700:	f200 8206 	bhi.w	8009b10 <HAL_RCC_GetSysClockFreq+0x440>
 8009704:	a201      	add	r2, pc, #4	@ (adr r2, 800970c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009741 	.word	0x08009741
 8009710:	08009b11 	.word	0x08009b11
 8009714:	08009b11 	.word	0x08009b11
 8009718:	08009b11 	.word	0x08009b11
 800971c:	08009749 	.word	0x08009749
 8009720:	08009b11 	.word	0x08009b11
 8009724:	08009b11 	.word	0x08009b11
 8009728:	08009b11 	.word	0x08009b11
 800972c:	08009751 	.word	0x08009751
 8009730:	08009b11 	.word	0x08009b11
 8009734:	08009b11 	.word	0x08009b11
 8009738:	08009b11 	.word	0x08009b11
 800973c:	08009941 	.word	0x08009941
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009740:	4bb9      	ldr	r3, [pc, #740]	@ (8009a28 <HAL_RCC_GetSysClockFreq+0x358>)
 8009742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009746:	e1e7      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009748:	4bb8      	ldr	r3, [pc, #736]	@ (8009a2c <HAL_RCC_GetSysClockFreq+0x35c>)
 800974a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800974e:	e1e3      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009750:	4bb4      	ldr	r3, [pc, #720]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800975c:	4bb1      	ldr	r3, [pc, #708]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d071      	beq.n	800984c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009768:	4bae      	ldr	r3, [pc, #696]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	099b      	lsrs	r3, r3, #6
 800976e:	2200      	movs	r2, #0
 8009770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009774:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800977c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009784:	2300      	movs	r3, #0
 8009786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800978a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800978e:	4622      	mov	r2, r4
 8009790:	462b      	mov	r3, r5
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f04f 0100 	mov.w	r1, #0
 800979a:	0159      	lsls	r1, r3, #5
 800979c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097a0:	0150      	lsls	r0, r2, #5
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4621      	mov	r1, r4
 80097a8:	1a51      	subs	r1, r2, r1
 80097aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80097ac:	4629      	mov	r1, r5
 80097ae:	eb63 0301 	sbc.w	r3, r3, r1
 80097b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	f04f 0300 	mov.w	r3, #0
 80097bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80097c0:	4649      	mov	r1, r9
 80097c2:	018b      	lsls	r3, r1, #6
 80097c4:	4641      	mov	r1, r8
 80097c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80097ca:	4641      	mov	r1, r8
 80097cc:	018a      	lsls	r2, r1, #6
 80097ce:	4641      	mov	r1, r8
 80097d0:	1a51      	subs	r1, r2, r1
 80097d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80097d4:	4649      	mov	r1, r9
 80097d6:	eb63 0301 	sbc.w	r3, r3, r1
 80097da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097dc:	f04f 0200 	mov.w	r2, #0
 80097e0:	f04f 0300 	mov.w	r3, #0
 80097e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80097e8:	4649      	mov	r1, r9
 80097ea:	00cb      	lsls	r3, r1, #3
 80097ec:	4641      	mov	r1, r8
 80097ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097f2:	4641      	mov	r1, r8
 80097f4:	00ca      	lsls	r2, r1, #3
 80097f6:	4610      	mov	r0, r2
 80097f8:	4619      	mov	r1, r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	4622      	mov	r2, r4
 80097fe:	189b      	adds	r3, r3, r2
 8009800:	633b      	str	r3, [r7, #48]	@ 0x30
 8009802:	462b      	mov	r3, r5
 8009804:	460a      	mov	r2, r1
 8009806:	eb42 0303 	adc.w	r3, r2, r3
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009818:	4629      	mov	r1, r5
 800981a:	024b      	lsls	r3, r1, #9
 800981c:	4621      	mov	r1, r4
 800981e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009822:	4621      	mov	r1, r4
 8009824:	024a      	lsls	r2, r1, #9
 8009826:	4610      	mov	r0, r2
 8009828:	4619      	mov	r1, r3
 800982a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800982e:	2200      	movs	r2, #0
 8009830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009834:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009838:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800983c:	f7f7 fa44 	bl	8000cc8 <__aeabi_uldivmod>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4613      	mov	r3, r2
 8009846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800984a:	e067      	b.n	800991c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800984c:	4b75      	ldr	r3, [pc, #468]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	099b      	lsrs	r3, r3, #6
 8009852:	2200      	movs	r2, #0
 8009854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009858:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800985c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009864:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009866:	2300      	movs	r3, #0
 8009868:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800986a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800986e:	4622      	mov	r2, r4
 8009870:	462b      	mov	r3, r5
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f04f 0100 	mov.w	r1, #0
 800987a:	0159      	lsls	r1, r3, #5
 800987c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009880:	0150      	lsls	r0, r2, #5
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4621      	mov	r1, r4
 8009888:	1a51      	subs	r1, r2, r1
 800988a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800988c:	4629      	mov	r1, r5
 800988e:	eb63 0301 	sbc.w	r3, r3, r1
 8009892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80098a0:	4649      	mov	r1, r9
 80098a2:	018b      	lsls	r3, r1, #6
 80098a4:	4641      	mov	r1, r8
 80098a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098aa:	4641      	mov	r1, r8
 80098ac:	018a      	lsls	r2, r1, #6
 80098ae:	4641      	mov	r1, r8
 80098b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80098b4:	4649      	mov	r1, r9
 80098b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80098ba:	f04f 0200 	mov.w	r2, #0
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098ce:	4692      	mov	sl, r2
 80098d0:	469b      	mov	fp, r3
 80098d2:	4623      	mov	r3, r4
 80098d4:	eb1a 0303 	adds.w	r3, sl, r3
 80098d8:	623b      	str	r3, [r7, #32]
 80098da:	462b      	mov	r3, r5
 80098dc:	eb4b 0303 	adc.w	r3, fp, r3
 80098e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80098e2:	f04f 0200 	mov.w	r2, #0
 80098e6:	f04f 0300 	mov.w	r3, #0
 80098ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80098ee:	4629      	mov	r1, r5
 80098f0:	028b      	lsls	r3, r1, #10
 80098f2:	4621      	mov	r1, r4
 80098f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098f8:	4621      	mov	r1, r4
 80098fa:	028a      	lsls	r2, r1, #10
 80098fc:	4610      	mov	r0, r2
 80098fe:	4619      	mov	r1, r3
 8009900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009904:	2200      	movs	r2, #0
 8009906:	673b      	str	r3, [r7, #112]	@ 0x70
 8009908:	677a      	str	r2, [r7, #116]	@ 0x74
 800990a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800990e:	f7f7 f9db 	bl	8000cc8 <__aeabi_uldivmod>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4613      	mov	r3, r2
 8009918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800991c:	4b41      	ldr	r3, [pc, #260]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	0c1b      	lsrs	r3, r3, #16
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	3301      	adds	r3, #1
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800992e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009936:	fbb2 f3f3 	udiv	r3, r2, r3
 800993a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800993e:	e0eb      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009940:	4b38      	ldr	r3, [pc, #224]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800994c:	4b35      	ldr	r3, [pc, #212]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d06b      	beq.n	8009a30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009958:	4b32      	ldr	r3, [pc, #200]	@ (8009a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	099b      	lsrs	r3, r3, #6
 800995e:	2200      	movs	r2, #0
 8009960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	663b      	str	r3, [r7, #96]	@ 0x60
 800996c:	2300      	movs	r3, #0
 800996e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009970:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009974:	4622      	mov	r2, r4
 8009976:	462b      	mov	r3, r5
 8009978:	f04f 0000 	mov.w	r0, #0
 800997c:	f04f 0100 	mov.w	r1, #0
 8009980:	0159      	lsls	r1, r3, #5
 8009982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009986:	0150      	lsls	r0, r2, #5
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4621      	mov	r1, r4
 800998e:	1a51      	subs	r1, r2, r1
 8009990:	61b9      	str	r1, [r7, #24]
 8009992:	4629      	mov	r1, r5
 8009994:	eb63 0301 	sbc.w	r3, r3, r1
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80099a6:	4659      	mov	r1, fp
 80099a8:	018b      	lsls	r3, r1, #6
 80099aa:	4651      	mov	r1, sl
 80099ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80099b0:	4651      	mov	r1, sl
 80099b2:	018a      	lsls	r2, r1, #6
 80099b4:	4651      	mov	r1, sl
 80099b6:	ebb2 0801 	subs.w	r8, r2, r1
 80099ba:	4659      	mov	r1, fp
 80099bc:	eb63 0901 	sbc.w	r9, r3, r1
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	f04f 0300 	mov.w	r3, #0
 80099c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099d4:	4690      	mov	r8, r2
 80099d6:	4699      	mov	r9, r3
 80099d8:	4623      	mov	r3, r4
 80099da:	eb18 0303 	adds.w	r3, r8, r3
 80099de:	613b      	str	r3, [r7, #16]
 80099e0:	462b      	mov	r3, r5
 80099e2:	eb49 0303 	adc.w	r3, r9, r3
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	f04f 0300 	mov.w	r3, #0
 80099f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80099f4:	4629      	mov	r1, r5
 80099f6:	024b      	lsls	r3, r1, #9
 80099f8:	4621      	mov	r1, r4
 80099fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80099fe:	4621      	mov	r1, r4
 8009a00:	024a      	lsls	r2, r1, #9
 8009a02:	4610      	mov	r0, r2
 8009a04:	4619      	mov	r1, r3
 8009a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009a10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a14:	f7f7 f958 	bl	8000cc8 <__aeabi_uldivmod>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a22:	e065      	b.n	8009af0 <HAL_RCC_GetSysClockFreq+0x420>
 8009a24:	40023800 	.word	0x40023800
 8009a28:	00f42400 	.word	0x00f42400
 8009a2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a30:	4b3d      	ldr	r3, [pc, #244]	@ (8009b28 <HAL_RCC_GetSysClockFreq+0x458>)
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	099b      	lsrs	r3, r3, #6
 8009a36:	2200      	movs	r2, #0
 8009a38:	4618      	mov	r0, r3
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009a40:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a42:	2300      	movs	r3, #0
 8009a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009a4a:	4642      	mov	r2, r8
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	f04f 0000 	mov.w	r0, #0
 8009a52:	f04f 0100 	mov.w	r1, #0
 8009a56:	0159      	lsls	r1, r3, #5
 8009a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a5c:	0150      	lsls	r0, r2, #5
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4641      	mov	r1, r8
 8009a64:	1a51      	subs	r1, r2, r1
 8009a66:	60b9      	str	r1, [r7, #8]
 8009a68:	4649      	mov	r1, r9
 8009a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	f04f 0300 	mov.w	r3, #0
 8009a78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	018b      	lsls	r3, r1, #6
 8009a80:	4651      	mov	r1, sl
 8009a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009a86:	4651      	mov	r1, sl
 8009a88:	018a      	lsls	r2, r1, #6
 8009a8a:	4651      	mov	r1, sl
 8009a8c:	1a54      	subs	r4, r2, r1
 8009a8e:	4659      	mov	r1, fp
 8009a90:	eb63 0501 	sbc.w	r5, r3, r1
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	f04f 0300 	mov.w	r3, #0
 8009a9c:	00eb      	lsls	r3, r5, #3
 8009a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009aa2:	00e2      	lsls	r2, r4, #3
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	461d      	mov	r5, r3
 8009aa8:	4643      	mov	r3, r8
 8009aaa:	18e3      	adds	r3, r4, r3
 8009aac:	603b      	str	r3, [r7, #0]
 8009aae:	464b      	mov	r3, r9
 8009ab0:	eb45 0303 	adc.w	r3, r5, r3
 8009ab4:	607b      	str	r3, [r7, #4]
 8009ab6:	f04f 0200 	mov.w	r2, #0
 8009aba:	f04f 0300 	mov.w	r3, #0
 8009abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	028b      	lsls	r3, r1, #10
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009acc:	4621      	mov	r1, r4
 8009ace:	028a      	lsls	r2, r1, #10
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ad8:	2200      	movs	r2, #0
 8009ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009adc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009ade:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ae2:	f7f7 f8f1 	bl	8000cc8 <__aeabi_uldivmod>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4613      	mov	r3, r2
 8009aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009af0:	4b0d      	ldr	r3, [pc, #52]	@ (8009b28 <HAL_RCC_GetSysClockFreq+0x458>)
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	0f1b      	lsrs	r3, r3, #28
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8009afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009b0e:	e003      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b10:	4b06      	ldr	r3, [pc, #24]	@ (8009b2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8009b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009b16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	37b8      	adds	r7, #184	@ 0xb8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b26:	bf00      	nop
 8009b28:	40023800 	.word	0x40023800
 8009b2c:	00f42400 	.word	0x00f42400

08009b30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e28d      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8083 	beq.w	8009c56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009b50:	4b94      	ldr	r3, [pc, #592]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 030c 	and.w	r3, r3, #12
 8009b58:	2b04      	cmp	r3, #4
 8009b5a:	d019      	beq.n	8009b90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009b5c:	4b91      	ldr	r3, [pc, #580]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 030c 	and.w	r3, r3, #12
        || \
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	d106      	bne.n	8009b76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009b68:	4b8e      	ldr	r3, [pc, #568]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b74:	d00c      	beq.n	8009b90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b76:	4b8b      	ldr	r3, [pc, #556]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009b7e:	2b0c      	cmp	r3, #12
 8009b80:	d112      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b82:	4b88      	ldr	r3, [pc, #544]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b8e:	d10b      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b90:	4b84      	ldr	r3, [pc, #528]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d05b      	beq.n	8009c54 <HAL_RCC_OscConfig+0x124>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d157      	bne.n	8009c54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e25a      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bb0:	d106      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x90>
 8009bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	e01d      	b.n	8009bfc <HAL_RCC_OscConfig+0xcc>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bc8:	d10c      	bne.n	8009be4 <HAL_RCC_OscConfig+0xb4>
 8009bca:	4b76      	ldr	r3, [pc, #472]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a75      	ldr	r2, [pc, #468]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	4b73      	ldr	r3, [pc, #460]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a72      	ldr	r2, [pc, #456]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	e00b      	b.n	8009bfc <HAL_RCC_OscConfig+0xcc>
 8009be4:	4b6f      	ldr	r3, [pc, #444]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a6e      	ldr	r2, [pc, #440]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d013      	beq.n	8009c2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c04:	f7fc fb94 	bl	8006330 <HAL_GetTick>
 8009c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c0c:	f7fc fb90 	bl	8006330 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b64      	cmp	r3, #100	@ 0x64
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e21f      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c1e:	4b61      	ldr	r3, [pc, #388]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f0      	beq.n	8009c0c <HAL_RCC_OscConfig+0xdc>
 8009c2a:	e014      	b.n	8009c56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2c:	f7fc fb80 	bl	8006330 <HAL_GetTick>
 8009c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c34:	f7fc fb7c 	bl	8006330 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b64      	cmp	r3, #100	@ 0x64
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e20b      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c46:	4b57      	ldr	r3, [pc, #348]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f0      	bne.n	8009c34 <HAL_RCC_OscConfig+0x104>
 8009c52:	e000      	b.n	8009c56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d06f      	beq.n	8009d42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009c62:	4b50      	ldr	r3, [pc, #320]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 030c 	and.w	r3, r3, #12
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d017      	beq.n	8009c9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f003 030c 	and.w	r3, r3, #12
        || \
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d105      	bne.n	8009c86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c86:	4b47      	ldr	r3, [pc, #284]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009c8e:	2b0c      	cmp	r3, #12
 8009c90:	d11c      	bne.n	8009ccc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c92:	4b44      	ldr	r3, [pc, #272]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d116      	bne.n	8009ccc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c9e:	4b41      	ldr	r3, [pc, #260]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x186>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d001      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e1d3      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	4937      	ldr	r1, [pc, #220]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cca:	e03a      	b.n	8009d42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d020      	beq.n	8009d16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cd4:	4b34      	ldr	r3, [pc, #208]	@ (8009da8 <HAL_RCC_OscConfig+0x278>)
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cda:	f7fc fb29 	bl	8006330 <HAL_GetTick>
 8009cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ce0:	e008      	b.n	8009cf4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ce2:	f7fc fb25 	bl	8006330 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d901      	bls.n	8009cf4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e1b4      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0f0      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d00:	4b28      	ldr	r3, [pc, #160]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	4925      	ldr	r1, [pc, #148]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	600b      	str	r3, [r1, #0]
 8009d14:	e015      	b.n	8009d42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d16:	4b24      	ldr	r3, [pc, #144]	@ (8009da8 <HAL_RCC_OscConfig+0x278>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d1c:	f7fc fb08 	bl	8006330 <HAL_GetTick>
 8009d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d22:	e008      	b.n	8009d36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d24:	f7fc fb04 	bl	8006330 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d901      	bls.n	8009d36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e193      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d36:	4b1b      	ldr	r3, [pc, #108]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1f0      	bne.n	8009d24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0308 	and.w	r3, r3, #8
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d036      	beq.n	8009dbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d016      	beq.n	8009d84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d56:	4b15      	ldr	r3, [pc, #84]	@ (8009dac <HAL_RCC_OscConfig+0x27c>)
 8009d58:	2201      	movs	r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d5c:	f7fc fae8 	bl	8006330 <HAL_GetTick>
 8009d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d62:	e008      	b.n	8009d76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d64:	f7fc fae4 	bl	8006330 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e173      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d76:	4b0b      	ldr	r3, [pc, #44]	@ (8009da4 <HAL_RCC_OscConfig+0x274>)
 8009d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0f0      	beq.n	8009d64 <HAL_RCC_OscConfig+0x234>
 8009d82:	e01b      	b.n	8009dbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d84:	4b09      	ldr	r3, [pc, #36]	@ (8009dac <HAL_RCC_OscConfig+0x27c>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d8a:	f7fc fad1 	bl	8006330 <HAL_GetTick>
 8009d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d90:	e00e      	b.n	8009db0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d92:	f7fc facd 	bl	8006330 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d907      	bls.n	8009db0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e15c      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
 8009da4:	40023800 	.word	0x40023800
 8009da8:	42470000 	.word	0x42470000
 8009dac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009db0:	4b8a      	ldr	r3, [pc, #552]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1ea      	bne.n	8009d92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8097 	beq.w	8009ef8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009dce:	4b83      	ldr	r3, [pc, #524]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10f      	bne.n	8009dfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60bb      	str	r3, [r7, #8]
 8009dde:	4b7f      	ldr	r3, [pc, #508]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	4a7e      	ldr	r2, [pc, #504]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8009dea:	4b7c      	ldr	r3, [pc, #496]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009df2:	60bb      	str	r3, [r7, #8]
 8009df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009df6:	2301      	movs	r3, #1
 8009df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dfa:	4b79      	ldr	r3, [pc, #484]	@ (8009fe0 <HAL_RCC_OscConfig+0x4b0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d118      	bne.n	8009e38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e06:	4b76      	ldr	r3, [pc, #472]	@ (8009fe0 <HAL_RCC_OscConfig+0x4b0>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a75      	ldr	r2, [pc, #468]	@ (8009fe0 <HAL_RCC_OscConfig+0x4b0>)
 8009e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e12:	f7fc fa8d 	bl	8006330 <HAL_GetTick>
 8009e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e18:	e008      	b.n	8009e2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e1a:	f7fc fa89 	bl	8006330 <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d901      	bls.n	8009e2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e118      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8009fe0 <HAL_RCC_OscConfig+0x4b0>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0f0      	beq.n	8009e1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d106      	bne.n	8009e4e <HAL_RCC_OscConfig+0x31e>
 8009e40:	4b66      	ldr	r3, [pc, #408]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e44:	4a65      	ldr	r2, [pc, #404]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e46:	f043 0301 	orr.w	r3, r3, #1
 8009e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e4c:	e01c      	b.n	8009e88 <HAL_RCC_OscConfig+0x358>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	2b05      	cmp	r3, #5
 8009e54:	d10c      	bne.n	8009e70 <HAL_RCC_OscConfig+0x340>
 8009e56:	4b61      	ldr	r3, [pc, #388]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e5a:	4a60      	ldr	r2, [pc, #384]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e5c:	f043 0304 	orr.w	r3, r3, #4
 8009e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e62:	4b5e      	ldr	r3, [pc, #376]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e66:	4a5d      	ldr	r2, [pc, #372]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e68:	f043 0301 	orr.w	r3, r3, #1
 8009e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e6e:	e00b      	b.n	8009e88 <HAL_RCC_OscConfig+0x358>
 8009e70:	4b5a      	ldr	r3, [pc, #360]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e74:	4a59      	ldr	r2, [pc, #356]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e76:	f023 0301 	bic.w	r3, r3, #1
 8009e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e7c:	4b57      	ldr	r3, [pc, #348]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e80:	4a56      	ldr	r2, [pc, #344]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009e82:	f023 0304 	bic.w	r3, r3, #4
 8009e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d015      	beq.n	8009ebc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e90:	f7fc fa4e 	bl	8006330 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e96:	e00a      	b.n	8009eae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e98:	f7fc fa4a 	bl	8006330 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e0d7      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009eae:	4b4b      	ldr	r3, [pc, #300]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0ee      	beq.n	8009e98 <HAL_RCC_OscConfig+0x368>
 8009eba:	e014      	b.n	8009ee6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ebc:	f7fc fa38 	bl	8006330 <HAL_GetTick>
 8009ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ec2:	e00a      	b.n	8009eda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ec4:	f7fc fa34 	bl	8006330 <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e0c1      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009eda:	4b40      	ldr	r3, [pc, #256]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1ee      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d105      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009eec:	4b3b      	ldr	r3, [pc, #236]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 80ad 	beq.w	800a05c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f02:	4b36      	ldr	r3, [pc, #216]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f003 030c 	and.w	r3, r3, #12
 8009f0a:	2b08      	cmp	r3, #8
 8009f0c:	d060      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d145      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f16:	4b33      	ldr	r3, [pc, #204]	@ (8009fe4 <HAL_RCC_OscConfig+0x4b4>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1c:	f7fc fa08 	bl	8006330 <HAL_GetTick>
 8009f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f22:	e008      	b.n	8009f36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f24:	f7fc fa04 	bl	8006330 <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e093      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f36:	4b29      	ldr	r3, [pc, #164]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f0      	bne.n	8009f24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69da      	ldr	r2, [r3, #28]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f50:	019b      	lsls	r3, r3, #6
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f58:	085b      	lsrs	r3, r3, #1
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	041b      	lsls	r3, r3, #16
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f64:	061b      	lsls	r3, r3, #24
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6c:	071b      	lsls	r3, r3, #28
 8009f6e:	491b      	ldr	r1, [pc, #108]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f74:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe4 <HAL_RCC_OscConfig+0x4b4>)
 8009f76:	2201      	movs	r2, #1
 8009f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7a:	f7fc f9d9 	bl	8006330 <HAL_GetTick>
 8009f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f80:	e008      	b.n	8009f94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f82:	f7fc f9d5 	bl	8006330 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d901      	bls.n	8009f94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e064      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f94:	4b11      	ldr	r3, [pc, #68]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0f0      	beq.n	8009f82 <HAL_RCC_OscConfig+0x452>
 8009fa0:	e05c      	b.n	800a05c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <HAL_RCC_OscConfig+0x4b4>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa8:	f7fc f9c2 	bl	8006330 <HAL_GetTick>
 8009fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb0:	f7fc f9be 	bl	8006330 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e04d      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fc2:	4b06      	ldr	r3, [pc, #24]	@ (8009fdc <HAL_RCC_OscConfig+0x4ac>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x480>
 8009fce:	e045      	b.n	800a05c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d107      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e040      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
 8009fdc:	40023800 	.word	0x40023800
 8009fe0:	40007000 	.word	0x40007000
 8009fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009fe8:	4b1f      	ldr	r3, [pc, #124]	@ (800a068 <HAL_RCC_OscConfig+0x538>)
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d030      	beq.n	800a058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a000:	429a      	cmp	r2, r3
 800a002:	d129      	bne.n	800a058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a00e:	429a      	cmp	r2, r3
 800a010:	d122      	bne.n	800a058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a018:	4013      	ands	r3, r2
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a01e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a020:	4293      	cmp	r3, r2
 800a022:	d119      	bne.n	800a058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	3b01      	subs	r3, #1
 800a032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a034:	429a      	cmp	r2, r3
 800a036:	d10f      	bne.n	800a058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a044:	429a      	cmp	r2, r3
 800a046:	d107      	bne.n	800a058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a052:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a054:	429a      	cmp	r2, r3
 800a056:	d001      	beq.n	800a05c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e000      	b.n	800a05e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	40023800 	.word	0x40023800

0800a06c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e041      	b.n	800a102 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fa fbec 	bl	8004870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f000 faec 	bl	800a688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <HAL_TIM_PWM_Start+0x24>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b01      	cmp	r3, #1
 800a126:	bf14      	ite	ne
 800a128:	2301      	movne	r3, #1
 800a12a:	2300      	moveq	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	e022      	b.n	800a176 <HAL_TIM_PWM_Start+0x6a>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b04      	cmp	r3, #4
 800a134:	d109      	bne.n	800a14a <HAL_TIM_PWM_Start+0x3e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b01      	cmp	r3, #1
 800a140:	bf14      	ite	ne
 800a142:	2301      	movne	r3, #1
 800a144:	2300      	moveq	r3, #0
 800a146:	b2db      	uxtb	r3, r3
 800a148:	e015      	b.n	800a176 <HAL_TIM_PWM_Start+0x6a>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d109      	bne.n	800a164 <HAL_TIM_PWM_Start+0x58>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	e008      	b.n	800a176 <HAL_TIM_PWM_Start+0x6a>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	bf14      	ite	ne
 800a170:	2301      	movne	r3, #1
 800a172:	2300      	moveq	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e07c      	b.n	800a278 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d104      	bne.n	800a18e <HAL_TIM_PWM_Start+0x82>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a18c:	e013      	b.n	800a1b6 <HAL_TIM_PWM_Start+0xaa>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b04      	cmp	r3, #4
 800a192:	d104      	bne.n	800a19e <HAL_TIM_PWM_Start+0x92>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a19c:	e00b      	b.n	800a1b6 <HAL_TIM_PWM_Start+0xaa>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d104      	bne.n	800a1ae <HAL_TIM_PWM_Start+0xa2>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1ac:	e003      	b.n	800a1b6 <HAL_TIM_PWM_Start+0xaa>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fcbe 	bl	800ab40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a2d      	ldr	r2, [pc, #180]	@ (800a280 <HAL_TIM_PWM_Start+0x174>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d004      	beq.n	800a1d8 <HAL_TIM_PWM_Start+0xcc>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a2c      	ldr	r2, [pc, #176]	@ (800a284 <HAL_TIM_PWM_Start+0x178>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d101      	bne.n	800a1dc <HAL_TIM_PWM_Start+0xd0>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e000      	b.n	800a1de <HAL_TIM_PWM_Start+0xd2>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d007      	beq.n	800a1f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a22      	ldr	r2, [pc, #136]	@ (800a280 <HAL_TIM_PWM_Start+0x174>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d022      	beq.n	800a242 <HAL_TIM_PWM_Start+0x136>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a204:	d01d      	beq.n	800a242 <HAL_TIM_PWM_Start+0x136>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1f      	ldr	r2, [pc, #124]	@ (800a288 <HAL_TIM_PWM_Start+0x17c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d018      	beq.n	800a242 <HAL_TIM_PWM_Start+0x136>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1d      	ldr	r2, [pc, #116]	@ (800a28c <HAL_TIM_PWM_Start+0x180>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d013      	beq.n	800a242 <HAL_TIM_PWM_Start+0x136>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a1c      	ldr	r2, [pc, #112]	@ (800a290 <HAL_TIM_PWM_Start+0x184>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00e      	beq.n	800a242 <HAL_TIM_PWM_Start+0x136>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a16      	ldr	r2, [pc, #88]	@ (800a284 <HAL_TIM_PWM_Start+0x178>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d009      	beq.n	800a242 <HAL_TIM_PWM_Start+0x136>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a18      	ldr	r2, [pc, #96]	@ (800a294 <HAL_TIM_PWM_Start+0x188>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d004      	beq.n	800a242 <HAL_TIM_PWM_Start+0x136>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a16      	ldr	r2, [pc, #88]	@ (800a298 <HAL_TIM_PWM_Start+0x18c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d111      	bne.n	800a266 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f003 0307 	and.w	r3, r3, #7
 800a24c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b06      	cmp	r3, #6
 800a252:	d010      	beq.n	800a276 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a264:	e007      	b.n	800a276 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f042 0201 	orr.w	r2, r2, #1
 800a274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	40010000 	.word	0x40010000
 800a284:	40010400 	.word	0x40010400
 800a288:	40000400 	.word	0x40000400
 800a28c:	40000800 	.word	0x40000800
 800a290:	40000c00 	.word	0x40000c00
 800a294:	40014000 	.word	0x40014000
 800a298:	40001800 	.word	0x40001800

0800a29c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e097      	b.n	800a3e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7fa fa59 	bl	800477c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f000 f9c9 	bl	800a688 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	4313      	orrs	r3, r2
 800a316:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	4313      	orrs	r3, r2
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4313      	orrs	r3, r2
 800a334:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a33c:	f023 030c 	bic.w	r3, r3, #12
 800a340:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a348:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a34c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	021b      	lsls	r3, r3, #8
 800a358:	4313      	orrs	r3, r2
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	011a      	lsls	r2, r3, #4
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	031b      	lsls	r3, r3, #12
 800a36c:	4313      	orrs	r3, r2
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	4313      	orrs	r3, r2
 800a372:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a37a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a382:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	4313      	orrs	r3, r2
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	4313      	orrs	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a400:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a408:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a410:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d110      	bne.n	800a43a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d102      	bne.n	800a424 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a41e:	7b7b      	ldrb	r3, [r7, #13]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d001      	beq.n	800a428 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e069      	b.n	800a4fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a438:	e031      	b.n	800a49e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d110      	bne.n	800a462 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d102      	bne.n	800a44c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a446:	7b3b      	ldrb	r3, [r7, #12]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d001      	beq.n	800a450 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e055      	b.n	800a4fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2202      	movs	r2, #2
 800a454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a460:	e01d      	b.n	800a49e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d108      	bne.n	800a47a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d105      	bne.n	800a47a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a46e:	7b7b      	ldrb	r3, [r7, #13]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d102      	bne.n	800a47a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a474:	7b3b      	ldrb	r3, [r7, #12]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d001      	beq.n	800a47e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e03e      	b.n	800a4fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2202      	movs	r2, #2
 800a482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2202      	movs	r2, #2
 800a48a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2202      	movs	r2, #2
 800a49a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_TIM_Encoder_Start+0xc4>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d008      	beq.n	800a4bc <HAL_TIM_Encoder_Start+0xd4>
 800a4aa:	e00f      	b.n	800a4cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 fb43 	bl	800ab40 <TIM_CCxChannelCmd>
      break;
 800a4ba:	e016      	b.n	800a4ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	2104      	movs	r1, #4
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 fb3b 	bl	800ab40 <TIM_CCxChannelCmd>
      break;
 800a4ca:	e00e      	b.n	800a4ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fb33 	bl	800ab40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	2104      	movs	r1, #4
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fb2c 	bl	800ab40 <TIM_CCxChannelCmd>
      break;
 800a4e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f042 0201 	orr.w	r2, r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d101      	bne.n	800a522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a51e:	2302      	movs	r3, #2
 800a520:	e0ae      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b0c      	cmp	r3, #12
 800a52e:	f200 809f 	bhi.w	800a670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a532:	a201      	add	r2, pc, #4	@ (adr r2, 800a538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a56d 	.word	0x0800a56d
 800a53c:	0800a671 	.word	0x0800a671
 800a540:	0800a671 	.word	0x0800a671
 800a544:	0800a671 	.word	0x0800a671
 800a548:	0800a5ad 	.word	0x0800a5ad
 800a54c:	0800a671 	.word	0x0800a671
 800a550:	0800a671 	.word	0x0800a671
 800a554:	0800a671 	.word	0x0800a671
 800a558:	0800a5ef 	.word	0x0800a5ef
 800a55c:	0800a671 	.word	0x0800a671
 800a560:	0800a671 	.word	0x0800a671
 800a564:	0800a671 	.word	0x0800a671
 800a568:	0800a62f 	.word	0x0800a62f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68b9      	ldr	r1, [r7, #8]
 800a572:	4618      	mov	r0, r3
 800a574:	f000 f934 	bl	800a7e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699a      	ldr	r2, [r3, #24]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0208 	orr.w	r2, r2, #8
 800a586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 0204 	bic.w	r2, r2, #4
 800a596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6999      	ldr	r1, [r3, #24]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	691a      	ldr	r2, [r3, #16]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	619a      	str	r2, [r3, #24]
      break;
 800a5aa:	e064      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f984 	bl	800a8c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	699a      	ldr	r2, [r3, #24]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	699a      	ldr	r2, [r3, #24]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6999      	ldr	r1, [r3, #24]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	021a      	lsls	r2, r3, #8
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	619a      	str	r2, [r3, #24]
      break;
 800a5ec:	e043      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68b9      	ldr	r1, [r7, #8]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 f9d9 	bl	800a9ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69da      	ldr	r2, [r3, #28]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0208 	orr.w	r2, r2, #8
 800a608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	69da      	ldr	r2, [r3, #28]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0204 	bic.w	r2, r2, #4
 800a618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69d9      	ldr	r1, [r3, #28]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	61da      	str	r2, [r3, #28]
      break;
 800a62c:	e023      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fa2d 	bl	800aa94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69da      	ldr	r2, [r3, #28]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	69da      	ldr	r2, [r3, #28]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69d9      	ldr	r1, [r3, #28]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	021a      	lsls	r2, r3, #8
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	61da      	str	r2, [r3, #28]
      break;
 800a66e:	e002      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	75fb      	strb	r3, [r7, #23]
      break;
 800a674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a46      	ldr	r2, [pc, #280]	@ (800a7b4 <TIM_Base_SetConfig+0x12c>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d013      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6a6:	d00f      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a43      	ldr	r2, [pc, #268]	@ (800a7b8 <TIM_Base_SetConfig+0x130>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d00b      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a42      	ldr	r2, [pc, #264]	@ (800a7bc <TIM_Base_SetConfig+0x134>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d007      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a41      	ldr	r2, [pc, #260]	@ (800a7c0 <TIM_Base_SetConfig+0x138>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d003      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a40      	ldr	r2, [pc, #256]	@ (800a7c4 <TIM_Base_SetConfig+0x13c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d108      	bne.n	800a6da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a35      	ldr	r2, [pc, #212]	@ (800a7b4 <TIM_Base_SetConfig+0x12c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d02b      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6e8:	d027      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a32      	ldr	r2, [pc, #200]	@ (800a7b8 <TIM_Base_SetConfig+0x130>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d023      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a31      	ldr	r2, [pc, #196]	@ (800a7bc <TIM_Base_SetConfig+0x134>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d01f      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a30      	ldr	r2, [pc, #192]	@ (800a7c0 <TIM_Base_SetConfig+0x138>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d01b      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a2f      	ldr	r2, [pc, #188]	@ (800a7c4 <TIM_Base_SetConfig+0x13c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d017      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a2e      	ldr	r2, [pc, #184]	@ (800a7c8 <TIM_Base_SetConfig+0x140>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d013      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a2d      	ldr	r2, [pc, #180]	@ (800a7cc <TIM_Base_SetConfig+0x144>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00f      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a2c      	ldr	r2, [pc, #176]	@ (800a7d0 <TIM_Base_SetConfig+0x148>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00b      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a2b      	ldr	r2, [pc, #172]	@ (800a7d4 <TIM_Base_SetConfig+0x14c>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d007      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a2a      	ldr	r2, [pc, #168]	@ (800a7d8 <TIM_Base_SetConfig+0x150>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d003      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a29      	ldr	r2, [pc, #164]	@ (800a7dc <TIM_Base_SetConfig+0x154>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d108      	bne.n	800a74c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a10      	ldr	r2, [pc, #64]	@ (800a7b4 <TIM_Base_SetConfig+0x12c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d003      	beq.n	800a780 <TIM_Base_SetConfig+0xf8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a12      	ldr	r2, [pc, #72]	@ (800a7c4 <TIM_Base_SetConfig+0x13c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d103      	bne.n	800a788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	691a      	ldr	r2, [r3, #16]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b01      	cmp	r3, #1
 800a798:	d105      	bne.n	800a7a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	f023 0201 	bic.w	r2, r3, #1
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	611a      	str	r2, [r3, #16]
  }
}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	40010000 	.word	0x40010000
 800a7b8:	40000400 	.word	0x40000400
 800a7bc:	40000800 	.word	0x40000800
 800a7c0:	40000c00 	.word	0x40000c00
 800a7c4:	40010400 	.word	0x40010400
 800a7c8:	40014000 	.word	0x40014000
 800a7cc:	40014400 	.word	0x40014400
 800a7d0:	40014800 	.word	0x40014800
 800a7d4:	40001800 	.word	0x40001800
 800a7d8:	40001c00 	.word	0x40001c00
 800a7dc:	40002000 	.word	0x40002000

0800a7e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	f023 0201 	bic.w	r2, r3, #1
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f023 0302 	bic.w	r3, r3, #2
 800a828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	4313      	orrs	r3, r2
 800a832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a20      	ldr	r2, [pc, #128]	@ (800a8b8 <TIM_OC1_SetConfig+0xd8>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d003      	beq.n	800a844 <TIM_OC1_SetConfig+0x64>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8bc <TIM_OC1_SetConfig+0xdc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d10c      	bne.n	800a85e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f023 0308 	bic.w	r3, r3, #8
 800a84a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	4313      	orrs	r3, r2
 800a854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f023 0304 	bic.w	r3, r3, #4
 800a85c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a15      	ldr	r2, [pc, #84]	@ (800a8b8 <TIM_OC1_SetConfig+0xd8>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d003      	beq.n	800a86e <TIM_OC1_SetConfig+0x8e>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a14      	ldr	r2, [pc, #80]	@ (800a8bc <TIM_OC1_SetConfig+0xdc>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d111      	bne.n	800a892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a87c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	4313      	orrs	r3, r2
 800a886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	4313      	orrs	r3, r2
 800a890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	621a      	str	r2, [r3, #32]
}
 800a8ac:	bf00      	nop
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	40010000 	.word	0x40010000
 800a8bc:	40010400 	.word	0x40010400

0800a8c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a1b      	ldr	r3, [r3, #32]
 800a8d4:	f023 0210 	bic.w	r2, r3, #16
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	021b      	lsls	r3, r3, #8
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4313      	orrs	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f023 0320 	bic.w	r3, r3, #32
 800a90a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	011b      	lsls	r3, r3, #4
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	4313      	orrs	r3, r2
 800a916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a22      	ldr	r2, [pc, #136]	@ (800a9a4 <TIM_OC2_SetConfig+0xe4>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <TIM_OC2_SetConfig+0x68>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a21      	ldr	r2, [pc, #132]	@ (800a9a8 <TIM_OC2_SetConfig+0xe8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d10d      	bne.n	800a944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a92e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	4313      	orrs	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a17      	ldr	r2, [pc, #92]	@ (800a9a4 <TIM_OC2_SetConfig+0xe4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d003      	beq.n	800a954 <TIM_OC2_SetConfig+0x94>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a16      	ldr	r2, [pc, #88]	@ (800a9a8 <TIM_OC2_SetConfig+0xe8>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d113      	bne.n	800a97c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a95a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	695b      	ldr	r3, [r3, #20]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	4313      	orrs	r3, r2
 800a97a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	621a      	str	r2, [r3, #32]
}
 800a996:	bf00      	nop
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	40010000 	.word	0x40010000
 800a9a8:	40010400 	.word	0x40010400

0800a9ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 0303 	bic.w	r3, r3, #3
 800a9e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	021b      	lsls	r3, r3, #8
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a21      	ldr	r2, [pc, #132]	@ (800aa8c <TIM_OC3_SetConfig+0xe0>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d003      	beq.n	800aa12 <TIM_OC3_SetConfig+0x66>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a20      	ldr	r2, [pc, #128]	@ (800aa90 <TIM_OC3_SetConfig+0xe4>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d10d      	bne.n	800aa2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	021b      	lsls	r3, r3, #8
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a16      	ldr	r2, [pc, #88]	@ (800aa8c <TIM_OC3_SetConfig+0xe0>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d003      	beq.n	800aa3e <TIM_OC3_SetConfig+0x92>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a15      	ldr	r2, [pc, #84]	@ (800aa90 <TIM_OC3_SetConfig+0xe4>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d113      	bne.n	800aa66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	011b      	lsls	r3, r3, #4
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	011b      	lsls	r3, r3, #4
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	621a      	str	r2, [r3, #32]
}
 800aa80:	bf00      	nop
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	40010000 	.word	0x40010000
 800aa90:	40010400 	.word	0x40010400

0800aa94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aaca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	021b      	lsls	r3, r3, #8
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	031b      	lsls	r3, r3, #12
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a12      	ldr	r2, [pc, #72]	@ (800ab38 <TIM_OC4_SetConfig+0xa4>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d003      	beq.n	800aafc <TIM_OC4_SetConfig+0x68>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a11      	ldr	r2, [pc, #68]	@ (800ab3c <TIM_OC4_SetConfig+0xa8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d109      	bne.n	800ab10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	019b      	lsls	r3, r3, #6
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	621a      	str	r2, [r3, #32]
}
 800ab2a:	bf00      	nop
 800ab2c:	371c      	adds	r7, #28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	40010000 	.word	0x40010000
 800ab3c:	40010400 	.word	0x40010400

0800ab40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f003 031f 	and.w	r3, r3, #31
 800ab52:	2201      	movs	r2, #1
 800ab54:	fa02 f303 	lsl.w	r3, r2, r3
 800ab58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6a1a      	ldr	r2, [r3, #32]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	43db      	mvns	r3, r3
 800ab62:	401a      	ands	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a1a      	ldr	r2, [r3, #32]
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f003 031f 	and.w	r3, r3, #31
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	fa01 f303 	lsl.w	r3, r1, r3
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	621a      	str	r2, [r3, #32]
}
 800ab7e:	bf00      	nop
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aba0:	2302      	movs	r3, #2
 800aba2:	e05a      	b.n	800ac5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a21      	ldr	r2, [pc, #132]	@ (800ac68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d022      	beq.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf0:	d01d      	beq.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a1d      	ldr	r2, [pc, #116]	@ (800ac6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d018      	beq.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a1b      	ldr	r2, [pc, #108]	@ (800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d013      	beq.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a1a      	ldr	r2, [pc, #104]	@ (800ac74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d00e      	beq.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a18      	ldr	r2, [pc, #96]	@ (800ac78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d009      	beq.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a17      	ldr	r2, [pc, #92]	@ (800ac7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d004      	beq.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a15      	ldr	r2, [pc, #84]	@ (800ac80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d10c      	bne.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40000400 	.word	0x40000400
 800ac70:	40000800 	.word	0x40000800
 800ac74:	40000c00 	.word	0x40000c00
 800ac78:	40010400 	.word	0x40010400
 800ac7c:	40014000 	.word	0x40014000
 800ac80:	40001800 	.word	0x40001800

0800ac84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e042      	b.n	800ad1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7f9 fe5c 	bl	8004968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2224      	movs	r2, #36	@ 0x24
 800acb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800acc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fd69 	bl	800b7a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800acdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	695a      	ldr	r2, [r3, #20]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800acec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800acfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2220      	movs	r2, #32
 800ad10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08a      	sub	sp, #40	@ 0x28
 800ad28:	af02      	add	r7, sp, #8
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	4613      	mov	r3, r2
 800ad32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d175      	bne.n	800ae30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <HAL_UART_Transmit+0x2c>
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e06e      	b.n	800ae32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2221      	movs	r2, #33	@ 0x21
 800ad5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad62:	f7fb fae5 	bl	8006330 <HAL_GetTick>
 800ad66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	88fa      	ldrh	r2, [r7, #6]
 800ad6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	88fa      	ldrh	r2, [r7, #6]
 800ad72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad7c:	d108      	bne.n	800ad90 <HAL_UART_Transmit+0x6c>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d104      	bne.n	800ad90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	61bb      	str	r3, [r7, #24]
 800ad8e:	e003      	b.n	800ad98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad98:	e02e      	b.n	800adf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2200      	movs	r2, #0
 800ada2:	2180      	movs	r1, #128	@ 0x80
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 fb05 	bl	800b3b4 <UART_WaitOnFlagUntilTimeout>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e03a      	b.n	800ae32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10b      	bne.n	800adda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800add0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	3302      	adds	r3, #2
 800add6:	61bb      	str	r3, [r7, #24]
 800add8:	e007      	b.n	800adea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	781a      	ldrb	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	3301      	adds	r3, #1
 800ade8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800adee:	b29b      	uxth	r3, r3
 800adf0:	3b01      	subs	r3, #1
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1cb      	bne.n	800ad9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2140      	movs	r1, #64	@ 0x40
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 fad1 	bl	800b3b4 <UART_WaitOnFlagUntilTimeout>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e006      	b.n	800ae32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	e000      	b.n	800ae32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ae30:	2302      	movs	r3, #2
  }
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b0ba      	sub	sp, #232	@ 0xe8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae72:	f003 030f 	and.w	r3, r3, #15
 800ae76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ae7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10f      	bne.n	800aea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d009      	beq.n	800aea2 <HAL_UART_IRQHandler+0x66>
 800ae8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fbc2 	bl	800b624 <UART_Receive_IT>
      return;
 800aea0:	e25b      	b.n	800b35a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 80de 	beq.w	800b068 <HAL_UART_IRQHandler+0x22c>
 800aeac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d106      	bne.n	800aec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aebc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 80d1 	beq.w	800b068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00b      	beq.n	800aeea <HAL_UART_IRQHandler+0xae>
 800aed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee2:	f043 0201 	orr.w	r2, r3, #1
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aeea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeee:	f003 0304 	and.w	r3, r3, #4
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <HAL_UART_IRQHandler+0xd2>
 800aef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af06:	f043 0202 	orr.w	r2, r3, #2
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <HAL_UART_IRQHandler+0xf6>
 800af1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af2a:	f043 0204 	orr.w	r2, r3, #4
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af36:	f003 0308 	and.w	r3, r3, #8
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d011      	beq.n	800af62 <HAL_UART_IRQHandler+0x126>
 800af3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	2b00      	cmp	r3, #0
 800af48:	d105      	bne.n	800af56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	d005      	beq.n	800af62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5a:	f043 0208 	orr.w	r2, r3, #8
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 81f2 	beq.w	800b350 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af70:	f003 0320 	and.w	r3, r3, #32
 800af74:	2b00      	cmp	r3, #0
 800af76:	d008      	beq.n	800af8a <HAL_UART_IRQHandler+0x14e>
 800af78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fb4d 	bl	800b624 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af94:	2b40      	cmp	r3, #64	@ 0x40
 800af96:	bf0c      	ite	eq
 800af98:	2301      	moveq	r3, #1
 800af9a:	2300      	movne	r3, #0
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa6:	f003 0308 	and.w	r3, r3, #8
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <HAL_UART_IRQHandler+0x17a>
 800afae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d04f      	beq.n	800b056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fa55 	bl	800b466 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afc6:	2b40      	cmp	r3, #64	@ 0x40
 800afc8:	d141      	bne.n	800b04e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3314      	adds	r3, #20
 800afd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800afe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3314      	adds	r3, #20
 800aff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aff6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800affa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b006:	e841 2300 	strex	r3, r2, [r1]
 800b00a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b00e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1d9      	bne.n	800afca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d013      	beq.n	800b046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b022:	4a7e      	ldr	r2, [pc, #504]	@ (800b21c <HAL_UART_IRQHandler+0x3e0>)
 800b024:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fb fff0 	bl	8007010 <HAL_DMA_Abort_IT>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d016      	beq.n	800b064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b044:	e00e      	b.n	800b064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f99e 	bl	800b388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b04c:	e00a      	b.n	800b064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f99a 	bl	800b388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b054:	e006      	b.n	800b064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f996 	bl	800b388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b062:	e175      	b.n	800b350 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b064:	bf00      	nop
    return;
 800b066:	e173      	b.n	800b350 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	f040 814f 	bne.w	800b310 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b076:	f003 0310 	and.w	r3, r3, #16
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 8148 	beq.w	800b310 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 8141 	beq.w	800b310 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b08e:	2300      	movs	r3, #0
 800b090:	60bb      	str	r3, [r7, #8]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	60bb      	str	r3, [r7, #8]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	60bb      	str	r3, [r7, #8]
 800b0a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ae:	2b40      	cmp	r3, #64	@ 0x40
 800b0b0:	f040 80b6 	bne.w	800b220 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f000 8145 	beq.w	800b354 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b0ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	f080 813e 	bcs.w	800b354 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0ea:	f000 8088 	beq.w	800b1fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	330c      	adds	r3, #12
 800b0f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0fc:	e853 3f00 	ldrex	r3, [r3]
 800b100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b10c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	330c      	adds	r3, #12
 800b116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b11a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b11e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1d9      	bne.n	800b0ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3314      	adds	r3, #20
 800b140:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b14a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3314      	adds	r3, #20
 800b15a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b15e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b162:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b164:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b166:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b16a:	e841 2300 	strex	r3, r2, [r1]
 800b16e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1e1      	bne.n	800b13a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	3314      	adds	r3, #20
 800b17c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b18c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3314      	adds	r3, #20
 800b196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b19a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b19c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b1a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b1a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e3      	bne.n	800b176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	330c      	adds	r3, #12
 800b1c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1c6:	e853 3f00 	ldrex	r3, [r3]
 800b1ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1ce:	f023 0310 	bic.w	r3, r3, #16
 800b1d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	330c      	adds	r3, #12
 800b1dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b1e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b1e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e3      	bne.n	800b1bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fb fe99 	bl	8006f30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2202      	movs	r2, #2
 800b202:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	b29b      	uxth	r3, r3
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f8c1 	bl	800b39c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b21a:	e09b      	b.n	800b354 <HAL_UART_IRQHandler+0x518>
 800b21c:	0800b52d 	.word	0x0800b52d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b228:	b29b      	uxth	r3, r3
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b234:	b29b      	uxth	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 808e 	beq.w	800b358 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b23c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 8089 	beq.w	800b358 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	330c      	adds	r3, #12
 800b24c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b250:	e853 3f00 	ldrex	r3, [r3]
 800b254:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b25c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	330c      	adds	r3, #12
 800b266:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b26a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b26c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b272:	e841 2300 	strex	r3, r2, [r1]
 800b276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1e3      	bne.n	800b246 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3314      	adds	r3, #20
 800b284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	623b      	str	r3, [r7, #32]
   return(result);
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	f023 0301 	bic.w	r3, r3, #1
 800b294:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3314      	adds	r3, #20
 800b29e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e3      	bne.n	800b27e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	330c      	adds	r3, #12
 800b2ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0310 	bic.w	r3, r3, #16
 800b2da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	330c      	adds	r3, #12
 800b2e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b2e8:	61fa      	str	r2, [r7, #28]
 800b2ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ec:	69b9      	ldr	r1, [r7, #24]
 800b2ee:	69fa      	ldr	r2, [r7, #28]
 800b2f0:	e841 2300 	strex	r3, r2, [r1]
 800b2f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e3      	bne.n	800b2c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2202      	movs	r2, #2
 800b300:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f847 	bl	800b39c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b30e:	e023      	b.n	800b358 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d009      	beq.n	800b330 <HAL_UART_IRQHandler+0x4f4>
 800b31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f913 	bl	800b554 <UART_Transmit_IT>
    return;
 800b32e:	e014      	b.n	800b35a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00e      	beq.n	800b35a <HAL_UART_IRQHandler+0x51e>
 800b33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b344:	2b00      	cmp	r3, #0
 800b346:	d008      	beq.n	800b35a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f953 	bl	800b5f4 <UART_EndTransmit_IT>
    return;
 800b34e:	e004      	b.n	800b35a <HAL_UART_IRQHandler+0x51e>
    return;
 800b350:	bf00      	nop
 800b352:	e002      	b.n	800b35a <HAL_UART_IRQHandler+0x51e>
      return;
 800b354:	bf00      	nop
 800b356:	e000      	b.n	800b35a <HAL_UART_IRQHandler+0x51e>
      return;
 800b358:	bf00      	nop
  }
}
 800b35a:	37e8      	adds	r7, #232	@ 0xe8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	603b      	str	r3, [r7, #0]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3c4:	e03b      	b.n	800b43e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3cc:	d037      	beq.n	800b43e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3ce:	f7fa ffaf 	bl	8006330 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	6a3a      	ldr	r2, [r7, #32]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d302      	bcc.n	800b3e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e03a      	b.n	800b45e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	f003 0304 	and.w	r3, r3, #4
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d023      	beq.n	800b43e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2b80      	cmp	r3, #128	@ 0x80
 800b3fa:	d020      	beq.n	800b43e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	2b40      	cmp	r3, #64	@ 0x40
 800b400:	d01d      	beq.n	800b43e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0308 	and.w	r3, r3, #8
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d116      	bne.n	800b43e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b410:	2300      	movs	r3, #0
 800b412:	617b      	str	r3, [r7, #20]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	617b      	str	r3, [r7, #20]
 800b424:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 f81d 	bl	800b466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2208      	movs	r2, #8
 800b430:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e00f      	b.n	800b45e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	4013      	ands	r3, r2
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	bf0c      	ite	eq
 800b44e:	2301      	moveq	r3, #1
 800b450:	2300      	movne	r3, #0
 800b452:	b2db      	uxtb	r3, r3
 800b454:	461a      	mov	r2, r3
 800b456:	79fb      	ldrb	r3, [r7, #7]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d0b4      	beq.n	800b3c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b466:	b480      	push	{r7}
 800b468:	b095      	sub	sp, #84	@ 0x54
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	330c      	adds	r3, #12
 800b474:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	330c      	adds	r3, #12
 800b48c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b48e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e5      	bne.n	800b46e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3314      	adds	r3, #20
 800b4a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	f023 0301 	bic.w	r3, r3, #1
 800b4b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3314      	adds	r3, #20
 800b4c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e5      	bne.n	800b4a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d119      	bne.n	800b512 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	330c      	adds	r3, #12
 800b4e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f023 0310 	bic.w	r3, r3, #16
 800b4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	330c      	adds	r3, #12
 800b4fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4fe:	61ba      	str	r2, [r7, #24]
 800b500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6979      	ldr	r1, [r7, #20]
 800b504:	69ba      	ldr	r2, [r7, #24]
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	613b      	str	r3, [r7, #16]
   return(result);
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e5      	bne.n	800b4de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2220      	movs	r2, #32
 800b516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b520:	bf00      	nop
 800b522:	3754      	adds	r7, #84	@ 0x54
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f7ff ff1e 	bl	800b388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b54c:	bf00      	nop
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b21      	cmp	r3, #33	@ 0x21
 800b566:	d13e      	bne.n	800b5e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b570:	d114      	bne.n	800b59c <UART_Transmit_IT+0x48>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d110      	bne.n	800b59c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	461a      	mov	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b58e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a1b      	ldr	r3, [r3, #32]
 800b594:	1c9a      	adds	r2, r3, #2
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	621a      	str	r2, [r3, #32]
 800b59a:	e008      	b.n	800b5ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a1b      	ldr	r3, [r3, #32]
 800b5a0:	1c59      	adds	r1, r3, #1
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	6211      	str	r1, [r2, #32]
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10f      	bne.n	800b5e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b5d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68da      	ldr	r2, [r3, #12]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e000      	b.n	800b5e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b5e6:	2302      	movs	r3, #2
  }
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b60a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff fea3 	bl	800b360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08c      	sub	sp, #48	@ 0x30
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b22      	cmp	r3, #34	@ 0x22
 800b636:	f040 80ae 	bne.w	800b796 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b642:	d117      	bne.n	800b674 <UART_Receive_IT+0x50>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d113      	bne.n	800b674 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b64c:	2300      	movs	r3, #0
 800b64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b654:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b662:	b29a      	uxth	r2, r3
 800b664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b666:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66c:	1c9a      	adds	r2, r3, #2
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	629a      	str	r2, [r3, #40]	@ 0x28
 800b672:	e026      	b.n	800b6c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b678:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b686:	d007      	beq.n	800b698 <UART_Receive_IT+0x74>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10a      	bne.n	800b6a6 <UART_Receive_IT+0x82>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d106      	bne.n	800b6a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	e008      	b.n	800b6b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b2:	b2da      	uxtb	r2, r3
 800b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d15d      	bne.n	800b792 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68da      	ldr	r2, [r3, #12]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f022 0220 	bic.w	r2, r2, #32
 800b6e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68da      	ldr	r2, [r3, #12]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b6f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	695a      	ldr	r2, [r3, #20]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f022 0201 	bic.w	r2, r2, #1
 800b704:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2220      	movs	r2, #32
 800b70a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d135      	bne.n	800b788 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	330c      	adds	r3, #12
 800b728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	613b      	str	r3, [r7, #16]
   return(result);
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f023 0310 	bic.w	r3, r3, #16
 800b738:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	330c      	adds	r3, #12
 800b740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b742:	623a      	str	r2, [r7, #32]
 800b744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b746:	69f9      	ldr	r1, [r7, #28]
 800b748:	6a3a      	ldr	r2, [r7, #32]
 800b74a:	e841 2300 	strex	r3, r2, [r1]
 800b74e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1e5      	bne.n	800b722 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0310 	and.w	r3, r3, #16
 800b760:	2b10      	cmp	r3, #16
 800b762:	d10a      	bne.n	800b77a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b764:	2300      	movs	r3, #0
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fe0b 	bl	800b39c <HAL_UARTEx_RxEventCallback>
 800b786:	e002      	b.n	800b78e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff fdf3 	bl	800b374 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	e002      	b.n	800b798 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	e000      	b.n	800b798 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b796:	2302      	movs	r3, #2
  }
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3730      	adds	r7, #48	@ 0x30
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7a4:	b0c0      	sub	sp, #256	@ 0x100
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7bc:	68d9      	ldr	r1, [r3, #12]
 800b7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	ea40 0301 	orr.w	r3, r0, r1
 800b7c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7ce:	689a      	ldr	r2, [r3, #8]
 800b7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b7f8:	f021 010c 	bic.w	r1, r1, #12
 800b7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b806:	430b      	orrs	r3, r1
 800b808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b80a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b81a:	6999      	ldr	r1, [r3, #24]
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	ea40 0301 	orr.w	r3, r0, r1
 800b826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	4b8f      	ldr	r3, [pc, #572]	@ (800ba6c <UART_SetConfig+0x2cc>)
 800b830:	429a      	cmp	r2, r3
 800b832:	d005      	beq.n	800b840 <UART_SetConfig+0xa0>
 800b834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	4b8d      	ldr	r3, [pc, #564]	@ (800ba70 <UART_SetConfig+0x2d0>)
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d104      	bne.n	800b84a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b840:	f7fd ff32 	bl	80096a8 <HAL_RCC_GetPCLK2Freq>
 800b844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b848:	e003      	b.n	800b852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b84a:	f7fd ff19 	bl	8009680 <HAL_RCC_GetPCLK1Freq>
 800b84e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b85c:	f040 810c 	bne.w	800ba78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b864:	2200      	movs	r2, #0
 800b866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b86a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b86e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b872:	4622      	mov	r2, r4
 800b874:	462b      	mov	r3, r5
 800b876:	1891      	adds	r1, r2, r2
 800b878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b87a:	415b      	adcs	r3, r3
 800b87c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b87e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b882:	4621      	mov	r1, r4
 800b884:	eb12 0801 	adds.w	r8, r2, r1
 800b888:	4629      	mov	r1, r5
 800b88a:	eb43 0901 	adc.w	r9, r3, r1
 800b88e:	f04f 0200 	mov.w	r2, #0
 800b892:	f04f 0300 	mov.w	r3, #0
 800b896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b89a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b89e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8a2:	4690      	mov	r8, r2
 800b8a4:	4699      	mov	r9, r3
 800b8a6:	4623      	mov	r3, r4
 800b8a8:	eb18 0303 	adds.w	r3, r8, r3
 800b8ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	eb49 0303 	adc.w	r3, r9, r3
 800b8b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b8ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	18db      	adds	r3, r3, r3
 800b8d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	eb42 0303 	adc.w	r3, r2, r3
 800b8da:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b8e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b8e4:	f7f5 f9f0 	bl	8000cc8 <__aeabi_uldivmod>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4b61      	ldr	r3, [pc, #388]	@ (800ba74 <UART_SetConfig+0x2d4>)
 800b8ee:	fba3 2302 	umull	r2, r3, r3, r2
 800b8f2:	095b      	lsrs	r3, r3, #5
 800b8f4:	011c      	lsls	r4, r3, #4
 800b8f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b908:	4642      	mov	r2, r8
 800b90a:	464b      	mov	r3, r9
 800b90c:	1891      	adds	r1, r2, r2
 800b90e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b910:	415b      	adcs	r3, r3
 800b912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b918:	4641      	mov	r1, r8
 800b91a:	eb12 0a01 	adds.w	sl, r2, r1
 800b91e:	4649      	mov	r1, r9
 800b920:	eb43 0b01 	adc.w	fp, r3, r1
 800b924:	f04f 0200 	mov.w	r2, #0
 800b928:	f04f 0300 	mov.w	r3, #0
 800b92c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b938:	4692      	mov	sl, r2
 800b93a:	469b      	mov	fp, r3
 800b93c:	4643      	mov	r3, r8
 800b93e:	eb1a 0303 	adds.w	r3, sl, r3
 800b942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b946:	464b      	mov	r3, r9
 800b948:	eb4b 0303 	adc.w	r3, fp, r3
 800b94c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b95c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b964:	460b      	mov	r3, r1
 800b966:	18db      	adds	r3, r3, r3
 800b968:	643b      	str	r3, [r7, #64]	@ 0x40
 800b96a:	4613      	mov	r3, r2
 800b96c:	eb42 0303 	adc.w	r3, r2, r3
 800b970:	647b      	str	r3, [r7, #68]	@ 0x44
 800b972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b97a:	f7f5 f9a5 	bl	8000cc8 <__aeabi_uldivmod>
 800b97e:	4602      	mov	r2, r0
 800b980:	460b      	mov	r3, r1
 800b982:	4611      	mov	r1, r2
 800b984:	4b3b      	ldr	r3, [pc, #236]	@ (800ba74 <UART_SetConfig+0x2d4>)
 800b986:	fba3 2301 	umull	r2, r3, r3, r1
 800b98a:	095b      	lsrs	r3, r3, #5
 800b98c:	2264      	movs	r2, #100	@ 0x64
 800b98e:	fb02 f303 	mul.w	r3, r2, r3
 800b992:	1acb      	subs	r3, r1, r3
 800b994:	00db      	lsls	r3, r3, #3
 800b996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b99a:	4b36      	ldr	r3, [pc, #216]	@ (800ba74 <UART_SetConfig+0x2d4>)
 800b99c:	fba3 2302 	umull	r2, r3, r3, r2
 800b9a0:	095b      	lsrs	r3, r3, #5
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b9a8:	441c      	add	r4, r3
 800b9aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b9b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b9b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b9bc:	4642      	mov	r2, r8
 800b9be:	464b      	mov	r3, r9
 800b9c0:	1891      	adds	r1, r2, r2
 800b9c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b9c4:	415b      	adcs	r3, r3
 800b9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b9cc:	4641      	mov	r1, r8
 800b9ce:	1851      	adds	r1, r2, r1
 800b9d0:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	414b      	adcs	r3, r1
 800b9d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9d8:	f04f 0200 	mov.w	r2, #0
 800b9dc:	f04f 0300 	mov.w	r3, #0
 800b9e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b9e4:	4659      	mov	r1, fp
 800b9e6:	00cb      	lsls	r3, r1, #3
 800b9e8:	4651      	mov	r1, sl
 800b9ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9ee:	4651      	mov	r1, sl
 800b9f0:	00ca      	lsls	r2, r1, #3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4642      	mov	r2, r8
 800b9fa:	189b      	adds	r3, r3, r2
 800b9fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba00:	464b      	mov	r3, r9
 800ba02:	460a      	mov	r2, r1
 800ba04:	eb42 0303 	adc.w	r3, r2, r3
 800ba08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ba1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ba20:	460b      	mov	r3, r1
 800ba22:	18db      	adds	r3, r3, r3
 800ba24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba26:	4613      	mov	r3, r2
 800ba28:	eb42 0303 	adc.w	r3, r2, r3
 800ba2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ba32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ba36:	f7f5 f947 	bl	8000cc8 <__aeabi_uldivmod>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba74 <UART_SetConfig+0x2d4>)
 800ba40:	fba3 1302 	umull	r1, r3, r3, r2
 800ba44:	095b      	lsrs	r3, r3, #5
 800ba46:	2164      	movs	r1, #100	@ 0x64
 800ba48:	fb01 f303 	mul.w	r3, r1, r3
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	3332      	adds	r3, #50	@ 0x32
 800ba52:	4a08      	ldr	r2, [pc, #32]	@ (800ba74 <UART_SetConfig+0x2d4>)
 800ba54:	fba2 2303 	umull	r2, r3, r2, r3
 800ba58:	095b      	lsrs	r3, r3, #5
 800ba5a:	f003 0207 	and.w	r2, r3, #7
 800ba5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4422      	add	r2, r4
 800ba66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba68:	e106      	b.n	800bc78 <UART_SetConfig+0x4d8>
 800ba6a:	bf00      	nop
 800ba6c:	40011000 	.word	0x40011000
 800ba70:	40011400 	.word	0x40011400
 800ba74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ba82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ba86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ba8a:	4642      	mov	r2, r8
 800ba8c:	464b      	mov	r3, r9
 800ba8e:	1891      	adds	r1, r2, r2
 800ba90:	6239      	str	r1, [r7, #32]
 800ba92:	415b      	adcs	r3, r3
 800ba94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba9a:	4641      	mov	r1, r8
 800ba9c:	1854      	adds	r4, r2, r1
 800ba9e:	4649      	mov	r1, r9
 800baa0:	eb43 0501 	adc.w	r5, r3, r1
 800baa4:	f04f 0200 	mov.w	r2, #0
 800baa8:	f04f 0300 	mov.w	r3, #0
 800baac:	00eb      	lsls	r3, r5, #3
 800baae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bab2:	00e2      	lsls	r2, r4, #3
 800bab4:	4614      	mov	r4, r2
 800bab6:	461d      	mov	r5, r3
 800bab8:	4643      	mov	r3, r8
 800baba:	18e3      	adds	r3, r4, r3
 800babc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bac0:	464b      	mov	r3, r9
 800bac2:	eb45 0303 	adc.w	r3, r5, r3
 800bac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800baca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bada:	f04f 0200 	mov.w	r2, #0
 800bade:	f04f 0300 	mov.w	r3, #0
 800bae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bae6:	4629      	mov	r1, r5
 800bae8:	008b      	lsls	r3, r1, #2
 800baea:	4621      	mov	r1, r4
 800baec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800baf0:	4621      	mov	r1, r4
 800baf2:	008a      	lsls	r2, r1, #2
 800baf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800baf8:	f7f5 f8e6 	bl	8000cc8 <__aeabi_uldivmod>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	4b60      	ldr	r3, [pc, #384]	@ (800bc84 <UART_SetConfig+0x4e4>)
 800bb02:	fba3 2302 	umull	r2, r3, r3, r2
 800bb06:	095b      	lsrs	r3, r3, #5
 800bb08:	011c      	lsls	r4, r3, #4
 800bb0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bb18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bb1c:	4642      	mov	r2, r8
 800bb1e:	464b      	mov	r3, r9
 800bb20:	1891      	adds	r1, r2, r2
 800bb22:	61b9      	str	r1, [r7, #24]
 800bb24:	415b      	adcs	r3, r3
 800bb26:	61fb      	str	r3, [r7, #28]
 800bb28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb2c:	4641      	mov	r1, r8
 800bb2e:	1851      	adds	r1, r2, r1
 800bb30:	6139      	str	r1, [r7, #16]
 800bb32:	4649      	mov	r1, r9
 800bb34:	414b      	adcs	r3, r1
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	f04f 0200 	mov.w	r2, #0
 800bb3c:	f04f 0300 	mov.w	r3, #0
 800bb40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb44:	4659      	mov	r1, fp
 800bb46:	00cb      	lsls	r3, r1, #3
 800bb48:	4651      	mov	r1, sl
 800bb4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb4e:	4651      	mov	r1, sl
 800bb50:	00ca      	lsls	r2, r1, #3
 800bb52:	4610      	mov	r0, r2
 800bb54:	4619      	mov	r1, r3
 800bb56:	4603      	mov	r3, r0
 800bb58:	4642      	mov	r2, r8
 800bb5a:	189b      	adds	r3, r3, r2
 800bb5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb60:	464b      	mov	r3, r9
 800bb62:	460a      	mov	r2, r1
 800bb64:	eb42 0303 	adc.w	r3, r2, r3
 800bb68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bb78:	f04f 0200 	mov.w	r2, #0
 800bb7c:	f04f 0300 	mov.w	r3, #0
 800bb80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bb84:	4649      	mov	r1, r9
 800bb86:	008b      	lsls	r3, r1, #2
 800bb88:	4641      	mov	r1, r8
 800bb8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb8e:	4641      	mov	r1, r8
 800bb90:	008a      	lsls	r2, r1, #2
 800bb92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bb96:	f7f5 f897 	bl	8000cc8 <__aeabi_uldivmod>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4611      	mov	r1, r2
 800bba0:	4b38      	ldr	r3, [pc, #224]	@ (800bc84 <UART_SetConfig+0x4e4>)
 800bba2:	fba3 2301 	umull	r2, r3, r3, r1
 800bba6:	095b      	lsrs	r3, r3, #5
 800bba8:	2264      	movs	r2, #100	@ 0x64
 800bbaa:	fb02 f303 	mul.w	r3, r2, r3
 800bbae:	1acb      	subs	r3, r1, r3
 800bbb0:	011b      	lsls	r3, r3, #4
 800bbb2:	3332      	adds	r3, #50	@ 0x32
 800bbb4:	4a33      	ldr	r2, [pc, #204]	@ (800bc84 <UART_SetConfig+0x4e4>)
 800bbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbba:	095b      	lsrs	r3, r3, #5
 800bbbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bbc0:	441c      	add	r4, r3
 800bbc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	673b      	str	r3, [r7, #112]	@ 0x70
 800bbca:	677a      	str	r2, [r7, #116]	@ 0x74
 800bbcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bbd0:	4642      	mov	r2, r8
 800bbd2:	464b      	mov	r3, r9
 800bbd4:	1891      	adds	r1, r2, r2
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	415b      	adcs	r3, r3
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbe0:	4641      	mov	r1, r8
 800bbe2:	1851      	adds	r1, r2, r1
 800bbe4:	6039      	str	r1, [r7, #0]
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	414b      	adcs	r3, r1
 800bbea:	607b      	str	r3, [r7, #4]
 800bbec:	f04f 0200 	mov.w	r2, #0
 800bbf0:	f04f 0300 	mov.w	r3, #0
 800bbf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bbf8:	4659      	mov	r1, fp
 800bbfa:	00cb      	lsls	r3, r1, #3
 800bbfc:	4651      	mov	r1, sl
 800bbfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc02:	4651      	mov	r1, sl
 800bc04:	00ca      	lsls	r2, r1, #3
 800bc06:	4610      	mov	r0, r2
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	4642      	mov	r2, r8
 800bc0e:	189b      	adds	r3, r3, r2
 800bc10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc12:	464b      	mov	r3, r9
 800bc14:	460a      	mov	r2, r1
 800bc16:	eb42 0303 	adc.w	r3, r2, r3
 800bc1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc26:	667a      	str	r2, [r7, #100]	@ 0x64
 800bc28:	f04f 0200 	mov.w	r2, #0
 800bc2c:	f04f 0300 	mov.w	r3, #0
 800bc30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bc34:	4649      	mov	r1, r9
 800bc36:	008b      	lsls	r3, r1, #2
 800bc38:	4641      	mov	r1, r8
 800bc3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc3e:	4641      	mov	r1, r8
 800bc40:	008a      	lsls	r2, r1, #2
 800bc42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bc46:	f7f5 f83f 	bl	8000cc8 <__aeabi_uldivmod>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc84 <UART_SetConfig+0x4e4>)
 800bc50:	fba3 1302 	umull	r1, r3, r3, r2
 800bc54:	095b      	lsrs	r3, r3, #5
 800bc56:	2164      	movs	r1, #100	@ 0x64
 800bc58:	fb01 f303 	mul.w	r3, r1, r3
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	011b      	lsls	r3, r3, #4
 800bc60:	3332      	adds	r3, #50	@ 0x32
 800bc62:	4a08      	ldr	r2, [pc, #32]	@ (800bc84 <UART_SetConfig+0x4e4>)
 800bc64:	fba2 2303 	umull	r2, r3, r2, r3
 800bc68:	095b      	lsrs	r3, r3, #5
 800bc6a:	f003 020f 	and.w	r2, r3, #15
 800bc6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4422      	add	r2, r4
 800bc76:	609a      	str	r2, [r3, #8]
}
 800bc78:	bf00      	nop
 800bc7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc84:	51eb851f 	.word	0x51eb851f

0800bc88 <TCS3472_SelectSensor>:
    .yellow_min_ratio_g_to_b = 150, // G must be 1.5x greater than B
    .yellow_r_g_diff_percent = 80   // R and G must be within 20% of each other
};


void TCS3472_SelectSensor(uint8_t channel) {
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	71fb      	strb	r3, [r7, #7]
    i2c_mux_select(&mux, channel);
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	4619      	mov	r1, r3
 800bc96:	4805      	ldr	r0, [pc, #20]	@ (800bcac <TCS3472_SelectSensor+0x24>)
 800bc98:	f7f9 fcf4 	bl	8005684 <i2c_mux_select>
    HAL_Delay(2); // Small delay for mux to stabilize
 800bc9c:	2002      	movs	r0, #2
 800bc9e:	f7fa fb53 	bl	8006348 <HAL_Delay>
}
 800bca2:	bf00      	nop
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	20000054 	.word	0x20000054

0800bcb0 <TCS3472_Init>:



/* Initialize TCS3472 sensor */
uint8_t TCS3472_Init(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
    /* Check if sensor is responding */
    uint8_t id = TCS3472_GetID();
 800bcb6:	f000 f81a 	bl	800bcee <TCS3472_GetID>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
    if (id != 0x44 && id != 0x4D) {
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	2b44      	cmp	r3, #68	@ 0x44
 800bcc2:	d004      	beq.n	800bcce <TCS3472_Init+0x1e>
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	2b4d      	cmp	r3, #77	@ 0x4d
 800bcc8:	d001      	beq.n	800bcce <TCS3472_Init+0x1e>
        return HAL_ERROR;  // Sensor not detected
 800bcca:	2301      	movs	r3, #1
 800bccc:	e00b      	b.n	800bce6 <TCS3472_Init+0x36>
    }

    /* Power ON the device */
    TCS3472_Enable();
 800bcce:	f000 f816 	bl	800bcfe <TCS3472_Enable>

    /* Set integration time (1 = 2.4ms, 255 = 614.4ms) */
    TCS3472_SetIntegrationTime(0x00);  // Minimum integration time (2.4ms) for fast readings
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	f000 f822 	bl	800bd1c <TCS3472_SetIntegrationTime>

    /* Set gain (0 = 1x, 1 = 4x, 2 = 16x, 3 = 60x) */
    TCS3472_SetGain(3);  // 60x gain for better contrast in color detection
 800bcd8:	2003      	movs	r0, #3
 800bcda:	f000 f82d 	bl	800bd38 <TCS3472_SetGain>

    /* Wait for a moment for the sensor to stabilize */
    HAL_Delay(50);
 800bcde:	2032      	movs	r0, #50	@ 0x32
 800bce0:	f7fa fb32 	bl	8006348 <HAL_Delay>

    return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <TCS3472_GetID>:

/* Get device ID */
uint8_t TCS3472_GetID(void)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	af00      	add	r7, sp, #0
    return TCS3472_Read8(TCS3472_REG_ID);
 800bcf2:	2012      	movs	r0, #18
 800bcf4:	f000 fb68 	bl	800c3c8 <TCS3472_Read8>
 800bcf8:	4603      	mov	r3, r0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <TCS3472_Enable>:

/* Enable the device */
void TCS3472_Enable(void)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	af00      	add	r7, sp, #0
    /* Power ON */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON);
 800bd02:	2101      	movs	r1, #1
 800bd04:	2000      	movs	r0, #0
 800bd06:	f000 fb41 	bl	800c38c <TCS3472_Write>
    HAL_Delay(3);  // Wait 2.4ms for power-up
 800bd0a:	2003      	movs	r0, #3
 800bd0c:	f7fa fb1c 	bl	8006348 <HAL_Delay>

    /* Enable RGBC sensor */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN);
 800bd10:	2103      	movs	r1, #3
 800bd12:	2000      	movs	r0, #0
 800bd14:	f000 fb3a 	bl	800c38c <TCS3472_Write>
}
 800bd18:	bf00      	nop
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <TCS3472_SetIntegrationTime>:
    TCS3472_Write(TCS3472_REG_ENABLE, val & ~(TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN));
}

/* Set integration time */
void TCS3472_SetIntegrationTime(uint8_t time)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	71fb      	strb	r3, [r7, #7]
    /* Write integration time to the register */
    TCS3472_Write(TCS3472_REG_ATIME, time);
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	f000 fb2e 	bl	800c38c <TCS3472_Write>
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <TCS3472_SetGain>:

/* Set gain */
void TCS3472_SetGain(uint8_t gain)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	71fb      	strb	r3, [r7, #7]
    /* Check if gain is valid (0-3) */
    if (gain > 3) gain = 3;
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d901      	bls.n	800bd4c <TCS3472_SetGain+0x14>
 800bd48:	2303      	movs	r3, #3
 800bd4a:	71fb      	strb	r3, [r7, #7]

    /* Write gain to the register */
    TCS3472_Write(TCS3472_REG_CONTROL, gain);
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	200f      	movs	r0, #15
 800bd52:	f000 fb1b 	bl	800c38c <TCS3472_Write>
}
 800bd56:	bf00      	nop
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <TCS3472_GetRGBC>:

/* Get RGB and Clear values */
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	607a      	str	r2, [r7, #4]
 800bd6a:	603b      	str	r3, [r7, #0]
    /* Wait for data to be valid */
    while (!(TCS3472_Read8(TCS3472_REG_STATUS) & 0x01));
 800bd6c:	bf00      	nop
 800bd6e:	2013      	movs	r0, #19
 800bd70:	f000 fb2a 	bl	800c3c8 <TCS3472_Read8>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0f7      	beq.n	800bd6e <TCS3472_GetRGBC+0x10>

    /* Read all values */
    *c = TCS3472_Read16(TCS3472_REG_CDATAL);
 800bd7e:	2014      	movs	r0, #20
 800bd80:	f000 fb46 	bl	800c410 <TCS3472_Read16>
 800bd84:	4603      	mov	r3, r0
 800bd86:	461a      	mov	r2, r3
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	801a      	strh	r2, [r3, #0]
    *r = TCS3472_Read16(TCS3472_REG_RDATAL);
 800bd8c:	2016      	movs	r0, #22
 800bd8e:	f000 fb3f 	bl	800c410 <TCS3472_Read16>
 800bd92:	4603      	mov	r3, r0
 800bd94:	461a      	mov	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	801a      	strh	r2, [r3, #0]
    *g = TCS3472_Read16(TCS3472_REG_GDATAL);
 800bd9a:	2018      	movs	r0, #24
 800bd9c:	f000 fb38 	bl	800c410 <TCS3472_Read16>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	801a      	strh	r2, [r3, #0]
    *b = TCS3472_Read16(TCS3472_REG_BDATAL);
 800bda8:	201a      	movs	r0, #26
 800bdaa:	f000 fb31 	bl	800c410 <TCS3472_Read16>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	801a      	strh	r2, [r3, #0]
}
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
	...

0800bdc0 <TCS3472_DetectLineColor>:

/* Detect line color based on RGB values */
Color TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
 800bdc0:	b490      	push	{r4, r7}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	4608      	mov	r0, r1
 800bdca:	4611      	mov	r1, r2
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4623      	mov	r3, r4
 800bdd0:	80fb      	strh	r3, [r7, #6]
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	80bb      	strh	r3, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	807b      	strh	r3, [r7, #2]
 800bdda:	4613      	mov	r3, r2
 800bddc:	803b      	strh	r3, [r7, #0]
    /* If overall brightness is very low, it's black (background) */
    if (c < color_config.black_threshold) {
 800bdde:	4b2e      	ldr	r3, [pc, #184]	@ (800be98 <TCS3472_DetectLineColor+0xd8>)
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	883a      	ldrh	r2, [r7, #0]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d201      	bcs.n	800bdec <TCS3472_DetectLineColor+0x2c>
        return BLACK;
 800bde8:	2305      	movs	r3, #5
 800bdea:	e04f      	b.n	800be8c <TCS3472_DetectLineColor+0xcc>
    }

    /* If overall brightness is high, check if it's white or green */
    if (c > color_config.white_threshold) {
 800bdec:	4b2a      	ldr	r3, [pc, #168]	@ (800be98 <TCS3472_DetectLineColor+0xd8>)
 800bdee:	885b      	ldrh	r3, [r3, #2]
 800bdf0:	883a      	ldrh	r2, [r7, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d949      	bls.n	800be8a <TCS3472_DetectLineColor+0xca>
        /* Calculate green-to-red ratio (multiplied by 100 to avoid floating point) */
        uint16_t g_to_r_ratio = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	81fb      	strh	r3, [r7, #14]

        /* Avoid division by zero */
        if (r > 10) {
 800bdfa:	88fb      	ldrh	r3, [r7, #6]
 800bdfc:	2b0a      	cmp	r3, #10
 800bdfe:	d907      	bls.n	800be10 <TCS3472_DetectLineColor+0x50>
            g_to_r_ratio = (g * 100) / r;
 800be00:	88bb      	ldrh	r3, [r7, #4]
 800be02:	2264      	movs	r2, #100	@ 0x64
 800be04:	fb03 f202 	mul.w	r2, r3, r2
 800be08:	88fb      	ldrh	r3, [r7, #6]
 800be0a:	fb92 f3f3 	sdiv	r3, r2, r3
 800be0e:	81fb      	strh	r3, [r7, #14]
        }

        /* If green is significantly higher than red, it's green */
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 800be10:	4b21      	ldr	r3, [pc, #132]	@ (800be98 <TCS3472_DetectLineColor+0xd8>)
 800be12:	889b      	ldrh	r3, [r3, #4]
 800be14:	89fa      	ldrh	r2, [r7, #14]
 800be16:	429a      	cmp	r2, r3
 800be18:	d30e      	bcc.n	800be38 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 800be1a:	4b1f      	ldr	r3, [pc, #124]	@ (800be98 <TCS3472_DetectLineColor+0xd8>)
 800be1c:	88db      	ldrh	r3, [r3, #6]
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 800be1e:	89fa      	ldrh	r2, [r7, #14]
 800be20:	429a      	cmp	r2, r3
 800be22:	d809      	bhi.n	800be38 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 800be24:	88ba      	ldrh	r2, [r7, #4]
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d905      	bls.n	800be38 <TCS3472_DetectLineColor+0x78>
            g > r && g > b) {
 800be2c:	88ba      	ldrh	r2, [r7, #4]
 800be2e:	887b      	ldrh	r3, [r7, #2]
 800be30:	429a      	cmp	r2, r3
 800be32:	d901      	bls.n	800be38 <TCS3472_DetectLineColor+0x78>
            return GREEN;
 800be34:	2301      	movs	r3, #1
 800be36:	e029      	b.n	800be8c <TCS3472_DetectLineColor+0xcc>
        }

        /* If all colors are relatively balanced and bright, it's white */
        if (r > 500 && g > 500 && b > 500 &&
 800be38:	88fb      	ldrh	r3, [r7, #6]
 800be3a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800be3e:	d924      	bls.n	800be8a <TCS3472_DetectLineColor+0xca>
 800be40:	88bb      	ldrh	r3, [r7, #4]
 800be42:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800be46:	d920      	bls.n	800be8a <TCS3472_DetectLineColor+0xca>
 800be48:	887b      	ldrh	r3, [r7, #2]
 800be4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800be4e:	d91c      	bls.n	800be8a <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 800be50:	88fb      	ldrh	r3, [r7, #6]
 800be52:	2264      	movs	r2, #100	@ 0x64
 800be54:	fb03 f202 	mul.w	r2, r3, r2
 800be58:	883b      	ldrh	r3, [r7, #0]
 800be5a:	fb92 f3f3 	sdiv	r3, r2, r3
        if (r > 500 && g > 500 && b > 500 &&
 800be5e:	2b14      	cmp	r3, #20
 800be60:	dd13      	ble.n	800be8a <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 800be62:	88bb      	ldrh	r3, [r7, #4]
 800be64:	2264      	movs	r2, #100	@ 0x64
 800be66:	fb03 f202 	mul.w	r2, r3, r2
 800be6a:	883b      	ldrh	r3, [r7, #0]
 800be6c:	fb92 f3f3 	sdiv	r3, r2, r3
 800be70:	2b14      	cmp	r3, #20
 800be72:	dd0a      	ble.n	800be8a <TCS3472_DetectLineColor+0xca>
 800be74:	887b      	ldrh	r3, [r7, #2]
 800be76:	2264      	movs	r2, #100	@ 0x64
 800be78:	fb03 f202 	mul.w	r2, r3, r2
 800be7c:	883b      	ldrh	r3, [r7, #0]
 800be7e:	fb92 f3f3 	sdiv	r3, r2, r3
 800be82:	2b14      	cmp	r3, #20
 800be84:	dd01      	ble.n	800be8a <TCS3472_DetectLineColor+0xca>
            return WHITE;
 800be86:	2300      	movs	r3, #0
 800be88:	e000      	b.n	800be8c <TCS3472_DetectLineColor+0xcc>
        }
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bc90      	pop	{r4, r7}
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	200000a0 	.word	0x200000a0
 800be9c:	00000000 	.word	0x00000000

0800bea0 <TCS3472_CalibrateColors>:

/* Calibration function - to be called during setup or when a button is pressed */
void TCS3472_CalibrateColors(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b098      	sub	sp, #96	@ 0x60
 800bea4:	af00      	add	r7, sp, #0
    //char buffer[100];
    uint16_t r, g, b, c;
    uint16_t black_readings[5] = {0};
 800bea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	605a      	str	r2, [r3, #4]
 800beb0:	811a      	strh	r2, [r3, #8]
    uint16_t white_readings[5] = {0};
 800beb2:	f107 031c 	add.w	r3, r7, #28
 800beb6:	2200      	movs	r2, #0
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	605a      	str	r2, [r3, #4]
 800bebc:	811a      	strh	r2, [r3, #8]
    uint16_t green_readings_r[5] = {0};
 800bebe:	f107 0310 	add.w	r3, r7, #16
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	605a      	str	r2, [r3, #4]
 800bec8:	811a      	strh	r2, [r3, #8]
    uint16_t green_readings_g[5] = {0};
 800beca:	1d3b      	adds	r3, r7, #4
 800becc:	2200      	movs	r2, #0
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	605a      	str	r2, [r3, #4]
 800bed2:	811a      	strh	r2, [r3, #8]

    /* Send calibration instructions */
//    sprintf(buffer, "Starting calibration sequence...\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_clear();
 800bed4:	f7f9 fe42 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800bed8:	48bd      	ldr	r0, [pc, #756]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800beda:	f7f9 fe71 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800bede:	2219      	movs	r2, #25
 800bee0:	2102      	movs	r1, #2
 800bee2:	48bc      	ldr	r0, [pc, #752]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800bee4:	f7f9 fe42 	bl	8005b6c <display_message>


    /* 1. Calibrate BLACK background */
//    sprintf(buffer, "Place sensor over BLACK surface and press USER button (PA0)...\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_message("Black", 2, 40);
 800bee8:	2228      	movs	r2, #40	@ 0x28
 800beea:	2102      	movs	r1, #2
 800beec:	48ba      	ldr	r0, [pc, #744]	@ (800c1d8 <TCS3472_CalibrateColors+0x338>)
 800beee:	f7f9 fe3d 	bl	8005b6c <display_message>
    display_message("Press OK to Start", 2, 52);
 800bef2:	2234      	movs	r2, #52	@ 0x34
 800bef4:	2102      	movs	r1, #2
 800bef6:	48b9      	ldr	r0, [pc, #740]	@ (800c1dc <TCS3472_CalibrateColors+0x33c>)
 800bef8:	f7f9 fe38 	bl	8005b6c <display_message>
    while(okbtncount == prevokbtncount){
 800befc:	bf00      	nop
 800befe:	4bb8      	ldr	r3, [pc, #736]	@ (800c1e0 <TCS3472_CalibrateColors+0x340>)
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	4bb8      	ldr	r3, [pc, #736]	@ (800c1e4 <TCS3472_CalibrateColors+0x344>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d0f9      	beq.n	800befe <TCS3472_CalibrateColors+0x5e>

    }

	Reset_buttons();
 800bf0a:	f7f5 fb45 	bl	8001598 <Reset_buttons>

	display_clear();
 800bf0e:	f7f9 fe25 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800bf12:	48af      	ldr	r0, [pc, #700]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800bf14:	f7f9 fe54 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800bf18:	2219      	movs	r2, #25
 800bf1a:	2102      	movs	r1, #2
 800bf1c:	48ad      	ldr	r0, [pc, #692]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800bf1e:	f7f9 fe25 	bl	8005b6c <display_message>
	display_message("Black", 2, 40);
 800bf22:	2228      	movs	r2, #40	@ 0x28
 800bf24:	2102      	movs	r1, #2
 800bf26:	48ac      	ldr	r0, [pc, #688]	@ (800c1d8 <TCS3472_CalibrateColors+0x338>)
 800bf28:	f7f9 fe20 	bl	8005b6c <display_message>
	display_message("Calibrating...", 2, 52);
 800bf2c:	2234      	movs	r2, #52	@ 0x34
 800bf2e:	2102      	movs	r1, #2
 800bf30:	48ad      	ldr	r0, [pc, #692]	@ (800c1e8 <TCS3472_CalibrateColors+0x348>)
 800bf32:	f7f9 fe1b 	bl	8005b6c <display_message>

	HAL_Delay(1000);
 800bf36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bf3a:	f7fa fa05 	bl	8006348 <HAL_Delay>
	TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 800bf3e:	2001      	movs	r0, #1
 800bf40:	f7ff fea2 	bl	800bc88 <TCS3472_SelectSensor>
	HAL_Delay(1000);
 800bf44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bf48:	f7fa f9fe 	bl	8006348 <HAL_Delay>
    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    //HAL_Delay(2000); // Debounce

    /* Take 5 readings of black background */
    for (int i = 0; i < 5; i++) {
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf50:	e016      	b.n	800bf80 <TCS3472_CalibrateColors+0xe0>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 800bf52:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 800bf56:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800bf5a:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 800bf5e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800bf62:	f7ff fefc 	bl	800bd5e <TCS3472_GetRGBC>
        black_readings[i] = c;
 800bf66:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bf68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf6a:	005b      	lsls	r3, r3, #1
 800bf6c:	3360      	adds	r3, #96	@ 0x60
 800bf6e:	443b      	add	r3, r7
 800bf70:	f823 2c38 	strh.w	r2, [r3, #-56]
        HAL_Delay(50);
 800bf74:	2032      	movs	r0, #50	@ 0x32
 800bf76:	f7fa f9e7 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 800bf7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	dde5      	ble.n	800bf52 <TCS3472_CalibrateColors+0xb2>
    }

    /* Calculate average */
    uint32_t black_sum = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	65bb      	str	r3, [r7, #88]	@ 0x58
    for (int i = 0; i < 5; i++) {
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf8e:	e00c      	b.n	800bfaa <TCS3472_CalibrateColors+0x10a>
        black_sum += black_readings[i];
 800bf90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	3360      	adds	r3, #96	@ 0x60
 800bf96:	443b      	add	r3, r7
 800bf98:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfa0:	4413      	add	r3, r2
 800bfa2:	65bb      	str	r3, [r7, #88]	@ 0x58
    for (int i = 0; i < 5; i++) {
 800bfa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	657b      	str	r3, [r7, #84]	@ 0x54
 800bfaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	ddef      	ble.n	800bf90 <TCS3472_CalibrateColors+0xf0>
    }
    color_config.black_threshold = (black_sum / 5) * 1.5; // 50% margin
 800bfb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfb2:	4a8e      	ldr	r2, [pc, #568]	@ (800c1ec <TCS3472_CalibrateColors+0x34c>)
 800bfb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb8:	089b      	lsrs	r3, r3, #2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7f4 fac2 	bl	8000544 <__aeabi_ui2d>
 800bfc0:	f04f 0200 	mov.w	r2, #0
 800bfc4:	4b8a      	ldr	r3, [pc, #552]	@ (800c1f0 <TCS3472_CalibrateColors+0x350>)
 800bfc6:	f7f4 fb37 	bl	8000638 <__aeabi_dmul>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4610      	mov	r0, r2
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	f7f4 fe09 	bl	8000be8 <__aeabi_d2uiz>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	4b86      	ldr	r3, [pc, #536]	@ (800c1f4 <TCS3472_CalibrateColors+0x354>)
 800bfdc:	801a      	strh	r2, [r3, #0]

//    sprintf(buffer, "BLACK calibrated: threshold = %d\r\n", color_config.black_threshold);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_clear();
 800bfde:	f7f9 fdbd 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800bfe2:	487b      	ldr	r0, [pc, #492]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800bfe4:	f7f9 fdec 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800bfe8:	2219      	movs	r2, #25
 800bfea:	2102      	movs	r1, #2
 800bfec:	4879      	ldr	r0, [pc, #484]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800bfee:	f7f9 fdbd 	bl	8005b6c <display_message>
	display_message("Black", 2, 40);
 800bff2:	2228      	movs	r2, #40	@ 0x28
 800bff4:	2102      	movs	r1, #2
 800bff6:	4878      	ldr	r0, [pc, #480]	@ (800c1d8 <TCS3472_CalibrateColors+0x338>)
 800bff8:	f7f9 fdb8 	bl	8005b6c <display_message>
	display_message("Calibrated.", 2, 52);
 800bffc:	2234      	movs	r2, #52	@ 0x34
 800bffe:	2102      	movs	r1, #2
 800c000:	487d      	ldr	r0, [pc, #500]	@ (800c1f8 <TCS3472_CalibrateColors+0x358>)
 800c002:	f7f9 fdb3 	bl	8005b6c <display_message>
    HAL_Delay(2000);
 800c006:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800c00a:	f7fa f99d 	bl	8006348 <HAL_Delay>

    /* 2. Calibrate WHITE line */
//    sprintf(buffer, "Place sensor over WHITE line and press USER button (PA0)...\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    display_clear();
 800c00e:	f7f9 fda5 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800c012:	486f      	ldr	r0, [pc, #444]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800c014:	f7f9 fdd4 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800c018:	2219      	movs	r2, #25
 800c01a:	2102      	movs	r1, #2
 800c01c:	486d      	ldr	r0, [pc, #436]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800c01e:	f7f9 fda5 	bl	8005b6c <display_message>
	display_message("White", 2, 40);
 800c022:	2228      	movs	r2, #40	@ 0x28
 800c024:	2102      	movs	r1, #2
 800c026:	4875      	ldr	r0, [pc, #468]	@ (800c1fc <TCS3472_CalibrateColors+0x35c>)
 800c028:	f7f9 fda0 	bl	8005b6c <display_message>
	display_message("Press OK to Start", 2, 52);
 800c02c:	2234      	movs	r2, #52	@ 0x34
 800c02e:	2102      	movs	r1, #2
 800c030:	486a      	ldr	r0, [pc, #424]	@ (800c1dc <TCS3472_CalibrateColors+0x33c>)
 800c032:	f7f9 fd9b 	bl	8005b6c <display_message>
	while(okbtncount == prevokbtncount);
 800c036:	bf00      	nop
 800c038:	4b69      	ldr	r3, [pc, #420]	@ (800c1e0 <TCS3472_CalibrateColors+0x340>)
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	4b69      	ldr	r3, [pc, #420]	@ (800c1e4 <TCS3472_CalibrateColors+0x344>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d0f9      	beq.n	800c038 <TCS3472_CalibrateColors+0x198>
	Reset_buttons();
 800c044:	f7f5 faa8 	bl	8001598 <Reset_buttons>

	display_clear();
 800c048:	f7f9 fd88 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800c04c:	4860      	ldr	r0, [pc, #384]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800c04e:	f7f9 fdb7 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800c052:	2219      	movs	r2, #25
 800c054:	2102      	movs	r1, #2
 800c056:	485f      	ldr	r0, [pc, #380]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800c058:	f7f9 fd88 	bl	8005b6c <display_message>
	display_message("White", 2, 40);
 800c05c:	2228      	movs	r2, #40	@ 0x28
 800c05e:	2102      	movs	r1, #2
 800c060:	4866      	ldr	r0, [pc, #408]	@ (800c1fc <TCS3472_CalibrateColors+0x35c>)
 800c062:	f7f9 fd83 	bl	8005b6c <display_message>
	display_message("Calibrating...", 2, 52);
 800c066:	2234      	movs	r2, #52	@ 0x34
 800c068:	2102      	movs	r1, #2
 800c06a:	485f      	ldr	r0, [pc, #380]	@ (800c1e8 <TCS3472_CalibrateColors+0x348>)
 800c06c:	f7f9 fd7e 	bl	8005b6c <display_message>

	HAL_Delay(1000);
 800c070:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c074:	f7fa f968 	bl	8006348 <HAL_Delay>
	TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 800c078:	2001      	movs	r0, #1
 800c07a:	f7ff fe05 	bl	800bc88 <TCS3472_SelectSensor>
	HAL_Delay(1000);
 800c07e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c082:	f7fa f961 	bl	8006348 <HAL_Delay>
    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    //HAL_Delay(2000); // Debounce

    /* Take 5 readings of white line */
    for (int i = 0; i < 5; i++) {
 800c086:	2300      	movs	r3, #0
 800c088:	653b      	str	r3, [r7, #80]	@ 0x50
 800c08a:	e016      	b.n	800c0ba <TCS3472_CalibrateColors+0x21a>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 800c08c:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 800c090:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c094:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 800c098:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800c09c:	f7ff fe5f 	bl	800bd5e <TCS3472_GetRGBC>
        white_readings[i] = c;
 800c0a0:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800c0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	3360      	adds	r3, #96	@ 0x60
 800c0a8:	443b      	add	r3, r7
 800c0aa:	f823 2c44 	strh.w	r2, [r3, #-68]
        HAL_Delay(50);
 800c0ae:	2032      	movs	r0, #50	@ 0x32
 800c0b0:	f7fa f94a 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 800c0b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0bc:	2b04      	cmp	r3, #4
 800c0be:	dde5      	ble.n	800c08c <TCS3472_CalibrateColors+0x1ec>
    }

    /* Calculate average */
    uint32_t white_sum = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 0; i < 5; i++) {
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0c8:	e00c      	b.n	800c0e4 <TCS3472_CalibrateColors+0x244>
        white_sum += white_readings[i];
 800c0ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	3360      	adds	r3, #96	@ 0x60
 800c0d0:	443b      	add	r3, r7
 800c0d2:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0da:	4413      	add	r3, r2
 800c0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 0; i < 5; i++) {
 800c0de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	ddef      	ble.n	800c0ca <TCS3472_CalibrateColors+0x22a>
    }
    color_config.white_threshold = (white_sum / 5) * 0.8; // 20% margin
 800c0ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c1ec <TCS3472_CalibrateColors+0x34c>)
 800c0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f2:	089b      	lsrs	r3, r3, #2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f4 fa25 	bl	8000544 <__aeabi_ui2d>
 800c0fa:	a333      	add	r3, pc, #204	@ (adr r3, 800c1c8 <TCS3472_CalibrateColors+0x328>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	f7f4 fa9a 	bl	8000638 <__aeabi_dmul>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4610      	mov	r0, r2
 800c10a:	4619      	mov	r1, r3
 800c10c:	f7f4 fd6c 	bl	8000be8 <__aeabi_d2uiz>
 800c110:	4603      	mov	r3, r0
 800c112:	b29a      	uxth	r2, r3
 800c114:	4b37      	ldr	r3, [pc, #220]	@ (800c1f4 <TCS3472_CalibrateColors+0x354>)
 800c116:	805a      	strh	r2, [r3, #2]

//    sprintf(buffer, "WHITE calibrated: threshold = %d\r\n", color_config.white_threshold);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_clear();
 800c118:	f7f9 fd20 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800c11c:	482c      	ldr	r0, [pc, #176]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800c11e:	f7f9 fd4f 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800c122:	2219      	movs	r2, #25
 800c124:	2102      	movs	r1, #2
 800c126:	482b      	ldr	r0, [pc, #172]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800c128:	f7f9 fd20 	bl	8005b6c <display_message>
	display_message("White", 2, 40);
 800c12c:	2228      	movs	r2, #40	@ 0x28
 800c12e:	2102      	movs	r1, #2
 800c130:	4832      	ldr	r0, [pc, #200]	@ (800c1fc <TCS3472_CalibrateColors+0x35c>)
 800c132:	f7f9 fd1b 	bl	8005b6c <display_message>
	display_message("Calibrated.", 2, 52);
 800c136:	2234      	movs	r2, #52	@ 0x34
 800c138:	2102      	movs	r1, #2
 800c13a:	482f      	ldr	r0, [pc, #188]	@ (800c1f8 <TCS3472_CalibrateColors+0x358>)
 800c13c:	f7f9 fd16 	bl	8005b6c <display_message>
	HAL_Delay(2000);
 800c140:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800c144:	f7fa f900 	bl	8006348 <HAL_Delay>
    //AL_Delay(1000);

    /* 3. Calibrate GREEN line */
//    sprintf(buffer, "Place sensor over GREEN line and press USER button (PA0)...\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_clear();
 800c148:	f7f9 fd08 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800c14c:	4820      	ldr	r0, [pc, #128]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800c14e:	f7f9 fd37 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800c152:	2219      	movs	r2, #25
 800c154:	2102      	movs	r1, #2
 800c156:	481f      	ldr	r0, [pc, #124]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800c158:	f7f9 fd08 	bl	8005b6c <display_message>
	display_message("Green", 2, 40);
 800c15c:	2228      	movs	r2, #40	@ 0x28
 800c15e:	2102      	movs	r1, #2
 800c160:	4827      	ldr	r0, [pc, #156]	@ (800c200 <TCS3472_CalibrateColors+0x360>)
 800c162:	f7f9 fd03 	bl	8005b6c <display_message>
	display_message("Press OK to Start", 2, 52);
 800c166:	2234      	movs	r2, #52	@ 0x34
 800c168:	2102      	movs	r1, #2
 800c16a:	481c      	ldr	r0, [pc, #112]	@ (800c1dc <TCS3472_CalibrateColors+0x33c>)
 800c16c:	f7f9 fcfe 	bl	8005b6c <display_message>
	while(okbtncount == prevokbtncount);
 800c170:	bf00      	nop
 800c172:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e0 <TCS3472_CalibrateColors+0x340>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e4 <TCS3472_CalibrateColors+0x344>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d0f9      	beq.n	800c172 <TCS3472_CalibrateColors+0x2d2>
	Reset_buttons();
 800c17e:	f7f5 fa0b 	bl	8001598 <Reset_buttons>

	display_clear();
 800c182:	f7f9 fceb 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800c186:	4812      	ldr	r0, [pc, #72]	@ (800c1d0 <TCS3472_CalibrateColors+0x330>)
 800c188:	f7f9 fd1a 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800c18c:	2219      	movs	r2, #25
 800c18e:	2102      	movs	r1, #2
 800c190:	4810      	ldr	r0, [pc, #64]	@ (800c1d4 <TCS3472_CalibrateColors+0x334>)
 800c192:	f7f9 fceb 	bl	8005b6c <display_message>
	display_message("Green", 2, 40);
 800c196:	2228      	movs	r2, #40	@ 0x28
 800c198:	2102      	movs	r1, #2
 800c19a:	4819      	ldr	r0, [pc, #100]	@ (800c200 <TCS3472_CalibrateColors+0x360>)
 800c19c:	f7f9 fce6 	bl	8005b6c <display_message>
	display_message("Calibrating...", 2, 52);
 800c1a0:	2234      	movs	r2, #52	@ 0x34
 800c1a2:	2102      	movs	r1, #2
 800c1a4:	4810      	ldr	r0, [pc, #64]	@ (800c1e8 <TCS3472_CalibrateColors+0x348>)
 800c1a6:	f7f9 fce1 	bl	8005b6c <display_message>

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    //HAL_Delay(2000); // Debounce

	HAL_Delay(1000);
 800c1aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c1ae:	f7fa f8cb 	bl	8006348 <HAL_Delay>
	TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 800c1b2:	2001      	movs	r0, #1
 800c1b4:	f7ff fd68 	bl	800bc88 <TCS3472_SelectSensor>
	HAL_Delay(1000);
 800c1b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c1bc:	f7fa f8c4 	bl	8006348 <HAL_Delay>

    /* Take 5 readings of green line */
    for (int i = 0; i < 5; i++) {
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1c4:	e03c      	b.n	800c240 <TCS3472_CalibrateColors+0x3a0>
 800c1c6:	bf00      	nop
 800c1c8:	9999999a 	.word	0x9999999a
 800c1cc:	3fe99999 	.word	0x3fe99999
 800c1d0:	0800fe94 	.word	0x0800fe94
 800c1d4:	0800fea0 	.word	0x0800fea0
 800c1d8:	0800feb4 	.word	0x0800feb4
 800c1dc:	0800febc 	.word	0x0800febc
 800c1e0:	200002b4 	.word	0x200002b4
 800c1e4:	200002b8 	.word	0x200002b8
 800c1e8:	0800fed0 	.word	0x0800fed0
 800c1ec:	cccccccd 	.word	0xcccccccd
 800c1f0:	3ff80000 	.word	0x3ff80000
 800c1f4:	200000a0 	.word	0x200000a0
 800c1f8:	0800fee0 	.word	0x0800fee0
 800c1fc:	0800feec 	.word	0x0800feec
 800c200:	0800fef4 	.word	0x0800fef4
        TCS3472_GetRGBC(&r, &g, &b, &c);
 800c204:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 800c208:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c20c:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 800c210:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800c214:	f7ff fda3 	bl	800bd5e <TCS3472_GetRGBC>
        green_readings_r[i] = r;
 800c218:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800c21a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	3360      	adds	r3, #96	@ 0x60
 800c220:	443b      	add	r3, r7
 800c222:	f823 2c50 	strh.w	r2, [r3, #-80]
        green_readings_g[i] = g;
 800c226:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	3360      	adds	r3, #96	@ 0x60
 800c22e:	443b      	add	r3, r7
 800c230:	f823 2c5c 	strh.w	r2, [r3, #-92]
        HAL_Delay(50);
 800c234:	2032      	movs	r0, #50	@ 0x32
 800c236:	f7fa f887 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 800c23a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c23c:	3301      	adds	r3, #1
 800c23e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c242:	2b04      	cmp	r3, #4
 800c244:	ddde      	ble.n	800c204 <TCS3472_CalibrateColors+0x364>
    }

    /* Calculate average G/R ratio */
    uint32_t g_r_ratio_sum = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < 5; i++) {
 800c24a:	2300      	movs	r3, #0
 800c24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c24e:	e020      	b.n	800c292 <TCS3472_CalibrateColors+0x3f2>
        if (green_readings_r[i] > 10) { // Avoid division by zero
 800c250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c252:	005b      	lsls	r3, r3, #1
 800c254:	3360      	adds	r3, #96	@ 0x60
 800c256:	443b      	add	r3, r7
 800c258:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800c25c:	2b0a      	cmp	r3, #10
 800c25e:	d915      	bls.n	800c28c <TCS3472_CalibrateColors+0x3ec>
            g_r_ratio_sum += (green_readings_g[i] * 100) / green_readings_r[i];
 800c260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	3360      	adds	r3, #96	@ 0x60
 800c266:	443b      	add	r3, r7
 800c268:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 800c26c:	461a      	mov	r2, r3
 800c26e:	2364      	movs	r3, #100	@ 0x64
 800c270:	fb03 f202 	mul.w	r2, r3, r2
 800c274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	3360      	adds	r3, #96	@ 0x60
 800c27a:	443b      	add	r3, r7
 800c27c:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800c280:	fb92 f3f3 	sdiv	r3, r2, r3
 800c284:	461a      	mov	r2, r3
 800c286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c288:	4413      	add	r3, r2
 800c28a:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < 5; i++) {
 800c28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c28e:	3301      	adds	r3, #1
 800c290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c294:	2b04      	cmp	r3, #4
 800c296:	dddb      	ble.n	800c250 <TCS3472_CalibrateColors+0x3b0>
        }
    }
    uint16_t avg_g_r_ratio = g_r_ratio_sum / 5;
 800c298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c29a:	4a35      	ldr	r2, [pc, #212]	@ (800c370 <TCS3472_CalibrateColors+0x4d0>)
 800c29c:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a0:	089b      	lsrs	r3, r3, #2
 800c2a2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* Set min and max with 10% margin on each side */
    color_config.green_ratio_min = avg_g_r_ratio * 0.9;
 800c2a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7f4 f95c 	bl	8000564 <__aeabi_i2d>
 800c2ac:	a32c      	add	r3, pc, #176	@ (adr r3, 800c360 <TCS3472_CalibrateColors+0x4c0>)
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	f7f4 f9c1 	bl	8000638 <__aeabi_dmul>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f7f4 fc93 	bl	8000be8 <__aeabi_d2uiz>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	4b2b      	ldr	r3, [pc, #172]	@ (800c374 <TCS3472_CalibrateColors+0x4d4>)
 800c2c8:	809a      	strh	r2, [r3, #4]
    color_config.green_ratio_max = avg_g_r_ratio * 1.1;
 800c2ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7f4 f949 	bl	8000564 <__aeabi_i2d>
 800c2d2:	a325      	add	r3, pc, #148	@ (adr r3, 800c368 <TCS3472_CalibrateColors+0x4c8>)
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	f7f4 f9ae 	bl	8000638 <__aeabi_dmul>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	f7f4 fc80 	bl	8000be8 <__aeabi_d2uiz>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	4b21      	ldr	r3, [pc, #132]	@ (800c374 <TCS3472_CalibrateColors+0x4d4>)
 800c2ee:	80da      	strh	r2, [r3, #6]

//    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
//            color_config.green_ratio_min, color_config.green_ratio_max);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    display_clear();
 800c2f0:	f7f9 fc34 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800c2f4:	4820      	ldr	r0, [pc, #128]	@ (800c378 <TCS3472_CalibrateColors+0x4d8>)
 800c2f6:	f7f9 fc63 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800c2fa:	2219      	movs	r2, #25
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	481f      	ldr	r0, [pc, #124]	@ (800c37c <TCS3472_CalibrateColors+0x4dc>)
 800c300:	f7f9 fc34 	bl	8005b6c <display_message>
	display_message("Green", 2, 40);
 800c304:	2228      	movs	r2, #40	@ 0x28
 800c306:	2102      	movs	r1, #2
 800c308:	481d      	ldr	r0, [pc, #116]	@ (800c380 <TCS3472_CalibrateColors+0x4e0>)
 800c30a:	f7f9 fc2f 	bl	8005b6c <display_message>
	display_message("Calibrated.", 2, 52);
 800c30e:	2234      	movs	r2, #52	@ 0x34
 800c310:	2102      	movs	r1, #2
 800c312:	481c      	ldr	r0, [pc, #112]	@ (800c384 <TCS3472_CalibrateColors+0x4e4>)
 800c314:	f7f9 fc2a 	bl	8005b6c <display_message>
	HAL_Delay(2000);
 800c318:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800c31c:	f7fa f814 	bl	8006348 <HAL_Delay>

    /* Mark as calibrated */
    color_config.is_calibrated = 1;
 800c320:	4b14      	ldr	r3, [pc, #80]	@ (800c374 <TCS3472_CalibrateColors+0x4d4>)
 800c322:	2201      	movs	r2, #1
 800c324:	721a      	strb	r2, [r3, #8]

//    sprintf(buffer, "Calibration complete!\r\n");
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
//    HAL_Delay(1000);

    display_clear();
 800c326:	f7f9 fc19 	bl	8005b5c <display_clear>
	display_headding("Calibration");
 800c32a:	4813      	ldr	r0, [pc, #76]	@ (800c378 <TCS3472_CalibrateColors+0x4d8>)
 800c32c:	f7f9 fc48 	bl	8005bc0 <display_headding>
	display_message("Line Color sensor", 2, 25);
 800c330:	2219      	movs	r2, #25
 800c332:	2102      	movs	r1, #2
 800c334:	4811      	ldr	r0, [pc, #68]	@ (800c37c <TCS3472_CalibrateColors+0x4dc>)
 800c336:	f7f9 fc19 	bl	8005b6c <display_message>
	display_message("All lines", 2, 40);
 800c33a:	2228      	movs	r2, #40	@ 0x28
 800c33c:	2102      	movs	r1, #2
 800c33e:	4812      	ldr	r0, [pc, #72]	@ (800c388 <TCS3472_CalibrateColors+0x4e8>)
 800c340:	f7f9 fc14 	bl	8005b6c <display_message>
	display_message("Calibrated.", 2, 52);
 800c344:	2234      	movs	r2, #52	@ 0x34
 800c346:	2102      	movs	r1, #2
 800c348:	480e      	ldr	r0, [pc, #56]	@ (800c384 <TCS3472_CalibrateColors+0x4e4>)
 800c34a:	f7f9 fc0f 	bl	8005b6c <display_message>
	HAL_Delay(5000);
 800c34e:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c352:	f7f9 fff9 	bl	8006348 <HAL_Delay>
}
 800c356:	bf00      	nop
 800c358:	3760      	adds	r7, #96	@ 0x60
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	cccccccd 	.word	0xcccccccd
 800c364:	3feccccc 	.word	0x3feccccc
 800c368:	9999999a 	.word	0x9999999a
 800c36c:	3ff19999 	.word	0x3ff19999
 800c370:	cccccccd 	.word	0xcccccccd
 800c374:	200000a0 	.word	0x200000a0
 800c378:	0800fe94 	.word	0x0800fe94
 800c37c:	0800fea0 	.word	0x0800fea0
 800c380:	0800fef4 	.word	0x0800fef4
 800c384:	0800fee0 	.word	0x0800fee0
 800c388:	0800fefc 	.word	0x0800fefc

0800c38c <TCS3472_Write>:

/* Write a byte to the TCS3472 register */
void TCS3472_Write(uint8_t reg, uint8_t value)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af02      	add	r7, sp, #8
 800c392:	4603      	mov	r3, r0
 800c394:	460a      	mov	r2, r1
 800c396:	71fb      	strb	r3, [r7, #7]
 800c398:	4613      	mov	r3, r2
 800c39a:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = TCS3472_COMMAND_BIT | reg;
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 800c3a6:	79bb      	ldrb	r3, [r7, #6]
 800c3a8:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, data, 2, 100);
 800c3aa:	f107 020c 	add.w	r2, r7, #12
 800c3ae:	2364      	movs	r3, #100	@ 0x64
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	2152      	movs	r1, #82	@ 0x52
 800c3b6:	4803      	ldr	r0, [pc, #12]	@ (800c3c4 <TCS3472_Write+0x38>)
 800c3b8:	f7fb fb92 	bl	8007ae0 <HAL_I2C_Master_Transmit>
}
 800c3bc:	bf00      	nop
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20000344 	.word	0x20000344

0800c3c8 <TCS3472_Read8>:

/* Read 8-bit value from TCS3472 register */
uint8_t TCS3472_Read8(uint8_t reg)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af02      	add	r7, sp, #8
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 800c3d2:	79fb      	ldrb	r3, [r7, #7]
 800c3d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	73fb      	strb	r3, [r7, #15]
    uint8_t value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 800c3dc:	f107 020f 	add.w	r2, r7, #15
 800c3e0:	2364      	movs	r3, #100	@ 0x64
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	2152      	movs	r1, #82	@ 0x52
 800c3e8:	4808      	ldr	r0, [pc, #32]	@ (800c40c <TCS3472_Read8+0x44>)
 800c3ea:	f7fb fb79 	bl	8007ae0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, &value, 1, 100);
 800c3ee:	f107 020e 	add.w	r2, r7, #14
 800c3f2:	2364      	movs	r3, #100	@ 0x64
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	2152      	movs	r1, #82	@ 0x52
 800c3fa:	4804      	ldr	r0, [pc, #16]	@ (800c40c <TCS3472_Read8+0x44>)
 800c3fc:	f7fb fc6e 	bl	8007cdc <HAL_I2C_Master_Receive>

    return value;
 800c400:	7bbb      	ldrb	r3, [r7, #14]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000344 	.word	0x20000344

0800c410 <TCS3472_Read16>:

/* Read 16-bit value from TCS3472 register */
uint16_t TCS3472_Read16(uint8_t reg)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af02      	add	r7, sp, #8
 800c416:	4603      	mov	r3, r0
 800c418:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 800c41a:	79fb      	ldrb	r3, [r7, #7]
 800c41c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c420:	b2db      	uxtb	r3, r3
 800c422:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 800c424:	f107 020f 	add.w	r2, r7, #15
 800c428:	2364      	movs	r3, #100	@ 0x64
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	2301      	movs	r3, #1
 800c42e:	2152      	movs	r1, #82	@ 0x52
 800c430:	480c      	ldr	r0, [pc, #48]	@ (800c464 <TCS3472_Read16+0x54>)
 800c432:	f7fb fb55 	bl	8007ae0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, data, 2, 100);
 800c436:	f107 020c 	add.w	r2, r7, #12
 800c43a:	2364      	movs	r3, #100	@ 0x64
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	2302      	movs	r3, #2
 800c440:	2152      	movs	r1, #82	@ 0x52
 800c442:	4808      	ldr	r0, [pc, #32]	@ (800c464 <TCS3472_Read16+0x54>)
 800c444:	f7fb fc4a 	bl	8007cdc <HAL_I2C_Master_Receive>

    return (data[1] << 8) | data[0];
 800c448:	7b7b      	ldrb	r3, [r7, #13]
 800c44a:	b21b      	sxth	r3, r3
 800c44c:	021b      	lsls	r3, r3, #8
 800c44e:	b21a      	sxth	r2, r3
 800c450:	7b3b      	ldrb	r3, [r7, #12]
 800c452:	b21b      	sxth	r3, r3
 800c454:	4313      	orrs	r3, r2
 800c456:	b21b      	sxth	r3, r3
 800c458:	b29b      	uxth	r3, r3
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20000344 	.word	0x20000344

0800c468 <TCS3472_CalibrateObjectColors>:
    return UNKNOWN;
}


/* Calibration function for object colors - with multiple readings */
void TCS3472_CalibrateObjectColors(void) {
 800c468:	b580      	push	{r7, lr}
 800c46a:	b0be      	sub	sp, #248	@ 0xf8
 800c46c:	af00      	add	r7, sp, #0
    uint16_t r, g, b, c;
    uint16_t white_readings_r[10] = {0};
 800c46e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	605a      	str	r2, [r3, #4]
 800c478:	609a      	str	r2, [r3, #8]
 800c47a:	60da      	str	r2, [r3, #12]
 800c47c:	611a      	str	r2, [r3, #16]
    uint16_t white_readings_g[10] = {0};
 800c47e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	605a      	str	r2, [r3, #4]
 800c488:	609a      	str	r2, [r3, #8]
 800c48a:	60da      	str	r2, [r3, #12]
 800c48c:	611a      	str	r2, [r3, #16]
    uint16_t white_readings_b[10] = {0};
 800c48e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	605a      	str	r2, [r3, #4]
 800c498:	609a      	str	r2, [r3, #8]
 800c49a:	60da      	str	r2, [r3, #12]
 800c49c:	611a      	str	r2, [r3, #16]
    uint16_t white_readings_c[10] = {0};
 800c49e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	605a      	str	r2, [r3, #4]
 800c4a8:	609a      	str	r2, [r3, #8]
 800c4aa:	60da      	str	r2, [r3, #12]
 800c4ac:	611a      	str	r2, [r3, #16]

    uint16_t yellow_readings_r[10] = {0};
 800c4ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	605a      	str	r2, [r3, #4]
 800c4b8:	609a      	str	r2, [r3, #8]
 800c4ba:	60da      	str	r2, [r3, #12]
 800c4bc:	611a      	str	r2, [r3, #16]
    uint16_t yellow_readings_g[10] = {0};
 800c4be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	601a      	str	r2, [r3, #0]
 800c4c6:	605a      	str	r2, [r3, #4]
 800c4c8:	609a      	str	r2, [r3, #8]
 800c4ca:	60da      	str	r2, [r3, #12]
 800c4cc:	611a      	str	r2, [r3, #16]
    uint16_t yellow_readings_b[10] = {0};
 800c4ce:	f107 0314 	add.w	r3, r7, #20
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	605a      	str	r2, [r3, #4]
 800c4d8:	609a      	str	r2, [r3, #8]
 800c4da:	60da      	str	r2, [r3, #12]
 800c4dc:	611a      	str	r2, [r3, #16]
    uint16_t yellow_readings_c[10] = {0};
 800c4de:	463b      	mov	r3, r7
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	605a      	str	r2, [r3, #4]
 800c4e6:	609a      	str	r2, [r3, #8]
 800c4e8:	60da      	str	r2, [r3, #12]
 800c4ea:	611a      	str	r2, [r3, #16]

    /* White calibration */
    display_clear();
 800c4ec:	f7f9 fb36 	bl	8005b5c <display_clear>
    display_headding("Calibration");
 800c4f0:	48c7      	ldr	r0, [pc, #796]	@ (800c810 <TCS3472_CalibrateObjectColors+0x3a8>)
 800c4f2:	f7f9 fb65 	bl	8005bc0 <display_headding>
    display_message("Arm Color sensor", 2, 25);
 800c4f6:	2219      	movs	r2, #25
 800c4f8:	2102      	movs	r1, #2
 800c4fa:	48c6      	ldr	r0, [pc, #792]	@ (800c814 <TCS3472_CalibrateObjectColors+0x3ac>)
 800c4fc:	f7f9 fb36 	bl	8005b6c <display_message>
    display_message("White", 2, 40);
 800c500:	2228      	movs	r2, #40	@ 0x28
 800c502:	2102      	movs	r1, #2
 800c504:	48c4      	ldr	r0, [pc, #784]	@ (800c818 <TCS3472_CalibrateObjectColors+0x3b0>)
 800c506:	f7f9 fb31 	bl	8005b6c <display_message>
    display_message("Press OK to Start", 2, 52);
 800c50a:	2234      	movs	r2, #52	@ 0x34
 800c50c:	2102      	movs	r1, #2
 800c50e:	48c3      	ldr	r0, [pc, #780]	@ (800c81c <TCS3472_CalibrateObjectColors+0x3b4>)
 800c510:	f7f9 fb2c 	bl	8005b6c <display_message>
    while(okbtncount == prevokbtncount);
 800c514:	bf00      	nop
 800c516:	4bc2      	ldr	r3, [pc, #776]	@ (800c820 <TCS3472_CalibrateObjectColors+0x3b8>)
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	4bc2      	ldr	r3, [pc, #776]	@ (800c824 <TCS3472_CalibrateObjectColors+0x3bc>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d0f9      	beq.n	800c516 <TCS3472_CalibrateObjectColors+0xae>
    Reset_buttons();
 800c522:	f7f5 f839 	bl	8001598 <Reset_buttons>

    display_clear();
 800c526:	f7f9 fb19 	bl	8005b5c <display_clear>
    display_headding("Calibration");
 800c52a:	48b9      	ldr	r0, [pc, #740]	@ (800c810 <TCS3472_CalibrateObjectColors+0x3a8>)
 800c52c:	f7f9 fb48 	bl	8005bc0 <display_headding>
    display_message("Arm Color sensor", 2, 25);
 800c530:	2219      	movs	r2, #25
 800c532:	2102      	movs	r1, #2
 800c534:	48b7      	ldr	r0, [pc, #732]	@ (800c814 <TCS3472_CalibrateObjectColors+0x3ac>)
 800c536:	f7f9 fb19 	bl	8005b6c <display_message>
    display_message("White", 2, 40);
 800c53a:	2228      	movs	r2, #40	@ 0x28
 800c53c:	2102      	movs	r1, #2
 800c53e:	48b6      	ldr	r0, [pc, #728]	@ (800c818 <TCS3472_CalibrateObjectColors+0x3b0>)
 800c540:	f7f9 fb14 	bl	8005b6c <display_message>
    display_message("Calibrating...", 2, 52);
 800c544:	2234      	movs	r2, #52	@ 0x34
 800c546:	2102      	movs	r1, #2
 800c548:	48b7      	ldr	r0, [pc, #732]	@ (800c828 <TCS3472_CalibrateObjectColors+0x3c0>)
 800c54a:	f7f9 fb0f 	bl	8005b6c <display_message>

    HAL_Delay(1000);
 800c54e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c552:	f7f9 fef9 	bl	8006348 <HAL_Delay>
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 800c556:	2002      	movs	r0, #2
 800c558:	f7ff fb96 	bl	800bc88 <TCS3472_SelectSensor>
    HAL_Delay(1000);
 800c55c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c560:	f7f9 fef2 	bl	8006348 <HAL_Delay>

    /* Take 10 readings of white object for more accuracy */
    for (int i = 0; i < 10; i++) {
 800c564:	2300      	movs	r3, #0
 800c566:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c56a:	e035      	b.n	800c5d8 <TCS3472_CalibrateObjectColors+0x170>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 800c56c:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 800c570:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800c574:	f107 01a6 	add.w	r1, r7, #166	@ 0xa6
 800c578:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800c57c:	f7ff fbef 	bl	800bd5e <TCS3472_GetRGBC>
        white_readings_r[i] = r;
 800c580:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 800c584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c588:	005b      	lsls	r3, r3, #1
 800c58a:	33f8      	adds	r3, #248	@ 0xf8
 800c58c:	443b      	add	r3, r7
 800c58e:	f823 2c6c 	strh.w	r2, [r3, #-108]
        white_readings_g[i] = g;
 800c592:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800c596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	33f8      	adds	r3, #248	@ 0xf8
 800c59e:	443b      	add	r3, r7
 800c5a0:	f823 2c80 	strh.w	r2, [r3, #-128]
        white_readings_b[i] = b;
 800c5a4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c5a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	33f8      	adds	r3, #248	@ 0xf8
 800c5b0:	443b      	add	r3, r7
 800c5b2:	f823 2c94 	strh.w	r2, [r3, #-148]
        white_readings_c[i] = c;
 800c5b6:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 800c5ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	33f8      	adds	r3, #248	@ 0xf8
 800c5c2:	443b      	add	r3, r7
 800c5c4:	f823 2ca8 	strh.w	r2, [r3, #-168]
        HAL_Delay(100); // Longer delay between readings for more stable values
 800c5c8:	2064      	movs	r0, #100	@ 0x64
 800c5ca:	f7f9 febd 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 800c5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5dc:	2b09      	cmp	r3, #9
 800c5de:	ddc5      	ble.n	800c56c <TCS3472_CalibrateObjectColors+0x104>
    }

    /* Calculate average - discard the highest and lowest values */
    uint32_t white_r_sum = 0, white_g_sum = 0, white_b_sum = 0, white_c_sum = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    uint16_t max_c = 0, min_c = 65535;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 800c5fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c602:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    int max_idx = 0, min_idx = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c60c:	2300      	movs	r3, #0
 800c60e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    /* Find highest and lowest C values to exclude */
    for (int i = 0; i < 10; i++) {
 800c612:	2300      	movs	r3, #0
 800c614:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c618:	e034      	b.n	800c684 <TCS3472_CalibrateObjectColors+0x21c>
        if (white_readings_c[i] > max_c) {
 800c61a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	33f8      	adds	r3, #248	@ 0xf8
 800c622:	443b      	add	r3, r7
 800c624:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800c628:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d20c      	bcs.n	800c64a <TCS3472_CalibrateObjectColors+0x1e2>
            max_c = white_readings_c[i];
 800c630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	33f8      	adds	r3, #248	@ 0xf8
 800c638:	443b      	add	r3, r7
 800c63a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800c63e:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
            max_idx = i;
 800c642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        }
        if (white_readings_c[i] < min_c) {
 800c64a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	33f8      	adds	r3, #248	@ 0xf8
 800c652:	443b      	add	r3, r7
 800c654:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800c658:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	@ 0xe0
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d90c      	bls.n	800c67a <TCS3472_CalibrateObjectColors+0x212>
            min_c = white_readings_c[i];
 800c660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	33f8      	adds	r3, #248	@ 0xf8
 800c668:	443b      	add	r3, r7
 800c66a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800c66e:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
            min_idx = i;
 800c672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c676:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (int i = 0; i < 10; i++) {
 800c67a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c67e:	3301      	adds	r3, #1
 800c680:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c688:	2b09      	cmp	r3, #9
 800c68a:	ddc6      	ble.n	800c61a <TCS3472_CalibrateObjectColors+0x1b2>
        }
    }

    /* Sum values excluding outliers */
    for (int i = 0; i < 10; i++) {
 800c68c:	2300      	movs	r3, #0
 800c68e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c692:	e044      	b.n	800c71e <TCS3472_CalibrateObjectColors+0x2b6>
        if (i != max_idx && i != min_idx) {
 800c694:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d039      	beq.n	800c714 <TCS3472_CalibrateObjectColors+0x2ac>
 800c6a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c6a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d033      	beq.n	800c714 <TCS3472_CalibrateObjectColors+0x2ac>
            white_r_sum += white_readings_r[i];
 800c6ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	33f8      	adds	r3, #248	@ 0xf8
 800c6b4:	443b      	add	r3, r7
 800c6b6:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
            white_g_sum += white_readings_g[i];
 800c6c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	33f8      	adds	r3, #248	@ 0xf8
 800c6ce:	443b      	add	r3, r7
 800c6d0:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c6da:	4413      	add	r3, r2
 800c6dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            white_b_sum += white_readings_b[i];
 800c6e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	33f8      	adds	r3, #248	@ 0xf8
 800c6e8:	443b      	add	r3, r7
 800c6ea:	f833 3c94 	ldrh.w	r3, [r3, #-148]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            white_c_sum += white_readings_c[i];
 800c6fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	33f8      	adds	r3, #248	@ 0xf8
 800c702:	443b      	add	r3, r7
 800c704:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800c708:	461a      	mov	r2, r3
 800c70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c70e:	4413      	add	r3, r2
 800c710:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    for (int i = 0; i < 10; i++) {
 800c714:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c718:	3301      	adds	r3, #1
 800c71a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c71e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c722:	2b09      	cmp	r3, #9
 800c724:	ddb6      	ble.n	800c694 <TCS3472_CalibrateObjectColors+0x22c>
        }
    }

    uint16_t avg_white_c = white_c_sum / 8; // 10 - 2 outliers = 8 readings
 800c726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c72a:	08db      	lsrs	r3, r3, #3
 800c72c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2

    /* Set white threshold with 15% margin for better accuracy */
    object_color_config.white_min_c = avg_white_c * 0.85;
 800c730:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c734:	4618      	mov	r0, r3
 800c736:	f7f3 ff15 	bl	8000564 <__aeabi_i2d>
 800c73a:	a333      	add	r3, pc, #204	@ (adr r3, 800c808 <TCS3472_CalibrateObjectColors+0x3a0>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 ff7a 	bl	8000638 <__aeabi_dmul>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	4610      	mov	r0, r2
 800c74a:	4619      	mov	r1, r3
 800c74c:	f7f4 fa4c 	bl	8000be8 <__aeabi_d2uiz>
 800c750:	4603      	mov	r3, r0
 800c752:	b29a      	uxth	r2, r3
 800c754:	4b35      	ldr	r3, [pc, #212]	@ (800c82c <TCS3472_CalibrateObjectColors+0x3c4>)
 800c756:	801a      	strh	r2, [r3, #0]

    display_clear();
 800c758:	f7f9 fa00 	bl	8005b5c <display_clear>
    display_headding("Calibration");
 800c75c:	482c      	ldr	r0, [pc, #176]	@ (800c810 <TCS3472_CalibrateObjectColors+0x3a8>)
 800c75e:	f7f9 fa2f 	bl	8005bc0 <display_headding>
    display_message("Arm Color sensor", 2, 25);
 800c762:	2219      	movs	r2, #25
 800c764:	2102      	movs	r1, #2
 800c766:	482b      	ldr	r0, [pc, #172]	@ (800c814 <TCS3472_CalibrateObjectColors+0x3ac>)
 800c768:	f7f9 fa00 	bl	8005b6c <display_message>
    display_message("White", 2, 40);
 800c76c:	2228      	movs	r2, #40	@ 0x28
 800c76e:	2102      	movs	r1, #2
 800c770:	4829      	ldr	r0, [pc, #164]	@ (800c818 <TCS3472_CalibrateObjectColors+0x3b0>)
 800c772:	f7f9 f9fb 	bl	8005b6c <display_message>
    display_message("Calibrated.", 2, 52);
 800c776:	2234      	movs	r2, #52	@ 0x34
 800c778:	2102      	movs	r1, #2
 800c77a:	482d      	ldr	r0, [pc, #180]	@ (800c830 <TCS3472_CalibrateObjectColors+0x3c8>)
 800c77c:	f7f9 f9f6 	bl	8005b6c <display_message>
    HAL_Delay(2000);
 800c780:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800c784:	f7f9 fde0 	bl	8006348 <HAL_Delay>

    /* Yellow-Orange calibration */
    display_clear();
 800c788:	f7f9 f9e8 	bl	8005b5c <display_clear>
    display_headding("Calibration");
 800c78c:	4820      	ldr	r0, [pc, #128]	@ (800c810 <TCS3472_CalibrateObjectColors+0x3a8>)
 800c78e:	f7f9 fa17 	bl	8005bc0 <display_headding>
    display_message("Arm Color sensor", 2, 25);
 800c792:	2219      	movs	r2, #25
 800c794:	2102      	movs	r1, #2
 800c796:	481f      	ldr	r0, [pc, #124]	@ (800c814 <TCS3472_CalibrateObjectColors+0x3ac>)
 800c798:	f7f9 f9e8 	bl	8005b6c <display_message>
    display_message("Yellow-Orange", 2, 40);
 800c79c:	2228      	movs	r2, #40	@ 0x28
 800c79e:	2102      	movs	r1, #2
 800c7a0:	4824      	ldr	r0, [pc, #144]	@ (800c834 <TCS3472_CalibrateObjectColors+0x3cc>)
 800c7a2:	f7f9 f9e3 	bl	8005b6c <display_message>
    display_message("Press OK to Start", 2, 52);
 800c7a6:	2234      	movs	r2, #52	@ 0x34
 800c7a8:	2102      	movs	r1, #2
 800c7aa:	481c      	ldr	r0, [pc, #112]	@ (800c81c <TCS3472_CalibrateObjectColors+0x3b4>)
 800c7ac:	f7f9 f9de 	bl	8005b6c <display_message>
    while(okbtncount == prevokbtncount);
 800c7b0:	bf00      	nop
 800c7b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c820 <TCS3472_CalibrateObjectColors+0x3b8>)
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c824 <TCS3472_CalibrateObjectColors+0x3bc>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d0f9      	beq.n	800c7b2 <TCS3472_CalibrateObjectColors+0x34a>
    Reset_buttons();
 800c7be:	f7f4 feeb 	bl	8001598 <Reset_buttons>

    display_clear();
 800c7c2:	f7f9 f9cb 	bl	8005b5c <display_clear>
    display_headding("Calibration");
 800c7c6:	4812      	ldr	r0, [pc, #72]	@ (800c810 <TCS3472_CalibrateObjectColors+0x3a8>)
 800c7c8:	f7f9 f9fa 	bl	8005bc0 <display_headding>
    display_message("Arm Color sensor", 2, 25);
 800c7cc:	2219      	movs	r2, #25
 800c7ce:	2102      	movs	r1, #2
 800c7d0:	4810      	ldr	r0, [pc, #64]	@ (800c814 <TCS3472_CalibrateObjectColors+0x3ac>)
 800c7d2:	f7f9 f9cb 	bl	8005b6c <display_message>
    display_message("Yellow-Orange", 2, 40);
 800c7d6:	2228      	movs	r2, #40	@ 0x28
 800c7d8:	2102      	movs	r1, #2
 800c7da:	4816      	ldr	r0, [pc, #88]	@ (800c834 <TCS3472_CalibrateObjectColors+0x3cc>)
 800c7dc:	f7f9 f9c6 	bl	8005b6c <display_message>
    display_message("Calibrating...", 2, 52);
 800c7e0:	2234      	movs	r2, #52	@ 0x34
 800c7e2:	2102      	movs	r1, #2
 800c7e4:	4810      	ldr	r0, [pc, #64]	@ (800c828 <TCS3472_CalibrateObjectColors+0x3c0>)
 800c7e6:	f7f9 f9c1 	bl	8005b6c <display_message>

    HAL_Delay(1000);
 800c7ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c7ee:	f7f9 fdab 	bl	8006348 <HAL_Delay>
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 800c7f2:	2002      	movs	r0, #2
 800c7f4:	f7ff fa48 	bl	800bc88 <TCS3472_SelectSensor>
    HAL_Delay(1000);
 800c7f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c7fc:	f7f9 fda4 	bl	8006348 <HAL_Delay>

    /* Take 10 readings of yellow-orange object */
    for (int i = 0; i < 10; i++) {
 800c800:	2300      	movs	r3, #0
 800c802:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c806:	e04d      	b.n	800c8a4 <TCS3472_CalibrateObjectColors+0x43c>
 800c808:	33333333 	.word	0x33333333
 800c80c:	3feb3333 	.word	0x3feb3333
 800c810:	0800fe94 	.word	0x0800fe94
 800c814:	0800ff08 	.word	0x0800ff08
 800c818:	0800feec 	.word	0x0800feec
 800c81c:	0800febc 	.word	0x0800febc
 800c820:	200002b4 	.word	0x200002b4
 800c824:	200002b8 	.word	0x200002b8
 800c828:	0800fed0 	.word	0x0800fed0
 800c82c:	200000ac 	.word	0x200000ac
 800c830:	0800fee0 	.word	0x0800fee0
 800c834:	0800ff1c 	.word	0x0800ff1c
        TCS3472_GetRGBC(&r, &g, &b, &c);
 800c838:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 800c83c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800c840:	f107 01a6 	add.w	r1, r7, #166	@ 0xa6
 800c844:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800c848:	f7ff fa89 	bl	800bd5e <TCS3472_GetRGBC>
        yellow_readings_r[i] = r;
 800c84c:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 800c850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c854:	005b      	lsls	r3, r3, #1
 800c856:	33f8      	adds	r3, #248	@ 0xf8
 800c858:	443b      	add	r3, r7
 800c85a:	f823 2cbc 	strh.w	r2, [r3, #-188]
        yellow_readings_g[i] = g;
 800c85e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800c862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	33f8      	adds	r3, #248	@ 0xf8
 800c86a:	443b      	add	r3, r7
 800c86c:	f823 2cd0 	strh.w	r2, [r3, #-208]
        yellow_readings_b[i] = b;
 800c870:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	33f8      	adds	r3, #248	@ 0xf8
 800c87c:	443b      	add	r3, r7
 800c87e:	f823 2ce4 	strh.w	r2, [r3, #-228]
        yellow_readings_c[i] = c;
 800c882:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 800c886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c88a:	005b      	lsls	r3, r3, #1
 800c88c:	33f8      	adds	r3, #248	@ 0xf8
 800c88e:	443b      	add	r3, r7
 800c890:	f823 2cf8 	strh.w	r2, [r3, #-248]
        HAL_Delay(100); // Longer delay for stability
 800c894:	2064      	movs	r0, #100	@ 0x64
 800c896:	f7f9 fd57 	bl	8006348 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 800c89a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c89e:	3301      	adds	r3, #1
 800c8a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c8a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c8a8:	2b09      	cmp	r3, #9
 800c8aa:	ddc5      	ble.n	800c838 <TCS3472_CalibrateObjectColors+0x3d0>
    }

    /* Sort readings to remove outliers */
    max_c = 0; min_c = 65535;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 800c8b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c8b6:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    max_idx = 0; min_idx = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    /* Find highest and lowest readings based on R value for yellow */
    for (int i = 0; i < 10; i++) {
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8cc:	e034      	b.n	800c938 <TCS3472_CalibrateObjectColors+0x4d0>
        if (yellow_readings_r[i] > max_c) {
 800c8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c8d2:	005b      	lsls	r3, r3, #1
 800c8d4:	33f8      	adds	r3, #248	@ 0xf8
 800c8d6:	443b      	add	r3, r7
 800c8d8:	f833 3cbc 	ldrh.w	r3, [r3, #-188]
 800c8dc:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d20c      	bcs.n	800c8fe <TCS3472_CalibrateObjectColors+0x496>
            max_c = yellow_readings_r[i];
 800c8e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	33f8      	adds	r3, #248	@ 0xf8
 800c8ec:	443b      	add	r3, r7
 800c8ee:	f833 3cbc 	ldrh.w	r3, [r3, #-188]
 800c8f2:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
            max_idx = i;
 800c8f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c8fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        }
        if (yellow_readings_r[i] < min_c) {
 800c8fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	33f8      	adds	r3, #248	@ 0xf8
 800c906:	443b      	add	r3, r7
 800c908:	f833 3cbc 	ldrh.w	r3, [r3, #-188]
 800c90c:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	@ 0xe0
 800c910:	429a      	cmp	r2, r3
 800c912:	d90c      	bls.n	800c92e <TCS3472_CalibrateObjectColors+0x4c6>
            min_c = yellow_readings_r[i];
 800c914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	33f8      	adds	r3, #248	@ 0xf8
 800c91c:	443b      	add	r3, r7
 800c91e:	f833 3cbc 	ldrh.w	r3, [r3, #-188]
 800c922:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
            min_idx = i;
 800c926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c92a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (int i = 0; i < 10; i++) {
 800c92e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c932:	3301      	adds	r3, #1
 800c934:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c938:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	ddc6      	ble.n	800c8ce <TCS3472_CalibrateObjectColors+0x466>
        }
    }

    /* Calculate median-like average by removing extremes */
    uint32_t yellow_r_sum = 0, yellow_g_sum = 0, yellow_b_sum = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c946:	2300      	movs	r3, #0
 800c948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c94c:	2300      	movs	r3, #0
 800c94e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    for (int i = 0; i < 10; i++) {
 800c952:	2300      	movs	r3, #0
 800c954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c958:	e037      	b.n	800c9ca <TCS3472_CalibrateObjectColors+0x562>
        if (i != max_idx && i != min_idx) {
 800c95a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c95e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c962:	429a      	cmp	r2, r3
 800c964:	d02c      	beq.n	800c9c0 <TCS3472_CalibrateObjectColors+0x558>
 800c966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c96a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c96e:	429a      	cmp	r2, r3
 800c970:	d026      	beq.n	800c9c0 <TCS3472_CalibrateObjectColors+0x558>
            yellow_r_sum += yellow_readings_r[i];
 800c972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	33f8      	adds	r3, #248	@ 0xf8
 800c97a:	443b      	add	r3, r7
 800c97c:	f833 3cbc 	ldrh.w	r3, [r3, #-188]
 800c980:	461a      	mov	r2, r3
 800c982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c986:	4413      	add	r3, r2
 800c988:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            yellow_g_sum += yellow_readings_g[i];
 800c98c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	33f8      	adds	r3, #248	@ 0xf8
 800c994:	443b      	add	r3, r7
 800c996:	f833 3cd0 	ldrh.w	r3, [r3, #-208]
 800c99a:	461a      	mov	r2, r3
 800c99c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            yellow_b_sum += yellow_readings_b[i];
 800c9a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9aa:	005b      	lsls	r3, r3, #1
 800c9ac:	33f8      	adds	r3, #248	@ 0xf8
 800c9ae:	443b      	add	r3, r7
 800c9b0:	f833 3ce4 	ldrh.w	r3, [r3, #-228]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    for (int i = 0; i < 10; i++) {
 800c9c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c9ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9ce:	2b09      	cmp	r3, #9
 800c9d0:	ddc3      	ble.n	800c95a <TCS3472_CalibrateObjectColors+0x4f2>
        }
    }

    uint16_t avg_r = yellow_r_sum / 8;
 800c9d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9d6:	08db      	lsrs	r3, r3, #3
 800c9d8:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    uint16_t avg_g = yellow_g_sum / 8;
 800c9dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c9e0:	08db      	lsrs	r3, r3, #3
 800c9e2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    uint16_t avg_b = yellow_b_sum / 8;
 800c9e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c9ea:	08db      	lsrs	r3, r3, #3
 800c9ec:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6

    /* Avoid division by zero with more safety margin */
    if (avg_b < 20) avg_b = 20;
 800c9f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800c9f4:	2b13      	cmp	r3, #19
 800c9f6:	d802      	bhi.n	800c9fe <TCS3472_CalibrateObjectColors+0x596>
 800c9f8:	2314      	movs	r3, #20
 800c9fa:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6

    /* Calculate ratios with more precision */
    uint16_t r_to_b_ratio = (avg_r * 100) / avg_b;
 800c9fe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800ca02:	2264      	movs	r2, #100	@ 0x64
 800ca04:	fb03 f202 	mul.w	r2, r3, r2
 800ca08:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800ca0c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca10:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    uint16_t g_to_b_ratio = (avg_g * 100) / avg_b;
 800ca14:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800ca18:	2264      	movs	r2, #100	@ 0x64
 800ca1a:	fb03 f202 	mul.w	r2, r3, r2
 800ca1e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800ca22:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca26:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    /* Add some safety margin but not too much to keep sensitivity */
    object_color_config.yellow_min_ratio_r_to_b = r_to_b_ratio * 0.95; // 5% margin
 800ca2a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f3 fd98 	bl	8000564 <__aeabi_i2d>
 800ca34:	a34a      	add	r3, pc, #296	@ (adr r3, 800cb60 <TCS3472_CalibrateObjectColors+0x6f8>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7f3 fdfd 	bl	8000638 <__aeabi_dmul>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4610      	mov	r0, r2
 800ca44:	4619      	mov	r1, r3
 800ca46:	f7f4 f8cf 	bl	8000be8 <__aeabi_d2uiz>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	4b46      	ldr	r3, [pc, #280]	@ (800cb68 <TCS3472_CalibrateObjectColors+0x700>)
 800ca50:	815a      	strh	r2, [r3, #10]
    object_color_config.yellow_min_ratio_g_to_b = g_to_b_ratio * 0.95; // 5% margin
 800ca52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7f3 fd84 	bl	8000564 <__aeabi_i2d>
 800ca5c:	a340      	add	r3, pc, #256	@ (adr r3, 800cb60 <TCS3472_CalibrateObjectColors+0x6f8>)
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	f7f3 fde9 	bl	8000638 <__aeabi_dmul>
 800ca66:	4602      	mov	r2, r0
 800ca68:	460b      	mov	r3, r1
 800ca6a:	4610      	mov	r0, r2
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	f7f4 f8bb 	bl	8000be8 <__aeabi_d2uiz>
 800ca72:	4603      	mov	r3, r0
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	4b3c      	ldr	r3, [pc, #240]	@ (800cb68 <TCS3472_CalibrateObjectColors+0x700>)
 800ca78:	819a      	strh	r2, [r3, #12]

    /* Calculate r-g similarity with better precision */
    uint16_t r_g_similarity;
    if (avg_r > avg_g) {
 800ca7a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800ca7e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d90b      	bls.n	800ca9e <TCS3472_CalibrateObjectColors+0x636>
        r_g_similarity = (avg_g * 100) / avg_r;
 800ca86:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800ca8a:	2264      	movs	r2, #100	@ 0x64
 800ca8c:	fb03 f202 	mul.w	r2, r3, r2
 800ca90:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800ca94:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca98:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 800ca9c:	e00a      	b.n	800cab4 <TCS3472_CalibrateObjectColors+0x64c>
    } else {
        r_g_similarity = (avg_r * 100) / avg_g;
 800ca9e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800caa2:	2264      	movs	r2, #100	@ 0x64
 800caa4:	fb03 f202 	mul.w	r2, r3, r2
 800caa8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800caac:	fb92 f3f3 	sdiv	r3, r2, r3
 800cab0:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    }
    object_color_config.yellow_r_g_diff_percent = r_g_similarity * 0.95; // 5% margin
 800cab4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800cab8:	4618      	mov	r0, r3
 800caba:	f7f3 fd53 	bl	8000564 <__aeabi_i2d>
 800cabe:	a328      	add	r3, pc, #160	@ (adr r3, 800cb60 <TCS3472_CalibrateObjectColors+0x6f8>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	f7f3 fdb8 	bl	8000638 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4610      	mov	r0, r2
 800cace:	4619      	mov	r1, r3
 800cad0:	f7f4 f88a 	bl	8000be8 <__aeabi_d2uiz>
 800cad4:	4603      	mov	r3, r0
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	4b23      	ldr	r3, [pc, #140]	@ (800cb68 <TCS3472_CalibrateObjectColors+0x700>)
 800cada:	739a      	strb	r2, [r3, #14]

    display_clear();
 800cadc:	f7f9 f83e 	bl	8005b5c <display_clear>
    display_headding("Calibration");
 800cae0:	4822      	ldr	r0, [pc, #136]	@ (800cb6c <TCS3472_CalibrateObjectColors+0x704>)
 800cae2:	f7f9 f86d 	bl	8005bc0 <display_headding>
    display_message("Arm Color sensor", 2, 25);
 800cae6:	2219      	movs	r2, #25
 800cae8:	2102      	movs	r1, #2
 800caea:	4821      	ldr	r0, [pc, #132]	@ (800cb70 <TCS3472_CalibrateObjectColors+0x708>)
 800caec:	f7f9 f83e 	bl	8005b6c <display_message>
    display_message("Yellow-Orange", 2, 40);
 800caf0:	2228      	movs	r2, #40	@ 0x28
 800caf2:	2102      	movs	r1, #2
 800caf4:	481f      	ldr	r0, [pc, #124]	@ (800cb74 <TCS3472_CalibrateObjectColors+0x70c>)
 800caf6:	f7f9 f839 	bl	8005b6c <display_message>
    display_message("Calibrated.", 2, 52);
 800cafa:	2234      	movs	r2, #52	@ 0x34
 800cafc:	2102      	movs	r1, #2
 800cafe:	481e      	ldr	r0, [pc, #120]	@ (800cb78 <TCS3472_CalibrateObjectColors+0x710>)
 800cb00:	f7f9 f834 	bl	8005b6c <display_message>
    HAL_Delay(2000);
 800cb04:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800cb08:	f7f9 fc1e 	bl	8006348 <HAL_Delay>

    /* Update the thresholds for red/blue using relative values */
    /* These are estimates based on typical color sensor values */
    object_color_config.red_min_ratio_r_to_g = 150;   // Keep default
 800cb0c:	4b16      	ldr	r3, [pc, #88]	@ (800cb68 <TCS3472_CalibrateObjectColors+0x700>)
 800cb0e:	2296      	movs	r2, #150	@ 0x96
 800cb10:	805a      	strh	r2, [r3, #2]
    object_color_config.red_min_ratio_r_to_b = 150;   // Keep default
 800cb12:	4b15      	ldr	r3, [pc, #84]	@ (800cb68 <TCS3472_CalibrateObjectColors+0x700>)
 800cb14:	2296      	movs	r2, #150	@ 0x96
 800cb16:	809a      	strh	r2, [r3, #4]
    object_color_config.blue_min_ratio_b_to_r = 150;  // Keep default
 800cb18:	4b13      	ldr	r3, [pc, #76]	@ (800cb68 <TCS3472_CalibrateObjectColors+0x700>)
 800cb1a:	2296      	movs	r2, #150	@ 0x96
 800cb1c:	80da      	strh	r2, [r3, #6]
    object_color_config.blue_min_ratio_b_to_g = 120;  // Keep default
 800cb1e:	4b12      	ldr	r3, [pc, #72]	@ (800cb68 <TCS3472_CalibrateObjectColors+0x700>)
 800cb20:	2278      	movs	r2, #120	@ 0x78
 800cb22:	811a      	strh	r2, [r3, #8]

    display_clear();
 800cb24:	f7f9 f81a 	bl	8005b5c <display_clear>
    display_headding("Calibration");
 800cb28:	4810      	ldr	r0, [pc, #64]	@ (800cb6c <TCS3472_CalibrateObjectColors+0x704>)
 800cb2a:	f7f9 f849 	bl	8005bc0 <display_headding>
    display_message("Arm Color sensor", 2, 25);
 800cb2e:	2219      	movs	r2, #25
 800cb30:	2102      	movs	r1, #2
 800cb32:	480f      	ldr	r0, [pc, #60]	@ (800cb70 <TCS3472_CalibrateObjectColors+0x708>)
 800cb34:	f7f9 f81a 	bl	8005b6c <display_message>
    display_message("Calibration", 2, 40);
 800cb38:	2228      	movs	r2, #40	@ 0x28
 800cb3a:	2102      	movs	r1, #2
 800cb3c:	480b      	ldr	r0, [pc, #44]	@ (800cb6c <TCS3472_CalibrateObjectColors+0x704>)
 800cb3e:	f7f9 f815 	bl	8005b6c <display_message>
    display_message("Completed.", 2, 52);
 800cb42:	2234      	movs	r2, #52	@ 0x34
 800cb44:	2102      	movs	r1, #2
 800cb46:	480d      	ldr	r0, [pc, #52]	@ (800cb7c <TCS3472_CalibrateObjectColors+0x714>)
 800cb48:	f7f9 f810 	bl	8005b6c <display_message>
    HAL_Delay(2000);
 800cb4c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800cb50:	f7f9 fbfa 	bl	8006348 <HAL_Delay>
}
 800cb54:	bf00      	nop
 800cb56:	37f8      	adds	r7, #248	@ 0xf8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	f3af 8000 	nop.w
 800cb60:	66666666 	.word	0x66666666
 800cb64:	3fee6666 	.word	0x3fee6666
 800cb68:	200000ac 	.word	0x200000ac
 800cb6c:	0800fe94 	.word	0x0800fe94
 800cb70:	0800ff08 	.word	0x0800ff08
 800cb74:	0800ff1c 	.word	0x0800ff1c
 800cb78:	0800fee0 	.word	0x0800fee0
 800cb7c:	0800ff2c 	.word	0x0800ff2c

0800cb80 <TCS3472_DetectWhiteVsYellow>:



// new color
Color TCS3472_DetectWhiteVsYellow(uint16_t r, uint16_t g, uint16_t b, uint16_t c) {
 800cb80:	b590      	push	{r4, r7, lr}
 800cb82:	b0a1      	sub	sp, #132	@ 0x84
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4604      	mov	r4, r0
 800cb88:	4608      	mov	r0, r1
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	4623      	mov	r3, r4
 800cb90:	80fb      	strh	r3, [r7, #6]
 800cb92:	4603      	mov	r3, r0
 800cb94:	80bb      	strh	r3, [r7, #4]
 800cb96:	460b      	mov	r3, r1
 800cb98:	807b      	strh	r3, [r7, #2]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	803b      	strh	r3, [r7, #0]
	char msg[100];

    /* Set minimum values to prevent division issues */
    const uint16_t min_value = 20;
 800cb9e:	2314      	movs	r3, #20
 800cba0:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
    if (r < min_value) r = min_value;
 800cba4:	88fa      	ldrh	r2, [r7, #6]
 800cba6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d202      	bcs.n	800cbb4 <TCS3472_DetectWhiteVsYellow+0x34>
 800cbae:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800cbb2:	80fb      	strh	r3, [r7, #6]
    if (g < min_value) g = min_value;
 800cbb4:	88ba      	ldrh	r2, [r7, #4]
 800cbb6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d202      	bcs.n	800cbc4 <TCS3472_DetectWhiteVsYellow+0x44>
 800cbbe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800cbc2:	80bb      	strh	r3, [r7, #4]
    if (b < min_value) b = min_value;
 800cbc4:	887a      	ldrh	r2, [r7, #2]
 800cbc6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d202      	bcs.n	800cbd4 <TCS3472_DetectWhiteVsYellow+0x54>
 800cbce:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800cbd2:	807b      	strh	r3, [r7, #2]

    /* Calculate important metrics for white vs yellow differentiation */
    uint16_t r_dominance = ((r * 100) / (r + g + b));
 800cbd4:	88fb      	ldrh	r3, [r7, #6]
 800cbd6:	2264      	movs	r2, #100	@ 0x64
 800cbd8:	fb03 f202 	mul.w	r2, r3, r2
 800cbdc:	88f9      	ldrh	r1, [r7, #6]
 800cbde:	88bb      	ldrh	r3, [r7, #4]
 800cbe0:	4419      	add	r1, r3
 800cbe2:	887b      	ldrh	r3, [r7, #2]
 800cbe4:	440b      	add	r3, r1
 800cbe6:	fb92 f3f3 	sdiv	r3, r2, r3
 800cbea:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    uint16_t g_dominance = ((g * 100) / (r + g + b));
 800cbee:	88bb      	ldrh	r3, [r7, #4]
 800cbf0:	2264      	movs	r2, #100	@ 0x64
 800cbf2:	fb03 f202 	mul.w	r2, r3, r2
 800cbf6:	88f9      	ldrh	r1, [r7, #6]
 800cbf8:	88bb      	ldrh	r3, [r7, #4]
 800cbfa:	4419      	add	r1, r3
 800cbfc:	887b      	ldrh	r3, [r7, #2]
 800cbfe:	440b      	add	r3, r1
 800cc00:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc04:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    uint16_t b_dominance = ((b * 100) / (r + g + b));
 800cc08:	887b      	ldrh	r3, [r7, #2]
 800cc0a:	2264      	movs	r2, #100	@ 0x64
 800cc0c:	fb03 f202 	mul.w	r2, r3, r2
 800cc10:	88f9      	ldrh	r1, [r7, #6]
 800cc12:	88bb      	ldrh	r3, [r7, #4]
 800cc14:	4419      	add	r1, r3
 800cc16:	887b      	ldrh	r3, [r7, #2]
 800cc18:	440b      	add	r3, r1
 800cc1a:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

    /* R-G similarity - key for yellow detection */
    uint16_t r_g_similarity;
    if (r > g) {
 800cc22:	88fa      	ldrh	r2, [r7, #6]
 800cc24:	88bb      	ldrh	r3, [r7, #4]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d909      	bls.n	800cc3e <TCS3472_DetectWhiteVsYellow+0xbe>
        r_g_similarity = (g * 100) / r;
 800cc2a:	88bb      	ldrh	r3, [r7, #4]
 800cc2c:	2264      	movs	r2, #100	@ 0x64
 800cc2e:	fb03 f202 	mul.w	r2, r3, r2
 800cc32:	88fb      	ldrh	r3, [r7, #6]
 800cc34:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc38:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 800cc3c:	e008      	b.n	800cc50 <TCS3472_DetectWhiteVsYellow+0xd0>
    } else {
        r_g_similarity = (r * 100) / g;
 800cc3e:	88fb      	ldrh	r3, [r7, #6]
 800cc40:	2264      	movs	r2, #100	@ 0x64
 800cc42:	fb03 f202 	mul.w	r2, r3, r2
 800cc46:	88bb      	ldrh	r3, [r7, #4]
 800cc48:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc4c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    }

    /* Calculate blue ratio to average of red and green */
    uint16_t b_to_rg_ratio = (b * 200) / (r + g);
 800cc50:	887b      	ldrh	r3, [r7, #2]
 800cc52:	22c8      	movs	r2, #200	@ 0xc8
 800cc54:	fb03 f202 	mul.w	r2, r3, r2
 800cc58:	88f9      	ldrh	r1, [r7, #6]
 800cc5a:	88bb      	ldrh	r3, [r7, #4]
 800cc5c:	440b      	add	r3, r1
 800cc5e:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc62:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

    /* Blue-to-overall ratio is the key differentiator between white and yellow */
    uint16_t relative_blueness = (b * 100) / ((r + g) / 2);
 800cc66:	887b      	ldrh	r3, [r7, #2]
 800cc68:	2264      	movs	r2, #100	@ 0x64
 800cc6a:	fb03 f202 	mul.w	r2, r3, r2
 800cc6e:	88f9      	ldrh	r1, [r7, #6]
 800cc70:	88bb      	ldrh	r3, [r7, #4]
 800cc72:	440b      	add	r3, r1
 800cc74:	0fd9      	lsrs	r1, r3, #31
 800cc76:	440b      	add	r3, r1
 800cc78:	105b      	asrs	r3, r3, #1
 800cc7a:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc7e:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

    /* WHITE: High brightness, balanced RGB, significant blue component */
    if (c > object_color_config.white_min_c &&
 800cc82:	4b39      	ldr	r3, [pc, #228]	@ (800cd68 <TCS3472_DetectWhiteVsYellow+0x1e8>)
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	883a      	ldrh	r2, [r7, #0]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d919      	bls.n	800ccc0 <TCS3472_DetectWhiteVsYellow+0x140>
 800cc8c:	88fb      	ldrh	r3, [r7, #6]
 800cc8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc92:	d915      	bls.n	800ccc0 <TCS3472_DetectWhiteVsYellow+0x140>
        r > 1000 && g > 1000 && b > 1000 &&
 800cc94:	88bb      	ldrh	r3, [r7, #4]
 800cc96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc9a:	d911      	bls.n	800ccc0 <TCS3472_DetectWhiteVsYellow+0x140>
 800cc9c:	887b      	ldrh	r3, [r7, #2]
 800cc9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cca2:	d90d      	bls.n	800ccc0 <TCS3472_DetectWhiteVsYellow+0x140>
 800cca4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800cca8:	2b50      	cmp	r3, #80	@ 0x50
 800ccaa:	d909      	bls.n	800ccc0 <TCS3472_DetectWhiteVsYellow+0x140>
        r_g_similarity > 80 && /* R and G within 20% of each other */
 800ccac:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800ccb0:	2b4b      	cmp	r3, #75	@ 0x4b
 800ccb2:	d905      	bls.n	800ccc0 <TCS3472_DetectWhiteVsYellow+0x140>
        relative_blueness > 75 && /* Blue component is at least 75% of R+G average */
 800ccb4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800ccb8:	2b19      	cmp	r3, #25
 800ccba:	d901      	bls.n	800ccc0 <TCS3472_DetectWhiteVsYellow+0x140>
        b_dominance > 25) { /* Blue makes up at least 25% of total color */
        return WHITE;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e04f      	b.n	800cd60 <TCS3472_DetectWhiteVsYellow+0x1e0>
    }

    /* YELLOW-ORANGE: High R and G, low B, R and G balanced */
    if (c > 2000 && /* Decent brightness */
 800ccc0:	883b      	ldrh	r3, [r7, #0]
 800ccc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ccc6:	d918      	bls.n	800ccfa <TCS3472_DetectWhiteVsYellow+0x17a>
 800ccc8:	88fb      	ldrh	r3, [r7, #6]
 800ccca:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800ccce:	d914      	bls.n	800ccfa <TCS3472_DetectWhiteVsYellow+0x17a>
        r > 800 && g > 800 && /* Strong red and green */
 800ccd0:	88bb      	ldrh	r3, [r7, #4]
 800ccd2:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800ccd6:	d910      	bls.n	800ccfa <TCS3472_DetectWhiteVsYellow+0x17a>
        r_g_similarity > object_color_config.yellow_r_g_diff_percent && /* R and G similar */
 800ccd8:	4b23      	ldr	r3, [pc, #140]	@ (800cd68 <TCS3472_DetectWhiteVsYellow+0x1e8>)
 800ccda:	7b9b      	ldrb	r3, [r3, #14]
 800ccdc:	461a      	mov	r2, r3
        r > 800 && g > 800 && /* Strong red and green */
 800ccde:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d909      	bls.n	800ccfa <TCS3472_DetectWhiteVsYellow+0x17a>
        r_g_similarity > object_color_config.yellow_r_g_diff_percent && /* R and G similar */
 800cce6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800ccea:	2b18      	cmp	r3, #24
 800ccec:	d805      	bhi.n	800ccfa <TCS3472_DetectWhiteVsYellow+0x17a>
        b_dominance < 25 && /* Blue is a small component */
 800ccee:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800ccf2:	2b3b      	cmp	r3, #59	@ 0x3b
 800ccf4:	d801      	bhi.n	800ccfa <TCS3472_DetectWhiteVsYellow+0x17a>
        relative_blueness < 60) { /* Blue is much less than R+G */
        return YELLOW;
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	e032      	b.n	800cd60 <TCS3472_DetectWhiteVsYellow+0x1e0>
    }

    /* Make best guess based on blueness and brightness */
    if (relative_blueness > 65 || b_dominance > 30) {
 800ccfa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800ccfe:	2b41      	cmp	r3, #65	@ 0x41
 800cd00:	d803      	bhi.n	800cd0a <TCS3472_DetectWhiteVsYellow+0x18a>
 800cd02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800cd06:	2b1e      	cmp	r3, #30
 800cd08:	d915      	bls.n	800cd36 <TCS3472_DetectWhiteVsYellow+0x1b6>
    	sprintf(msg, "WHITE\r\n");
 800cd0a:	f107 030c 	add.w	r3, r7, #12
 800cd0e:	4917      	ldr	r1, [pc, #92]	@ (800cd6c <TCS3472_DetectWhiteVsYellow+0x1ec>)
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 fe0d 	bl	800d930 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800cd16:	f107 030c 	add.w	r3, r7, #12
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f3 fac8 	bl	80002b0 <strlen>
 800cd20:	4603      	mov	r3, r0
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	f107 010c 	add.w	r1, r7, #12
 800cd28:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2c:	4810      	ldr	r0, [pc, #64]	@ (800cd70 <TCS3472_DetectWhiteVsYellow+0x1f0>)
 800cd2e:	f7fd fff9 	bl	800ad24 <HAL_UART_Transmit>
        return WHITE;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e014      	b.n	800cd60 <TCS3472_DetectWhiteVsYellow+0x1e0>
    } else {
    	sprintf(msg, "YELLOW\r\n");
 800cd36:	f107 030c 	add.w	r3, r7, #12
 800cd3a:	490e      	ldr	r1, [pc, #56]	@ (800cd74 <TCS3472_DetectWhiteVsYellow+0x1f4>)
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 fdf7 	bl	800d930 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800cd42:	f107 030c 	add.w	r3, r7, #12
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f3 fab2 	bl	80002b0 <strlen>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	f107 010c 	add.w	r1, r7, #12
 800cd54:	f04f 33ff 	mov.w	r3, #4294967295
 800cd58:	4805      	ldr	r0, [pc, #20]	@ (800cd70 <TCS3472_DetectWhiteVsYellow+0x1f0>)
 800cd5a:	f7fd ffe3 	bl	800ad24 <HAL_UART_Transmit>
        return YELLOW;
 800cd5e:	2302      	movs	r3, #2
    }
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3784      	adds	r7, #132	@ 0x84
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd90      	pop	{r4, r7, pc}
 800cd68:	200000ac 	.word	0x200000ac
 800cd6c:	0800ff38 	.word	0x0800ff38
 800cd70:	2000050c 	.word	0x2000050c
 800cd74:	0800ff40 	.word	0x0800ff40

0800cd78 <TCS3472_InitAll>:




/* Initialize both TCS3472 color sensors */
uint8_t TCS3472_InitAll(void) {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b09a      	sub	sp, #104	@ 0x68
 800cd7c:	af00      	add	r7, sp, #0
    uint8_t status = HAL_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    char msg[100];

    /* Initialize line sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 800cd84:	2001      	movs	r0, #1
 800cd86:	f7fe ff7f 	bl	800bc88 <TCS3472_SelectSensor>
    if (TCS3472_Init() != HAL_OK) {
 800cd8a:	f7fe ff91 	bl	800bcb0 <TCS3472_Init>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d014      	beq.n	800cdbe <TCS3472_InitAll+0x46>
        sprintf(msg, "Line sensor (TCS3472) initialization failed!\r\n");
 800cd94:	463b      	mov	r3, r7
 800cd96:	492c      	ldr	r1, [pc, #176]	@ (800ce48 <TCS3472_InitAll+0xd0>)
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fdc9 	bl	800d930 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800cd9e:	463b      	mov	r3, r7
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7f3 fa85 	bl	80002b0 <strlen>
 800cda6:	4603      	mov	r3, r0
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	4639      	mov	r1, r7
 800cdac:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb0:	4826      	ldr	r0, [pc, #152]	@ (800ce4c <TCS3472_InitAll+0xd4>)
 800cdb2:	f7fd ffb7 	bl	800ad24 <HAL_UART_Transmit>
        status = HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cdbc:	e010      	b.n	800cde0 <TCS3472_InitAll+0x68>
    } else {
        sprintf(msg, "Line sensor (TCS3472) initialized successfully!\r\n");
 800cdbe:	463b      	mov	r3, r7
 800cdc0:	4923      	ldr	r1, [pc, #140]	@ (800ce50 <TCS3472_InitAll+0xd8>)
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 fdb4 	bl	800d930 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800cdc8:	463b      	mov	r3, r7
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f3 fa70 	bl	80002b0 <strlen>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdda:	481c      	ldr	r0, [pc, #112]	@ (800ce4c <TCS3472_InitAll+0xd4>)
 800cddc:	f7fd ffa2 	bl	800ad24 <HAL_UART_Transmit>
    }

    /* Initialize object sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 800cde0:	2002      	movs	r0, #2
 800cde2:	f7fe ff51 	bl	800bc88 <TCS3472_SelectSensor>
    if (TCS3472_Init() != HAL_OK) {
 800cde6:	f7fe ff63 	bl	800bcb0 <TCS3472_Init>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d014      	beq.n	800ce1a <TCS3472_InitAll+0xa2>
        sprintf(msg, "Object sensor (TCS3472) initialization failed!\r\n");
 800cdf0:	463b      	mov	r3, r7
 800cdf2:	4918      	ldr	r1, [pc, #96]	@ (800ce54 <TCS3472_InitAll+0xdc>)
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 fd9b 	bl	800d930 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800cdfa:	463b      	mov	r3, r7
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7f3 fa57 	bl	80002b0 <strlen>
 800ce02:	4603      	mov	r3, r0
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	4639      	mov	r1, r7
 800ce08:	f04f 33ff 	mov.w	r3, #4294967295
 800ce0c:	480f      	ldr	r0, [pc, #60]	@ (800ce4c <TCS3472_InitAll+0xd4>)
 800ce0e:	f7fd ff89 	bl	800ad24 <HAL_UART_Transmit>
        status = HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ce18:	e010      	b.n	800ce3c <TCS3472_InitAll+0xc4>
    } else {
        sprintf(msg, "Object sensor (TCS3472) initialized successfully!\r\n");
 800ce1a:	463b      	mov	r3, r7
 800ce1c:	490e      	ldr	r1, [pc, #56]	@ (800ce58 <TCS3472_InitAll+0xe0>)
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 fd86 	bl	800d930 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800ce24:	463b      	mov	r3, r7
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7f3 fa42 	bl	80002b0 <strlen>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	4639      	mov	r1, r7
 800ce32:	f04f 33ff 	mov.w	r3, #4294967295
 800ce36:	4805      	ldr	r0, [pc, #20]	@ (800ce4c <TCS3472_InitAll+0xd4>)
 800ce38:	f7fd ff74 	bl	800ad24 <HAL_UART_Transmit>
    }

    return status;
 800ce3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3768      	adds	r7, #104	@ 0x68
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	0800ff4c 	.word	0x0800ff4c
 800ce4c:	2000050c 	.word	0x2000050c
 800ce50:	0800ff7c 	.word	0x0800ff7c
 800ce54:	0800ffb0 	.word	0x0800ffb0
 800ce58:	0800ffe4 	.word	0x0800ffe4

0800ce5c <init_color_sensors>:


void init_color_sensors(){
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	af00      	add	r7, sp, #0
	if (TCS3472_InitAll() != HAL_OK) {
 800ce60:	f7ff ff8a 	bl	800cd78 <TCS3472_InitAll>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <init_color_sensors+0x12>
		Error_Handler();
 800ce6a:	f7f5 fc35 	bl	80026d8 <Error_Handler>
	}
}
 800ce6e:	bf00      	nop
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <caliberate_color_sensors>:


void caliberate_color_sensors(){
 800ce72:	b580      	push	{r7, lr}
 800ce74:	af00      	add	r7, sp, #0
	/* Run calibration routine for line sensor */
	TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 800ce76:	2001      	movs	r0, #1
 800ce78:	f7fe ff06 	bl	800bc88 <TCS3472_SelectSensor>
	TCS3472_CalibrateColors();
 800ce7c:	f7ff f810 	bl	800bea0 <TCS3472_CalibrateColors>

	/* Run simplified calibration for object sensor (just for white) */
	Arm_color_calibration_position();
 800ce80:	f7f4 faa4 	bl	80013cc <Arm_color_calibration_position>
	TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 800ce84:	2002      	movs	r0, #2
 800ce86:	f7fe feff 	bl	800bc88 <TCS3472_SelectSensor>
	TCS3472_CalibrateObjectColors();
 800ce8a:	f7ff faed 	bl	800c468 <TCS3472_CalibrateObjectColors>
	return_home();
 800ce8e:	f7f4 fa7f 	bl	8001390 <return_home>
}
 800ce92:	bf00      	nop
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <__cvt>:
 800ce96:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce9a:	ec57 6b10 	vmov	r6, r7, d0
 800ce9e:	2f00      	cmp	r7, #0
 800cea0:	460c      	mov	r4, r1
 800cea2:	4619      	mov	r1, r3
 800cea4:	463b      	mov	r3, r7
 800cea6:	bfbb      	ittet	lt
 800cea8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ceac:	461f      	movlt	r7, r3
 800ceae:	2300      	movge	r3, #0
 800ceb0:	232d      	movlt	r3, #45	@ 0x2d
 800ceb2:	700b      	strb	r3, [r1, #0]
 800ceb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ceb6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ceba:	4691      	mov	r9, r2
 800cebc:	f023 0820 	bic.w	r8, r3, #32
 800cec0:	bfbc      	itt	lt
 800cec2:	4632      	movlt	r2, r6
 800cec4:	4616      	movlt	r6, r2
 800cec6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ceca:	d005      	beq.n	800ced8 <__cvt+0x42>
 800cecc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ced0:	d100      	bne.n	800ced4 <__cvt+0x3e>
 800ced2:	3401      	adds	r4, #1
 800ced4:	2102      	movs	r1, #2
 800ced6:	e000      	b.n	800ceda <__cvt+0x44>
 800ced8:	2103      	movs	r1, #3
 800ceda:	ab03      	add	r3, sp, #12
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	ab02      	add	r3, sp, #8
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	ec47 6b10 	vmov	d0, r6, r7
 800cee6:	4653      	mov	r3, sl
 800cee8:	4622      	mov	r2, r4
 800ceea:	f000 feb1 	bl	800dc50 <_dtoa_r>
 800ceee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cef2:	4605      	mov	r5, r0
 800cef4:	d119      	bne.n	800cf2a <__cvt+0x94>
 800cef6:	f019 0f01 	tst.w	r9, #1
 800cefa:	d00e      	beq.n	800cf1a <__cvt+0x84>
 800cefc:	eb00 0904 	add.w	r9, r0, r4
 800cf00:	2200      	movs	r2, #0
 800cf02:	2300      	movs	r3, #0
 800cf04:	4630      	mov	r0, r6
 800cf06:	4639      	mov	r1, r7
 800cf08:	f7f3 fdfe 	bl	8000b08 <__aeabi_dcmpeq>
 800cf0c:	b108      	cbz	r0, 800cf12 <__cvt+0x7c>
 800cf0e:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf12:	2230      	movs	r2, #48	@ 0x30
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	454b      	cmp	r3, r9
 800cf18:	d31e      	bcc.n	800cf58 <__cvt+0xc2>
 800cf1a:	9b03      	ldr	r3, [sp, #12]
 800cf1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf1e:	1b5b      	subs	r3, r3, r5
 800cf20:	4628      	mov	r0, r5
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	b004      	add	sp, #16
 800cf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf2e:	eb00 0904 	add.w	r9, r0, r4
 800cf32:	d1e5      	bne.n	800cf00 <__cvt+0x6a>
 800cf34:	7803      	ldrb	r3, [r0, #0]
 800cf36:	2b30      	cmp	r3, #48	@ 0x30
 800cf38:	d10a      	bne.n	800cf50 <__cvt+0xba>
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	4630      	mov	r0, r6
 800cf40:	4639      	mov	r1, r7
 800cf42:	f7f3 fde1 	bl	8000b08 <__aeabi_dcmpeq>
 800cf46:	b918      	cbnz	r0, 800cf50 <__cvt+0xba>
 800cf48:	f1c4 0401 	rsb	r4, r4, #1
 800cf4c:	f8ca 4000 	str.w	r4, [sl]
 800cf50:	f8da 3000 	ldr.w	r3, [sl]
 800cf54:	4499      	add	r9, r3
 800cf56:	e7d3      	b.n	800cf00 <__cvt+0x6a>
 800cf58:	1c59      	adds	r1, r3, #1
 800cf5a:	9103      	str	r1, [sp, #12]
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	e7d9      	b.n	800cf14 <__cvt+0x7e>

0800cf60 <__exponent>:
 800cf60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf62:	2900      	cmp	r1, #0
 800cf64:	bfba      	itte	lt
 800cf66:	4249      	neglt	r1, r1
 800cf68:	232d      	movlt	r3, #45	@ 0x2d
 800cf6a:	232b      	movge	r3, #43	@ 0x2b
 800cf6c:	2909      	cmp	r1, #9
 800cf6e:	7002      	strb	r2, [r0, #0]
 800cf70:	7043      	strb	r3, [r0, #1]
 800cf72:	dd29      	ble.n	800cfc8 <__exponent+0x68>
 800cf74:	f10d 0307 	add.w	r3, sp, #7
 800cf78:	461d      	mov	r5, r3
 800cf7a:	270a      	movs	r7, #10
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf82:	fb07 1416 	mls	r4, r7, r6, r1
 800cf86:	3430      	adds	r4, #48	@ 0x30
 800cf88:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	2c63      	cmp	r4, #99	@ 0x63
 800cf90:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf94:	4631      	mov	r1, r6
 800cf96:	dcf1      	bgt.n	800cf7c <__exponent+0x1c>
 800cf98:	3130      	adds	r1, #48	@ 0x30
 800cf9a:	1e94      	subs	r4, r2, #2
 800cf9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cfa0:	1c41      	adds	r1, r0, #1
 800cfa2:	4623      	mov	r3, r4
 800cfa4:	42ab      	cmp	r3, r5
 800cfa6:	d30a      	bcc.n	800cfbe <__exponent+0x5e>
 800cfa8:	f10d 0309 	add.w	r3, sp, #9
 800cfac:	1a9b      	subs	r3, r3, r2
 800cfae:	42ac      	cmp	r4, r5
 800cfb0:	bf88      	it	hi
 800cfb2:	2300      	movhi	r3, #0
 800cfb4:	3302      	adds	r3, #2
 800cfb6:	4403      	add	r3, r0
 800cfb8:	1a18      	subs	r0, r3, r0
 800cfba:	b003      	add	sp, #12
 800cfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfbe:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cfc2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cfc6:	e7ed      	b.n	800cfa4 <__exponent+0x44>
 800cfc8:	2330      	movs	r3, #48	@ 0x30
 800cfca:	3130      	adds	r1, #48	@ 0x30
 800cfcc:	7083      	strb	r3, [r0, #2]
 800cfce:	70c1      	strb	r1, [r0, #3]
 800cfd0:	1d03      	adds	r3, r0, #4
 800cfd2:	e7f1      	b.n	800cfb8 <__exponent+0x58>

0800cfd4 <_printf_float>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	b08d      	sub	sp, #52	@ 0x34
 800cfda:	460c      	mov	r4, r1
 800cfdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cfe0:	4616      	mov	r6, r2
 800cfe2:	461f      	mov	r7, r3
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	f000 fd23 	bl	800da30 <_localeconv_r>
 800cfea:	6803      	ldr	r3, [r0, #0]
 800cfec:	9304      	str	r3, [sp, #16]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7f3 f95e 	bl	80002b0 <strlen>
 800cff4:	2300      	movs	r3, #0
 800cff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cff8:	f8d8 3000 	ldr.w	r3, [r8]
 800cffc:	9005      	str	r0, [sp, #20]
 800cffe:	3307      	adds	r3, #7
 800d000:	f023 0307 	bic.w	r3, r3, #7
 800d004:	f103 0208 	add.w	r2, r3, #8
 800d008:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d00c:	f8d4 b000 	ldr.w	fp, [r4]
 800d010:	f8c8 2000 	str.w	r2, [r8]
 800d014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d018:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d01c:	9307      	str	r3, [sp, #28]
 800d01e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d022:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d02a:	4b9c      	ldr	r3, [pc, #624]	@ (800d29c <_printf_float+0x2c8>)
 800d02c:	f04f 32ff 	mov.w	r2, #4294967295
 800d030:	f7f3 fd9c 	bl	8000b6c <__aeabi_dcmpun>
 800d034:	bb70      	cbnz	r0, 800d094 <_printf_float+0xc0>
 800d036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03a:	4b98      	ldr	r3, [pc, #608]	@ (800d29c <_printf_float+0x2c8>)
 800d03c:	f04f 32ff 	mov.w	r2, #4294967295
 800d040:	f7f3 fd76 	bl	8000b30 <__aeabi_dcmple>
 800d044:	bb30      	cbnz	r0, 800d094 <_printf_float+0xc0>
 800d046:	2200      	movs	r2, #0
 800d048:	2300      	movs	r3, #0
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	f7f3 fd65 	bl	8000b1c <__aeabi_dcmplt>
 800d052:	b110      	cbz	r0, 800d05a <_printf_float+0x86>
 800d054:	232d      	movs	r3, #45	@ 0x2d
 800d056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d05a:	4a91      	ldr	r2, [pc, #580]	@ (800d2a0 <_printf_float+0x2cc>)
 800d05c:	4b91      	ldr	r3, [pc, #580]	@ (800d2a4 <_printf_float+0x2d0>)
 800d05e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d062:	bf8c      	ite	hi
 800d064:	4690      	movhi	r8, r2
 800d066:	4698      	movls	r8, r3
 800d068:	2303      	movs	r3, #3
 800d06a:	6123      	str	r3, [r4, #16]
 800d06c:	f02b 0304 	bic.w	r3, fp, #4
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	f04f 0900 	mov.w	r9, #0
 800d076:	9700      	str	r7, [sp, #0]
 800d078:	4633      	mov	r3, r6
 800d07a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d07c:	4621      	mov	r1, r4
 800d07e:	4628      	mov	r0, r5
 800d080:	f000 f9d2 	bl	800d428 <_printf_common>
 800d084:	3001      	adds	r0, #1
 800d086:	f040 808d 	bne.w	800d1a4 <_printf_float+0x1d0>
 800d08a:	f04f 30ff 	mov.w	r0, #4294967295
 800d08e:	b00d      	add	sp, #52	@ 0x34
 800d090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d094:	4642      	mov	r2, r8
 800d096:	464b      	mov	r3, r9
 800d098:	4640      	mov	r0, r8
 800d09a:	4649      	mov	r1, r9
 800d09c:	f7f3 fd66 	bl	8000b6c <__aeabi_dcmpun>
 800d0a0:	b140      	cbz	r0, 800d0b4 <_printf_float+0xe0>
 800d0a2:	464b      	mov	r3, r9
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	bfbc      	itt	lt
 800d0a8:	232d      	movlt	r3, #45	@ 0x2d
 800d0aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0ae:	4a7e      	ldr	r2, [pc, #504]	@ (800d2a8 <_printf_float+0x2d4>)
 800d0b0:	4b7e      	ldr	r3, [pc, #504]	@ (800d2ac <_printf_float+0x2d8>)
 800d0b2:	e7d4      	b.n	800d05e <_printf_float+0x8a>
 800d0b4:	6863      	ldr	r3, [r4, #4]
 800d0b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d0ba:	9206      	str	r2, [sp, #24]
 800d0bc:	1c5a      	adds	r2, r3, #1
 800d0be:	d13b      	bne.n	800d138 <_printf_float+0x164>
 800d0c0:	2306      	movs	r3, #6
 800d0c2:	6063      	str	r3, [r4, #4]
 800d0c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	6022      	str	r2, [r4, #0]
 800d0cc:	9303      	str	r3, [sp, #12]
 800d0ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800d0d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d0d4:	ab09      	add	r3, sp, #36	@ 0x24
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	6861      	ldr	r1, [r4, #4]
 800d0da:	ec49 8b10 	vmov	d0, r8, r9
 800d0de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f7ff fed7 	bl	800ce96 <__cvt>
 800d0e8:	9b06      	ldr	r3, [sp, #24]
 800d0ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0ec:	2b47      	cmp	r3, #71	@ 0x47
 800d0ee:	4680      	mov	r8, r0
 800d0f0:	d129      	bne.n	800d146 <_printf_float+0x172>
 800d0f2:	1cc8      	adds	r0, r1, #3
 800d0f4:	db02      	blt.n	800d0fc <_printf_float+0x128>
 800d0f6:	6863      	ldr	r3, [r4, #4]
 800d0f8:	4299      	cmp	r1, r3
 800d0fa:	dd41      	ble.n	800d180 <_printf_float+0x1ac>
 800d0fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800d100:	fa5f fa8a 	uxtb.w	sl, sl
 800d104:	3901      	subs	r1, #1
 800d106:	4652      	mov	r2, sl
 800d108:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d10c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d10e:	f7ff ff27 	bl	800cf60 <__exponent>
 800d112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d114:	1813      	adds	r3, r2, r0
 800d116:	2a01      	cmp	r2, #1
 800d118:	4681      	mov	r9, r0
 800d11a:	6123      	str	r3, [r4, #16]
 800d11c:	dc02      	bgt.n	800d124 <_printf_float+0x150>
 800d11e:	6822      	ldr	r2, [r4, #0]
 800d120:	07d2      	lsls	r2, r2, #31
 800d122:	d501      	bpl.n	800d128 <_printf_float+0x154>
 800d124:	3301      	adds	r3, #1
 800d126:	6123      	str	r3, [r4, #16]
 800d128:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d0a2      	beq.n	800d076 <_printf_float+0xa2>
 800d130:	232d      	movs	r3, #45	@ 0x2d
 800d132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d136:	e79e      	b.n	800d076 <_printf_float+0xa2>
 800d138:	9a06      	ldr	r2, [sp, #24]
 800d13a:	2a47      	cmp	r2, #71	@ 0x47
 800d13c:	d1c2      	bne.n	800d0c4 <_printf_float+0xf0>
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1c0      	bne.n	800d0c4 <_printf_float+0xf0>
 800d142:	2301      	movs	r3, #1
 800d144:	e7bd      	b.n	800d0c2 <_printf_float+0xee>
 800d146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d14a:	d9db      	bls.n	800d104 <_printf_float+0x130>
 800d14c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d150:	d118      	bne.n	800d184 <_printf_float+0x1b0>
 800d152:	2900      	cmp	r1, #0
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	dd0b      	ble.n	800d170 <_printf_float+0x19c>
 800d158:	6121      	str	r1, [r4, #16]
 800d15a:	b913      	cbnz	r3, 800d162 <_printf_float+0x18e>
 800d15c:	6822      	ldr	r2, [r4, #0]
 800d15e:	07d0      	lsls	r0, r2, #31
 800d160:	d502      	bpl.n	800d168 <_printf_float+0x194>
 800d162:	3301      	adds	r3, #1
 800d164:	440b      	add	r3, r1
 800d166:	6123      	str	r3, [r4, #16]
 800d168:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d16a:	f04f 0900 	mov.w	r9, #0
 800d16e:	e7db      	b.n	800d128 <_printf_float+0x154>
 800d170:	b913      	cbnz	r3, 800d178 <_printf_float+0x1a4>
 800d172:	6822      	ldr	r2, [r4, #0]
 800d174:	07d2      	lsls	r2, r2, #31
 800d176:	d501      	bpl.n	800d17c <_printf_float+0x1a8>
 800d178:	3302      	adds	r3, #2
 800d17a:	e7f4      	b.n	800d166 <_printf_float+0x192>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e7f2      	b.n	800d166 <_printf_float+0x192>
 800d180:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d186:	4299      	cmp	r1, r3
 800d188:	db05      	blt.n	800d196 <_printf_float+0x1c2>
 800d18a:	6823      	ldr	r3, [r4, #0]
 800d18c:	6121      	str	r1, [r4, #16]
 800d18e:	07d8      	lsls	r0, r3, #31
 800d190:	d5ea      	bpl.n	800d168 <_printf_float+0x194>
 800d192:	1c4b      	adds	r3, r1, #1
 800d194:	e7e7      	b.n	800d166 <_printf_float+0x192>
 800d196:	2900      	cmp	r1, #0
 800d198:	bfd4      	ite	le
 800d19a:	f1c1 0202 	rsble	r2, r1, #2
 800d19e:	2201      	movgt	r2, #1
 800d1a0:	4413      	add	r3, r2
 800d1a2:	e7e0      	b.n	800d166 <_printf_float+0x192>
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	055a      	lsls	r2, r3, #21
 800d1a8:	d407      	bmi.n	800d1ba <_printf_float+0x1e6>
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d12b      	bne.n	800d210 <_printf_float+0x23c>
 800d1b8:	e767      	b.n	800d08a <_printf_float+0xb6>
 800d1ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1be:	f240 80dd 	bls.w	800d37c <_printf_float+0x3a8>
 800d1c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f7f3 fc9d 	bl	8000b08 <__aeabi_dcmpeq>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d033      	beq.n	800d23a <_printf_float+0x266>
 800d1d2:	4a37      	ldr	r2, [pc, #220]	@ (800d2b0 <_printf_float+0x2dc>)
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	4628      	mov	r0, r5
 800d1da:	47b8      	blx	r7
 800d1dc:	3001      	adds	r0, #1
 800d1de:	f43f af54 	beq.w	800d08a <_printf_float+0xb6>
 800d1e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d1e6:	4543      	cmp	r3, r8
 800d1e8:	db02      	blt.n	800d1f0 <_printf_float+0x21c>
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	07d8      	lsls	r0, r3, #31
 800d1ee:	d50f      	bpl.n	800d210 <_printf_float+0x23c>
 800d1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1f4:	4631      	mov	r1, r6
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	47b8      	blx	r7
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	f43f af45 	beq.w	800d08a <_printf_float+0xb6>
 800d200:	f04f 0900 	mov.w	r9, #0
 800d204:	f108 38ff 	add.w	r8, r8, #4294967295
 800d208:	f104 0a1a 	add.w	sl, r4, #26
 800d20c:	45c8      	cmp	r8, r9
 800d20e:	dc09      	bgt.n	800d224 <_printf_float+0x250>
 800d210:	6823      	ldr	r3, [r4, #0]
 800d212:	079b      	lsls	r3, r3, #30
 800d214:	f100 8103 	bmi.w	800d41e <_printf_float+0x44a>
 800d218:	68e0      	ldr	r0, [r4, #12]
 800d21a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d21c:	4298      	cmp	r0, r3
 800d21e:	bfb8      	it	lt
 800d220:	4618      	movlt	r0, r3
 800d222:	e734      	b.n	800d08e <_printf_float+0xba>
 800d224:	2301      	movs	r3, #1
 800d226:	4652      	mov	r2, sl
 800d228:	4631      	mov	r1, r6
 800d22a:	4628      	mov	r0, r5
 800d22c:	47b8      	blx	r7
 800d22e:	3001      	adds	r0, #1
 800d230:	f43f af2b 	beq.w	800d08a <_printf_float+0xb6>
 800d234:	f109 0901 	add.w	r9, r9, #1
 800d238:	e7e8      	b.n	800d20c <_printf_float+0x238>
 800d23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	dc39      	bgt.n	800d2b4 <_printf_float+0x2e0>
 800d240:	4a1b      	ldr	r2, [pc, #108]	@ (800d2b0 <_printf_float+0x2dc>)
 800d242:	2301      	movs	r3, #1
 800d244:	4631      	mov	r1, r6
 800d246:	4628      	mov	r0, r5
 800d248:	47b8      	blx	r7
 800d24a:	3001      	adds	r0, #1
 800d24c:	f43f af1d 	beq.w	800d08a <_printf_float+0xb6>
 800d250:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d254:	ea59 0303 	orrs.w	r3, r9, r3
 800d258:	d102      	bne.n	800d260 <_printf_float+0x28c>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	07d9      	lsls	r1, r3, #31
 800d25e:	d5d7      	bpl.n	800d210 <_printf_float+0x23c>
 800d260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d264:	4631      	mov	r1, r6
 800d266:	4628      	mov	r0, r5
 800d268:	47b8      	blx	r7
 800d26a:	3001      	adds	r0, #1
 800d26c:	f43f af0d 	beq.w	800d08a <_printf_float+0xb6>
 800d270:	f04f 0a00 	mov.w	sl, #0
 800d274:	f104 0b1a 	add.w	fp, r4, #26
 800d278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27a:	425b      	negs	r3, r3
 800d27c:	4553      	cmp	r3, sl
 800d27e:	dc01      	bgt.n	800d284 <_printf_float+0x2b0>
 800d280:	464b      	mov	r3, r9
 800d282:	e793      	b.n	800d1ac <_printf_float+0x1d8>
 800d284:	2301      	movs	r3, #1
 800d286:	465a      	mov	r2, fp
 800d288:	4631      	mov	r1, r6
 800d28a:	4628      	mov	r0, r5
 800d28c:	47b8      	blx	r7
 800d28e:	3001      	adds	r0, #1
 800d290:	f43f aefb 	beq.w	800d08a <_printf_float+0xb6>
 800d294:	f10a 0a01 	add.w	sl, sl, #1
 800d298:	e7ee      	b.n	800d278 <_printf_float+0x2a4>
 800d29a:	bf00      	nop
 800d29c:	7fefffff 	.word	0x7fefffff
 800d2a0:	08012d38 	.word	0x08012d38
 800d2a4:	08012d34 	.word	0x08012d34
 800d2a8:	08012d40 	.word	0x08012d40
 800d2ac:	08012d3c 	.word	0x08012d3c
 800d2b0:	08012d44 	.word	0x08012d44
 800d2b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2ba:	4553      	cmp	r3, sl
 800d2bc:	bfa8      	it	ge
 800d2be:	4653      	movge	r3, sl
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	4699      	mov	r9, r3
 800d2c4:	dc36      	bgt.n	800d334 <_printf_float+0x360>
 800d2c6:	f04f 0b00 	mov.w	fp, #0
 800d2ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2ce:	f104 021a 	add.w	r2, r4, #26
 800d2d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2d4:	9306      	str	r3, [sp, #24]
 800d2d6:	eba3 0309 	sub.w	r3, r3, r9
 800d2da:	455b      	cmp	r3, fp
 800d2dc:	dc31      	bgt.n	800d342 <_printf_float+0x36e>
 800d2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e0:	459a      	cmp	sl, r3
 800d2e2:	dc3a      	bgt.n	800d35a <_printf_float+0x386>
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	07da      	lsls	r2, r3, #31
 800d2e8:	d437      	bmi.n	800d35a <_printf_float+0x386>
 800d2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ec:	ebaa 0903 	sub.w	r9, sl, r3
 800d2f0:	9b06      	ldr	r3, [sp, #24]
 800d2f2:	ebaa 0303 	sub.w	r3, sl, r3
 800d2f6:	4599      	cmp	r9, r3
 800d2f8:	bfa8      	it	ge
 800d2fa:	4699      	movge	r9, r3
 800d2fc:	f1b9 0f00 	cmp.w	r9, #0
 800d300:	dc33      	bgt.n	800d36a <_printf_float+0x396>
 800d302:	f04f 0800 	mov.w	r8, #0
 800d306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d30a:	f104 0b1a 	add.w	fp, r4, #26
 800d30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d310:	ebaa 0303 	sub.w	r3, sl, r3
 800d314:	eba3 0309 	sub.w	r3, r3, r9
 800d318:	4543      	cmp	r3, r8
 800d31a:	f77f af79 	ble.w	800d210 <_printf_float+0x23c>
 800d31e:	2301      	movs	r3, #1
 800d320:	465a      	mov	r2, fp
 800d322:	4631      	mov	r1, r6
 800d324:	4628      	mov	r0, r5
 800d326:	47b8      	blx	r7
 800d328:	3001      	adds	r0, #1
 800d32a:	f43f aeae 	beq.w	800d08a <_printf_float+0xb6>
 800d32e:	f108 0801 	add.w	r8, r8, #1
 800d332:	e7ec      	b.n	800d30e <_printf_float+0x33a>
 800d334:	4642      	mov	r2, r8
 800d336:	4631      	mov	r1, r6
 800d338:	4628      	mov	r0, r5
 800d33a:	47b8      	blx	r7
 800d33c:	3001      	adds	r0, #1
 800d33e:	d1c2      	bne.n	800d2c6 <_printf_float+0x2f2>
 800d340:	e6a3      	b.n	800d08a <_printf_float+0xb6>
 800d342:	2301      	movs	r3, #1
 800d344:	4631      	mov	r1, r6
 800d346:	4628      	mov	r0, r5
 800d348:	9206      	str	r2, [sp, #24]
 800d34a:	47b8      	blx	r7
 800d34c:	3001      	adds	r0, #1
 800d34e:	f43f ae9c 	beq.w	800d08a <_printf_float+0xb6>
 800d352:	9a06      	ldr	r2, [sp, #24]
 800d354:	f10b 0b01 	add.w	fp, fp, #1
 800d358:	e7bb      	b.n	800d2d2 <_printf_float+0x2fe>
 800d35a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d35e:	4631      	mov	r1, r6
 800d360:	4628      	mov	r0, r5
 800d362:	47b8      	blx	r7
 800d364:	3001      	adds	r0, #1
 800d366:	d1c0      	bne.n	800d2ea <_printf_float+0x316>
 800d368:	e68f      	b.n	800d08a <_printf_float+0xb6>
 800d36a:	9a06      	ldr	r2, [sp, #24]
 800d36c:	464b      	mov	r3, r9
 800d36e:	4442      	add	r2, r8
 800d370:	4631      	mov	r1, r6
 800d372:	4628      	mov	r0, r5
 800d374:	47b8      	blx	r7
 800d376:	3001      	adds	r0, #1
 800d378:	d1c3      	bne.n	800d302 <_printf_float+0x32e>
 800d37a:	e686      	b.n	800d08a <_printf_float+0xb6>
 800d37c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d380:	f1ba 0f01 	cmp.w	sl, #1
 800d384:	dc01      	bgt.n	800d38a <_printf_float+0x3b6>
 800d386:	07db      	lsls	r3, r3, #31
 800d388:	d536      	bpl.n	800d3f8 <_printf_float+0x424>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4642      	mov	r2, r8
 800d38e:	4631      	mov	r1, r6
 800d390:	4628      	mov	r0, r5
 800d392:	47b8      	blx	r7
 800d394:	3001      	adds	r0, #1
 800d396:	f43f ae78 	beq.w	800d08a <_printf_float+0xb6>
 800d39a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b8      	blx	r7
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	f43f ae70 	beq.w	800d08a <_printf_float+0xb6>
 800d3aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3b6:	f7f3 fba7 	bl	8000b08 <__aeabi_dcmpeq>
 800d3ba:	b9c0      	cbnz	r0, 800d3ee <_printf_float+0x41a>
 800d3bc:	4653      	mov	r3, sl
 800d3be:	f108 0201 	add.w	r2, r8, #1
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	47b8      	blx	r7
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	d10c      	bne.n	800d3e6 <_printf_float+0x412>
 800d3cc:	e65d      	b.n	800d08a <_printf_float+0xb6>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	465a      	mov	r2, fp
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	f43f ae56 	beq.w	800d08a <_printf_float+0xb6>
 800d3de:	f108 0801 	add.w	r8, r8, #1
 800d3e2:	45d0      	cmp	r8, sl
 800d3e4:	dbf3      	blt.n	800d3ce <_printf_float+0x3fa>
 800d3e6:	464b      	mov	r3, r9
 800d3e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d3ec:	e6df      	b.n	800d1ae <_printf_float+0x1da>
 800d3ee:	f04f 0800 	mov.w	r8, #0
 800d3f2:	f104 0b1a 	add.w	fp, r4, #26
 800d3f6:	e7f4      	b.n	800d3e2 <_printf_float+0x40e>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	4642      	mov	r2, r8
 800d3fc:	e7e1      	b.n	800d3c2 <_printf_float+0x3ee>
 800d3fe:	2301      	movs	r3, #1
 800d400:	464a      	mov	r2, r9
 800d402:	4631      	mov	r1, r6
 800d404:	4628      	mov	r0, r5
 800d406:	47b8      	blx	r7
 800d408:	3001      	adds	r0, #1
 800d40a:	f43f ae3e 	beq.w	800d08a <_printf_float+0xb6>
 800d40e:	f108 0801 	add.w	r8, r8, #1
 800d412:	68e3      	ldr	r3, [r4, #12]
 800d414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d416:	1a5b      	subs	r3, r3, r1
 800d418:	4543      	cmp	r3, r8
 800d41a:	dcf0      	bgt.n	800d3fe <_printf_float+0x42a>
 800d41c:	e6fc      	b.n	800d218 <_printf_float+0x244>
 800d41e:	f04f 0800 	mov.w	r8, #0
 800d422:	f104 0919 	add.w	r9, r4, #25
 800d426:	e7f4      	b.n	800d412 <_printf_float+0x43e>

0800d428 <_printf_common>:
 800d428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d42c:	4616      	mov	r6, r2
 800d42e:	4698      	mov	r8, r3
 800d430:	688a      	ldr	r2, [r1, #8]
 800d432:	690b      	ldr	r3, [r1, #16]
 800d434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d438:	4293      	cmp	r3, r2
 800d43a:	bfb8      	it	lt
 800d43c:	4613      	movlt	r3, r2
 800d43e:	6033      	str	r3, [r6, #0]
 800d440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d444:	4607      	mov	r7, r0
 800d446:	460c      	mov	r4, r1
 800d448:	b10a      	cbz	r2, 800d44e <_printf_common+0x26>
 800d44a:	3301      	adds	r3, #1
 800d44c:	6033      	str	r3, [r6, #0]
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	0699      	lsls	r1, r3, #26
 800d452:	bf42      	ittt	mi
 800d454:	6833      	ldrmi	r3, [r6, #0]
 800d456:	3302      	addmi	r3, #2
 800d458:	6033      	strmi	r3, [r6, #0]
 800d45a:	6825      	ldr	r5, [r4, #0]
 800d45c:	f015 0506 	ands.w	r5, r5, #6
 800d460:	d106      	bne.n	800d470 <_printf_common+0x48>
 800d462:	f104 0a19 	add.w	sl, r4, #25
 800d466:	68e3      	ldr	r3, [r4, #12]
 800d468:	6832      	ldr	r2, [r6, #0]
 800d46a:	1a9b      	subs	r3, r3, r2
 800d46c:	42ab      	cmp	r3, r5
 800d46e:	dc26      	bgt.n	800d4be <_printf_common+0x96>
 800d470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d474:	6822      	ldr	r2, [r4, #0]
 800d476:	3b00      	subs	r3, #0
 800d478:	bf18      	it	ne
 800d47a:	2301      	movne	r3, #1
 800d47c:	0692      	lsls	r2, r2, #26
 800d47e:	d42b      	bmi.n	800d4d8 <_printf_common+0xb0>
 800d480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d484:	4641      	mov	r1, r8
 800d486:	4638      	mov	r0, r7
 800d488:	47c8      	blx	r9
 800d48a:	3001      	adds	r0, #1
 800d48c:	d01e      	beq.n	800d4cc <_printf_common+0xa4>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	6922      	ldr	r2, [r4, #16]
 800d492:	f003 0306 	and.w	r3, r3, #6
 800d496:	2b04      	cmp	r3, #4
 800d498:	bf02      	ittt	eq
 800d49a:	68e5      	ldreq	r5, [r4, #12]
 800d49c:	6833      	ldreq	r3, [r6, #0]
 800d49e:	1aed      	subeq	r5, r5, r3
 800d4a0:	68a3      	ldr	r3, [r4, #8]
 800d4a2:	bf0c      	ite	eq
 800d4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4a8:	2500      	movne	r5, #0
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	bfc4      	itt	gt
 800d4ae:	1a9b      	subgt	r3, r3, r2
 800d4b0:	18ed      	addgt	r5, r5, r3
 800d4b2:	2600      	movs	r6, #0
 800d4b4:	341a      	adds	r4, #26
 800d4b6:	42b5      	cmp	r5, r6
 800d4b8:	d11a      	bne.n	800d4f0 <_printf_common+0xc8>
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	e008      	b.n	800d4d0 <_printf_common+0xa8>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4652      	mov	r2, sl
 800d4c2:	4641      	mov	r1, r8
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	47c8      	blx	r9
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	d103      	bne.n	800d4d4 <_printf_common+0xac>
 800d4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4d4:	3501      	adds	r5, #1
 800d4d6:	e7c6      	b.n	800d466 <_printf_common+0x3e>
 800d4d8:	18e1      	adds	r1, r4, r3
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	2030      	movs	r0, #48	@ 0x30
 800d4de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4e2:	4422      	add	r2, r4
 800d4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4ec:	3302      	adds	r3, #2
 800d4ee:	e7c7      	b.n	800d480 <_printf_common+0x58>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	4622      	mov	r2, r4
 800d4f4:	4641      	mov	r1, r8
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	47c8      	blx	r9
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	d0e6      	beq.n	800d4cc <_printf_common+0xa4>
 800d4fe:	3601      	adds	r6, #1
 800d500:	e7d9      	b.n	800d4b6 <_printf_common+0x8e>
	...

0800d504 <_printf_i>:
 800d504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d508:	7e0f      	ldrb	r7, [r1, #24]
 800d50a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d50c:	2f78      	cmp	r7, #120	@ 0x78
 800d50e:	4691      	mov	r9, r2
 800d510:	4680      	mov	r8, r0
 800d512:	460c      	mov	r4, r1
 800d514:	469a      	mov	sl, r3
 800d516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d51a:	d807      	bhi.n	800d52c <_printf_i+0x28>
 800d51c:	2f62      	cmp	r7, #98	@ 0x62
 800d51e:	d80a      	bhi.n	800d536 <_printf_i+0x32>
 800d520:	2f00      	cmp	r7, #0
 800d522:	f000 80d1 	beq.w	800d6c8 <_printf_i+0x1c4>
 800d526:	2f58      	cmp	r7, #88	@ 0x58
 800d528:	f000 80b8 	beq.w	800d69c <_printf_i+0x198>
 800d52c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d534:	e03a      	b.n	800d5ac <_printf_i+0xa8>
 800d536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d53a:	2b15      	cmp	r3, #21
 800d53c:	d8f6      	bhi.n	800d52c <_printf_i+0x28>
 800d53e:	a101      	add	r1, pc, #4	@ (adr r1, 800d544 <_printf_i+0x40>)
 800d540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d544:	0800d59d 	.word	0x0800d59d
 800d548:	0800d5b1 	.word	0x0800d5b1
 800d54c:	0800d52d 	.word	0x0800d52d
 800d550:	0800d52d 	.word	0x0800d52d
 800d554:	0800d52d 	.word	0x0800d52d
 800d558:	0800d52d 	.word	0x0800d52d
 800d55c:	0800d5b1 	.word	0x0800d5b1
 800d560:	0800d52d 	.word	0x0800d52d
 800d564:	0800d52d 	.word	0x0800d52d
 800d568:	0800d52d 	.word	0x0800d52d
 800d56c:	0800d52d 	.word	0x0800d52d
 800d570:	0800d6af 	.word	0x0800d6af
 800d574:	0800d5db 	.word	0x0800d5db
 800d578:	0800d669 	.word	0x0800d669
 800d57c:	0800d52d 	.word	0x0800d52d
 800d580:	0800d52d 	.word	0x0800d52d
 800d584:	0800d6d1 	.word	0x0800d6d1
 800d588:	0800d52d 	.word	0x0800d52d
 800d58c:	0800d5db 	.word	0x0800d5db
 800d590:	0800d52d 	.word	0x0800d52d
 800d594:	0800d52d 	.word	0x0800d52d
 800d598:	0800d671 	.word	0x0800d671
 800d59c:	6833      	ldr	r3, [r6, #0]
 800d59e:	1d1a      	adds	r2, r3, #4
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6032      	str	r2, [r6, #0]
 800d5a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e09c      	b.n	800d6ea <_printf_i+0x1e6>
 800d5b0:	6833      	ldr	r3, [r6, #0]
 800d5b2:	6820      	ldr	r0, [r4, #0]
 800d5b4:	1d19      	adds	r1, r3, #4
 800d5b6:	6031      	str	r1, [r6, #0]
 800d5b8:	0606      	lsls	r6, r0, #24
 800d5ba:	d501      	bpl.n	800d5c0 <_printf_i+0xbc>
 800d5bc:	681d      	ldr	r5, [r3, #0]
 800d5be:	e003      	b.n	800d5c8 <_printf_i+0xc4>
 800d5c0:	0645      	lsls	r5, r0, #25
 800d5c2:	d5fb      	bpl.n	800d5bc <_printf_i+0xb8>
 800d5c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5c8:	2d00      	cmp	r5, #0
 800d5ca:	da03      	bge.n	800d5d4 <_printf_i+0xd0>
 800d5cc:	232d      	movs	r3, #45	@ 0x2d
 800d5ce:	426d      	negs	r5, r5
 800d5d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5d4:	4858      	ldr	r0, [pc, #352]	@ (800d738 <_printf_i+0x234>)
 800d5d6:	230a      	movs	r3, #10
 800d5d8:	e011      	b.n	800d5fe <_printf_i+0xfa>
 800d5da:	6821      	ldr	r1, [r4, #0]
 800d5dc:	6833      	ldr	r3, [r6, #0]
 800d5de:	0608      	lsls	r0, r1, #24
 800d5e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5e4:	d402      	bmi.n	800d5ec <_printf_i+0xe8>
 800d5e6:	0649      	lsls	r1, r1, #25
 800d5e8:	bf48      	it	mi
 800d5ea:	b2ad      	uxthmi	r5, r5
 800d5ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5ee:	4852      	ldr	r0, [pc, #328]	@ (800d738 <_printf_i+0x234>)
 800d5f0:	6033      	str	r3, [r6, #0]
 800d5f2:	bf14      	ite	ne
 800d5f4:	230a      	movne	r3, #10
 800d5f6:	2308      	moveq	r3, #8
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d5fe:	6866      	ldr	r6, [r4, #4]
 800d600:	60a6      	str	r6, [r4, #8]
 800d602:	2e00      	cmp	r6, #0
 800d604:	db05      	blt.n	800d612 <_printf_i+0x10e>
 800d606:	6821      	ldr	r1, [r4, #0]
 800d608:	432e      	orrs	r6, r5
 800d60a:	f021 0104 	bic.w	r1, r1, #4
 800d60e:	6021      	str	r1, [r4, #0]
 800d610:	d04b      	beq.n	800d6aa <_printf_i+0x1a6>
 800d612:	4616      	mov	r6, r2
 800d614:	fbb5 f1f3 	udiv	r1, r5, r3
 800d618:	fb03 5711 	mls	r7, r3, r1, r5
 800d61c:	5dc7      	ldrb	r7, [r0, r7]
 800d61e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d622:	462f      	mov	r7, r5
 800d624:	42bb      	cmp	r3, r7
 800d626:	460d      	mov	r5, r1
 800d628:	d9f4      	bls.n	800d614 <_printf_i+0x110>
 800d62a:	2b08      	cmp	r3, #8
 800d62c:	d10b      	bne.n	800d646 <_printf_i+0x142>
 800d62e:	6823      	ldr	r3, [r4, #0]
 800d630:	07df      	lsls	r7, r3, #31
 800d632:	d508      	bpl.n	800d646 <_printf_i+0x142>
 800d634:	6923      	ldr	r3, [r4, #16]
 800d636:	6861      	ldr	r1, [r4, #4]
 800d638:	4299      	cmp	r1, r3
 800d63a:	bfde      	ittt	le
 800d63c:	2330      	movle	r3, #48	@ 0x30
 800d63e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d642:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d646:	1b92      	subs	r2, r2, r6
 800d648:	6122      	str	r2, [r4, #16]
 800d64a:	f8cd a000 	str.w	sl, [sp]
 800d64e:	464b      	mov	r3, r9
 800d650:	aa03      	add	r2, sp, #12
 800d652:	4621      	mov	r1, r4
 800d654:	4640      	mov	r0, r8
 800d656:	f7ff fee7 	bl	800d428 <_printf_common>
 800d65a:	3001      	adds	r0, #1
 800d65c:	d14a      	bne.n	800d6f4 <_printf_i+0x1f0>
 800d65e:	f04f 30ff 	mov.w	r0, #4294967295
 800d662:	b004      	add	sp, #16
 800d664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	f043 0320 	orr.w	r3, r3, #32
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	4832      	ldr	r0, [pc, #200]	@ (800d73c <_printf_i+0x238>)
 800d672:	2778      	movs	r7, #120	@ 0x78
 800d674:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	6831      	ldr	r1, [r6, #0]
 800d67c:	061f      	lsls	r7, r3, #24
 800d67e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d682:	d402      	bmi.n	800d68a <_printf_i+0x186>
 800d684:	065f      	lsls	r7, r3, #25
 800d686:	bf48      	it	mi
 800d688:	b2ad      	uxthmi	r5, r5
 800d68a:	6031      	str	r1, [r6, #0]
 800d68c:	07d9      	lsls	r1, r3, #31
 800d68e:	bf44      	itt	mi
 800d690:	f043 0320 	orrmi.w	r3, r3, #32
 800d694:	6023      	strmi	r3, [r4, #0]
 800d696:	b11d      	cbz	r5, 800d6a0 <_printf_i+0x19c>
 800d698:	2310      	movs	r3, #16
 800d69a:	e7ad      	b.n	800d5f8 <_printf_i+0xf4>
 800d69c:	4826      	ldr	r0, [pc, #152]	@ (800d738 <_printf_i+0x234>)
 800d69e:	e7e9      	b.n	800d674 <_printf_i+0x170>
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	f023 0320 	bic.w	r3, r3, #32
 800d6a6:	6023      	str	r3, [r4, #0]
 800d6a8:	e7f6      	b.n	800d698 <_printf_i+0x194>
 800d6aa:	4616      	mov	r6, r2
 800d6ac:	e7bd      	b.n	800d62a <_printf_i+0x126>
 800d6ae:	6833      	ldr	r3, [r6, #0]
 800d6b0:	6825      	ldr	r5, [r4, #0]
 800d6b2:	6961      	ldr	r1, [r4, #20]
 800d6b4:	1d18      	adds	r0, r3, #4
 800d6b6:	6030      	str	r0, [r6, #0]
 800d6b8:	062e      	lsls	r6, r5, #24
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	d501      	bpl.n	800d6c2 <_printf_i+0x1be>
 800d6be:	6019      	str	r1, [r3, #0]
 800d6c0:	e002      	b.n	800d6c8 <_printf_i+0x1c4>
 800d6c2:	0668      	lsls	r0, r5, #25
 800d6c4:	d5fb      	bpl.n	800d6be <_printf_i+0x1ba>
 800d6c6:	8019      	strh	r1, [r3, #0]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	4616      	mov	r6, r2
 800d6ce:	e7bc      	b.n	800d64a <_printf_i+0x146>
 800d6d0:	6833      	ldr	r3, [r6, #0]
 800d6d2:	1d1a      	adds	r2, r3, #4
 800d6d4:	6032      	str	r2, [r6, #0]
 800d6d6:	681e      	ldr	r6, [r3, #0]
 800d6d8:	6862      	ldr	r2, [r4, #4]
 800d6da:	2100      	movs	r1, #0
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f7f2 fd97 	bl	8000210 <memchr>
 800d6e2:	b108      	cbz	r0, 800d6e8 <_printf_i+0x1e4>
 800d6e4:	1b80      	subs	r0, r0, r6
 800d6e6:	6060      	str	r0, [r4, #4]
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	6123      	str	r3, [r4, #16]
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6f2:	e7aa      	b.n	800d64a <_printf_i+0x146>
 800d6f4:	6923      	ldr	r3, [r4, #16]
 800d6f6:	4632      	mov	r2, r6
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	4640      	mov	r0, r8
 800d6fc:	47d0      	blx	sl
 800d6fe:	3001      	adds	r0, #1
 800d700:	d0ad      	beq.n	800d65e <_printf_i+0x15a>
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	079b      	lsls	r3, r3, #30
 800d706:	d413      	bmi.n	800d730 <_printf_i+0x22c>
 800d708:	68e0      	ldr	r0, [r4, #12]
 800d70a:	9b03      	ldr	r3, [sp, #12]
 800d70c:	4298      	cmp	r0, r3
 800d70e:	bfb8      	it	lt
 800d710:	4618      	movlt	r0, r3
 800d712:	e7a6      	b.n	800d662 <_printf_i+0x15e>
 800d714:	2301      	movs	r3, #1
 800d716:	4632      	mov	r2, r6
 800d718:	4649      	mov	r1, r9
 800d71a:	4640      	mov	r0, r8
 800d71c:	47d0      	blx	sl
 800d71e:	3001      	adds	r0, #1
 800d720:	d09d      	beq.n	800d65e <_printf_i+0x15a>
 800d722:	3501      	adds	r5, #1
 800d724:	68e3      	ldr	r3, [r4, #12]
 800d726:	9903      	ldr	r1, [sp, #12]
 800d728:	1a5b      	subs	r3, r3, r1
 800d72a:	42ab      	cmp	r3, r5
 800d72c:	dcf2      	bgt.n	800d714 <_printf_i+0x210>
 800d72e:	e7eb      	b.n	800d708 <_printf_i+0x204>
 800d730:	2500      	movs	r5, #0
 800d732:	f104 0619 	add.w	r6, r4, #25
 800d736:	e7f5      	b.n	800d724 <_printf_i+0x220>
 800d738:	08012d46 	.word	0x08012d46
 800d73c:	08012d57 	.word	0x08012d57

0800d740 <std>:
 800d740:	2300      	movs	r3, #0
 800d742:	b510      	push	{r4, lr}
 800d744:	4604      	mov	r4, r0
 800d746:	e9c0 3300 	strd	r3, r3, [r0]
 800d74a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d74e:	6083      	str	r3, [r0, #8]
 800d750:	8181      	strh	r1, [r0, #12]
 800d752:	6643      	str	r3, [r0, #100]	@ 0x64
 800d754:	81c2      	strh	r2, [r0, #14]
 800d756:	6183      	str	r3, [r0, #24]
 800d758:	4619      	mov	r1, r3
 800d75a:	2208      	movs	r2, #8
 800d75c:	305c      	adds	r0, #92	@ 0x5c
 800d75e:	f000 f94c 	bl	800d9fa <memset>
 800d762:	4b0d      	ldr	r3, [pc, #52]	@ (800d798 <std+0x58>)
 800d764:	6263      	str	r3, [r4, #36]	@ 0x24
 800d766:	4b0d      	ldr	r3, [pc, #52]	@ (800d79c <std+0x5c>)
 800d768:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d76a:	4b0d      	ldr	r3, [pc, #52]	@ (800d7a0 <std+0x60>)
 800d76c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d76e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7a4 <std+0x64>)
 800d770:	6323      	str	r3, [r4, #48]	@ 0x30
 800d772:	4b0d      	ldr	r3, [pc, #52]	@ (800d7a8 <std+0x68>)
 800d774:	6224      	str	r4, [r4, #32]
 800d776:	429c      	cmp	r4, r3
 800d778:	d006      	beq.n	800d788 <std+0x48>
 800d77a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d77e:	4294      	cmp	r4, r2
 800d780:	d002      	beq.n	800d788 <std+0x48>
 800d782:	33d0      	adds	r3, #208	@ 0xd0
 800d784:	429c      	cmp	r4, r3
 800d786:	d105      	bne.n	800d794 <std+0x54>
 800d788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d790:	f000 b9c2 	b.w	800db18 <__retarget_lock_init_recursive>
 800d794:	bd10      	pop	{r4, pc}
 800d796:	bf00      	nop
 800d798:	0800d975 	.word	0x0800d975
 800d79c:	0800d997 	.word	0x0800d997
 800d7a0:	0800d9cf 	.word	0x0800d9cf
 800d7a4:	0800d9f3 	.word	0x0800d9f3
 800d7a8:	20000e00 	.word	0x20000e00

0800d7ac <stdio_exit_handler>:
 800d7ac:	4a02      	ldr	r2, [pc, #8]	@ (800d7b8 <stdio_exit_handler+0xc>)
 800d7ae:	4903      	ldr	r1, [pc, #12]	@ (800d7bc <stdio_exit_handler+0x10>)
 800d7b0:	4803      	ldr	r0, [pc, #12]	@ (800d7c0 <stdio_exit_handler+0x14>)
 800d7b2:	f000 b869 	b.w	800d888 <_fwalk_sglue>
 800d7b6:	bf00      	nop
 800d7b8:	200000bc 	.word	0x200000bc
 800d7bc:	0800f49d 	.word	0x0800f49d
 800d7c0:	200000cc 	.word	0x200000cc

0800d7c4 <cleanup_stdio>:
 800d7c4:	6841      	ldr	r1, [r0, #4]
 800d7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d7f8 <cleanup_stdio+0x34>)
 800d7c8:	4299      	cmp	r1, r3
 800d7ca:	b510      	push	{r4, lr}
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	d001      	beq.n	800d7d4 <cleanup_stdio+0x10>
 800d7d0:	f001 fe64 	bl	800f49c <_fflush_r>
 800d7d4:	68a1      	ldr	r1, [r4, #8]
 800d7d6:	4b09      	ldr	r3, [pc, #36]	@ (800d7fc <cleanup_stdio+0x38>)
 800d7d8:	4299      	cmp	r1, r3
 800d7da:	d002      	beq.n	800d7e2 <cleanup_stdio+0x1e>
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f001 fe5d 	bl	800f49c <_fflush_r>
 800d7e2:	68e1      	ldr	r1, [r4, #12]
 800d7e4:	4b06      	ldr	r3, [pc, #24]	@ (800d800 <cleanup_stdio+0x3c>)
 800d7e6:	4299      	cmp	r1, r3
 800d7e8:	d004      	beq.n	800d7f4 <cleanup_stdio+0x30>
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7f0:	f001 be54 	b.w	800f49c <_fflush_r>
 800d7f4:	bd10      	pop	{r4, pc}
 800d7f6:	bf00      	nop
 800d7f8:	20000e00 	.word	0x20000e00
 800d7fc:	20000e68 	.word	0x20000e68
 800d800:	20000ed0 	.word	0x20000ed0

0800d804 <global_stdio_init.part.0>:
 800d804:	b510      	push	{r4, lr}
 800d806:	4b0b      	ldr	r3, [pc, #44]	@ (800d834 <global_stdio_init.part.0+0x30>)
 800d808:	4c0b      	ldr	r4, [pc, #44]	@ (800d838 <global_stdio_init.part.0+0x34>)
 800d80a:	4a0c      	ldr	r2, [pc, #48]	@ (800d83c <global_stdio_init.part.0+0x38>)
 800d80c:	601a      	str	r2, [r3, #0]
 800d80e:	4620      	mov	r0, r4
 800d810:	2200      	movs	r2, #0
 800d812:	2104      	movs	r1, #4
 800d814:	f7ff ff94 	bl	800d740 <std>
 800d818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d81c:	2201      	movs	r2, #1
 800d81e:	2109      	movs	r1, #9
 800d820:	f7ff ff8e 	bl	800d740 <std>
 800d824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d828:	2202      	movs	r2, #2
 800d82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d82e:	2112      	movs	r1, #18
 800d830:	f7ff bf86 	b.w	800d740 <std>
 800d834:	20000f38 	.word	0x20000f38
 800d838:	20000e00 	.word	0x20000e00
 800d83c:	0800d7ad 	.word	0x0800d7ad

0800d840 <__sfp_lock_acquire>:
 800d840:	4801      	ldr	r0, [pc, #4]	@ (800d848 <__sfp_lock_acquire+0x8>)
 800d842:	f000 b96a 	b.w	800db1a <__retarget_lock_acquire_recursive>
 800d846:	bf00      	nop
 800d848:	20000f41 	.word	0x20000f41

0800d84c <__sfp_lock_release>:
 800d84c:	4801      	ldr	r0, [pc, #4]	@ (800d854 <__sfp_lock_release+0x8>)
 800d84e:	f000 b965 	b.w	800db1c <__retarget_lock_release_recursive>
 800d852:	bf00      	nop
 800d854:	20000f41 	.word	0x20000f41

0800d858 <__sinit>:
 800d858:	b510      	push	{r4, lr}
 800d85a:	4604      	mov	r4, r0
 800d85c:	f7ff fff0 	bl	800d840 <__sfp_lock_acquire>
 800d860:	6a23      	ldr	r3, [r4, #32]
 800d862:	b11b      	cbz	r3, 800d86c <__sinit+0x14>
 800d864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d868:	f7ff bff0 	b.w	800d84c <__sfp_lock_release>
 800d86c:	4b04      	ldr	r3, [pc, #16]	@ (800d880 <__sinit+0x28>)
 800d86e:	6223      	str	r3, [r4, #32]
 800d870:	4b04      	ldr	r3, [pc, #16]	@ (800d884 <__sinit+0x2c>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1f5      	bne.n	800d864 <__sinit+0xc>
 800d878:	f7ff ffc4 	bl	800d804 <global_stdio_init.part.0>
 800d87c:	e7f2      	b.n	800d864 <__sinit+0xc>
 800d87e:	bf00      	nop
 800d880:	0800d7c5 	.word	0x0800d7c5
 800d884:	20000f38 	.word	0x20000f38

0800d888 <_fwalk_sglue>:
 800d888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d88c:	4607      	mov	r7, r0
 800d88e:	4688      	mov	r8, r1
 800d890:	4614      	mov	r4, r2
 800d892:	2600      	movs	r6, #0
 800d894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d898:	f1b9 0901 	subs.w	r9, r9, #1
 800d89c:	d505      	bpl.n	800d8aa <_fwalk_sglue+0x22>
 800d89e:	6824      	ldr	r4, [r4, #0]
 800d8a0:	2c00      	cmp	r4, #0
 800d8a2:	d1f7      	bne.n	800d894 <_fwalk_sglue+0xc>
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d907      	bls.n	800d8c0 <_fwalk_sglue+0x38>
 800d8b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	d003      	beq.n	800d8c0 <_fwalk_sglue+0x38>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	4638      	mov	r0, r7
 800d8bc:	47c0      	blx	r8
 800d8be:	4306      	orrs	r6, r0
 800d8c0:	3568      	adds	r5, #104	@ 0x68
 800d8c2:	e7e9      	b.n	800d898 <_fwalk_sglue+0x10>

0800d8c4 <sniprintf>:
 800d8c4:	b40c      	push	{r2, r3}
 800d8c6:	b530      	push	{r4, r5, lr}
 800d8c8:	4b18      	ldr	r3, [pc, #96]	@ (800d92c <sniprintf+0x68>)
 800d8ca:	1e0c      	subs	r4, r1, #0
 800d8cc:	681d      	ldr	r5, [r3, #0]
 800d8ce:	b09d      	sub	sp, #116	@ 0x74
 800d8d0:	da08      	bge.n	800d8e4 <sniprintf+0x20>
 800d8d2:	238b      	movs	r3, #139	@ 0x8b
 800d8d4:	602b      	str	r3, [r5, #0]
 800d8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8da:	b01d      	add	sp, #116	@ 0x74
 800d8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8e0:	b002      	add	sp, #8
 800d8e2:	4770      	bx	lr
 800d8e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d8e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d8ec:	f04f 0300 	mov.w	r3, #0
 800d8f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d8f2:	bf14      	ite	ne
 800d8f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d8f8:	4623      	moveq	r3, r4
 800d8fa:	9304      	str	r3, [sp, #16]
 800d8fc:	9307      	str	r3, [sp, #28]
 800d8fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d902:	9002      	str	r0, [sp, #8]
 800d904:	9006      	str	r0, [sp, #24]
 800d906:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d90a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d90c:	ab21      	add	r3, sp, #132	@ 0x84
 800d90e:	a902      	add	r1, sp, #8
 800d910:	4628      	mov	r0, r5
 800d912:	9301      	str	r3, [sp, #4]
 800d914:	f001 fc42 	bl	800f19c <_svfiprintf_r>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	bfbc      	itt	lt
 800d91c:	238b      	movlt	r3, #139	@ 0x8b
 800d91e:	602b      	strlt	r3, [r5, #0]
 800d920:	2c00      	cmp	r4, #0
 800d922:	d0da      	beq.n	800d8da <sniprintf+0x16>
 800d924:	9b02      	ldr	r3, [sp, #8]
 800d926:	2200      	movs	r2, #0
 800d928:	701a      	strb	r2, [r3, #0]
 800d92a:	e7d6      	b.n	800d8da <sniprintf+0x16>
 800d92c:	200000c8 	.word	0x200000c8

0800d930 <siprintf>:
 800d930:	b40e      	push	{r1, r2, r3}
 800d932:	b510      	push	{r4, lr}
 800d934:	b09d      	sub	sp, #116	@ 0x74
 800d936:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d938:	9002      	str	r0, [sp, #8]
 800d93a:	9006      	str	r0, [sp, #24]
 800d93c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d940:	480a      	ldr	r0, [pc, #40]	@ (800d96c <siprintf+0x3c>)
 800d942:	9107      	str	r1, [sp, #28]
 800d944:	9104      	str	r1, [sp, #16]
 800d946:	490a      	ldr	r1, [pc, #40]	@ (800d970 <siprintf+0x40>)
 800d948:	f853 2b04 	ldr.w	r2, [r3], #4
 800d94c:	9105      	str	r1, [sp, #20]
 800d94e:	2400      	movs	r4, #0
 800d950:	a902      	add	r1, sp, #8
 800d952:	6800      	ldr	r0, [r0, #0]
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d958:	f001 fc20 	bl	800f19c <_svfiprintf_r>
 800d95c:	9b02      	ldr	r3, [sp, #8]
 800d95e:	701c      	strb	r4, [r3, #0]
 800d960:	b01d      	add	sp, #116	@ 0x74
 800d962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d966:	b003      	add	sp, #12
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	200000c8 	.word	0x200000c8
 800d970:	ffff0208 	.word	0xffff0208

0800d974 <__sread>:
 800d974:	b510      	push	{r4, lr}
 800d976:	460c      	mov	r4, r1
 800d978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d97c:	f000 f87e 	bl	800da7c <_read_r>
 800d980:	2800      	cmp	r0, #0
 800d982:	bfab      	itete	ge
 800d984:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d986:	89a3      	ldrhlt	r3, [r4, #12]
 800d988:	181b      	addge	r3, r3, r0
 800d98a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d98e:	bfac      	ite	ge
 800d990:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d992:	81a3      	strhlt	r3, [r4, #12]
 800d994:	bd10      	pop	{r4, pc}

0800d996 <__swrite>:
 800d996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d99a:	461f      	mov	r7, r3
 800d99c:	898b      	ldrh	r3, [r1, #12]
 800d99e:	05db      	lsls	r3, r3, #23
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	4616      	mov	r6, r2
 800d9a6:	d505      	bpl.n	800d9b4 <__swrite+0x1e>
 800d9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f000 f852 	bl	800da58 <_lseek_r>
 800d9b4:	89a3      	ldrh	r3, [r4, #12]
 800d9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9be:	81a3      	strh	r3, [r4, #12]
 800d9c0:	4632      	mov	r2, r6
 800d9c2:	463b      	mov	r3, r7
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ca:	f000 b869 	b.w	800daa0 <_write_r>

0800d9ce <__sseek>:
 800d9ce:	b510      	push	{r4, lr}
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d6:	f000 f83f 	bl	800da58 <_lseek_r>
 800d9da:	1c43      	adds	r3, r0, #1
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	bf15      	itete	ne
 800d9e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9ea:	81a3      	strheq	r3, [r4, #12]
 800d9ec:	bf18      	it	ne
 800d9ee:	81a3      	strhne	r3, [r4, #12]
 800d9f0:	bd10      	pop	{r4, pc}

0800d9f2 <__sclose>:
 800d9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f6:	f000 b81f 	b.w	800da38 <_close_r>

0800d9fa <memset>:
 800d9fa:	4402      	add	r2, r0
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d100      	bne.n	800da04 <memset+0xa>
 800da02:	4770      	bx	lr
 800da04:	f803 1b01 	strb.w	r1, [r3], #1
 800da08:	e7f9      	b.n	800d9fe <memset+0x4>

0800da0a <strncpy>:
 800da0a:	b510      	push	{r4, lr}
 800da0c:	3901      	subs	r1, #1
 800da0e:	4603      	mov	r3, r0
 800da10:	b132      	cbz	r2, 800da20 <strncpy+0x16>
 800da12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800da16:	f803 4b01 	strb.w	r4, [r3], #1
 800da1a:	3a01      	subs	r2, #1
 800da1c:	2c00      	cmp	r4, #0
 800da1e:	d1f7      	bne.n	800da10 <strncpy+0x6>
 800da20:	441a      	add	r2, r3
 800da22:	2100      	movs	r1, #0
 800da24:	4293      	cmp	r3, r2
 800da26:	d100      	bne.n	800da2a <strncpy+0x20>
 800da28:	bd10      	pop	{r4, pc}
 800da2a:	f803 1b01 	strb.w	r1, [r3], #1
 800da2e:	e7f9      	b.n	800da24 <strncpy+0x1a>

0800da30 <_localeconv_r>:
 800da30:	4800      	ldr	r0, [pc, #0]	@ (800da34 <_localeconv_r+0x4>)
 800da32:	4770      	bx	lr
 800da34:	20000208 	.word	0x20000208

0800da38 <_close_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4d06      	ldr	r5, [pc, #24]	@ (800da54 <_close_r+0x1c>)
 800da3c:	2300      	movs	r3, #0
 800da3e:	4604      	mov	r4, r0
 800da40:	4608      	mov	r0, r1
 800da42:	602b      	str	r3, [r5, #0]
 800da44:	f7f7 f94c 	bl	8004ce0 <_close>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d102      	bne.n	800da52 <_close_r+0x1a>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	b103      	cbz	r3, 800da52 <_close_r+0x1a>
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	20000f3c 	.word	0x20000f3c

0800da58 <_lseek_r>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	4d07      	ldr	r5, [pc, #28]	@ (800da78 <_lseek_r+0x20>)
 800da5c:	4604      	mov	r4, r0
 800da5e:	4608      	mov	r0, r1
 800da60:	4611      	mov	r1, r2
 800da62:	2200      	movs	r2, #0
 800da64:	602a      	str	r2, [r5, #0]
 800da66:	461a      	mov	r2, r3
 800da68:	f7f7 f961 	bl	8004d2e <_lseek>
 800da6c:	1c43      	adds	r3, r0, #1
 800da6e:	d102      	bne.n	800da76 <_lseek_r+0x1e>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	b103      	cbz	r3, 800da76 <_lseek_r+0x1e>
 800da74:	6023      	str	r3, [r4, #0]
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	20000f3c 	.word	0x20000f3c

0800da7c <_read_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4d07      	ldr	r5, [pc, #28]	@ (800da9c <_read_r+0x20>)
 800da80:	4604      	mov	r4, r0
 800da82:	4608      	mov	r0, r1
 800da84:	4611      	mov	r1, r2
 800da86:	2200      	movs	r2, #0
 800da88:	602a      	str	r2, [r5, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	f7f7 f8ef 	bl	8004c6e <_read>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	d102      	bne.n	800da9a <_read_r+0x1e>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	b103      	cbz	r3, 800da9a <_read_r+0x1e>
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	20000f3c 	.word	0x20000f3c

0800daa0 <_write_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d07      	ldr	r5, [pc, #28]	@ (800dac0 <_write_r+0x20>)
 800daa4:	4604      	mov	r4, r0
 800daa6:	4608      	mov	r0, r1
 800daa8:	4611      	mov	r1, r2
 800daaa:	2200      	movs	r2, #0
 800daac:	602a      	str	r2, [r5, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	f7f7 f8fa 	bl	8004ca8 <_write>
 800dab4:	1c43      	adds	r3, r0, #1
 800dab6:	d102      	bne.n	800dabe <_write_r+0x1e>
 800dab8:	682b      	ldr	r3, [r5, #0]
 800daba:	b103      	cbz	r3, 800dabe <_write_r+0x1e>
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	bd38      	pop	{r3, r4, r5, pc}
 800dac0:	20000f3c 	.word	0x20000f3c

0800dac4 <__errno>:
 800dac4:	4b01      	ldr	r3, [pc, #4]	@ (800dacc <__errno+0x8>)
 800dac6:	6818      	ldr	r0, [r3, #0]
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	200000c8 	.word	0x200000c8

0800dad0 <__libc_init_array>:
 800dad0:	b570      	push	{r4, r5, r6, lr}
 800dad2:	4d0d      	ldr	r5, [pc, #52]	@ (800db08 <__libc_init_array+0x38>)
 800dad4:	4c0d      	ldr	r4, [pc, #52]	@ (800db0c <__libc_init_array+0x3c>)
 800dad6:	1b64      	subs	r4, r4, r5
 800dad8:	10a4      	asrs	r4, r4, #2
 800dada:	2600      	movs	r6, #0
 800dadc:	42a6      	cmp	r6, r4
 800dade:	d109      	bne.n	800daf4 <__libc_init_array+0x24>
 800dae0:	4d0b      	ldr	r5, [pc, #44]	@ (800db10 <__libc_init_array+0x40>)
 800dae2:	4c0c      	ldr	r4, [pc, #48]	@ (800db14 <__libc_init_array+0x44>)
 800dae4:	f002 f906 	bl	800fcf4 <_init>
 800dae8:	1b64      	subs	r4, r4, r5
 800daea:	10a4      	asrs	r4, r4, #2
 800daec:	2600      	movs	r6, #0
 800daee:	42a6      	cmp	r6, r4
 800daf0:	d105      	bne.n	800dafe <__libc_init_array+0x2e>
 800daf2:	bd70      	pop	{r4, r5, r6, pc}
 800daf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800daf8:	4798      	blx	r3
 800dafa:	3601      	adds	r6, #1
 800dafc:	e7ee      	b.n	800dadc <__libc_init_array+0xc>
 800dafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800db02:	4798      	blx	r3
 800db04:	3601      	adds	r6, #1
 800db06:	e7f2      	b.n	800daee <__libc_init_array+0x1e>
 800db08:	080130b4 	.word	0x080130b4
 800db0c:	080130b4 	.word	0x080130b4
 800db10:	080130b4 	.word	0x080130b4
 800db14:	080130b8 	.word	0x080130b8

0800db18 <__retarget_lock_init_recursive>:
 800db18:	4770      	bx	lr

0800db1a <__retarget_lock_acquire_recursive>:
 800db1a:	4770      	bx	lr

0800db1c <__retarget_lock_release_recursive>:
 800db1c:	4770      	bx	lr

0800db1e <memcpy>:
 800db1e:	440a      	add	r2, r1
 800db20:	4291      	cmp	r1, r2
 800db22:	f100 33ff 	add.w	r3, r0, #4294967295
 800db26:	d100      	bne.n	800db2a <memcpy+0xc>
 800db28:	4770      	bx	lr
 800db2a:	b510      	push	{r4, lr}
 800db2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db34:	4291      	cmp	r1, r2
 800db36:	d1f9      	bne.n	800db2c <memcpy+0xe>
 800db38:	bd10      	pop	{r4, pc}

0800db3a <quorem>:
 800db3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3e:	6903      	ldr	r3, [r0, #16]
 800db40:	690c      	ldr	r4, [r1, #16]
 800db42:	42a3      	cmp	r3, r4
 800db44:	4607      	mov	r7, r0
 800db46:	db7e      	blt.n	800dc46 <quorem+0x10c>
 800db48:	3c01      	subs	r4, #1
 800db4a:	f101 0814 	add.w	r8, r1, #20
 800db4e:	00a3      	lsls	r3, r4, #2
 800db50:	f100 0514 	add.w	r5, r0, #20
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db5a:	9301      	str	r3, [sp, #4]
 800db5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db64:	3301      	adds	r3, #1
 800db66:	429a      	cmp	r2, r3
 800db68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db6c:	fbb2 f6f3 	udiv	r6, r2, r3
 800db70:	d32e      	bcc.n	800dbd0 <quorem+0x96>
 800db72:	f04f 0a00 	mov.w	sl, #0
 800db76:	46c4      	mov	ip, r8
 800db78:	46ae      	mov	lr, r5
 800db7a:	46d3      	mov	fp, sl
 800db7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db80:	b298      	uxth	r0, r3
 800db82:	fb06 a000 	mla	r0, r6, r0, sl
 800db86:	0c02      	lsrs	r2, r0, #16
 800db88:	0c1b      	lsrs	r3, r3, #16
 800db8a:	fb06 2303 	mla	r3, r6, r3, r2
 800db8e:	f8de 2000 	ldr.w	r2, [lr]
 800db92:	b280      	uxth	r0, r0
 800db94:	b292      	uxth	r2, r2
 800db96:	1a12      	subs	r2, r2, r0
 800db98:	445a      	add	r2, fp
 800db9a:	f8de 0000 	ldr.w	r0, [lr]
 800db9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dba8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dbac:	b292      	uxth	r2, r2
 800dbae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dbb2:	45e1      	cmp	r9, ip
 800dbb4:	f84e 2b04 	str.w	r2, [lr], #4
 800dbb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dbbc:	d2de      	bcs.n	800db7c <quorem+0x42>
 800dbbe:	9b00      	ldr	r3, [sp, #0]
 800dbc0:	58eb      	ldr	r3, [r5, r3]
 800dbc2:	b92b      	cbnz	r3, 800dbd0 <quorem+0x96>
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	3b04      	subs	r3, #4
 800dbc8:	429d      	cmp	r5, r3
 800dbca:	461a      	mov	r2, r3
 800dbcc:	d32f      	bcc.n	800dc2e <quorem+0xf4>
 800dbce:	613c      	str	r4, [r7, #16]
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	f001 f97f 	bl	800eed4 <__mcmp>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	db25      	blt.n	800dc26 <quorem+0xec>
 800dbda:	4629      	mov	r1, r5
 800dbdc:	2000      	movs	r0, #0
 800dbde:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbe2:	f8d1 c000 	ldr.w	ip, [r1]
 800dbe6:	fa1f fe82 	uxth.w	lr, r2
 800dbea:	fa1f f38c 	uxth.w	r3, ip
 800dbee:	eba3 030e 	sub.w	r3, r3, lr
 800dbf2:	4403      	add	r3, r0
 800dbf4:	0c12      	lsrs	r2, r2, #16
 800dbf6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dbfa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc04:	45c1      	cmp	r9, r8
 800dc06:	f841 3b04 	str.w	r3, [r1], #4
 800dc0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc0e:	d2e6      	bcs.n	800dbde <quorem+0xa4>
 800dc10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc18:	b922      	cbnz	r2, 800dc24 <quorem+0xea>
 800dc1a:	3b04      	subs	r3, #4
 800dc1c:	429d      	cmp	r5, r3
 800dc1e:	461a      	mov	r2, r3
 800dc20:	d30b      	bcc.n	800dc3a <quorem+0x100>
 800dc22:	613c      	str	r4, [r7, #16]
 800dc24:	3601      	adds	r6, #1
 800dc26:	4630      	mov	r0, r6
 800dc28:	b003      	add	sp, #12
 800dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2e:	6812      	ldr	r2, [r2, #0]
 800dc30:	3b04      	subs	r3, #4
 800dc32:	2a00      	cmp	r2, #0
 800dc34:	d1cb      	bne.n	800dbce <quorem+0x94>
 800dc36:	3c01      	subs	r4, #1
 800dc38:	e7c6      	b.n	800dbc8 <quorem+0x8e>
 800dc3a:	6812      	ldr	r2, [r2, #0]
 800dc3c:	3b04      	subs	r3, #4
 800dc3e:	2a00      	cmp	r2, #0
 800dc40:	d1ef      	bne.n	800dc22 <quorem+0xe8>
 800dc42:	3c01      	subs	r4, #1
 800dc44:	e7ea      	b.n	800dc1c <quorem+0xe2>
 800dc46:	2000      	movs	r0, #0
 800dc48:	e7ee      	b.n	800dc28 <quorem+0xee>
 800dc4a:	0000      	movs	r0, r0
 800dc4c:	0000      	movs	r0, r0
	...

0800dc50 <_dtoa_r>:
 800dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	69c7      	ldr	r7, [r0, #28]
 800dc56:	b097      	sub	sp, #92	@ 0x5c
 800dc58:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dc5c:	ec55 4b10 	vmov	r4, r5, d0
 800dc60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dc62:	9107      	str	r1, [sp, #28]
 800dc64:	4681      	mov	r9, r0
 800dc66:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc68:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc6a:	b97f      	cbnz	r7, 800dc8c <_dtoa_r+0x3c>
 800dc6c:	2010      	movs	r0, #16
 800dc6e:	f000 fe09 	bl	800e884 <malloc>
 800dc72:	4602      	mov	r2, r0
 800dc74:	f8c9 001c 	str.w	r0, [r9, #28]
 800dc78:	b920      	cbnz	r0, 800dc84 <_dtoa_r+0x34>
 800dc7a:	4ba9      	ldr	r3, [pc, #676]	@ (800df20 <_dtoa_r+0x2d0>)
 800dc7c:	21ef      	movs	r1, #239	@ 0xef
 800dc7e:	48a9      	ldr	r0, [pc, #676]	@ (800df24 <_dtoa_r+0x2d4>)
 800dc80:	f001 fc5e 	bl	800f540 <__assert_func>
 800dc84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc88:	6007      	str	r7, [r0, #0]
 800dc8a:	60c7      	str	r7, [r0, #12]
 800dc8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc90:	6819      	ldr	r1, [r3, #0]
 800dc92:	b159      	cbz	r1, 800dcac <_dtoa_r+0x5c>
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	604a      	str	r2, [r1, #4]
 800dc98:	2301      	movs	r3, #1
 800dc9a:	4093      	lsls	r3, r2
 800dc9c:	608b      	str	r3, [r1, #8]
 800dc9e:	4648      	mov	r0, r9
 800dca0:	f000 fee6 	bl	800ea70 <_Bfree>
 800dca4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	1e2b      	subs	r3, r5, #0
 800dcae:	bfb9      	ittee	lt
 800dcb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dcb4:	9305      	strlt	r3, [sp, #20]
 800dcb6:	2300      	movge	r3, #0
 800dcb8:	6033      	strge	r3, [r6, #0]
 800dcba:	9f05      	ldr	r7, [sp, #20]
 800dcbc:	4b9a      	ldr	r3, [pc, #616]	@ (800df28 <_dtoa_r+0x2d8>)
 800dcbe:	bfbc      	itt	lt
 800dcc0:	2201      	movlt	r2, #1
 800dcc2:	6032      	strlt	r2, [r6, #0]
 800dcc4:	43bb      	bics	r3, r7
 800dcc6:	d112      	bne.n	800dcee <_dtoa_r+0x9e>
 800dcc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dcca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dcce:	6013      	str	r3, [r2, #0]
 800dcd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dcd4:	4323      	orrs	r3, r4
 800dcd6:	f000 855a 	beq.w	800e78e <_dtoa_r+0xb3e>
 800dcda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dcdc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800df3c <_dtoa_r+0x2ec>
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 855c 	beq.w	800e79e <_dtoa_r+0xb4e>
 800dce6:	f10a 0303 	add.w	r3, sl, #3
 800dcea:	f000 bd56 	b.w	800e79a <_dtoa_r+0xb4a>
 800dcee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	ec51 0b17 	vmov	r0, r1, d7
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dcfe:	f7f2 ff03 	bl	8000b08 <__aeabi_dcmpeq>
 800dd02:	4680      	mov	r8, r0
 800dd04:	b158      	cbz	r0, 800dd1e <_dtoa_r+0xce>
 800dd06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dd08:	2301      	movs	r3, #1
 800dd0a:	6013      	str	r3, [r2, #0]
 800dd0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd0e:	b113      	cbz	r3, 800dd16 <_dtoa_r+0xc6>
 800dd10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dd12:	4b86      	ldr	r3, [pc, #536]	@ (800df2c <_dtoa_r+0x2dc>)
 800dd14:	6013      	str	r3, [r2, #0]
 800dd16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800df40 <_dtoa_r+0x2f0>
 800dd1a:	f000 bd40 	b.w	800e79e <_dtoa_r+0xb4e>
 800dd1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dd22:	aa14      	add	r2, sp, #80	@ 0x50
 800dd24:	a915      	add	r1, sp, #84	@ 0x54
 800dd26:	4648      	mov	r0, r9
 800dd28:	f001 f984 	bl	800f034 <__d2b>
 800dd2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dd30:	9002      	str	r0, [sp, #8]
 800dd32:	2e00      	cmp	r6, #0
 800dd34:	d078      	beq.n	800de28 <_dtoa_r+0x1d8>
 800dd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dd3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd50:	4619      	mov	r1, r3
 800dd52:	2200      	movs	r2, #0
 800dd54:	4b76      	ldr	r3, [pc, #472]	@ (800df30 <_dtoa_r+0x2e0>)
 800dd56:	f7f2 fab7 	bl	80002c8 <__aeabi_dsub>
 800dd5a:	a36b      	add	r3, pc, #428	@ (adr r3, 800df08 <_dtoa_r+0x2b8>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	f7f2 fc6a 	bl	8000638 <__aeabi_dmul>
 800dd64:	a36a      	add	r3, pc, #424	@ (adr r3, 800df10 <_dtoa_r+0x2c0>)
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	f7f2 faaf 	bl	80002cc <__adddf3>
 800dd6e:	4604      	mov	r4, r0
 800dd70:	4630      	mov	r0, r6
 800dd72:	460d      	mov	r5, r1
 800dd74:	f7f2 fbf6 	bl	8000564 <__aeabi_i2d>
 800dd78:	a367      	add	r3, pc, #412	@ (adr r3, 800df18 <_dtoa_r+0x2c8>)
 800dd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7e:	f7f2 fc5b 	bl	8000638 <__aeabi_dmul>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4620      	mov	r0, r4
 800dd88:	4629      	mov	r1, r5
 800dd8a:	f7f2 fa9f 	bl	80002cc <__adddf3>
 800dd8e:	4604      	mov	r4, r0
 800dd90:	460d      	mov	r5, r1
 800dd92:	f7f2 ff01 	bl	8000b98 <__aeabi_d2iz>
 800dd96:	2200      	movs	r2, #0
 800dd98:	4607      	mov	r7, r0
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	4629      	mov	r1, r5
 800dda0:	f7f2 febc 	bl	8000b1c <__aeabi_dcmplt>
 800dda4:	b140      	cbz	r0, 800ddb8 <_dtoa_r+0x168>
 800dda6:	4638      	mov	r0, r7
 800dda8:	f7f2 fbdc 	bl	8000564 <__aeabi_i2d>
 800ddac:	4622      	mov	r2, r4
 800ddae:	462b      	mov	r3, r5
 800ddb0:	f7f2 feaa 	bl	8000b08 <__aeabi_dcmpeq>
 800ddb4:	b900      	cbnz	r0, 800ddb8 <_dtoa_r+0x168>
 800ddb6:	3f01      	subs	r7, #1
 800ddb8:	2f16      	cmp	r7, #22
 800ddba:	d852      	bhi.n	800de62 <_dtoa_r+0x212>
 800ddbc:	4b5d      	ldr	r3, [pc, #372]	@ (800df34 <_dtoa_r+0x2e4>)
 800ddbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ddca:	f7f2 fea7 	bl	8000b1c <__aeabi_dcmplt>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d049      	beq.n	800de66 <_dtoa_r+0x216>
 800ddd2:	3f01      	subs	r7, #1
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ddda:	1b9b      	subs	r3, r3, r6
 800dddc:	1e5a      	subs	r2, r3, #1
 800ddde:	bf45      	ittet	mi
 800dde0:	f1c3 0301 	rsbmi	r3, r3, #1
 800dde4:	9300      	strmi	r3, [sp, #0]
 800dde6:	2300      	movpl	r3, #0
 800dde8:	2300      	movmi	r3, #0
 800ddea:	9206      	str	r2, [sp, #24]
 800ddec:	bf54      	ite	pl
 800ddee:	9300      	strpl	r3, [sp, #0]
 800ddf0:	9306      	strmi	r3, [sp, #24]
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	db39      	blt.n	800de6a <_dtoa_r+0x21a>
 800ddf6:	9b06      	ldr	r3, [sp, #24]
 800ddf8:	970d      	str	r7, [sp, #52]	@ 0x34
 800ddfa:	443b      	add	r3, r7
 800ddfc:	9306      	str	r3, [sp, #24]
 800ddfe:	2300      	movs	r3, #0
 800de00:	9308      	str	r3, [sp, #32]
 800de02:	9b07      	ldr	r3, [sp, #28]
 800de04:	2b09      	cmp	r3, #9
 800de06:	d863      	bhi.n	800ded0 <_dtoa_r+0x280>
 800de08:	2b05      	cmp	r3, #5
 800de0a:	bfc4      	itt	gt
 800de0c:	3b04      	subgt	r3, #4
 800de0e:	9307      	strgt	r3, [sp, #28]
 800de10:	9b07      	ldr	r3, [sp, #28]
 800de12:	f1a3 0302 	sub.w	r3, r3, #2
 800de16:	bfcc      	ite	gt
 800de18:	2400      	movgt	r4, #0
 800de1a:	2401      	movle	r4, #1
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d863      	bhi.n	800dee8 <_dtoa_r+0x298>
 800de20:	e8df f003 	tbb	[pc, r3]
 800de24:	2b375452 	.word	0x2b375452
 800de28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800de2c:	441e      	add	r6, r3
 800de2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800de32:	2b20      	cmp	r3, #32
 800de34:	bfc1      	itttt	gt
 800de36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800de3a:	409f      	lslgt	r7, r3
 800de3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800de40:	fa24 f303 	lsrgt.w	r3, r4, r3
 800de44:	bfd6      	itet	le
 800de46:	f1c3 0320 	rsble	r3, r3, #32
 800de4a:	ea47 0003 	orrgt.w	r0, r7, r3
 800de4e:	fa04 f003 	lslle.w	r0, r4, r3
 800de52:	f7f2 fb77 	bl	8000544 <__aeabi_ui2d>
 800de56:	2201      	movs	r2, #1
 800de58:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de5c:	3e01      	subs	r6, #1
 800de5e:	9212      	str	r2, [sp, #72]	@ 0x48
 800de60:	e776      	b.n	800dd50 <_dtoa_r+0x100>
 800de62:	2301      	movs	r3, #1
 800de64:	e7b7      	b.n	800ddd6 <_dtoa_r+0x186>
 800de66:	9010      	str	r0, [sp, #64]	@ 0x40
 800de68:	e7b6      	b.n	800ddd8 <_dtoa_r+0x188>
 800de6a:	9b00      	ldr	r3, [sp, #0]
 800de6c:	1bdb      	subs	r3, r3, r7
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	427b      	negs	r3, r7
 800de72:	9308      	str	r3, [sp, #32]
 800de74:	2300      	movs	r3, #0
 800de76:	930d      	str	r3, [sp, #52]	@ 0x34
 800de78:	e7c3      	b.n	800de02 <_dtoa_r+0x1b2>
 800de7a:	2301      	movs	r3, #1
 800de7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de80:	eb07 0b03 	add.w	fp, r7, r3
 800de84:	f10b 0301 	add.w	r3, fp, #1
 800de88:	2b01      	cmp	r3, #1
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	bfb8      	it	lt
 800de8e:	2301      	movlt	r3, #1
 800de90:	e006      	b.n	800dea0 <_dtoa_r+0x250>
 800de92:	2301      	movs	r3, #1
 800de94:	9309      	str	r3, [sp, #36]	@ 0x24
 800de96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de98:	2b00      	cmp	r3, #0
 800de9a:	dd28      	ble.n	800deee <_dtoa_r+0x29e>
 800de9c:	469b      	mov	fp, r3
 800de9e:	9303      	str	r3, [sp, #12]
 800dea0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dea4:	2100      	movs	r1, #0
 800dea6:	2204      	movs	r2, #4
 800dea8:	f102 0514 	add.w	r5, r2, #20
 800deac:	429d      	cmp	r5, r3
 800deae:	d926      	bls.n	800defe <_dtoa_r+0x2ae>
 800deb0:	6041      	str	r1, [r0, #4]
 800deb2:	4648      	mov	r0, r9
 800deb4:	f000 fd9c 	bl	800e9f0 <_Balloc>
 800deb8:	4682      	mov	sl, r0
 800deba:	2800      	cmp	r0, #0
 800debc:	d142      	bne.n	800df44 <_dtoa_r+0x2f4>
 800debe:	4b1e      	ldr	r3, [pc, #120]	@ (800df38 <_dtoa_r+0x2e8>)
 800dec0:	4602      	mov	r2, r0
 800dec2:	f240 11af 	movw	r1, #431	@ 0x1af
 800dec6:	e6da      	b.n	800dc7e <_dtoa_r+0x2e>
 800dec8:	2300      	movs	r3, #0
 800deca:	e7e3      	b.n	800de94 <_dtoa_r+0x244>
 800decc:	2300      	movs	r3, #0
 800dece:	e7d5      	b.n	800de7c <_dtoa_r+0x22c>
 800ded0:	2401      	movs	r4, #1
 800ded2:	2300      	movs	r3, #0
 800ded4:	9307      	str	r3, [sp, #28]
 800ded6:	9409      	str	r4, [sp, #36]	@ 0x24
 800ded8:	f04f 3bff 	mov.w	fp, #4294967295
 800dedc:	2200      	movs	r2, #0
 800dede:	f8cd b00c 	str.w	fp, [sp, #12]
 800dee2:	2312      	movs	r3, #18
 800dee4:	920c      	str	r2, [sp, #48]	@ 0x30
 800dee6:	e7db      	b.n	800dea0 <_dtoa_r+0x250>
 800dee8:	2301      	movs	r3, #1
 800deea:	9309      	str	r3, [sp, #36]	@ 0x24
 800deec:	e7f4      	b.n	800ded8 <_dtoa_r+0x288>
 800deee:	f04f 0b01 	mov.w	fp, #1
 800def2:	f8cd b00c 	str.w	fp, [sp, #12]
 800def6:	465b      	mov	r3, fp
 800def8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800defc:	e7d0      	b.n	800dea0 <_dtoa_r+0x250>
 800defe:	3101      	adds	r1, #1
 800df00:	0052      	lsls	r2, r2, #1
 800df02:	e7d1      	b.n	800dea8 <_dtoa_r+0x258>
 800df04:	f3af 8000 	nop.w
 800df08:	636f4361 	.word	0x636f4361
 800df0c:	3fd287a7 	.word	0x3fd287a7
 800df10:	8b60c8b3 	.word	0x8b60c8b3
 800df14:	3fc68a28 	.word	0x3fc68a28
 800df18:	509f79fb 	.word	0x509f79fb
 800df1c:	3fd34413 	.word	0x3fd34413
 800df20:	08012d75 	.word	0x08012d75
 800df24:	08012d8c 	.word	0x08012d8c
 800df28:	7ff00000 	.word	0x7ff00000
 800df2c:	08012d45 	.word	0x08012d45
 800df30:	3ff80000 	.word	0x3ff80000
 800df34:	08012ee0 	.word	0x08012ee0
 800df38:	08012de4 	.word	0x08012de4
 800df3c:	08012d71 	.word	0x08012d71
 800df40:	08012d44 	.word	0x08012d44
 800df44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df48:	6018      	str	r0, [r3, #0]
 800df4a:	9b03      	ldr	r3, [sp, #12]
 800df4c:	2b0e      	cmp	r3, #14
 800df4e:	f200 80a1 	bhi.w	800e094 <_dtoa_r+0x444>
 800df52:	2c00      	cmp	r4, #0
 800df54:	f000 809e 	beq.w	800e094 <_dtoa_r+0x444>
 800df58:	2f00      	cmp	r7, #0
 800df5a:	dd33      	ble.n	800dfc4 <_dtoa_r+0x374>
 800df5c:	4b9c      	ldr	r3, [pc, #624]	@ (800e1d0 <_dtoa_r+0x580>)
 800df5e:	f007 020f 	and.w	r2, r7, #15
 800df62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df66:	ed93 7b00 	vldr	d7, [r3]
 800df6a:	05f8      	lsls	r0, r7, #23
 800df6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800df70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df74:	d516      	bpl.n	800dfa4 <_dtoa_r+0x354>
 800df76:	4b97      	ldr	r3, [pc, #604]	@ (800e1d4 <_dtoa_r+0x584>)
 800df78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df80:	f7f2 fc84 	bl	800088c <__aeabi_ddiv>
 800df84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df88:	f004 040f 	and.w	r4, r4, #15
 800df8c:	2603      	movs	r6, #3
 800df8e:	4d91      	ldr	r5, [pc, #580]	@ (800e1d4 <_dtoa_r+0x584>)
 800df90:	b954      	cbnz	r4, 800dfa8 <_dtoa_r+0x358>
 800df92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800df96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df9a:	f7f2 fc77 	bl	800088c <__aeabi_ddiv>
 800df9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfa2:	e028      	b.n	800dff6 <_dtoa_r+0x3a6>
 800dfa4:	2602      	movs	r6, #2
 800dfa6:	e7f2      	b.n	800df8e <_dtoa_r+0x33e>
 800dfa8:	07e1      	lsls	r1, r4, #31
 800dfaa:	d508      	bpl.n	800dfbe <_dtoa_r+0x36e>
 800dfac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dfb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfb4:	f7f2 fb40 	bl	8000638 <__aeabi_dmul>
 800dfb8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dfbc:	3601      	adds	r6, #1
 800dfbe:	1064      	asrs	r4, r4, #1
 800dfc0:	3508      	adds	r5, #8
 800dfc2:	e7e5      	b.n	800df90 <_dtoa_r+0x340>
 800dfc4:	f000 80af 	beq.w	800e126 <_dtoa_r+0x4d6>
 800dfc8:	427c      	negs	r4, r7
 800dfca:	4b81      	ldr	r3, [pc, #516]	@ (800e1d0 <_dtoa_r+0x580>)
 800dfcc:	4d81      	ldr	r5, [pc, #516]	@ (800e1d4 <_dtoa_r+0x584>)
 800dfce:	f004 020f 	and.w	r2, r4, #15
 800dfd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dfde:	f7f2 fb2b 	bl	8000638 <__aeabi_dmul>
 800dfe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfe6:	1124      	asrs	r4, r4, #4
 800dfe8:	2300      	movs	r3, #0
 800dfea:	2602      	movs	r6, #2
 800dfec:	2c00      	cmp	r4, #0
 800dfee:	f040 808f 	bne.w	800e110 <_dtoa_r+0x4c0>
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1d3      	bne.n	800df9e <_dtoa_r+0x34e>
 800dff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dff8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f000 8094 	beq.w	800e12a <_dtoa_r+0x4da>
 800e002:	4b75      	ldr	r3, [pc, #468]	@ (800e1d8 <_dtoa_r+0x588>)
 800e004:	2200      	movs	r2, #0
 800e006:	4620      	mov	r0, r4
 800e008:	4629      	mov	r1, r5
 800e00a:	f7f2 fd87 	bl	8000b1c <__aeabi_dcmplt>
 800e00e:	2800      	cmp	r0, #0
 800e010:	f000 808b 	beq.w	800e12a <_dtoa_r+0x4da>
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	2b00      	cmp	r3, #0
 800e018:	f000 8087 	beq.w	800e12a <_dtoa_r+0x4da>
 800e01c:	f1bb 0f00 	cmp.w	fp, #0
 800e020:	dd34      	ble.n	800e08c <_dtoa_r+0x43c>
 800e022:	4620      	mov	r0, r4
 800e024:	4b6d      	ldr	r3, [pc, #436]	@ (800e1dc <_dtoa_r+0x58c>)
 800e026:	2200      	movs	r2, #0
 800e028:	4629      	mov	r1, r5
 800e02a:	f7f2 fb05 	bl	8000638 <__aeabi_dmul>
 800e02e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e032:	f107 38ff 	add.w	r8, r7, #4294967295
 800e036:	3601      	adds	r6, #1
 800e038:	465c      	mov	r4, fp
 800e03a:	4630      	mov	r0, r6
 800e03c:	f7f2 fa92 	bl	8000564 <__aeabi_i2d>
 800e040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e044:	f7f2 faf8 	bl	8000638 <__aeabi_dmul>
 800e048:	4b65      	ldr	r3, [pc, #404]	@ (800e1e0 <_dtoa_r+0x590>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	f7f2 f93e 	bl	80002cc <__adddf3>
 800e050:	4605      	mov	r5, r0
 800e052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e056:	2c00      	cmp	r4, #0
 800e058:	d16a      	bne.n	800e130 <_dtoa_r+0x4e0>
 800e05a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e05e:	4b61      	ldr	r3, [pc, #388]	@ (800e1e4 <_dtoa_r+0x594>)
 800e060:	2200      	movs	r2, #0
 800e062:	f7f2 f931 	bl	80002c8 <__aeabi_dsub>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e06e:	462a      	mov	r2, r5
 800e070:	4633      	mov	r3, r6
 800e072:	f7f2 fd71 	bl	8000b58 <__aeabi_dcmpgt>
 800e076:	2800      	cmp	r0, #0
 800e078:	f040 8298 	bne.w	800e5ac <_dtoa_r+0x95c>
 800e07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e080:	462a      	mov	r2, r5
 800e082:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e086:	f7f2 fd49 	bl	8000b1c <__aeabi_dcmplt>
 800e08a:	bb38      	cbnz	r0, 800e0dc <_dtoa_r+0x48c>
 800e08c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e090:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e094:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e096:	2b00      	cmp	r3, #0
 800e098:	f2c0 8157 	blt.w	800e34a <_dtoa_r+0x6fa>
 800e09c:	2f0e      	cmp	r7, #14
 800e09e:	f300 8154 	bgt.w	800e34a <_dtoa_r+0x6fa>
 800e0a2:	4b4b      	ldr	r3, [pc, #300]	@ (800e1d0 <_dtoa_r+0x580>)
 800e0a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e0a8:	ed93 7b00 	vldr	d7, [r3]
 800e0ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	ed8d 7b00 	vstr	d7, [sp]
 800e0b4:	f280 80e5 	bge.w	800e282 <_dtoa_r+0x632>
 800e0b8:	9b03      	ldr	r3, [sp, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f300 80e1 	bgt.w	800e282 <_dtoa_r+0x632>
 800e0c0:	d10c      	bne.n	800e0dc <_dtoa_r+0x48c>
 800e0c2:	4b48      	ldr	r3, [pc, #288]	@ (800e1e4 <_dtoa_r+0x594>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	ec51 0b17 	vmov	r0, r1, d7
 800e0ca:	f7f2 fab5 	bl	8000638 <__aeabi_dmul>
 800e0ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0d2:	f7f2 fd37 	bl	8000b44 <__aeabi_dcmpge>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	f000 8266 	beq.w	800e5a8 <_dtoa_r+0x958>
 800e0dc:	2400      	movs	r4, #0
 800e0de:	4625      	mov	r5, r4
 800e0e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0e2:	4656      	mov	r6, sl
 800e0e4:	ea6f 0803 	mvn.w	r8, r3
 800e0e8:	2700      	movs	r7, #0
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	4648      	mov	r0, r9
 800e0ee:	f000 fcbf 	bl	800ea70 <_Bfree>
 800e0f2:	2d00      	cmp	r5, #0
 800e0f4:	f000 80bd 	beq.w	800e272 <_dtoa_r+0x622>
 800e0f8:	b12f      	cbz	r7, 800e106 <_dtoa_r+0x4b6>
 800e0fa:	42af      	cmp	r7, r5
 800e0fc:	d003      	beq.n	800e106 <_dtoa_r+0x4b6>
 800e0fe:	4639      	mov	r1, r7
 800e100:	4648      	mov	r0, r9
 800e102:	f000 fcb5 	bl	800ea70 <_Bfree>
 800e106:	4629      	mov	r1, r5
 800e108:	4648      	mov	r0, r9
 800e10a:	f000 fcb1 	bl	800ea70 <_Bfree>
 800e10e:	e0b0      	b.n	800e272 <_dtoa_r+0x622>
 800e110:	07e2      	lsls	r2, r4, #31
 800e112:	d505      	bpl.n	800e120 <_dtoa_r+0x4d0>
 800e114:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e118:	f7f2 fa8e 	bl	8000638 <__aeabi_dmul>
 800e11c:	3601      	adds	r6, #1
 800e11e:	2301      	movs	r3, #1
 800e120:	1064      	asrs	r4, r4, #1
 800e122:	3508      	adds	r5, #8
 800e124:	e762      	b.n	800dfec <_dtoa_r+0x39c>
 800e126:	2602      	movs	r6, #2
 800e128:	e765      	b.n	800dff6 <_dtoa_r+0x3a6>
 800e12a:	9c03      	ldr	r4, [sp, #12]
 800e12c:	46b8      	mov	r8, r7
 800e12e:	e784      	b.n	800e03a <_dtoa_r+0x3ea>
 800e130:	4b27      	ldr	r3, [pc, #156]	@ (800e1d0 <_dtoa_r+0x580>)
 800e132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e134:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e138:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e13c:	4454      	add	r4, sl
 800e13e:	2900      	cmp	r1, #0
 800e140:	d054      	beq.n	800e1ec <_dtoa_r+0x59c>
 800e142:	4929      	ldr	r1, [pc, #164]	@ (800e1e8 <_dtoa_r+0x598>)
 800e144:	2000      	movs	r0, #0
 800e146:	f7f2 fba1 	bl	800088c <__aeabi_ddiv>
 800e14a:	4633      	mov	r3, r6
 800e14c:	462a      	mov	r2, r5
 800e14e:	f7f2 f8bb 	bl	80002c8 <__aeabi_dsub>
 800e152:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e156:	4656      	mov	r6, sl
 800e158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e15c:	f7f2 fd1c 	bl	8000b98 <__aeabi_d2iz>
 800e160:	4605      	mov	r5, r0
 800e162:	f7f2 f9ff 	bl	8000564 <__aeabi_i2d>
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e16e:	f7f2 f8ab 	bl	80002c8 <__aeabi_dsub>
 800e172:	3530      	adds	r5, #48	@ 0x30
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e17c:	f806 5b01 	strb.w	r5, [r6], #1
 800e180:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e184:	f7f2 fcca 	bl	8000b1c <__aeabi_dcmplt>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d172      	bne.n	800e272 <_dtoa_r+0x622>
 800e18c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e190:	4911      	ldr	r1, [pc, #68]	@ (800e1d8 <_dtoa_r+0x588>)
 800e192:	2000      	movs	r0, #0
 800e194:	f7f2 f898 	bl	80002c8 <__aeabi_dsub>
 800e198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e19c:	f7f2 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	f040 80b4 	bne.w	800e30e <_dtoa_r+0x6be>
 800e1a6:	42a6      	cmp	r6, r4
 800e1a8:	f43f af70 	beq.w	800e08c <_dtoa_r+0x43c>
 800e1ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e1dc <_dtoa_r+0x58c>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f7f2 fa40 	bl	8000638 <__aeabi_dmul>
 800e1b8:	4b08      	ldr	r3, [pc, #32]	@ (800e1dc <_dtoa_r+0x58c>)
 800e1ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1be:	2200      	movs	r2, #0
 800e1c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1c4:	f7f2 fa38 	bl	8000638 <__aeabi_dmul>
 800e1c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1cc:	e7c4      	b.n	800e158 <_dtoa_r+0x508>
 800e1ce:	bf00      	nop
 800e1d0:	08012ee0 	.word	0x08012ee0
 800e1d4:	08012eb8 	.word	0x08012eb8
 800e1d8:	3ff00000 	.word	0x3ff00000
 800e1dc:	40240000 	.word	0x40240000
 800e1e0:	401c0000 	.word	0x401c0000
 800e1e4:	40140000 	.word	0x40140000
 800e1e8:	3fe00000 	.word	0x3fe00000
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7f2 fa22 	bl	8000638 <__aeabi_dmul>
 800e1f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e1fa:	4656      	mov	r6, sl
 800e1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e200:	f7f2 fcca 	bl	8000b98 <__aeabi_d2iz>
 800e204:	4605      	mov	r5, r0
 800e206:	f7f2 f9ad 	bl	8000564 <__aeabi_i2d>
 800e20a:	4602      	mov	r2, r0
 800e20c:	460b      	mov	r3, r1
 800e20e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e212:	f7f2 f859 	bl	80002c8 <__aeabi_dsub>
 800e216:	3530      	adds	r5, #48	@ 0x30
 800e218:	f806 5b01 	strb.w	r5, [r6], #1
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	42a6      	cmp	r6, r4
 800e222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e226:	f04f 0200 	mov.w	r2, #0
 800e22a:	d124      	bne.n	800e276 <_dtoa_r+0x626>
 800e22c:	4baf      	ldr	r3, [pc, #700]	@ (800e4ec <_dtoa_r+0x89c>)
 800e22e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e232:	f7f2 f84b 	bl	80002cc <__adddf3>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e23e:	f7f2 fc8b 	bl	8000b58 <__aeabi_dcmpgt>
 800e242:	2800      	cmp	r0, #0
 800e244:	d163      	bne.n	800e30e <_dtoa_r+0x6be>
 800e246:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e24a:	49a8      	ldr	r1, [pc, #672]	@ (800e4ec <_dtoa_r+0x89c>)
 800e24c:	2000      	movs	r0, #0
 800e24e:	f7f2 f83b 	bl	80002c8 <__aeabi_dsub>
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e25a:	f7f2 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800e25e:	2800      	cmp	r0, #0
 800e260:	f43f af14 	beq.w	800e08c <_dtoa_r+0x43c>
 800e264:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e266:	1e73      	subs	r3, r6, #1
 800e268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e26a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e26e:	2b30      	cmp	r3, #48	@ 0x30
 800e270:	d0f8      	beq.n	800e264 <_dtoa_r+0x614>
 800e272:	4647      	mov	r7, r8
 800e274:	e03b      	b.n	800e2ee <_dtoa_r+0x69e>
 800e276:	4b9e      	ldr	r3, [pc, #632]	@ (800e4f0 <_dtoa_r+0x8a0>)
 800e278:	f7f2 f9de 	bl	8000638 <__aeabi_dmul>
 800e27c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e280:	e7bc      	b.n	800e1fc <_dtoa_r+0x5ac>
 800e282:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e286:	4656      	mov	r6, sl
 800e288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e28c:	4620      	mov	r0, r4
 800e28e:	4629      	mov	r1, r5
 800e290:	f7f2 fafc 	bl	800088c <__aeabi_ddiv>
 800e294:	f7f2 fc80 	bl	8000b98 <__aeabi_d2iz>
 800e298:	4680      	mov	r8, r0
 800e29a:	f7f2 f963 	bl	8000564 <__aeabi_i2d>
 800e29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2a2:	f7f2 f9c9 	bl	8000638 <__aeabi_dmul>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	4629      	mov	r1, r5
 800e2ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e2b2:	f7f2 f809 	bl	80002c8 <__aeabi_dsub>
 800e2b6:	f806 4b01 	strb.w	r4, [r6], #1
 800e2ba:	9d03      	ldr	r5, [sp, #12]
 800e2bc:	eba6 040a 	sub.w	r4, r6, sl
 800e2c0:	42a5      	cmp	r5, r4
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	d133      	bne.n	800e330 <_dtoa_r+0x6e0>
 800e2c8:	f7f2 f800 	bl	80002cc <__adddf3>
 800e2cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	f7f2 fc40 	bl	8000b58 <__aeabi_dcmpgt>
 800e2d8:	b9c0      	cbnz	r0, 800e30c <_dtoa_r+0x6bc>
 800e2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2de:	4620      	mov	r0, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f7f2 fc11 	bl	8000b08 <__aeabi_dcmpeq>
 800e2e6:	b110      	cbz	r0, 800e2ee <_dtoa_r+0x69e>
 800e2e8:	f018 0f01 	tst.w	r8, #1
 800e2ec:	d10e      	bne.n	800e30c <_dtoa_r+0x6bc>
 800e2ee:	9902      	ldr	r1, [sp, #8]
 800e2f0:	4648      	mov	r0, r9
 800e2f2:	f000 fbbd 	bl	800ea70 <_Bfree>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	7033      	strb	r3, [r6, #0]
 800e2fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e2fc:	3701      	adds	r7, #1
 800e2fe:	601f      	str	r7, [r3, #0]
 800e300:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 824b 	beq.w	800e79e <_dtoa_r+0xb4e>
 800e308:	601e      	str	r6, [r3, #0]
 800e30a:	e248      	b.n	800e79e <_dtoa_r+0xb4e>
 800e30c:	46b8      	mov	r8, r7
 800e30e:	4633      	mov	r3, r6
 800e310:	461e      	mov	r6, r3
 800e312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e316:	2a39      	cmp	r2, #57	@ 0x39
 800e318:	d106      	bne.n	800e328 <_dtoa_r+0x6d8>
 800e31a:	459a      	cmp	sl, r3
 800e31c:	d1f8      	bne.n	800e310 <_dtoa_r+0x6c0>
 800e31e:	2230      	movs	r2, #48	@ 0x30
 800e320:	f108 0801 	add.w	r8, r8, #1
 800e324:	f88a 2000 	strb.w	r2, [sl]
 800e328:	781a      	ldrb	r2, [r3, #0]
 800e32a:	3201      	adds	r2, #1
 800e32c:	701a      	strb	r2, [r3, #0]
 800e32e:	e7a0      	b.n	800e272 <_dtoa_r+0x622>
 800e330:	4b6f      	ldr	r3, [pc, #444]	@ (800e4f0 <_dtoa_r+0x8a0>)
 800e332:	2200      	movs	r2, #0
 800e334:	f7f2 f980 	bl	8000638 <__aeabi_dmul>
 800e338:	2200      	movs	r2, #0
 800e33a:	2300      	movs	r3, #0
 800e33c:	4604      	mov	r4, r0
 800e33e:	460d      	mov	r5, r1
 800e340:	f7f2 fbe2 	bl	8000b08 <__aeabi_dcmpeq>
 800e344:	2800      	cmp	r0, #0
 800e346:	d09f      	beq.n	800e288 <_dtoa_r+0x638>
 800e348:	e7d1      	b.n	800e2ee <_dtoa_r+0x69e>
 800e34a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	f000 80ea 	beq.w	800e526 <_dtoa_r+0x8d6>
 800e352:	9a07      	ldr	r2, [sp, #28]
 800e354:	2a01      	cmp	r2, #1
 800e356:	f300 80cd 	bgt.w	800e4f4 <_dtoa_r+0x8a4>
 800e35a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e35c:	2a00      	cmp	r2, #0
 800e35e:	f000 80c1 	beq.w	800e4e4 <_dtoa_r+0x894>
 800e362:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e366:	9c08      	ldr	r4, [sp, #32]
 800e368:	9e00      	ldr	r6, [sp, #0]
 800e36a:	9a00      	ldr	r2, [sp, #0]
 800e36c:	441a      	add	r2, r3
 800e36e:	9200      	str	r2, [sp, #0]
 800e370:	9a06      	ldr	r2, [sp, #24]
 800e372:	2101      	movs	r1, #1
 800e374:	441a      	add	r2, r3
 800e376:	4648      	mov	r0, r9
 800e378:	9206      	str	r2, [sp, #24]
 800e37a:	f000 fc2d 	bl	800ebd8 <__i2b>
 800e37e:	4605      	mov	r5, r0
 800e380:	b166      	cbz	r6, 800e39c <_dtoa_r+0x74c>
 800e382:	9b06      	ldr	r3, [sp, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	dd09      	ble.n	800e39c <_dtoa_r+0x74c>
 800e388:	42b3      	cmp	r3, r6
 800e38a:	9a00      	ldr	r2, [sp, #0]
 800e38c:	bfa8      	it	ge
 800e38e:	4633      	movge	r3, r6
 800e390:	1ad2      	subs	r2, r2, r3
 800e392:	9200      	str	r2, [sp, #0]
 800e394:	9a06      	ldr	r2, [sp, #24]
 800e396:	1af6      	subs	r6, r6, r3
 800e398:	1ad3      	subs	r3, r2, r3
 800e39a:	9306      	str	r3, [sp, #24]
 800e39c:	9b08      	ldr	r3, [sp, #32]
 800e39e:	b30b      	cbz	r3, 800e3e4 <_dtoa_r+0x794>
 800e3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 80c6 	beq.w	800e534 <_dtoa_r+0x8e4>
 800e3a8:	2c00      	cmp	r4, #0
 800e3aa:	f000 80c0 	beq.w	800e52e <_dtoa_r+0x8de>
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	4622      	mov	r2, r4
 800e3b2:	4648      	mov	r0, r9
 800e3b4:	f000 fcc8 	bl	800ed48 <__pow5mult>
 800e3b8:	9a02      	ldr	r2, [sp, #8]
 800e3ba:	4601      	mov	r1, r0
 800e3bc:	4605      	mov	r5, r0
 800e3be:	4648      	mov	r0, r9
 800e3c0:	f000 fc20 	bl	800ec04 <__multiply>
 800e3c4:	9902      	ldr	r1, [sp, #8]
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	4648      	mov	r0, r9
 800e3ca:	f000 fb51 	bl	800ea70 <_Bfree>
 800e3ce:	9b08      	ldr	r3, [sp, #32]
 800e3d0:	1b1b      	subs	r3, r3, r4
 800e3d2:	9308      	str	r3, [sp, #32]
 800e3d4:	f000 80b1 	beq.w	800e53a <_dtoa_r+0x8ea>
 800e3d8:	9a08      	ldr	r2, [sp, #32]
 800e3da:	4641      	mov	r1, r8
 800e3dc:	4648      	mov	r0, r9
 800e3de:	f000 fcb3 	bl	800ed48 <__pow5mult>
 800e3e2:	9002      	str	r0, [sp, #8]
 800e3e4:	2101      	movs	r1, #1
 800e3e6:	4648      	mov	r0, r9
 800e3e8:	f000 fbf6 	bl	800ebd8 <__i2b>
 800e3ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f000 81d8 	beq.w	800e7a6 <_dtoa_r+0xb56>
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	4601      	mov	r1, r0
 800e3fa:	4648      	mov	r0, r9
 800e3fc:	f000 fca4 	bl	800ed48 <__pow5mult>
 800e400:	9b07      	ldr	r3, [sp, #28]
 800e402:	2b01      	cmp	r3, #1
 800e404:	4604      	mov	r4, r0
 800e406:	f300 809f 	bgt.w	800e548 <_dtoa_r+0x8f8>
 800e40a:	9b04      	ldr	r3, [sp, #16]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f040 8097 	bne.w	800e540 <_dtoa_r+0x8f0>
 800e412:	9b05      	ldr	r3, [sp, #20]
 800e414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f040 8093 	bne.w	800e544 <_dtoa_r+0x8f4>
 800e41e:	9b05      	ldr	r3, [sp, #20]
 800e420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e424:	0d1b      	lsrs	r3, r3, #20
 800e426:	051b      	lsls	r3, r3, #20
 800e428:	b133      	cbz	r3, 800e438 <_dtoa_r+0x7e8>
 800e42a:	9b00      	ldr	r3, [sp, #0]
 800e42c:	3301      	adds	r3, #1
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	9b06      	ldr	r3, [sp, #24]
 800e432:	3301      	adds	r3, #1
 800e434:	9306      	str	r3, [sp, #24]
 800e436:	2301      	movs	r3, #1
 800e438:	9308      	str	r3, [sp, #32]
 800e43a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f000 81b8 	beq.w	800e7b2 <_dtoa_r+0xb62>
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e448:	6918      	ldr	r0, [r3, #16]
 800e44a:	f000 fb79 	bl	800eb40 <__hi0bits>
 800e44e:	f1c0 0020 	rsb	r0, r0, #32
 800e452:	9b06      	ldr	r3, [sp, #24]
 800e454:	4418      	add	r0, r3
 800e456:	f010 001f 	ands.w	r0, r0, #31
 800e45a:	f000 8082 	beq.w	800e562 <_dtoa_r+0x912>
 800e45e:	f1c0 0320 	rsb	r3, r0, #32
 800e462:	2b04      	cmp	r3, #4
 800e464:	dd73      	ble.n	800e54e <_dtoa_r+0x8fe>
 800e466:	9b00      	ldr	r3, [sp, #0]
 800e468:	f1c0 001c 	rsb	r0, r0, #28
 800e46c:	4403      	add	r3, r0
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	9b06      	ldr	r3, [sp, #24]
 800e472:	4403      	add	r3, r0
 800e474:	4406      	add	r6, r0
 800e476:	9306      	str	r3, [sp, #24]
 800e478:	9b00      	ldr	r3, [sp, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	dd05      	ble.n	800e48a <_dtoa_r+0x83a>
 800e47e:	9902      	ldr	r1, [sp, #8]
 800e480:	461a      	mov	r2, r3
 800e482:	4648      	mov	r0, r9
 800e484:	f000 fcba 	bl	800edfc <__lshift>
 800e488:	9002      	str	r0, [sp, #8]
 800e48a:	9b06      	ldr	r3, [sp, #24]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	dd05      	ble.n	800e49c <_dtoa_r+0x84c>
 800e490:	4621      	mov	r1, r4
 800e492:	461a      	mov	r2, r3
 800e494:	4648      	mov	r0, r9
 800e496:	f000 fcb1 	bl	800edfc <__lshift>
 800e49a:	4604      	mov	r4, r0
 800e49c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d061      	beq.n	800e566 <_dtoa_r+0x916>
 800e4a2:	9802      	ldr	r0, [sp, #8]
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	f000 fd15 	bl	800eed4 <__mcmp>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	da5b      	bge.n	800e566 <_dtoa_r+0x916>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9902      	ldr	r1, [sp, #8]
 800e4b2:	220a      	movs	r2, #10
 800e4b4:	4648      	mov	r0, r9
 800e4b6:	f000 fafd 	bl	800eab4 <__multadd>
 800e4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4bc:	9002      	str	r0, [sp, #8]
 800e4be:	f107 38ff 	add.w	r8, r7, #4294967295
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f000 8177 	beq.w	800e7b6 <_dtoa_r+0xb66>
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	220a      	movs	r2, #10
 800e4ce:	4648      	mov	r0, r9
 800e4d0:	f000 faf0 	bl	800eab4 <__multadd>
 800e4d4:	f1bb 0f00 	cmp.w	fp, #0
 800e4d8:	4605      	mov	r5, r0
 800e4da:	dc6f      	bgt.n	800e5bc <_dtoa_r+0x96c>
 800e4dc:	9b07      	ldr	r3, [sp, #28]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	dc49      	bgt.n	800e576 <_dtoa_r+0x926>
 800e4e2:	e06b      	b.n	800e5bc <_dtoa_r+0x96c>
 800e4e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e4e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e4ea:	e73c      	b.n	800e366 <_dtoa_r+0x716>
 800e4ec:	3fe00000 	.word	0x3fe00000
 800e4f0:	40240000 	.word	0x40240000
 800e4f4:	9b03      	ldr	r3, [sp, #12]
 800e4f6:	1e5c      	subs	r4, r3, #1
 800e4f8:	9b08      	ldr	r3, [sp, #32]
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	db09      	blt.n	800e512 <_dtoa_r+0x8c2>
 800e4fe:	1b1c      	subs	r4, r3, r4
 800e500:	9b03      	ldr	r3, [sp, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	f6bf af30 	bge.w	800e368 <_dtoa_r+0x718>
 800e508:	9b00      	ldr	r3, [sp, #0]
 800e50a:	9a03      	ldr	r2, [sp, #12]
 800e50c:	1a9e      	subs	r6, r3, r2
 800e50e:	2300      	movs	r3, #0
 800e510:	e72b      	b.n	800e36a <_dtoa_r+0x71a>
 800e512:	9b08      	ldr	r3, [sp, #32]
 800e514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e516:	9408      	str	r4, [sp, #32]
 800e518:	1ae3      	subs	r3, r4, r3
 800e51a:	441a      	add	r2, r3
 800e51c:	9e00      	ldr	r6, [sp, #0]
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	920d      	str	r2, [sp, #52]	@ 0x34
 800e522:	2400      	movs	r4, #0
 800e524:	e721      	b.n	800e36a <_dtoa_r+0x71a>
 800e526:	9c08      	ldr	r4, [sp, #32]
 800e528:	9e00      	ldr	r6, [sp, #0]
 800e52a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e52c:	e728      	b.n	800e380 <_dtoa_r+0x730>
 800e52e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e532:	e751      	b.n	800e3d8 <_dtoa_r+0x788>
 800e534:	9a08      	ldr	r2, [sp, #32]
 800e536:	9902      	ldr	r1, [sp, #8]
 800e538:	e750      	b.n	800e3dc <_dtoa_r+0x78c>
 800e53a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e53e:	e751      	b.n	800e3e4 <_dtoa_r+0x794>
 800e540:	2300      	movs	r3, #0
 800e542:	e779      	b.n	800e438 <_dtoa_r+0x7e8>
 800e544:	9b04      	ldr	r3, [sp, #16]
 800e546:	e777      	b.n	800e438 <_dtoa_r+0x7e8>
 800e548:	2300      	movs	r3, #0
 800e54a:	9308      	str	r3, [sp, #32]
 800e54c:	e779      	b.n	800e442 <_dtoa_r+0x7f2>
 800e54e:	d093      	beq.n	800e478 <_dtoa_r+0x828>
 800e550:	9a00      	ldr	r2, [sp, #0]
 800e552:	331c      	adds	r3, #28
 800e554:	441a      	add	r2, r3
 800e556:	9200      	str	r2, [sp, #0]
 800e558:	9a06      	ldr	r2, [sp, #24]
 800e55a:	441a      	add	r2, r3
 800e55c:	441e      	add	r6, r3
 800e55e:	9206      	str	r2, [sp, #24]
 800e560:	e78a      	b.n	800e478 <_dtoa_r+0x828>
 800e562:	4603      	mov	r3, r0
 800e564:	e7f4      	b.n	800e550 <_dtoa_r+0x900>
 800e566:	9b03      	ldr	r3, [sp, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	46b8      	mov	r8, r7
 800e56c:	dc20      	bgt.n	800e5b0 <_dtoa_r+0x960>
 800e56e:	469b      	mov	fp, r3
 800e570:	9b07      	ldr	r3, [sp, #28]
 800e572:	2b02      	cmp	r3, #2
 800e574:	dd1e      	ble.n	800e5b4 <_dtoa_r+0x964>
 800e576:	f1bb 0f00 	cmp.w	fp, #0
 800e57a:	f47f adb1 	bne.w	800e0e0 <_dtoa_r+0x490>
 800e57e:	4621      	mov	r1, r4
 800e580:	465b      	mov	r3, fp
 800e582:	2205      	movs	r2, #5
 800e584:	4648      	mov	r0, r9
 800e586:	f000 fa95 	bl	800eab4 <__multadd>
 800e58a:	4601      	mov	r1, r0
 800e58c:	4604      	mov	r4, r0
 800e58e:	9802      	ldr	r0, [sp, #8]
 800e590:	f000 fca0 	bl	800eed4 <__mcmp>
 800e594:	2800      	cmp	r0, #0
 800e596:	f77f ada3 	ble.w	800e0e0 <_dtoa_r+0x490>
 800e59a:	4656      	mov	r6, sl
 800e59c:	2331      	movs	r3, #49	@ 0x31
 800e59e:	f806 3b01 	strb.w	r3, [r6], #1
 800e5a2:	f108 0801 	add.w	r8, r8, #1
 800e5a6:	e59f      	b.n	800e0e8 <_dtoa_r+0x498>
 800e5a8:	9c03      	ldr	r4, [sp, #12]
 800e5aa:	46b8      	mov	r8, r7
 800e5ac:	4625      	mov	r5, r4
 800e5ae:	e7f4      	b.n	800e59a <_dtoa_r+0x94a>
 800e5b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f000 8101 	beq.w	800e7be <_dtoa_r+0xb6e>
 800e5bc:	2e00      	cmp	r6, #0
 800e5be:	dd05      	ble.n	800e5cc <_dtoa_r+0x97c>
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	4632      	mov	r2, r6
 800e5c4:	4648      	mov	r0, r9
 800e5c6:	f000 fc19 	bl	800edfc <__lshift>
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	9b08      	ldr	r3, [sp, #32]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d05c      	beq.n	800e68c <_dtoa_r+0xa3c>
 800e5d2:	6869      	ldr	r1, [r5, #4]
 800e5d4:	4648      	mov	r0, r9
 800e5d6:	f000 fa0b 	bl	800e9f0 <_Balloc>
 800e5da:	4606      	mov	r6, r0
 800e5dc:	b928      	cbnz	r0, 800e5ea <_dtoa_r+0x99a>
 800e5de:	4b82      	ldr	r3, [pc, #520]	@ (800e7e8 <_dtoa_r+0xb98>)
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e5e6:	f7ff bb4a 	b.w	800dc7e <_dtoa_r+0x2e>
 800e5ea:	692a      	ldr	r2, [r5, #16]
 800e5ec:	3202      	adds	r2, #2
 800e5ee:	0092      	lsls	r2, r2, #2
 800e5f0:	f105 010c 	add.w	r1, r5, #12
 800e5f4:	300c      	adds	r0, #12
 800e5f6:	f7ff fa92 	bl	800db1e <memcpy>
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4648      	mov	r0, r9
 800e600:	f000 fbfc 	bl	800edfc <__lshift>
 800e604:	f10a 0301 	add.w	r3, sl, #1
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	eb0a 030b 	add.w	r3, sl, fp
 800e60e:	9308      	str	r3, [sp, #32]
 800e610:	9b04      	ldr	r3, [sp, #16]
 800e612:	f003 0301 	and.w	r3, r3, #1
 800e616:	462f      	mov	r7, r5
 800e618:	9306      	str	r3, [sp, #24]
 800e61a:	4605      	mov	r5, r0
 800e61c:	9b00      	ldr	r3, [sp, #0]
 800e61e:	9802      	ldr	r0, [sp, #8]
 800e620:	4621      	mov	r1, r4
 800e622:	f103 3bff 	add.w	fp, r3, #4294967295
 800e626:	f7ff fa88 	bl	800db3a <quorem>
 800e62a:	4603      	mov	r3, r0
 800e62c:	3330      	adds	r3, #48	@ 0x30
 800e62e:	9003      	str	r0, [sp, #12]
 800e630:	4639      	mov	r1, r7
 800e632:	9802      	ldr	r0, [sp, #8]
 800e634:	9309      	str	r3, [sp, #36]	@ 0x24
 800e636:	f000 fc4d 	bl	800eed4 <__mcmp>
 800e63a:	462a      	mov	r2, r5
 800e63c:	9004      	str	r0, [sp, #16]
 800e63e:	4621      	mov	r1, r4
 800e640:	4648      	mov	r0, r9
 800e642:	f000 fc63 	bl	800ef0c <__mdiff>
 800e646:	68c2      	ldr	r2, [r0, #12]
 800e648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e64a:	4606      	mov	r6, r0
 800e64c:	bb02      	cbnz	r2, 800e690 <_dtoa_r+0xa40>
 800e64e:	4601      	mov	r1, r0
 800e650:	9802      	ldr	r0, [sp, #8]
 800e652:	f000 fc3f 	bl	800eed4 <__mcmp>
 800e656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e658:	4602      	mov	r2, r0
 800e65a:	4631      	mov	r1, r6
 800e65c:	4648      	mov	r0, r9
 800e65e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e660:	9309      	str	r3, [sp, #36]	@ 0x24
 800e662:	f000 fa05 	bl	800ea70 <_Bfree>
 800e666:	9b07      	ldr	r3, [sp, #28]
 800e668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e66a:	9e00      	ldr	r6, [sp, #0]
 800e66c:	ea42 0103 	orr.w	r1, r2, r3
 800e670:	9b06      	ldr	r3, [sp, #24]
 800e672:	4319      	orrs	r1, r3
 800e674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e676:	d10d      	bne.n	800e694 <_dtoa_r+0xa44>
 800e678:	2b39      	cmp	r3, #57	@ 0x39
 800e67a:	d027      	beq.n	800e6cc <_dtoa_r+0xa7c>
 800e67c:	9a04      	ldr	r2, [sp, #16]
 800e67e:	2a00      	cmp	r2, #0
 800e680:	dd01      	ble.n	800e686 <_dtoa_r+0xa36>
 800e682:	9b03      	ldr	r3, [sp, #12]
 800e684:	3331      	adds	r3, #49	@ 0x31
 800e686:	f88b 3000 	strb.w	r3, [fp]
 800e68a:	e52e      	b.n	800e0ea <_dtoa_r+0x49a>
 800e68c:	4628      	mov	r0, r5
 800e68e:	e7b9      	b.n	800e604 <_dtoa_r+0x9b4>
 800e690:	2201      	movs	r2, #1
 800e692:	e7e2      	b.n	800e65a <_dtoa_r+0xa0a>
 800e694:	9904      	ldr	r1, [sp, #16]
 800e696:	2900      	cmp	r1, #0
 800e698:	db04      	blt.n	800e6a4 <_dtoa_r+0xa54>
 800e69a:	9807      	ldr	r0, [sp, #28]
 800e69c:	4301      	orrs	r1, r0
 800e69e:	9806      	ldr	r0, [sp, #24]
 800e6a0:	4301      	orrs	r1, r0
 800e6a2:	d120      	bne.n	800e6e6 <_dtoa_r+0xa96>
 800e6a4:	2a00      	cmp	r2, #0
 800e6a6:	ddee      	ble.n	800e686 <_dtoa_r+0xa36>
 800e6a8:	9902      	ldr	r1, [sp, #8]
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	4648      	mov	r0, r9
 800e6b0:	f000 fba4 	bl	800edfc <__lshift>
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	9002      	str	r0, [sp, #8]
 800e6b8:	f000 fc0c 	bl	800eed4 <__mcmp>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	9b00      	ldr	r3, [sp, #0]
 800e6c0:	dc02      	bgt.n	800e6c8 <_dtoa_r+0xa78>
 800e6c2:	d1e0      	bne.n	800e686 <_dtoa_r+0xa36>
 800e6c4:	07da      	lsls	r2, r3, #31
 800e6c6:	d5de      	bpl.n	800e686 <_dtoa_r+0xa36>
 800e6c8:	2b39      	cmp	r3, #57	@ 0x39
 800e6ca:	d1da      	bne.n	800e682 <_dtoa_r+0xa32>
 800e6cc:	2339      	movs	r3, #57	@ 0x39
 800e6ce:	f88b 3000 	strb.w	r3, [fp]
 800e6d2:	4633      	mov	r3, r6
 800e6d4:	461e      	mov	r6, r3
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e6dc:	2a39      	cmp	r2, #57	@ 0x39
 800e6de:	d04e      	beq.n	800e77e <_dtoa_r+0xb2e>
 800e6e0:	3201      	adds	r2, #1
 800e6e2:	701a      	strb	r2, [r3, #0]
 800e6e4:	e501      	b.n	800e0ea <_dtoa_r+0x49a>
 800e6e6:	2a00      	cmp	r2, #0
 800e6e8:	dd03      	ble.n	800e6f2 <_dtoa_r+0xaa2>
 800e6ea:	2b39      	cmp	r3, #57	@ 0x39
 800e6ec:	d0ee      	beq.n	800e6cc <_dtoa_r+0xa7c>
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	e7c9      	b.n	800e686 <_dtoa_r+0xa36>
 800e6f2:	9a00      	ldr	r2, [sp, #0]
 800e6f4:	9908      	ldr	r1, [sp, #32]
 800e6f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e6fa:	428a      	cmp	r2, r1
 800e6fc:	d028      	beq.n	800e750 <_dtoa_r+0xb00>
 800e6fe:	9902      	ldr	r1, [sp, #8]
 800e700:	2300      	movs	r3, #0
 800e702:	220a      	movs	r2, #10
 800e704:	4648      	mov	r0, r9
 800e706:	f000 f9d5 	bl	800eab4 <__multadd>
 800e70a:	42af      	cmp	r7, r5
 800e70c:	9002      	str	r0, [sp, #8]
 800e70e:	f04f 0300 	mov.w	r3, #0
 800e712:	f04f 020a 	mov.w	r2, #10
 800e716:	4639      	mov	r1, r7
 800e718:	4648      	mov	r0, r9
 800e71a:	d107      	bne.n	800e72c <_dtoa_r+0xadc>
 800e71c:	f000 f9ca 	bl	800eab4 <__multadd>
 800e720:	4607      	mov	r7, r0
 800e722:	4605      	mov	r5, r0
 800e724:	9b00      	ldr	r3, [sp, #0]
 800e726:	3301      	adds	r3, #1
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	e777      	b.n	800e61c <_dtoa_r+0x9cc>
 800e72c:	f000 f9c2 	bl	800eab4 <__multadd>
 800e730:	4629      	mov	r1, r5
 800e732:	4607      	mov	r7, r0
 800e734:	2300      	movs	r3, #0
 800e736:	220a      	movs	r2, #10
 800e738:	4648      	mov	r0, r9
 800e73a:	f000 f9bb 	bl	800eab4 <__multadd>
 800e73e:	4605      	mov	r5, r0
 800e740:	e7f0      	b.n	800e724 <_dtoa_r+0xad4>
 800e742:	f1bb 0f00 	cmp.w	fp, #0
 800e746:	bfcc      	ite	gt
 800e748:	465e      	movgt	r6, fp
 800e74a:	2601      	movle	r6, #1
 800e74c:	4456      	add	r6, sl
 800e74e:	2700      	movs	r7, #0
 800e750:	9902      	ldr	r1, [sp, #8]
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	2201      	movs	r2, #1
 800e756:	4648      	mov	r0, r9
 800e758:	f000 fb50 	bl	800edfc <__lshift>
 800e75c:	4621      	mov	r1, r4
 800e75e:	9002      	str	r0, [sp, #8]
 800e760:	f000 fbb8 	bl	800eed4 <__mcmp>
 800e764:	2800      	cmp	r0, #0
 800e766:	dcb4      	bgt.n	800e6d2 <_dtoa_r+0xa82>
 800e768:	d102      	bne.n	800e770 <_dtoa_r+0xb20>
 800e76a:	9b00      	ldr	r3, [sp, #0]
 800e76c:	07db      	lsls	r3, r3, #31
 800e76e:	d4b0      	bmi.n	800e6d2 <_dtoa_r+0xa82>
 800e770:	4633      	mov	r3, r6
 800e772:	461e      	mov	r6, r3
 800e774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e778:	2a30      	cmp	r2, #48	@ 0x30
 800e77a:	d0fa      	beq.n	800e772 <_dtoa_r+0xb22>
 800e77c:	e4b5      	b.n	800e0ea <_dtoa_r+0x49a>
 800e77e:	459a      	cmp	sl, r3
 800e780:	d1a8      	bne.n	800e6d4 <_dtoa_r+0xa84>
 800e782:	2331      	movs	r3, #49	@ 0x31
 800e784:	f108 0801 	add.w	r8, r8, #1
 800e788:	f88a 3000 	strb.w	r3, [sl]
 800e78c:	e4ad      	b.n	800e0ea <_dtoa_r+0x49a>
 800e78e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e790:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e7ec <_dtoa_r+0xb9c>
 800e794:	b11b      	cbz	r3, 800e79e <_dtoa_r+0xb4e>
 800e796:	f10a 0308 	add.w	r3, sl, #8
 800e79a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e79c:	6013      	str	r3, [r2, #0]
 800e79e:	4650      	mov	r0, sl
 800e7a0:	b017      	add	sp, #92	@ 0x5c
 800e7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a6:	9b07      	ldr	r3, [sp, #28]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	f77f ae2e 	ble.w	800e40a <_dtoa_r+0x7ba>
 800e7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7b0:	9308      	str	r3, [sp, #32]
 800e7b2:	2001      	movs	r0, #1
 800e7b4:	e64d      	b.n	800e452 <_dtoa_r+0x802>
 800e7b6:	f1bb 0f00 	cmp.w	fp, #0
 800e7ba:	f77f aed9 	ble.w	800e570 <_dtoa_r+0x920>
 800e7be:	4656      	mov	r6, sl
 800e7c0:	9802      	ldr	r0, [sp, #8]
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	f7ff f9b9 	bl	800db3a <quorem>
 800e7c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e7cc:	f806 3b01 	strb.w	r3, [r6], #1
 800e7d0:	eba6 020a 	sub.w	r2, r6, sl
 800e7d4:	4593      	cmp	fp, r2
 800e7d6:	ddb4      	ble.n	800e742 <_dtoa_r+0xaf2>
 800e7d8:	9902      	ldr	r1, [sp, #8]
 800e7da:	2300      	movs	r3, #0
 800e7dc:	220a      	movs	r2, #10
 800e7de:	4648      	mov	r0, r9
 800e7e0:	f000 f968 	bl	800eab4 <__multadd>
 800e7e4:	9002      	str	r0, [sp, #8]
 800e7e6:	e7eb      	b.n	800e7c0 <_dtoa_r+0xb70>
 800e7e8:	08012de4 	.word	0x08012de4
 800e7ec:	08012d68 	.word	0x08012d68

0800e7f0 <_free_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4605      	mov	r5, r0
 800e7f4:	2900      	cmp	r1, #0
 800e7f6:	d041      	beq.n	800e87c <_free_r+0x8c>
 800e7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7fc:	1f0c      	subs	r4, r1, #4
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bfb8      	it	lt
 800e802:	18e4      	addlt	r4, r4, r3
 800e804:	f000 f8e8 	bl	800e9d8 <__malloc_lock>
 800e808:	4a1d      	ldr	r2, [pc, #116]	@ (800e880 <_free_r+0x90>)
 800e80a:	6813      	ldr	r3, [r2, #0]
 800e80c:	b933      	cbnz	r3, 800e81c <_free_r+0x2c>
 800e80e:	6063      	str	r3, [r4, #4]
 800e810:	6014      	str	r4, [r2, #0]
 800e812:	4628      	mov	r0, r5
 800e814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e818:	f000 b8e4 	b.w	800e9e4 <__malloc_unlock>
 800e81c:	42a3      	cmp	r3, r4
 800e81e:	d908      	bls.n	800e832 <_free_r+0x42>
 800e820:	6820      	ldr	r0, [r4, #0]
 800e822:	1821      	adds	r1, r4, r0
 800e824:	428b      	cmp	r3, r1
 800e826:	bf01      	itttt	eq
 800e828:	6819      	ldreq	r1, [r3, #0]
 800e82a:	685b      	ldreq	r3, [r3, #4]
 800e82c:	1809      	addeq	r1, r1, r0
 800e82e:	6021      	streq	r1, [r4, #0]
 800e830:	e7ed      	b.n	800e80e <_free_r+0x1e>
 800e832:	461a      	mov	r2, r3
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	b10b      	cbz	r3, 800e83c <_free_r+0x4c>
 800e838:	42a3      	cmp	r3, r4
 800e83a:	d9fa      	bls.n	800e832 <_free_r+0x42>
 800e83c:	6811      	ldr	r1, [r2, #0]
 800e83e:	1850      	adds	r0, r2, r1
 800e840:	42a0      	cmp	r0, r4
 800e842:	d10b      	bne.n	800e85c <_free_r+0x6c>
 800e844:	6820      	ldr	r0, [r4, #0]
 800e846:	4401      	add	r1, r0
 800e848:	1850      	adds	r0, r2, r1
 800e84a:	4283      	cmp	r3, r0
 800e84c:	6011      	str	r1, [r2, #0]
 800e84e:	d1e0      	bne.n	800e812 <_free_r+0x22>
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	6053      	str	r3, [r2, #4]
 800e856:	4408      	add	r0, r1
 800e858:	6010      	str	r0, [r2, #0]
 800e85a:	e7da      	b.n	800e812 <_free_r+0x22>
 800e85c:	d902      	bls.n	800e864 <_free_r+0x74>
 800e85e:	230c      	movs	r3, #12
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	e7d6      	b.n	800e812 <_free_r+0x22>
 800e864:	6820      	ldr	r0, [r4, #0]
 800e866:	1821      	adds	r1, r4, r0
 800e868:	428b      	cmp	r3, r1
 800e86a:	bf04      	itt	eq
 800e86c:	6819      	ldreq	r1, [r3, #0]
 800e86e:	685b      	ldreq	r3, [r3, #4]
 800e870:	6063      	str	r3, [r4, #4]
 800e872:	bf04      	itt	eq
 800e874:	1809      	addeq	r1, r1, r0
 800e876:	6021      	streq	r1, [r4, #0]
 800e878:	6054      	str	r4, [r2, #4]
 800e87a:	e7ca      	b.n	800e812 <_free_r+0x22>
 800e87c:	bd38      	pop	{r3, r4, r5, pc}
 800e87e:	bf00      	nop
 800e880:	20000f48 	.word	0x20000f48

0800e884 <malloc>:
 800e884:	4b02      	ldr	r3, [pc, #8]	@ (800e890 <malloc+0xc>)
 800e886:	4601      	mov	r1, r0
 800e888:	6818      	ldr	r0, [r3, #0]
 800e88a:	f000 b825 	b.w	800e8d8 <_malloc_r>
 800e88e:	bf00      	nop
 800e890:	200000c8 	.word	0x200000c8

0800e894 <sbrk_aligned>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	4e0f      	ldr	r6, [pc, #60]	@ (800e8d4 <sbrk_aligned+0x40>)
 800e898:	460c      	mov	r4, r1
 800e89a:	6831      	ldr	r1, [r6, #0]
 800e89c:	4605      	mov	r5, r0
 800e89e:	b911      	cbnz	r1, 800e8a6 <sbrk_aligned+0x12>
 800e8a0:	f000 fe3e 	bl	800f520 <_sbrk_r>
 800e8a4:	6030      	str	r0, [r6, #0]
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f000 fe39 	bl	800f520 <_sbrk_r>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	d103      	bne.n	800e8ba <sbrk_aligned+0x26>
 800e8b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ba:	1cc4      	adds	r4, r0, #3
 800e8bc:	f024 0403 	bic.w	r4, r4, #3
 800e8c0:	42a0      	cmp	r0, r4
 800e8c2:	d0f8      	beq.n	800e8b6 <sbrk_aligned+0x22>
 800e8c4:	1a21      	subs	r1, r4, r0
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f000 fe2a 	bl	800f520 <_sbrk_r>
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d1f2      	bne.n	800e8b6 <sbrk_aligned+0x22>
 800e8d0:	e7ef      	b.n	800e8b2 <sbrk_aligned+0x1e>
 800e8d2:	bf00      	nop
 800e8d4:	20000f44 	.word	0x20000f44

0800e8d8 <_malloc_r>:
 800e8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	1ccd      	adds	r5, r1, #3
 800e8de:	f025 0503 	bic.w	r5, r5, #3
 800e8e2:	3508      	adds	r5, #8
 800e8e4:	2d0c      	cmp	r5, #12
 800e8e6:	bf38      	it	cc
 800e8e8:	250c      	movcc	r5, #12
 800e8ea:	2d00      	cmp	r5, #0
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	db01      	blt.n	800e8f4 <_malloc_r+0x1c>
 800e8f0:	42a9      	cmp	r1, r5
 800e8f2:	d904      	bls.n	800e8fe <_malloc_r+0x26>
 800e8f4:	230c      	movs	r3, #12
 800e8f6:	6033      	str	r3, [r6, #0]
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e9d4 <_malloc_r+0xfc>
 800e902:	f000 f869 	bl	800e9d8 <__malloc_lock>
 800e906:	f8d8 3000 	ldr.w	r3, [r8]
 800e90a:	461c      	mov	r4, r3
 800e90c:	bb44      	cbnz	r4, 800e960 <_malloc_r+0x88>
 800e90e:	4629      	mov	r1, r5
 800e910:	4630      	mov	r0, r6
 800e912:	f7ff ffbf 	bl	800e894 <sbrk_aligned>
 800e916:	1c43      	adds	r3, r0, #1
 800e918:	4604      	mov	r4, r0
 800e91a:	d158      	bne.n	800e9ce <_malloc_r+0xf6>
 800e91c:	f8d8 4000 	ldr.w	r4, [r8]
 800e920:	4627      	mov	r7, r4
 800e922:	2f00      	cmp	r7, #0
 800e924:	d143      	bne.n	800e9ae <_malloc_r+0xd6>
 800e926:	2c00      	cmp	r4, #0
 800e928:	d04b      	beq.n	800e9c2 <_malloc_r+0xea>
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	4639      	mov	r1, r7
 800e92e:	4630      	mov	r0, r6
 800e930:	eb04 0903 	add.w	r9, r4, r3
 800e934:	f000 fdf4 	bl	800f520 <_sbrk_r>
 800e938:	4581      	cmp	r9, r0
 800e93a:	d142      	bne.n	800e9c2 <_malloc_r+0xea>
 800e93c:	6821      	ldr	r1, [r4, #0]
 800e93e:	1a6d      	subs	r5, r5, r1
 800e940:	4629      	mov	r1, r5
 800e942:	4630      	mov	r0, r6
 800e944:	f7ff ffa6 	bl	800e894 <sbrk_aligned>
 800e948:	3001      	adds	r0, #1
 800e94a:	d03a      	beq.n	800e9c2 <_malloc_r+0xea>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	442b      	add	r3, r5
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	f8d8 3000 	ldr.w	r3, [r8]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	bb62      	cbnz	r2, 800e9b4 <_malloc_r+0xdc>
 800e95a:	f8c8 7000 	str.w	r7, [r8]
 800e95e:	e00f      	b.n	800e980 <_malloc_r+0xa8>
 800e960:	6822      	ldr	r2, [r4, #0]
 800e962:	1b52      	subs	r2, r2, r5
 800e964:	d420      	bmi.n	800e9a8 <_malloc_r+0xd0>
 800e966:	2a0b      	cmp	r2, #11
 800e968:	d917      	bls.n	800e99a <_malloc_r+0xc2>
 800e96a:	1961      	adds	r1, r4, r5
 800e96c:	42a3      	cmp	r3, r4
 800e96e:	6025      	str	r5, [r4, #0]
 800e970:	bf18      	it	ne
 800e972:	6059      	strne	r1, [r3, #4]
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	bf08      	it	eq
 800e978:	f8c8 1000 	streq.w	r1, [r8]
 800e97c:	5162      	str	r2, [r4, r5]
 800e97e:	604b      	str	r3, [r1, #4]
 800e980:	4630      	mov	r0, r6
 800e982:	f000 f82f 	bl	800e9e4 <__malloc_unlock>
 800e986:	f104 000b 	add.w	r0, r4, #11
 800e98a:	1d23      	adds	r3, r4, #4
 800e98c:	f020 0007 	bic.w	r0, r0, #7
 800e990:	1ac2      	subs	r2, r0, r3
 800e992:	bf1c      	itt	ne
 800e994:	1a1b      	subne	r3, r3, r0
 800e996:	50a3      	strne	r3, [r4, r2]
 800e998:	e7af      	b.n	800e8fa <_malloc_r+0x22>
 800e99a:	6862      	ldr	r2, [r4, #4]
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	bf0c      	ite	eq
 800e9a0:	f8c8 2000 	streq.w	r2, [r8]
 800e9a4:	605a      	strne	r2, [r3, #4]
 800e9a6:	e7eb      	b.n	800e980 <_malloc_r+0xa8>
 800e9a8:	4623      	mov	r3, r4
 800e9aa:	6864      	ldr	r4, [r4, #4]
 800e9ac:	e7ae      	b.n	800e90c <_malloc_r+0x34>
 800e9ae:	463c      	mov	r4, r7
 800e9b0:	687f      	ldr	r7, [r7, #4]
 800e9b2:	e7b6      	b.n	800e922 <_malloc_r+0x4a>
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	42a3      	cmp	r3, r4
 800e9ba:	d1fb      	bne.n	800e9b4 <_malloc_r+0xdc>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	6053      	str	r3, [r2, #4]
 800e9c0:	e7de      	b.n	800e980 <_malloc_r+0xa8>
 800e9c2:	230c      	movs	r3, #12
 800e9c4:	6033      	str	r3, [r6, #0]
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f000 f80c 	bl	800e9e4 <__malloc_unlock>
 800e9cc:	e794      	b.n	800e8f8 <_malloc_r+0x20>
 800e9ce:	6005      	str	r5, [r0, #0]
 800e9d0:	e7d6      	b.n	800e980 <_malloc_r+0xa8>
 800e9d2:	bf00      	nop
 800e9d4:	20000f48 	.word	0x20000f48

0800e9d8 <__malloc_lock>:
 800e9d8:	4801      	ldr	r0, [pc, #4]	@ (800e9e0 <__malloc_lock+0x8>)
 800e9da:	f7ff b89e 	b.w	800db1a <__retarget_lock_acquire_recursive>
 800e9de:	bf00      	nop
 800e9e0:	20000f40 	.word	0x20000f40

0800e9e4 <__malloc_unlock>:
 800e9e4:	4801      	ldr	r0, [pc, #4]	@ (800e9ec <__malloc_unlock+0x8>)
 800e9e6:	f7ff b899 	b.w	800db1c <__retarget_lock_release_recursive>
 800e9ea:	bf00      	nop
 800e9ec:	20000f40 	.word	0x20000f40

0800e9f0 <_Balloc>:
 800e9f0:	b570      	push	{r4, r5, r6, lr}
 800e9f2:	69c6      	ldr	r6, [r0, #28]
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	460d      	mov	r5, r1
 800e9f8:	b976      	cbnz	r6, 800ea18 <_Balloc+0x28>
 800e9fa:	2010      	movs	r0, #16
 800e9fc:	f7ff ff42 	bl	800e884 <malloc>
 800ea00:	4602      	mov	r2, r0
 800ea02:	61e0      	str	r0, [r4, #28]
 800ea04:	b920      	cbnz	r0, 800ea10 <_Balloc+0x20>
 800ea06:	4b18      	ldr	r3, [pc, #96]	@ (800ea68 <_Balloc+0x78>)
 800ea08:	4818      	ldr	r0, [pc, #96]	@ (800ea6c <_Balloc+0x7c>)
 800ea0a:	216b      	movs	r1, #107	@ 0x6b
 800ea0c:	f000 fd98 	bl	800f540 <__assert_func>
 800ea10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea14:	6006      	str	r6, [r0, #0]
 800ea16:	60c6      	str	r6, [r0, #12]
 800ea18:	69e6      	ldr	r6, [r4, #28]
 800ea1a:	68f3      	ldr	r3, [r6, #12]
 800ea1c:	b183      	cbz	r3, 800ea40 <_Balloc+0x50>
 800ea1e:	69e3      	ldr	r3, [r4, #28]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea26:	b9b8      	cbnz	r0, 800ea58 <_Balloc+0x68>
 800ea28:	2101      	movs	r1, #1
 800ea2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ea2e:	1d72      	adds	r2, r6, #5
 800ea30:	0092      	lsls	r2, r2, #2
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 fda2 	bl	800f57c <_calloc_r>
 800ea38:	b160      	cbz	r0, 800ea54 <_Balloc+0x64>
 800ea3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea3e:	e00e      	b.n	800ea5e <_Balloc+0x6e>
 800ea40:	2221      	movs	r2, #33	@ 0x21
 800ea42:	2104      	movs	r1, #4
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 fd99 	bl	800f57c <_calloc_r>
 800ea4a:	69e3      	ldr	r3, [r4, #28]
 800ea4c:	60f0      	str	r0, [r6, #12]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d1e4      	bne.n	800ea1e <_Balloc+0x2e>
 800ea54:	2000      	movs	r0, #0
 800ea56:	bd70      	pop	{r4, r5, r6, pc}
 800ea58:	6802      	ldr	r2, [r0, #0]
 800ea5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea5e:	2300      	movs	r3, #0
 800ea60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea64:	e7f7      	b.n	800ea56 <_Balloc+0x66>
 800ea66:	bf00      	nop
 800ea68:	08012d75 	.word	0x08012d75
 800ea6c:	08012df5 	.word	0x08012df5

0800ea70 <_Bfree>:
 800ea70:	b570      	push	{r4, r5, r6, lr}
 800ea72:	69c6      	ldr	r6, [r0, #28]
 800ea74:	4605      	mov	r5, r0
 800ea76:	460c      	mov	r4, r1
 800ea78:	b976      	cbnz	r6, 800ea98 <_Bfree+0x28>
 800ea7a:	2010      	movs	r0, #16
 800ea7c:	f7ff ff02 	bl	800e884 <malloc>
 800ea80:	4602      	mov	r2, r0
 800ea82:	61e8      	str	r0, [r5, #28]
 800ea84:	b920      	cbnz	r0, 800ea90 <_Bfree+0x20>
 800ea86:	4b09      	ldr	r3, [pc, #36]	@ (800eaac <_Bfree+0x3c>)
 800ea88:	4809      	ldr	r0, [pc, #36]	@ (800eab0 <_Bfree+0x40>)
 800ea8a:	218f      	movs	r1, #143	@ 0x8f
 800ea8c:	f000 fd58 	bl	800f540 <__assert_func>
 800ea90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea94:	6006      	str	r6, [r0, #0]
 800ea96:	60c6      	str	r6, [r0, #12]
 800ea98:	b13c      	cbz	r4, 800eaaa <_Bfree+0x3a>
 800ea9a:	69eb      	ldr	r3, [r5, #28]
 800ea9c:	6862      	ldr	r2, [r4, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eaa4:	6021      	str	r1, [r4, #0]
 800eaa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eaaa:	bd70      	pop	{r4, r5, r6, pc}
 800eaac:	08012d75 	.word	0x08012d75
 800eab0:	08012df5 	.word	0x08012df5

0800eab4 <__multadd>:
 800eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab8:	690d      	ldr	r5, [r1, #16]
 800eaba:	4607      	mov	r7, r0
 800eabc:	460c      	mov	r4, r1
 800eabe:	461e      	mov	r6, r3
 800eac0:	f101 0c14 	add.w	ip, r1, #20
 800eac4:	2000      	movs	r0, #0
 800eac6:	f8dc 3000 	ldr.w	r3, [ip]
 800eaca:	b299      	uxth	r1, r3
 800eacc:	fb02 6101 	mla	r1, r2, r1, r6
 800ead0:	0c1e      	lsrs	r6, r3, #16
 800ead2:	0c0b      	lsrs	r3, r1, #16
 800ead4:	fb02 3306 	mla	r3, r2, r6, r3
 800ead8:	b289      	uxth	r1, r1
 800eada:	3001      	adds	r0, #1
 800eadc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eae0:	4285      	cmp	r5, r0
 800eae2:	f84c 1b04 	str.w	r1, [ip], #4
 800eae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaea:	dcec      	bgt.n	800eac6 <__multadd+0x12>
 800eaec:	b30e      	cbz	r6, 800eb32 <__multadd+0x7e>
 800eaee:	68a3      	ldr	r3, [r4, #8]
 800eaf0:	42ab      	cmp	r3, r5
 800eaf2:	dc19      	bgt.n	800eb28 <__multadd+0x74>
 800eaf4:	6861      	ldr	r1, [r4, #4]
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	3101      	adds	r1, #1
 800eafa:	f7ff ff79 	bl	800e9f0 <_Balloc>
 800eafe:	4680      	mov	r8, r0
 800eb00:	b928      	cbnz	r0, 800eb0e <__multadd+0x5a>
 800eb02:	4602      	mov	r2, r0
 800eb04:	4b0c      	ldr	r3, [pc, #48]	@ (800eb38 <__multadd+0x84>)
 800eb06:	480d      	ldr	r0, [pc, #52]	@ (800eb3c <__multadd+0x88>)
 800eb08:	21ba      	movs	r1, #186	@ 0xba
 800eb0a:	f000 fd19 	bl	800f540 <__assert_func>
 800eb0e:	6922      	ldr	r2, [r4, #16]
 800eb10:	3202      	adds	r2, #2
 800eb12:	f104 010c 	add.w	r1, r4, #12
 800eb16:	0092      	lsls	r2, r2, #2
 800eb18:	300c      	adds	r0, #12
 800eb1a:	f7ff f800 	bl	800db1e <memcpy>
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7ff ffa5 	bl	800ea70 <_Bfree>
 800eb26:	4644      	mov	r4, r8
 800eb28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb2c:	3501      	adds	r5, #1
 800eb2e:	615e      	str	r6, [r3, #20]
 800eb30:	6125      	str	r5, [r4, #16]
 800eb32:	4620      	mov	r0, r4
 800eb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb38:	08012de4 	.word	0x08012de4
 800eb3c:	08012df5 	.word	0x08012df5

0800eb40 <__hi0bits>:
 800eb40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eb44:	4603      	mov	r3, r0
 800eb46:	bf36      	itet	cc
 800eb48:	0403      	lslcc	r3, r0, #16
 800eb4a:	2000      	movcs	r0, #0
 800eb4c:	2010      	movcc	r0, #16
 800eb4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eb52:	bf3c      	itt	cc
 800eb54:	021b      	lslcc	r3, r3, #8
 800eb56:	3008      	addcc	r0, #8
 800eb58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb5c:	bf3c      	itt	cc
 800eb5e:	011b      	lslcc	r3, r3, #4
 800eb60:	3004      	addcc	r0, #4
 800eb62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb66:	bf3c      	itt	cc
 800eb68:	009b      	lslcc	r3, r3, #2
 800eb6a:	3002      	addcc	r0, #2
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	db05      	blt.n	800eb7c <__hi0bits+0x3c>
 800eb70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb74:	f100 0001 	add.w	r0, r0, #1
 800eb78:	bf08      	it	eq
 800eb7a:	2020      	moveq	r0, #32
 800eb7c:	4770      	bx	lr

0800eb7e <__lo0bits>:
 800eb7e:	6803      	ldr	r3, [r0, #0]
 800eb80:	4602      	mov	r2, r0
 800eb82:	f013 0007 	ands.w	r0, r3, #7
 800eb86:	d00b      	beq.n	800eba0 <__lo0bits+0x22>
 800eb88:	07d9      	lsls	r1, r3, #31
 800eb8a:	d421      	bmi.n	800ebd0 <__lo0bits+0x52>
 800eb8c:	0798      	lsls	r0, r3, #30
 800eb8e:	bf49      	itett	mi
 800eb90:	085b      	lsrmi	r3, r3, #1
 800eb92:	089b      	lsrpl	r3, r3, #2
 800eb94:	2001      	movmi	r0, #1
 800eb96:	6013      	strmi	r3, [r2, #0]
 800eb98:	bf5c      	itt	pl
 800eb9a:	6013      	strpl	r3, [r2, #0]
 800eb9c:	2002      	movpl	r0, #2
 800eb9e:	4770      	bx	lr
 800eba0:	b299      	uxth	r1, r3
 800eba2:	b909      	cbnz	r1, 800eba8 <__lo0bits+0x2a>
 800eba4:	0c1b      	lsrs	r3, r3, #16
 800eba6:	2010      	movs	r0, #16
 800eba8:	b2d9      	uxtb	r1, r3
 800ebaa:	b909      	cbnz	r1, 800ebb0 <__lo0bits+0x32>
 800ebac:	3008      	adds	r0, #8
 800ebae:	0a1b      	lsrs	r3, r3, #8
 800ebb0:	0719      	lsls	r1, r3, #28
 800ebb2:	bf04      	itt	eq
 800ebb4:	091b      	lsreq	r3, r3, #4
 800ebb6:	3004      	addeq	r0, #4
 800ebb8:	0799      	lsls	r1, r3, #30
 800ebba:	bf04      	itt	eq
 800ebbc:	089b      	lsreq	r3, r3, #2
 800ebbe:	3002      	addeq	r0, #2
 800ebc0:	07d9      	lsls	r1, r3, #31
 800ebc2:	d403      	bmi.n	800ebcc <__lo0bits+0x4e>
 800ebc4:	085b      	lsrs	r3, r3, #1
 800ebc6:	f100 0001 	add.w	r0, r0, #1
 800ebca:	d003      	beq.n	800ebd4 <__lo0bits+0x56>
 800ebcc:	6013      	str	r3, [r2, #0]
 800ebce:	4770      	bx	lr
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	4770      	bx	lr
 800ebd4:	2020      	movs	r0, #32
 800ebd6:	4770      	bx	lr

0800ebd8 <__i2b>:
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	460c      	mov	r4, r1
 800ebdc:	2101      	movs	r1, #1
 800ebde:	f7ff ff07 	bl	800e9f0 <_Balloc>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	b928      	cbnz	r0, 800ebf2 <__i2b+0x1a>
 800ebe6:	4b05      	ldr	r3, [pc, #20]	@ (800ebfc <__i2b+0x24>)
 800ebe8:	4805      	ldr	r0, [pc, #20]	@ (800ec00 <__i2b+0x28>)
 800ebea:	f240 1145 	movw	r1, #325	@ 0x145
 800ebee:	f000 fca7 	bl	800f540 <__assert_func>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	6144      	str	r4, [r0, #20]
 800ebf6:	6103      	str	r3, [r0, #16]
 800ebf8:	bd10      	pop	{r4, pc}
 800ebfa:	bf00      	nop
 800ebfc:	08012de4 	.word	0x08012de4
 800ec00:	08012df5 	.word	0x08012df5

0800ec04 <__multiply>:
 800ec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec08:	4617      	mov	r7, r2
 800ec0a:	690a      	ldr	r2, [r1, #16]
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	bfa8      	it	ge
 800ec12:	463b      	movge	r3, r7
 800ec14:	4689      	mov	r9, r1
 800ec16:	bfa4      	itt	ge
 800ec18:	460f      	movge	r7, r1
 800ec1a:	4699      	movge	r9, r3
 800ec1c:	693d      	ldr	r5, [r7, #16]
 800ec1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	6879      	ldr	r1, [r7, #4]
 800ec26:	eb05 060a 	add.w	r6, r5, sl
 800ec2a:	42b3      	cmp	r3, r6
 800ec2c:	b085      	sub	sp, #20
 800ec2e:	bfb8      	it	lt
 800ec30:	3101      	addlt	r1, #1
 800ec32:	f7ff fedd 	bl	800e9f0 <_Balloc>
 800ec36:	b930      	cbnz	r0, 800ec46 <__multiply+0x42>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	4b41      	ldr	r3, [pc, #260]	@ (800ed40 <__multiply+0x13c>)
 800ec3c:	4841      	ldr	r0, [pc, #260]	@ (800ed44 <__multiply+0x140>)
 800ec3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ec42:	f000 fc7d 	bl	800f540 <__assert_func>
 800ec46:	f100 0414 	add.w	r4, r0, #20
 800ec4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ec4e:	4623      	mov	r3, r4
 800ec50:	2200      	movs	r2, #0
 800ec52:	4573      	cmp	r3, lr
 800ec54:	d320      	bcc.n	800ec98 <__multiply+0x94>
 800ec56:	f107 0814 	add.w	r8, r7, #20
 800ec5a:	f109 0114 	add.w	r1, r9, #20
 800ec5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ec62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ec66:	9302      	str	r3, [sp, #8]
 800ec68:	1beb      	subs	r3, r5, r7
 800ec6a:	3b15      	subs	r3, #21
 800ec6c:	f023 0303 	bic.w	r3, r3, #3
 800ec70:	3304      	adds	r3, #4
 800ec72:	3715      	adds	r7, #21
 800ec74:	42bd      	cmp	r5, r7
 800ec76:	bf38      	it	cc
 800ec78:	2304      	movcc	r3, #4
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	9b02      	ldr	r3, [sp, #8]
 800ec7e:	9103      	str	r1, [sp, #12]
 800ec80:	428b      	cmp	r3, r1
 800ec82:	d80c      	bhi.n	800ec9e <__multiply+0x9a>
 800ec84:	2e00      	cmp	r6, #0
 800ec86:	dd03      	ble.n	800ec90 <__multiply+0x8c>
 800ec88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d055      	beq.n	800ed3c <__multiply+0x138>
 800ec90:	6106      	str	r6, [r0, #16]
 800ec92:	b005      	add	sp, #20
 800ec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec98:	f843 2b04 	str.w	r2, [r3], #4
 800ec9c:	e7d9      	b.n	800ec52 <__multiply+0x4e>
 800ec9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800eca2:	f1ba 0f00 	cmp.w	sl, #0
 800eca6:	d01f      	beq.n	800ece8 <__multiply+0xe4>
 800eca8:	46c4      	mov	ip, r8
 800ecaa:	46a1      	mov	r9, r4
 800ecac:	2700      	movs	r7, #0
 800ecae:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ecb2:	f8d9 3000 	ldr.w	r3, [r9]
 800ecb6:	fa1f fb82 	uxth.w	fp, r2
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800ecc0:	443b      	add	r3, r7
 800ecc2:	f8d9 7000 	ldr.w	r7, [r9]
 800ecc6:	0c12      	lsrs	r2, r2, #16
 800ecc8:	0c3f      	lsrs	r7, r7, #16
 800ecca:	fb0a 7202 	mla	r2, sl, r2, r7
 800ecce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecd8:	4565      	cmp	r5, ip
 800ecda:	f849 3b04 	str.w	r3, [r9], #4
 800ecde:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ece2:	d8e4      	bhi.n	800ecae <__multiply+0xaa>
 800ece4:	9b01      	ldr	r3, [sp, #4]
 800ece6:	50e7      	str	r7, [r4, r3]
 800ece8:	9b03      	ldr	r3, [sp, #12]
 800ecea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ecee:	3104      	adds	r1, #4
 800ecf0:	f1b9 0f00 	cmp.w	r9, #0
 800ecf4:	d020      	beq.n	800ed38 <__multiply+0x134>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	4647      	mov	r7, r8
 800ecfa:	46a4      	mov	ip, r4
 800ecfc:	f04f 0a00 	mov.w	sl, #0
 800ed00:	f8b7 b000 	ldrh.w	fp, [r7]
 800ed04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ed08:	fb09 220b 	mla	r2, r9, fp, r2
 800ed0c:	4452      	add	r2, sl
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed14:	f84c 3b04 	str.w	r3, [ip], #4
 800ed18:	f857 3b04 	ldr.w	r3, [r7], #4
 800ed1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed20:	f8bc 3000 	ldrh.w	r3, [ip]
 800ed24:	fb09 330a 	mla	r3, r9, sl, r3
 800ed28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ed2c:	42bd      	cmp	r5, r7
 800ed2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed32:	d8e5      	bhi.n	800ed00 <__multiply+0xfc>
 800ed34:	9a01      	ldr	r2, [sp, #4]
 800ed36:	50a3      	str	r3, [r4, r2]
 800ed38:	3404      	adds	r4, #4
 800ed3a:	e79f      	b.n	800ec7c <__multiply+0x78>
 800ed3c:	3e01      	subs	r6, #1
 800ed3e:	e7a1      	b.n	800ec84 <__multiply+0x80>
 800ed40:	08012de4 	.word	0x08012de4
 800ed44:	08012df5 	.word	0x08012df5

0800ed48 <__pow5mult>:
 800ed48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed4c:	4615      	mov	r5, r2
 800ed4e:	f012 0203 	ands.w	r2, r2, #3
 800ed52:	4607      	mov	r7, r0
 800ed54:	460e      	mov	r6, r1
 800ed56:	d007      	beq.n	800ed68 <__pow5mult+0x20>
 800ed58:	4c25      	ldr	r4, [pc, #148]	@ (800edf0 <__pow5mult+0xa8>)
 800ed5a:	3a01      	subs	r2, #1
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed62:	f7ff fea7 	bl	800eab4 <__multadd>
 800ed66:	4606      	mov	r6, r0
 800ed68:	10ad      	asrs	r5, r5, #2
 800ed6a:	d03d      	beq.n	800ede8 <__pow5mult+0xa0>
 800ed6c:	69fc      	ldr	r4, [r7, #28]
 800ed6e:	b97c      	cbnz	r4, 800ed90 <__pow5mult+0x48>
 800ed70:	2010      	movs	r0, #16
 800ed72:	f7ff fd87 	bl	800e884 <malloc>
 800ed76:	4602      	mov	r2, r0
 800ed78:	61f8      	str	r0, [r7, #28]
 800ed7a:	b928      	cbnz	r0, 800ed88 <__pow5mult+0x40>
 800ed7c:	4b1d      	ldr	r3, [pc, #116]	@ (800edf4 <__pow5mult+0xac>)
 800ed7e:	481e      	ldr	r0, [pc, #120]	@ (800edf8 <__pow5mult+0xb0>)
 800ed80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed84:	f000 fbdc 	bl	800f540 <__assert_func>
 800ed88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed8c:	6004      	str	r4, [r0, #0]
 800ed8e:	60c4      	str	r4, [r0, #12]
 800ed90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed98:	b94c      	cbnz	r4, 800edae <__pow5mult+0x66>
 800ed9a:	f240 2171 	movw	r1, #625	@ 0x271
 800ed9e:	4638      	mov	r0, r7
 800eda0:	f7ff ff1a 	bl	800ebd8 <__i2b>
 800eda4:	2300      	movs	r3, #0
 800eda6:	f8c8 0008 	str.w	r0, [r8, #8]
 800edaa:	4604      	mov	r4, r0
 800edac:	6003      	str	r3, [r0, #0]
 800edae:	f04f 0900 	mov.w	r9, #0
 800edb2:	07eb      	lsls	r3, r5, #31
 800edb4:	d50a      	bpl.n	800edcc <__pow5mult+0x84>
 800edb6:	4631      	mov	r1, r6
 800edb8:	4622      	mov	r2, r4
 800edba:	4638      	mov	r0, r7
 800edbc:	f7ff ff22 	bl	800ec04 <__multiply>
 800edc0:	4631      	mov	r1, r6
 800edc2:	4680      	mov	r8, r0
 800edc4:	4638      	mov	r0, r7
 800edc6:	f7ff fe53 	bl	800ea70 <_Bfree>
 800edca:	4646      	mov	r6, r8
 800edcc:	106d      	asrs	r5, r5, #1
 800edce:	d00b      	beq.n	800ede8 <__pow5mult+0xa0>
 800edd0:	6820      	ldr	r0, [r4, #0]
 800edd2:	b938      	cbnz	r0, 800ede4 <__pow5mult+0x9c>
 800edd4:	4622      	mov	r2, r4
 800edd6:	4621      	mov	r1, r4
 800edd8:	4638      	mov	r0, r7
 800edda:	f7ff ff13 	bl	800ec04 <__multiply>
 800edde:	6020      	str	r0, [r4, #0]
 800ede0:	f8c0 9000 	str.w	r9, [r0]
 800ede4:	4604      	mov	r4, r0
 800ede6:	e7e4      	b.n	800edb2 <__pow5mult+0x6a>
 800ede8:	4630      	mov	r0, r6
 800edea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edee:	bf00      	nop
 800edf0:	08012ea8 	.word	0x08012ea8
 800edf4:	08012d75 	.word	0x08012d75
 800edf8:	08012df5 	.word	0x08012df5

0800edfc <__lshift>:
 800edfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee00:	460c      	mov	r4, r1
 800ee02:	6849      	ldr	r1, [r1, #4]
 800ee04:	6923      	ldr	r3, [r4, #16]
 800ee06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee0a:	68a3      	ldr	r3, [r4, #8]
 800ee0c:	4607      	mov	r7, r0
 800ee0e:	4691      	mov	r9, r2
 800ee10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee14:	f108 0601 	add.w	r6, r8, #1
 800ee18:	42b3      	cmp	r3, r6
 800ee1a:	db0b      	blt.n	800ee34 <__lshift+0x38>
 800ee1c:	4638      	mov	r0, r7
 800ee1e:	f7ff fde7 	bl	800e9f0 <_Balloc>
 800ee22:	4605      	mov	r5, r0
 800ee24:	b948      	cbnz	r0, 800ee3a <__lshift+0x3e>
 800ee26:	4602      	mov	r2, r0
 800ee28:	4b28      	ldr	r3, [pc, #160]	@ (800eecc <__lshift+0xd0>)
 800ee2a:	4829      	ldr	r0, [pc, #164]	@ (800eed0 <__lshift+0xd4>)
 800ee2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ee30:	f000 fb86 	bl	800f540 <__assert_func>
 800ee34:	3101      	adds	r1, #1
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	e7ee      	b.n	800ee18 <__lshift+0x1c>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f100 0114 	add.w	r1, r0, #20
 800ee40:	f100 0210 	add.w	r2, r0, #16
 800ee44:	4618      	mov	r0, r3
 800ee46:	4553      	cmp	r3, sl
 800ee48:	db33      	blt.n	800eeb2 <__lshift+0xb6>
 800ee4a:	6920      	ldr	r0, [r4, #16]
 800ee4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee50:	f104 0314 	add.w	r3, r4, #20
 800ee54:	f019 091f 	ands.w	r9, r9, #31
 800ee58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee60:	d02b      	beq.n	800eeba <__lshift+0xbe>
 800ee62:	f1c9 0e20 	rsb	lr, r9, #32
 800ee66:	468a      	mov	sl, r1
 800ee68:	2200      	movs	r2, #0
 800ee6a:	6818      	ldr	r0, [r3, #0]
 800ee6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ee70:	4310      	orrs	r0, r2
 800ee72:	f84a 0b04 	str.w	r0, [sl], #4
 800ee76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee7a:	459c      	cmp	ip, r3
 800ee7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee80:	d8f3      	bhi.n	800ee6a <__lshift+0x6e>
 800ee82:	ebac 0304 	sub.w	r3, ip, r4
 800ee86:	3b15      	subs	r3, #21
 800ee88:	f023 0303 	bic.w	r3, r3, #3
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	f104 0015 	add.w	r0, r4, #21
 800ee92:	4560      	cmp	r0, ip
 800ee94:	bf88      	it	hi
 800ee96:	2304      	movhi	r3, #4
 800ee98:	50ca      	str	r2, [r1, r3]
 800ee9a:	b10a      	cbz	r2, 800eea0 <__lshift+0xa4>
 800ee9c:	f108 0602 	add.w	r6, r8, #2
 800eea0:	3e01      	subs	r6, #1
 800eea2:	4638      	mov	r0, r7
 800eea4:	612e      	str	r6, [r5, #16]
 800eea6:	4621      	mov	r1, r4
 800eea8:	f7ff fde2 	bl	800ea70 <_Bfree>
 800eeac:	4628      	mov	r0, r5
 800eeae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	e7c5      	b.n	800ee46 <__lshift+0x4a>
 800eeba:	3904      	subs	r1, #4
 800eebc:	f853 2b04 	ldr.w	r2, [r3], #4
 800eec0:	f841 2f04 	str.w	r2, [r1, #4]!
 800eec4:	459c      	cmp	ip, r3
 800eec6:	d8f9      	bhi.n	800eebc <__lshift+0xc0>
 800eec8:	e7ea      	b.n	800eea0 <__lshift+0xa4>
 800eeca:	bf00      	nop
 800eecc:	08012de4 	.word	0x08012de4
 800eed0:	08012df5 	.word	0x08012df5

0800eed4 <__mcmp>:
 800eed4:	690a      	ldr	r2, [r1, #16]
 800eed6:	4603      	mov	r3, r0
 800eed8:	6900      	ldr	r0, [r0, #16]
 800eeda:	1a80      	subs	r0, r0, r2
 800eedc:	b530      	push	{r4, r5, lr}
 800eede:	d10e      	bne.n	800eefe <__mcmp+0x2a>
 800eee0:	3314      	adds	r3, #20
 800eee2:	3114      	adds	r1, #20
 800eee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eeec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eef4:	4295      	cmp	r5, r2
 800eef6:	d003      	beq.n	800ef00 <__mcmp+0x2c>
 800eef8:	d205      	bcs.n	800ef06 <__mcmp+0x32>
 800eefa:	f04f 30ff 	mov.w	r0, #4294967295
 800eefe:	bd30      	pop	{r4, r5, pc}
 800ef00:	42a3      	cmp	r3, r4
 800ef02:	d3f3      	bcc.n	800eeec <__mcmp+0x18>
 800ef04:	e7fb      	b.n	800eefe <__mcmp+0x2a>
 800ef06:	2001      	movs	r0, #1
 800ef08:	e7f9      	b.n	800eefe <__mcmp+0x2a>
	...

0800ef0c <__mdiff>:
 800ef0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef10:	4689      	mov	r9, r1
 800ef12:	4606      	mov	r6, r0
 800ef14:	4611      	mov	r1, r2
 800ef16:	4648      	mov	r0, r9
 800ef18:	4614      	mov	r4, r2
 800ef1a:	f7ff ffdb 	bl	800eed4 <__mcmp>
 800ef1e:	1e05      	subs	r5, r0, #0
 800ef20:	d112      	bne.n	800ef48 <__mdiff+0x3c>
 800ef22:	4629      	mov	r1, r5
 800ef24:	4630      	mov	r0, r6
 800ef26:	f7ff fd63 	bl	800e9f0 <_Balloc>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	b928      	cbnz	r0, 800ef3a <__mdiff+0x2e>
 800ef2e:	4b3f      	ldr	r3, [pc, #252]	@ (800f02c <__mdiff+0x120>)
 800ef30:	f240 2137 	movw	r1, #567	@ 0x237
 800ef34:	483e      	ldr	r0, [pc, #248]	@ (800f030 <__mdiff+0x124>)
 800ef36:	f000 fb03 	bl	800f540 <__assert_func>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef40:	4610      	mov	r0, r2
 800ef42:	b003      	add	sp, #12
 800ef44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef48:	bfbc      	itt	lt
 800ef4a:	464b      	movlt	r3, r9
 800ef4c:	46a1      	movlt	r9, r4
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ef54:	bfba      	itte	lt
 800ef56:	461c      	movlt	r4, r3
 800ef58:	2501      	movlt	r5, #1
 800ef5a:	2500      	movge	r5, #0
 800ef5c:	f7ff fd48 	bl	800e9f0 <_Balloc>
 800ef60:	4602      	mov	r2, r0
 800ef62:	b918      	cbnz	r0, 800ef6c <__mdiff+0x60>
 800ef64:	4b31      	ldr	r3, [pc, #196]	@ (800f02c <__mdiff+0x120>)
 800ef66:	f240 2145 	movw	r1, #581	@ 0x245
 800ef6a:	e7e3      	b.n	800ef34 <__mdiff+0x28>
 800ef6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef70:	6926      	ldr	r6, [r4, #16]
 800ef72:	60c5      	str	r5, [r0, #12]
 800ef74:	f109 0310 	add.w	r3, r9, #16
 800ef78:	f109 0514 	add.w	r5, r9, #20
 800ef7c:	f104 0e14 	add.w	lr, r4, #20
 800ef80:	f100 0b14 	add.w	fp, r0, #20
 800ef84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef8c:	9301      	str	r3, [sp, #4]
 800ef8e:	46d9      	mov	r9, fp
 800ef90:	f04f 0c00 	mov.w	ip, #0
 800ef94:	9b01      	ldr	r3, [sp, #4]
 800ef96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef9e:	9301      	str	r3, [sp, #4]
 800efa0:	fa1f f38a 	uxth.w	r3, sl
 800efa4:	4619      	mov	r1, r3
 800efa6:	b283      	uxth	r3, r0
 800efa8:	1acb      	subs	r3, r1, r3
 800efaa:	0c00      	lsrs	r0, r0, #16
 800efac:	4463      	add	r3, ip
 800efae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800efb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800efbc:	4576      	cmp	r6, lr
 800efbe:	f849 3b04 	str.w	r3, [r9], #4
 800efc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efc6:	d8e5      	bhi.n	800ef94 <__mdiff+0x88>
 800efc8:	1b33      	subs	r3, r6, r4
 800efca:	3b15      	subs	r3, #21
 800efcc:	f023 0303 	bic.w	r3, r3, #3
 800efd0:	3415      	adds	r4, #21
 800efd2:	3304      	adds	r3, #4
 800efd4:	42a6      	cmp	r6, r4
 800efd6:	bf38      	it	cc
 800efd8:	2304      	movcc	r3, #4
 800efda:	441d      	add	r5, r3
 800efdc:	445b      	add	r3, fp
 800efde:	461e      	mov	r6, r3
 800efe0:	462c      	mov	r4, r5
 800efe2:	4544      	cmp	r4, r8
 800efe4:	d30e      	bcc.n	800f004 <__mdiff+0xf8>
 800efe6:	f108 0103 	add.w	r1, r8, #3
 800efea:	1b49      	subs	r1, r1, r5
 800efec:	f021 0103 	bic.w	r1, r1, #3
 800eff0:	3d03      	subs	r5, #3
 800eff2:	45a8      	cmp	r8, r5
 800eff4:	bf38      	it	cc
 800eff6:	2100      	movcc	r1, #0
 800eff8:	440b      	add	r3, r1
 800effa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800effe:	b191      	cbz	r1, 800f026 <__mdiff+0x11a>
 800f000:	6117      	str	r7, [r2, #16]
 800f002:	e79d      	b.n	800ef40 <__mdiff+0x34>
 800f004:	f854 1b04 	ldr.w	r1, [r4], #4
 800f008:	46e6      	mov	lr, ip
 800f00a:	0c08      	lsrs	r0, r1, #16
 800f00c:	fa1c fc81 	uxtah	ip, ip, r1
 800f010:	4471      	add	r1, lr
 800f012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f016:	b289      	uxth	r1, r1
 800f018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f01c:	f846 1b04 	str.w	r1, [r6], #4
 800f020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f024:	e7dd      	b.n	800efe2 <__mdiff+0xd6>
 800f026:	3f01      	subs	r7, #1
 800f028:	e7e7      	b.n	800effa <__mdiff+0xee>
 800f02a:	bf00      	nop
 800f02c:	08012de4 	.word	0x08012de4
 800f030:	08012df5 	.word	0x08012df5

0800f034 <__d2b>:
 800f034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f038:	460f      	mov	r7, r1
 800f03a:	2101      	movs	r1, #1
 800f03c:	ec59 8b10 	vmov	r8, r9, d0
 800f040:	4616      	mov	r6, r2
 800f042:	f7ff fcd5 	bl	800e9f0 <_Balloc>
 800f046:	4604      	mov	r4, r0
 800f048:	b930      	cbnz	r0, 800f058 <__d2b+0x24>
 800f04a:	4602      	mov	r2, r0
 800f04c:	4b23      	ldr	r3, [pc, #140]	@ (800f0dc <__d2b+0xa8>)
 800f04e:	4824      	ldr	r0, [pc, #144]	@ (800f0e0 <__d2b+0xac>)
 800f050:	f240 310f 	movw	r1, #783	@ 0x30f
 800f054:	f000 fa74 	bl	800f540 <__assert_func>
 800f058:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f05c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f060:	b10d      	cbz	r5, 800f066 <__d2b+0x32>
 800f062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f066:	9301      	str	r3, [sp, #4]
 800f068:	f1b8 0300 	subs.w	r3, r8, #0
 800f06c:	d023      	beq.n	800f0b6 <__d2b+0x82>
 800f06e:	4668      	mov	r0, sp
 800f070:	9300      	str	r3, [sp, #0]
 800f072:	f7ff fd84 	bl	800eb7e <__lo0bits>
 800f076:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f07a:	b1d0      	cbz	r0, 800f0b2 <__d2b+0x7e>
 800f07c:	f1c0 0320 	rsb	r3, r0, #32
 800f080:	fa02 f303 	lsl.w	r3, r2, r3
 800f084:	430b      	orrs	r3, r1
 800f086:	40c2      	lsrs	r2, r0
 800f088:	6163      	str	r3, [r4, #20]
 800f08a:	9201      	str	r2, [sp, #4]
 800f08c:	9b01      	ldr	r3, [sp, #4]
 800f08e:	61a3      	str	r3, [r4, #24]
 800f090:	2b00      	cmp	r3, #0
 800f092:	bf0c      	ite	eq
 800f094:	2201      	moveq	r2, #1
 800f096:	2202      	movne	r2, #2
 800f098:	6122      	str	r2, [r4, #16]
 800f09a:	b1a5      	cbz	r5, 800f0c6 <__d2b+0x92>
 800f09c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f0a0:	4405      	add	r5, r0
 800f0a2:	603d      	str	r5, [r7, #0]
 800f0a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f0a8:	6030      	str	r0, [r6, #0]
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	b003      	add	sp, #12
 800f0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0b2:	6161      	str	r1, [r4, #20]
 800f0b4:	e7ea      	b.n	800f08c <__d2b+0x58>
 800f0b6:	a801      	add	r0, sp, #4
 800f0b8:	f7ff fd61 	bl	800eb7e <__lo0bits>
 800f0bc:	9b01      	ldr	r3, [sp, #4]
 800f0be:	6163      	str	r3, [r4, #20]
 800f0c0:	3020      	adds	r0, #32
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	e7e8      	b.n	800f098 <__d2b+0x64>
 800f0c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f0ce:	6038      	str	r0, [r7, #0]
 800f0d0:	6918      	ldr	r0, [r3, #16]
 800f0d2:	f7ff fd35 	bl	800eb40 <__hi0bits>
 800f0d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0da:	e7e5      	b.n	800f0a8 <__d2b+0x74>
 800f0dc:	08012de4 	.word	0x08012de4
 800f0e0:	08012df5 	.word	0x08012df5

0800f0e4 <__ssputs_r>:
 800f0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e8:	688e      	ldr	r6, [r1, #8]
 800f0ea:	461f      	mov	r7, r3
 800f0ec:	42be      	cmp	r6, r7
 800f0ee:	680b      	ldr	r3, [r1, #0]
 800f0f0:	4682      	mov	sl, r0
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	4690      	mov	r8, r2
 800f0f6:	d82d      	bhi.n	800f154 <__ssputs_r+0x70>
 800f0f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f0fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f100:	d026      	beq.n	800f150 <__ssputs_r+0x6c>
 800f102:	6965      	ldr	r5, [r4, #20]
 800f104:	6909      	ldr	r1, [r1, #16]
 800f106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f10a:	eba3 0901 	sub.w	r9, r3, r1
 800f10e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f112:	1c7b      	adds	r3, r7, #1
 800f114:	444b      	add	r3, r9
 800f116:	106d      	asrs	r5, r5, #1
 800f118:	429d      	cmp	r5, r3
 800f11a:	bf38      	it	cc
 800f11c:	461d      	movcc	r5, r3
 800f11e:	0553      	lsls	r3, r2, #21
 800f120:	d527      	bpl.n	800f172 <__ssputs_r+0x8e>
 800f122:	4629      	mov	r1, r5
 800f124:	f7ff fbd8 	bl	800e8d8 <_malloc_r>
 800f128:	4606      	mov	r6, r0
 800f12a:	b360      	cbz	r0, 800f186 <__ssputs_r+0xa2>
 800f12c:	6921      	ldr	r1, [r4, #16]
 800f12e:	464a      	mov	r2, r9
 800f130:	f7fe fcf5 	bl	800db1e <memcpy>
 800f134:	89a3      	ldrh	r3, [r4, #12]
 800f136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f13e:	81a3      	strh	r3, [r4, #12]
 800f140:	6126      	str	r6, [r4, #16]
 800f142:	6165      	str	r5, [r4, #20]
 800f144:	444e      	add	r6, r9
 800f146:	eba5 0509 	sub.w	r5, r5, r9
 800f14a:	6026      	str	r6, [r4, #0]
 800f14c:	60a5      	str	r5, [r4, #8]
 800f14e:	463e      	mov	r6, r7
 800f150:	42be      	cmp	r6, r7
 800f152:	d900      	bls.n	800f156 <__ssputs_r+0x72>
 800f154:	463e      	mov	r6, r7
 800f156:	6820      	ldr	r0, [r4, #0]
 800f158:	4632      	mov	r2, r6
 800f15a:	4641      	mov	r1, r8
 800f15c:	f000 f9c6 	bl	800f4ec <memmove>
 800f160:	68a3      	ldr	r3, [r4, #8]
 800f162:	1b9b      	subs	r3, r3, r6
 800f164:	60a3      	str	r3, [r4, #8]
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	4433      	add	r3, r6
 800f16a:	6023      	str	r3, [r4, #0]
 800f16c:	2000      	movs	r0, #0
 800f16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f172:	462a      	mov	r2, r5
 800f174:	f000 fa28 	bl	800f5c8 <_realloc_r>
 800f178:	4606      	mov	r6, r0
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d1e0      	bne.n	800f140 <__ssputs_r+0x5c>
 800f17e:	6921      	ldr	r1, [r4, #16]
 800f180:	4650      	mov	r0, sl
 800f182:	f7ff fb35 	bl	800e7f0 <_free_r>
 800f186:	230c      	movs	r3, #12
 800f188:	f8ca 3000 	str.w	r3, [sl]
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f192:	81a3      	strh	r3, [r4, #12]
 800f194:	f04f 30ff 	mov.w	r0, #4294967295
 800f198:	e7e9      	b.n	800f16e <__ssputs_r+0x8a>
	...

0800f19c <_svfiprintf_r>:
 800f19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a0:	4698      	mov	r8, r3
 800f1a2:	898b      	ldrh	r3, [r1, #12]
 800f1a4:	061b      	lsls	r3, r3, #24
 800f1a6:	b09d      	sub	sp, #116	@ 0x74
 800f1a8:	4607      	mov	r7, r0
 800f1aa:	460d      	mov	r5, r1
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	d510      	bpl.n	800f1d2 <_svfiprintf_r+0x36>
 800f1b0:	690b      	ldr	r3, [r1, #16]
 800f1b2:	b973      	cbnz	r3, 800f1d2 <_svfiprintf_r+0x36>
 800f1b4:	2140      	movs	r1, #64	@ 0x40
 800f1b6:	f7ff fb8f 	bl	800e8d8 <_malloc_r>
 800f1ba:	6028      	str	r0, [r5, #0]
 800f1bc:	6128      	str	r0, [r5, #16]
 800f1be:	b930      	cbnz	r0, 800f1ce <_svfiprintf_r+0x32>
 800f1c0:	230c      	movs	r3, #12
 800f1c2:	603b      	str	r3, [r7, #0]
 800f1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c8:	b01d      	add	sp, #116	@ 0x74
 800f1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ce:	2340      	movs	r3, #64	@ 0x40
 800f1d0:	616b      	str	r3, [r5, #20]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1d6:	2320      	movs	r3, #32
 800f1d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1e0:	2330      	movs	r3, #48	@ 0x30
 800f1e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f380 <_svfiprintf_r+0x1e4>
 800f1e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1ea:	f04f 0901 	mov.w	r9, #1
 800f1ee:	4623      	mov	r3, r4
 800f1f0:	469a      	mov	sl, r3
 800f1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1f6:	b10a      	cbz	r2, 800f1fc <_svfiprintf_r+0x60>
 800f1f8:	2a25      	cmp	r2, #37	@ 0x25
 800f1fa:	d1f9      	bne.n	800f1f0 <_svfiprintf_r+0x54>
 800f1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800f200:	d00b      	beq.n	800f21a <_svfiprintf_r+0x7e>
 800f202:	465b      	mov	r3, fp
 800f204:	4622      	mov	r2, r4
 800f206:	4629      	mov	r1, r5
 800f208:	4638      	mov	r0, r7
 800f20a:	f7ff ff6b 	bl	800f0e4 <__ssputs_r>
 800f20e:	3001      	adds	r0, #1
 800f210:	f000 80a7 	beq.w	800f362 <_svfiprintf_r+0x1c6>
 800f214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f216:	445a      	add	r2, fp
 800f218:	9209      	str	r2, [sp, #36]	@ 0x24
 800f21a:	f89a 3000 	ldrb.w	r3, [sl]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	f000 809f 	beq.w	800f362 <_svfiprintf_r+0x1c6>
 800f224:	2300      	movs	r3, #0
 800f226:	f04f 32ff 	mov.w	r2, #4294967295
 800f22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f22e:	f10a 0a01 	add.w	sl, sl, #1
 800f232:	9304      	str	r3, [sp, #16]
 800f234:	9307      	str	r3, [sp, #28]
 800f236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f23a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f23c:	4654      	mov	r4, sl
 800f23e:	2205      	movs	r2, #5
 800f240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f244:	484e      	ldr	r0, [pc, #312]	@ (800f380 <_svfiprintf_r+0x1e4>)
 800f246:	f7f0 ffe3 	bl	8000210 <memchr>
 800f24a:	9a04      	ldr	r2, [sp, #16]
 800f24c:	b9d8      	cbnz	r0, 800f286 <_svfiprintf_r+0xea>
 800f24e:	06d0      	lsls	r0, r2, #27
 800f250:	bf44      	itt	mi
 800f252:	2320      	movmi	r3, #32
 800f254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f258:	0711      	lsls	r1, r2, #28
 800f25a:	bf44      	itt	mi
 800f25c:	232b      	movmi	r3, #43	@ 0x2b
 800f25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f262:	f89a 3000 	ldrb.w	r3, [sl]
 800f266:	2b2a      	cmp	r3, #42	@ 0x2a
 800f268:	d015      	beq.n	800f296 <_svfiprintf_r+0xfa>
 800f26a:	9a07      	ldr	r2, [sp, #28]
 800f26c:	4654      	mov	r4, sl
 800f26e:	2000      	movs	r0, #0
 800f270:	f04f 0c0a 	mov.w	ip, #10
 800f274:	4621      	mov	r1, r4
 800f276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f27a:	3b30      	subs	r3, #48	@ 0x30
 800f27c:	2b09      	cmp	r3, #9
 800f27e:	d94b      	bls.n	800f318 <_svfiprintf_r+0x17c>
 800f280:	b1b0      	cbz	r0, 800f2b0 <_svfiprintf_r+0x114>
 800f282:	9207      	str	r2, [sp, #28]
 800f284:	e014      	b.n	800f2b0 <_svfiprintf_r+0x114>
 800f286:	eba0 0308 	sub.w	r3, r0, r8
 800f28a:	fa09 f303 	lsl.w	r3, r9, r3
 800f28e:	4313      	orrs	r3, r2
 800f290:	9304      	str	r3, [sp, #16]
 800f292:	46a2      	mov	sl, r4
 800f294:	e7d2      	b.n	800f23c <_svfiprintf_r+0xa0>
 800f296:	9b03      	ldr	r3, [sp, #12]
 800f298:	1d19      	adds	r1, r3, #4
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	9103      	str	r1, [sp, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	bfbb      	ittet	lt
 800f2a2:	425b      	neglt	r3, r3
 800f2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800f2a8:	9307      	strge	r3, [sp, #28]
 800f2aa:	9307      	strlt	r3, [sp, #28]
 800f2ac:	bfb8      	it	lt
 800f2ae:	9204      	strlt	r2, [sp, #16]
 800f2b0:	7823      	ldrb	r3, [r4, #0]
 800f2b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2b4:	d10a      	bne.n	800f2cc <_svfiprintf_r+0x130>
 800f2b6:	7863      	ldrb	r3, [r4, #1]
 800f2b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2ba:	d132      	bne.n	800f322 <_svfiprintf_r+0x186>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	1d1a      	adds	r2, r3, #4
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	9203      	str	r2, [sp, #12]
 800f2c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2c8:	3402      	adds	r4, #2
 800f2ca:	9305      	str	r3, [sp, #20]
 800f2cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f390 <_svfiprintf_r+0x1f4>
 800f2d0:	7821      	ldrb	r1, [r4, #0]
 800f2d2:	2203      	movs	r2, #3
 800f2d4:	4650      	mov	r0, sl
 800f2d6:	f7f0 ff9b 	bl	8000210 <memchr>
 800f2da:	b138      	cbz	r0, 800f2ec <_svfiprintf_r+0x150>
 800f2dc:	9b04      	ldr	r3, [sp, #16]
 800f2de:	eba0 000a 	sub.w	r0, r0, sl
 800f2e2:	2240      	movs	r2, #64	@ 0x40
 800f2e4:	4082      	lsls	r2, r0
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	3401      	adds	r4, #1
 800f2ea:	9304      	str	r3, [sp, #16]
 800f2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f0:	4824      	ldr	r0, [pc, #144]	@ (800f384 <_svfiprintf_r+0x1e8>)
 800f2f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2f6:	2206      	movs	r2, #6
 800f2f8:	f7f0 ff8a 	bl	8000210 <memchr>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d036      	beq.n	800f36e <_svfiprintf_r+0x1d2>
 800f300:	4b21      	ldr	r3, [pc, #132]	@ (800f388 <_svfiprintf_r+0x1ec>)
 800f302:	bb1b      	cbnz	r3, 800f34c <_svfiprintf_r+0x1b0>
 800f304:	9b03      	ldr	r3, [sp, #12]
 800f306:	3307      	adds	r3, #7
 800f308:	f023 0307 	bic.w	r3, r3, #7
 800f30c:	3308      	adds	r3, #8
 800f30e:	9303      	str	r3, [sp, #12]
 800f310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f312:	4433      	add	r3, r6
 800f314:	9309      	str	r3, [sp, #36]	@ 0x24
 800f316:	e76a      	b.n	800f1ee <_svfiprintf_r+0x52>
 800f318:	fb0c 3202 	mla	r2, ip, r2, r3
 800f31c:	460c      	mov	r4, r1
 800f31e:	2001      	movs	r0, #1
 800f320:	e7a8      	b.n	800f274 <_svfiprintf_r+0xd8>
 800f322:	2300      	movs	r3, #0
 800f324:	3401      	adds	r4, #1
 800f326:	9305      	str	r3, [sp, #20]
 800f328:	4619      	mov	r1, r3
 800f32a:	f04f 0c0a 	mov.w	ip, #10
 800f32e:	4620      	mov	r0, r4
 800f330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f334:	3a30      	subs	r2, #48	@ 0x30
 800f336:	2a09      	cmp	r2, #9
 800f338:	d903      	bls.n	800f342 <_svfiprintf_r+0x1a6>
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d0c6      	beq.n	800f2cc <_svfiprintf_r+0x130>
 800f33e:	9105      	str	r1, [sp, #20]
 800f340:	e7c4      	b.n	800f2cc <_svfiprintf_r+0x130>
 800f342:	fb0c 2101 	mla	r1, ip, r1, r2
 800f346:	4604      	mov	r4, r0
 800f348:	2301      	movs	r3, #1
 800f34a:	e7f0      	b.n	800f32e <_svfiprintf_r+0x192>
 800f34c:	ab03      	add	r3, sp, #12
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	462a      	mov	r2, r5
 800f352:	4b0e      	ldr	r3, [pc, #56]	@ (800f38c <_svfiprintf_r+0x1f0>)
 800f354:	a904      	add	r1, sp, #16
 800f356:	4638      	mov	r0, r7
 800f358:	f7fd fe3c 	bl	800cfd4 <_printf_float>
 800f35c:	1c42      	adds	r2, r0, #1
 800f35e:	4606      	mov	r6, r0
 800f360:	d1d6      	bne.n	800f310 <_svfiprintf_r+0x174>
 800f362:	89ab      	ldrh	r3, [r5, #12]
 800f364:	065b      	lsls	r3, r3, #25
 800f366:	f53f af2d 	bmi.w	800f1c4 <_svfiprintf_r+0x28>
 800f36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f36c:	e72c      	b.n	800f1c8 <_svfiprintf_r+0x2c>
 800f36e:	ab03      	add	r3, sp, #12
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	462a      	mov	r2, r5
 800f374:	4b05      	ldr	r3, [pc, #20]	@ (800f38c <_svfiprintf_r+0x1f0>)
 800f376:	a904      	add	r1, sp, #16
 800f378:	4638      	mov	r0, r7
 800f37a:	f7fe f8c3 	bl	800d504 <_printf_i>
 800f37e:	e7ed      	b.n	800f35c <_svfiprintf_r+0x1c0>
 800f380:	08012e4e 	.word	0x08012e4e
 800f384:	08012e58 	.word	0x08012e58
 800f388:	0800cfd5 	.word	0x0800cfd5
 800f38c:	0800f0e5 	.word	0x0800f0e5
 800f390:	08012e54 	.word	0x08012e54

0800f394 <__sflush_r>:
 800f394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f39c:	0716      	lsls	r6, r2, #28
 800f39e:	4605      	mov	r5, r0
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	d454      	bmi.n	800f44e <__sflush_r+0xba>
 800f3a4:	684b      	ldr	r3, [r1, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	dc02      	bgt.n	800f3b0 <__sflush_r+0x1c>
 800f3aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	dd48      	ble.n	800f442 <__sflush_r+0xae>
 800f3b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3b2:	2e00      	cmp	r6, #0
 800f3b4:	d045      	beq.n	800f442 <__sflush_r+0xae>
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f3bc:	682f      	ldr	r7, [r5, #0]
 800f3be:	6a21      	ldr	r1, [r4, #32]
 800f3c0:	602b      	str	r3, [r5, #0]
 800f3c2:	d030      	beq.n	800f426 <__sflush_r+0x92>
 800f3c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f3c6:	89a3      	ldrh	r3, [r4, #12]
 800f3c8:	0759      	lsls	r1, r3, #29
 800f3ca:	d505      	bpl.n	800f3d8 <__sflush_r+0x44>
 800f3cc:	6863      	ldr	r3, [r4, #4]
 800f3ce:	1ad2      	subs	r2, r2, r3
 800f3d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f3d2:	b10b      	cbz	r3, 800f3d8 <__sflush_r+0x44>
 800f3d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3d6:	1ad2      	subs	r2, r2, r3
 800f3d8:	2300      	movs	r3, #0
 800f3da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3dc:	6a21      	ldr	r1, [r4, #32]
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b0      	blx	r6
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	89a3      	ldrh	r3, [r4, #12]
 800f3e6:	d106      	bne.n	800f3f6 <__sflush_r+0x62>
 800f3e8:	6829      	ldr	r1, [r5, #0]
 800f3ea:	291d      	cmp	r1, #29
 800f3ec:	d82b      	bhi.n	800f446 <__sflush_r+0xb2>
 800f3ee:	4a2a      	ldr	r2, [pc, #168]	@ (800f498 <__sflush_r+0x104>)
 800f3f0:	40ca      	lsrs	r2, r1
 800f3f2:	07d6      	lsls	r6, r2, #31
 800f3f4:	d527      	bpl.n	800f446 <__sflush_r+0xb2>
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	6062      	str	r2, [r4, #4]
 800f3fa:	04d9      	lsls	r1, r3, #19
 800f3fc:	6922      	ldr	r2, [r4, #16]
 800f3fe:	6022      	str	r2, [r4, #0]
 800f400:	d504      	bpl.n	800f40c <__sflush_r+0x78>
 800f402:	1c42      	adds	r2, r0, #1
 800f404:	d101      	bne.n	800f40a <__sflush_r+0x76>
 800f406:	682b      	ldr	r3, [r5, #0]
 800f408:	b903      	cbnz	r3, 800f40c <__sflush_r+0x78>
 800f40a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f40c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f40e:	602f      	str	r7, [r5, #0]
 800f410:	b1b9      	cbz	r1, 800f442 <__sflush_r+0xae>
 800f412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f416:	4299      	cmp	r1, r3
 800f418:	d002      	beq.n	800f420 <__sflush_r+0x8c>
 800f41a:	4628      	mov	r0, r5
 800f41c:	f7ff f9e8 	bl	800e7f0 <_free_r>
 800f420:	2300      	movs	r3, #0
 800f422:	6363      	str	r3, [r4, #52]	@ 0x34
 800f424:	e00d      	b.n	800f442 <__sflush_r+0xae>
 800f426:	2301      	movs	r3, #1
 800f428:	4628      	mov	r0, r5
 800f42a:	47b0      	blx	r6
 800f42c:	4602      	mov	r2, r0
 800f42e:	1c50      	adds	r0, r2, #1
 800f430:	d1c9      	bne.n	800f3c6 <__sflush_r+0x32>
 800f432:	682b      	ldr	r3, [r5, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d0c6      	beq.n	800f3c6 <__sflush_r+0x32>
 800f438:	2b1d      	cmp	r3, #29
 800f43a:	d001      	beq.n	800f440 <__sflush_r+0xac>
 800f43c:	2b16      	cmp	r3, #22
 800f43e:	d11e      	bne.n	800f47e <__sflush_r+0xea>
 800f440:	602f      	str	r7, [r5, #0]
 800f442:	2000      	movs	r0, #0
 800f444:	e022      	b.n	800f48c <__sflush_r+0xf8>
 800f446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f44a:	b21b      	sxth	r3, r3
 800f44c:	e01b      	b.n	800f486 <__sflush_r+0xf2>
 800f44e:	690f      	ldr	r7, [r1, #16]
 800f450:	2f00      	cmp	r7, #0
 800f452:	d0f6      	beq.n	800f442 <__sflush_r+0xae>
 800f454:	0793      	lsls	r3, r2, #30
 800f456:	680e      	ldr	r6, [r1, #0]
 800f458:	bf08      	it	eq
 800f45a:	694b      	ldreq	r3, [r1, #20]
 800f45c:	600f      	str	r7, [r1, #0]
 800f45e:	bf18      	it	ne
 800f460:	2300      	movne	r3, #0
 800f462:	eba6 0807 	sub.w	r8, r6, r7
 800f466:	608b      	str	r3, [r1, #8]
 800f468:	f1b8 0f00 	cmp.w	r8, #0
 800f46c:	dde9      	ble.n	800f442 <__sflush_r+0xae>
 800f46e:	6a21      	ldr	r1, [r4, #32]
 800f470:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f472:	4643      	mov	r3, r8
 800f474:	463a      	mov	r2, r7
 800f476:	4628      	mov	r0, r5
 800f478:	47b0      	blx	r6
 800f47a:	2800      	cmp	r0, #0
 800f47c:	dc08      	bgt.n	800f490 <__sflush_r+0xfc>
 800f47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f486:	81a3      	strh	r3, [r4, #12]
 800f488:	f04f 30ff 	mov.w	r0, #4294967295
 800f48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f490:	4407      	add	r7, r0
 800f492:	eba8 0800 	sub.w	r8, r8, r0
 800f496:	e7e7      	b.n	800f468 <__sflush_r+0xd4>
 800f498:	20400001 	.word	0x20400001

0800f49c <_fflush_r>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	690b      	ldr	r3, [r1, #16]
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	b913      	cbnz	r3, 800f4ac <_fflush_r+0x10>
 800f4a6:	2500      	movs	r5, #0
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	bd38      	pop	{r3, r4, r5, pc}
 800f4ac:	b118      	cbz	r0, 800f4b6 <_fflush_r+0x1a>
 800f4ae:	6a03      	ldr	r3, [r0, #32]
 800f4b0:	b90b      	cbnz	r3, 800f4b6 <_fflush_r+0x1a>
 800f4b2:	f7fe f9d1 	bl	800d858 <__sinit>
 800f4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d0f3      	beq.n	800f4a6 <_fflush_r+0xa>
 800f4be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4c0:	07d0      	lsls	r0, r2, #31
 800f4c2:	d404      	bmi.n	800f4ce <_fflush_r+0x32>
 800f4c4:	0599      	lsls	r1, r3, #22
 800f4c6:	d402      	bmi.n	800f4ce <_fflush_r+0x32>
 800f4c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4ca:	f7fe fb26 	bl	800db1a <__retarget_lock_acquire_recursive>
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	f7ff ff5f 	bl	800f394 <__sflush_r>
 800f4d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4d8:	07da      	lsls	r2, r3, #31
 800f4da:	4605      	mov	r5, r0
 800f4dc:	d4e4      	bmi.n	800f4a8 <_fflush_r+0xc>
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	059b      	lsls	r3, r3, #22
 800f4e2:	d4e1      	bmi.n	800f4a8 <_fflush_r+0xc>
 800f4e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4e6:	f7fe fb19 	bl	800db1c <__retarget_lock_release_recursive>
 800f4ea:	e7dd      	b.n	800f4a8 <_fflush_r+0xc>

0800f4ec <memmove>:
 800f4ec:	4288      	cmp	r0, r1
 800f4ee:	b510      	push	{r4, lr}
 800f4f0:	eb01 0402 	add.w	r4, r1, r2
 800f4f4:	d902      	bls.n	800f4fc <memmove+0x10>
 800f4f6:	4284      	cmp	r4, r0
 800f4f8:	4623      	mov	r3, r4
 800f4fa:	d807      	bhi.n	800f50c <memmove+0x20>
 800f4fc:	1e43      	subs	r3, r0, #1
 800f4fe:	42a1      	cmp	r1, r4
 800f500:	d008      	beq.n	800f514 <memmove+0x28>
 800f502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f50a:	e7f8      	b.n	800f4fe <memmove+0x12>
 800f50c:	4402      	add	r2, r0
 800f50e:	4601      	mov	r1, r0
 800f510:	428a      	cmp	r2, r1
 800f512:	d100      	bne.n	800f516 <memmove+0x2a>
 800f514:	bd10      	pop	{r4, pc}
 800f516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f51e:	e7f7      	b.n	800f510 <memmove+0x24>

0800f520 <_sbrk_r>:
 800f520:	b538      	push	{r3, r4, r5, lr}
 800f522:	4d06      	ldr	r5, [pc, #24]	@ (800f53c <_sbrk_r+0x1c>)
 800f524:	2300      	movs	r3, #0
 800f526:	4604      	mov	r4, r0
 800f528:	4608      	mov	r0, r1
 800f52a:	602b      	str	r3, [r5, #0]
 800f52c:	f7f5 fc0c 	bl	8004d48 <_sbrk>
 800f530:	1c43      	adds	r3, r0, #1
 800f532:	d102      	bne.n	800f53a <_sbrk_r+0x1a>
 800f534:	682b      	ldr	r3, [r5, #0]
 800f536:	b103      	cbz	r3, 800f53a <_sbrk_r+0x1a>
 800f538:	6023      	str	r3, [r4, #0]
 800f53a:	bd38      	pop	{r3, r4, r5, pc}
 800f53c:	20000f3c 	.word	0x20000f3c

0800f540 <__assert_func>:
 800f540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f542:	4614      	mov	r4, r2
 800f544:	461a      	mov	r2, r3
 800f546:	4b09      	ldr	r3, [pc, #36]	@ (800f56c <__assert_func+0x2c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4605      	mov	r5, r0
 800f54c:	68d8      	ldr	r0, [r3, #12]
 800f54e:	b14c      	cbz	r4, 800f564 <__assert_func+0x24>
 800f550:	4b07      	ldr	r3, [pc, #28]	@ (800f570 <__assert_func+0x30>)
 800f552:	9100      	str	r1, [sp, #0]
 800f554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f558:	4906      	ldr	r1, [pc, #24]	@ (800f574 <__assert_func+0x34>)
 800f55a:	462b      	mov	r3, r5
 800f55c:	f000 f870 	bl	800f640 <fiprintf>
 800f560:	f000 f880 	bl	800f664 <abort>
 800f564:	4b04      	ldr	r3, [pc, #16]	@ (800f578 <__assert_func+0x38>)
 800f566:	461c      	mov	r4, r3
 800f568:	e7f3      	b.n	800f552 <__assert_func+0x12>
 800f56a:	bf00      	nop
 800f56c:	200000c8 	.word	0x200000c8
 800f570:	08012e69 	.word	0x08012e69
 800f574:	08012e76 	.word	0x08012e76
 800f578:	08012ea4 	.word	0x08012ea4

0800f57c <_calloc_r>:
 800f57c:	b570      	push	{r4, r5, r6, lr}
 800f57e:	fba1 5402 	umull	r5, r4, r1, r2
 800f582:	b934      	cbnz	r4, 800f592 <_calloc_r+0x16>
 800f584:	4629      	mov	r1, r5
 800f586:	f7ff f9a7 	bl	800e8d8 <_malloc_r>
 800f58a:	4606      	mov	r6, r0
 800f58c:	b928      	cbnz	r0, 800f59a <_calloc_r+0x1e>
 800f58e:	4630      	mov	r0, r6
 800f590:	bd70      	pop	{r4, r5, r6, pc}
 800f592:	220c      	movs	r2, #12
 800f594:	6002      	str	r2, [r0, #0]
 800f596:	2600      	movs	r6, #0
 800f598:	e7f9      	b.n	800f58e <_calloc_r+0x12>
 800f59a:	462a      	mov	r2, r5
 800f59c:	4621      	mov	r1, r4
 800f59e:	f7fe fa2c 	bl	800d9fa <memset>
 800f5a2:	e7f4      	b.n	800f58e <_calloc_r+0x12>

0800f5a4 <__ascii_mbtowc>:
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	b901      	cbnz	r1, 800f5aa <__ascii_mbtowc+0x6>
 800f5a8:	a901      	add	r1, sp, #4
 800f5aa:	b142      	cbz	r2, 800f5be <__ascii_mbtowc+0x1a>
 800f5ac:	b14b      	cbz	r3, 800f5c2 <__ascii_mbtowc+0x1e>
 800f5ae:	7813      	ldrb	r3, [r2, #0]
 800f5b0:	600b      	str	r3, [r1, #0]
 800f5b2:	7812      	ldrb	r2, [r2, #0]
 800f5b4:	1e10      	subs	r0, r2, #0
 800f5b6:	bf18      	it	ne
 800f5b8:	2001      	movne	r0, #1
 800f5ba:	b002      	add	sp, #8
 800f5bc:	4770      	bx	lr
 800f5be:	4610      	mov	r0, r2
 800f5c0:	e7fb      	b.n	800f5ba <__ascii_mbtowc+0x16>
 800f5c2:	f06f 0001 	mvn.w	r0, #1
 800f5c6:	e7f8      	b.n	800f5ba <__ascii_mbtowc+0x16>

0800f5c8 <_realloc_r>:
 800f5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5cc:	4607      	mov	r7, r0
 800f5ce:	4614      	mov	r4, r2
 800f5d0:	460d      	mov	r5, r1
 800f5d2:	b921      	cbnz	r1, 800f5de <_realloc_r+0x16>
 800f5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d8:	4611      	mov	r1, r2
 800f5da:	f7ff b97d 	b.w	800e8d8 <_malloc_r>
 800f5de:	b92a      	cbnz	r2, 800f5ec <_realloc_r+0x24>
 800f5e0:	f7ff f906 	bl	800e7f0 <_free_r>
 800f5e4:	4625      	mov	r5, r4
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ec:	f000 f841 	bl	800f672 <_malloc_usable_size_r>
 800f5f0:	4284      	cmp	r4, r0
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	d802      	bhi.n	800f5fc <_realloc_r+0x34>
 800f5f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5fa:	d8f4      	bhi.n	800f5e6 <_realloc_r+0x1e>
 800f5fc:	4621      	mov	r1, r4
 800f5fe:	4638      	mov	r0, r7
 800f600:	f7ff f96a 	bl	800e8d8 <_malloc_r>
 800f604:	4680      	mov	r8, r0
 800f606:	b908      	cbnz	r0, 800f60c <_realloc_r+0x44>
 800f608:	4645      	mov	r5, r8
 800f60a:	e7ec      	b.n	800f5e6 <_realloc_r+0x1e>
 800f60c:	42b4      	cmp	r4, r6
 800f60e:	4622      	mov	r2, r4
 800f610:	4629      	mov	r1, r5
 800f612:	bf28      	it	cs
 800f614:	4632      	movcs	r2, r6
 800f616:	f7fe fa82 	bl	800db1e <memcpy>
 800f61a:	4629      	mov	r1, r5
 800f61c:	4638      	mov	r0, r7
 800f61e:	f7ff f8e7 	bl	800e7f0 <_free_r>
 800f622:	e7f1      	b.n	800f608 <_realloc_r+0x40>

0800f624 <__ascii_wctomb>:
 800f624:	4603      	mov	r3, r0
 800f626:	4608      	mov	r0, r1
 800f628:	b141      	cbz	r1, 800f63c <__ascii_wctomb+0x18>
 800f62a:	2aff      	cmp	r2, #255	@ 0xff
 800f62c:	d904      	bls.n	800f638 <__ascii_wctomb+0x14>
 800f62e:	228a      	movs	r2, #138	@ 0x8a
 800f630:	601a      	str	r2, [r3, #0]
 800f632:	f04f 30ff 	mov.w	r0, #4294967295
 800f636:	4770      	bx	lr
 800f638:	700a      	strb	r2, [r1, #0]
 800f63a:	2001      	movs	r0, #1
 800f63c:	4770      	bx	lr
	...

0800f640 <fiprintf>:
 800f640:	b40e      	push	{r1, r2, r3}
 800f642:	b503      	push	{r0, r1, lr}
 800f644:	4601      	mov	r1, r0
 800f646:	ab03      	add	r3, sp, #12
 800f648:	4805      	ldr	r0, [pc, #20]	@ (800f660 <fiprintf+0x20>)
 800f64a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f64e:	6800      	ldr	r0, [r0, #0]
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	f000 f83f 	bl	800f6d4 <_vfiprintf_r>
 800f656:	b002      	add	sp, #8
 800f658:	f85d eb04 	ldr.w	lr, [sp], #4
 800f65c:	b003      	add	sp, #12
 800f65e:	4770      	bx	lr
 800f660:	200000c8 	.word	0x200000c8

0800f664 <abort>:
 800f664:	b508      	push	{r3, lr}
 800f666:	2006      	movs	r0, #6
 800f668:	f000 fa08 	bl	800fa7c <raise>
 800f66c:	2001      	movs	r0, #1
 800f66e:	f7f5 faf3 	bl	8004c58 <_exit>

0800f672 <_malloc_usable_size_r>:
 800f672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f676:	1f18      	subs	r0, r3, #4
 800f678:	2b00      	cmp	r3, #0
 800f67a:	bfbc      	itt	lt
 800f67c:	580b      	ldrlt	r3, [r1, r0]
 800f67e:	18c0      	addlt	r0, r0, r3
 800f680:	4770      	bx	lr

0800f682 <__sfputc_r>:
 800f682:	6893      	ldr	r3, [r2, #8]
 800f684:	3b01      	subs	r3, #1
 800f686:	2b00      	cmp	r3, #0
 800f688:	b410      	push	{r4}
 800f68a:	6093      	str	r3, [r2, #8]
 800f68c:	da08      	bge.n	800f6a0 <__sfputc_r+0x1e>
 800f68e:	6994      	ldr	r4, [r2, #24]
 800f690:	42a3      	cmp	r3, r4
 800f692:	db01      	blt.n	800f698 <__sfputc_r+0x16>
 800f694:	290a      	cmp	r1, #10
 800f696:	d103      	bne.n	800f6a0 <__sfputc_r+0x1e>
 800f698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f69c:	f000 b932 	b.w	800f904 <__swbuf_r>
 800f6a0:	6813      	ldr	r3, [r2, #0]
 800f6a2:	1c58      	adds	r0, r3, #1
 800f6a4:	6010      	str	r0, [r2, #0]
 800f6a6:	7019      	strb	r1, [r3, #0]
 800f6a8:	4608      	mov	r0, r1
 800f6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <__sfputs_r>:
 800f6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	460f      	mov	r7, r1
 800f6b6:	4614      	mov	r4, r2
 800f6b8:	18d5      	adds	r5, r2, r3
 800f6ba:	42ac      	cmp	r4, r5
 800f6bc:	d101      	bne.n	800f6c2 <__sfputs_r+0x12>
 800f6be:	2000      	movs	r0, #0
 800f6c0:	e007      	b.n	800f6d2 <__sfputs_r+0x22>
 800f6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6c6:	463a      	mov	r2, r7
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f7ff ffda 	bl	800f682 <__sfputc_r>
 800f6ce:	1c43      	adds	r3, r0, #1
 800f6d0:	d1f3      	bne.n	800f6ba <__sfputs_r+0xa>
 800f6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6d4 <_vfiprintf_r>:
 800f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d8:	460d      	mov	r5, r1
 800f6da:	b09d      	sub	sp, #116	@ 0x74
 800f6dc:	4614      	mov	r4, r2
 800f6de:	4698      	mov	r8, r3
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	b118      	cbz	r0, 800f6ec <_vfiprintf_r+0x18>
 800f6e4:	6a03      	ldr	r3, [r0, #32]
 800f6e6:	b90b      	cbnz	r3, 800f6ec <_vfiprintf_r+0x18>
 800f6e8:	f7fe f8b6 	bl	800d858 <__sinit>
 800f6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6ee:	07d9      	lsls	r1, r3, #31
 800f6f0:	d405      	bmi.n	800f6fe <_vfiprintf_r+0x2a>
 800f6f2:	89ab      	ldrh	r3, [r5, #12]
 800f6f4:	059a      	lsls	r2, r3, #22
 800f6f6:	d402      	bmi.n	800f6fe <_vfiprintf_r+0x2a>
 800f6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6fa:	f7fe fa0e 	bl	800db1a <__retarget_lock_acquire_recursive>
 800f6fe:	89ab      	ldrh	r3, [r5, #12]
 800f700:	071b      	lsls	r3, r3, #28
 800f702:	d501      	bpl.n	800f708 <_vfiprintf_r+0x34>
 800f704:	692b      	ldr	r3, [r5, #16]
 800f706:	b99b      	cbnz	r3, 800f730 <_vfiprintf_r+0x5c>
 800f708:	4629      	mov	r1, r5
 800f70a:	4630      	mov	r0, r6
 800f70c:	f000 f938 	bl	800f980 <__swsetup_r>
 800f710:	b170      	cbz	r0, 800f730 <_vfiprintf_r+0x5c>
 800f712:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f714:	07dc      	lsls	r4, r3, #31
 800f716:	d504      	bpl.n	800f722 <_vfiprintf_r+0x4e>
 800f718:	f04f 30ff 	mov.w	r0, #4294967295
 800f71c:	b01d      	add	sp, #116	@ 0x74
 800f71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f722:	89ab      	ldrh	r3, [r5, #12]
 800f724:	0598      	lsls	r0, r3, #22
 800f726:	d4f7      	bmi.n	800f718 <_vfiprintf_r+0x44>
 800f728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f72a:	f7fe f9f7 	bl	800db1c <__retarget_lock_release_recursive>
 800f72e:	e7f3      	b.n	800f718 <_vfiprintf_r+0x44>
 800f730:	2300      	movs	r3, #0
 800f732:	9309      	str	r3, [sp, #36]	@ 0x24
 800f734:	2320      	movs	r3, #32
 800f736:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f73a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f73e:	2330      	movs	r3, #48	@ 0x30
 800f740:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f8f0 <_vfiprintf_r+0x21c>
 800f744:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f748:	f04f 0901 	mov.w	r9, #1
 800f74c:	4623      	mov	r3, r4
 800f74e:	469a      	mov	sl, r3
 800f750:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f754:	b10a      	cbz	r2, 800f75a <_vfiprintf_r+0x86>
 800f756:	2a25      	cmp	r2, #37	@ 0x25
 800f758:	d1f9      	bne.n	800f74e <_vfiprintf_r+0x7a>
 800f75a:	ebba 0b04 	subs.w	fp, sl, r4
 800f75e:	d00b      	beq.n	800f778 <_vfiprintf_r+0xa4>
 800f760:	465b      	mov	r3, fp
 800f762:	4622      	mov	r2, r4
 800f764:	4629      	mov	r1, r5
 800f766:	4630      	mov	r0, r6
 800f768:	f7ff ffa2 	bl	800f6b0 <__sfputs_r>
 800f76c:	3001      	adds	r0, #1
 800f76e:	f000 80a7 	beq.w	800f8c0 <_vfiprintf_r+0x1ec>
 800f772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f774:	445a      	add	r2, fp
 800f776:	9209      	str	r2, [sp, #36]	@ 0x24
 800f778:	f89a 3000 	ldrb.w	r3, [sl]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f000 809f 	beq.w	800f8c0 <_vfiprintf_r+0x1ec>
 800f782:	2300      	movs	r3, #0
 800f784:	f04f 32ff 	mov.w	r2, #4294967295
 800f788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f78c:	f10a 0a01 	add.w	sl, sl, #1
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	9307      	str	r3, [sp, #28]
 800f794:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f798:	931a      	str	r3, [sp, #104]	@ 0x68
 800f79a:	4654      	mov	r4, sl
 800f79c:	2205      	movs	r2, #5
 800f79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a2:	4853      	ldr	r0, [pc, #332]	@ (800f8f0 <_vfiprintf_r+0x21c>)
 800f7a4:	f7f0 fd34 	bl	8000210 <memchr>
 800f7a8:	9a04      	ldr	r2, [sp, #16]
 800f7aa:	b9d8      	cbnz	r0, 800f7e4 <_vfiprintf_r+0x110>
 800f7ac:	06d1      	lsls	r1, r2, #27
 800f7ae:	bf44      	itt	mi
 800f7b0:	2320      	movmi	r3, #32
 800f7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7b6:	0713      	lsls	r3, r2, #28
 800f7b8:	bf44      	itt	mi
 800f7ba:	232b      	movmi	r3, #43	@ 0x2b
 800f7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f7c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7c6:	d015      	beq.n	800f7f4 <_vfiprintf_r+0x120>
 800f7c8:	9a07      	ldr	r2, [sp, #28]
 800f7ca:	4654      	mov	r4, sl
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	f04f 0c0a 	mov.w	ip, #10
 800f7d2:	4621      	mov	r1, r4
 800f7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7d8:	3b30      	subs	r3, #48	@ 0x30
 800f7da:	2b09      	cmp	r3, #9
 800f7dc:	d94b      	bls.n	800f876 <_vfiprintf_r+0x1a2>
 800f7de:	b1b0      	cbz	r0, 800f80e <_vfiprintf_r+0x13a>
 800f7e0:	9207      	str	r2, [sp, #28]
 800f7e2:	e014      	b.n	800f80e <_vfiprintf_r+0x13a>
 800f7e4:	eba0 0308 	sub.w	r3, r0, r8
 800f7e8:	fa09 f303 	lsl.w	r3, r9, r3
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	9304      	str	r3, [sp, #16]
 800f7f0:	46a2      	mov	sl, r4
 800f7f2:	e7d2      	b.n	800f79a <_vfiprintf_r+0xc6>
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	1d19      	adds	r1, r3, #4
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	9103      	str	r1, [sp, #12]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	bfbb      	ittet	lt
 800f800:	425b      	neglt	r3, r3
 800f802:	f042 0202 	orrlt.w	r2, r2, #2
 800f806:	9307      	strge	r3, [sp, #28]
 800f808:	9307      	strlt	r3, [sp, #28]
 800f80a:	bfb8      	it	lt
 800f80c:	9204      	strlt	r2, [sp, #16]
 800f80e:	7823      	ldrb	r3, [r4, #0]
 800f810:	2b2e      	cmp	r3, #46	@ 0x2e
 800f812:	d10a      	bne.n	800f82a <_vfiprintf_r+0x156>
 800f814:	7863      	ldrb	r3, [r4, #1]
 800f816:	2b2a      	cmp	r3, #42	@ 0x2a
 800f818:	d132      	bne.n	800f880 <_vfiprintf_r+0x1ac>
 800f81a:	9b03      	ldr	r3, [sp, #12]
 800f81c:	1d1a      	adds	r2, r3, #4
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	9203      	str	r2, [sp, #12]
 800f822:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f826:	3402      	adds	r4, #2
 800f828:	9305      	str	r3, [sp, #20]
 800f82a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f900 <_vfiprintf_r+0x22c>
 800f82e:	7821      	ldrb	r1, [r4, #0]
 800f830:	2203      	movs	r2, #3
 800f832:	4650      	mov	r0, sl
 800f834:	f7f0 fcec 	bl	8000210 <memchr>
 800f838:	b138      	cbz	r0, 800f84a <_vfiprintf_r+0x176>
 800f83a:	9b04      	ldr	r3, [sp, #16]
 800f83c:	eba0 000a 	sub.w	r0, r0, sl
 800f840:	2240      	movs	r2, #64	@ 0x40
 800f842:	4082      	lsls	r2, r0
 800f844:	4313      	orrs	r3, r2
 800f846:	3401      	adds	r4, #1
 800f848:	9304      	str	r3, [sp, #16]
 800f84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f84e:	4829      	ldr	r0, [pc, #164]	@ (800f8f4 <_vfiprintf_r+0x220>)
 800f850:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f854:	2206      	movs	r2, #6
 800f856:	f7f0 fcdb 	bl	8000210 <memchr>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d03f      	beq.n	800f8de <_vfiprintf_r+0x20a>
 800f85e:	4b26      	ldr	r3, [pc, #152]	@ (800f8f8 <_vfiprintf_r+0x224>)
 800f860:	bb1b      	cbnz	r3, 800f8aa <_vfiprintf_r+0x1d6>
 800f862:	9b03      	ldr	r3, [sp, #12]
 800f864:	3307      	adds	r3, #7
 800f866:	f023 0307 	bic.w	r3, r3, #7
 800f86a:	3308      	adds	r3, #8
 800f86c:	9303      	str	r3, [sp, #12]
 800f86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f870:	443b      	add	r3, r7
 800f872:	9309      	str	r3, [sp, #36]	@ 0x24
 800f874:	e76a      	b.n	800f74c <_vfiprintf_r+0x78>
 800f876:	fb0c 3202 	mla	r2, ip, r2, r3
 800f87a:	460c      	mov	r4, r1
 800f87c:	2001      	movs	r0, #1
 800f87e:	e7a8      	b.n	800f7d2 <_vfiprintf_r+0xfe>
 800f880:	2300      	movs	r3, #0
 800f882:	3401      	adds	r4, #1
 800f884:	9305      	str	r3, [sp, #20]
 800f886:	4619      	mov	r1, r3
 800f888:	f04f 0c0a 	mov.w	ip, #10
 800f88c:	4620      	mov	r0, r4
 800f88e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f892:	3a30      	subs	r2, #48	@ 0x30
 800f894:	2a09      	cmp	r2, #9
 800f896:	d903      	bls.n	800f8a0 <_vfiprintf_r+0x1cc>
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d0c6      	beq.n	800f82a <_vfiprintf_r+0x156>
 800f89c:	9105      	str	r1, [sp, #20]
 800f89e:	e7c4      	b.n	800f82a <_vfiprintf_r+0x156>
 800f8a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e7f0      	b.n	800f88c <_vfiprintf_r+0x1b8>
 800f8aa:	ab03      	add	r3, sp, #12
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	462a      	mov	r2, r5
 800f8b0:	4b12      	ldr	r3, [pc, #72]	@ (800f8fc <_vfiprintf_r+0x228>)
 800f8b2:	a904      	add	r1, sp, #16
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	f7fd fb8d 	bl	800cfd4 <_printf_float>
 800f8ba:	4607      	mov	r7, r0
 800f8bc:	1c78      	adds	r0, r7, #1
 800f8be:	d1d6      	bne.n	800f86e <_vfiprintf_r+0x19a>
 800f8c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8c2:	07d9      	lsls	r1, r3, #31
 800f8c4:	d405      	bmi.n	800f8d2 <_vfiprintf_r+0x1fe>
 800f8c6:	89ab      	ldrh	r3, [r5, #12]
 800f8c8:	059a      	lsls	r2, r3, #22
 800f8ca:	d402      	bmi.n	800f8d2 <_vfiprintf_r+0x1fe>
 800f8cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8ce:	f7fe f925 	bl	800db1c <__retarget_lock_release_recursive>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	065b      	lsls	r3, r3, #25
 800f8d6:	f53f af1f 	bmi.w	800f718 <_vfiprintf_r+0x44>
 800f8da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8dc:	e71e      	b.n	800f71c <_vfiprintf_r+0x48>
 800f8de:	ab03      	add	r3, sp, #12
 800f8e0:	9300      	str	r3, [sp, #0]
 800f8e2:	462a      	mov	r2, r5
 800f8e4:	4b05      	ldr	r3, [pc, #20]	@ (800f8fc <_vfiprintf_r+0x228>)
 800f8e6:	a904      	add	r1, sp, #16
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	f7fd fe0b 	bl	800d504 <_printf_i>
 800f8ee:	e7e4      	b.n	800f8ba <_vfiprintf_r+0x1e6>
 800f8f0:	08012e4e 	.word	0x08012e4e
 800f8f4:	08012e58 	.word	0x08012e58
 800f8f8:	0800cfd5 	.word	0x0800cfd5
 800f8fc:	0800f6b1 	.word	0x0800f6b1
 800f900:	08012e54 	.word	0x08012e54

0800f904 <__swbuf_r>:
 800f904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f906:	460e      	mov	r6, r1
 800f908:	4614      	mov	r4, r2
 800f90a:	4605      	mov	r5, r0
 800f90c:	b118      	cbz	r0, 800f916 <__swbuf_r+0x12>
 800f90e:	6a03      	ldr	r3, [r0, #32]
 800f910:	b90b      	cbnz	r3, 800f916 <__swbuf_r+0x12>
 800f912:	f7fd ffa1 	bl	800d858 <__sinit>
 800f916:	69a3      	ldr	r3, [r4, #24]
 800f918:	60a3      	str	r3, [r4, #8]
 800f91a:	89a3      	ldrh	r3, [r4, #12]
 800f91c:	071a      	lsls	r2, r3, #28
 800f91e:	d501      	bpl.n	800f924 <__swbuf_r+0x20>
 800f920:	6923      	ldr	r3, [r4, #16]
 800f922:	b943      	cbnz	r3, 800f936 <__swbuf_r+0x32>
 800f924:	4621      	mov	r1, r4
 800f926:	4628      	mov	r0, r5
 800f928:	f000 f82a 	bl	800f980 <__swsetup_r>
 800f92c:	b118      	cbz	r0, 800f936 <__swbuf_r+0x32>
 800f92e:	f04f 37ff 	mov.w	r7, #4294967295
 800f932:	4638      	mov	r0, r7
 800f934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f936:	6823      	ldr	r3, [r4, #0]
 800f938:	6922      	ldr	r2, [r4, #16]
 800f93a:	1a98      	subs	r0, r3, r2
 800f93c:	6963      	ldr	r3, [r4, #20]
 800f93e:	b2f6      	uxtb	r6, r6
 800f940:	4283      	cmp	r3, r0
 800f942:	4637      	mov	r7, r6
 800f944:	dc05      	bgt.n	800f952 <__swbuf_r+0x4e>
 800f946:	4621      	mov	r1, r4
 800f948:	4628      	mov	r0, r5
 800f94a:	f7ff fda7 	bl	800f49c <_fflush_r>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d1ed      	bne.n	800f92e <__swbuf_r+0x2a>
 800f952:	68a3      	ldr	r3, [r4, #8]
 800f954:	3b01      	subs	r3, #1
 800f956:	60a3      	str	r3, [r4, #8]
 800f958:	6823      	ldr	r3, [r4, #0]
 800f95a:	1c5a      	adds	r2, r3, #1
 800f95c:	6022      	str	r2, [r4, #0]
 800f95e:	701e      	strb	r6, [r3, #0]
 800f960:	6962      	ldr	r2, [r4, #20]
 800f962:	1c43      	adds	r3, r0, #1
 800f964:	429a      	cmp	r2, r3
 800f966:	d004      	beq.n	800f972 <__swbuf_r+0x6e>
 800f968:	89a3      	ldrh	r3, [r4, #12]
 800f96a:	07db      	lsls	r3, r3, #31
 800f96c:	d5e1      	bpl.n	800f932 <__swbuf_r+0x2e>
 800f96e:	2e0a      	cmp	r6, #10
 800f970:	d1df      	bne.n	800f932 <__swbuf_r+0x2e>
 800f972:	4621      	mov	r1, r4
 800f974:	4628      	mov	r0, r5
 800f976:	f7ff fd91 	bl	800f49c <_fflush_r>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d0d9      	beq.n	800f932 <__swbuf_r+0x2e>
 800f97e:	e7d6      	b.n	800f92e <__swbuf_r+0x2a>

0800f980 <__swsetup_r>:
 800f980:	b538      	push	{r3, r4, r5, lr}
 800f982:	4b29      	ldr	r3, [pc, #164]	@ (800fa28 <__swsetup_r+0xa8>)
 800f984:	4605      	mov	r5, r0
 800f986:	6818      	ldr	r0, [r3, #0]
 800f988:	460c      	mov	r4, r1
 800f98a:	b118      	cbz	r0, 800f994 <__swsetup_r+0x14>
 800f98c:	6a03      	ldr	r3, [r0, #32]
 800f98e:	b90b      	cbnz	r3, 800f994 <__swsetup_r+0x14>
 800f990:	f7fd ff62 	bl	800d858 <__sinit>
 800f994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f998:	0719      	lsls	r1, r3, #28
 800f99a:	d422      	bmi.n	800f9e2 <__swsetup_r+0x62>
 800f99c:	06da      	lsls	r2, r3, #27
 800f99e:	d407      	bmi.n	800f9b0 <__swsetup_r+0x30>
 800f9a0:	2209      	movs	r2, #9
 800f9a2:	602a      	str	r2, [r5, #0]
 800f9a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ae:	e033      	b.n	800fa18 <__swsetup_r+0x98>
 800f9b0:	0758      	lsls	r0, r3, #29
 800f9b2:	d512      	bpl.n	800f9da <__swsetup_r+0x5a>
 800f9b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9b6:	b141      	cbz	r1, 800f9ca <__swsetup_r+0x4a>
 800f9b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f9bc:	4299      	cmp	r1, r3
 800f9be:	d002      	beq.n	800f9c6 <__swsetup_r+0x46>
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f7fe ff15 	bl	800e7f0 <_free_r>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f9ca:	89a3      	ldrh	r3, [r4, #12]
 800f9cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9d0:	81a3      	strh	r3, [r4, #12]
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	6063      	str	r3, [r4, #4]
 800f9d6:	6923      	ldr	r3, [r4, #16]
 800f9d8:	6023      	str	r3, [r4, #0]
 800f9da:	89a3      	ldrh	r3, [r4, #12]
 800f9dc:	f043 0308 	orr.w	r3, r3, #8
 800f9e0:	81a3      	strh	r3, [r4, #12]
 800f9e2:	6923      	ldr	r3, [r4, #16]
 800f9e4:	b94b      	cbnz	r3, 800f9fa <__swsetup_r+0x7a>
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9f0:	d003      	beq.n	800f9fa <__swsetup_r+0x7a>
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	f000 f883 	bl	800fb00 <__smakebuf_r>
 800f9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9fe:	f013 0201 	ands.w	r2, r3, #1
 800fa02:	d00a      	beq.n	800fa1a <__swsetup_r+0x9a>
 800fa04:	2200      	movs	r2, #0
 800fa06:	60a2      	str	r2, [r4, #8]
 800fa08:	6962      	ldr	r2, [r4, #20]
 800fa0a:	4252      	negs	r2, r2
 800fa0c:	61a2      	str	r2, [r4, #24]
 800fa0e:	6922      	ldr	r2, [r4, #16]
 800fa10:	b942      	cbnz	r2, 800fa24 <__swsetup_r+0xa4>
 800fa12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa16:	d1c5      	bne.n	800f9a4 <__swsetup_r+0x24>
 800fa18:	bd38      	pop	{r3, r4, r5, pc}
 800fa1a:	0799      	lsls	r1, r3, #30
 800fa1c:	bf58      	it	pl
 800fa1e:	6962      	ldrpl	r2, [r4, #20]
 800fa20:	60a2      	str	r2, [r4, #8]
 800fa22:	e7f4      	b.n	800fa0e <__swsetup_r+0x8e>
 800fa24:	2000      	movs	r0, #0
 800fa26:	e7f7      	b.n	800fa18 <__swsetup_r+0x98>
 800fa28:	200000c8 	.word	0x200000c8

0800fa2c <_raise_r>:
 800fa2c:	291f      	cmp	r1, #31
 800fa2e:	b538      	push	{r3, r4, r5, lr}
 800fa30:	4605      	mov	r5, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	d904      	bls.n	800fa40 <_raise_r+0x14>
 800fa36:	2316      	movs	r3, #22
 800fa38:	6003      	str	r3, [r0, #0]
 800fa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}
 800fa40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa42:	b112      	cbz	r2, 800fa4a <_raise_r+0x1e>
 800fa44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa48:	b94b      	cbnz	r3, 800fa5e <_raise_r+0x32>
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f000 f830 	bl	800fab0 <_getpid_r>
 800fa50:	4622      	mov	r2, r4
 800fa52:	4601      	mov	r1, r0
 800fa54:	4628      	mov	r0, r5
 800fa56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa5a:	f000 b817 	b.w	800fa8c <_kill_r>
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d00a      	beq.n	800fa78 <_raise_r+0x4c>
 800fa62:	1c59      	adds	r1, r3, #1
 800fa64:	d103      	bne.n	800fa6e <_raise_r+0x42>
 800fa66:	2316      	movs	r3, #22
 800fa68:	6003      	str	r3, [r0, #0]
 800fa6a:	2001      	movs	r0, #1
 800fa6c:	e7e7      	b.n	800fa3e <_raise_r+0x12>
 800fa6e:	2100      	movs	r1, #0
 800fa70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa74:	4620      	mov	r0, r4
 800fa76:	4798      	blx	r3
 800fa78:	2000      	movs	r0, #0
 800fa7a:	e7e0      	b.n	800fa3e <_raise_r+0x12>

0800fa7c <raise>:
 800fa7c:	4b02      	ldr	r3, [pc, #8]	@ (800fa88 <raise+0xc>)
 800fa7e:	4601      	mov	r1, r0
 800fa80:	6818      	ldr	r0, [r3, #0]
 800fa82:	f7ff bfd3 	b.w	800fa2c <_raise_r>
 800fa86:	bf00      	nop
 800fa88:	200000c8 	.word	0x200000c8

0800fa8c <_kill_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d07      	ldr	r5, [pc, #28]	@ (800faac <_kill_r+0x20>)
 800fa90:	2300      	movs	r3, #0
 800fa92:	4604      	mov	r4, r0
 800fa94:	4608      	mov	r0, r1
 800fa96:	4611      	mov	r1, r2
 800fa98:	602b      	str	r3, [r5, #0]
 800fa9a:	f7f5 f8cd 	bl	8004c38 <_kill>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	d102      	bne.n	800faa8 <_kill_r+0x1c>
 800faa2:	682b      	ldr	r3, [r5, #0]
 800faa4:	b103      	cbz	r3, 800faa8 <_kill_r+0x1c>
 800faa6:	6023      	str	r3, [r4, #0]
 800faa8:	bd38      	pop	{r3, r4, r5, pc}
 800faaa:	bf00      	nop
 800faac:	20000f3c 	.word	0x20000f3c

0800fab0 <_getpid_r>:
 800fab0:	f7f5 b8ba 	b.w	8004c28 <_getpid>

0800fab4 <__swhatbuf_r>:
 800fab4:	b570      	push	{r4, r5, r6, lr}
 800fab6:	460c      	mov	r4, r1
 800fab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fabc:	2900      	cmp	r1, #0
 800fabe:	b096      	sub	sp, #88	@ 0x58
 800fac0:	4615      	mov	r5, r2
 800fac2:	461e      	mov	r6, r3
 800fac4:	da0d      	bge.n	800fae2 <__swhatbuf_r+0x2e>
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800facc:	f04f 0100 	mov.w	r1, #0
 800fad0:	bf14      	ite	ne
 800fad2:	2340      	movne	r3, #64	@ 0x40
 800fad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fad8:	2000      	movs	r0, #0
 800fada:	6031      	str	r1, [r6, #0]
 800fadc:	602b      	str	r3, [r5, #0]
 800fade:	b016      	add	sp, #88	@ 0x58
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	466a      	mov	r2, sp
 800fae4:	f000 f848 	bl	800fb78 <_fstat_r>
 800fae8:	2800      	cmp	r0, #0
 800faea:	dbec      	blt.n	800fac6 <__swhatbuf_r+0x12>
 800faec:	9901      	ldr	r1, [sp, #4]
 800faee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800faf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800faf6:	4259      	negs	r1, r3
 800faf8:	4159      	adcs	r1, r3
 800fafa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fafe:	e7eb      	b.n	800fad8 <__swhatbuf_r+0x24>

0800fb00 <__smakebuf_r>:
 800fb00:	898b      	ldrh	r3, [r1, #12]
 800fb02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb04:	079d      	lsls	r5, r3, #30
 800fb06:	4606      	mov	r6, r0
 800fb08:	460c      	mov	r4, r1
 800fb0a:	d507      	bpl.n	800fb1c <__smakebuf_r+0x1c>
 800fb0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	6123      	str	r3, [r4, #16]
 800fb14:	2301      	movs	r3, #1
 800fb16:	6163      	str	r3, [r4, #20]
 800fb18:	b003      	add	sp, #12
 800fb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb1c:	ab01      	add	r3, sp, #4
 800fb1e:	466a      	mov	r2, sp
 800fb20:	f7ff ffc8 	bl	800fab4 <__swhatbuf_r>
 800fb24:	9f00      	ldr	r7, [sp, #0]
 800fb26:	4605      	mov	r5, r0
 800fb28:	4639      	mov	r1, r7
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f7fe fed4 	bl	800e8d8 <_malloc_r>
 800fb30:	b948      	cbnz	r0, 800fb46 <__smakebuf_r+0x46>
 800fb32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb36:	059a      	lsls	r2, r3, #22
 800fb38:	d4ee      	bmi.n	800fb18 <__smakebuf_r+0x18>
 800fb3a:	f023 0303 	bic.w	r3, r3, #3
 800fb3e:	f043 0302 	orr.w	r3, r3, #2
 800fb42:	81a3      	strh	r3, [r4, #12]
 800fb44:	e7e2      	b.n	800fb0c <__smakebuf_r+0xc>
 800fb46:	89a3      	ldrh	r3, [r4, #12]
 800fb48:	6020      	str	r0, [r4, #0]
 800fb4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb4e:	81a3      	strh	r3, [r4, #12]
 800fb50:	9b01      	ldr	r3, [sp, #4]
 800fb52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb56:	b15b      	cbz	r3, 800fb70 <__smakebuf_r+0x70>
 800fb58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	f000 f81d 	bl	800fb9c <_isatty_r>
 800fb62:	b128      	cbz	r0, 800fb70 <__smakebuf_r+0x70>
 800fb64:	89a3      	ldrh	r3, [r4, #12]
 800fb66:	f023 0303 	bic.w	r3, r3, #3
 800fb6a:	f043 0301 	orr.w	r3, r3, #1
 800fb6e:	81a3      	strh	r3, [r4, #12]
 800fb70:	89a3      	ldrh	r3, [r4, #12]
 800fb72:	431d      	orrs	r5, r3
 800fb74:	81a5      	strh	r5, [r4, #12]
 800fb76:	e7cf      	b.n	800fb18 <__smakebuf_r+0x18>

0800fb78 <_fstat_r>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4d07      	ldr	r5, [pc, #28]	@ (800fb98 <_fstat_r+0x20>)
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	4604      	mov	r4, r0
 800fb80:	4608      	mov	r0, r1
 800fb82:	4611      	mov	r1, r2
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	f7f5 f8b7 	bl	8004cf8 <_fstat>
 800fb8a:	1c43      	adds	r3, r0, #1
 800fb8c:	d102      	bne.n	800fb94 <_fstat_r+0x1c>
 800fb8e:	682b      	ldr	r3, [r5, #0]
 800fb90:	b103      	cbz	r3, 800fb94 <_fstat_r+0x1c>
 800fb92:	6023      	str	r3, [r4, #0]
 800fb94:	bd38      	pop	{r3, r4, r5, pc}
 800fb96:	bf00      	nop
 800fb98:	20000f3c 	.word	0x20000f3c

0800fb9c <_isatty_r>:
 800fb9c:	b538      	push	{r3, r4, r5, lr}
 800fb9e:	4d06      	ldr	r5, [pc, #24]	@ (800fbb8 <_isatty_r+0x1c>)
 800fba0:	2300      	movs	r3, #0
 800fba2:	4604      	mov	r4, r0
 800fba4:	4608      	mov	r0, r1
 800fba6:	602b      	str	r3, [r5, #0]
 800fba8:	f7f5 f8b6 	bl	8004d18 <_isatty>
 800fbac:	1c43      	adds	r3, r0, #1
 800fbae:	d102      	bne.n	800fbb6 <_isatty_r+0x1a>
 800fbb0:	682b      	ldr	r3, [r5, #0]
 800fbb2:	b103      	cbz	r3, 800fbb6 <_isatty_r+0x1a>
 800fbb4:	6023      	str	r3, [r4, #0]
 800fbb6:	bd38      	pop	{r3, r4, r5, pc}
 800fbb8:	20000f3c 	.word	0x20000f3c

0800fbbc <fmaxf>:
 800fbbc:	b508      	push	{r3, lr}
 800fbbe:	ed2d 8b02 	vpush	{d8}
 800fbc2:	eeb0 8a40 	vmov.f32	s16, s0
 800fbc6:	eef0 8a60 	vmov.f32	s17, s1
 800fbca:	f000 f831 	bl	800fc30 <__fpclassifyf>
 800fbce:	b930      	cbnz	r0, 800fbde <fmaxf+0x22>
 800fbd0:	eeb0 8a68 	vmov.f32	s16, s17
 800fbd4:	eeb0 0a48 	vmov.f32	s0, s16
 800fbd8:	ecbd 8b02 	vpop	{d8}
 800fbdc:	bd08      	pop	{r3, pc}
 800fbde:	eeb0 0a68 	vmov.f32	s0, s17
 800fbe2:	f000 f825 	bl	800fc30 <__fpclassifyf>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d0f4      	beq.n	800fbd4 <fmaxf+0x18>
 800fbea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf2:	dded      	ble.n	800fbd0 <fmaxf+0x14>
 800fbf4:	e7ee      	b.n	800fbd4 <fmaxf+0x18>

0800fbf6 <fminf>:
 800fbf6:	b508      	push	{r3, lr}
 800fbf8:	ed2d 8b02 	vpush	{d8}
 800fbfc:	eeb0 8a40 	vmov.f32	s16, s0
 800fc00:	eef0 8a60 	vmov.f32	s17, s1
 800fc04:	f000 f814 	bl	800fc30 <__fpclassifyf>
 800fc08:	b930      	cbnz	r0, 800fc18 <fminf+0x22>
 800fc0a:	eeb0 8a68 	vmov.f32	s16, s17
 800fc0e:	eeb0 0a48 	vmov.f32	s0, s16
 800fc12:	ecbd 8b02 	vpop	{d8}
 800fc16:	bd08      	pop	{r3, pc}
 800fc18:	eeb0 0a68 	vmov.f32	s0, s17
 800fc1c:	f000 f808 	bl	800fc30 <__fpclassifyf>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	d0f4      	beq.n	800fc0e <fminf+0x18>
 800fc24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2c:	d5ed      	bpl.n	800fc0a <fminf+0x14>
 800fc2e:	e7ee      	b.n	800fc0e <fminf+0x18>

0800fc30 <__fpclassifyf>:
 800fc30:	ee10 3a10 	vmov	r3, s0
 800fc34:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800fc38:	d00d      	beq.n	800fc56 <__fpclassifyf+0x26>
 800fc3a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800fc3e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800fc42:	d30a      	bcc.n	800fc5a <__fpclassifyf+0x2a>
 800fc44:	4b07      	ldr	r3, [pc, #28]	@ (800fc64 <__fpclassifyf+0x34>)
 800fc46:	1e42      	subs	r2, r0, #1
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d908      	bls.n	800fc5e <__fpclassifyf+0x2e>
 800fc4c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800fc50:	4258      	negs	r0, r3
 800fc52:	4158      	adcs	r0, r3
 800fc54:	4770      	bx	lr
 800fc56:	2002      	movs	r0, #2
 800fc58:	4770      	bx	lr
 800fc5a:	2004      	movs	r0, #4
 800fc5c:	4770      	bx	lr
 800fc5e:	2003      	movs	r0, #3
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	007ffffe 	.word	0x007ffffe

0800fc68 <round>:
 800fc68:	ec51 0b10 	vmov	r0, r1, d0
 800fc6c:	b570      	push	{r4, r5, r6, lr}
 800fc6e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800fc72:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800fc76:	2a13      	cmp	r2, #19
 800fc78:	460b      	mov	r3, r1
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	dc1b      	bgt.n	800fcb6 <round+0x4e>
 800fc7e:	2a00      	cmp	r2, #0
 800fc80:	da0b      	bge.n	800fc9a <round+0x32>
 800fc82:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800fc86:	3201      	adds	r2, #1
 800fc88:	bf04      	itt	eq
 800fc8a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800fc8e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800fc92:	2200      	movs	r2, #0
 800fc94:	4619      	mov	r1, r3
 800fc96:	4610      	mov	r0, r2
 800fc98:	e015      	b.n	800fcc6 <round+0x5e>
 800fc9a:	4c15      	ldr	r4, [pc, #84]	@ (800fcf0 <round+0x88>)
 800fc9c:	4114      	asrs	r4, r2
 800fc9e:	ea04 0601 	and.w	r6, r4, r1
 800fca2:	4306      	orrs	r6, r0
 800fca4:	d00f      	beq.n	800fcc6 <round+0x5e>
 800fca6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800fcaa:	fa41 f202 	asr.w	r2, r1, r2
 800fcae:	4413      	add	r3, r2
 800fcb0:	ea23 0304 	bic.w	r3, r3, r4
 800fcb4:	e7ed      	b.n	800fc92 <round+0x2a>
 800fcb6:	2a33      	cmp	r2, #51	@ 0x33
 800fcb8:	dd08      	ble.n	800fccc <round+0x64>
 800fcba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800fcbe:	d102      	bne.n	800fcc6 <round+0x5e>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	f7f0 fb03 	bl	80002cc <__adddf3>
 800fcc6:	ec41 0b10 	vmov	d0, r0, r1
 800fcca:	bd70      	pop	{r4, r5, r6, pc}
 800fccc:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800fcd0:	f04f 34ff 	mov.w	r4, #4294967295
 800fcd4:	40f4      	lsrs	r4, r6
 800fcd6:	4204      	tst	r4, r0
 800fcd8:	d0f5      	beq.n	800fcc6 <round+0x5e>
 800fcda:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800fcde:	2201      	movs	r2, #1
 800fce0:	408a      	lsls	r2, r1
 800fce2:	1952      	adds	r2, r2, r5
 800fce4:	bf28      	it	cs
 800fce6:	3301      	addcs	r3, #1
 800fce8:	ea22 0204 	bic.w	r2, r2, r4
 800fcec:	e7d2      	b.n	800fc94 <round+0x2c>
 800fcee:	bf00      	nop
 800fcf0:	000fffff 	.word	0x000fffff

0800fcf4 <_init>:
 800fcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf6:	bf00      	nop
 800fcf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcfa:	bc08      	pop	{r3}
 800fcfc:	469e      	mov	lr, r3
 800fcfe:	4770      	bx	lr

0800fd00 <_fini>:
 800fd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd02:	bf00      	nop
 800fd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd06:	bc08      	pop	{r3}
 800fd08:	469e      	mov	lr, r3
 800fd0a:	4770      	bx	lr
