
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005e5c  08005e5c  00006e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc4  08005fc4  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fcc  08005fcc  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005fd4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000070  08006044  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08006044  000073e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001181b  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002612  00000000  00000000  000188bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3a  00000000  00000000  0001bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a13  00000000  00000000  0001ccda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015480  00000000  00000000  000406ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6039  00000000  00000000  00055b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0012bbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00130bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e44 	.word	0x08005e44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005e44 	.word	0x08005e44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 80005a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005aa:	b21b      	sxth	r3, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 80005bc:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <getLeftEncoderCounts+0x14>)
 80005be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c0:	b21b      	sxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	40010000 	.word	0x40010000

080005d0 <resetEncoders>:

void resetEncoders() {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <resetEncoders+0x1c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 80005da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40010000 	.word	0x40010000

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f001 f8ce 	bl	8001794 <HAL_Init>

  /* USER CODE BEGIN Init */
  pca9685_init(&handle);
 80005f8:	481d      	ldr	r0, [pc, #116]	@ (8000670 <main+0x80>)
 80005fa:	f000 fb7b 	bl	8000cf4 <pca9685_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f843 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fa85 	bl	8000b10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 fa05 	bl	8000a14 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800060a:	f000 f8dd 	bl	80007c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060e:	f000 f933 	bl	8000878 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000612:	f000 f985 	bl	8000920 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000616:	f000 f8a9 	bl	800076c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800061a:	f000 fa25 	bl	8000a68 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800061e:	f000 fa4d 	bl	8000abc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000622:	213c      	movs	r1, #60	@ 0x3c
 8000624:	4813      	ldr	r0, [pc, #76]	@ (8000674 <main+0x84>)
 8000626:	f003 fbfb 	bl	8003e20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800062a:	213c      	movs	r1, #60	@ 0x3c
 800062c:	4812      	ldr	r0, [pc, #72]	@ (8000678 <main+0x88>)
 800062e:	f003 fbf7 	bl	8003e20 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	4811      	ldr	r0, [pc, #68]	@ (800067c <main+0x8c>)
 8000636:	f003 fa85 	bl	8003b44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800063a:	2104      	movs	r1, #4
 800063c:	480f      	ldr	r0, [pc, #60]	@ (800067c <main+0x8c>)
 800063e:	f003 fa81 	bl	8003b44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000642:	2108      	movs	r1, #8
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <main+0x8c>)
 8000646:	f003 fa7d 	bl	8003b44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800064a:	210c      	movs	r1, #12
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <main+0x8c>)
 800064e:	f003 fa79 	bl	8003b44 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  left_counts = getLeftEncoderCounts();
 8000652:	f7ff ffb1 	bl	80005b8 <getLeftEncoderCounts>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <main+0x90>)
 800065c:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 800065e:	f7ff ff9f 	bl	80005a0 <getRightEncoderCounts>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <main+0x94>)
 8000668:	801a      	strh	r2, [r3, #0]
	  left_counts = getLeftEncoderCounts();
 800066a:	bf00      	nop
 800066c:	e7f1      	b.n	8000652 <main+0x62>
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000
 8000674:	200000e0 	.word	0x200000e0
 8000678:	20000128 	.word	0x20000128
 800067c:	20000170 	.word	0x20000170
 8000680:	20000290 	.word	0x20000290
 8000684:	20000292 	.word	0x20000292

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2234      	movs	r2, #52	@ 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fd3f 	bl	800511a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000764 <SystemClock_Config+0xdc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000764 <SystemClock_Config+0xdc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <SystemClock_Config+0xdc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <SystemClock_Config+0xe0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a25      	ldr	r2, [pc, #148]	@ (8000768 <SystemClock_Config+0xe0>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <SystemClock_Config+0xe0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006fc:	23b4      	movs	r3, #180	@ 0xb4
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f002 ff29 	bl	8003568 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800071c:	f000 fa66 	bl	8000bec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000720:	f002 fb88 	bl	8002e34 <HAL_PWREx_EnableOverDrive>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800072a:	f000 fa5f 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000744:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2105      	movs	r1, #5
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fbc1 	bl	8002ed4 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000758:	f000 fa48 	bl	8000bec <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	@ 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_I2C2_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <MX_I2C2_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_I2C2_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_I2C2_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_I2C2_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_I2C2_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_I2C2_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_I2C2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_I2C2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_I2C2_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_I2C2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_I2C2_Init+0x50>)
 80007aa:	f001 fb49 	bl	8001e40 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 fa1a 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	40005800 	.word	0x40005800
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2224      	movs	r2, #36	@ 0x24
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fc9f 	bl	800511a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007e6:	4a23      	ldr	r2, [pc, #140]	@ (8000874 <MX_TIM1_Init+0xac>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ea:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_TIM1_Init+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_TIM1_Init+0xa8>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_TIM1_Init+0xa8>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000810:	2303      	movs	r3, #3
 8000812:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_TIM1_Init+0xa8>)
 800083c:	f003 fa4a 	bl	8003cd4 <HAL_TIM_Encoder_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000846:	f000 f9d1 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_TIM1_Init+0xa8>)
 8000858:	f003 ffd6 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000862:	f000 f9c3 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	@ 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000e0 	.word	0x200000e0
 8000874:	40010000 	.word	0x40010000

08000878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2224      	movs	r2, #36	@ 0x24
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fc47 	bl	800511a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <MX_TIM2_Init+0xa4>)
 8000896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <MX_TIM2_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_TIM2_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <MX_TIM2_Init+0xa4>)
 80008aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_TIM2_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <MX_TIM2_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008bc:	2303      	movs	r3, #3
 80008be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <MX_TIM2_Init+0xa4>)
 80008e8:	f003 f9f4 	bl	8003cd4 <HAL_TIM_Encoder_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008f2:	f000 f97b 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	@ (800091c <MX_TIM2_Init+0xa4>)
 8000904:	f003 ff80 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800090e:	f000 f96d 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	@ 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000128 	.word	0x20000128

08000920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000942:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <MX_TIM4_Init+0xec>)
 8000944:	4a32      	ldr	r2, [pc, #200]	@ (8000a10 <MX_TIM4_Init+0xf0>)
 8000946:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000948:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <MX_TIM4_Init+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <MX_TIM4_Init+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8000954:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <MX_TIM4_Init+0xec>)
 8000956:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800095a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a0c <MX_TIM4_Init+0xec>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <MX_TIM4_Init+0xec>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000968:	4828      	ldr	r0, [pc, #160]	@ (8000a0c <MX_TIM4_Init+0xec>)
 800096a:	f003 f89b 	bl	8003aa4 <HAL_TIM_PWM_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f93a 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4619      	mov	r1, r3
 8000986:	4821      	ldr	r0, [pc, #132]	@ (8000a0c <MX_TIM4_Init+0xec>)
 8000988:	f003 ff3e 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000992:	f000 f92b 	bl	8000bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000996:	2360      	movs	r3, #96	@ 0x60
 8000998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	4619      	mov	r1, r3
 80009ac:	4817      	ldr	r0, [pc, #92]	@ (8000a0c <MX_TIM4_Init+0xec>)
 80009ae:	f003 fbb5 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80009b8:	f000 f918 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2204      	movs	r2, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <MX_TIM4_Init+0xec>)
 80009c4:	f003 fbaa 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80009ce:	f000 f90d 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2208      	movs	r2, #8
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <MX_TIM4_Init+0xec>)
 80009da:	f003 fb9f 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80009e4:	f000 f902 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	220c      	movs	r2, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <MX_TIM4_Init+0xec>)
 80009f0:	f003 fb94 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80009fa:	f000 f8f7 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009fe:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <MX_TIM4_Init+0xec>)
 8000a00:	f000 fc64 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000170 	.word	0x20000170
 8000a10:	40000800 	.word	0x40000800

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <MX_USART2_UART_Init+0x50>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	f003 ff6c 	bl	8004928 <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a56:	f000 f8c9 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001b8 	.word	0x200001b8
 8000a64:	40004400 	.word	0x40004400

08000a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_USART3_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000aa0:	f003 ff42 	bl	8004928 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f89f 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000200 	.word	0x20000200
 8000ab8:	40004800 	.word	0x40004800

08000abc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <MX_USART6_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_USART6_UART_Init+0x4c>)
 8000af4:	f003 ff18 	bl	8004928 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f875 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000248 	.word	0x20000248
 8000b0c:	40011400 	.word	0x40011400

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a25      	ldr	r2, [pc, #148]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a1e      	ldr	r2, [pc, #120]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <MX_GPIO_Init+0xd0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2120      	movs	r1, #32
 8000b9a:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <MX_GPIO_Init+0xd4>)
 8000b9c:	f001 f936 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_GPIO_Init+0xd8>)
 8000bb8:	f000 ff94 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bbc:	2320      	movs	r3, #32
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_GPIO_Init+0xd4>)
 8000bd4:	f000 ff86 	bl	8001ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020800 	.word	0x40020800

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <pca9685_write_u8>:
		3248, 3284, 3320, 3356, 3393, 3430, 3467, 3504, 3542, 3579, 3617, 3656, 3694, 3733, 3773, 3812, 3852, 3892,
		3932, 3973, 4013, 4055, 4095
};

static bool pca9685_write_u8(pca9685_handle_t *handle, uint8_t address, uint8_t value)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
 8000c04:	4613      	mov	r3, r2
 8000c06:	70bb      	strb	r3, [r7, #2]
	uint8_t data[] = {address, value};
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	733b      	strb	r3, [r7, #12]
 8000c0c:	78bb      	ldrb	r3, [r7, #2]
 8000c0e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8899      	ldrh	r1, [r3, #4]
 8000c18:	f107 020c 	add.w	r2, r7, #12
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2302      	movs	r3, #2
 8000c22:	f001 fa51 	bl	80020c8 <HAL_I2C_Master_Transmit>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <pca9685_write_data>:

static bool pca9685_write_data(pca9685_handle_t *handle, uint8_t address, uint8_t *data, size_t length)
{
 8000c3a:	b590      	push	{r4, r7, lr}
 8000c3c:	b089      	sub	sp, #36	@ 0x24
 8000c3e:	af02      	add	r7, sp, #8
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	460b      	mov	r3, r1
 8000c48:	72fb      	strb	r3, [r7, #11]
    if (length == 0 || length > 4) {
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <pca9685_write_data+0x1c>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d901      	bls.n	8000c5a <pca9685_write_data+0x20>
        return false;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e01d      	b.n	8000c96 <pca9685_write_data+0x5c>
    }

    uint8_t transfer[5];
    transfer[0] = address;
 8000c5a:	7afb      	ldrb	r3, [r7, #11]
 8000c5c:	743b      	strb	r3, [r7, #16]

    memcpy(&transfer[1], data, length);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	3301      	adds	r3, #1
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 fad2 	bl	8005212 <memcpy>

    return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer, length + 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8899      	ldrh	r1, [r3, #4]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	f107 0210 	add.w	r2, r7, #16
 8000c82:	2401      	movs	r4, #1
 8000c84:	9400      	str	r4, [sp, #0]
 8000c86:	f001 fa1f 	bl	80020c8 <HAL_I2C_Master_Transmit>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf0c      	ite	eq
 8000c90:	2301      	moveq	r3, #1
 8000c92:	2300      	movne	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}

08000c9e <pca9685_read_u8>:

static bool pca9685_read_u8(pca9685_handle_t *handle, uint8_t address, uint8_t *dest)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af02      	add	r7, sp, #8
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	72fb      	strb	r3, [r7, #11]
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &address, 1, PCA9685_I2C_TIMEOUT) != HAL_OK) {
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	8899      	ldrh	r1, [r3, #4]
 8000cb4:	f107 020b 	add.w	r2, r7, #11
 8000cb8:	2301      	movs	r3, #1
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f001 fa03 	bl	80020c8 <HAL_I2C_Master_Transmit>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <pca9685_read_u8+0x2e>
		return false;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e00f      	b.n	8000cec <pca9685_read_u8+0x4e>
	}

	return HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, dest, 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	8899      	ldrh	r1, [r3, #4]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	f001 faf2 	bl	80022c4 <HAL_I2C_Master_Receive>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf0c      	ite	eq
 8000ce6:	2301      	moveq	r3, #1
 8000ce8:	2300      	movne	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <pca9685_init>:

bool pca9685_init(pca9685_handle_t *handle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle != NULL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d105      	bne.n	8000d10 <pca9685_init+0x1c>
 8000d04:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <pca9685_init+0xd8>)
 8000d06:	4a32      	ldr	r2, [pc, #200]	@ (8000dd0 <pca9685_init+0xdc>)
 8000d08:	2155      	movs	r1, #85	@ 0x55
 8000d0a:	4832      	ldr	r0, [pc, #200]	@ (8000dd4 <pca9685_init+0xe0>)
 8000d0c:	f004 f8d0 	bl	8004eb0 <__assert_func>

	bool success = true;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73bb      	strb	r3, [r7, #14]

	// Set mode registers to default values (Auto-Increment, Sleep, Open-Drain).
	uint8_t mode1_reg_default_value = 0b00110000u;
 8000d14:	2330      	movs	r3, #48	@ 0x30
 8000d16:	737b      	strb	r3, [r7, #13]
	uint8_t mode2_reg_default_value = 0b00000000u;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]

	if (handle->inverted) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	799b      	ldrb	r3, [r3, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <pca9685_init+0x38>
		mode2_reg_default_value |= 0b00010000u;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	73fb      	strb	r3, [r7, #15]
	}

	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg_default_value);
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff60 	bl	8000bf8 <pca9685_write_u8>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf14      	ite	ne
 8000d44:	2301      	movne	r3, #1
 8000d46:	2300      	moveq	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE2, mode2_reg_default_value);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff51 	bl	8000bf8 <pca9685_write_u8>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf14      	ite	ne
 8000d62:	2301      	movne	r3, #1
 8000d64:	2300      	moveq	r3, #0
 8000d66:	73bb      	strb	r3, [r7, #14]

    // Turn all channels off to begin with.
    uint8_t data[4] = { 0x00, 0x00, 0x00, 0x10 };
 8000d68:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d6c:	60bb      	str	r3, [r7, #8]
    success &= pca9685_write_data(handle, PCA9685_REGISTER_ALL_LED_ON_L, data, 4);
 8000d6e:	f107 0208 	add.w	r2, r7, #8
 8000d72:	2304      	movs	r3, #4
 8000d74:	21fa      	movs	r1, #250	@ 0xfa
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff5f 	bl	8000c3a <pca9685_write_data>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bf14      	ite	ne
 8000d88:	2301      	movne	r3, #1
 8000d8a:	2300      	moveq	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]

	success &= pca9685_set_pwm_frequency(handle, 1000);
 8000d8e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000dd8 <pca9685_init+0xe4>
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f8d2 	bl	8000f3c <pca9685_set_pwm_frequency>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_wakeup(handle);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f870 	bl	8000e90 <pca9685_wakeup>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	73bb      	strb	r3, [r7, #14]

	return success;
 8000dc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	08005e5c 	.word	0x08005e5c
 8000dd0:	08005f10 	.word	0x08005f10
 8000dd4:	08005e78 	.word	0x08005e78
 8000dd8:	447a0000 	.word	0x447a0000

08000ddc <pca9685_is_sleeping>:

bool pca9685_is_sleeping(pca9685_handle_t *handle, bool *sleeping)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	bool success = true;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000dea:	f107 030e 	add.w	r3, r7, #14
 8000dee:	461a      	mov	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff53 	bl	8000c9e <pca9685_read_u8>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf14      	ite	ne
 8000e04:	2301      	movne	r3, #1
 8000e06:	2300      	moveq	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]

	// Check if the sleeping bit is set.
	*sleeping = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf14      	ite	ne
 8000e14:	2301      	movne	r3, #1
 8000e16:	2300      	moveq	r3, #0
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]

	return success;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <pca9685_sleep>:

bool pca9685_sleep(pca9685_handle_t *handle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	bool success = true;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000e34:	f107 030e 	add.w	r3, r7, #14
 8000e38:	461a      	mov	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff2e 	bl	8000c9e <pca9685_read_u8>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]

	// Don't write the restart bit back and set the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	73bb      	strb	r3, [r7, #14]
	PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fec2 	bl	8000bf8 <pca9685_write_u8>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

	return success;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <pca9685_wakeup>:

bool pca9685_wakeup(pca9685_handle_t *handle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	bool success = true;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000e9c:	f107 030d 	add.w	r3, r7, #13
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fefa 	bl	8000c9e <pca9685_read_u8>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf14      	ite	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	2300      	moveq	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

	bool restart_required = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
 8000ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf14      	ite	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	2300      	moveq	r3, #0
 8000eca:	73bb      	strb	r3, [r7, #14]

	// Clear the restart bit for now and clear the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	737b      	strb	r3, [r7, #13]
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000ed6:	7b7b      	ldrb	r3, [r7, #13]
 8000ed8:	f023 0310 	bic.w	r3, r3, #16
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	737b      	strb	r3, [r7, #13]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000ee0:	7b7b      	ldrb	r3, [r7, #13]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fe86 	bl	8000bf8 <pca9685_write_u8>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf14      	ite	ne
 8000ef8:	2301      	movne	r3, #1
 8000efa:	2300      	moveq	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]

	if (restart_required) {
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d016      	beq.n	8000f32 <pca9685_wakeup+0xa2>

		// Oscillator requires at least 500us to stabilise, so wait 1ms.
		HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 fcb7 	bl	8001878 <HAL_Delay>

		PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
 8000f0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	737b      	strb	r3, [r7, #13]
		success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000f14:	7b7b      	ldrb	r3, [r7, #13]
 8000f16:	461a      	mov	r2, r3
 8000f18:	2100      	movs	r1, #0
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fe6c 	bl	8000bf8 <pca9685_write_u8>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bf14      	ite	ne
 8000f2c:	2301      	movne	r3, #1
 8000f2e:	2300      	moveq	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
	}

	return success;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <pca9685_set_pwm_frequency>:

bool pca9685_set_pwm_frequency(pca9685_handle_t *handle, float frequency)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	ed87 0a02 	vstr	s0, [r7, #8]
	assert(frequency >= 24);
 8000f48:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f4c:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8000f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	da05      	bge.n	8000f66 <pca9685_set_pwm_frequency+0x2a>
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <pca9685_set_pwm_frequency+0x10c>)
 8000f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800104c <pca9685_set_pwm_frequency+0x110>)
 8000f5e:	21a9      	movs	r1, #169	@ 0xa9
 8000f60:	483b      	ldr	r0, [pc, #236]	@ (8001050 <pca9685_set_pwm_frequency+0x114>)
 8000f62:	f003 ffa5 	bl	8004eb0 <__assert_func>
	assert(frequency <= 1526);
 8000f66:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f6a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001054 <pca9685_set_pwm_frequency+0x118>
 8000f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d905      	bls.n	8000f84 <pca9685_set_pwm_frequency+0x48>
 8000f78:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <pca9685_set_pwm_frequency+0x11c>)
 8000f7a:	4a34      	ldr	r2, [pc, #208]	@ (800104c <pca9685_set_pwm_frequency+0x110>)
 8000f7c:	21aa      	movs	r1, #170	@ 0xaa
 8000f7e:	4834      	ldr	r0, [pc, #208]	@ (8001050 <pca9685_set_pwm_frequency+0x114>)
 8000f80:	f003 ff96 	bl	8004eb0 <__assert_func>

	bool success = true;
 8000f84:	2301      	movs	r3, #1
 8000f86:	75fb      	strb	r3, [r7, #23]

	// Calculate the prescaler value (see datasheet page 25)
	uint8_t prescaler = (uint8_t)roundf(25000000.0f / (4096 * frequency)) - 1;
 8000f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800105c <pca9685_set_pwm_frequency+0x120>
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001060 <pca9685_set_pwm_frequency+0x124>
 8000f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa0:	f004 ff2c 	bl	8005dfc <roundf>
 8000fa4:	eef0 7a40 	vmov.f32	s15, s0
 8000fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fac:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fb0:	793b      	ldrb	r3, [r7, #4]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	75bb      	strb	r3, [r7, #22]

	bool already_sleeping;
	success &= pca9685_is_sleeping(handle, &already_sleeping);
 8000fb8:	f107 0315 	add.w	r3, r7, #21
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff ff0c 	bl	8000ddc <pca9685_is_sleeping>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]

	// The prescaler can only be changed in sleep mode.
	if (!already_sleeping) {
 8000fd6:	7d7b      	ldrb	r3, [r7, #21]
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <pca9685_set_pwm_frequency+0xbe>
		success &= pca9685_sleep(handle);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ff20 	bl	8000e28 <pca9685_sleep>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	75fb      	strb	r3, [r7, #23]
	}

	// Write the new prescaler value.
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_PRESCALER, prescaler);
 8000ffa:	7dbb      	ldrb	r3, [r7, #22]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	21fe      	movs	r1, #254	@ 0xfe
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff fdf9 	bl	8000bf8 <pca9685_write_u8>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]

	// If the device wasn't sleeping, return from sleep mode.
	if (!already_sleeping) {
 8001018:	7d7b      	ldrb	r3, [r7, #21]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <pca9685_set_pwm_frequency+0x100>
		success &= pca9685_wakeup(handle);
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff ff33 	bl	8000e90 <pca9685_wakeup>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	bf14      	ite	ne
 8001036:	2301      	movne	r3, #1
 8001038:	2300      	moveq	r3, #0
 800103a:	75fb      	strb	r3, [r7, #23]
	}

	return success;
 800103c:	7dfb      	ldrb	r3, [r7, #23]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08005e90 	.word	0x08005e90
 800104c:	08005f20 	.word	0x08005f20
 8001050:	08005e78 	.word	0x08005e78
 8001054:	44bec000 	.word	0x44bec000
 8001058:	08005ea0 	.word	0x08005ea0
 800105c:	45800000 	.word	0x45800000
 8001060:	4bbebc20 	.word	0x4bbebc20

08001064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a0f      	ldr	r2, [pc, #60]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f000 fcdc 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a29      	ldr	r2, [pc, #164]	@ (8001178 <HAL_I2C_MspInit+0xc4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d14b      	bne.n	800116e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a27      	ldr	r2, [pc, #156]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b25      	ldr	r3, [pc, #148]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b21      	ldr	r3, [pc, #132]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a20      	ldr	r2, [pc, #128]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001114:	2312      	movs	r3, #18
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001120:	2304      	movs	r3, #4
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4815      	ldr	r0, [pc, #84]	@ (8001180 <HAL_I2C_MspInit+0xcc>)
 800112c:	f000 fcda 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001136:	2312      	movs	r3, #18
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001142:	2304      	movs	r3, #4
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480d      	ldr	r0, [pc, #52]	@ (8001184 <HAL_I2C_MspInit+0xd0>)
 800114e:	f000 fcc9 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 800115c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_I2C_MspInit+0xc8>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40005800 	.word	0x40005800
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800

08001188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a32      	ldr	r2, [pc, #200]	@ (8001270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12d      	bne.n	8001206 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a30      	ldr	r2, [pc, #192]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a29      	ldr	r2, [pc, #164]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 80011e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	481e      	ldr	r0, [pc, #120]	@ (8001278 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001200:	f000 fc70 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001204:	e030      	b.n	8001268 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800120e:	d12b      	bne.n	8001268 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	4a16      	ldr	r2, [pc, #88]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6313      	str	r3, [r2, #48]	@ 0x30
 800123c:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_TIM_Encoder_MspInit+0xec>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8001248:	2303      	movs	r3, #3
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001264:	f000 fc3e 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001268:	bf00      	nop
 800126a:	3730      	adds	r7, #48	@ 0x30
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40010000 	.word	0x40010000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_TIM_PWM_MspInit+0x48>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d115      	bne.n	80012ba <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_TIM_PWM_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <HAL_TIM_PWM_MspInit+0x4c>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6413      	str	r3, [r2, #64]	@ 0x40
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_TIM_PWM_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	201e      	movs	r0, #30
 80012b0:	f000 fbe1 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012b4:	201e      	movs	r0, #30
 80012b6:	f000 fbfa 	bl	8001aae <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40000800 	.word	0x40000800
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <HAL_TIM_MspPostInit+0x68>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11e      	bne.n	800132c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_TIM_MspPostInit+0x6c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <HAL_TIM_MspPostInit+0x6c>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <HAL_TIM_MspPostInit+0x6c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800130a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800130e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800131c:	2302      	movs	r3, #2
 800131e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <HAL_TIM_MspPostInit+0x70>)
 8001328:	f000 fbdc 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40000800 	.word	0x40000800
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	@ 0x38
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a4b      	ldr	r2, [pc, #300]	@ (800148c <HAL_UART_MspInit+0x14c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12c      	bne.n	80013bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a49      	ldr	r2, [pc, #292]	@ (8001490 <HAL_UART_MspInit+0x150>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a42      	ldr	r2, [pc, #264]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b40      	ldr	r3, [pc, #256]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800139a:	230c      	movs	r3, #12
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4837      	ldr	r0, [pc, #220]	@ (8001494 <HAL_UART_MspInit+0x154>)
 80013b6:	f000 fb95 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013ba:	e063      	b.n	8001484 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a35      	ldr	r2, [pc, #212]	@ (8001498 <HAL_UART_MspInit+0x158>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12d      	bne.n	8001422 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <HAL_UART_MspInit+0x150>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a30      	ldr	r2, [pc, #192]	@ (8001490 <HAL_UART_MspInit+0x150>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <HAL_UART_MspInit+0x150>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_UART_MspInit+0x150>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a29      	ldr	r2, [pc, #164]	@ (8001490 <HAL_UART_MspInit+0x150>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <HAL_UART_MspInit+0x150>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80013fe:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001410:	2307      	movs	r3, #7
 8001412:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	4820      	ldr	r0, [pc, #128]	@ (800149c <HAL_UART_MspInit+0x15c>)
 800141c:	f000 fb62 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001420:	e030      	b.n	8001484 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <HAL_UART_MspInit+0x160>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d12b      	bne.n	8001484 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6453      	str	r3, [r2, #68]	@ 0x44
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_UART_MspInit+0x150>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_UART_MspInit+0x150>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_UART_MspInit+0x150>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001464:	23c0      	movs	r3, #192	@ 0xc0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001474:	2308      	movs	r3, #8
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	@ (800149c <HAL_UART_MspInit+0x15c>)
 8001480:	f000 fb30 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001484:	bf00      	nop
 8001486:	3738      	adds	r7, #56	@ 0x38
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40004400 	.word	0x40004400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000
 8001498:	40004800 	.word	0x40004800
 800149c:	40020800 	.word	0x40020800
 80014a0:	40011400 	.word	0x40011400

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 f99d 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 80014fe:	f000 f8e5 	bl	80016cc <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <TIM4_IRQHandler+0x10>)
 800150e:	f002 fd15 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000170 	.word	0x20000170

0800151c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_kill>:

int _kill(int pid, int sig)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001536:	f003 fe3f 	bl	80051b8 <__errno>
 800153a:	4603      	mov	r3, r0
 800153c:	2216      	movs	r2, #22
 800153e:	601a      	str	r2, [r3, #0]
  return -1;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_exit>:

void _exit (int status)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ffe7 	bl	800152c <_kill>
  while (1) {}    /* Make sure we hang here */
 800155e:	bf00      	nop
 8001560:	e7fd      	b.n	800155e <_exit+0x12>

08001562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e00a      	b.n	800158a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001574:	f3af 8000 	nop.w
 8001578:	4601      	mov	r1, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60ba      	str	r2, [r7, #8]
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	dbf0      	blt.n	8001574 <_read+0x12>
  }

  return len;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e009      	b.n	80015c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	60ba      	str	r2, [r7, #8]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbf1      	blt.n	80015ae <_write+0x12>
  }
  return len;
 80015ca:	687b      	ldr	r3, [r7, #4]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_close>:

int _close(int file)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fc:	605a      	str	r2, [r3, #4]
  return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_isatty>:

int _isatty(int file)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	@ (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f003 fda4 	bl	80051b8 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20020000 	.word	0x20020000
 800169c:	00000400 	.word	0x00000400
 80016a0:	20000294 	.word	0x20000294
 80016a4:	200003e8 	.word	0x200003e8

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <SysTickFunction>:

#include "main.h"
// #include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80016d2:	f7fe ff65 	bl	80005a0 <getRightEncoderCounts>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	f647 1318 	movw	r3, #31000	@ 0x7918
 80016de:	429a      	cmp	r2, r3
 80016e0:	dc15      	bgt.n	800170e <SysTickFunction+0x42>
 80016e2:	f7fe ff69 	bl	80005b8 <getLeftEncoderCounts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	f647 1318 	movw	r3, #31000	@ 0x7918
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dc0d      	bgt.n	800170e <SysTickFunction+0x42>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80016f2:	f7fe ff55 	bl	80005a0 <getRightEncoderCounts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <SysTickFunction+0x6c>)
 80016fc:	429a      	cmp	r2, r3
 80016fe:	db06      	blt.n	800170e <SysTickFunction+0x42>
 8001700:	f7fe ff5a 	bl	80005b8 <getLeftEncoderCounts>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <SysTickFunction+0x6c>)
 800170a:	429a      	cmp	r2, r3
 800170c:	da10      	bge.n	8001730 <SysTickFunction+0x64>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 800170e:	f7fe ff47 	bl	80005a0 <getRightEncoderCounts>
 8001712:	4603      	mov	r3, r0
 8001714:	b29c      	uxth	r4, r3
 8001716:	f7fe ff4f 	bl	80005b8 <getLeftEncoderCounts>
 800171a:	4603      	mov	r3, r0
 800171c:	b29b      	uxth	r3, r3
 800171e:	1ae3      	subs	r3, r4, r3
 8001720:	b29b      	uxth	r3, r3
 8001722:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8001724:	f7fe ff54 	bl	80005d0 <resetEncoders>
		TIM1->CNT = (int16_t) difference;
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <SysTickFunction+0x70>)
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	ffff86e8 	.word	0xffff86e8
 800173c:	40010000 	.word	0x40010000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001778 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001744:	f7ff ffb0 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	@ (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	@ (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800176e:	f003 fd29 	bl	80051c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7fe ff3d 	bl	80005f0 <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001784:	08005fd4 	.word	0x08005fd4
  ldr r2, =_sbss
 8001788:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800178c:	200003e8 	.word	0x200003e8

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <HAL_Init+0x40>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HAL_Init+0x40>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	@ (80017d4 <HAL_Init+0x40>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f94f 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fc4c 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f967 	bl	8001aca <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f92f 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	@ (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000008 	.word	0x20000008
 8001830:	20000010 	.word	0x20000010
 8001834:	2000000c 	.word	0x2000000c

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000010 	.word	0x20000010
 800185c:	20000298 	.word	0x20000298

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000298 	.word	0x20000298

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000010 	.word	0x20000010

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	@ (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	@ (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	@ (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	@ 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e165      	b.n	8001dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8154 	bne.w	8001dc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d005      	beq.n	8001b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d130      	bne.n	8001b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 0201 	and.w	r2, r3, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d017      	beq.n	8001bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80ae 	beq.w	8001dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	4a5c      	ldr	r2, [pc, #368]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a58      	ldr	r2, [pc, #352]	@ (8001de8 <HAL_GPIO_Init+0x304>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4f      	ldr	r2, [pc, #316]	@ (8001dec <HAL_GPIO_Init+0x308>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d025      	beq.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8001df0 <HAL_GPIO_Init+0x30c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01f      	beq.n	8001cfa <HAL_GPIO_Init+0x216>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x212>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8001df8 <HAL_GPIO_Init+0x314>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x20e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8001dfc <HAL_GPIO_Init+0x318>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x20a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001e00 <HAL_GPIO_Init+0x31c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x206>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a49      	ldr	r2, [pc, #292]	@ (8001e04 <HAL_GPIO_Init+0x320>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x202>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	@ (8001de8 <HAL_GPIO_Init+0x304>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a31      	ldr	r2, [pc, #196]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b2f      	ldr	r3, [pc, #188]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a26      	ldr	r2, [pc, #152]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b25      	ldr	r3, [pc, #148]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_GPIO_Init+0x324>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae96 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12b      	b.n	80020aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff f924 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	@ 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f001 f908 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a81      	ldr	r2, [pc, #516]	@ (80020b4 <HAL_I2C_Init+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d807      	bhi.n	8001ec4 <HAL_I2C_Init+0x84>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a80      	ldr	r2, [pc, #512]	@ (80020b8 <HAL_I2C_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e006      	b.n	8001ed2 <HAL_I2C_Init+0x92>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a7d      	ldr	r2, [pc, #500]	@ (80020bc <HAL_I2C_Init+0x27c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a78      	ldr	r2, [pc, #480]	@ (80020c0 <HAL_I2C_Init+0x280>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	@ (80020b4 <HAL_I2C_Init+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <HAL_I2C_Init+0xd4>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_I2C_Init+0xe8>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a69      	ldr	r2, [pc, #420]	@ (80020c4 <HAL_I2C_Init+0x284>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	3301      	adds	r3, #1
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	495c      	ldr	r1, [pc, #368]	@ (80020b4 <HAL_I2C_Init+0x274>)
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d819      	bhi.n	8001f7c <HAL_I2C_Init+0x13c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_Init+0x138>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e59      	subs	r1, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	e051      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x168>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x18e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x196>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	461a      	mov	r2, r3
 80020d4:	460b      	mov	r3, r1
 80020d6:	817b      	strh	r3, [r7, #10]
 80020d8:	4613      	mov	r3, r2
 80020da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fbc0 	bl	8001860 <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 80e0 	bne.w	80022b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4970      	ldr	r1, [pc, #448]	@ (80022bc <HAL_I2C_Master_Transmit+0x1f4>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fc64 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e0d3      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Master_Transmit+0x50>
 8002114:	2302      	movs	r3, #2
 8002116:	e0cc      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2221      	movs	r2, #33	@ 0x21
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a50      	ldr	r2, [pc, #320]	@ (80022c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 face 	bl	8002728 <I2C_MasterRequestWrite>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e08d      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ac:	e066      	b.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fd22 	bl	8002bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d107      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x188>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6a39      	ldr	r1, [r7, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fd19 	bl	8002c8c <I2C_WaitOnBTFFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e01a      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d194      	bne.n	80021ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	00100002 	.word	0x00100002
 80022c0:	ffff0000 	.word	0xffff0000

080022c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	@ 0x30
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	461a      	mov	r2, r3
 80022d0:	460b      	mov	r3, r1
 80022d2:	817b      	strh	r3, [r7, #10]
 80022d4:	4613      	mov	r3, r2
 80022d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff fac2 	bl	8001860 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	f040 8217 	bne.w	800271a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2319      	movs	r3, #25
 80022f2:	2201      	movs	r2, #1
 80022f4:	497c      	ldr	r1, [pc, #496]	@ (80024e8 <HAL_I2C_Master_Receive+0x224>)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fb66 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	e20a      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_I2C_Master_Receive+0x50>
 8002310:	2302      	movs	r3, #2
 8002312:	e203      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d007      	beq.n	800233a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002348:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2222      	movs	r2, #34	@ 0x22
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2210      	movs	r2, #16
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a5c      	ldr	r2, [pc, #368]	@ (80024ec <HAL_I2C_Master_Receive+0x228>)
 800237a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fa52 	bl	800282c <I2C_MasterRequestRead>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e1c4      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d113      	bne.n	80023c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e198      	b.n	80026f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d11b      	bne.n	8002402 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e178      	b.n	80026f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002406:	2b02      	cmp	r3, #2
 8002408:	d11b      	bne.n	8002442 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002418:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	e158      	b.n	80026f4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002468:	e144      	b.n	80026f4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b03      	cmp	r3, #3
 8002470:	f200 80f1 	bhi.w	8002656 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002478:	2b01      	cmp	r3, #1
 800247a:	d123      	bne.n	80024c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fc4b 	bl	8002d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e145      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024c2:	e117      	b.n	80026f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d14e      	bne.n	800256a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	4906      	ldr	r1, [pc, #24]	@ (80024f0 <HAL_I2C_Master_Receive+0x22c>)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fa76 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e11a      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
 80024e6:	bf00      	nop
 80024e8:	00100002 	.word	0x00100002
 80024ec:	ffff0000 	.word	0xffff0000
 80024f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002568:	e0c4      	b.n	80026f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	2200      	movs	r2, #0
 8002572:	496c      	ldr	r1, [pc, #432]	@ (8002724 <HAL_I2C_Master_Receive+0x460>)
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fa27 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cb      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	4955      	ldr	r1, [pc, #340]	@ (8002724 <HAL_I2C_Master_Receive+0x460>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f9f9 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e09d      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002654:	e04e      	b.n	80026f4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002658:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fb5e 	bl	8002d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e058      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d124      	bne.n	80026f4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d107      	bne.n	80026c2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f aeb6 	bne.w	800246a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3728      	adds	r7, #40	@ 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	00010004 	.word	0x00010004

08002728 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	460b      	mov	r3, r1
 8002736:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d006      	beq.n	8002752 <I2C_MasterRequestWrite+0x2a>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d003      	beq.n	8002752 <I2C_MasterRequestWrite+0x2a>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002750:	d108      	bne.n	8002764 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e00b      	b.n	800277c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	2b12      	cmp	r3, #18
 800276a:	d107      	bne.n	800277c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800277a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f91d 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a2:	d103      	bne.n	80027ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e035      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027b8:	d108      	bne.n	80027cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	e01b      	b.n	8002804 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	11db      	asrs	r3, r3, #7
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0306 	and.w	r3, r3, #6
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f063 030f 	orn	r3, r3, #15
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	490e      	ldr	r1, [pc, #56]	@ (8002824 <I2C_MasterRequestWrite+0xfc>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f966 	bl	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e010      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4907      	ldr	r1, [pc, #28]	@ (8002828 <I2C_MasterRequestWrite+0x100>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f956 	bl	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	00010008 	.word	0x00010008
 8002828:	00010002 	.word	0x00010002

0800282c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	460b      	mov	r3, r1
 800283a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002850:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d006      	beq.n	8002866 <I2C_MasterRequestRead+0x3a>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d003      	beq.n	8002866 <I2C_MasterRequestRead+0x3a>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002864:	d108      	bne.n	8002878 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e00b      	b.n	8002890 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	2b11      	cmp	r3, #17
 800287e:	d107      	bne.n	8002890 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800288e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f893 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b6:	d103      	bne.n	80028c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e079      	b.n	80029b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028cc:	d108      	bne.n	80028e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	e05f      	b.n	80029a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028e0:	897b      	ldrh	r3, [r7, #10]
 80028e2:	11db      	asrs	r3, r3, #7
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0306 	and.w	r3, r3, #6
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f063 030f 	orn	r3, r3, #15
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4930      	ldr	r1, [pc, #192]	@ (80029c0 <I2C_MasterRequestRead+0x194>)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f8dc 	bl	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e054      	b.n	80029b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4929      	ldr	r1, [pc, #164]	@ (80029c4 <I2C_MasterRequestRead+0x198>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8cc 	bl	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e044      	b.n	80029b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002952:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f831 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800297a:	d103      	bne.n	8002984 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e017      	b.n	80029b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002988:	897b      	ldrh	r3, [r7, #10]
 800298a:	11db      	asrs	r3, r3, #7
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 0306 	and.w	r3, r3, #6
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f063 030e 	orn	r3, r3, #14
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4907      	ldr	r1, [pc, #28]	@ (80029c4 <I2C_MasterRequestRead+0x198>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f888 	bl	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	00010008 	.word	0x00010008
 80029c4:	00010002 	.word	0x00010002

080029c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d8:	e048      	b.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d044      	beq.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fe ff3d 	bl	8001860 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d139      	bne.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	0c1b      	lsrs	r3, r3, #16
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d10d      	bne.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	e00c      	b.n	8002a38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d116      	bne.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e023      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	0c1b      	lsrs	r3, r3, #16
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d10d      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	e00c      	b.n	8002aac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d093      	beq.n	80029da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aca:	e071      	b.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ada:	d123      	bne.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e067      	b.n	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d041      	beq.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7fe fe98 	bl	8001860 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d136      	bne.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10c      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e00b      	b.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e021      	b.n	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10c      	bne.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e00b      	b.n	8002bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f af6d 	bne.w	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c08:	e034      	b.n	8002c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f8e3 	bl	8002dd6 <I2C_IsAcknowledgeFailed>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e034      	b.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d028      	beq.n	8002c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7fe fe1d 	bl	8001860 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11d      	bne.n	8002c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c42:	2b80      	cmp	r3, #128	@ 0x80
 8002c44:	d016      	beq.n	8002c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e007      	b.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b80      	cmp	r3, #128	@ 0x80
 8002c80:	d1c3      	bne.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c98:	e034      	b.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f89b 	bl	8002dd6 <I2C_IsAcknowledgeFailed>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e034      	b.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d028      	beq.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe fdd5 	bl	8001860 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d11d      	bne.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d016      	beq.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e007      	b.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d1c3      	bne.n	8002c9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d28:	e049      	b.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d119      	bne.n	8002d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0210 	mvn.w	r2, #16
 8002d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e030      	b.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6c:	f7fe fd78 	bl	8001860 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d302      	bcc.n	8002d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11d      	bne.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8c:	2b40      	cmp	r3, #64	@ 0x40
 8002d8e:	d016      	beq.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b40      	cmp	r3, #64	@ 0x40
 8002dca:	d1ae      	bne.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dec:	d11b      	bne.n	8002e26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f043 0204 	orr.w	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7fe fcfe 	bl	8001860 <HAL_GetTick>
 8002e64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e66:	e009      	b.n	8002e7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e68:	f7fe fcfa 	bl	8001860 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e76:	d901      	bls.n	8002e7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e01f      	b.n	8002ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e88:	d1ee      	bne.n	8002e68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e90:	f7fe fce6 	bl	8001860 <HAL_GetTick>
 8002e94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e96:	e009      	b.n	8002eac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e98:	f7fe fce2 	bl	8001860 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ea6:	d901      	bls.n	8002eac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e007      	b.n	8002ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eac:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	420e0040 	.word	0x420e0040
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	420e0044 	.word	0x420e0044

08002ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0cc      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b68      	ldr	r3, [pc, #416]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d90c      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b65      	ldr	r3, [pc, #404]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a52      	ldr	r2, [pc, #328]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d044      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d119      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b3f      	ldr	r3, [pc, #252]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e067      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4934      	ldr	r1, [pc, #208]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe fc4c 	bl	8001860 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fe fc48 	bl	8001860 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e04f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b25      	ldr	r3, [pc, #148]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d20c      	bcs.n	800301c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b22      	ldr	r3, [pc, #136]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003046:	4b12      	ldr	r3, [pc, #72]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f855 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	@ (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	@ (800309c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fbac 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00
 8003090:	40023800 	.word	0x40023800
 8003094:	08005f3c 	.word	0x08005f3c
 8003098:	20000008 	.word	0x20000008
 800309c:	2000000c 	.word	0x2000000c

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000008 	.word	0x20000008

080030b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030bc:	f7ff fff0 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	@ (80030dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08005f4c 	.word	0x08005f4c

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030e4:	f7ff ffdc 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	@ (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08005f4c 	.word	0x08005f4c

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b0ae      	sub	sp, #184	@ 0xb8
 800310e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312e:	4bcb      	ldr	r3, [pc, #812]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b0c      	cmp	r3, #12
 8003138:	f200 8206 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x440>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <HAL_RCC_GetSysClockFreq+0x3c>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003179 	.word	0x08003179
 8003148:	08003549 	.word	0x08003549
 800314c:	08003549 	.word	0x08003549
 8003150:	08003549 	.word	0x08003549
 8003154:	08003181 	.word	0x08003181
 8003158:	08003549 	.word	0x08003549
 800315c:	08003549 	.word	0x08003549
 8003160:	08003549 	.word	0x08003549
 8003164:	08003189 	.word	0x08003189
 8003168:	08003549 	.word	0x08003549
 800316c:	08003549 	.word	0x08003549
 8003170:	08003549 	.word	0x08003549
 8003174:	08003379 	.word	0x08003379
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4bb9      	ldr	r3, [pc, #740]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x358>)
 800317a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800317e:	e1e7      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003180:	4bb8      	ldr	r3, [pc, #736]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003186:	e1e3      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003188:	4bb4      	ldr	r3, [pc, #720]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003194:	4bb1      	ldr	r3, [pc, #708]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d071      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a0:	4bae      	ldr	r3, [pc, #696]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	0159      	lsls	r1, r3, #5
 80031d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d8:	0150      	lsls	r0, r2, #5
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4621      	mov	r1, r4
 80031e0:	1a51      	subs	r1, r2, r1
 80031e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80031e4:	4629      	mov	r1, r5
 80031e6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031f8:	4649      	mov	r1, r9
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	4641      	mov	r1, r8
 80031fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003202:	4641      	mov	r1, r8
 8003204:	018a      	lsls	r2, r1, #6
 8003206:	4641      	mov	r1, r8
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800320c:	4649      	mov	r1, r9
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003220:	4649      	mov	r1, r9
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4641      	mov	r1, r8
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4641      	mov	r1, r8
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4622      	mov	r2, r4
 8003236:	189b      	adds	r3, r3, r2
 8003238:	633b      	str	r3, [r7, #48]	@ 0x30
 800323a:	462b      	mov	r3, r5
 800323c:	460a      	mov	r2, r1
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003250:	4629      	mov	r1, r5
 8003252:	024b      	lsls	r3, r1, #9
 8003254:	4621      	mov	r1, r4
 8003256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800325a:	4621      	mov	r1, r4
 800325c:	024a      	lsls	r2, r1, #9
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800326c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003270:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003274:	f7fd f81c 	bl	80002b0 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003282:	e067      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003284:	4b75      	ldr	r3, [pc, #468]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003290:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003294:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800329e:	2300      	movs	r3, #0
 80032a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	f04f 0000 	mov.w	r0, #0
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	0159      	lsls	r1, r3, #5
 80032b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b8:	0150      	lsls	r0, r2, #5
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4621      	mov	r1, r4
 80032c0:	1a51      	subs	r1, r2, r1
 80032c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032c4:	4629      	mov	r1, r5
 80032c6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032d8:	4649      	mov	r1, r9
 80032da:	018b      	lsls	r3, r1, #6
 80032dc:	4641      	mov	r1, r8
 80032de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e2:	4641      	mov	r1, r8
 80032e4:	018a      	lsls	r2, r1, #6
 80032e6:	4641      	mov	r1, r8
 80032e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ec:	4649      	mov	r1, r9
 80032ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003306:	4692      	mov	sl, r2
 8003308:	469b      	mov	fp, r3
 800330a:	4623      	mov	r3, r4
 800330c:	eb1a 0303 	adds.w	r3, sl, r3
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	462b      	mov	r3, r5
 8003314:	eb4b 0303 	adc.w	r3, fp, r3
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003326:	4629      	mov	r1, r5
 8003328:	028b      	lsls	r3, r1, #10
 800332a:	4621      	mov	r1, r4
 800332c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003330:	4621      	mov	r1, r4
 8003332:	028a      	lsls	r2, r1, #10
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800333c:	2200      	movs	r2, #0
 800333e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003340:	677a      	str	r2, [r7, #116]	@ 0x74
 8003342:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003346:	f7fc ffb3 	bl	80002b0 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4613      	mov	r3, r2
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800336a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003376:	e0eb      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003378:	4b38      	ldr	r3, [pc, #224]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003384:	4b35      	ldr	r3, [pc, #212]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d06b      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003390:	4b32      	ldr	r3, [pc, #200]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	2200      	movs	r2, #0
 8003398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800339a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800339c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80033a4:	2300      	movs	r3, #0
 80033a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80033a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033ac:	4622      	mov	r2, r4
 80033ae:	462b      	mov	r3, r5
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	0159      	lsls	r1, r3, #5
 80033ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033be:	0150      	lsls	r0, r2, #5
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4621      	mov	r1, r4
 80033c6:	1a51      	subs	r1, r2, r1
 80033c8:	61b9      	str	r1, [r7, #24]
 80033ca:	4629      	mov	r1, r5
 80033cc:	eb63 0301 	sbc.w	r3, r3, r1
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033de:	4659      	mov	r1, fp
 80033e0:	018b      	lsls	r3, r1, #6
 80033e2:	4651      	mov	r1, sl
 80033e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033e8:	4651      	mov	r1, sl
 80033ea:	018a      	lsls	r2, r1, #6
 80033ec:	4651      	mov	r1, sl
 80033ee:	ebb2 0801 	subs.w	r8, r2, r1
 80033f2:	4659      	mov	r1, fp
 80033f4:	eb63 0901 	sbc.w	r9, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003404:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003408:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340c:	4690      	mov	r8, r2
 800340e:	4699      	mov	r9, r3
 8003410:	4623      	mov	r3, r4
 8003412:	eb18 0303 	adds.w	r3, r8, r3
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	462b      	mov	r3, r5
 800341a:	eb49 0303 	adc.w	r3, r9, r3
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800342c:	4629      	mov	r1, r5
 800342e:	024b      	lsls	r3, r1, #9
 8003430:	4621      	mov	r1, r4
 8003432:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003436:	4621      	mov	r1, r4
 8003438:	024a      	lsls	r2, r1, #9
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003442:	2200      	movs	r2, #0
 8003444:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003446:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003448:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800344c:	f7fc ff30 	bl	80002b0 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800345a:	e065      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x420>
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x458>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	4618      	mov	r0, r3
 8003472:	4611      	mov	r1, r2
 8003474:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003478:	653b      	str	r3, [r7, #80]	@ 0x50
 800347a:	2300      	movs	r3, #0
 800347c:	657b      	str	r3, [r7, #84]	@ 0x54
 800347e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4641      	mov	r1, r8
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	4649      	mov	r1, r9
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034b4:	4659      	mov	r1, fp
 80034b6:	018b      	lsls	r3, r1, #6
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034be:	4651      	mov	r1, sl
 80034c0:	018a      	lsls	r2, r1, #6
 80034c2:	4651      	mov	r1, sl
 80034c4:	1a54      	subs	r4, r2, r1
 80034c6:	4659      	mov	r1, fp
 80034c8:	eb63 0501 	sbc.w	r5, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003510:	2200      	movs	r2, #0
 8003512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003514:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003516:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800351a:	f7fc fec9 	bl	80002b0 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4613      	mov	r3, r2
 8003524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003528:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x458>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0f1b      	lsrs	r3, r3, #28
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800353a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003546:	e003      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x45c>)
 800354a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800354e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003554:	4618      	mov	r0, r3
 8003556:	37b8      	adds	r7, #184	@ 0xb8
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400

08003568 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e28d      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8083 	beq.w	800368e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003588:	4b94      	ldr	r3, [pc, #592]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b04      	cmp	r3, #4
 8003592:	d019      	beq.n	80035c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003594:	4b91      	ldr	r3, [pc, #580]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
        || \
 800359c:	2b08      	cmp	r3, #8
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035a0:	4b8e      	ldr	r3, [pc, #568]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4b8b      	ldr	r3, [pc, #556]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b88      	ldr	r3, [pc, #544]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b84      	ldr	r3, [pc, #528]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x124>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e25a      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x90>
 80035ea:	4b7c      	ldr	r3, [pc, #496]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7b      	ldr	r2, [pc, #492]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xcc>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xb4>
 8003602:	4b76      	ldr	r3, [pc, #472]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a75      	ldr	r2, [pc, #468]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b73      	ldr	r3, [pc, #460]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a72      	ldr	r2, [pc, #456]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xcc>
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b6c      	ldr	r3, [pc, #432]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe f910 	bl	8001860 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe f90c 	bl	8001860 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e21f      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xdc>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe f8fc 	bl	8001860 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe f8f8 	bl	8001860 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e20b      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b57      	ldr	r3, [pc, #348]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x104>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06f      	beq.n	800377a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800369a:	4b50      	ldr	r3, [pc, #320]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036a6:	4b4d      	ldr	r3, [pc, #308]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d105      	bne.n	80036be <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036b2:	4b4a      	ldr	r3, [pc, #296]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b47      	ldr	r3, [pc, #284]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b44      	ldr	r3, [pc, #272]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x186>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e1d3      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4b3b      	ldr	r3, [pc, #236]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4937      	ldr	r1, [pc, #220]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	e03a      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x278>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe f8a5 	bl	8001860 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371a:	f7fe f8a1 	bl	8001860 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1b4      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b28      	ldr	r3, [pc, #160]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4925      	ldr	r1, [pc, #148]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]
 800374c:	e015      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <HAL_RCC_OscConfig+0x278>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe f884 	bl	8001860 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe f880 	bl	8001860 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e193      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d036      	beq.n	80037f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_RCC_OscConfig+0x27c>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe f864 	bl	8001860 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe f860 	bl	8001860 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e173      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x234>
 80037ba:	e01b      	b.n	80037f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <HAL_RCC_OscConfig+0x27c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fe f84d 	bl	8001860 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	e00e      	b.n	80037e8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ca:	f7fe f849 	bl	8001860 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d907      	bls.n	80037e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e15c      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	42470000 	.word	0x42470000
 80037e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ea      	bne.n	80037ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8097 	beq.w	8003930 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b83      	ldr	r3, [pc, #524]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	4b7f      	ldr	r3, [pc, #508]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	@ 0x40
 8003822:	4b7c      	ldr	r3, [pc, #496]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b79      	ldr	r3, [pc, #484]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383e:	4b76      	ldr	r3, [pc, #472]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7fe f809 	bl	8001860 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003852:	f7fe f805 	bl	8001860 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e118      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b6c      	ldr	r3, [pc, #432]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x31e>
 8003878:	4b66      	ldr	r3, [pc, #408]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387c:	4a65      	ldr	r2, [pc, #404]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	@ 0x70
 8003884:	e01c      	b.n	80038c0 <HAL_RCC_OscConfig+0x358>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b05      	cmp	r3, #5
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x340>
 800388e:	4b61      	ldr	r3, [pc, #388]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	4a60      	ldr	r2, [pc, #384]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6713      	str	r3, [r2, #112]	@ 0x70
 800389a:	4b5e      	ldr	r3, [pc, #376]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	4a5d      	ldr	r2, [pc, #372]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0x358>
 80038a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ac:	4a59      	ldr	r2, [pc, #356]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b4:	4b57      	ldr	r3, [pc, #348]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	4a56      	ldr	r2, [pc, #344]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd ffca 	bl	8001860 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd ffc6 	bl	8001860 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0d7      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ee      	beq.n	80038d0 <HAL_RCC_OscConfig+0x368>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd ffb4 	bl	8001860 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fc:	f7fd ffb0 	bl	8001860 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0c1      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003912:	4b40      	ldr	r3, [pc, #256]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ee      	bne.n	80038fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	4a3a      	ldr	r2, [pc, #232]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ad 	beq.w	8003a94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393a:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b08      	cmp	r3, #8
 8003944:	d060      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d145      	bne.n	80039da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b33      	ldr	r3, [pc, #204]	@ (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd ff84 	bl	8001860 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fd ff80 	bl	8001860 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e093      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b29      	ldr	r3, [pc, #164]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	071b      	lsls	r3, r3, #28
 80039a6:	491b      	ldr	r1, [pc, #108]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ac:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd ff55 	bl	8001860 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fd ff51 	bl	8001860 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e064      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x452>
 80039d8:	e05c      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fd ff3e 	bl	8001860 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fd ff3a 	bl	8001860 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04d      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x480>
 8003a06:	e045      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e040      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a20:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa0 <HAL_RCC_OscConfig+0x538>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d030      	beq.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d129      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d122      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d119      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10f      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fbd6 	bl	800127c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 fc0e 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_TIM_PWM_Start+0x24>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e022      	b.n	8003bae <HAL_TIM_PWM_Start+0x6a>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d109      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x3e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e015      	b.n	8003bae <HAL_TIM_PWM_Start+0x6a>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d109      	bne.n	8003b9c <HAL_TIM_PWM_Start+0x58>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e008      	b.n	8003bae <HAL_TIM_PWM_Start+0x6a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e07c      	b.n	8003cb0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x82>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc4:	e013      	b.n	8003bee <HAL_TIM_PWM_Start+0xaa>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d104      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x92>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd4:	e00b      	b.n	8003bee <HAL_TIM_PWM_Start+0xaa>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d104      	bne.n	8003be6 <HAL_TIM_PWM_Start+0xa2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be4:	e003      	b.n	8003bee <HAL_TIM_PWM_Start+0xaa>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fde0 	bl	80047bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <HAL_TIM_PWM_Start+0x174>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_TIM_PWM_Start+0xcc>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cbc <HAL_TIM_PWM_Start+0x178>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIM_PWM_Start+0xd0>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <HAL_TIM_PWM_Start+0xd2>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <HAL_TIM_PWM_Start+0x174>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x136>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d01d      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x136>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <HAL_TIM_PWM_Start+0x17c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x136>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc4 <HAL_TIM_PWM_Start+0x180>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x136>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <HAL_TIM_PWM_Start+0x184>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x136>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <HAL_TIM_PWM_Start+0x178>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x136>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_TIM_PWM_Start+0x188>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x136>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <HAL_TIM_PWM_Start+0x18c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d010      	beq.n	8003cae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9c:	e007      	b.n	8003cae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40010400 	.word	0x40010400
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40001800 	.word	0x40001800

08003cd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e097      	b.n	8003e18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fd fa43 	bl	8001188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d18:	f023 0307 	bic.w	r3, r3, #7
 8003d1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f000 faeb 	bl	8004304 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	4313      	orrs	r3, r2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003d74:	f023 030c 	bic.w	r3, r3, #12
 8003d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	4313      	orrs	r3, r2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	011a      	lsls	r2, r3, #4
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	031b      	lsls	r3, r3, #12
 8003da4:	4313      	orrs	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d110      	bne.n	8003e72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e56:	7b7b      	ldrb	r3, [r7, #13]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e069      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e70:	e031      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d110      	bne.n	8003e9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e7e:	7b3b      	ldrb	r3, [r7, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d001      	beq.n	8003e88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e055      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e98:	e01d      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea0:	7bbb      	ldrb	r3, [r7, #14]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea6:	7b7b      	ldrb	r3, [r7, #13]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eac:	7b3b      	ldrb	r3, [r7, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e03e      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_TIM_Encoder_Start+0xc4>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d008      	beq.n	8003ef4 <HAL_TIM_Encoder_Start+0xd4>
 8003ee2:	e00f      	b.n	8003f04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fc65 	bl	80047bc <TIM_CCxChannelCmd>
      break;
 8003ef2:	e016      	b.n	8003f22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2104      	movs	r1, #4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fc5d 	bl	80047bc <TIM_CCxChannelCmd>
      break;
 8003f02:	e00e      	b.n	8003f22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fc55 	bl	80047bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	2104      	movs	r1, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fc4e 	bl	80047bc <TIM_CCxChannelCmd>
      break;
 8003f20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f99e 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f990 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f9a1 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0204 	mvn.w	r2, #4
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f978 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f96a 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f97b 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f952 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f944 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f955 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f92c 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f91e 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f92f 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8fc 	bl	80042a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fc24 	bl	8004914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f900 	bl	80042f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0220 	mvn.w	r2, #32
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fbf6 	bl	8004900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004136:	2302      	movs	r3, #2
 8004138:	e0ae      	b.n	8004298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	f200 809f 	bhi.w	8004288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800414a:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004185 	.word	0x08004185
 8004154:	08004289 	.word	0x08004289
 8004158:	08004289 	.word	0x08004289
 800415c:	08004289 	.word	0x08004289
 8004160:	080041c5 	.word	0x080041c5
 8004164:	08004289 	.word	0x08004289
 8004168:	08004289 	.word	0x08004289
 800416c:	08004289 	.word	0x08004289
 8004170:	08004207 	.word	0x08004207
 8004174:	08004289 	.word	0x08004289
 8004178:	08004289 	.word	0x08004289
 800417c:	08004289 	.word	0x08004289
 8004180:	08004247 	.word	0x08004247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f966 	bl	800445c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0204 	bic.w	r2, r2, #4
 80041ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6999      	ldr	r1, [r3, #24]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	619a      	str	r2, [r3, #24]
      break;
 80041c2:	e064      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f9b6 	bl	800453c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6999      	ldr	r1, [r3, #24]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	619a      	str	r2, [r3, #24]
      break;
 8004204:	e043      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fa0b 	bl	8004628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0208 	orr.w	r2, r2, #8
 8004220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0204 	bic.w	r2, r2, #4
 8004230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69d9      	ldr	r1, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	61da      	str	r2, [r3, #28]
      break;
 8004244:	e023      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fa5f 	bl	8004710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69d9      	ldr	r1, [r3, #28]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	021a      	lsls	r2, r3, #8
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	61da      	str	r2, [r3, #28]
      break;
 8004286:	e002      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a46      	ldr	r2, [pc, #280]	@ (8004430 <TIM_Base_SetConfig+0x12c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004322:	d00f      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a43      	ldr	r2, [pc, #268]	@ (8004434 <TIM_Base_SetConfig+0x130>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00b      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a42      	ldr	r2, [pc, #264]	@ (8004438 <TIM_Base_SetConfig+0x134>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a41      	ldr	r2, [pc, #260]	@ (800443c <TIM_Base_SetConfig+0x138>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a40      	ldr	r2, [pc, #256]	@ (8004440 <TIM_Base_SetConfig+0x13c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d108      	bne.n	8004356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a35      	ldr	r2, [pc, #212]	@ (8004430 <TIM_Base_SetConfig+0x12c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02b      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004364:	d027      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a32      	ldr	r2, [pc, #200]	@ (8004434 <TIM_Base_SetConfig+0x130>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d023      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a31      	ldr	r2, [pc, #196]	@ (8004438 <TIM_Base_SetConfig+0x134>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01f      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a30      	ldr	r2, [pc, #192]	@ (800443c <TIM_Base_SetConfig+0x138>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01b      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2f      	ldr	r2, [pc, #188]	@ (8004440 <TIM_Base_SetConfig+0x13c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d017      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2e      	ldr	r2, [pc, #184]	@ (8004444 <TIM_Base_SetConfig+0x140>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2d      	ldr	r2, [pc, #180]	@ (8004448 <TIM_Base_SetConfig+0x144>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2c      	ldr	r2, [pc, #176]	@ (800444c <TIM_Base_SetConfig+0x148>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004450 <TIM_Base_SetConfig+0x14c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004454 <TIM_Base_SetConfig+0x150>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <TIM_Base_SetConfig+0x154>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <TIM_Base_SetConfig+0x12c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_Base_SetConfig+0xf8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a12      	ldr	r2, [pc, #72]	@ (8004440 <TIM_Base_SetConfig+0x13c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	611a      	str	r2, [r3, #16]
  }
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40010400 	.word	0x40010400
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800
 8004450:	40001800 	.word	0x40001800
 8004454:	40001c00 	.word	0x40001c00
 8004458:	40002000 	.word	0x40002000

0800445c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f023 0201 	bic.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 0302 	bic.w	r3, r3, #2
 80044a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a20      	ldr	r2, [pc, #128]	@ (8004534 <TIM_OC1_SetConfig+0xd8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_OC1_SetConfig+0x64>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004538 <TIM_OC1_SetConfig+0xdc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10c      	bne.n	80044da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0308 	bic.w	r3, r3, #8
 80044c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a15      	ldr	r2, [pc, #84]	@ (8004534 <TIM_OC1_SetConfig+0xd8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_OC1_SetConfig+0x8e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a14      	ldr	r2, [pc, #80]	@ (8004538 <TIM_OC1_SetConfig+0xdc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d111      	bne.n	800450e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	621a      	str	r2, [r3, #32]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40010000 	.word	0x40010000
 8004538:	40010400 	.word	0x40010400

0800453c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f023 0210 	bic.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f023 0320 	bic.w	r3, r3, #32
 8004586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a22      	ldr	r2, [pc, #136]	@ (8004620 <TIM_OC2_SetConfig+0xe4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_OC2_SetConfig+0x68>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a21      	ldr	r2, [pc, #132]	@ (8004624 <TIM_OC2_SetConfig+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10d      	bne.n	80045c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <TIM_OC2_SetConfig+0xe4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC2_SetConfig+0x94>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a16      	ldr	r2, [pc, #88]	@ (8004624 <TIM_OC2_SetConfig+0xe8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d113      	bne.n	80045f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40010400 	.word	0x40010400

08004628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a21      	ldr	r2, [pc, #132]	@ (8004708 <TIM_OC3_SetConfig+0xe0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC3_SetConfig+0x66>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a20      	ldr	r2, [pc, #128]	@ (800470c <TIM_OC3_SetConfig+0xe4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10d      	bne.n	80046aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a16      	ldr	r2, [pc, #88]	@ (8004708 <TIM_OC3_SetConfig+0xe0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_OC3_SetConfig+0x92>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a15      	ldr	r2, [pc, #84]	@ (800470c <TIM_OC3_SetConfig+0xe4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d113      	bne.n	80046e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40010000 	.word	0x40010000
 800470c:	40010400 	.word	0x40010400

08004710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800475a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	031b      	lsls	r3, r3, #12
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a12      	ldr	r2, [pc, #72]	@ (80047b4 <TIM_OC4_SetConfig+0xa4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC4_SetConfig+0x68>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <TIM_OC4_SetConfig+0xa8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d109      	bne.n	800478c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800477e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2201      	movs	r2, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800481c:	2302      	movs	r3, #2
 800481e:	e05a      	b.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486c:	d01d      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1b      	ldr	r2, [pc, #108]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1a      	ldr	r2, [pc, #104]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a18      	ldr	r2, [pc, #96]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d10c      	bne.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40001800 	.word	0x40001800

08004900 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e042      	b.n	80049c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fcf6 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	@ 0x24
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800496a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f82b 	bl	80049c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b0c0      	sub	sp, #256	@ 0x100
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	68d9      	ldr	r1, [r3, #12]
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	ea40 0301 	orr.w	r3, r0, r1
 80049f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a20:	f021 010c 	bic.w	r1, r1, #12
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a42:	6999      	ldr	r1, [r3, #24]
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	ea40 0301 	orr.w	r3, r0, r1
 8004a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b8f      	ldr	r3, [pc, #572]	@ (8004c94 <UART_SetConfig+0x2cc>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d005      	beq.n	8004a68 <UART_SetConfig+0xa0>
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b8d      	ldr	r3, [pc, #564]	@ (8004c98 <UART_SetConfig+0x2d0>)
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d104      	bne.n	8004a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe fb3a 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a70:	e003      	b.n	8004a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a72:	f7fe fb21 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 8004a76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a84:	f040 810c 	bne.w	8004ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aaa:	4621      	mov	r1, r4
 8004aac:	eb12 0801 	adds.w	r8, r2, r1
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	eb43 0901 	adc.w	r9, r3, r1
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aca:	4690      	mov	r8, r2
 8004acc:	4699      	mov	r9, r3
 8004ace:	4623      	mov	r3, r4
 8004ad0:	eb18 0303 	adds.w	r3, r8, r3
 8004ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ad8:	462b      	mov	r3, r5
 8004ada:	eb49 0303 	adc.w	r3, r9, r3
 8004ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004af6:	460b      	mov	r3, r1
 8004af8:	18db      	adds	r3, r3, r3
 8004afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afc:	4613      	mov	r3, r2
 8004afe:	eb42 0303 	adc.w	r3, r2, r3
 8004b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b0c:	f7fb fbd0 	bl	80002b0 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4b61      	ldr	r3, [pc, #388]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004b16:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	011c      	lsls	r4, r3, #4
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	1891      	adds	r1, r2, r2
 8004b36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b38:	415b      	adcs	r3, r3
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b40:	4641      	mov	r1, r8
 8004b42:	eb12 0a01 	adds.w	sl, r2, r1
 8004b46:	4649      	mov	r1, r9
 8004b48:	eb43 0b01 	adc.w	fp, r3, r1
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b60:	4692      	mov	sl, r2
 8004b62:	469b      	mov	fp, r3
 8004b64:	4643      	mov	r3, r8
 8004b66:	eb1a 0303 	adds.w	r3, sl, r3
 8004b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b6e:	464b      	mov	r3, r9
 8004b70:	eb4b 0303 	adc.w	r3, fp, r3
 8004b74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	18db      	adds	r3, r3, r3
 8004b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b92:	4613      	mov	r3, r2
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ba2:	f7fb fb85 	bl	80002b0 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	4b3b      	ldr	r3, [pc, #236]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004bae:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2264      	movs	r2, #100	@ 0x64
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	1acb      	subs	r3, r1, r3
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bc2:	4b36      	ldr	r3, [pc, #216]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bd0:	441c      	add	r4, r3
 8004bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bec:	415b      	adcs	r3, r3
 8004bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	1851      	adds	r1, r2, r1
 8004bf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	00cb      	lsls	r3, r1, #3
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c16:	4651      	mov	r1, sl
 8004c18:	00ca      	lsls	r2, r1, #3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4642      	mov	r2, r8
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c28:	464b      	mov	r3, r9
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c48:	460b      	mov	r3, r1
 8004c4a:	18db      	adds	r3, r3, r3
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4e:	4613      	mov	r3, r2
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c5e:	f7fb fb27 	bl	80002b0 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	@ 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	3332      	adds	r3, #50	@ 0x32
 8004c7a:	4a08      	ldr	r2, [pc, #32]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 0207 	and.w	r2, r3, #7
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4422      	add	r2, r4
 8004c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c90:	e106      	b.n	8004ea0 <UART_SetConfig+0x4d8>
 8004c92:	bf00      	nop
 8004c94:	40011000 	.word	0x40011000
 8004c98:	40011400 	.word	0x40011400
 8004c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004caa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	1891      	adds	r1, r2, r2
 8004cb8:	6239      	str	r1, [r7, #32]
 8004cba:	415b      	adcs	r3, r3
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	1854      	adds	r4, r2, r1
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	eb43 0501 	adc.w	r5, r3, r1
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	00eb      	lsls	r3, r5, #3
 8004cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cda:	00e2      	lsls	r2, r4, #3
 8004cdc:	4614      	mov	r4, r2
 8004cde:	461d      	mov	r5, r3
 8004ce0:	4643      	mov	r3, r8
 8004ce2:	18e3      	adds	r3, r4, r3
 8004ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ce8:	464b      	mov	r3, r9
 8004cea:	eb45 0303 	adc.w	r3, r5, r3
 8004cee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d0e:	4629      	mov	r1, r5
 8004d10:	008b      	lsls	r3, r1, #2
 8004d12:	4621      	mov	r1, r4
 8004d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d18:	4621      	mov	r1, r4
 8004d1a:	008a      	lsls	r2, r1, #2
 8004d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d20:	f7fb fac6 	bl	80002b0 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4b60      	ldr	r3, [pc, #384]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	011c      	lsls	r4, r3, #4
 8004d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	1891      	adds	r1, r2, r2
 8004d4a:	61b9      	str	r1, [r7, #24]
 8004d4c:	415b      	adcs	r3, r3
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d54:	4641      	mov	r1, r8
 8004d56:	1851      	adds	r1, r2, r1
 8004d58:	6139      	str	r1, [r7, #16]
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	414b      	adcs	r3, r1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	00cb      	lsls	r3, r1, #3
 8004d70:	4651      	mov	r1, sl
 8004d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d76:	4651      	mov	r1, sl
 8004d78:	00ca      	lsls	r2, r1, #3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4642      	mov	r2, r8
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d88:	464b      	mov	r3, r9
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dac:	4649      	mov	r1, r9
 8004dae:	008b      	lsls	r3, r1, #2
 8004db0:	4641      	mov	r1, r8
 8004db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db6:	4641      	mov	r1, r8
 8004db8:	008a      	lsls	r2, r1, #2
 8004dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dbe:	f7fb fa77 	bl	80002b0 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4b38      	ldr	r3, [pc, #224]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004dca:	fba3 2301 	umull	r2, r3, r3, r1
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2264      	movs	r2, #100	@ 0x64
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	1acb      	subs	r3, r1, r3
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	3332      	adds	r3, #50	@ 0x32
 8004ddc:	4a33      	ldr	r2, [pc, #204]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de8:	441c      	add	r4, r3
 8004dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dee:	2200      	movs	r2, #0
 8004df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004df2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004df4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	415b      	adcs	r3, r3
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e08:	4641      	mov	r1, r8
 8004e0a:	1851      	adds	r1, r2, r1
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	4649      	mov	r1, r9
 8004e10:	414b      	adcs	r3, r1
 8004e12:	607b      	str	r3, [r7, #4]
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e20:	4659      	mov	r1, fp
 8004e22:	00cb      	lsls	r3, r1, #3
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	00ca      	lsls	r2, r1, #3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	4642      	mov	r2, r8
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	460a      	mov	r2, r1
 8004e3e:	eb42 0303 	adc.w	r3, r2, r3
 8004e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	008b      	lsls	r3, r1, #2
 8004e60:	4641      	mov	r1, r8
 8004e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e66:	4641      	mov	r1, r8
 8004e68:	008a      	lsls	r2, r1, #2
 8004e6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e6e:	f7fb fa1f 	bl	80002b0 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004e78:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	2164      	movs	r1, #100	@ 0x64
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	3332      	adds	r3, #50	@ 0x32
 8004e8a:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 020f 	and.w	r2, r3, #15
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4422      	add	r2, r4
 8004e9e:	609a      	str	r2, [r3, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eac:	51eb851f 	.word	0x51eb851f

08004eb0 <__assert_func>:
 8004eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004eb2:	4614      	mov	r4, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <__assert_func+0x2c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4605      	mov	r5, r0
 8004ebc:	68d8      	ldr	r0, [r3, #12]
 8004ebe:	b954      	cbnz	r4, 8004ed6 <__assert_func+0x26>
 8004ec0:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <__assert_func+0x30>)
 8004ec2:	461c      	mov	r4, r3
 8004ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ec8:	9100      	str	r1, [sp, #0]
 8004eca:	462b      	mov	r3, r5
 8004ecc:	4905      	ldr	r1, [pc, #20]	@ (8004ee4 <__assert_func+0x34>)
 8004ece:	f000 f8b1 	bl	8005034 <fiprintf>
 8004ed2:	f000 f9ac 	bl	800522e <abort>
 8004ed6:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <__assert_func+0x38>)
 8004ed8:	e7f4      	b.n	8004ec4 <__assert_func+0x14>
 8004eda:	bf00      	nop
 8004edc:	20000020 	.word	0x20000020
 8004ee0:	08005f8f 	.word	0x08005f8f
 8004ee4:	08005f61 	.word	0x08005f61
 8004ee8:	08005f54 	.word	0x08005f54

08004eec <std>:
 8004eec:	2300      	movs	r3, #0
 8004eee:	b510      	push	{r4, lr}
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004efa:	6083      	str	r3, [r0, #8]
 8004efc:	8181      	strh	r1, [r0, #12]
 8004efe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f00:	81c2      	strh	r2, [r0, #14]
 8004f02:	6183      	str	r3, [r0, #24]
 8004f04:	4619      	mov	r1, r3
 8004f06:	2208      	movs	r2, #8
 8004f08:	305c      	adds	r0, #92	@ 0x5c
 8004f0a:	f000 f906 	bl	800511a <memset>
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <std+0x58>)
 8004f10:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <std+0x5c>)
 8004f14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f16:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <std+0x60>)
 8004f18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f50 <std+0x64>)
 8004f1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <std+0x68>)
 8004f20:	6224      	str	r4, [r4, #32]
 8004f22:	429c      	cmp	r4, r3
 8004f24:	d006      	beq.n	8004f34 <std+0x48>
 8004f26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f2a:	4294      	cmp	r4, r2
 8004f2c:	d002      	beq.n	8004f34 <std+0x48>
 8004f2e:	33d0      	adds	r3, #208	@ 0xd0
 8004f30:	429c      	cmp	r4, r3
 8004f32:	d105      	bne.n	8004f40 <std+0x54>
 8004f34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f3c:	f000 b966 	b.w	800520c <__retarget_lock_init_recursive>
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	bf00      	nop
 8004f44:	08005095 	.word	0x08005095
 8004f48:	080050b7 	.word	0x080050b7
 8004f4c:	080050ef 	.word	0x080050ef
 8004f50:	08005113 	.word	0x08005113
 8004f54:	2000029c 	.word	0x2000029c

08004f58 <stdio_exit_handler>:
 8004f58:	4a02      	ldr	r2, [pc, #8]	@ (8004f64 <stdio_exit_handler+0xc>)
 8004f5a:	4903      	ldr	r1, [pc, #12]	@ (8004f68 <stdio_exit_handler+0x10>)
 8004f5c:	4803      	ldr	r0, [pc, #12]	@ (8004f6c <stdio_exit_handler+0x14>)
 8004f5e:	f000 b87b 	b.w	8005058 <_fwalk_sglue>
 8004f62:	bf00      	nop
 8004f64:	20000014 	.word	0x20000014
 8004f68:	08005ad5 	.word	0x08005ad5
 8004f6c:	20000024 	.word	0x20000024

08004f70 <cleanup_stdio>:
 8004f70:	6841      	ldr	r1, [r0, #4]
 8004f72:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <cleanup_stdio+0x34>)
 8004f74:	4299      	cmp	r1, r3
 8004f76:	b510      	push	{r4, lr}
 8004f78:	4604      	mov	r4, r0
 8004f7a:	d001      	beq.n	8004f80 <cleanup_stdio+0x10>
 8004f7c:	f000 fdaa 	bl	8005ad4 <_fflush_r>
 8004f80:	68a1      	ldr	r1, [r4, #8]
 8004f82:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <cleanup_stdio+0x38>)
 8004f84:	4299      	cmp	r1, r3
 8004f86:	d002      	beq.n	8004f8e <cleanup_stdio+0x1e>
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 fda3 	bl	8005ad4 <_fflush_r>
 8004f8e:	68e1      	ldr	r1, [r4, #12]
 8004f90:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <cleanup_stdio+0x3c>)
 8004f92:	4299      	cmp	r1, r3
 8004f94:	d004      	beq.n	8004fa0 <cleanup_stdio+0x30>
 8004f96:	4620      	mov	r0, r4
 8004f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9c:	f000 bd9a 	b.w	8005ad4 <_fflush_r>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	2000029c 	.word	0x2000029c
 8004fa8:	20000304 	.word	0x20000304
 8004fac:	2000036c 	.word	0x2000036c

08004fb0 <global_stdio_init.part.0>:
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <global_stdio_init.part.0+0x30>)
 8004fb4:	4c0b      	ldr	r4, [pc, #44]	@ (8004fe4 <global_stdio_init.part.0+0x34>)
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe8 <global_stdio_init.part.0+0x38>)
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	4620      	mov	r0, r4
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	f7ff ff94 	bl	8004eec <std>
 8004fc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004fc8:	2201      	movs	r2, #1
 8004fca:	2109      	movs	r1, #9
 8004fcc:	f7ff ff8e 	bl	8004eec <std>
 8004fd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fda:	2112      	movs	r1, #18
 8004fdc:	f7ff bf86 	b.w	8004eec <std>
 8004fe0:	200003d4 	.word	0x200003d4
 8004fe4:	2000029c 	.word	0x2000029c
 8004fe8:	08004f59 	.word	0x08004f59

08004fec <__sfp_lock_acquire>:
 8004fec:	4801      	ldr	r0, [pc, #4]	@ (8004ff4 <__sfp_lock_acquire+0x8>)
 8004fee:	f000 b90e 	b.w	800520e <__retarget_lock_acquire_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	200003dd 	.word	0x200003dd

08004ff8 <__sfp_lock_release>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	@ (8005000 <__sfp_lock_release+0x8>)
 8004ffa:	f000 b909 	b.w	8005210 <__retarget_lock_release_recursive>
 8004ffe:	bf00      	nop
 8005000:	200003dd 	.word	0x200003dd

08005004 <__sinit>:
 8005004:	b510      	push	{r4, lr}
 8005006:	4604      	mov	r4, r0
 8005008:	f7ff fff0 	bl	8004fec <__sfp_lock_acquire>
 800500c:	6a23      	ldr	r3, [r4, #32]
 800500e:	b11b      	cbz	r3, 8005018 <__sinit+0x14>
 8005010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005014:	f7ff bff0 	b.w	8004ff8 <__sfp_lock_release>
 8005018:	4b04      	ldr	r3, [pc, #16]	@ (800502c <__sinit+0x28>)
 800501a:	6223      	str	r3, [r4, #32]
 800501c:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <__sinit+0x2c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f5      	bne.n	8005010 <__sinit+0xc>
 8005024:	f7ff ffc4 	bl	8004fb0 <global_stdio_init.part.0>
 8005028:	e7f2      	b.n	8005010 <__sinit+0xc>
 800502a:	bf00      	nop
 800502c:	08004f71 	.word	0x08004f71
 8005030:	200003d4 	.word	0x200003d4

08005034 <fiprintf>:
 8005034:	b40e      	push	{r1, r2, r3}
 8005036:	b503      	push	{r0, r1, lr}
 8005038:	4601      	mov	r1, r0
 800503a:	ab03      	add	r3, sp, #12
 800503c:	4805      	ldr	r0, [pc, #20]	@ (8005054 <fiprintf+0x20>)
 800503e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005042:	6800      	ldr	r0, [r0, #0]
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	f000 fa1b 	bl	8005480 <_vfiprintf_r>
 800504a:	b002      	add	sp, #8
 800504c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005050:	b003      	add	sp, #12
 8005052:	4770      	bx	lr
 8005054:	20000020 	.word	0x20000020

08005058 <_fwalk_sglue>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	4607      	mov	r7, r0
 800505e:	4688      	mov	r8, r1
 8005060:	4614      	mov	r4, r2
 8005062:	2600      	movs	r6, #0
 8005064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005068:	f1b9 0901 	subs.w	r9, r9, #1
 800506c:	d505      	bpl.n	800507a <_fwalk_sglue+0x22>
 800506e:	6824      	ldr	r4, [r4, #0]
 8005070:	2c00      	cmp	r4, #0
 8005072:	d1f7      	bne.n	8005064 <_fwalk_sglue+0xc>
 8005074:	4630      	mov	r0, r6
 8005076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507a:	89ab      	ldrh	r3, [r5, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d907      	bls.n	8005090 <_fwalk_sglue+0x38>
 8005080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005084:	3301      	adds	r3, #1
 8005086:	d003      	beq.n	8005090 <_fwalk_sglue+0x38>
 8005088:	4629      	mov	r1, r5
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	4306      	orrs	r6, r0
 8005090:	3568      	adds	r5, #104	@ 0x68
 8005092:	e7e9      	b.n	8005068 <_fwalk_sglue+0x10>

08005094 <__sread>:
 8005094:	b510      	push	{r4, lr}
 8005096:	460c      	mov	r4, r1
 8005098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509c:	f000 f868 	bl	8005170 <_read_r>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	bfab      	itete	ge
 80050a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050a6:	89a3      	ldrhlt	r3, [r4, #12]
 80050a8:	181b      	addge	r3, r3, r0
 80050aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050ae:	bfac      	ite	ge
 80050b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050b2:	81a3      	strhlt	r3, [r4, #12]
 80050b4:	bd10      	pop	{r4, pc}

080050b6 <__swrite>:
 80050b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ba:	461f      	mov	r7, r3
 80050bc:	898b      	ldrh	r3, [r1, #12]
 80050be:	05db      	lsls	r3, r3, #23
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	4616      	mov	r6, r2
 80050c6:	d505      	bpl.n	80050d4 <__swrite+0x1e>
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	2302      	movs	r3, #2
 80050ce:	2200      	movs	r2, #0
 80050d0:	f000 f83c 	bl	800514c <_lseek_r>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	4632      	mov	r2, r6
 80050e2:	463b      	mov	r3, r7
 80050e4:	4628      	mov	r0, r5
 80050e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ea:	f000 b853 	b.w	8005194 <_write_r>

080050ee <__sseek>:
 80050ee:	b510      	push	{r4, lr}
 80050f0:	460c      	mov	r4, r1
 80050f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f6:	f000 f829 	bl	800514c <_lseek_r>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	bf15      	itete	ne
 8005100:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005102:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005106:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800510a:	81a3      	strheq	r3, [r4, #12]
 800510c:	bf18      	it	ne
 800510e:	81a3      	strhne	r3, [r4, #12]
 8005110:	bd10      	pop	{r4, pc}

08005112 <__sclose>:
 8005112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005116:	f000 b809 	b.w	800512c <_close_r>

0800511a <memset>:
 800511a:	4402      	add	r2, r0
 800511c:	4603      	mov	r3, r0
 800511e:	4293      	cmp	r3, r2
 8005120:	d100      	bne.n	8005124 <memset+0xa>
 8005122:	4770      	bx	lr
 8005124:	f803 1b01 	strb.w	r1, [r3], #1
 8005128:	e7f9      	b.n	800511e <memset+0x4>
	...

0800512c <_close_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4d06      	ldr	r5, [pc, #24]	@ (8005148 <_close_r+0x1c>)
 8005130:	2300      	movs	r3, #0
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	f7fc fa4c 	bl	80015d4 <_close>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_close_r+0x1a>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_close_r+0x1a>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	200003d8 	.word	0x200003d8

0800514c <_lseek_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4d07      	ldr	r5, [pc, #28]	@ (800516c <_lseek_r+0x20>)
 8005150:	4604      	mov	r4, r0
 8005152:	4608      	mov	r0, r1
 8005154:	4611      	mov	r1, r2
 8005156:	2200      	movs	r2, #0
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f7fc fa61 	bl	8001622 <_lseek>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_lseek_r+0x1e>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_lseek_r+0x1e>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	200003d8 	.word	0x200003d8

08005170 <_read_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4d07      	ldr	r5, [pc, #28]	@ (8005190 <_read_r+0x20>)
 8005174:	4604      	mov	r4, r0
 8005176:	4608      	mov	r0, r1
 8005178:	4611      	mov	r1, r2
 800517a:	2200      	movs	r2, #0
 800517c:	602a      	str	r2, [r5, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	f7fc f9ef 	bl	8001562 <_read>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_read_r+0x1e>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_read_r+0x1e>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	200003d8 	.word	0x200003d8

08005194 <_write_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d07      	ldr	r5, [pc, #28]	@ (80051b4 <_write_r+0x20>)
 8005198:	4604      	mov	r4, r0
 800519a:	4608      	mov	r0, r1
 800519c:	4611      	mov	r1, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	602a      	str	r2, [r5, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f7fc f9fa 	bl	800159c <_write>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_write_r+0x1e>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_write_r+0x1e>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	200003d8 	.word	0x200003d8

080051b8 <__errno>:
 80051b8:	4b01      	ldr	r3, [pc, #4]	@ (80051c0 <__errno+0x8>)
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000020 	.word	0x20000020

080051c4 <__libc_init_array>:
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	4d0d      	ldr	r5, [pc, #52]	@ (80051fc <__libc_init_array+0x38>)
 80051c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005200 <__libc_init_array+0x3c>)
 80051ca:	1b64      	subs	r4, r4, r5
 80051cc:	10a4      	asrs	r4, r4, #2
 80051ce:	2600      	movs	r6, #0
 80051d0:	42a6      	cmp	r6, r4
 80051d2:	d109      	bne.n	80051e8 <__libc_init_array+0x24>
 80051d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005204 <__libc_init_array+0x40>)
 80051d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005208 <__libc_init_array+0x44>)
 80051d8:	f000 fe34 	bl	8005e44 <_init>
 80051dc:	1b64      	subs	r4, r4, r5
 80051de:	10a4      	asrs	r4, r4, #2
 80051e0:	2600      	movs	r6, #0
 80051e2:	42a6      	cmp	r6, r4
 80051e4:	d105      	bne.n	80051f2 <__libc_init_array+0x2e>
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ec:	4798      	blx	r3
 80051ee:	3601      	adds	r6, #1
 80051f0:	e7ee      	b.n	80051d0 <__libc_init_array+0xc>
 80051f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f6:	4798      	blx	r3
 80051f8:	3601      	adds	r6, #1
 80051fa:	e7f2      	b.n	80051e2 <__libc_init_array+0x1e>
 80051fc:	08005fcc 	.word	0x08005fcc
 8005200:	08005fcc 	.word	0x08005fcc
 8005204:	08005fcc 	.word	0x08005fcc
 8005208:	08005fd0 	.word	0x08005fd0

0800520c <__retarget_lock_init_recursive>:
 800520c:	4770      	bx	lr

0800520e <__retarget_lock_acquire_recursive>:
 800520e:	4770      	bx	lr

08005210 <__retarget_lock_release_recursive>:
 8005210:	4770      	bx	lr

08005212 <memcpy>:
 8005212:	440a      	add	r2, r1
 8005214:	4291      	cmp	r1, r2
 8005216:	f100 33ff 	add.w	r3, r0, #4294967295
 800521a:	d100      	bne.n	800521e <memcpy+0xc>
 800521c:	4770      	bx	lr
 800521e:	b510      	push	{r4, lr}
 8005220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005228:	4291      	cmp	r1, r2
 800522a:	d1f9      	bne.n	8005220 <memcpy+0xe>
 800522c:	bd10      	pop	{r4, pc}

0800522e <abort>:
 800522e:	b508      	push	{r3, lr}
 8005230:	2006      	movs	r0, #6
 8005232:	f000 fd33 	bl	8005c9c <raise>
 8005236:	2001      	movs	r0, #1
 8005238:	f7fc f988 	bl	800154c <_exit>

0800523c <_free_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4605      	mov	r5, r0
 8005240:	2900      	cmp	r1, #0
 8005242:	d041      	beq.n	80052c8 <_free_r+0x8c>
 8005244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005248:	1f0c      	subs	r4, r1, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfb8      	it	lt
 800524e:	18e4      	addlt	r4, r4, r3
 8005250:	f000 f8e0 	bl	8005414 <__malloc_lock>
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <_free_r+0x90>)
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x2c>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	4628      	mov	r0, r5
 8005260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005264:	f000 b8dc 	b.w	8005420 <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x42>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	1821      	adds	r1, r4, r0
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1809      	addeq	r1, r1, r0
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x1e>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x4c>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x42>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1850      	adds	r0, r2, r1
 800528c:	42a0      	cmp	r0, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x6c>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	4401      	add	r1, r0
 8005294:	1850      	adds	r0, r2, r1
 8005296:	4283      	cmp	r3, r0
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x22>
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	4408      	add	r0, r1
 80052a4:	6010      	str	r0, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x22>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x74>
 80052aa:	230c      	movs	r3, #12
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x22>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	1821      	adds	r1, r4, r0
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x22>
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	200003e4 	.word	0x200003e4

080052d0 <sbrk_aligned>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005310 <sbrk_aligned+0x40>)
 80052d4:	460c      	mov	r4, r1
 80052d6:	6831      	ldr	r1, [r6, #0]
 80052d8:	4605      	mov	r5, r0
 80052da:	b911      	cbnz	r1, 80052e2 <sbrk_aligned+0x12>
 80052dc:	f000 fcfa 	bl	8005cd4 <_sbrk_r>
 80052e0:	6030      	str	r0, [r6, #0]
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 fcf5 	bl	8005cd4 <_sbrk_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d103      	bne.n	80052f6 <sbrk_aligned+0x26>
 80052ee:	f04f 34ff 	mov.w	r4, #4294967295
 80052f2:	4620      	mov	r0, r4
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d0f8      	beq.n	80052f2 <sbrk_aligned+0x22>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fce6 	bl	8005cd4 <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d1f2      	bne.n	80052f2 <sbrk_aligned+0x22>
 800530c:	e7ef      	b.n	80052ee <sbrk_aligned+0x1e>
 800530e:	bf00      	nop
 8005310:	200003e0 	.word	0x200003e0

08005314 <_malloc_r>:
 8005314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005318:	1ccd      	adds	r5, r1, #3
 800531a:	f025 0503 	bic.w	r5, r5, #3
 800531e:	3508      	adds	r5, #8
 8005320:	2d0c      	cmp	r5, #12
 8005322:	bf38      	it	cc
 8005324:	250c      	movcc	r5, #12
 8005326:	2d00      	cmp	r5, #0
 8005328:	4606      	mov	r6, r0
 800532a:	db01      	blt.n	8005330 <_malloc_r+0x1c>
 800532c:	42a9      	cmp	r1, r5
 800532e:	d904      	bls.n	800533a <_malloc_r+0x26>
 8005330:	230c      	movs	r3, #12
 8005332:	6033      	str	r3, [r6, #0]
 8005334:	2000      	movs	r0, #0
 8005336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005410 <_malloc_r+0xfc>
 800533e:	f000 f869 	bl	8005414 <__malloc_lock>
 8005342:	f8d8 3000 	ldr.w	r3, [r8]
 8005346:	461c      	mov	r4, r3
 8005348:	bb44      	cbnz	r4, 800539c <_malloc_r+0x88>
 800534a:	4629      	mov	r1, r5
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff ffbf 	bl	80052d0 <sbrk_aligned>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	4604      	mov	r4, r0
 8005356:	d158      	bne.n	800540a <_malloc_r+0xf6>
 8005358:	f8d8 4000 	ldr.w	r4, [r8]
 800535c:	4627      	mov	r7, r4
 800535e:	2f00      	cmp	r7, #0
 8005360:	d143      	bne.n	80053ea <_malloc_r+0xd6>
 8005362:	2c00      	cmp	r4, #0
 8005364:	d04b      	beq.n	80053fe <_malloc_r+0xea>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	4639      	mov	r1, r7
 800536a:	4630      	mov	r0, r6
 800536c:	eb04 0903 	add.w	r9, r4, r3
 8005370:	f000 fcb0 	bl	8005cd4 <_sbrk_r>
 8005374:	4581      	cmp	r9, r0
 8005376:	d142      	bne.n	80053fe <_malloc_r+0xea>
 8005378:	6821      	ldr	r1, [r4, #0]
 800537a:	1a6d      	subs	r5, r5, r1
 800537c:	4629      	mov	r1, r5
 800537e:	4630      	mov	r0, r6
 8005380:	f7ff ffa6 	bl	80052d0 <sbrk_aligned>
 8005384:	3001      	adds	r0, #1
 8005386:	d03a      	beq.n	80053fe <_malloc_r+0xea>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	442b      	add	r3, r5
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	f8d8 3000 	ldr.w	r3, [r8]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	bb62      	cbnz	r2, 80053f0 <_malloc_r+0xdc>
 8005396:	f8c8 7000 	str.w	r7, [r8]
 800539a:	e00f      	b.n	80053bc <_malloc_r+0xa8>
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	1b52      	subs	r2, r2, r5
 80053a0:	d420      	bmi.n	80053e4 <_malloc_r+0xd0>
 80053a2:	2a0b      	cmp	r2, #11
 80053a4:	d917      	bls.n	80053d6 <_malloc_r+0xc2>
 80053a6:	1961      	adds	r1, r4, r5
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	6025      	str	r5, [r4, #0]
 80053ac:	bf18      	it	ne
 80053ae:	6059      	strne	r1, [r3, #4]
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	bf08      	it	eq
 80053b4:	f8c8 1000 	streq.w	r1, [r8]
 80053b8:	5162      	str	r2, [r4, r5]
 80053ba:	604b      	str	r3, [r1, #4]
 80053bc:	4630      	mov	r0, r6
 80053be:	f000 f82f 	bl	8005420 <__malloc_unlock>
 80053c2:	f104 000b 	add.w	r0, r4, #11
 80053c6:	1d23      	adds	r3, r4, #4
 80053c8:	f020 0007 	bic.w	r0, r0, #7
 80053cc:	1ac2      	subs	r2, r0, r3
 80053ce:	bf1c      	itt	ne
 80053d0:	1a1b      	subne	r3, r3, r0
 80053d2:	50a3      	strne	r3, [r4, r2]
 80053d4:	e7af      	b.n	8005336 <_malloc_r+0x22>
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	42a3      	cmp	r3, r4
 80053da:	bf0c      	ite	eq
 80053dc:	f8c8 2000 	streq.w	r2, [r8]
 80053e0:	605a      	strne	r2, [r3, #4]
 80053e2:	e7eb      	b.n	80053bc <_malloc_r+0xa8>
 80053e4:	4623      	mov	r3, r4
 80053e6:	6864      	ldr	r4, [r4, #4]
 80053e8:	e7ae      	b.n	8005348 <_malloc_r+0x34>
 80053ea:	463c      	mov	r4, r7
 80053ec:	687f      	ldr	r7, [r7, #4]
 80053ee:	e7b6      	b.n	800535e <_malloc_r+0x4a>
 80053f0:	461a      	mov	r2, r3
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d1fb      	bne.n	80053f0 <_malloc_r+0xdc>
 80053f8:	2300      	movs	r3, #0
 80053fa:	6053      	str	r3, [r2, #4]
 80053fc:	e7de      	b.n	80053bc <_malloc_r+0xa8>
 80053fe:	230c      	movs	r3, #12
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	4630      	mov	r0, r6
 8005404:	f000 f80c 	bl	8005420 <__malloc_unlock>
 8005408:	e794      	b.n	8005334 <_malloc_r+0x20>
 800540a:	6005      	str	r5, [r0, #0]
 800540c:	e7d6      	b.n	80053bc <_malloc_r+0xa8>
 800540e:	bf00      	nop
 8005410:	200003e4 	.word	0x200003e4

08005414 <__malloc_lock>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__malloc_lock+0x8>)
 8005416:	f7ff befa 	b.w	800520e <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	200003dc 	.word	0x200003dc

08005420 <__malloc_unlock>:
 8005420:	4801      	ldr	r0, [pc, #4]	@ (8005428 <__malloc_unlock+0x8>)
 8005422:	f7ff bef5 	b.w	8005210 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	200003dc 	.word	0x200003dc

0800542c <__sfputc_r>:
 800542c:	6893      	ldr	r3, [r2, #8]
 800542e:	3b01      	subs	r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	b410      	push	{r4}
 8005434:	6093      	str	r3, [r2, #8]
 8005436:	da08      	bge.n	800544a <__sfputc_r+0x1e>
 8005438:	6994      	ldr	r4, [r2, #24]
 800543a:	42a3      	cmp	r3, r4
 800543c:	db01      	blt.n	8005442 <__sfputc_r+0x16>
 800543e:	290a      	cmp	r1, #10
 8005440:	d103      	bne.n	800544a <__sfputc_r+0x1e>
 8005442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005446:	f000 bb6d 	b.w	8005b24 <__swbuf_r>
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	1c58      	adds	r0, r3, #1
 800544e:	6010      	str	r0, [r2, #0]
 8005450:	7019      	strb	r1, [r3, #0]
 8005452:	4608      	mov	r0, r1
 8005454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005458:	4770      	bx	lr

0800545a <__sfputs_r>:
 800545a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545c:	4606      	mov	r6, r0
 800545e:	460f      	mov	r7, r1
 8005460:	4614      	mov	r4, r2
 8005462:	18d5      	adds	r5, r2, r3
 8005464:	42ac      	cmp	r4, r5
 8005466:	d101      	bne.n	800546c <__sfputs_r+0x12>
 8005468:	2000      	movs	r0, #0
 800546a:	e007      	b.n	800547c <__sfputs_r+0x22>
 800546c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005470:	463a      	mov	r2, r7
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff ffda 	bl	800542c <__sfputc_r>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d1f3      	bne.n	8005464 <__sfputs_r+0xa>
 800547c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005480 <_vfiprintf_r>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	460d      	mov	r5, r1
 8005486:	b09d      	sub	sp, #116	@ 0x74
 8005488:	4614      	mov	r4, r2
 800548a:	4698      	mov	r8, r3
 800548c:	4606      	mov	r6, r0
 800548e:	b118      	cbz	r0, 8005498 <_vfiprintf_r+0x18>
 8005490:	6a03      	ldr	r3, [r0, #32]
 8005492:	b90b      	cbnz	r3, 8005498 <_vfiprintf_r+0x18>
 8005494:	f7ff fdb6 	bl	8005004 <__sinit>
 8005498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800549a:	07d9      	lsls	r1, r3, #31
 800549c:	d405      	bmi.n	80054aa <_vfiprintf_r+0x2a>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	059a      	lsls	r2, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_vfiprintf_r+0x2a>
 80054a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054a6:	f7ff feb2 	bl	800520e <__retarget_lock_acquire_recursive>
 80054aa:	89ab      	ldrh	r3, [r5, #12]
 80054ac:	071b      	lsls	r3, r3, #28
 80054ae:	d501      	bpl.n	80054b4 <_vfiprintf_r+0x34>
 80054b0:	692b      	ldr	r3, [r5, #16]
 80054b2:	b99b      	cbnz	r3, 80054dc <_vfiprintf_r+0x5c>
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 fb72 	bl	8005ba0 <__swsetup_r>
 80054bc:	b170      	cbz	r0, 80054dc <_vfiprintf_r+0x5c>
 80054be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054c0:	07dc      	lsls	r4, r3, #31
 80054c2:	d504      	bpl.n	80054ce <_vfiprintf_r+0x4e>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	b01d      	add	sp, #116	@ 0x74
 80054ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	0598      	lsls	r0, r3, #22
 80054d2:	d4f7      	bmi.n	80054c4 <_vfiprintf_r+0x44>
 80054d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054d6:	f7ff fe9b 	bl	8005210 <__retarget_lock_release_recursive>
 80054da:	e7f3      	b.n	80054c4 <_vfiprintf_r+0x44>
 80054dc:	2300      	movs	r3, #0
 80054de:	9309      	str	r3, [sp, #36]	@ 0x24
 80054e0:	2320      	movs	r3, #32
 80054e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ea:	2330      	movs	r3, #48	@ 0x30
 80054ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800569c <_vfiprintf_r+0x21c>
 80054f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054f4:	f04f 0901 	mov.w	r9, #1
 80054f8:	4623      	mov	r3, r4
 80054fa:	469a      	mov	sl, r3
 80054fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005500:	b10a      	cbz	r2, 8005506 <_vfiprintf_r+0x86>
 8005502:	2a25      	cmp	r2, #37	@ 0x25
 8005504:	d1f9      	bne.n	80054fa <_vfiprintf_r+0x7a>
 8005506:	ebba 0b04 	subs.w	fp, sl, r4
 800550a:	d00b      	beq.n	8005524 <_vfiprintf_r+0xa4>
 800550c:	465b      	mov	r3, fp
 800550e:	4622      	mov	r2, r4
 8005510:	4629      	mov	r1, r5
 8005512:	4630      	mov	r0, r6
 8005514:	f7ff ffa1 	bl	800545a <__sfputs_r>
 8005518:	3001      	adds	r0, #1
 800551a:	f000 80a7 	beq.w	800566c <_vfiprintf_r+0x1ec>
 800551e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005520:	445a      	add	r2, fp
 8005522:	9209      	str	r2, [sp, #36]	@ 0x24
 8005524:	f89a 3000 	ldrb.w	r3, [sl]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 809f 	beq.w	800566c <_vfiprintf_r+0x1ec>
 800552e:	2300      	movs	r3, #0
 8005530:	f04f 32ff 	mov.w	r2, #4294967295
 8005534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005538:	f10a 0a01 	add.w	sl, sl, #1
 800553c:	9304      	str	r3, [sp, #16]
 800553e:	9307      	str	r3, [sp, #28]
 8005540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005544:	931a      	str	r3, [sp, #104]	@ 0x68
 8005546:	4654      	mov	r4, sl
 8005548:	2205      	movs	r2, #5
 800554a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554e:	4853      	ldr	r0, [pc, #332]	@ (800569c <_vfiprintf_r+0x21c>)
 8005550:	f7fa fe5e 	bl	8000210 <memchr>
 8005554:	9a04      	ldr	r2, [sp, #16]
 8005556:	b9d8      	cbnz	r0, 8005590 <_vfiprintf_r+0x110>
 8005558:	06d1      	lsls	r1, r2, #27
 800555a:	bf44      	itt	mi
 800555c:	2320      	movmi	r3, #32
 800555e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005562:	0713      	lsls	r3, r2, #28
 8005564:	bf44      	itt	mi
 8005566:	232b      	movmi	r3, #43	@ 0x2b
 8005568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800556c:	f89a 3000 	ldrb.w	r3, [sl]
 8005570:	2b2a      	cmp	r3, #42	@ 0x2a
 8005572:	d015      	beq.n	80055a0 <_vfiprintf_r+0x120>
 8005574:	9a07      	ldr	r2, [sp, #28]
 8005576:	4654      	mov	r4, sl
 8005578:	2000      	movs	r0, #0
 800557a:	f04f 0c0a 	mov.w	ip, #10
 800557e:	4621      	mov	r1, r4
 8005580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005584:	3b30      	subs	r3, #48	@ 0x30
 8005586:	2b09      	cmp	r3, #9
 8005588:	d94b      	bls.n	8005622 <_vfiprintf_r+0x1a2>
 800558a:	b1b0      	cbz	r0, 80055ba <_vfiprintf_r+0x13a>
 800558c:	9207      	str	r2, [sp, #28]
 800558e:	e014      	b.n	80055ba <_vfiprintf_r+0x13a>
 8005590:	eba0 0308 	sub.w	r3, r0, r8
 8005594:	fa09 f303 	lsl.w	r3, r9, r3
 8005598:	4313      	orrs	r3, r2
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	46a2      	mov	sl, r4
 800559e:	e7d2      	b.n	8005546 <_vfiprintf_r+0xc6>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	1d19      	adds	r1, r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	9103      	str	r1, [sp, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bfbb      	ittet	lt
 80055ac:	425b      	neglt	r3, r3
 80055ae:	f042 0202 	orrlt.w	r2, r2, #2
 80055b2:	9307      	strge	r3, [sp, #28]
 80055b4:	9307      	strlt	r3, [sp, #28]
 80055b6:	bfb8      	it	lt
 80055b8:	9204      	strlt	r2, [sp, #16]
 80055ba:	7823      	ldrb	r3, [r4, #0]
 80055bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80055be:	d10a      	bne.n	80055d6 <_vfiprintf_r+0x156>
 80055c0:	7863      	ldrb	r3, [r4, #1]
 80055c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80055c4:	d132      	bne.n	800562c <_vfiprintf_r+0x1ac>
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	1d1a      	adds	r2, r3, #4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	9203      	str	r2, [sp, #12]
 80055ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055d2:	3402      	adds	r4, #2
 80055d4:	9305      	str	r3, [sp, #20]
 80055d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80056ac <_vfiprintf_r+0x22c>
 80055da:	7821      	ldrb	r1, [r4, #0]
 80055dc:	2203      	movs	r2, #3
 80055de:	4650      	mov	r0, sl
 80055e0:	f7fa fe16 	bl	8000210 <memchr>
 80055e4:	b138      	cbz	r0, 80055f6 <_vfiprintf_r+0x176>
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	eba0 000a 	sub.w	r0, r0, sl
 80055ec:	2240      	movs	r2, #64	@ 0x40
 80055ee:	4082      	lsls	r2, r0
 80055f0:	4313      	orrs	r3, r2
 80055f2:	3401      	adds	r4, #1
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fa:	4829      	ldr	r0, [pc, #164]	@ (80056a0 <_vfiprintf_r+0x220>)
 80055fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005600:	2206      	movs	r2, #6
 8005602:	f7fa fe05 	bl	8000210 <memchr>
 8005606:	2800      	cmp	r0, #0
 8005608:	d03f      	beq.n	800568a <_vfiprintf_r+0x20a>
 800560a:	4b26      	ldr	r3, [pc, #152]	@ (80056a4 <_vfiprintf_r+0x224>)
 800560c:	bb1b      	cbnz	r3, 8005656 <_vfiprintf_r+0x1d6>
 800560e:	9b03      	ldr	r3, [sp, #12]
 8005610:	3307      	adds	r3, #7
 8005612:	f023 0307 	bic.w	r3, r3, #7
 8005616:	3308      	adds	r3, #8
 8005618:	9303      	str	r3, [sp, #12]
 800561a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800561c:	443b      	add	r3, r7
 800561e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005620:	e76a      	b.n	80054f8 <_vfiprintf_r+0x78>
 8005622:	fb0c 3202 	mla	r2, ip, r2, r3
 8005626:	460c      	mov	r4, r1
 8005628:	2001      	movs	r0, #1
 800562a:	e7a8      	b.n	800557e <_vfiprintf_r+0xfe>
 800562c:	2300      	movs	r3, #0
 800562e:	3401      	adds	r4, #1
 8005630:	9305      	str	r3, [sp, #20]
 8005632:	4619      	mov	r1, r3
 8005634:	f04f 0c0a 	mov.w	ip, #10
 8005638:	4620      	mov	r0, r4
 800563a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800563e:	3a30      	subs	r2, #48	@ 0x30
 8005640:	2a09      	cmp	r2, #9
 8005642:	d903      	bls.n	800564c <_vfiprintf_r+0x1cc>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0c6      	beq.n	80055d6 <_vfiprintf_r+0x156>
 8005648:	9105      	str	r1, [sp, #20]
 800564a:	e7c4      	b.n	80055d6 <_vfiprintf_r+0x156>
 800564c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005650:	4604      	mov	r4, r0
 8005652:	2301      	movs	r3, #1
 8005654:	e7f0      	b.n	8005638 <_vfiprintf_r+0x1b8>
 8005656:	ab03      	add	r3, sp, #12
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	462a      	mov	r2, r5
 800565c:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <_vfiprintf_r+0x228>)
 800565e:	a904      	add	r1, sp, #16
 8005660:	4630      	mov	r0, r6
 8005662:	f3af 8000 	nop.w
 8005666:	4607      	mov	r7, r0
 8005668:	1c78      	adds	r0, r7, #1
 800566a:	d1d6      	bne.n	800561a <_vfiprintf_r+0x19a>
 800566c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800566e:	07d9      	lsls	r1, r3, #31
 8005670:	d405      	bmi.n	800567e <_vfiprintf_r+0x1fe>
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	059a      	lsls	r2, r3, #22
 8005676:	d402      	bmi.n	800567e <_vfiprintf_r+0x1fe>
 8005678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800567a:	f7ff fdc9 	bl	8005210 <__retarget_lock_release_recursive>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	065b      	lsls	r3, r3, #25
 8005682:	f53f af1f 	bmi.w	80054c4 <_vfiprintf_r+0x44>
 8005686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005688:	e71e      	b.n	80054c8 <_vfiprintf_r+0x48>
 800568a:	ab03      	add	r3, sp, #12
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	462a      	mov	r2, r5
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <_vfiprintf_r+0x228>)
 8005692:	a904      	add	r1, sp, #16
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f879 	bl	800578c <_printf_i>
 800569a:	e7e4      	b.n	8005666 <_vfiprintf_r+0x1e6>
 800569c:	08005f90 	.word	0x08005f90
 80056a0:	08005f9a 	.word	0x08005f9a
 80056a4:	00000000 	.word	0x00000000
 80056a8:	0800545b 	.word	0x0800545b
 80056ac:	08005f96 	.word	0x08005f96

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc26      	bgt.n	8005746 <_printf_common+0x96>
 80056f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	3b00      	subs	r3, #0
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d42b      	bmi.n	8005760 <_printf_common+0xb0>
 8005708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800570c:	4641      	mov	r1, r8
 800570e:	4638      	mov	r0, r7
 8005710:	47c8      	blx	r9
 8005712:	3001      	adds	r0, #1
 8005714:	d01e      	beq.n	8005754 <_printf_common+0xa4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	6922      	ldr	r2, [r4, #16]
 800571a:	f003 0306 	and.w	r3, r3, #6
 800571e:	2b04      	cmp	r3, #4
 8005720:	bf02      	ittt	eq
 8005722:	68e5      	ldreq	r5, [r4, #12]
 8005724:	6833      	ldreq	r3, [r6, #0]
 8005726:	1aed      	subeq	r5, r5, r3
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	bf0c      	ite	eq
 800572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005730:	2500      	movne	r5, #0
 8005732:	4293      	cmp	r3, r2
 8005734:	bfc4      	itt	gt
 8005736:	1a9b      	subgt	r3, r3, r2
 8005738:	18ed      	addgt	r5, r5, r3
 800573a:	2600      	movs	r6, #0
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xc8>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xa8>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4641      	mov	r1, r8
 800574c:	4638      	mov	r0, r7
 800574e:	47c8      	blx	r9
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xac>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c6      	b.n	80056ee <_printf_common+0x3e>
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	2030      	movs	r0, #48	@ 0x30
 8005766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800576a:	4422      	add	r2, r4
 800576c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005774:	3302      	adds	r3, #2
 8005776:	e7c7      	b.n	8005708 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4641      	mov	r1, r8
 800577e:	4638      	mov	r0, r7
 8005780:	47c8      	blx	r9
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa4>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x8e>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005794:	2f78      	cmp	r7, #120	@ 0x78
 8005796:	4691      	mov	r9, r2
 8005798:	4680      	mov	r8, r0
 800579a:	460c      	mov	r4, r1
 800579c:	469a      	mov	sl, r3
 800579e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	@ 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d2 	beq.w	8005952 <_printf_i+0x1c6>
 80057ae:	2f58      	cmp	r7, #88	@ 0x58
 80057b0:	f000 80b9 	beq.w	8005926 <_printf_i+0x19a>
 80057b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	@ (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	08005939 	.word	0x08005939
 80057fc:	08005863 	.word	0x08005863
 8005800:	080058f3 	.word	0x080058f3
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	0800595b 	.word	0x0800595b
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005863 	.word	0x08005863
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	080058fb 	.word	0x080058fb
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6032      	str	r2, [r6, #0]
 800582c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e09d      	b.n	8005974 <_printf_i+0x1e8>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	1d19      	adds	r1, r3, #4
 800583e:	6031      	str	r1, [r6, #0]
 8005840:	0606      	lsls	r6, r0, #24
 8005842:	d501      	bpl.n	8005848 <_printf_i+0xbc>
 8005844:	681d      	ldr	r5, [r3, #0]
 8005846:	e003      	b.n	8005850 <_printf_i+0xc4>
 8005848:	0645      	lsls	r5, r0, #25
 800584a:	d5fb      	bpl.n	8005844 <_printf_i+0xb8>
 800584c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005850:	2d00      	cmp	r5, #0
 8005852:	da03      	bge.n	800585c <_printf_i+0xd0>
 8005854:	232d      	movs	r3, #45	@ 0x2d
 8005856:	426d      	negs	r5, r5
 8005858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800585c:	4859      	ldr	r0, [pc, #356]	@ (80059c4 <_printf_i+0x238>)
 800585e:	230a      	movs	r3, #10
 8005860:	e011      	b.n	8005886 <_printf_i+0xfa>
 8005862:	6821      	ldr	r1, [r4, #0]
 8005864:	6833      	ldr	r3, [r6, #0]
 8005866:	0608      	lsls	r0, r1, #24
 8005868:	f853 5b04 	ldr.w	r5, [r3], #4
 800586c:	d402      	bmi.n	8005874 <_printf_i+0xe8>
 800586e:	0649      	lsls	r1, r1, #25
 8005870:	bf48      	it	mi
 8005872:	b2ad      	uxthmi	r5, r5
 8005874:	2f6f      	cmp	r7, #111	@ 0x6f
 8005876:	4853      	ldr	r0, [pc, #332]	@ (80059c4 <_printf_i+0x238>)
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	bf14      	ite	ne
 800587c:	230a      	movne	r3, #10
 800587e:	2308      	moveq	r3, #8
 8005880:	2100      	movs	r1, #0
 8005882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005886:	6866      	ldr	r6, [r4, #4]
 8005888:	60a6      	str	r6, [r4, #8]
 800588a:	2e00      	cmp	r6, #0
 800588c:	bfa2      	ittt	ge
 800588e:	6821      	ldrge	r1, [r4, #0]
 8005890:	f021 0104 	bicge.w	r1, r1, #4
 8005894:	6021      	strge	r1, [r4, #0]
 8005896:	b90d      	cbnz	r5, 800589c <_printf_i+0x110>
 8005898:	2e00      	cmp	r6, #0
 800589a:	d04b      	beq.n	8005934 <_printf_i+0x1a8>
 800589c:	4616      	mov	r6, r2
 800589e:	fbb5 f1f3 	udiv	r1, r5, r3
 80058a2:	fb03 5711 	mls	r7, r3, r1, r5
 80058a6:	5dc7      	ldrb	r7, [r0, r7]
 80058a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058ac:	462f      	mov	r7, r5
 80058ae:	42bb      	cmp	r3, r7
 80058b0:	460d      	mov	r5, r1
 80058b2:	d9f4      	bls.n	800589e <_printf_i+0x112>
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d10b      	bne.n	80058d0 <_printf_i+0x144>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07df      	lsls	r7, r3, #31
 80058bc:	d508      	bpl.n	80058d0 <_printf_i+0x144>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	6861      	ldr	r1, [r4, #4]
 80058c2:	4299      	cmp	r1, r3
 80058c4:	bfde      	ittt	le
 80058c6:	2330      	movle	r3, #48	@ 0x30
 80058c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058d0:	1b92      	subs	r2, r2, r6
 80058d2:	6122      	str	r2, [r4, #16]
 80058d4:	f8cd a000 	str.w	sl, [sp]
 80058d8:	464b      	mov	r3, r9
 80058da:	aa03      	add	r2, sp, #12
 80058dc:	4621      	mov	r1, r4
 80058de:	4640      	mov	r0, r8
 80058e0:	f7ff fee6 	bl	80056b0 <_printf_common>
 80058e4:	3001      	adds	r0, #1
 80058e6:	d14a      	bne.n	800597e <_printf_i+0x1f2>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	b004      	add	sp, #16
 80058ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f043 0320 	orr.w	r3, r3, #32
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	4833      	ldr	r0, [pc, #204]	@ (80059c8 <_printf_i+0x23c>)
 80058fc:	2778      	movs	r7, #120	@ 0x78
 80058fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	6831      	ldr	r1, [r6, #0]
 8005906:	061f      	lsls	r7, r3, #24
 8005908:	f851 5b04 	ldr.w	r5, [r1], #4
 800590c:	d402      	bmi.n	8005914 <_printf_i+0x188>
 800590e:	065f      	lsls	r7, r3, #25
 8005910:	bf48      	it	mi
 8005912:	b2ad      	uxthmi	r5, r5
 8005914:	6031      	str	r1, [r6, #0]
 8005916:	07d9      	lsls	r1, r3, #31
 8005918:	bf44      	itt	mi
 800591a:	f043 0320 	orrmi.w	r3, r3, #32
 800591e:	6023      	strmi	r3, [r4, #0]
 8005920:	b11d      	cbz	r5, 800592a <_printf_i+0x19e>
 8005922:	2310      	movs	r3, #16
 8005924:	e7ac      	b.n	8005880 <_printf_i+0xf4>
 8005926:	4827      	ldr	r0, [pc, #156]	@ (80059c4 <_printf_i+0x238>)
 8005928:	e7e9      	b.n	80058fe <_printf_i+0x172>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f023 0320 	bic.w	r3, r3, #32
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	e7f6      	b.n	8005922 <_printf_i+0x196>
 8005934:	4616      	mov	r6, r2
 8005936:	e7bd      	b.n	80058b4 <_printf_i+0x128>
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	6825      	ldr	r5, [r4, #0]
 800593c:	6961      	ldr	r1, [r4, #20]
 800593e:	1d18      	adds	r0, r3, #4
 8005940:	6030      	str	r0, [r6, #0]
 8005942:	062e      	lsls	r6, r5, #24
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	d501      	bpl.n	800594c <_printf_i+0x1c0>
 8005948:	6019      	str	r1, [r3, #0]
 800594a:	e002      	b.n	8005952 <_printf_i+0x1c6>
 800594c:	0668      	lsls	r0, r5, #25
 800594e:	d5fb      	bpl.n	8005948 <_printf_i+0x1bc>
 8005950:	8019      	strh	r1, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	4616      	mov	r6, r2
 8005958:	e7bc      	b.n	80058d4 <_printf_i+0x148>
 800595a:	6833      	ldr	r3, [r6, #0]
 800595c:	1d1a      	adds	r2, r3, #4
 800595e:	6032      	str	r2, [r6, #0]
 8005960:	681e      	ldr	r6, [r3, #0]
 8005962:	6862      	ldr	r2, [r4, #4]
 8005964:	2100      	movs	r1, #0
 8005966:	4630      	mov	r0, r6
 8005968:	f7fa fc52 	bl	8000210 <memchr>
 800596c:	b108      	cbz	r0, 8005972 <_printf_i+0x1e6>
 800596e:	1b80      	subs	r0, r0, r6
 8005970:	6060      	str	r0, [r4, #4]
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	2300      	movs	r3, #0
 8005978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800597c:	e7aa      	b.n	80058d4 <_printf_i+0x148>
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	4632      	mov	r2, r6
 8005982:	4649      	mov	r1, r9
 8005984:	4640      	mov	r0, r8
 8005986:	47d0      	blx	sl
 8005988:	3001      	adds	r0, #1
 800598a:	d0ad      	beq.n	80058e8 <_printf_i+0x15c>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	079b      	lsls	r3, r3, #30
 8005990:	d413      	bmi.n	80059ba <_printf_i+0x22e>
 8005992:	68e0      	ldr	r0, [r4, #12]
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	4298      	cmp	r0, r3
 8005998:	bfb8      	it	lt
 800599a:	4618      	movlt	r0, r3
 800599c:	e7a6      	b.n	80058ec <_printf_i+0x160>
 800599e:	2301      	movs	r3, #1
 80059a0:	4632      	mov	r2, r6
 80059a2:	4649      	mov	r1, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	47d0      	blx	sl
 80059a8:	3001      	adds	r0, #1
 80059aa:	d09d      	beq.n	80058e8 <_printf_i+0x15c>
 80059ac:	3501      	adds	r5, #1
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	9903      	ldr	r1, [sp, #12]
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	42ab      	cmp	r3, r5
 80059b6:	dcf2      	bgt.n	800599e <_printf_i+0x212>
 80059b8:	e7eb      	b.n	8005992 <_printf_i+0x206>
 80059ba:	2500      	movs	r5, #0
 80059bc:	f104 0619 	add.w	r6, r4, #25
 80059c0:	e7f5      	b.n	80059ae <_printf_i+0x222>
 80059c2:	bf00      	nop
 80059c4:	08005fa1 	.word	0x08005fa1
 80059c8:	08005fb2 	.word	0x08005fb2

080059cc <__sflush_r>:
 80059cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d4:	0716      	lsls	r6, r2, #28
 80059d6:	4605      	mov	r5, r0
 80059d8:	460c      	mov	r4, r1
 80059da:	d454      	bmi.n	8005a86 <__sflush_r+0xba>
 80059dc:	684b      	ldr	r3, [r1, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dc02      	bgt.n	80059e8 <__sflush_r+0x1c>
 80059e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd48      	ble.n	8005a7a <__sflush_r+0xae>
 80059e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	d045      	beq.n	8005a7a <__sflush_r+0xae>
 80059ee:	2300      	movs	r3, #0
 80059f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059f4:	682f      	ldr	r7, [r5, #0]
 80059f6:	6a21      	ldr	r1, [r4, #32]
 80059f8:	602b      	str	r3, [r5, #0]
 80059fa:	d030      	beq.n	8005a5e <__sflush_r+0x92>
 80059fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	0759      	lsls	r1, r3, #29
 8005a02:	d505      	bpl.n	8005a10 <__sflush_r+0x44>
 8005a04:	6863      	ldr	r3, [r4, #4]
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a0a:	b10b      	cbz	r3, 8005a10 <__sflush_r+0x44>
 8005a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	2300      	movs	r3, #0
 8005a12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a14:	6a21      	ldr	r1, [r4, #32]
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b0      	blx	r6
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	d106      	bne.n	8005a2e <__sflush_r+0x62>
 8005a20:	6829      	ldr	r1, [r5, #0]
 8005a22:	291d      	cmp	r1, #29
 8005a24:	d82b      	bhi.n	8005a7e <__sflush_r+0xb2>
 8005a26:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad0 <__sflush_r+0x104>)
 8005a28:	410a      	asrs	r2, r1
 8005a2a:	07d6      	lsls	r6, r2, #31
 8005a2c:	d427      	bmi.n	8005a7e <__sflush_r+0xb2>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	6062      	str	r2, [r4, #4]
 8005a32:	04d9      	lsls	r1, r3, #19
 8005a34:	6922      	ldr	r2, [r4, #16]
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	d504      	bpl.n	8005a44 <__sflush_r+0x78>
 8005a3a:	1c42      	adds	r2, r0, #1
 8005a3c:	d101      	bne.n	8005a42 <__sflush_r+0x76>
 8005a3e:	682b      	ldr	r3, [r5, #0]
 8005a40:	b903      	cbnz	r3, 8005a44 <__sflush_r+0x78>
 8005a42:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a46:	602f      	str	r7, [r5, #0]
 8005a48:	b1b9      	cbz	r1, 8005a7a <__sflush_r+0xae>
 8005a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	d002      	beq.n	8005a58 <__sflush_r+0x8c>
 8005a52:	4628      	mov	r0, r5
 8005a54:	f7ff fbf2 	bl	800523c <_free_r>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a5c:	e00d      	b.n	8005a7a <__sflush_r+0xae>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b0      	blx	r6
 8005a64:	4602      	mov	r2, r0
 8005a66:	1c50      	adds	r0, r2, #1
 8005a68:	d1c9      	bne.n	80059fe <__sflush_r+0x32>
 8005a6a:	682b      	ldr	r3, [r5, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0c6      	beq.n	80059fe <__sflush_r+0x32>
 8005a70:	2b1d      	cmp	r3, #29
 8005a72:	d001      	beq.n	8005a78 <__sflush_r+0xac>
 8005a74:	2b16      	cmp	r3, #22
 8005a76:	d11e      	bne.n	8005ab6 <__sflush_r+0xea>
 8005a78:	602f      	str	r7, [r5, #0]
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e022      	b.n	8005ac4 <__sflush_r+0xf8>
 8005a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	e01b      	b.n	8005abe <__sflush_r+0xf2>
 8005a86:	690f      	ldr	r7, [r1, #16]
 8005a88:	2f00      	cmp	r7, #0
 8005a8a:	d0f6      	beq.n	8005a7a <__sflush_r+0xae>
 8005a8c:	0793      	lsls	r3, r2, #30
 8005a8e:	680e      	ldr	r6, [r1, #0]
 8005a90:	bf08      	it	eq
 8005a92:	694b      	ldreq	r3, [r1, #20]
 8005a94:	600f      	str	r7, [r1, #0]
 8005a96:	bf18      	it	ne
 8005a98:	2300      	movne	r3, #0
 8005a9a:	eba6 0807 	sub.w	r8, r6, r7
 8005a9e:	608b      	str	r3, [r1, #8]
 8005aa0:	f1b8 0f00 	cmp.w	r8, #0
 8005aa4:	dde9      	ble.n	8005a7a <__sflush_r+0xae>
 8005aa6:	6a21      	ldr	r1, [r4, #32]
 8005aa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005aaa:	4643      	mov	r3, r8
 8005aac:	463a      	mov	r2, r7
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b0      	blx	r6
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	dc08      	bgt.n	8005ac8 <__sflush_r+0xfc>
 8005ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac8:	4407      	add	r7, r0
 8005aca:	eba8 0800 	sub.w	r8, r8, r0
 8005ace:	e7e7      	b.n	8005aa0 <__sflush_r+0xd4>
 8005ad0:	dfbffffe 	.word	0xdfbffffe

08005ad4 <_fflush_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	690b      	ldr	r3, [r1, #16]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	b913      	cbnz	r3, 8005ae4 <_fflush_r+0x10>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	b118      	cbz	r0, 8005aee <_fflush_r+0x1a>
 8005ae6:	6a03      	ldr	r3, [r0, #32]
 8005ae8:	b90b      	cbnz	r3, 8005aee <_fflush_r+0x1a>
 8005aea:	f7ff fa8b 	bl	8005004 <__sinit>
 8005aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f3      	beq.n	8005ade <_fflush_r+0xa>
 8005af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005af8:	07d0      	lsls	r0, r2, #31
 8005afa:	d404      	bmi.n	8005b06 <_fflush_r+0x32>
 8005afc:	0599      	lsls	r1, r3, #22
 8005afe:	d402      	bmi.n	8005b06 <_fflush_r+0x32>
 8005b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b02:	f7ff fb84 	bl	800520e <__retarget_lock_acquire_recursive>
 8005b06:	4628      	mov	r0, r5
 8005b08:	4621      	mov	r1, r4
 8005b0a:	f7ff ff5f 	bl	80059cc <__sflush_r>
 8005b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b10:	07da      	lsls	r2, r3, #31
 8005b12:	4605      	mov	r5, r0
 8005b14:	d4e4      	bmi.n	8005ae0 <_fflush_r+0xc>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	059b      	lsls	r3, r3, #22
 8005b1a:	d4e1      	bmi.n	8005ae0 <_fflush_r+0xc>
 8005b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b1e:	f7ff fb77 	bl	8005210 <__retarget_lock_release_recursive>
 8005b22:	e7dd      	b.n	8005ae0 <_fflush_r+0xc>

08005b24 <__swbuf_r>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	460e      	mov	r6, r1
 8005b28:	4614      	mov	r4, r2
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	b118      	cbz	r0, 8005b36 <__swbuf_r+0x12>
 8005b2e:	6a03      	ldr	r3, [r0, #32]
 8005b30:	b90b      	cbnz	r3, 8005b36 <__swbuf_r+0x12>
 8005b32:	f7ff fa67 	bl	8005004 <__sinit>
 8005b36:	69a3      	ldr	r3, [r4, #24]
 8005b38:	60a3      	str	r3, [r4, #8]
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	071a      	lsls	r2, r3, #28
 8005b3e:	d501      	bpl.n	8005b44 <__swbuf_r+0x20>
 8005b40:	6923      	ldr	r3, [r4, #16]
 8005b42:	b943      	cbnz	r3, 8005b56 <__swbuf_r+0x32>
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f82a 	bl	8005ba0 <__swsetup_r>
 8005b4c:	b118      	cbz	r0, 8005b56 <__swbuf_r+0x32>
 8005b4e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b52:	4638      	mov	r0, r7
 8005b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	6922      	ldr	r2, [r4, #16]
 8005b5a:	1a98      	subs	r0, r3, r2
 8005b5c:	6963      	ldr	r3, [r4, #20]
 8005b5e:	b2f6      	uxtb	r6, r6
 8005b60:	4283      	cmp	r3, r0
 8005b62:	4637      	mov	r7, r6
 8005b64:	dc05      	bgt.n	8005b72 <__swbuf_r+0x4e>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff ffb3 	bl	8005ad4 <_fflush_r>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d1ed      	bne.n	8005b4e <__swbuf_r+0x2a>
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	60a3      	str	r3, [r4, #8]
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	701e      	strb	r6, [r3, #0]
 8005b80:	6962      	ldr	r2, [r4, #20]
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d004      	beq.n	8005b92 <__swbuf_r+0x6e>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	07db      	lsls	r3, r3, #31
 8005b8c:	d5e1      	bpl.n	8005b52 <__swbuf_r+0x2e>
 8005b8e:	2e0a      	cmp	r6, #10
 8005b90:	d1df      	bne.n	8005b52 <__swbuf_r+0x2e>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4628      	mov	r0, r5
 8005b96:	f7ff ff9d 	bl	8005ad4 <_fflush_r>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d0d9      	beq.n	8005b52 <__swbuf_r+0x2e>
 8005b9e:	e7d6      	b.n	8005b4e <__swbuf_r+0x2a>

08005ba0 <__swsetup_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4b29      	ldr	r3, [pc, #164]	@ (8005c48 <__swsetup_r+0xa8>)
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	460c      	mov	r4, r1
 8005baa:	b118      	cbz	r0, 8005bb4 <__swsetup_r+0x14>
 8005bac:	6a03      	ldr	r3, [r0, #32]
 8005bae:	b90b      	cbnz	r3, 8005bb4 <__swsetup_r+0x14>
 8005bb0:	f7ff fa28 	bl	8005004 <__sinit>
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	0719      	lsls	r1, r3, #28
 8005bba:	d422      	bmi.n	8005c02 <__swsetup_r+0x62>
 8005bbc:	06da      	lsls	r2, r3, #27
 8005bbe:	d407      	bmi.n	8005bd0 <__swsetup_r+0x30>
 8005bc0:	2209      	movs	r2, #9
 8005bc2:	602a      	str	r2, [r5, #0]
 8005bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	f04f 30ff 	mov.w	r0, #4294967295
 8005bce:	e033      	b.n	8005c38 <__swsetup_r+0x98>
 8005bd0:	0758      	lsls	r0, r3, #29
 8005bd2:	d512      	bpl.n	8005bfa <__swsetup_r+0x5a>
 8005bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bd6:	b141      	cbz	r1, 8005bea <__swsetup_r+0x4a>
 8005bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	d002      	beq.n	8005be6 <__swsetup_r+0x46>
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7ff fb2b 	bl	800523c <_free_r>
 8005be6:	2300      	movs	r3, #0
 8005be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f043 0308 	orr.w	r3, r3, #8
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	b94b      	cbnz	r3, 8005c1a <__swsetup_r+0x7a>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c10:	d003      	beq.n	8005c1a <__swsetup_r+0x7a>
 8005c12:	4621      	mov	r1, r4
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 f893 	bl	8005d40 <__smakebuf_r>
 8005c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1e:	f013 0201 	ands.w	r2, r3, #1
 8005c22:	d00a      	beq.n	8005c3a <__swsetup_r+0x9a>
 8005c24:	2200      	movs	r2, #0
 8005c26:	60a2      	str	r2, [r4, #8]
 8005c28:	6962      	ldr	r2, [r4, #20]
 8005c2a:	4252      	negs	r2, r2
 8005c2c:	61a2      	str	r2, [r4, #24]
 8005c2e:	6922      	ldr	r2, [r4, #16]
 8005c30:	b942      	cbnz	r2, 8005c44 <__swsetup_r+0xa4>
 8005c32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c36:	d1c5      	bne.n	8005bc4 <__swsetup_r+0x24>
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
 8005c3a:	0799      	lsls	r1, r3, #30
 8005c3c:	bf58      	it	pl
 8005c3e:	6962      	ldrpl	r2, [r4, #20]
 8005c40:	60a2      	str	r2, [r4, #8]
 8005c42:	e7f4      	b.n	8005c2e <__swsetup_r+0x8e>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7f7      	b.n	8005c38 <__swsetup_r+0x98>
 8005c48:	20000020 	.word	0x20000020

08005c4c <_raise_r>:
 8005c4c:	291f      	cmp	r1, #31
 8005c4e:	b538      	push	{r3, r4, r5, lr}
 8005c50:	4605      	mov	r5, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	d904      	bls.n	8005c60 <_raise_r+0x14>
 8005c56:	2316      	movs	r3, #22
 8005c58:	6003      	str	r3, [r0, #0]
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c62:	b112      	cbz	r2, 8005c6a <_raise_r+0x1e>
 8005c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c68:	b94b      	cbnz	r3, 8005c7e <_raise_r+0x32>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f000 f830 	bl	8005cd0 <_getpid_r>
 8005c70:	4622      	mov	r2, r4
 8005c72:	4601      	mov	r1, r0
 8005c74:	4628      	mov	r0, r5
 8005c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c7a:	f000 b817 	b.w	8005cac <_kill_r>
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d00a      	beq.n	8005c98 <_raise_r+0x4c>
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	d103      	bne.n	8005c8e <_raise_r+0x42>
 8005c86:	2316      	movs	r3, #22
 8005c88:	6003      	str	r3, [r0, #0]
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	e7e7      	b.n	8005c5e <_raise_r+0x12>
 8005c8e:	2100      	movs	r1, #0
 8005c90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c94:	4620      	mov	r0, r4
 8005c96:	4798      	blx	r3
 8005c98:	2000      	movs	r0, #0
 8005c9a:	e7e0      	b.n	8005c5e <_raise_r+0x12>

08005c9c <raise>:
 8005c9c:	4b02      	ldr	r3, [pc, #8]	@ (8005ca8 <raise+0xc>)
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	f7ff bfd3 	b.w	8005c4c <_raise_r>
 8005ca6:	bf00      	nop
 8005ca8:	20000020 	.word	0x20000020

08005cac <_kill_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	@ (8005ccc <_kill_r+0x20>)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	f7fb fc37 	bl	800152c <_kill>
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	d102      	bne.n	8005cc8 <_kill_r+0x1c>
 8005cc2:	682b      	ldr	r3, [r5, #0]
 8005cc4:	b103      	cbz	r3, 8005cc8 <_kill_r+0x1c>
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	bd38      	pop	{r3, r4, r5, pc}
 8005cca:	bf00      	nop
 8005ccc:	200003d8 	.word	0x200003d8

08005cd0 <_getpid_r>:
 8005cd0:	f7fb bc24 	b.w	800151c <_getpid>

08005cd4 <_sbrk_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d06      	ldr	r5, [pc, #24]	@ (8005cf0 <_sbrk_r+0x1c>)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	602b      	str	r3, [r5, #0]
 8005ce0:	f7fb fcac 	bl	800163c <_sbrk>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_sbrk_r+0x1a>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_sbrk_r+0x1a>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	200003d8 	.word	0x200003d8

08005cf4 <__swhatbuf_r>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	b096      	sub	sp, #88	@ 0x58
 8005d00:	4615      	mov	r5, r2
 8005d02:	461e      	mov	r6, r3
 8005d04:	da0d      	bge.n	8005d22 <__swhatbuf_r+0x2e>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d0c:	f04f 0100 	mov.w	r1, #0
 8005d10:	bf14      	ite	ne
 8005d12:	2340      	movne	r3, #64	@ 0x40
 8005d14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d18:	2000      	movs	r0, #0
 8005d1a:	6031      	str	r1, [r6, #0]
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	b016      	add	sp, #88	@ 0x58
 8005d20:	bd70      	pop	{r4, r5, r6, pc}
 8005d22:	466a      	mov	r2, sp
 8005d24:	f000 f848 	bl	8005db8 <_fstat_r>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	dbec      	blt.n	8005d06 <__swhatbuf_r+0x12>
 8005d2c:	9901      	ldr	r1, [sp, #4]
 8005d2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d36:	4259      	negs	r1, r3
 8005d38:	4159      	adcs	r1, r3
 8005d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d3e:	e7eb      	b.n	8005d18 <__swhatbuf_r+0x24>

08005d40 <__smakebuf_r>:
 8005d40:	898b      	ldrh	r3, [r1, #12]
 8005d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d44:	079d      	lsls	r5, r3, #30
 8005d46:	4606      	mov	r6, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	d507      	bpl.n	8005d5c <__smakebuf_r+0x1c>
 8005d4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	6123      	str	r3, [r4, #16]
 8005d54:	2301      	movs	r3, #1
 8005d56:	6163      	str	r3, [r4, #20]
 8005d58:	b003      	add	sp, #12
 8005d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d5c:	ab01      	add	r3, sp, #4
 8005d5e:	466a      	mov	r2, sp
 8005d60:	f7ff ffc8 	bl	8005cf4 <__swhatbuf_r>
 8005d64:	9f00      	ldr	r7, [sp, #0]
 8005d66:	4605      	mov	r5, r0
 8005d68:	4639      	mov	r1, r7
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff fad2 	bl	8005314 <_malloc_r>
 8005d70:	b948      	cbnz	r0, 8005d86 <__smakebuf_r+0x46>
 8005d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d76:	059a      	lsls	r2, r3, #22
 8005d78:	d4ee      	bmi.n	8005d58 <__smakebuf_r+0x18>
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	f043 0302 	orr.w	r3, r3, #2
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	e7e2      	b.n	8005d4c <__smakebuf_r+0xc>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	6020      	str	r0, [r4, #0]
 8005d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d8e:	81a3      	strh	r3, [r4, #12]
 8005d90:	9b01      	ldr	r3, [sp, #4]
 8005d92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d96:	b15b      	cbz	r3, 8005db0 <__smakebuf_r+0x70>
 8005d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 f81d 	bl	8005ddc <_isatty_r>
 8005da2:	b128      	cbz	r0, 8005db0 <__smakebuf_r+0x70>
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	431d      	orrs	r5, r3
 8005db4:	81a5      	strh	r5, [r4, #12]
 8005db6:	e7cf      	b.n	8005d58 <__smakebuf_r+0x18>

08005db8 <_fstat_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	@ (8005dd8 <_fstat_r+0x20>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f7fb fc11 	bl	80015ec <_fstat>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d102      	bne.n	8005dd4 <_fstat_r+0x1c>
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	b103      	cbz	r3, 8005dd4 <_fstat_r+0x1c>
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200003d8 	.word	0x200003d8

08005ddc <_isatty_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d06      	ldr	r5, [pc, #24]	@ (8005df8 <_isatty_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	f7fb fc10 	bl	800160c <_isatty>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_isatty_r+0x1a>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_isatty_r+0x1a>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	200003d8 	.word	0x200003d8

08005dfc <roundf>:
 8005dfc:	ee10 0a10 	vmov	r0, s0
 8005e00:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005e04:	3a7f      	subs	r2, #127	@ 0x7f
 8005e06:	2a16      	cmp	r2, #22
 8005e08:	dc15      	bgt.n	8005e36 <roundf+0x3a>
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	da08      	bge.n	8005e20 <roundf+0x24>
 8005e0e:	3201      	adds	r2, #1
 8005e10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8005e14:	d101      	bne.n	8005e1a <roundf+0x1e>
 8005e16:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8005e1a:	ee00 3a10 	vmov	s0, r3
 8005e1e:	4770      	bx	lr
 8005e20:	4907      	ldr	r1, [pc, #28]	@ (8005e40 <roundf+0x44>)
 8005e22:	4111      	asrs	r1, r2
 8005e24:	4201      	tst	r1, r0
 8005e26:	d0fa      	beq.n	8005e1e <roundf+0x22>
 8005e28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e2c:	4113      	asrs	r3, r2
 8005e2e:	4403      	add	r3, r0
 8005e30:	ea23 0301 	bic.w	r3, r3, r1
 8005e34:	e7f1      	b.n	8005e1a <roundf+0x1e>
 8005e36:	2a80      	cmp	r2, #128	@ 0x80
 8005e38:	d1f1      	bne.n	8005e1e <roundf+0x22>
 8005e3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005e3e:	4770      	bx	lr
 8005e40:	007fffff 	.word	0x007fffff

08005e44 <_init>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr

08005e50 <_fini>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr
