
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce38  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800d008  0800d008  0000e008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d824  0800d824  0000f1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d824  0800d824  0000e824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d82c  0800d82c  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d82c  0800d82c  0000e82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d830  0800d830  0000e830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800d834  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd4  200001e8  0800da1c  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ebc  0800da1c  0000febc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a85a  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047e4  00000000  00000000  00029a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  0002e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001392  00000000  00000000  0002fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285a9  00000000  00000000  00030f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000232ca  00000000  00000000  0005952b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8b1a  00000000  00000000  0007c7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016530f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079dc  00000000  00000000  00165354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0016cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cff0 	.word	0x0800cff0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800cff0 	.word	0x0800cff0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <RPI_UART_Init>:
/* Private functions ---------------------------------------------------------*/

/**
 * @brief Initialize UART with interrupt capability
 */
void RPI_UART_Init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
   * PG14 -> USART6_TX
   * PG9  -> USART6_RX
   */

  /* Enable clock for GPIOG */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b34      	ldr	r3, [pc, #208]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a33      	ldr	r2, [pc, #204]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  /* Enable clock for USART6 */
  __HAL_RCC_USART6_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a2c      	ldr	r2, [pc, #176]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pins */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_9;
 8001002:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001014:	2308      	movs	r3, #8
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	481d      	ldr	r0, [pc, #116]	@ (8001094 <RPI_UART_Init+0xe0>)
 8001020:	f005 f842 	bl	80060a8 <HAL_GPIO_Init>

  /* Configure UART */
  huart6.Instance = USART6;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001026:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <RPI_UART_Init+0xe8>)
 8001028:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <RPI_UART_Init+0xe4>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <RPI_UART_Init+0xe4>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <RPI_UART_Init+0xe4>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001056:	4810      	ldr	r0, [pc, #64]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001058:	f008 f902 	bl	8009260 <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <RPI_UART_Init+0xb2>
    Error_Handler();
 8001062:	f001 fa2f 	bl	80024c4 <Error_Handler>
  }

  /* Enable UART global interrupt */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2047      	movs	r0, #71	@ 0x47
 800106c:	f004 fc69 	bl	8005942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001070:	2047      	movs	r0, #71	@ 0x47
 8001072:	f004 fc82 	bl	800597a <HAL_NVIC_EnableIRQ>

  /* Enable UART receive interrupt */
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <RPI_UART_Init+0xe4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0220 	orr.w	r2, r2, #32
 8001084:	60da      	str	r2, [r3, #12]
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40021800 	.word	0x40021800
 8001098:	20000510 	.word	0x20000510
 800109c:	40011400 	.word	0x40011400

080010a0 <ProcessCommand>:

/**
 * @brief Process received command
 */
void ProcessCommand(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  switch (rxCmd) {
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <ProcessCommand+0x54>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	dc0f      	bgt.n	80010cc <ProcessCommand+0x2c>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd1c      	ble.n	80010ea <ProcessCommand+0x4a>
 80010b0:	3b01      	subs	r3, #1
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d819      	bhi.n	80010ea <ProcessCommand+0x4a>
 80010b6:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <ProcessCommand+0x1c>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	080010d3 	.word	0x080010d3
 80010c0:	080010db 	.word	0x080010db
 80010c4:	080010e3 	.word	0x080010e3
 80010c8:	080010eb 	.word	0x080010eb
 80010cc:	2b50      	cmp	r3, #80	@ 0x50
 80010ce:	d00e      	beq.n	80010ee <ProcessCommand+0x4e>
      //StopRobot();
      break;

    default:
      /* Unknown command */
      break;
 80010d0:	e00b      	b.n	80010ea <ProcessCommand+0x4a>
      HandleLineDetection(rxBuffer);
 80010d2:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <ProcessCommand+0x58>)
 80010d4:	f002 f952 	bl	800337c <HandleLineDetection>
      break;
 80010d8:	e00a      	b.n	80010f0 <ProcessCommand+0x50>
      HandleGridPosition(rxBuffer);
 80010da:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <ProcessCommand+0x58>)
 80010dc:	f002 f95e 	bl	800339c <HandleGridPosition>
      break;
 80010e0:	e006      	b.n	80010f0 <ProcessCommand+0x50>
      HandleColorDetection(rxBuffer);
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <ProcessCommand+0x58>)
 80010e4:	f002 f96e 	bl	80033c4 <HandleColorDetection>
      break;
 80010e8:	e002      	b.n	80010f0 <ProcessCommand+0x50>
      break;
 80010ea:	bf00      	nop
 80010ec:	e000      	b.n	80010f0 <ProcessCommand+0x50>
      break;
 80010ee:	bf00      	nop
  }
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000288 	.word	0x20000288
 80010f8:	20000208 	.word	0x20000208

080010fc <SendCommand>:
 * @brief Send command to Raspberry Pi
 * @param cmd Command ID
 * @param data Data buffer
 * @param length Data length
 */
void SendCommand(uint8_t cmd, uint8_t *data, uint8_t length) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0a4      	sub	sp, #144	@ 0x90
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
  uint8_t txBuffer[MAX_BUFFER_SIZE + 4]; // Start + Cmd + Length + Data + End
  uint16_t txIndex = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

  /* Construct packet */
  txBuffer[txIndex++] = START_MARKER;
 8001112:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	f8a7 208e 	strh.w	r2, [r7, #142]	@ 0x8e
 800111c:	3390      	adds	r3, #144	@ 0x90
 800111e:	443b      	add	r3, r7
 8001120:	223c      	movs	r2, #60	@ 0x3c
 8001122:	f803 2c88 	strb.w	r2, [r3, #-136]
  txBuffer[txIndex++] = cmd;
 8001126:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	f8a7 208e 	strh.w	r2, [r7, #142]	@ 0x8e
 8001130:	3390      	adds	r3, #144	@ 0x90
 8001132:	443b      	add	r3, r7
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	f803 2c88 	strb.w	r2, [r3, #-136]
  txBuffer[txIndex++] = length;
 800113a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	f8a7 208e 	strh.w	r2, [r7, #142]	@ 0x8e
 8001144:	3390      	adds	r3, #144	@ 0x90
 8001146:	443b      	add	r3, r7
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	f803 2c88 	strb.w	r2, [r3, #-136]

  /* Copy data */
  if (length > 0 && data != NULL) {
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d022      	beq.n	800119a <SendCommand+0x9e>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d01f      	beq.n	800119a <SendCommand+0x9e>
    for (uint8_t i = 0; i < length && txIndex < MAX_BUFFER_SIZE + 3; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8001160:	e012      	b.n	8001188 <SendCommand+0x8c>
      txBuffer[txIndex++] = data[i];
 8001162:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	441a      	add	r2, r3
 800116a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800116e:	1c59      	adds	r1, r3, #1
 8001170:	f8a7 108e 	strh.w	r1, [r7, #142]	@ 0x8e
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	3390      	adds	r3, #144	@ 0x90
 8001178:	443b      	add	r3, r7
 800117a:	f803 2c88 	strb.w	r2, [r3, #-136]
    for (uint8_t i = 0; i < length && txIndex < MAX_BUFFER_SIZE + 3; i++) {
 800117e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001182:	3301      	adds	r3, #1
 8001184:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8001188:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	429a      	cmp	r2, r3
 8001190:	d203      	bcs.n	800119a <SendCommand+0x9e>
 8001192:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001196:	2b82      	cmp	r3, #130	@ 0x82
 8001198:	d9e3      	bls.n	8001162 <SendCommand+0x66>
    }
  }

  /* Add end marker */
  txBuffer[txIndex++] = END_MARKER;
 800119a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	f8a7 208e 	strh.w	r2, [r7, #142]	@ 0x8e
 80011a4:	3390      	adds	r3, #144	@ 0x90
 80011a6:	443b      	add	r3, r7
 80011a8:	223e      	movs	r2, #62	@ 0x3e
 80011aa:	f803 2c88 	strb.w	r2, [r3, #-136]

  /* Send packet */
  HAL_UART_Transmit(&huart6, txBuffer, txIndex, 100);
 80011ae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80011b2:	f107 0108 	add.w	r1, r7, #8
 80011b6:	2364      	movs	r3, #100	@ 0x64
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <SendCommand+0xcc>)
 80011ba:	f008 f8a1 	bl	8009300 <HAL_UART_Transmit>
}
 80011be:	bf00      	nop
 80011c0:	3790      	adds	r7, #144	@ 0x90
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000510 	.word	0x20000510

080011cc <StartLineColorDetection>:
void StartColorDetection(void) {
  uint8_t params[1] = {1}; // 1 = Start
  SendCommand(CMD_START_COLOR_DETECTION, params, 1);
}

void StartLineColorDetection(void){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	uint8_t params[1] = {1}; // 1 = Start
 80011d2:	2301      	movs	r3, #1
 80011d4:	713b      	strb	r3, [r7, #4]
	SendCommand(CMD_START_LINE_COLOR_DETECTION, params, 1);
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	2034      	movs	r0, #52	@ 0x34
 80011de:	f7ff ff8d 	bl	80010fc <SendCommand>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d901      	bls.n	8001200 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 80011fc:	230f      	movs	r3, #15
 80011fe:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001210:	4823      	ldr	r0, [pc, #140]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 8001212:	f005 f8dd 	bl	80063d0 <HAL_GPIO_WritePin>
 8001216:	e005      	b.n	8001224 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800121e:	4820      	ldr	r0, [pc, #128]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 8001220:	f005 f8d6 	bl	80063d0 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001234:	481a      	ldr	r0, [pc, #104]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 8001236:	f005 f8cb 	bl	80063d0 <HAL_GPIO_WritePin>
 800123a:	e005      	b.n	8001248 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001242:	4817      	ldr	r0, [pc, #92]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 8001244:	f005 f8c4 	bl	80063d0 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001258:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 800125a:	f005 f8b9 	bl	80063d0 <HAL_GPIO_WritePin>
 800125e:	e005      	b.n	800126c <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001266:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 8001268:	f005 f8b2 	bl	80063d0 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 800127e:	f005 f8a7 	bl	80063d0 <HAL_GPIO_WritePin>
 8001282:	e005      	b.n	8001290 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <AnalogMux_SelectChannel+0xb4>)
 800128c:	f005 f8a0 	bl	80063d0 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f000 fb9b 	bl	80019cc <delayMicroseconds>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020400 	.word	0x40020400

080012a4 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 80012ae:	480b      	ldr	r0, [pc, #44]	@ (80012dc <AnalogMux_ReadADC+0x38>)
 80012b0:	f003 fea0 	bl	8004ff4 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80012b4:	2164      	movs	r1, #100	@ 0x64
 80012b6:	4809      	ldr	r0, [pc, #36]	@ (80012dc <AnalogMux_ReadADC+0x38>)
 80012b8:	f003 ffa1 	bl	80051fe <HAL_ADC_PollForConversion>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d104      	bne.n	80012cc <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <AnalogMux_ReadADC+0x38>)
 80012c4:	f004 f826 	bl	8005314 <HAL_ADC_GetValue>
 80012c8:	4603      	mov	r3, r0
 80012ca:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <AnalogMux_ReadADC+0x38>)
 80012ce:	f003 ff63 	bl	8005198 <HAL_ADC_Stop>

    return adcValue;
 80012d2:	88fb      	ldrh	r3, [r7, #6]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200002b8 	.word	0x200002b8

080012e0 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff7d 	bl	80011ec <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 80012f2:	2005      	movs	r0, #5
 80012f4:	f000 fb6a 	bl	80019cc <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 80012f8:	f7ff ffd4 	bl	80012a4 <AnalogMux_ReadADC>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <Arm_Init>:
/**
  * @brief  Initialize the robot arm controller
  * @retval int: 0 if successful, -1 if error
  */
int Arm_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    // Check if already initialized
    if (initialized)
 800130c:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <Arm_Init+0xd4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <Arm_Init+0x10>
        return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e05e      	b.n	80013d6 <Arm_Init+0xce>

    // Register the four servos for the arm if they don't exist already
    if (servoIds[0] == -1) {
 8001318:	4b31      	ldr	r3, [pc, #196]	@ (80013e0 <Arm_Init+0xd8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d10c      	bne.n	800133c <Arm_Init+0x34>
        servoIds[0] = Servo_Register(15, "Base", 0.0f, 180.0f, ARM_HOME_BASE_ANGLE);
 8001322:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 80013e4 <Arm_Init+0xdc>
 8001326:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80013e8 <Arm_Init+0xe0>
 800132a:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80013ec <Arm_Init+0xe4>
 800132e:	4930      	ldr	r1, [pc, #192]	@ (80013f0 <Arm_Init+0xe8>)
 8001330:	200f      	movs	r0, #15
 8001332:	f002 fbd7 	bl	8003ae4 <Servo_Register>
 8001336:	4603      	mov	r3, r0
 8001338:	4a29      	ldr	r2, [pc, #164]	@ (80013e0 <Arm_Init+0xd8>)
 800133a:	6013      	str	r3, [r2, #0]
    }

    if (servoIds[1] == -1) {
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <Arm_Init+0xd8>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d10c      	bne.n	8001360 <Arm_Init+0x58>
        servoIds[1] = Servo_Register(11, "Link1", 0.0f, 180.0f, ARM_HOME_LINK1_ANGLE);
 8001346:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 80013ec <Arm_Init+0xe4>
 800134a:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80013e8 <Arm_Init+0xe0>
 800134e:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80013ec <Arm_Init+0xe4>
 8001352:	4928      	ldr	r1, [pc, #160]	@ (80013f4 <Arm_Init+0xec>)
 8001354:	200b      	movs	r0, #11
 8001356:	f002 fbc5 	bl	8003ae4 <Servo_Register>
 800135a:	4603      	mov	r3, r0
 800135c:	4a20      	ldr	r2, [pc, #128]	@ (80013e0 <Arm_Init+0xd8>)
 800135e:	6053      	str	r3, [r2, #4]
    }

    if (servoIds[2] == -1) {
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <Arm_Init+0xd8>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d10c      	bne.n	8001384 <Arm_Init+0x7c>
        servoIds[2] = Servo_Register(13, "Link2", 0.0f, 180.0f, ARM_HOME_LINK2_ANGLE);
 800136a:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80013f8 <Arm_Init+0xf0>
 800136e:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80013e8 <Arm_Init+0xe0>
 8001372:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80013ec <Arm_Init+0xe4>
 8001376:	4921      	ldr	r1, [pc, #132]	@ (80013fc <Arm_Init+0xf4>)
 8001378:	200d      	movs	r0, #13
 800137a:	f002 fbb3 	bl	8003ae4 <Servo_Register>
 800137e:	4603      	mov	r3, r0
 8001380:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <Arm_Init+0xd8>)
 8001382:	6093      	str	r3, [r2, #8]
    }

    if (servoIds[3] == -1) {
 8001384:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <Arm_Init+0xd8>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d10c      	bne.n	80013a8 <Arm_Init+0xa0>
        servoIds[3] = Servo_Register(12, "Link3", 0.0f, 180.0f, ARM_HOME_LINK3_ANGLE);
 800138e:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 8001400 <Arm_Init+0xf8>
 8001392:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80013e8 <Arm_Init+0xe0>
 8001396:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80013ec <Arm_Init+0xe4>
 800139a:	491a      	ldr	r1, [pc, #104]	@ (8001404 <Arm_Init+0xfc>)
 800139c:	200c      	movs	r0, #12
 800139e:	f002 fba1 	bl	8003ae4 <Servo_Register>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <Arm_Init+0xd8>)
 80013a6:	60d3      	str	r3, [r2, #12]
    }

    // Check if all servos were registered successfully
    if (servoIds[0] < 0 || servoIds[1] < 0 || servoIds[2] < 0 || servoIds[3] < 0) {
 80013a8:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <Arm_Init+0xd8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0b      	blt.n	80013c8 <Arm_Init+0xc0>
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <Arm_Init+0xd8>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db07      	blt.n	80013c8 <Arm_Init+0xc0>
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <Arm_Init+0xd8>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db03      	blt.n	80013c8 <Arm_Init+0xc0>
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <Arm_Init+0xd8>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da02      	bge.n	80013ce <Arm_Init+0xc6>
        return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	e003      	b.n	80013d6 <Arm_Init+0xce>
    }

    initialized = 1;
 80013ce:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <Arm_Init+0xd4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
    return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000028c 	.word	0x2000028c
 80013e0:	20000000 	.word	0x20000000
 80013e4:	42b40000 	.word	0x42b40000
 80013e8:	43340000 	.word	0x43340000
 80013ec:	00000000 	.word	0x00000000
 80013f0:	0800d008 	.word	0x0800d008
 80013f4:	0800d010 	.word	0x0800d010
 80013f8:	42c80000 	.word	0x42c80000
 80013fc:	0800d018 	.word	0x0800d018
 8001400:	42aa0000 	.word	0x42aa0000
 8001404:	0800d020 	.word	0x0800d020

08001408 <HAL_GPIO_EXTI_Callback>:

#define TOTAL_SLOTS 5  // Adjust based on the number of ball slots
#define GPIO_ENCODER_PIN GPIO_PIN_3  // Encoder sensor pin

// Interrupt callback function for ball slot counting
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001412:	f003 fd7b 	bl	8004f0c <HAL_GetTick>
 8001416:	4603      	mov	r3, r0
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x48>)
 800141a:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == GPIO_ENCODER_PIN && (currentMillis - previousMillis > 500)) {
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	2b08      	cmp	r3, #8
 8001420:	d112      	bne.n	8001448 <HAL_GPIO_EXTI_Callback+0x40>
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x48>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001430:	d90a      	bls.n	8001448 <HAL_GPIO_EXTI_Callback+0x40>
        ballCount++;
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x50>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x50>)
 800143e:	801a      	strh	r2, [r3, #0]
        previousMillis = currentMillis;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x48>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a03      	ldr	r2, [pc, #12]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001446:	6013      	str	r3, [r2, #0]
    }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000294 	.word	0x20000294
 8001454:	20000290 	.word	0x20000290
 8001458:	20000298 	.word	0x20000298

0800145c <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2120      	movs	r1, #32
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <Buzzer_On+0x14>)
 8001466:	f004 ffb3 	bl	80063d0 <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40020000 	.word	0x40020000

08001474 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2120      	movs	r1, #32
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <Buzzer_Off+0x14>)
 800147e:	f004 ffa7 	bl	80063d0 <HAL_GPIO_WritePin>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020000 	.word	0x40020000

0800148c <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8001494:	f7ff ffe2 	bl	800145c <Buzzer_On>
    HAL_Delay(delay);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f003 fd43 	bl	8004f24 <HAL_Delay>
    Buzzer_Off();
 800149e:	f7ff ffe9 	bl	8001474 <Buzzer_Off>
    HAL_Delay(delay);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f003 fd3e 	bl	8004f24 <HAL_Delay>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 80014b4:	f7ff ffd2 	bl	800145c <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80014b8:	2064      	movs	r0, #100	@ 0x64
 80014ba:	f003 fd33 	bl	8004f24 <HAL_Delay>
    Buzzer_Off();
 80014be:	f7ff ffd9 	bl	8001474 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80014c2:	2064      	movs	r0, #100	@ 0x64
 80014c4:	f003 fd2e 	bl	8004f24 <HAL_Delay>

    Buzzer_On();
 80014c8:	f7ff ffc8 	bl	800145c <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80014cc:	2064      	movs	r0, #100	@ 0x64
 80014ce:	f003 fd29 	bl	8004f24 <HAL_Delay>
    Buzzer_Off();
 80014d2:	f7ff ffcf 	bl	8001474 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80014d6:	2064      	movs	r0, #100	@ 0x64
 80014d8:	f003 fd24 	bl	8004f24 <HAL_Delay>

    Buzzer_On();
 80014dc:	f7ff ffbe 	bl	800145c <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80014e0:	20c8      	movs	r0, #200	@ 0xc8
 80014e2:	f003 fd1f 	bl	8004f24 <HAL_Delay>
    Buzzer_Off();
 80014e6:	f7ff ffc5 	bl	8001474 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80014ea:	2064      	movs	r0, #100	@ 0x64
 80014ec:	f003 fd1a 	bl	8004f24 <HAL_Delay>

    Buzzer_On();
 80014f0:	f7ff ffb4 	bl	800145c <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80014f4:	2064      	movs	r0, #100	@ 0x64
 80014f6:	f003 fd15 	bl	8004f24 <HAL_Delay>
    Buzzer_Off();
 80014fa:	f7ff ffbb 	bl	8001474 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80014fe:	2064      	movs	r0, #100	@ 0x64
 8001500:	f003 fd10 	bl	8004f24 <HAL_Delay>

    Buzzer_On();
 8001504:	f7ff ffaa 	bl	800145c <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001508:	20c8      	movs	r0, #200	@ 0xc8
 800150a:	f003 fd0b 	bl	8004f24 <HAL_Delay>
    Buzzer_Off();
 800150e:	f7ff ffb1 	bl	8001474 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}

08001516 <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <Controller_EnableControllers>:

/**
 * Enable motor controllers.
 */
void Controller_EnableControllers(Controller *controller) {
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2020 	strb.w	r2, [r3, #32]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <Controller_DisableControllers>:

/**
 * Disable motor controllers.
 */
void Controller_DisableControllers(Controller *controller) {
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <Controller_ResetControllers>:

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <Controller_Stop>:

void Controller_Stop(){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 80015ec:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001600 <Controller_Stop+0x18>
 80015f0:	f001 f91e 	bl	8002830 <setMotorLPWM>
	setMotorRPWM(0);
 80015f4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001600 <Controller_Stop+0x18>
 80015f8:	f001 f960 	bl	80028bc <setMotorRPWM>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	00000000 	.word	0x00000000

08001604 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b090      	sub	sp, #64	@ 0x40
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001610:	edc7 0a01 	vstr	s1, [r7, #4]
 8001614:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001624:	4b6c      	ldr	r3, [pc, #432]	@ (80017d8 <UpdateControllers+0x1d4>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ed97 7a02 	vldr	s14, [r7, #8]
 800162e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001632:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 8001636:	f000 fad5 	bl	8001be4 <robot_fwd_change>
 800163a:	eeb0 7a40 	vmov.f32	s14, s0
 800163e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001642:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	ed93 7a00 	vldr	s14, [r3]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001666:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	4b58      	ldr	r3, [pc, #352]	@ (80017dc <UpdateControllers+0x1d8>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001682:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <UpdateControllers+0x1dc>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 8001698:	4b4f      	ldr	r3, [pc, #316]	@ (80017d8 <UpdateControllers+0x1d4>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ed97 7a01 	vldr	s14, [r7, #4]
 80016a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80016aa:	f000 faad 	bl	8001c08 <robot_rot_change>
 80016ae:	eeb0 7a40 	vmov.f32	s14, s0
 80016b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80016b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80016d0:	edd7 7a00 	vldr	s15, [r7]
 80016d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001700:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <UpdateControllers+0x1e0>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170a:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <UpdateControllers+0x1e4>)
 800170c:	edd3 6a00 	vldr	s13, [r3]
 8001710:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001720:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001724:	edd7 7a08 	vldr	s15, [r7, #32]
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001730:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001734:	edd7 7a08 	vldr	s15, [r7, #32]
 8001738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <UpdateControllers+0x1e8>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	edd7 7a01 	vldr	s15, [r7, #4]
 800174a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174e:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <UpdateControllers+0x1ec>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 800175c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001760:	edd7 7a07 	vldr	s15, [r7, #28]
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 800176c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001770:	edd7 7a07 	vldr	s15, [r7, #28]
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001782:	2b00      	cmp	r3, #0
 8001784:	d017      	beq.n	80017b6 <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 8001786:	ed97 0a06 	vldr	s0, [r7, #24]
 800178a:	f000 f833 	bl	80017f4 <leftFeedForward>
 800178e:	eeb0 7a40 	vmov.f32	s14, s0
 8001792:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001796:	ee77 7a87 	vadd.f32	s15, s15, s14
 800179a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 800179e:	ed97 0a05 	vldr	s0, [r7, #20]
 80017a2:	f000 f88d 	bl	80018c0 <rightFeedForward>
 80017a6:	eeb0 7a40 	vmov.f32	s14, s0
 80017aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80017ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80017c0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80017c4:	f001 f834 	bl	8002830 <setMotorLPWM>
        setMotorRPWM(right_output);
 80017c8:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80017cc:	f001 f876 	bl	80028bc <setMotorRPWM>
    }


}
 80017d0:	bf00      	nop
 80017d2:	3740      	adds	r7, #64	@ 0x40
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	0800d040 	.word	0x0800d040
 80017dc:	0800d050 	.word	0x0800d050
 80017e0:	0800d054 	.word	0x0800d054
 80017e4:	0800d058 	.word	0x0800d058
 80017e8:	0800d05c 	.word	0x0800d05c
 80017ec:	0800d030 	.word	0x0800d030
 80017f0:	0800d038 	.word	0x0800d038

080017f4 <leftFeedForward>:


float leftFeedForward(float speed) {
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 80017fe:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <leftFeedForward+0xb8>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ed97 7a01 	vldr	s14, [r7, #4]
 8001808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180c:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001810:	edd7 7a01 	vldr	s15, [r7, #4]
 8001814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	dd09      	ble.n	8001832 <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 800181e:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <leftFeedForward+0xbc>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ed97 7a05 	vldr	s14, [r7, #20]
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001830:	e00f      	b.n	8001852 <leftFeedForward+0x5e>
  } else if (speed < 0) {
 8001832:	edd7 7a01 	vldr	s15, [r7, #4]
 8001836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	d508      	bpl.n	8001852 <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <leftFeedForward+0xbc>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed97 7a05 	vldr	s14, [r7, #20]
 800184a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184e:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <leftFeedForward+0xc0>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ed97 7a01 	vldr	s14, [r7, #4]
 800185c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <leftFeedForward+0xc4>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800186e:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <leftFeedForward+0xc0>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <leftFeedForward+0xc8>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ed97 7a04 	vldr	s14, [r7, #16]
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 8001886:	ed97 7a05 	vldr	s14, [r7, #20]
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	ee07 3a90 	vmov	s15, r3
}
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	0800d044 	.word	0x0800d044
 80018b0:	0800d04c 	.word	0x0800d04c
 80018b4:	2000029c 	.word	0x2000029c
 80018b8:	0800d03c 	.word	0x0800d03c
 80018bc:	0800d048 	.word	0x0800d048

080018c0 <rightFeedForward>:

float rightFeedForward(float speed) {
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 80018ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <rightFeedForward+0xb8>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80018d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d8:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 80018dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	dd09      	ble.n	80018fe <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 80018ea:	4b24      	ldr	r3, [pc, #144]	@ (800197c <rightFeedForward+0xbc>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80018f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f8:	edc7 7a05 	vstr	s15, [r7, #20]
 80018fc:	e00f      	b.n	800191e <rightFeedForward+0x5e>
  } else if (speed < 0) {
 80018fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d508      	bpl.n	800191e <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <rightFeedForward+0xbc>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ed97 7a05 	vldr	s14, [r7, #20]
 8001916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191a:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <rightFeedForward+0xc0>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ed97 7a01 	vldr	s14, [r7, #4]
 8001928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <rightFeedForward+0xc4>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800193a:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <rightFeedForward+0xc0>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <rightFeedForward+0xc8>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ed97 7a04 	vldr	s14, [r7, #16]
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 8001952:	ed97 7a05 	vldr	s14, [r7, #20]
 8001956:	edd7 7a03 	vldr	s15, [r7, #12]
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	ee07 3a90 	vmov	s15, r3
}
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	0800d044 	.word	0x0800d044
 800197c:	0800d04c 	.word	0x0800d04c
 8001980:	2000029c 	.word	0x2000029c
 8001984:	0800d03c 	.word	0x0800d03c
 8001988:	0800d048 	.word	0x0800d048

0800198c <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <Delay_Init+0x38>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10e      	bne.n	80019ba <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <Delay_Init+0x38>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <Delay_Init+0x38>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <Delay_Init+0x3c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <Delay_Init+0x3c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <Delay_Init+0x3c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6013      	str	r3, [r2, #0]
    }
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000edf0 	.word	0xe000edf0
 80019c8:	e0001000 	.word	0xe0001000

080019cc <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <delayMicroseconds+0x38>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	22b4      	movs	r2, #180	@ 0xb4
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80019e4:	bf00      	nop
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <delayMicroseconds+0x38>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f8      	bhi.n	80019e6 <delayMicroseconds+0x1a>
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e0001000 	.word	0xe0001000

08001a08 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	b21b      	sxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <getLeftEncoderCounts+0x14>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	b21b      	sxth	r3, r3
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40010000 	.word	0x40010000

08001a38 <resetEncoders>:

void resetEncoders() {
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <resetEncoders+0x44>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001a42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
	m_robot_distance = 0;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <resetEncoders+0x48>)
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <resetEncoders+0x4c>)
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
	left_delta = 0;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <resetEncoders+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
	right_delta = 0;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <resetEncoders+0x54>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	801a      	strh	r2, [r3, #0]
	previous_left_count = 0;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <resetEncoders+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	801a      	strh	r2, [r3, #0]
	previous_right_count = 0;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <resetEncoders+0x5c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	801a      	strh	r2, [r3, #0]

}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	200002a0 	.word	0x200002a0
 8001a84:	200002a4 	.word	0x200002a4
 8001a88:	200002a8 	.word	0x200002a8
 8001a8c:	200002aa 	.word	0x200002aa
 8001a90:	200002ac 	.word	0x200002ac
 8001a94:	200002ae 	.word	0x200002ae

08001a98 <resetEncodersinSystick>:

void resetEncodersinSystick() {
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <resetEncodersinSystick+0x1c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001aa2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 8001abe:	f7ff ffaf 	bl	8001a20 <getLeftEncoderCounts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 8001ac6:	f7ff ff9f 	bl	8001a08 <getRightEncoderCounts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 8001ace:	89fa      	ldrh	r2, [r7, #14]
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <update_Encoder_Data+0x108>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <update_Encoder_Data+0x10c>)
 8001ae0:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 8001ae2:	4a37      	ldr	r2, [pc, #220]	@ (8001bc0 <update_Encoder_Data+0x108>)
 8001ae4:	89fb      	ldrh	r3, [r7, #14]
 8001ae6:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001ae8:	89ba      	ldrh	r2, [r7, #12]
 8001aea:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <update_Encoder_Data+0x110>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <update_Encoder_Data+0x114>)
 8001afa:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 8001afc:	4a32      	ldr	r2, [pc, #200]	@ (8001bc8 <update_Encoder_Data+0x110>)
 8001afe:	89bb      	ldrh	r3, [r7, #12]
 8001b00:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 8001b02:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <update_Encoder_Data+0x10c>)
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd2b 	bl	8000564 <__aeabi_i2d>
 8001b0e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001bb8 <update_Encoder_Data+0x100>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd90 	bl	8000638 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7ff f862 	bl	8000be8 <__aeabi_d2f>
 8001b24:	4603      	mov	r3, r0
 8001b26:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001b28:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <update_Encoder_Data+0x114>)
 8001b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd18 	bl	8000564 <__aeabi_i2d>
 8001b34:	a320      	add	r3, pc, #128	@ (adr r3, 8001bb8 <update_Encoder_Data+0x100>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fd7d 	bl	8000638 <__aeabi_dmul>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7ff f84f 	bl	8000be8 <__aeabi_d2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 8001b4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <update_Encoder_Data+0x118>)
 8001b64:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <update_Encoder_Data+0x11c>)
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <update_Encoder_Data+0x118>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <update_Encoder_Data+0x11c>)
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 8001b7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <update_Encoder_Data+0x120>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <update_Encoder_Data+0x124>)
 8001b96:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <update_Encoder_Data+0x128>)
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <update_Encoder_Data+0x124>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <update_Encoder_Data+0x128>)
 8001bac:	edc3 7a00 	vstr	s15, [r3]


}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	f76b218d 	.word	0xf76b218d
 8001bbc:	3faf8e12 	.word	0x3faf8e12
 8001bc0:	200002ac 	.word	0x200002ac
 8001bc4:	200002a8 	.word	0x200002a8
 8001bc8:	200002ae 	.word	0x200002ae
 8001bcc:	200002aa 	.word	0x200002aa
 8001bd0:	200002b0 	.word	0x200002b0
 8001bd4:	200002a0 	.word	0x200002a0
 8001bd8:	0800d034 	.word	0x0800d034
 8001bdc:	200002b4 	.word	0x200002b4
 8001be0:	200002a4 	.word	0x200002a4

08001be4 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <robot_fwd_change+0x20>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	607b      	str	r3, [r7, #4]
	return distance;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	ee07 3a90 	vmov	s15, r3
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	200002b0 	.word	0x200002b0

08001c08 <robot_rot_change>:

float robot_rot_change() {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <robot_rot_change+0x20>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	607b      	str	r3, [r7, #4]
	return distance;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	ee07 3a90 	vmov	s15, r3
}
 8001c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	200002b4 	.word	0x200002b4

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c32:	f003 f905 	bl	8004e40 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c36:	f000 f893 	bl	8001d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c3a:	f000 fb75 	bl	8002328 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c3e:	f000 fb53 	bl	80022e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c42:	f000 fad3 	bl	80021ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001c46:	f000 f9ab 	bl	8001fa0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c4a:	f000 fa01 	bl	8002050 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001c4e:	f000 f979 	bl	8001f44 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001c52:	f000 faf5 	bl	8002240 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001c56:	f000 fb1d 	bl	8002294 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001c5a:	f000 f8f3 	bl	8001e44 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c5e:	f000 f943 	bl	8001ee8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001c62:	f000 fa49 	bl	80020f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c66:	213c      	movs	r1, #60	@ 0x3c
 8001c68:	4834      	ldr	r0, [pc, #208]	@ (8001d3c <main+0x110>)
 8001c6a:	f006 feab 	bl	80089c4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001c6e:	213c      	movs	r1, #60	@ 0x3c
 8001c70:	4833      	ldr	r0, [pc, #204]	@ (8001d40 <main+0x114>)
 8001c72:	f006 fea7 	bl	80089c4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c76:	2100      	movs	r1, #0
 8001c78:	4832      	ldr	r0, [pc, #200]	@ (8001d44 <main+0x118>)
 8001c7a:	f006 fd35 	bl	80086e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c7e:	2104      	movs	r1, #4
 8001c80:	4830      	ldr	r0, [pc, #192]	@ (8001d44 <main+0x118>)
 8001c82:	f006 fd31 	bl	80086e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c86:	2108      	movs	r1, #8
 8001c88:	482e      	ldr	r0, [pc, #184]	@ (8001d44 <main+0x118>)
 8001c8a:	f006 fd2d 	bl	80086e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c8e:	210c      	movs	r1, #12
 8001c90:	482c      	ldr	r0, [pc, #176]	@ (8001d44 <main+0x118>)
 8001c92:	f006 fd29 	bl	80086e8 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 8001c96:	f002 fe67 	bl	8004968 <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2340      	movs	r3, #64	@ 0x40
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <main+0x11c>)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f002 ffc7 	bl	8004c3c <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 8001cae:	f002 ff1f 	bl	8004af0 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 8001cb2:	f7ff fbfd 	bl	80014b0 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 8001cb6:	f7ff fe69 	bl	800198c <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();
  // This is the uart for the bluetooth
  //UART_Init(&huart3);
  RPI_UART_Init();
 8001cba:	f7ff f97b 	bl	8000fb4 <RPI_UART_Init>

  /*---------------------Servo--------------------------------*/
  // Initialize servo system
  Servo_Init(50);  // 50Hz frequency for servos
 8001cbe:	2032      	movs	r0, #50	@ 0x32
 8001cc0:	f001 feec 	bl	8003a9c <Servo_Init>

  // Initialize arm controller
  Arm_Init();
 8001cc4:	f7ff fb20 	bl	8001308 <Arm_Init>


  // Or use them by name
  //Servo_SetAngleByName("base", 90);  // Set base to 120 degrees

  HAL_Delay(1000);
 8001cc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ccc:	f003 f92a 	bl	8004f24 <HAL_Delay>
  Controller_Init(&controller);
 8001cd0:	481e      	ldr	r0, [pc, #120]	@ (8001d4c <main+0x120>)
 8001cd2:	f7ff fc20 	bl	8001516 <Controller_Init>
    Profile_Reset(&forward_profile);
 8001cd6:	481e      	ldr	r0, [pc, #120]	@ (8001d50 <main+0x124>)
 8001cd8:	f000 ff60 	bl	8002b9c <Profile_Reset>
    Profile_Reset(&rotation_profile);
 8001cdc:	481d      	ldr	r0, [pc, #116]	@ (8001d54 <main+0x128>)
 8001cde:	f000 ff5d 	bl	8002b9c <Profile_Reset>
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <main+0x128>)
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <main+0x124>)
 8001ce6:	4919      	ldr	r1, [pc, #100]	@ (8001d4c <main+0x120>)
 8001ce8:	481b      	ldr	r0, [pc, #108]	@ (8001d58 <main+0x12c>)
 8001cea:	f000 fbf1 	bl	80024d0 <Motion_Init>
    Controller_ResetControllers(&controller);
 8001cee:	4817      	ldr	r0, [pc, #92]	@ (8001d4c <main+0x120>)
 8001cf0:	f7ff fc5f 	bl	80015b2 <Controller_ResetControllers>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 8001cf4:	2064      	movs	r0, #100	@ 0x64
 8001cf6:	f7ff fbc9 	bl	800148c <Buzzer_Toggle>

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt
  HAL_Delay(2000);
 8001cfa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cfe:	f003 f911 	bl	8004f24 <HAL_Delay>
  RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 8001d02:	2101      	movs	r1, #1
 8001d04:	4815      	ldr	r0, [pc, #84]	@ (8001d5c <main+0x130>)
 8001d06:	f001 f955 	bl	8002fb4 <RAYKHA_Calibrate>
  HAL_Delay(200);
 8001d0a:	20c8      	movs	r0, #200	@ 0xc8
 8001d0c:	f003 f90a 	bl	8004f24 <HAL_Delay>
  Buzzer_Toggle(100);
 8001d10:	2064      	movs	r0, #100	@ 0x64
 8001d12:	f7ff fbbb 	bl	800148c <Buzzer_Toggle>

  //set_steering_mode(STEERING_CENTER_LINE_FOLLOW);

  HAL_Delay(6000);
 8001d16:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001d1a:	f003 f903 	bl	8004f24 <HAL_Delay>
  Buzzer_Toggle(100);
 8001d1e:	2064      	movs	r0, #100	@ 0x64
 8001d20:	f7ff fbb4 	bl	800148c <Buzzer_Toggle>

  HAL_Delay(1000);
 8001d24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d28:	f003 f8fc 	bl	8004f24 <HAL_Delay>

  EnableSysTickFunction();
 8001d2c:	f002 fca8 	bl	8004680 <EnableSysTickFunction>
  runCurrentTask(TASK_PLANTATION);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f002 fde1 	bl	80048f8 <runCurrentTask>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d36:	bf00      	nop
 8001d38:	e7fd      	b.n	8001d36 <main+0x10a>
 8001d3a:	bf00      	nop
 8001d3c:	200003a8 	.word	0x200003a8
 8001d40:	200003f0 	.word	0x200003f0
 8001d44:	20000438 	.word	0x20000438
 8001d48:	0800d0a4 	.word	0x0800d0a4
 8001d4c:	2000069c 	.word	0x2000069c
 8001d50:	20000654 	.word	0x20000654
 8001d54:	20000678 	.word	0x20000678
 8001d58:	200005e8 	.word	0x200005e8
 8001d5c:	200005bc 	.word	0x200005bc

08001d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b094      	sub	sp, #80	@ 0x50
 8001d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	2234      	movs	r2, #52	@ 0x34
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f009 f809 	bl	800ad86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <SystemClock_Config+0xdc>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e3c <SystemClock_Config+0xdc>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d94:	4b29      	ldr	r3, [pc, #164]	@ (8001e3c <SystemClock_Config+0xdc>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <SystemClock_Config+0xe0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a25      	ldr	r2, [pc, #148]	@ (8001e40 <SystemClock_Config+0xe0>)
 8001daa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <SystemClock_Config+0xe0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001dd4:	23b4      	movs	r3, #180	@ 0xb4
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4618      	mov	r0, r3
 8001dea:	f006 f98f 	bl	800810c <HAL_RCC_OscConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001df4:	f000 fb66 	bl	80024c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001df8:	f005 fdee 	bl	80079d8 <HAL_PWREx_EnableOverDrive>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e02:	f000 fb5f 	bl	80024c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e06:	230f      	movs	r3, #15
 8001e08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	2105      	movs	r1, #5
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 fe27 	bl	8007a78 <HAL_RCC_ClockConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e30:	f000 fb48 	bl	80024c4 <Error_Handler>
  }
}
 8001e34:	bf00      	nop
 8001e36:	3750      	adds	r7, #80	@ 0x50
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000

08001e44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e56:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e58:	4a21      	ldr	r2, [pc, #132]	@ (8001ee0 <MX_ADC1_Init+0x9c>)
 8001e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e84:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e86:	4a17      	ldr	r2, [pc, #92]	@ (8001ee4 <MX_ADC1_Init+0xa0>)
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea4:	480d      	ldr	r0, [pc, #52]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001ea6:	f003 f861 	bl	8004f6c <HAL_ADC_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001eb0:	f000 fb08 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001eb4:	230a      	movs	r3, #10
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_ADC1_Init+0x98>)
 8001ec6:	f003 fa33 	bl	8005330 <HAL_ADC_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ed0:	f000 faf8 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200002b8 	.word	0x200002b8
 8001ee0:	40012000 	.word	0x40012000
 8001ee4:	0f000001 	.word	0x0f000001

08001ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001eee:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <MX_I2C1_Init+0x54>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001ef4:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <MX_I2C1_Init+0x58>)
 8001ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001f06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f12:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <MX_I2C1_Init+0x50>)
 8001f26:	f004 fa85 	bl	8006434 <HAL_I2C_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f30:	f000 fac8 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000300 	.word	0x20000300
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	00061a80 	.word	0x00061a80

08001f44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f4a:	4a13      	ldr	r2, [pc, #76]	@ (8001f98 <MX_I2C2_Init+0x54>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f50:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <MX_I2C2_Init+0x58>)
 8001f52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f74:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <MX_I2C2_Init+0x50>)
 8001f82:	f004 fa57 	bl	8006434 <HAL_I2C_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f8c:	f000 fa9a 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000354 	.word	0x20000354
 8001f98:	40005800 	.word	0x40005800
 8001f9c:	000186a0 	.word	0x000186a0

08001fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	@ 0x30
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2224      	movs	r2, #36	@ 0x24
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f008 fee9 	bl	800ad86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fbc:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8001fbe:	4a23      	ldr	r2, [pc, #140]	@ (800204c <MX_TIM1_Init+0xac>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fc2:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8001fd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002000:	2301      	movs	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4619      	mov	r1, r3
 8002012:	480d      	ldr	r0, [pc, #52]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8002014:	f006 fc30 	bl	8008878 <HAL_TIM_Encoder_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800201e:	f000 fa51 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4806      	ldr	r0, [pc, #24]	@ (8002048 <MX_TIM1_Init+0xa8>)
 8002030:	f007 f89a 	bl	8009168 <HAL_TIMEx_MasterConfigSynchronization>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800203a:	f000 fa43 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	3730      	adds	r7, #48	@ 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200003a8 	.word	0x200003a8
 800204c:	40010000 	.word	0x40010000

08002050 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	@ 0x30
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	2224      	movs	r2, #36	@ 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f008 fe91 	bl	800ad86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 800206e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002072:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002074:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002080:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 8002082:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002086:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002094:	2303      	movs	r3, #3
 8002096:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800209c:	2301      	movs	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ac:	2301      	movs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 80020c0:	f006 fbda 	bl	8008878 <HAL_TIM_Encoder_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020ca:	f000 f9fb 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4806      	ldr	r0, [pc, #24]	@ (80020f4 <MX_TIM2_Init+0xa4>)
 80020dc:	f007 f844 	bl	8009168 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020e6:	f000 f9ed 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3730      	adds	r7, #48	@ 0x30
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003f0 	.word	0x200003f0

080020f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800211a:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <MX_TIM3_Init+0xec>)
 800211c:	4a32      	ldr	r2, [pc, #200]	@ (80021e8 <MX_TIM3_Init+0xf0>)
 800211e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002120:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <MX_TIM3_Init+0xec>)
 8002122:	2200      	movs	r2, #0
 8002124:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b2f      	ldr	r3, [pc, #188]	@ (80021e4 <MX_TIM3_Init+0xec>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 800212c:	4b2d      	ldr	r3, [pc, #180]	@ (80021e4 <MX_TIM3_Init+0xec>)
 800212e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002132:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <MX_TIM3_Init+0xec>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <MX_TIM3_Init+0xec>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002140:	4828      	ldr	r0, [pc, #160]	@ (80021e4 <MX_TIM3_Init+0xec>)
 8002142:	f006 fa81 	bl	8008648 <HAL_TIM_PWM_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800214c:	f000 f9ba 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002158:	f107 0320 	add.w	r3, r7, #32
 800215c:	4619      	mov	r1, r3
 800215e:	4821      	ldr	r0, [pc, #132]	@ (80021e4 <MX_TIM3_Init+0xec>)
 8002160:	f007 f802 	bl	8009168 <HAL_TIMEx_MasterConfigSynchronization>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800216a:	f000 f9ab 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216e:	2360      	movs	r3, #96	@ 0x60
 8002170:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	@ (80021e4 <MX_TIM3_Init+0xec>)
 8002186:	f006 fcab 	bl	8008ae0 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002190:	f000 f998 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2204      	movs	r2, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4812      	ldr	r0, [pc, #72]	@ (80021e4 <MX_TIM3_Init+0xec>)
 800219c:	f006 fca0 	bl	8008ae0 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021a6:	f000 f98d 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2208      	movs	r2, #8
 80021ae:	4619      	mov	r1, r3
 80021b0:	480c      	ldr	r0, [pc, #48]	@ (80021e4 <MX_TIM3_Init+0xec>)
 80021b2:	f006 fc95 	bl	8008ae0 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80021bc:	f000 f982 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	220c      	movs	r2, #12
 80021c4:	4619      	mov	r1, r3
 80021c6:	4807      	ldr	r0, [pc, #28]	@ (80021e4 <MX_TIM3_Init+0xec>)
 80021c8:	f006 fc8a 	bl	8008ae0 <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80021d2:	f000 f977 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021d6:	4803      	ldr	r0, [pc, #12]	@ (80021e4 <MX_TIM3_Init+0xec>)
 80021d8:	f001 ff16 	bl	8004008 <HAL_TIM_MspPostInit>

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	@ 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000438 	.word	0x20000438
 80021e8:	40000400 	.word	0x40000400

080021ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <MX_USART2_UART_Init+0x50>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 80021f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002222:	4805      	ldr	r0, [pc, #20]	@ (8002238 <MX_USART2_UART_Init+0x4c>)
 8002224:	f007 f81c 	bl	8009260 <HAL_UART_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800222e:	f000 f949 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000480 	.word	0x20000480
 800223c:	40004400 	.word	0x40004400

08002240 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <MX_USART3_UART_Init+0x50>)
 8002248:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 800224c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002250:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <MX_USART3_UART_Init+0x4c>)
 8002278:	f006 fff2 	bl	8009260 <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002282:	f000 f91f 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200004c8 	.word	0x200004c8
 8002290:	40004800 	.word	0x40004800

08002294 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <MX_USART6_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_USART6_UART_Init+0x4c>)
 80022cc:	f006 ffc8 	bl	8009260 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f000 f8f5 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000510 	.word	0x20000510
 80022e4:	40011400 	.word	0x40011400

080022e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <MX_DMA_Init+0x3c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <MX_DMA_Init+0x3c>)
 80022f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <MX_DMA_Init+0x3c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2039      	movs	r0, #57	@ 0x39
 8002310:	f003 fb17 	bl	8005942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002314:	2039      	movs	r0, #57	@ 0x39
 8002316:	f003 fb30 	bl	800597a <HAL_NVIC_EnableIRQ>

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a5b      	ldr	r2, [pc, #364]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b59      	ldr	r3, [pc, #356]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b55      	ldr	r3, [pc, #340]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a54      	ldr	r2, [pc, #336]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b52      	ldr	r3, [pc, #328]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b4e      	ldr	r3, [pc, #312]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a4d      	ldr	r2, [pc, #308]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a46      	ldr	r2, [pc, #280]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <MX_GPIO_Init+0x18c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2102      	movs	r1, #2
 80023b2:	4841      	ldr	r0, [pc, #260]	@ (80024b8 <MX_GPIO_Init+0x190>)
 80023b4:	f004 f80c 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	2104      	movs	r1, #4
 80023bc:	483e      	ldr	r0, [pc, #248]	@ (80024b8 <MX_GPIO_Init+0x190>)
 80023be:	f004 f807 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2120      	movs	r1, #32
 80023c6:	483d      	ldr	r0, [pc, #244]	@ (80024bc <MX_GPIO_Init+0x194>)
 80023c8:	f004 f802 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80023d2:	483b      	ldr	r0, [pc, #236]	@ (80024c0 <MX_GPIO_Init+0x198>)
 80023d4:	f003 fffc 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4832      	ldr	r0, [pc, #200]	@ (80024b8 <MX_GPIO_Init+0x190>)
 80023f0:	f003 fe5a 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
 80023f4:	2302      	movs	r3, #2
 80023f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002400:	2302      	movs	r3, #2
 8002402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	482b      	ldr	r0, [pc, #172]	@ (80024b8 <MX_GPIO_Init+0x190>)
 800240c:	f003 fe4c 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
 8002410:	2304      	movs	r3, #4
 8002412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002418:	2301      	movs	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4824      	ldr	r0, [pc, #144]	@ (80024b8 <MX_GPIO_Init+0x190>)
 8002428:	f003 fe3e 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800242c:	2308      	movs	r3, #8
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002430:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	481d      	ldr	r0, [pc, #116]	@ (80024b8 <MX_GPIO_Init+0x190>)
 8002442:	f003 fe31 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002446:	2320      	movs	r3, #32
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4817      	ldr	r0, [pc, #92]	@ (80024bc <MX_GPIO_Init+0x194>)
 800245e:	f003 fe23 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8002462:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4811      	ldr	r0, [pc, #68]	@ (80024c0 <MX_GPIO_Init+0x198>)
 800247c:	f003 fe14 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002480:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4808      	ldr	r0, [pc, #32]	@ (80024b8 <MX_GPIO_Init+0x190>)
 8002496:	f003 fe07 	bl	80060a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2009      	movs	r0, #9
 80024a0:	f003 fa4f 	bl	8005942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80024a4:	2009      	movs	r0, #9
 80024a6:	f003 fa68 	bl	800597a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	@ 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400

080024c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <Error_Handler+0x8>

080024d0 <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 80024d0:	b4b0      	push	{r4, r5, r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4614      	mov	r4, r2
 80024e4:	461d      	mov	r5, r3
 80024e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ee:	682b      	ldr	r3, [r5, #0]
 80024f0:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80024fa:	4615      	mov	r5, r2
 80024fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8002510:	4615      	mov	r5, r2
 8002512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	682b      	ldr	r3, [r5, #0]
 800251c:	6023      	str	r3, [r4, #0]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bcb0      	pop	{r4, r5, r7}
 8002526:	4770      	bx	lr

08002528 <Motion_ResetDriveSystem>:

void Motion_ResetDriveSystem(Motion *motion) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	Motion_Stop(motion);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f81b 	bl	800256c <Motion_Stop>
	Motion_DisableDrive(motion);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f822 	bl	8002580 <Motion_DisableDrive>
    resetEncoders();
 800253c:	f7ff fa7c 	bl	8001a38 <resetEncoders>
    Profile_Reset(&(motion->forward));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3324      	adds	r3, #36	@ 0x24
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fb29 	bl	8002b9c <Profile_Reset>
    Profile_Reset(&(motion->rotation));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3348      	adds	r3, #72	@ 0x48
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fb24 	bl	8002b9c <Profile_Reset>
    Controller_ResetControllers(&(motion->controller));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f82b 	bl	80015b2 <Controller_ResetControllers>
    Controller_EnableControllers(&(motion->controller));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f80b 	bl	800157a <Controller_EnableControllers>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <Motion_Stop>:

void Motion_Stop(Motion *motion) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	Controller_Stop();
 8002574:	f7ff f838 	bl	80015e8 <Controller_Stop>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <Motion_DisableDrive>:

void Motion_DisableDrive(Motion *motion) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	Controller_DisableControllers(&(motion->controller));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f803 	bl	8001596 <Controller_DisableControllers>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3324      	adds	r3, #36	@ 0x24
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fbf5 	bl	8002d94 <Profile_GetSpeed>
 80025aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80025ae:	eeb0 0a67 	vmov.f32	s0, s15
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3348      	adds	r3, #72	@ 0x48
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fbe5 	bl	8002d94 <Profile_GetSpeed>
 80025ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80025ce:	eeb0 0a67 	vmov.f32	s0, s15
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <Motion_StartMove>:
float Motion_Alpha(Motion *motion) {
    return Profile_GetAcceleration(&(motion->rotation));
}


void Motion_StartMove(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6178      	str	r0, [r7, #20]
 80025e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80025e4:	edc7 0a03 	vstr	s1, [r7, #12]
 80025e8:	ed87 1a02 	vstr	s2, [r7, #8]
 80025ec:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(&(motion->forward), distance, top_speed, final_speed, acceleration);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3324      	adds	r3, #36	@ 0x24
 80025f4:	edd7 1a01 	vldr	s3, [r7, #4]
 80025f8:	ed97 1a02 	vldr	s2, [r7, #8]
 80025fc:	edd7 0a03 	vldr	s1, [r7, #12]
 8002600:	ed97 0a04 	vldr	s0, [r7, #16]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fae2 	bl	8002bce <Profile_Start>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <Motion_Move>:
uint8_t Motion_MoveFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->forward));
}

// wait untill mition is completed
void Motion_Move(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	6178      	str	r0, [r7, #20]
 800261a:	ed87 0a04 	vstr	s0, [r7, #16]
 800261e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002622:	ed87 1a02 	vstr	s2, [r7, #8]
 8002626:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Move(&(motion->forward), distance, top_speed, final_speed, acceleration);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3324      	adds	r3, #36	@ 0x24
 800262e:	edd7 1a01 	vldr	s3, [r7, #4]
 8002632:	ed97 1a02 	vldr	s2, [r7, #8]
 8002636:	edd7 0a03 	vldr	s1, [r7, #12]
 800263a:	ed97 0a04 	vldr	s0, [r7, #16]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fb50 	bl	8002ce4 <Profile_Move>
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <Motion_Turn>:
uint8_t Motion_TurnFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->rotation));
}

//wait untill motion is finished
void Motion_Turn(Motion *motion, float angle, float omega, float alpha) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	ed87 0a02 	vstr	s0, [r7, #8]
 8002658:	edc7 0a01 	vstr	s1, [r7, #4]
 800265c:	ed87 1a00 	vstr	s2, [r7]
    Profile_Move(&(motion->rotation), angle, omega, 0, alpha);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3348      	adds	r3, #72	@ 0x48
 8002664:	edd7 1a00 	vldr	s3, [r7]
 8002668:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8002684 <Motion_Turn+0x38>
 800266c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002670:	ed97 0a02 	vldr	s0, [r7, #8]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fb35 	bl	8002ce4 <Profile_Move>
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	00000000 	.word	0x00000000

08002688 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3324      	adds	r3, #36	@ 0x24
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fbab 	bl	8002df0 <Profile_Update>
    Profile_Update(&(motion->rotation));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3348      	adds	r3, #72	@ 0x48
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fba6 	bl	8002df0 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <Motion_SpinTurn>:

/**
  *
  * @brief turn in place. Force forward speed to zero
  */
void Motion_SpinTurn(Motion *motion, float angle, float omega, float alpha) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80026b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80026bc:	ed87 1a00 	vstr	s2, [r7]
    Profile_SetTargetSpeed(&(motion->forward), 0);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3324      	adds	r3, #36	@ 0x24
 80026c4:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8002708 <Motion_SpinTurn+0x5c>
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fb81 	bl	8002dd0 <Profile_SetTargetSpeed>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80026ce:	e002      	b.n	80026d6 <Motion_SpinTurn+0x2a>
        HAL_Delay(2);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f002 fc27 	bl	8004f24 <HAL_Delay>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3324      	adds	r3, #36	@ 0x24
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fb5a 	bl	8002d94 <Profile_GetSpeed>
 80026e0:	eef0 7a40 	vmov.f32	s15, s0
 80026e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	d1f0      	bne.n	80026d0 <Motion_SpinTurn+0x24>
    }
    Motion_Turn(motion, angle, omega, alpha);
 80026ee:	ed97 1a00 	vldr	s2, [r7]
 80026f2:	edd7 0a01 	vldr	s1, [r7, #4]
 80026f6:	ed97 0a02 	vldr	s0, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff ffa6 	bl	800264c <Motion_Turn>
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	00000000 	.word	0x00000000

0800270c <Motion_StopAfter>:
   *
   * Calling this with the robot stationary is undefined. Don't do that.
   *
   * @brief bring the robot to a halt after a specific distance
   */
void Motion_StopAfter(Motion *motion, float distance) {
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	ed2d 8b02 	vpush	{d8}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	ed87 0a00 	vstr	s0, [r7]
    Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), 0, Profile_GetAcceleration(&(motion->forward)));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3324      	adds	r3, #36	@ 0x24
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fb34 	bl	8002d94 <Profile_GetSpeed>
 800272c:	eeb0 8a40 	vmov.f32	s16, s0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3324      	adds	r3, #36	@ 0x24
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fb3c 	bl	8002db2 <Profile_GetAcceleration>
 800273a:	eef0 7a40 	vmov.f32	s15, s0
 800273e:	eef0 1a67 	vmov.f32	s3, s15
 8002742:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8002760 <Motion_StopAfter+0x54>
 8002746:	eef0 0a48 	vmov.f32	s1, s16
 800274a:	ed97 0a00 	vldr	s0, [r7]
 800274e:	4620      	mov	r0, r4
 8002750:	f000 fac8 	bl	8002ce4 <Profile_Move>
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	ecbd 8b02 	vpop	{d8}
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	00000000 	.word	0x00000000

08002764 <Motion_SwitchToNextMotionAfter>:

// Test
void Motion_SwitchToNextMotionAfter(Motion *motion, float distance){
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	ed2d 8b02 	vpush	{d8}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	ed87 0a00 	vstr	s0, [r7]
	Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), Profile_GetSpeed(&(motion->forward)), Profile_GetAcceleration(&(motion->forward)));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3324      	adds	r3, #36	@ 0x24
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fb08 	bl	8002d94 <Profile_GetSpeed>
 8002784:	eeb0 8a40 	vmov.f32	s16, s0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3324      	adds	r3, #36	@ 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fb01 	bl	8002d94 <Profile_GetSpeed>
 8002792:	eef0 8a40 	vmov.f32	s17, s0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3324      	adds	r3, #36	@ 0x24
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fb09 	bl	8002db2 <Profile_GetAcceleration>
 80027a0:	eef0 7a40 	vmov.f32	s15, s0
 80027a4:	eef0 1a67 	vmov.f32	s3, s15
 80027a8:	eeb0 1a68 	vmov.f32	s2, s17
 80027ac:	eef0 0a48 	vmov.f32	s1, s16
 80027b0:	ed97 0a00 	vldr	s0, [r7]
 80027b4:	4620      	mov	r0, r4
 80027b6:	f000 fa95 	bl	8002ce4 <Profile_Move>
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	ecbd 8b02 	vpop	{d8}
 80027c4:	bd90      	pop	{r4, r7, pc}
	...

080027c8 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fd fed8 	bl	8000588 <__aeabi_f2d>
 80027d8:	a313      	add	r3, pc, #76	@ (adr r3, 8002828 <limitPWM+0x60>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fe f9bb 	bl	8000b58 <__aeabi_dcmpgt>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <limitPWM+0x24>
		return PWM_MAX;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <limitPWM+0x58>)
 80027ea:	e00d      	b.n	8002808 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fd fecb 	bl	8000588 <__aeabi_f2d>
 80027f2:	a309      	add	r3, pc, #36	@ (adr r3, 8002818 <limitPWM+0x50>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fe f990 	bl	8000b1c <__aeabi_dcmplt>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <limitPWM+0x3e>
		return -PWM_MAX;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <limitPWM+0x5c>)
 8002804:	e000      	b.n	8002808 <limitPWM+0x40>
	return pwm;
 8002806:	687b      	ldr	r3, [r7, #4]
}
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eeb0 0a67 	vmov.f32	s0, s15
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	70a3d70a 	.word	0x70a3d70a
 800281c:	bfef0a3d 	.word	0xbfef0a3d
 8002820:	3f7851ec 	.word	0x3f7851ec
 8002824:	bf7851ec 	.word	0xbf7851ec
 8002828:	70a3d70a 	.word	0x70a3d70a
 800282c:	3fef0a3d 	.word	0x3fef0a3d

08002830 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 800283a:	edd7 7a01 	vldr	s15, [r7, #4]
 800283e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	db13      	blt.n	8002870 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <setMotorLPWM+0x84>)
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800284e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002852:	f7ff ffb9 	bl	80027c8 <limitPWM>
 8002856:	eef0 7a40 	vmov.f32	s15, s0
 800285a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80028b8 <setMotorLPWM+0x88>
 800285e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002862:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <setMotorLPWM+0x84>)
 8002864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002868:	ee17 2a90 	vmov	r2, s15
 800286c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800286e:	e01c      	b.n	80028aa <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002870:	edd7 7a01 	vldr	s15, [r7, #4]
 8002874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	d400      	bmi.n	8002880 <setMotorLPWM+0x50>
}
 800287e:	e014      	b.n	80028aa <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <setMotorLPWM+0x84>)
 8002882:	2200      	movs	r2, #0
 8002884:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002886:	ed97 0a01 	vldr	s0, [r7, #4]
 800288a:	f7ff ff9d 	bl	80027c8 <limitPWM>
 800288e:	eef0 7a40 	vmov.f32	s15, s0
 8002892:	eef1 7a67 	vneg.f32	s15, s15
 8002896:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80028b8 <setMotorLPWM+0x88>
 800289a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <setMotorLPWM+0x84>)
 80028a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a4:	ee17 2a90 	vmov	r2, s15
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40000400 	.word	0x40000400
 80028b8:	45e0f800 	.word	0x45e0f800

080028bc <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 80028c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d2:	db13      	blt.n	80028fc <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <setMotorRPWM+0x84>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80028da:	ed97 0a01 	vldr	s0, [r7, #4]
 80028de:	f7ff ff73 	bl	80027c8 <limitPWM>
 80028e2:	eef0 7a40 	vmov.f32	s15, s0
 80028e6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002944 <setMotorRPWM+0x88>
 80028ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <setMotorRPWM+0x84>)
 80028f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f4:	ee17 2a90 	vmov	r2, s15
 80028f8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80028fa:	e01c      	b.n	8002936 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 80028fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002900:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002908:	d400      	bmi.n	800290c <setMotorRPWM+0x50>
}
 800290a:	e014      	b.n	8002936 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <setMotorRPWM+0x84>)
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002912:	ed97 0a01 	vldr	s0, [r7, #4]
 8002916:	f7ff ff57 	bl	80027c8 <limitPWM>
 800291a:	eef0 7a40 	vmov.f32	s15, s0
 800291e:	eef1 7a67 	vneg.f32	s15, s15
 8002922:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002944 <setMotorRPWM+0x88>
 8002926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <setMotorRPWM+0x84>)
 800292c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002930:	ee17 2a90 	vmov	r2, s15
 8002934:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40000400 	.word	0x40000400
 8002944:	45e0f800 	.word	0x45e0f800

08002948 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af04      	add	r7, sp, #16
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	460b      	mov	r3, r1
 8002954:	71bb      	strb	r3, [r7, #6]
 8002956:	4613      	mov	r3, r2
 8002958:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	b29a      	uxth	r2, r3
 800295e:	230a      	movs	r3, #10
 8002960:	9302      	str	r3, [sp, #8]
 8002962:	2301      	movs	r3, #1
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	f107 030f 	add.w	r3, r7, #15
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2301      	movs	r3, #1
 800296e:	2180      	movs	r1, #128	@ 0x80
 8002970:	4819      	ldr	r0, [pc, #100]	@ (80029d8 <PCA9685_SetBit+0x90>)
 8002972:	f004 f89b 	bl	8006aac <HAL_I2C_Mem_Read>
  if (Value == 0)
 8002976:	797b      	ldrb	r3, [r7, #5]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	2201      	movs	r2, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	b25b      	sxtb	r3, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	b25a      	sxtb	r2, r3
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	b25b      	sxtb	r3, r3
 800298e:	4013      	ands	r3, r2
 8002990:	b25b      	sxtb	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e00a      	b.n	80029ae <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8002998:	79bb      	ldrb	r3, [r7, #6]
 800299a:	2201      	movs	r2, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	b25a      	sxtb	r2, r3
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	230a      	movs	r3, #10
 80029b4:	9302      	str	r3, [sp, #8]
 80029b6:	2301      	movs	r3, #1
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	f107 030f 	add.w	r3, r7, #15
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2301      	movs	r3, #1
 80029c2:	2180      	movs	r1, #128	@ 0x80
 80029c4:	4804      	ldr	r0, [pc, #16]	@ (80029d8 <PCA9685_SetBit+0x90>)
 80029c6:	f003 ff77 	bl	80068b8 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f002 faaa 	bl	8004f24 <HAL_Delay>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000354 	.word	0x20000354

080029dc <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d902      	bls.n	80029f6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80029f0:	2303      	movs	r3, #3
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e00c      	b.n	8002a10 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2b18      	cmp	r3, #24
 80029fa:	d802      	bhi.n	8002a02 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 80029fc:	23ff      	movs	r3, #255	@ 0xff
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e006      	b.n	8002a10 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <PCA9685_SetPWMFrequency+0x74>)
 8002a08:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8002a10:	2201      	movs	r2, #1
 8002a12:	2104      	movs	r1, #4
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff ff97 	bl	8002948 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	9302      	str	r3, [sp, #8]
 8002a1e:	2301      	movs	r3, #1
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	f107 030f 	add.w	r3, r7, #15
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	22fe      	movs	r2, #254	@ 0xfe
 8002a2c:	2180      	movs	r1, #128	@ 0x80
 8002a2e:	4809      	ldr	r0, [pc, #36]	@ (8002a54 <PCA9685_SetPWMFrequency+0x78>)
 8002a30:	f003 ff42 	bl	80068b8 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2104      	movs	r1, #4
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff ff85 	bl	8002948 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2107      	movs	r1, #7
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7ff ff80 	bl	8002948 <PCA9685_SetBit>
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	017d7840 	.word	0x017d7840
 8002a54:	20000354 	.word	0x20000354

08002a58 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ffb9 	bl	80029dc <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7ff ff6a 	bl	8002948 <PCA9685_SetBit>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af04      	add	r7, sp, #16
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
 8002a86:	460b      	mov	r3, r1
 8002a88:	80bb      	strh	r3, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3306      	adds	r3, #6
 8002a96:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8002a98:	88bb      	ldrh	r3, [r7, #4]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 8002a9e:	88bb      	ldrh	r3, [r7, #4]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	230a      	movs	r3, #10
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2301      	movs	r3, #1
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	4803      	ldr	r0, [pc, #12]	@ (8002adc <PCA9685_SetPWM+0x60>)
 8002ad0:	f003 fef2 	bl	80068b8 <HAL_I2C_Mem_Write>
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000354 	.word	0x20000354

08002ae0 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	ed87 0a00 	vstr	s0, [r7]
 8002aec:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 8002aee:	edd7 7a00 	vldr	s15, [r7]
 8002af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afa:	d502      	bpl.n	8002b02 <PCA9685_SetServoAngle+0x22>
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8002b02:	edd7 7a00 	vldr	s15, [r7]
 8002b06:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002b90 <PCA9685_SetServoAngle+0xb0>
 8002b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	dd01      	ble.n	8002b18 <PCA9685_SetServoAngle+0x38>
 8002b14:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <PCA9685_SetServoAngle+0xb4>)
 8002b16:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8002b18:	6838      	ldr	r0, [r7, #0]
 8002b1a:	f7fd fd35 	bl	8000588 <__aeabi_f2d>
 8002b1e:	a318      	add	r3, pc, #96	@ (adr r3, 8002b80 <PCA9685_SetServoAngle+0xa0>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fd88 	bl	8000638 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	4b18      	ldr	r3, [pc, #96]	@ (8002b98 <PCA9685_SetServoAngle+0xb8>)
 8002b36:	f7fd fea9 	bl	800088c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	a311      	add	r3, pc, #68	@ (adr r3, 8002b88 <PCA9685_SetServoAngle+0xa8>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd fbc0 	bl	80002cc <__adddf3>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f848 	bl	8000be8 <__aeabi_d2f>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8002b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b64:	ee17 3a90 	vmov	r3, s15
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff84 	bl	8002a7c <PCA9685_SetPWM>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f3af 8000 	nop.w
 8002b80:	00000000 	.word	0x00000000
 8002b84:	40799800 	.word	0x40799800
 8002b88:	9999999a 	.word	0x9999999a
 8002b8c:	40599999 	.word	0x40599999
 8002b90:	43340000 	.word	0x43340000
 8002b94:	43340000 	.word	0x43340000
 8002b98:	40668000 	.word	0x40668000

08002b9c <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002bce:	b480      	push	{r7}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6178      	str	r0, [r7, #20]
 8002bd6:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bda:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bde:	ed87 1a02 	vstr	s2, [r7, #8]
 8002be2:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 8002be6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	d502      	bpl.n	8002bfa <Profile_Start+0x2c>
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	e000      	b.n	8002bfc <Profile_Start+0x2e>
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 8002c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	d505      	bpl.n	8002c1a <Profile_Start+0x4c>
 8002c0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c12:	eef1 7a67 	vneg.f32	s15, s15
 8002c16:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 8002c1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	d503      	bpl.n	8002c34 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	701a      	strb	r2, [r3, #0]
        return;
 8002c32:	e052      	b.n	8002cda <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 8002c34:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c38:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c44:	dd01      	ble.n	8002c4a <Profile_Start+0x7c>
        final_speed = top_speed;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c6a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8002c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c9c:	eef0 7ae7 	vabs.f32	s15, s15
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	db07      	blt.n	8002cca <Profile_Start+0xfc>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc8:	e001      	b.n	8002cce <Profile_Start+0x100>
 8002cca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
}
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6178      	str	r0, [r7, #20]
 8002cec:	ed87 0a04 	vstr	s0, [r7, #16]
 8002cf0:	edc7 0a03 	vstr	s1, [r7, #12]
 8002cf4:	ed87 1a02 	vstr	s2, [r7, #8]
 8002cf8:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 8002cfc:	edd7 1a01 	vldr	s3, [r7, #4]
 8002d00:	ed97 1a02 	vldr	s2, [r7, #8]
 8002d04:	edd7 0a03 	vldr	s1, [r7, #12]
 8002d08:	ed97 0a04 	vldr	s0, [r7, #16]
 8002d0c:	6978      	ldr	r0, [r7, #20]
 8002d0e:	f7ff ff5e 	bl	8002bce <Profile_Start>
    Profile_WaitUntilFinished(profile);
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f000 f804 	bl	8002d20 <Profile_WaitUntilFinished>
}
 8002d18:	bf00      	nop
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <Profile_WaitUntilFinished>:
    profile->speed = profile->target_speed;
    profile->state = PS_FINISHED;
}

// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 8002d28:	e002      	b.n	8002d30 <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f002 f8fa 	bl	8004f24 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d1f7      	bne.n	8002d2a <Profile_WaitUntilFinished+0xa>
    }
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d70:	eef0 7ae7 	vabs.f32	s15, s15
 8002d74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d82:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002d86:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	ee07 3a90 	vmov	s15, r3
}
 8002da4:	eeb0 0a67 	vmov.f32	s0, s15
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <Profile_GetAcceleration>:

// Get the current acceleration
float Profile_GetAcceleration(const Profile *profile) {
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
    return profile->acceleration;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	ee07 3a90 	vmov	s15, r3
}
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <Profile_SetTargetSpeed>:
void Profile_SetSpeed(Profile *profile, float speed) {
    profile->speed = speed;
}

// Set the target speed
void Profile_SetTargetSpeed(Profile *profile, float speed) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	ed87 0a00 	vstr	s0, [r7]
    profile->target_speed = speed;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80b5 	beq.w	8002f6e <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f78 <Profile_Update+0x188>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e14:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e1e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e28:	eef0 7ae7 	vabs.f32	s15, s15
 8002e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e30:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d128      	bne.n	8002e90 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff80 	bl	8002d44 <Profile_GetBrakingDistance>
 8002e44:	eeb0 7a40 	vmov.f32	s14, s0
 8002e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	d51c      	bpl.n	8002e90 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6a:	d10b      	bne.n	8002e84 <Profile_Update+0x94>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e82:	e002      	b.n	8002e8a <Profile_Update+0x9a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d519      	bpl.n	8002eda <Profile_Update+0xea>
        profile->speed += delta_v;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ece:	dd28      	ble.n	8002f22 <Profile_Update+0x132>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	e023      	b.n	8002f22 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	dd18      	ble.n	8002f22 <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	d503      	bpl.n	8002f22 <Profile_Update+0x132>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <Profile_Update+0x188>)
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d011      	beq.n	8002f70 <Profile_Update+0x180>
 8002f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f50:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	d508      	bpl.n	8002f70 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2203      	movs	r2, #3
 8002f62:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
 8002f6c:	e000      	b.n	8002f70 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002f6e:	bf00      	nop
    }

}
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	0800d040 	.word	0x0800d040

08002f7c <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e00c      	b.n	8002fa4 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	18d4      	adds	r4, r2, r3
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f9a3 	bl	80012e0 <AnalogMux_ReadChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b09      	cmp	r3, #9
 8002fa8:	d9ef      	bls.n	8002f8a <RAYKHA_ReadRaw+0xe>
    }
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}

08002fb4 <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]

		uint16_t sensor_values[RAYKHA_NUM_SENSORS];

		// Initialize calibration data
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fc6:	e013      	b.n	8002ff0 <RAYKHA_Calibrate+0x3c>
		{
			calibration->min_values[i] = 0xFFFF;  // Max possible value
 8002fc8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002fd2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			calibration->max_values[i] = 0;       // Min possible value
 8002fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fea:	3301      	adds	r3, #1
 8002fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ff4:	2b09      	cmp	r3, #9
 8002ff6:	d9e7      	bls.n	8002fc8 <RAYKHA_Calibrate+0x14>
		}

		calibration->line_type = line_type;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    	for(uint8_t i = 0; i < 100; i++){
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003006:	e0ad      	b.n	8003164 <RAYKHA_Calibrate+0x1b0>
    		// Take multiple samples for more accurate calibration
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8003008:	2300      	movs	r3, #0
 800300a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800300e:	e053      	b.n	80030b8 <RAYKHA_Calibrate+0x104>
			{
				// Read raw sensor values
				RAYKHA_ReadRaw(sensor_values);
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ffb1 	bl	8002f7c <RAYKHA_ReadRaw>

				// Update min and max values
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8003020:	e03e      	b.n	80030a0 <RAYKHA_Calibrate+0xec>
				{
					if (sensor_values[i] < calibration->min_values[i])
 8003022:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	3328      	adds	r3, #40	@ 0x28
 800302a:	443b      	add	r3, r7
 800302c:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8003030:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800303a:	429a      	cmp	r2, r3
 800303c:	d20b      	bcs.n	8003056 <RAYKHA_Calibrate+0xa2>
					{
						calibration->min_values[i] = sensor_values[i];
 800303e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003042:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	3328      	adds	r3, #40	@ 0x28
 800304a:	443b      	add	r3, r7
 800304c:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					}
					if (sensor_values[i] > calibration->max_values[i])
 8003056:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	3328      	adds	r3, #40	@ 0x28
 800305e:	443b      	add	r3, r7
 8003060:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8003064:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	3308      	adds	r3, #8
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	440b      	add	r3, r1
 8003070:	889b      	ldrh	r3, [r3, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90f      	bls.n	8003096 <RAYKHA_Calibrate+0xe2>
					{
						calibration->max_values[i] = sensor_values[i];
 8003076:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800307a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	3328      	adds	r3, #40	@ 0x28
 8003082:	443b      	add	r3, r7
 8003084:	f833 0c1c 	ldrh.w	r0, [r3, #-28]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	f101 0308 	add.w	r3, r1, #8
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	4602      	mov	r2, r0
 8003094:	809a      	strh	r2, [r3, #4]
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003096:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800309a:	3301      	adds	r3, #1
 800309c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80030a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d9bc      	bls.n	8003022 <RAYKHA_Calibrate+0x6e>
					}
				}

				// Short delay between samples
				HAL_Delay(10);
 80030a8:	200a      	movs	r0, #10
 80030aa:	f001 ff3b 	bl	8004f24 <HAL_Delay>
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 80030ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030b2:	3301      	adds	r3, #1
 80030b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80030b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030bc:	2b09      	cmp	r3, #9
 80030be:	d9a7      	bls.n	8003010 <RAYKHA_Calibrate+0x5c>
			}

			// Add small margins to avoid edge cases
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e044      	b.n	8003152 <RAYKHA_Calibrate+0x19e>
			{
				if (calibration->min_values[i] > 20)
 80030c8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030d2:	2b14      	cmp	r3, #20
 80030d4:	d90c      	bls.n	80030f0 <RAYKHA_Calibrate+0x13c>
					calibration->min_values[i] -= 20;
 80030d6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030e0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030e4:	3b14      	subs	r3, #20
 80030e6:	b299      	uxth	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80030ee:	e005      	b.n	80030fc <RAYKHA_Calibrate+0x148>
				else
					calibration->min_values[i] = 0;
 80030f0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2100      	movs	r1, #0
 80030f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if (calibration->max_values[i] < 4075)
 80030fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	3308      	adds	r3, #8
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	889b      	ldrh	r3, [r3, #4]
 800310a:	f640 72ea 	movw	r2, #4074	@ 0xfea
 800310e:	4293      	cmp	r3, r2
 8003110:	d811      	bhi.n	8003136 <RAYKHA_Calibrate+0x182>
					calibration->max_values[i] += 20;
 8003112:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	3308      	adds	r3, #8
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	889a      	ldrh	r2, [r3, #4]
 8003120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003124:	3214      	adds	r2, #20
 8003126:	b291      	uxth	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	3308      	adds	r3, #8
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	460a      	mov	r2, r1
 8003132:	809a      	strh	r2, [r3, #4]
 8003134:	e008      	b.n	8003148 <RAYKHA_Calibrate+0x194>
				else
					calibration->max_values[i] = 4095;
 8003136:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	3308      	adds	r3, #8
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003146:	809a      	strh	r2, [r3, #4]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800314c:	3301      	adds	r3, #1
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003156:	2b09      	cmp	r3, #9
 8003158:	d9b6      	bls.n	80030c8 <RAYKHA_Calibrate+0x114>
    	for(uint8_t i = 0; i < 100; i++){
 800315a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800315e:	3301      	adds	r3, #1
 8003160:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003164:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003168:	2b63      	cmp	r3, #99	@ 0x63
 800316a:	f67f af4d 	bls.w	8003008 <RAYKHA_Calibrate+0x54>
			}
    	}

}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	3728      	adds	r7, #40	@ 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b08a      	sub	sp, #40	@ 0x28
 800317c:	af02      	add	r7, sp, #8
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fef8 	bl	8002f7c <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e05a      	b.n	8003248 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	3320      	adds	r3, #32
 8003198:	443b      	add	r3, r7
 800319a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800319e:	7ff9      	ldrb	r1, [r7, #31]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d206      	bcs.n	80031b8 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 80031aa:	7ffb      	ldrb	r3, [r7, #31]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	2200      	movs	r2, #0
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	e044      	b.n	8003242 <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 80031b8:	7ffb      	ldrb	r3, [r7, #31]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	3320      	adds	r3, #32
 80031be:	443b      	add	r3, r7
 80031c0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	6839      	ldr	r1, [r7, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	440b      	add	r3, r1
 80031ce:	889b      	ldrh	r3, [r3, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d907      	bls.n	80031e4 <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 80031d4:	7ffb      	ldrb	r3, [r7, #31]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	e02e      	b.n	8003242 <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 80031e4:	7ffb      	ldrb	r3, [r7, #31]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	3320      	adds	r3, #32
 80031ea:	443b      	add	r3, r7
 80031ec:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 80031f0:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 80031f8:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8003204:	7ffb      	ldrb	r3, [r7, #31]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	18d4      	adds	r4, r2, r3
 800320c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2300      	movs	r3, #0
 8003214:	462a      	mov	r2, r5
 8003216:	f000 f879 	bl	800330c <map_range>
 800321a:	4603      	mov	r3, r0
 800321c:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8003228:	7ffb      	ldrb	r3, [r7, #31]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	440b      	add	r3, r1
 800323a:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 800323e:	b292      	uxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003242:	7ffb      	ldrb	r3, [r7, #31]
 8003244:	3301      	adds	r3, #1
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	7ffb      	ldrb	r3, [r7, #31]
 800324a:	2b09      	cmp	r3, #9
 800324c:	d9a1      	bls.n	8003192 <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bdb0      	pop	{r4, r5, r7, pc}

08003258 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800326e:	2300      	movs	r3, #0
 8003270:	73bb      	strb	r3, [r7, #14]
 8003272:	e01c      	b.n	80032ae <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8003274:	7bbb      	ldrb	r3, [r7, #14]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8003280:	89bb      	ldrh	r3, [r7, #12]
 8003282:	2bc8      	cmp	r3, #200	@ 0xc8
 8003284:	d901      	bls.n	800328a <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 800328a:	89bb      	ldrh	r3, [r7, #12]
 800328c:	7bba      	ldrb	r2, [r7, #14]
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4413      	add	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
        sum += value;
 80032a0:	89bb      	ldrh	r3, [r7, #12]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	3301      	adds	r3, #1
 80032ac:	73bb      	strb	r3, [r7, #14]
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	d9df      	bls.n	8003274 <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <RAYKHA_GetLinePosition+0x68>
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b63      	cmp	r3, #99	@ 0x63
 80032be:	d802      	bhi.n	80032c6 <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e003      	b.n	80032ce <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffb6 	bl	8003258 <RAYKHA_GetLinePosition>
 80032ec:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d102      	bne.n	80032fc <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 80032f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80032fa:	e003      	b.n	8003304 <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8003302:	3b14      	subs	r3, #20
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 800330c:	b490      	push	{r4, r7}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4623      	mov	r3, r4
 800331c:	80fb      	strh	r3, [r7, #6]
 800331e:	4603      	mov	r3, r0
 8003320:	80bb      	strh	r3, [r7, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	807b      	strh	r3, [r7, #2]
 8003326:	4613      	mov	r3, r2
 8003328:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	88bb      	ldrh	r3, [r7, #4]
 800332e:	429a      	cmp	r2, r3
 8003330:	d801      	bhi.n	8003336 <map_range+0x2a>
 8003332:	883b      	ldrh	r3, [r7, #0]
 8003334:	e01d      	b.n	8003372 <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	88bb      	ldrh	r3, [r7, #4]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	8b39      	ldrh	r1, [r7, #24]
 800333e:	883a      	ldrh	r2, [r7, #0]
 8003340:	1a8a      	subs	r2, r1, r2
 8003342:	fb03 f202 	mul.w	r2, r3, r2
 8003346:	8879      	ldrh	r1, [r7, #2]
 8003348:	88bb      	ldrh	r3, [r7, #4]
 800334a:	1acb      	subs	r3, r1, r3
 800334c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003350:	883b      	ldrh	r3, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 8003356:	883b      	ldrh	r3, [r7, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	429a      	cmp	r2, r3
 800335c:	da01      	bge.n	8003362 <map_range+0x56>
 800335e:	883b      	ldrh	r3, [r7, #0]
 8003360:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 8003362:	8b3b      	ldrh	r3, [r7, #24]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	429a      	cmp	r2, r3
 8003368:	dd01      	ble.n	800336e <map_range+0x62>
 800336a:	8b3b      	ldrh	r3, [r7, #24]
 800336c:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	b29b      	uxth	r3, r3
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bc90      	pop	{r4, r7}
 800337a:	4770      	bx	lr

0800337c <HandleLineDetection>:

/**
 * @brief Handle line detection data from Raspberry Pi
 * @param data Line detection data
 */
void HandleLineDetection(uint8_t *data) {
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Extract line position and orientation */
  int8_t linePosition = (int8_t)data[0]; // Negative = left, Positive = right, 0 = center
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	73fb      	strb	r3, [r7, #15]
  uint8_t lineAngle = data[1];           // Line angle in degrees
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	73bb      	strb	r3, [r7, #14]
    //TurnRight();
  } else {
    /* Go straight */
    //MoveForward();
  }
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HandleGridPosition>:

/**
 * @brief Handle grid position data from Raspberry Pi
 * @param data Grid position data
 */
void HandleGridPosition(uint8_t *data) {
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Extract grid coordinates */
  uint8_t gridX = data[0];
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	73fb      	strb	r3, [r7, #15]
  uint8_t gridY = data[1];
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	73bb      	strb	r3, [r7, #14]
  uint8_t orientation = data[2]; // 0=N, 1=E, 2=S, 3=W
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	789b      	ldrb	r3, [r3, #2]
 80033b4:	737b      	strb	r3, [r7, #13]

  /* Use grid position for navigation */
  //NavigateGrid(gridX, gridY, orientation);
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HandleColorDetection>:

/**
 * @brief Handle color detection data from Raspberry Pi
 * @param data Color detection data
 */
void HandleColorDetection(uint8_t *data) {
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Extract color information */
  uint8_t colorId = data[0]; // 0=Unknown, 1=Red, 2=Green, 3=Blue, etc.
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	73fb      	strb	r3, [r7, #15]

  /* React based on color */
  switch (colorId) {
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HandleColorDetection+0x1a>
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d004      	beq.n	80033e6 <HandleColorDetection+0x22>
    case 2: /* Green */
      color = GREEN;
      break;
    default:
      /* Unknown color */
      break;
 80033dc:	e007      	b.n	80033ee <HandleColorDetection+0x2a>
      color = WHITE;
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HandleColorDetection+0x38>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
      break;
 80033e4:	e003      	b.n	80033ee <HandleColorDetection+0x2a>
      color = GREEN;
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HandleColorDetection+0x38>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
      break;
 80033ec:	bf00      	nop
  }
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	200006c0 	.word	0x200006c0

08003400 <RPI_GetLineColor>:
	  break;
}
}

//-----------------------------------------------------------------------------------
LineColor RPI_GetLineColor(){
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
	return color;
 8003404:	4b03      	ldr	r3, [pc, #12]	@ (8003414 <RPI_GetLineColor+0x14>)
 8003406:	781b      	ldrb	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	200006c0 	.word	0x200006c0

08003418 <RPI_GetBallColor>:
//	return WHITE;
//}



BallColor RPI_GetBallColor(uint8_t column, uint8_t row){
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	460a      	mov	r2, r1
 8003422:	71fb      	strb	r3, [r7, #7]
 8003424:	4613      	mov	r3, r2
 8003426:	71bb      	strb	r3, [r7, #6]
	// Need seperate code to handle color detection
	// use this to acces a global vairable

	if(column == 0 && row == 0){
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <RPI_GetBallColor+0x20>
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <RPI_GetBallColor+0x20>
		return WHITE_BALL;
 8003434:	2300      	movs	r3, #0
 8003436:	e020      	b.n	800347a <RPI_GetBallColor+0x62>
	}
	if(column == 1 && row == 1){
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d104      	bne.n	8003448 <RPI_GetBallColor+0x30>
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <RPI_GetBallColor+0x30>
		return YELLOW_BALL;
 8003444:	2301      	movs	r3, #1
 8003446:	e018      	b.n	800347a <RPI_GetBallColor+0x62>
	}
	if(column == 2 && row == 2){
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d104      	bne.n	8003458 <RPI_GetBallColor+0x40>
 800344e:	79bb      	ldrb	r3, [r7, #6]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d101      	bne.n	8003458 <RPI_GetBallColor+0x40>
		return YELLOW_BALL;
 8003454:	2301      	movs	r3, #1
 8003456:	e010      	b.n	800347a <RPI_GetBallColor+0x62>
	}
	if(column == 3 && row == 0){
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d104      	bne.n	8003468 <RPI_GetBallColor+0x50>
 800345e:	79bb      	ldrb	r3, [r7, #6]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <RPI_GetBallColor+0x50>
		return WHITE_BALL;
 8003464:	2300      	movs	r3, #0
 8003466:	e008      	b.n	800347a <RPI_GetBallColor+0x62>
	}
	if(column == 4 && row == 1){
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	2b04      	cmp	r3, #4
 800346c:	d104      	bne.n	8003478 <RPI_GetBallColor+0x60>
 800346e:	79bb      	ldrb	r3, [r7, #6]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <RPI_GetBallColor+0x60>
		return WHITE_BALL;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <RPI_GetBallColor+0x62>
	}
	return WHITE_BALL;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <Robot_LineFollowUntillJunction>:




//------------------------------------------------------------------------------//
JunctionType Robot_LineFollowUntillJunction(){
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 800348c:	2006      	movs	r0, #6
 800348e:	f000 fa4f 	bl	8003930 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 8003492:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <Robot_LineFollowUntillJunction+0x74>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349e:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <Robot_LineFollowUntillJunction+0x74>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	ee07 3a10 	vmov	s14, r3
 80034a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034aa:	4b15      	ldr	r3, [pc, #84]	@ (8003500 <Robot_LineFollowUntillJunction+0x78>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	ee06 3a90 	vmov	s13, r3
 80034b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80034b6:	eef0 1a66 	vmov.f32	s3, s13
 80034ba:	eeb0 1a47 	vmov.f32	s2, s14
 80034be:	eef0 0a67 	vmov.f32	s1, s15
 80034c2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003504 <Robot_LineFollowUntillJunction+0x7c>
 80034c6:	4810      	ldr	r0, [pc, #64]	@ (8003508 <Robot_LineFollowUntillJunction+0x80>)
 80034c8:	f7ff f886 	bl	80025d8 <Motion_StartMove>
	junction = STRAIGHT_LINE;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <Robot_LineFollowUntillJunction+0x84>)
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 80034d2:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <Robot_LineFollowUntillJunction+0x84>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d100      	bne.n	80034dc <Robot_LineFollowUntillJunction+0x54>
 80034da:	e7fa      	b.n	80034d2 <Robot_LineFollowUntillJunction+0x4a>
			break;
 80034dc:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80034de:	2003      	movs	r0, #3
 80034e0:	f000 fa26 	bl	8003930 <set_steering_mode>
	Motion_StopAfter(&motion, 55);
 80034e4:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003510 <Robot_LineFollowUntillJunction+0x88>
 80034e8:	4807      	ldr	r0, [pc, #28]	@ (8003508 <Robot_LineFollowUntillJunction+0x80>)
 80034ea:	f7ff f90f 	bl	800270c <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 80034ee:	4806      	ldr	r0, [pc, #24]	@ (8003508 <Robot_LineFollowUntillJunction+0x80>)
 80034f0:	f7ff f81a 	bl	8002528 <Motion_ResetDriveSystem>
	return junction;
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <Robot_LineFollowUntillJunction+0x84>)
 80034f6:	781b      	ldrb	r3, [r3, #0]

}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	0800d06c 	.word	0x0800d06c
 8003500:	0800d070 	.word	0x0800d070
 8003504:	44bb8000 	.word	0x44bb8000
 8003508:	200005e8 	.word	0x200005e8
 800350c:	20000710 	.word	0x20000710
 8003510:	425c0000 	.word	0x425c0000

08003514 <Robot_LineFollowUntillJunctionAndNotStop>:
JunctionType Robot_LineFollowUntillJunctionAndNotStop(){
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 8003518:	2006      	movs	r0, #6
 800351a:	f000 fa09 	bl	8003930 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352a:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	ee07 3a10 	vmov	s14, r3
 8003532:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003536:	4b14      	ldr	r3, [pc, #80]	@ (8003588 <Robot_LineFollowUntillJunctionAndNotStop+0x74>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	ee06 3a90 	vmov	s13, r3
 800353e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003542:	eef0 1a66 	vmov.f32	s3, s13
 8003546:	eeb0 1a47 	vmov.f32	s2, s14
 800354a:	eef0 0a67 	vmov.f32	s1, s15
 800354e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800358c <Robot_LineFollowUntillJunctionAndNotStop+0x78>
 8003552:	480f      	ldr	r0, [pc, #60]	@ (8003590 <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 8003554:	f7ff f840 	bl	80025d8 <Motion_StartMove>
	junction = STRAIGHT_LINE;
 8003558:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 800355a:	2204      	movs	r2, #4
 800355c:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 800355e:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b04      	cmp	r3, #4
 8003564:	d100      	bne.n	8003568 <Robot_LineFollowUntillJunctionAndNotStop+0x54>
 8003566:	e7fa      	b.n	800355e <Robot_LineFollowUntillJunctionAndNotStop+0x4a>
			break;
 8003568:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 800356a:	2003      	movs	r0, #3
 800356c:	f000 f9e0 	bl	8003930 <set_steering_mode>
	//Motion_StopAfter(&motion, 45);
	Motion_SwitchToNextMotionAfter(&motion, 45);
 8003570:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8003598 <Robot_LineFollowUntillJunctionAndNotStop+0x84>
 8003574:	4806      	ldr	r0, [pc, #24]	@ (8003590 <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 8003576:	f7ff f8f5 	bl	8002764 <Motion_SwitchToNextMotionAfter>

	//Motion_ResetDriveSystem(&motion);
	return junction;
 800357a:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 800357c:	781b      	ldrb	r3, [r3, #0]

}
 800357e:	4618      	mov	r0, r3
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	0800d06c 	.word	0x0800d06c
 8003588:	0800d070 	.word	0x0800d070
 800358c:	44bb8000 	.word	0x44bb8000
 8003590:	200005e8 	.word	0x200005e8
 8003594:	20000710 	.word	0x20000710
 8003598:	42340000 	.word	0x42340000

0800359c <Robot_FollowLineGivenDistance>:


void Robot_FollowLineGivenDistance(int distnace){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80035a4:	2006      	movs	r0, #6
 80035a6:	f000 f9c3 	bl	8003930 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, 0    , FORWARD_ACCELERATION_1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b4:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <Robot_FollowLineGivenDistance+0x5c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	ee07 3a10 	vmov	s14, r3
 80035bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035c0:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <Robot_FollowLineGivenDistance+0x60>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	ee06 3a90 	vmov	s13, r3
 80035c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80035cc:	eef0 1a66 	vmov.f32	s3, s13
 80035d0:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8003600 <Robot_FollowLineGivenDistance+0x64>
 80035d4:	eef0 0a47 	vmov.f32	s1, s14
 80035d8:	eeb0 0a67 	vmov.f32	s0, s15
 80035dc:	4809      	ldr	r0, [pc, #36]	@ (8003604 <Robot_FollowLineGivenDistance+0x68>)
 80035de:	f7ff f818 	bl	8002612 <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	set_steering_mode(STEERING_OFF);
 80035e2:	2003      	movs	r0, #3
 80035e4:	f000 f9a4 	bl	8003930 <set_steering_mode>
	Motion_ResetDriveSystem(&motion);
 80035e8:	4806      	ldr	r0, [pc, #24]	@ (8003604 <Robot_FollowLineGivenDistance+0x68>)
 80035ea:	f7fe ff9d 	bl	8002528 <Motion_ResetDriveSystem>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	0800d074 	.word	0x0800d074
 80035fc:	0800d078 	.word	0x0800d078
 8003600:	00000000 	.word	0x00000000
 8003604:	200005e8 	.word	0x200005e8

08003608 <Robot_FollowLineGivenDistanceandNotStop>:

void Robot_FollowLineGivenDistanceandNotStop(int distnace){
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 8003610:	2006      	movs	r0, #6
 8003612:	f000 f98d 	bl	8003930 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, FORWARD_SPEED_1    , FORWARD_ACCELERATION_1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003620:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	ee07 3a10 	vmov	s14, r3
 8003628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800362c:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	ee06 3a90 	vmov	s13, r3
 8003634:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <Robot_FollowLineGivenDistanceandNotStop+0x60>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	ee06 3a10 	vmov	s12, r3
 8003640:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003644:	eef0 1a46 	vmov.f32	s3, s12
 8003648:	eeb0 1a66 	vmov.f32	s2, s13
 800364c:	eef0 0a47 	vmov.f32	s1, s14
 8003650:	eeb0 0a67 	vmov.f32	s0, s15
 8003654:	4805      	ldr	r0, [pc, #20]	@ (800366c <Robot_FollowLineGivenDistanceandNotStop+0x64>)
 8003656:	f7fe ffdc 	bl	8002612 <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	//set_steering_mode(STEERING_OFF);
	//Motion_ResetDriveSystem(&motion);
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	0800d074 	.word	0x0800d074
 8003668:	0800d078 	.word	0x0800d078
 800366c:	200005e8 	.word	0x200005e8

08003670 <Robot_MoveForwardUntillLine>:

JunctionType Robot_MoveForwardUntillLine(){
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_OFF_READLINE);
 8003674:	2004      	movs	r0, #4
 8003676:	f000 f95b 	bl	8003930 <set_steering_mode>
	Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, FORWARD_SPEED_1, FORWARD_ACCELERATION_1);
 800367a:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <Robot_MoveForwardUntillLine+0x74>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003686:	4b17      	ldr	r3, [pc, #92]	@ (80036e4 <Robot_MoveForwardUntillLine+0x74>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	ee07 3a10 	vmov	s14, r3
 800368e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003692:	4b15      	ldr	r3, [pc, #84]	@ (80036e8 <Robot_MoveForwardUntillLine+0x78>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	ee06 3a90 	vmov	s13, r3
 800369a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800369e:	eef0 1a66 	vmov.f32	s3, s13
 80036a2:	eeb0 1a47 	vmov.f32	s2, s14
 80036a6:	eef0 0a67 	vmov.f32	s1, s15
 80036aa:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80036ec <Robot_MoveForwardUntillLine+0x7c>
 80036ae:	4810      	ldr	r0, [pc, #64]	@ (80036f0 <Robot_MoveForwardUntillLine+0x80>)
 80036b0:	f7fe ff92 	bl	80025d8 <Motion_StartMove>
	junction = NO_LINE;
 80036b4:	4b0f      	ldr	r3, [pc, #60]	@ (80036f4 <Robot_MoveForwardUntillLine+0x84>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != NO_LINE){
 80036ba:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <Robot_MoveForwardUntillLine+0x84>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d100      	bne.n	80036c4 <Robot_MoveForwardUntillLine+0x54>
 80036c2:	e7fa      	b.n	80036ba <Robot_MoveForwardUntillLine+0x4a>
			break;
 80036c4:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80036c6:	2003      	movs	r0, #3
 80036c8:	f000 f932 	bl	8003930 <set_steering_mode>
	Motion_StopAfter(&motion, 60);
 80036cc:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80036f8 <Robot_MoveForwardUntillLine+0x88>
 80036d0:	4807      	ldr	r0, [pc, #28]	@ (80036f0 <Robot_MoveForwardUntillLine+0x80>)
 80036d2:	f7ff f81b 	bl	800270c <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 80036d6:	4806      	ldr	r0, [pc, #24]	@ (80036f0 <Robot_MoveForwardUntillLine+0x80>)
 80036d8:	f7fe ff26 	bl	8002528 <Motion_ResetDriveSystem>
	return junction;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <Robot_MoveForwardUntillLine+0x84>)
 80036de:	781b      	ldrb	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	0800d074 	.word	0x0800d074
 80036e8:	0800d078 	.word	0x0800d078
 80036ec:	44bb8000 	.word	0x44bb8000
 80036f0:	200005e8 	.word	0x200005e8
 80036f4:	20000710 	.word	0x20000710
 80036f8:	42700000 	.word	0x42700000

080036fc <Robot_TurnRight90Inplace>:
	set_steering_mode(STEERING_OFF);
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, FORWARD_SPEED_1, FORWARD_ACCELERATION_1);
	Motion_ResetDriveSystem(&motion);
}

void Robot_TurnRight90Inplace(){
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003700:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <Robot_TurnRight90Inplace+0x4c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fc0d 	bl	8004f24 <HAL_Delay>
	Motion_SpinTurn(&motion, -90, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <Robot_TurnRight90Inplace+0x50>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003716:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <Robot_TurnRight90Inplace+0x54>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	ee07 3a10 	vmov	s14, r3
 800371e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003722:	eeb0 1a47 	vmov.f32	s2, s14
 8003726:	eef0 0a67 	vmov.f32	s1, s15
 800372a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003754 <Robot_TurnRight90Inplace+0x58>
 800372e:	480a      	ldr	r0, [pc, #40]	@ (8003758 <Robot_TurnRight90Inplace+0x5c>)
 8003730:	f7fe ffbc 	bl	80026ac <Motion_SpinTurn>

	HAL_Delay(MOTION_DELAY);
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <Robot_TurnRight90Inplace+0x4c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fbf3 	bl	8004f24 <HAL_Delay>
	Motion_ResetDriveSystem(&motion);
 800373e:	4806      	ldr	r0, [pc, #24]	@ (8003758 <Robot_TurnRight90Inplace+0x5c>)
 8003740:	f7fe fef2 	bl	8002528 <Motion_ResetDriveSystem>
}
 8003744:	bf00      	nop
 8003746:	bd80      	pop	{r7, pc}
 8003748:	0800d084 	.word	0x0800d084
 800374c:	0800d07c 	.word	0x0800d07c
 8003750:	0800d080 	.word	0x0800d080
 8003754:	c2b40000 	.word	0xc2b40000
 8003758:	200005e8 	.word	0x200005e8

0800375c <Robot_TurnLeft90Inplace>:

void Robot_TurnLeft90Inplace(){
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <Robot_TurnLeft90Inplace+0x4c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f001 fbdd 	bl	8004f24 <HAL_Delay>
	Motion_SpinTurn(&motion, 85, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <Robot_TurnLeft90Inplace+0x50>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003776:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <Robot_TurnLeft90Inplace+0x54>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	ee07 3a10 	vmov	s14, r3
 800377e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003782:	eeb0 1a47 	vmov.f32	s2, s14
 8003786:	eef0 0a67 	vmov.f32	s1, s15
 800378a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80037b4 <Robot_TurnLeft90Inplace+0x58>
 800378e:	480a      	ldr	r0, [pc, #40]	@ (80037b8 <Robot_TurnLeft90Inplace+0x5c>)
 8003790:	f7fe ff8c 	bl	80026ac <Motion_SpinTurn>

	HAL_Delay(MOTION_DELAY);
 8003794:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <Robot_TurnLeft90Inplace+0x4c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fbc3 	bl	8004f24 <HAL_Delay>
	Motion_ResetDriveSystem(&motion);
 800379e:	4806      	ldr	r0, [pc, #24]	@ (80037b8 <Robot_TurnLeft90Inplace+0x5c>)
 80037a0:	f7fe fec2 	bl	8002528 <Motion_ResetDriveSystem>
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	0800d084 	.word	0x0800d084
 80037ac:	0800d07c 	.word	0x0800d07c
 80037b0:	0800d080 	.word	0x0800d080
 80037b4:	42aa0000 	.word	0x42aa0000
 80037b8:	200005e8 	.word	0x200005e8

080037bc <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 80037c2:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <DetectJunction+0x94>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e00e      	b.n	80037ec <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 80037ce:	4a21      	ldr	r2, [pc, #132]	@ (8003854 <DetectJunction+0x98>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80037da:	d904      	bls.n	80037e6 <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <DetectJunction+0x94>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003850 <DetectJunction+0x94>)
 80037e4:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3301      	adds	r3, #1
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	dded      	ble.n	80037ce <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 80037f2:	4b18      	ldr	r3, [pc, #96]	@ (8003854 <DetectJunction+0x98>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 80037f8:	4b16      	ldr	r3, [pc, #88]	@ (8003854 <DetectJunction+0x98>)
 80037fa:	8a5b      	ldrh	r3, [r3, #18]
 80037fc:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 80037fe:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <DetectJunction+0x94>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b05      	cmp	r3, #5
 8003804:	dd17      	ble.n	8003836 <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800380c:	dd05      	ble.n	800381a <DetectJunction+0x5e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003814:	dd01      	ble.n	800381a <DetectJunction+0x5e>
			return T_JUNCTION;
 8003816:	2303      	movs	r3, #3
 8003818:	e014      	b.n	8003844 <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003820:	dd01      	ble.n	8003826 <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 8003822:	2301      	movs	r3, #1
 8003824:	e00e      	b.n	8003844 <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800382c:	dd01      	ble.n	8003832 <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 800382e:	2302      	movs	r3, #2
 8003830:	e008      	b.n	8003844 <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 8003832:	2304      	movs	r3, #4
 8003834:	e006      	b.n	8003844 <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <DetectJunction+0x94>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <DetectJunction+0x86>
		return NO_LINE;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 8003842:	2304      	movs	r3, #4
	}
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	20000714 	.word	0x20000714
 8003854:	200006f8 	.word	0x200006f8

08003858 <get_steering_feedback>:
	rfs.raw = 0;
	rws.raw = 0;
}


float get_steering_feedback() {
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 800385c:	4b04      	ldr	r3, [pc, #16]	@ (8003870 <get_steering_feedback+0x18>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	ee07 3a90 	vmov	s15, r3
}
 8003864:	eeb0 0a67 	vmov.f32	s0, s15
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	200006cc 	.word	0x200006cc

08003874 <CalculateSteeringAdjustment>:




/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
    float pTerm = STEERING_KP * m_cross_track_error;
 800387a:	4b26      	ldr	r3, [pc, #152]	@ (8003914 <CalculateSteeringAdjustment+0xa0>)
 800387c:	ed93 7a00 	vldr	s14, [r3]
 8003880:	4b25      	ldr	r3, [pc, #148]	@ (8003918 <CalculateSteeringAdjustment+0xa4>)
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	edc7 7a03 	vstr	s15, [r7, #12]
    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 800388e:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <CalculateSteeringAdjustment+0xa4>)
 8003890:	ed93 7a00 	vldr	s14, [r3]
 8003894:	4b21      	ldr	r3, [pc, #132]	@ (800391c <CalculateSteeringAdjustment+0xa8>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800389e:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <CalculateSteeringAdjustment+0xac>)
 80038a0:	edd3 7a00 	vldr	s15, [r3]
 80038a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a8:	edc7 7a02 	vstr	s15, [r7, #8]
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <CalculateSteeringAdjustment+0xb0>)
 80038ae:	ed93 7a00 	vldr	s14, [r3]
 80038b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80038be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c2:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 80038c6:	4b18      	ldr	r3, [pc, #96]	@ (8003928 <CalculateSteeringAdjustment+0xb4>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	eef1 7a67 	vneg.f32	s15, s15
 80038d0:	eef0 0a67 	vmov.f32	s1, s15
 80038d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80038d8:	f009 fb34 	bl	800cf44 <fmaxf>
 80038dc:	eeb0 7a40 	vmov.f32	s14, s0
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <CalculateSteeringAdjustment+0xb4>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	eef0 0a67 	vmov.f32	s1, s15
 80038ea:	eeb0 0a47 	vmov.f32	s0, s14
 80038ee:	f009 fb46 	bl	800cf7e <fminf>
 80038f2:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 80038f6:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <CalculateSteeringAdjustment+0xa4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a08      	ldr	r2, [pc, #32]	@ (800391c <CalculateSteeringAdjustment+0xa8>)
 80038fc:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 80038fe:	4a0b      	ldr	r2, [pc, #44]	@ (800392c <CalculateSteeringAdjustment+0xb8>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6013      	str	r3, [r2, #0]
    return adjustment;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	ee07 3a90 	vmov	s15, r3
}
 800390a:	eeb0 0a67 	vmov.f32	s0, s15
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	0800d060 	.word	0x0800d060
 8003918:	200006c8 	.word	0x200006c8
 800391c:	200006c4 	.word	0x200006c4
 8003920:	0800d064 	.word	0x0800d064
 8003924:	0800d03c 	.word	0x0800d03c
 8003928:	0800d068 	.word	0x0800d068
 800392c:	200006cc 	.word	0x200006cc

08003930 <set_steering_mode>:

void set_steering_mode(uint8_t mode){
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
	m_last_steering_error = m_cross_track_error;
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <set_steering_mode+0x2c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a08      	ldr	r2, [pc, #32]	@ (8003960 <set_steering_mode+0x30>)
 8003940:	6013      	str	r3, [r2, #0]
	m_steering_adjustment = 0;
 8003942:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <set_steering_mode+0x34>)
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
	g_steering_mode = mode;
 800394a:	4a07      	ldr	r2, [pc, #28]	@ (8003968 <set_steering_mode+0x38>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	7013      	strb	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	200006c8 	.word	0x200006c8
 8003960:	200006c4 	.word	0x200006c4
 8003964:	200006cc 	.word	0x200006cc
 8003968:	20000010 	.word	0x20000010

0800396c <Sensors_Update>:
	    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}


/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	int error = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 8003976:	4b3e      	ldr	r3, [pc, #248]	@ (8003a70 <Sensors_Update+0x104>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b06      	cmp	r3, #6
 800397e:	d114      	bne.n	80039aa <Sensors_Update+0x3e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003980:	493c      	ldr	r1, [pc, #240]	@ (8003a74 <Sensors_Update+0x108>)
 8003982:	483d      	ldr	r0, [pc, #244]	@ (8003a78 <Sensors_Update+0x10c>)
 8003984:	f7ff fbf8 	bl	8003178 <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8003988:	493a      	ldr	r1, [pc, #232]	@ (8003a74 <Sensors_Update+0x108>)
 800398a:	483b      	ldr	r0, [pc, #236]	@ (8003a78 <Sensors_Update+0x10c>)
 800398c:	f7ff fca5 	bl	80032da <RAYKHA_GetPositionForPID>
 8003990:	4603      	mov	r3, r0
 8003992:	4a3a      	ldr	r2, [pc, #232]	@ (8003a7c <Sensors_Update+0x110>)
 8003994:	6013      	str	r3, [r2, #0]

		error = line_position;
 8003996:	4b39      	ldr	r3, [pc, #228]	@ (8003a7c <Sensors_Update+0x110>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	607b      	str	r3, [r7, #4]

		junction = DetectJunction();
 800399c:	f7ff ff0e 	bl	80037bc <DetectJunction>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <Sensors_Update+0x114>)
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e054      	b.n	8003a54 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 80039aa:	4b31      	ldr	r3, [pc, #196]	@ (8003a70 <Sensors_Update+0x104>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d10a      	bne.n	80039ca <Sensors_Update+0x5e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 80039b4:	492f      	ldr	r1, [pc, #188]	@ (8003a74 <Sensors_Update+0x108>)
 80039b6:	4830      	ldr	r0, [pc, #192]	@ (8003a78 <Sensors_Update+0x10c>)
 80039b8:	f7ff fbde 	bl	8003178 <RAYKHA_ReadCalibrated>
		junction = DetectJunction();
 80039bc:	f7ff fefe 	bl	80037bc <DetectJunction>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a80 <Sensors_Update+0x114>)
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e044      	b.n	8003a54 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEER_NORMAL){
 80039ca:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <Sensors_Update+0x104>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11e      	bne.n	8003a12 <Sensors_Update+0xa6>
		if(lws.raw < 500)lws.raw = 500;
 80039d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a84 <Sensors_Update+0x118>)
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80039de:	d203      	bcs.n	80039e8 <Sensors_Update+0x7c>
 80039e0:	4b28      	ldr	r3, [pc, #160]	@ (8003a84 <Sensors_Update+0x118>)
 80039e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80039e6:	801a      	strh	r2, [r3, #0]
		if(rws.raw < 500)rws.raw = 500;
 80039e8:	4b27      	ldr	r3, [pc, #156]	@ (8003a88 <Sensors_Update+0x11c>)
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80039f2:	d203      	bcs.n	80039fc <Sensors_Update+0x90>
 80039f4:	4b24      	ldr	r3, [pc, #144]	@ (8003a88 <Sensors_Update+0x11c>)
 80039f6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80039fa:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 80039fc:	4b23      	ldr	r3, [pc, #140]	@ (8003a8c <Sensors_Update+0x120>)
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003a06:	d225      	bcs.n	8003a54 <Sensors_Update+0xe8>
 8003a08:	4b20      	ldr	r3, [pc, #128]	@ (8003a8c <Sensors_Update+0x120>)
 8003a0a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	e020      	b.n	8003a54 <Sensors_Update+0xe8>
		//UART_Transmit_Int(&huart6, ">R", rws.value);

		// Update wall detection flags

    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 8003a12:	4b17      	ldr	r3, [pc, #92]	@ (8003a70 <Sensors_Update+0x104>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d11b      	bne.n	8003a54 <Sensors_Update+0xe8>


    	if(lfs.raw > 250)lfs.raw = 250;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a90 <Sensors_Update+0x124>)
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2bfa      	cmp	r3, #250	@ 0xfa
 8003a24:	d902      	bls.n	8003a2c <Sensors_Update+0xc0>
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <Sensors_Update+0x124>)
 8003a28:	22fa      	movs	r2, #250	@ 0xfa
 8003a2a:	801a      	strh	r2, [r3, #0]
		if(rfs.raw > 230)rfs.raw = 230;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <Sensors_Update+0x128>)
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2be6      	cmp	r3, #230	@ 0xe6
 8003a34:	d902      	bls.n	8003a3c <Sensors_Update+0xd0>
 8003a36:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <Sensors_Update+0x128>)
 8003a38:	22e6      	movs	r2, #230	@ 0xe6
 8003a3a:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8003a3c:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <Sensors_Update+0x120>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003a46:	d203      	bcs.n	8003a50 <Sensors_Update+0xe4>
 8003a48:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <Sensors_Update+0x120>)
 8003a4a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003a4e:	801a      	strh	r2, [r3, #0]



		error = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	607b      	str	r3, [r7, #4]

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <Sensors_Update+0x12c>)
 8003a60:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 8003a64:	f7ff ff06 	bl	8003874 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000010 	.word	0x20000010
 8003a74:	200005bc 	.word	0x200005bc
 8003a78:	200006f8 	.word	0x200006f8
 8003a7c:	2000070c 	.word	0x2000070c
 8003a80:	20000710 	.word	0x20000710
 8003a84:	200006d8 	.word	0x200006d8
 8003a88:	200006f0 	.word	0x200006f0
 8003a8c:	200006e0 	.word	0x200006e0
 8003a90:	200006d0 	.word	0x200006d0
 8003a94:	200006e8 	.word	0x200006e8
 8003a98:	200006c8 	.word	0x200006c8

08003a9c <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <Servo_Init+0x3c>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d110      	bne.n	8003ad0 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe ffd1 	bl	8002a58 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8003ab6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8003aba:	2100      	movs	r1, #0
 8003abc:	4807      	ldr	r0, [pc, #28]	@ (8003adc <Servo_Init+0x40>)
 8003abe:	f007 f962 	bl	800ad86 <memset>
    servoCount = 0;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <Servo_Init+0x44>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <Servo_Init+0x3c>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e000      	b.n	8003ad2 <Servo_Init+0x36>
        return;
 8003ad0:	bf00      	nop
}
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000959 	.word	0x20000959
 8003adc:	20000718 	.word	0x20000718
 8003ae0:	20000958 	.word	0x20000958

08003ae4 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle, float init_angle)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6139      	str	r1, [r7, #16]
 8003aee:	ed87 0a03 	vstr	s0, [r7, #12]
 8003af2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003af6:	ed87 1a01 	vstr	s2, [r7, #4]
 8003afa:	75fb      	strb	r3, [r7, #23]
    // Check if initialized
    if (!isInitialized)
 8003afc:	4b69      	ldr	r3, [pc, #420]	@ (8003ca4 <Servo_Register+0x1c0>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <Servo_Register+0x26>
        return -1;
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	e0c7      	b.n	8003c9a <Servo_Register+0x1b6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8003b0a:	4b67      	ldr	r3, [pc, #412]	@ (8003ca8 <Servo_Register+0x1c4>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b0f      	cmp	r3, #15
 8003b10:	d902      	bls.n	8003b18 <Servo_Register+0x34>
        return -1;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	e0c0      	b.n	8003c9a <Servo_Register+0x1b6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b0f      	cmp	r3, #15
 8003b1c:	d902      	bls.n	8003b24 <Servo_Register+0x40>
        return -1;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	e0ba      	b.n	8003c9a <Servo_Register+0x1b6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e01b      	b.n	8003b62 <Servo_Register+0x7e>
        if (servos[i].initialized && servos[i].channel == channel)
 8003b2a:	4960      	ldr	r1, [pc, #384]	@ (8003cac <Servo_Register+0x1c8>)
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	3310      	adds	r3, #16
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <Servo_Register+0x78>
 8003b40:	495a      	ldr	r1, [pc, #360]	@ (8003cac <Servo_Register+0x1c8>)
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	7dfa      	ldrb	r2, [r7, #23]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d102      	bne.n	8003b5c <Servo_Register+0x78>
            return -1;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5a:	e09e      	b.n	8003c9a <Servo_Register+0x1b6>
    for (int i = 0; i < servoCount; i++) {
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	4b51      	ldr	r3, [pc, #324]	@ (8003ca8 <Servo_Register+0x1c4>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	dbdd      	blt.n	8003b2a <Servo_Register+0x46>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8003b6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7a:	d502      	bpl.n	8003b82 <Servo_Register+0x9e>
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 8003b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b86:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003cb0 <Servo_Register+0x1cc>
 8003b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	dd01      	ble.n	8003b98 <Servo_Register+0xb4>
 8003b94:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <Servo_Register+0x1d0>)
 8003b96:	60bb      	str	r3, [r7, #8]
    if (minAngle >= maxAngle) return -1;
 8003b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba8:	db02      	blt.n	8003bb0 <Servo_Register+0xcc>
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e074      	b.n	8003c9a <Servo_Register+0x1b6>

    // Register the servo
    int servoId = servoCount;
 8003bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca8 <Servo_Register+0x1c4>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	61bb      	str	r3, [r7, #24]
    servos[servoId].channel = channel;
 8003bb6:	493d      	ldr	r1, [pc, #244]	@ (8003cac <Servo_Register+0x1c8>)
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	7dfa      	ldrb	r2, [r7, #23]
 8003bc6:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8003bc8:	4938      	ldr	r1, [pc, #224]	@ (8003cac <Servo_Register+0x1c8>)
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8003bdc:	4933      	ldr	r1, [pc, #204]	@ (8003cac <Servo_Register+0x1c8>)
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3308      	adds	r3, #8
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	601a      	str	r2, [r3, #0]
    //servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
    servos[servoId].currentAngle = init_angle;
 8003bf0:	492e      	ldr	r1, [pc, #184]	@ (8003cac <Servo_Register+0x1c8>)
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	330c      	adds	r3, #12
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]
    servos[servoId].initialized = 1;
 8003c04:	4929      	ldr	r1, [pc, #164]	@ (8003cac <Servo_Register+0x1c8>)
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3310      	adds	r3, #16
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <Servo_Register+0x16c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3310      	adds	r3, #16
 8003c2a:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <Servo_Register+0x1c8>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3301      	adds	r3, #1
 8003c30:	220f      	movs	r2, #15
 8003c32:	6939      	ldr	r1, [r7, #16]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f007 f8ae 	bl	800ad96 <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8003c3a:	491c      	ldr	r1, [pc, #112]	@ (8003cac <Servo_Register+0x1c8>)
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3320      	adds	r3, #32
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e00d      	b.n	8003c6c <Servo_Register+0x188>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	3310      	adds	r3, #16
 8003c5c:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <Servo_Register+0x1c8>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	1c58      	adds	r0, r3, #1
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <Servo_Register+0x1d4>)
 8003c66:	2110      	movs	r1, #16
 8003c68:	f007 f814 	bl	800ac94 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <Servo_Register+0x1c4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca8 <Servo_Register+0x1c4>)
 8003c76:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8003c78:	490c      	ldr	r1, [pc, #48]	@ (8003cac <Servo_Register+0x1c8>)
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	330c      	adds	r3, #12
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe ff24 	bl	8002ae0 <PCA9685_SetServoAngle>

    return servoId;
 8003c98:	69bb      	ldr	r3, [r7, #24]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000959 	.word	0x20000959
 8003ca8:	20000958 	.word	0x20000958
 8003cac:	20000718 	.word	0x20000718
 8003cb0:	43340000 	.word	0x43340000
 8003cb4:	43340000 	.word	0x43340000
 8003cb8:	0800d028 	.word	0x0800d028

08003cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_MspInit+0x4c>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	4a0f      	ldr	r2, [pc, #60]	@ (8003d08 <HAL_MspInit+0x4c>)
 8003ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d08 <HAL_MspInit+0x4c>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <HAL_MspInit+0x4c>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	4a08      	ldr	r2, [pc, #32]	@ (8003d08 <HAL_MspInit+0x4c>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_MspInit+0x4c>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003cfa:	2007      	movs	r0, #7
 8003cfc:	f001 fe16 	bl	800592c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a17      	ldr	r2, [pc, #92]	@ (8003d88 <HAL_ADC_MspInit+0x7c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d127      	bne.n	8003d7e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	4b16      	ldr	r3, [pc, #88]	@ (8003d8c <HAL_ADC_MspInit+0x80>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	4a15      	ldr	r2, [pc, #84]	@ (8003d8c <HAL_ADC_MspInit+0x80>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d3e:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <HAL_ADC_MspInit+0x80>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d8c <HAL_ADC_MspInit+0x80>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	4a0e      	ldr	r2, [pc, #56]	@ (8003d8c <HAL_ADC_MspInit+0x80>)
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <HAL_ADC_MspInit+0x80>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8003d66:	2301      	movs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	4619      	mov	r1, r3
 8003d78:	4805      	ldr	r0, [pc, #20]	@ (8003d90 <HAL_ADC_MspInit+0x84>)
 8003d7a:	f002 f995 	bl	80060a8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	@ 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40012000 	.word	0x40012000
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020800 	.word	0x40020800

08003d94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	@ 0x30
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a42      	ldr	r2, [pc, #264]	@ (8003ebc <HAL_I2C_MspInit+0x128>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d12c      	bne.n	8003e10 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	4b41      	ldr	r3, [pc, #260]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	4a40      	ldr	r2, [pc, #256]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003dc0:	f043 0302 	orr.w	r3, r3, #2
 8003dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dd2:	23c0      	movs	r3, #192	@ 0xc0
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dd6:	2312      	movs	r3, #18
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dde:	2303      	movs	r3, #3
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003de2:	2304      	movs	r3, #4
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	4835      	ldr	r0, [pc, #212]	@ (8003ec4 <HAL_I2C_MspInit+0x130>)
 8003dee:	f002 f95b 	bl	80060a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	4b32      	ldr	r3, [pc, #200]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	4a31      	ldr	r2, [pc, #196]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003dfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e02:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e0e:	e050      	b.n	8003eb2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec8 <HAL_I2C_MspInit+0x134>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d14b      	bne.n	8003eb2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	4a27      	ldr	r2, [pc, #156]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e2a:	4b25      	ldr	r3, [pc, #148]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	4a20      	ldr	r2, [pc, #128]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e58:	2312      	movs	r3, #18
 8003e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e64:	2304      	movs	r3, #4
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e68:	f107 031c 	add.w	r3, r7, #28
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4815      	ldr	r0, [pc, #84]	@ (8003ec4 <HAL_I2C_MspInit+0x130>)
 8003e70:	f002 f91a 	bl	80060a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e7a:	2312      	movs	r3, #18
 8003e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e82:	2303      	movs	r3, #3
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e86:	2304      	movs	r3, #4
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e8a:	f107 031c 	add.w	r3, r7, #28
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480e      	ldr	r0, [pc, #56]	@ (8003ecc <HAL_I2C_MspInit+0x138>)
 8003e92:	f002 f909 	bl	80060a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	4a08      	ldr	r2, [pc, #32]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003ea0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ea6:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_I2C_MspInit+0x12c>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	3730      	adds	r7, #48	@ 0x30
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40005400 	.word	0x40005400
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40020400 	.word	0x40020400
 8003ec8:	40005800 	.word	0x40005800
 8003ecc:	40020800 	.word	0x40020800

08003ed0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	@ 0x30
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	f107 031c 	add.w	r3, r7, #28
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a32      	ldr	r2, [pc, #200]	@ (8003fb8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d12d      	bne.n	8003f4e <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	4b31      	ldr	r3, [pc, #196]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	4a30      	ldr	r2, [pc, #192]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f02:	4b2e      	ldr	r3, [pc, #184]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	4a29      	ldr	r2, [pc, #164]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f1e:	4b27      	ldr	r3, [pc, #156]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003f2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f40:	f107 031c 	add.w	r3, r7, #28
 8003f44:	4619      	mov	r1, r3
 8003f46:	481e      	ldr	r0, [pc, #120]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003f48:	f002 f8ae 	bl	80060a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f4c:	e030      	b.n	8003fb0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f56:	d12b      	bne.n	8003fb0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	4b17      	ldr	r3, [pc, #92]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	4a16      	ldr	r2, [pc, #88]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f68:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f84:	4b0d      	ldr	r3, [pc, #52]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0xec>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003f90:	2303      	movs	r3, #3
 8003f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	f107 031c 	add.w	r3, r7, #28
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4805      	ldr	r0, [pc, #20]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003fac:	f002 f87c 	bl	80060a8 <HAL_GPIO_Init>
}
 8003fb0:	bf00      	nop
 8003fb2:	3730      	adds	r7, #48	@ 0x30
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40020000 	.word	0x40020000

08003fc4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8004000 <HAL_TIM_PWM_MspInit+0x3c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <HAL_TIM_PWM_MspInit+0x40>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	4a09      	ldr	r2, [pc, #36]	@ (8004004 <HAL_TIM_PWM_MspInit+0x40>)
 8003fe0:	f043 0302 	orr.w	r3, r3, #2
 8003fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe6:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <HAL_TIM_PWM_MspInit+0x40>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40000400 	.word	0x40000400
 8004004:	40023800 	.word	0x40023800

08004008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	@ 0x28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a21      	ldr	r2, [pc, #132]	@ (80040ac <HAL_TIM_MspPostInit+0xa4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d13b      	bne.n	80040a2 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <HAL_TIM_MspPostInit+0xa8>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <HAL_TIM_MspPostInit+0xa8>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6313      	str	r3, [r2, #48]	@ 0x30
 800403a:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <HAL_TIM_MspPostInit+0xa8>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_TIM_MspPostInit+0xa8>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	4a18      	ldr	r2, [pc, #96]	@ (80040b0 <HAL_TIM_MspPostInit+0xa8>)
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	6313      	str	r3, [r2, #48]	@ 0x30
 8004056:	4b16      	ldr	r3, [pc, #88]	@ (80040b0 <HAL_TIM_MspPostInit+0xa8>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004062:	23c0      	movs	r3, #192	@ 0xc0
 8004064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004066:	2302      	movs	r3, #2
 8004068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004072:	2302      	movs	r3, #2
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004076:	f107 0314 	add.w	r3, r7, #20
 800407a:	4619      	mov	r1, r3
 800407c:	480d      	ldr	r0, [pc, #52]	@ (80040b4 <HAL_TIM_MspPostInit+0xac>)
 800407e:	f002 f813 	bl	80060a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004082:	2303      	movs	r3, #3
 8004084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004092:	2302      	movs	r3, #2
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	4619      	mov	r1, r3
 800409c:	4806      	ldr	r0, [pc, #24]	@ (80040b8 <HAL_TIM_MspPostInit+0xb0>)
 800409e:	f002 f803 	bl	80060a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80040a2:	bf00      	nop
 80040a4:	3728      	adds	r7, #40	@ 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020000 	.word	0x40020000
 80040b8:	40020400 	.word	0x40020400

080040bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	@ 0x38
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a66      	ldr	r2, [pc, #408]	@ (8004274 <HAL_UART_MspInit+0x1b8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d12c      	bne.n	8004138 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
 80040e2:	4b65      	ldr	r3, [pc, #404]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	4a64      	ldr	r2, [pc, #400]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ee:	4b62      	ldr	r3, [pc, #392]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	4a5d      	ldr	r2, [pc, #372]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6313      	str	r3, [r2, #48]	@ 0x30
 800410a:	4b5b      	ldr	r3, [pc, #364]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004116:	230c      	movs	r3, #12
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004122:	2303      	movs	r3, #3
 8004124:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004126:	2307      	movs	r3, #7
 8004128:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800412e:	4619      	mov	r1, r3
 8004130:	4852      	ldr	r0, [pc, #328]	@ (800427c <HAL_UART_MspInit+0x1c0>)
 8004132:	f001 ffb9 	bl	80060a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004136:	e099      	b.n	800426c <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a50      	ldr	r2, [pc, #320]	@ (8004280 <HAL_UART_MspInit+0x1c4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d12d      	bne.n	800419e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	4b4c      	ldr	r3, [pc, #304]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	4a4b      	ldr	r2, [pc, #300]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004150:	6413      	str	r3, [r2, #64]	@ 0x40
 8004152:	4b49      	ldr	r3, [pc, #292]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	4b45      	ldr	r3, [pc, #276]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	4a44      	ldr	r2, [pc, #272]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	6313      	str	r3, [r2, #48]	@ 0x30
 800416e:	4b42      	ldr	r3, [pc, #264]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800417a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800418c:	2307      	movs	r3, #7
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004194:	4619      	mov	r1, r3
 8004196:	483b      	ldr	r0, [pc, #236]	@ (8004284 <HAL_UART_MspInit+0x1c8>)
 8004198:	f001 ff86 	bl	80060a8 <HAL_GPIO_Init>
}
 800419c:	e066      	b.n	800426c <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a39      	ldr	r2, [pc, #228]	@ (8004288 <HAL_UART_MspInit+0x1cc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d161      	bne.n	800426c <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	4b32      	ldr	r3, [pc, #200]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80041ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b0:	4a31      	ldr	r2, [pc, #196]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80041b2:	f043 0320 	orr.w	r3, r3, #32
 80041b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80041b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80041ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d4:	4b28      	ldr	r3, [pc, #160]	@ (8004278 <HAL_UART_MspInit+0x1bc>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041e0:	23c0      	movs	r3, #192	@ 0xc0
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ec:	2303      	movs	r3, #3
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80041f0:	2308      	movs	r3, #8
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041f8:	4619      	mov	r1, r3
 80041fa:	4822      	ldr	r0, [pc, #136]	@ (8004284 <HAL_UART_MspInit+0x1c8>)
 80041fc:	f001 ff54 	bl	80060a8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004200:	4b22      	ldr	r3, [pc, #136]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004202:	4a23      	ldr	r2, [pc, #140]	@ (8004290 <HAL_UART_MspInit+0x1d4>)
 8004204:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004206:	4b21      	ldr	r3, [pc, #132]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004208:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800420c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800420e:	4b1f      	ldr	r3, [pc, #124]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004214:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004216:	2200      	movs	r2, #0
 8004218:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800421a:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 800421c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004220:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004222:	4b1a      	ldr	r3, [pc, #104]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004224:	2200      	movs	r2, #0
 8004226:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004228:	4b18      	ldr	r3, [pc, #96]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004230:	2200      	movs	r2, #0
 8004232:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004234:	4b15      	ldr	r3, [pc, #84]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004236:	2200      	movs	r2, #0
 8004238:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800423a:	4b14      	ldr	r3, [pc, #80]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 800423c:	2200      	movs	r2, #0
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004240:	4812      	ldr	r0, [pc, #72]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004242:	f001 fbb5 	bl	80059b0 <HAL_DMA_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_UART_MspInit+0x194>
      Error_Handler();
 800424c:	f7fe f93a 	bl	80024c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0e      	ldr	r2, [pc, #56]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004254:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004256:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <HAL_UART_MspInit+0x1d0>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800425c:	2200      	movs	r2, #0
 800425e:	2100      	movs	r1, #0
 8004260:	2047      	movs	r0, #71	@ 0x47
 8004262:	f001 fb6e 	bl	8005942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004266:	2047      	movs	r0, #71	@ 0x47
 8004268:	f001 fb87 	bl	800597a <HAL_NVIC_EnableIRQ>
}
 800426c:	bf00      	nop
 800426e:	3738      	adds	r7, #56	@ 0x38
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40004400 	.word	0x40004400
 8004278:	40023800 	.word	0x40023800
 800427c:	40020000 	.word	0x40020000
 8004280:	40004800 	.word	0x40004800
 8004284:	40020800 	.word	0x40020800
 8004288:	40011400 	.word	0x40011400
 800428c:	20000558 	.word	0x20000558
 8004290:	40026428 	.word	0x40026428

08004294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <NMI_Handler+0x4>

0800429c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042a0:	bf00      	nop
 80042a2:	e7fd      	b.n	80042a0 <HardFault_Handler+0x4>

080042a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <MemManage_Handler+0x4>

080042ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <BusFault_Handler+0x4>

080042b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <UsageFault_Handler+0x4>

080042bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042ec:	f000 fdfa 	bl	8004ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 80042f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004324 <SysTick_Handler+0x3c>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <SysTick_Handler+0x3c>)
 80042fc:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <SysTick_Handler+0x40>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 8004308:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <SysTick_Handler+0x3c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b13      	cmp	r3, #19
 8004310:	d904      	bls.n	800431c <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8004312:	4b04      	ldr	r3, [pc, #16]	@ (8004324 <SysTick_Handler+0x3c>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 8004318:	f000 f986 	bl	8004628 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 800431c:	f000 f9bc 	bl	8004698 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}
 8004324:	2000095a 	.word	0x2000095a
 8004328:	200005b8 	.word	0x200005b8

0800432c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004330:	2008      	movs	r0, #8
 8004332:	f002 f867 	bl	8006404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004340:	4802      	ldr	r0, [pc, #8]	@ (800434c <DMA2_Stream1_IRQHandler+0x10>)
 8004342:	f001 fc75 	bl	8005c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000558 	.word	0x20000558

08004350 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004354:	4841      	ldr	r0, [pc, #260]	@ (800445c <USART6_IRQHandler+0x10c>)
 8004356:	f005 f85f 	bl	8009418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	/* Check if receive interrupt */
	  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) != RESET) {
 800435a:	4b40      	ldr	r3, [pc, #256]	@ (800445c <USART6_IRQHandler+0x10c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d173      	bne.n	8004450 <USART6_IRQHandler+0x100>
	    /* Read byte from UART */
	    rxByte = (uint8_t)(huart6.Instance->DR & 0xFF);
 8004368:	4b3c      	ldr	r3, [pc, #240]	@ (800445c <USART6_IRQHandler+0x10c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	4b3b      	ldr	r3, [pc, #236]	@ (8004460 <USART6_IRQHandler+0x110>)
 8004372:	701a      	strb	r2, [r3, #0]

	    /* State machine for packet reception */
	    switch (rxState) {
 8004374:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <USART6_IRQHandler+0x114>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d85f      	bhi.n	800443c <USART6_IRQHandler+0xec>
 800437c:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <USART6_IRQHandler+0x34>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	08004399 	.word	0x08004399
 8004388:	080043a9 	.word	0x080043a9
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043df 	.word	0x080043df
 8004394:	08004429 	.word	0x08004429
	      case WAITING_FOR_START:
	        if (rxByte == START_MARKER) {
 8004398:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <USART6_IRQHandler+0x110>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b3c      	cmp	r3, #60	@ 0x3c
 800439e:	d151      	bne.n	8004444 <USART6_IRQHandler+0xf4>
	          rxState = WAITING_FOR_CMD;
 80043a0:	4b30      	ldr	r3, [pc, #192]	@ (8004464 <USART6_IRQHandler+0x114>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 80043a6:	e04d      	b.n	8004444 <USART6_IRQHandler+0xf4>

	      case WAITING_FOR_CMD:
	        rxCmd = rxByte;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004460 <USART6_IRQHandler+0x110>)
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004468 <USART6_IRQHandler+0x118>)
 80043ae:	701a      	strb	r2, [r3, #0]
	        rxState = WAITING_FOR_LENGTH;
 80043b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004464 <USART6_IRQHandler+0x114>)
 80043b2:	2202      	movs	r2, #2
 80043b4:	701a      	strb	r2, [r3, #0]
	        break;
 80043b6:	e046      	b.n	8004446 <USART6_IRQHandler+0xf6>

	      case WAITING_FOR_LENGTH:
	        rxLength = rxByte;
 80043b8:	4b29      	ldr	r3, [pc, #164]	@ (8004460 <USART6_IRQHandler+0x110>)
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	4b2b      	ldr	r3, [pc, #172]	@ (800446c <USART6_IRQHandler+0x11c>)
 80043be:	701a      	strb	r2, [r3, #0]
	        rxIndex = 0;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004470 <USART6_IRQHandler+0x120>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]

	        if (rxLength > 0) {
 80043c6:	4b29      	ldr	r3, [pc, #164]	@ (800446c <USART6_IRQHandler+0x11c>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <USART6_IRQHandler+0x86>
	          rxState = RECEIVING_DATA;
 80043ce:	4b25      	ldr	r3, [pc, #148]	@ (8004464 <USART6_IRQHandler+0x114>)
 80043d0:	2203      	movs	r2, #3
 80043d2:	701a      	strb	r2, [r3, #0]
	        } else {
	          rxState = WAITING_FOR_END;
	        }
	        break;
 80043d4:	e037      	b.n	8004446 <USART6_IRQHandler+0xf6>
	          rxState = WAITING_FOR_END;
 80043d6:	4b23      	ldr	r3, [pc, #140]	@ (8004464 <USART6_IRQHandler+0x114>)
 80043d8:	2204      	movs	r2, #4
 80043da:	701a      	strb	r2, [r3, #0]
	        break;
 80043dc:	e033      	b.n	8004446 <USART6_IRQHandler+0xf6>

	      case RECEIVING_DATA:
	        if (rxIndex < rxLength && rxIndex < MAX_BUFFER_SIZE) {
 80043de:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <USART6_IRQHandler+0x120>)
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b22      	ldr	r3, [pc, #136]	@ (800446c <USART6_IRQHandler+0x11c>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d219      	bcs.n	800441e <USART6_IRQHandler+0xce>
 80043ea:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <USART6_IRQHandler+0x120>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b25b      	sxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db14      	blt.n	800441e <USART6_IRQHandler+0xce>
	          rxBuffer[rxIndex++] = rxByte;
 80043f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <USART6_IRQHandler+0x120>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	b2d1      	uxtb	r1, r2
 80043fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <USART6_IRQHandler+0x120>)
 80043fe:	7011      	strb	r1, [r2, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	4b17      	ldr	r3, [pc, #92]	@ (8004460 <USART6_IRQHandler+0x110>)
 8004404:	7819      	ldrb	r1, [r3, #0]
 8004406:	4b1b      	ldr	r3, [pc, #108]	@ (8004474 <USART6_IRQHandler+0x124>)
 8004408:	5499      	strb	r1, [r3, r2]

	          if (rxIndex >= rxLength) {
 800440a:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <USART6_IRQHandler+0x120>)
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	4b17      	ldr	r3, [pc, #92]	@ (800446c <USART6_IRQHandler+0x11c>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d307      	bcc.n	8004426 <USART6_IRQHandler+0xd6>
	            rxState = WAITING_FOR_END;
 8004416:	4b13      	ldr	r3, [pc, #76]	@ (8004464 <USART6_IRQHandler+0x114>)
 8004418:	2204      	movs	r2, #4
 800441a:	701a      	strb	r2, [r3, #0]
	          if (rxIndex >= rxLength) {
 800441c:	e003      	b.n	8004426 <USART6_IRQHandler+0xd6>
	          }
	        } else {
	          /* Buffer overflow, reset state */
	          rxState = WAITING_FOR_START;
 800441e:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <USART6_IRQHandler+0x114>)
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8004424:	e00f      	b.n	8004446 <USART6_IRQHandler+0xf6>
 8004426:	e00e      	b.n	8004446 <USART6_IRQHandler+0xf6>

	      case WAITING_FOR_END:
	        if (rxByte == END_MARKER) {
 8004428:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <USART6_IRQHandler+0x110>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b3e      	cmp	r3, #62	@ 0x3e
 800442e:	d101      	bne.n	8004434 <USART6_IRQHandler+0xe4>
	          /* Complete packet received, process it */
	          ProcessCommand();
 8004430:	f7fc fe36 	bl	80010a0 <ProcessCommand>
	        }
	        /* Reset state machine for next packet */
	        rxState = WAITING_FOR_START;
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <USART6_IRQHandler+0x114>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
	        break;
 800443a:	e004      	b.n	8004446 <USART6_IRQHandler+0xf6>

	      default:
	        rxState = WAITING_FOR_START;
 800443c:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <USART6_IRQHandler+0x114>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
	        break;
 8004442:	e000      	b.n	8004446 <USART6_IRQHandler+0xf6>
	        break;
 8004444:	bf00      	nop
	    }

	    /* Clear interrupt flag - use _CLEAR_FLAG instead of _CLEAR_IT */
	    __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);
 8004446:	4b05      	ldr	r3, [pc, #20]	@ (800445c <USART6_IRQHandler+0x10c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0220 	mvn.w	r2, #32
 800444e:	601a      	str	r2, [r3, #0]
	  }

	  /* Handle other UART interrupts if needed */
	  HAL_UART_IRQHandler(&huart6);
 8004450:	4802      	ldr	r0, [pc, #8]	@ (800445c <USART6_IRQHandler+0x10c>)
 8004452:	f004 ffe1 	bl	8009418 <HAL_UART_IRQHandler>

  /* USER CODE END USART6_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000510 	.word	0x20000510
 8004460:	2000028b 	.word	0x2000028b
 8004464:	20000204 	.word	0x20000204
 8004468:	20000288 	.word	0x20000288
 800446c:	20000289 	.word	0x20000289
 8004470:	2000028a 	.word	0x2000028a
 8004474:	20000208 	.word	0x20000208

08004478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return 1;
 800447c:	2301      	movs	r3, #1
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_kill>:

int _kill(int pid, int sig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004492:	f006 fcdd 	bl	800ae50 <__errno>
 8004496:	4603      	mov	r3, r0
 8004498:	2216      	movs	r2, #22
 800449a:	601a      	str	r2, [r3, #0]
  return -1;
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_exit>:

void _exit (int status)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ffe7 	bl	8004488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044ba:	bf00      	nop
 80044bc:	e7fd      	b.n	80044ba <_exit+0x12>

080044be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e00a      	b.n	80044e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80044d0:	f3af 8000 	nop.w
 80044d4:	4601      	mov	r1, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	60ba      	str	r2, [r7, #8]
 80044dc:	b2ca      	uxtb	r2, r1
 80044de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3301      	adds	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	dbf0      	blt.n	80044d0 <_read+0x12>
  }

  return len;
 80044ee:	687b      	ldr	r3, [r7, #4]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e009      	b.n	800451e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	60ba      	str	r2, [r7, #8]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	3301      	adds	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	dbf1      	blt.n	800450a <_write+0x12>
  }
  return len;
 8004526:	687b      	ldr	r3, [r7, #4]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <_close>:

int _close(int file)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004558:	605a      	str	r2, [r3, #4]
  return 0;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_isatty>:

int _isatty(int file)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004570:	2301      	movs	r3, #1
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045a0:	4a14      	ldr	r2, [pc, #80]	@ (80045f4 <_sbrk+0x5c>)
 80045a2:	4b15      	ldr	r3, [pc, #84]	@ (80045f8 <_sbrk+0x60>)
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045ac:	4b13      	ldr	r3, [pc, #76]	@ (80045fc <_sbrk+0x64>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045b4:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <_sbrk+0x64>)
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <_sbrk+0x68>)
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <_sbrk+0x64>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d207      	bcs.n	80045d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045c8:	f006 fc42 	bl	800ae50 <__errno>
 80045cc:	4603      	mov	r3, r0
 80045ce:	220c      	movs	r2, #12
 80045d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	e009      	b.n	80045ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045d8:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <_sbrk+0x64>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045de:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <_sbrk+0x64>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	4a05      	ldr	r2, [pc, #20]	@ (80045fc <_sbrk+0x64>)
 80045e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ea:	68fb      	ldr	r3, [r7, #12]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20020000 	.word	0x20020000
 80045f8:	00000400 	.word	0x00000400
 80045fc:	2000095c 	.word	0x2000095c
 8004600:	20000ec0 	.word	0x20000ec0

08004604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004608:	4b06      	ldr	r3, [pc, #24]	@ (8004624 <SystemInit+0x20>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	4a05      	ldr	r2, [pc, #20]	@ (8004624 <SystemInit+0x20>)
 8004610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000ed00 	.word	0xe000ed00

08004628 <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8004628:	b580      	push	{r7, lr}
 800462a:	ed2d 8b02 	vpush	{d8}
 800462e:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 8004630:	f7fd fa42 	bl	8001ab8 <update_Encoder_Data>
		Motion_Update(&motion);
 8004634:	4810      	ldr	r0, [pc, #64]	@ (8004678 <SysTickFunction+0x50>)
 8004636:	f7fe f827 	bl	8002688 <Motion_Update>
		Sensors_Update();
 800463a:	f7ff f997 	bl	800396c <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 800463e:	480e      	ldr	r0, [pc, #56]	@ (8004678 <SysTickFunction+0x50>)
 8004640:	f7fd ffaa 	bl	8002598 <Motion_Velocity>
 8004644:	eeb0 8a40 	vmov.f32	s16, s0
 8004648:	480b      	ldr	r0, [pc, #44]	@ (8004678 <SysTickFunction+0x50>)
 800464a:	f7fd ffb5 	bl	80025b8 <Motion_Omega>
 800464e:	eef0 8a40 	vmov.f32	s17, s0
 8004652:	f7ff f901 	bl	8003858 <get_steering_feedback>
 8004656:	eef0 7a40 	vmov.f32	s15, s0
 800465a:	eeb0 1a67 	vmov.f32	s2, s15
 800465e:	eef0 0a68 	vmov.f32	s1, s17
 8004662:	eeb0 0a48 	vmov.f32	s0, s16
 8004666:	4805      	ldr	r0, [pc, #20]	@ (800467c <SysTickFunction+0x54>)
 8004668:	f7fc ffcc 	bl	8001604 <UpdateControllers>
	//--------------------------------------------------------------------
		//UART_Transmit_EncoderData(&huart3);



}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	ecbd 8b02 	vpop	{d8}
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200005e8 	.word	0x200005e8
 800467c:	2000069c 	.word	0x2000069c

08004680 <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 8004684:	4b03      	ldr	r3, [pc, #12]	@ (8004694 <EnableSysTickFunction+0x14>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 800468a:	200a      	movs	r0, #10
 800468c:	f000 fc4a 	bl	8004f24 <HAL_Delay>
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}
 8004694:	200005b8 	.word	0x200005b8

08004698 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 800469e:	f7fd f9b3 	bl	8001a08 <getRightEncoderCounts>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	f647 1318 	movw	r3, #31000	@ 0x7918
 80046aa:	429a      	cmp	r2, r3
 80046ac:	dc15      	bgt.n	80046da <CheckEncoderCounts+0x42>
 80046ae:	f7fd f9b7 	bl	8001a20 <getLeftEncoderCounts>
 80046b2:	4603      	mov	r3, r0
 80046b4:	461a      	mov	r2, r3
 80046b6:	f647 1318 	movw	r3, #31000	@ 0x7918
 80046ba:	429a      	cmp	r2, r3
 80046bc:	dc0d      	bgt.n	80046da <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80046be:	f7fd f9a3 	bl	8001a08 <getRightEncoderCounts>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <CheckEncoderCounts+0x6c>)
 80046c8:	429a      	cmp	r2, r3
 80046ca:	db06      	blt.n	80046da <CheckEncoderCounts+0x42>
 80046cc:	f7fd f9a8 	bl	8001a20 <getLeftEncoderCounts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <CheckEncoderCounts+0x6c>)
 80046d6:	429a      	cmp	r2, r3
 80046d8:	da10      	bge.n	80046fc <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80046da:	f7fd f995 	bl	8001a08 <getRightEncoderCounts>
 80046de:	4603      	mov	r3, r0
 80046e0:	b29c      	uxth	r4, r3
 80046e2:	f7fd f99d 	bl	8001a20 <getLeftEncoderCounts>
 80046e6:	4603      	mov	r3, r0
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	1ae3      	subs	r3, r4, r3
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 80046f0:	f7fd f9d2 	bl	8001a98 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 80046f4:	4a04      	ldr	r2, [pc, #16]	@ (8004708 <CheckEncoderCounts+0x70>)
 80046f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046fa:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	ffff86e8 	.word	0xffff86e8
 8004708:	40010000 	.word	0x40010000

0800470c <executePlantationTask>:


//---------Start 0f Plantation Task (Collect and identify potatoes)--------------------
LineColor linecolor;
BallColor ballcolor;
void executePlantationTask(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
	StartLineColorDetection();
 8004712:	f7fc fd5b 	bl	80011cc <StartLineColorDetection>
	HAL_Delay(5000);
 8004716:	f241 3088 	movw	r0, #5000	@ 0x1388
 800471a:	f000 fc03 	bl	8004f24 <HAL_Delay>
	Robot_MoveForwardUntillLine();
 800471e:	f7fe ffa7 	bl	8003670 <Robot_MoveForwardUntillLine>
	Robot_TurnLeft90Inplace();
 8004722:	f7ff f81b 	bl	800375c <Robot_TurnLeft90Inplace>

	//Start the task
	for(uint8_t column = 0; column < 5; column ++){
 8004726:	2300      	movs	r3, #0
 8004728:	71fb      	strb	r3, [r7, #7]
 800472a:	e062      	b.n	80047f2 <executePlantationTask+0xe6>
		for(uint8_t row = 0; row < 4; row ++){
 800472c:	2300      	movs	r3, #0
 800472e:	71bb      	strb	r3, [r7, #6]
 8004730:	e059      	b.n	80047e6 <executePlantationTask+0xda>
				if(row == 0){
 8004732:	79bb      	ldrb	r3, [r7, #6]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d119      	bne.n	800476c <executePlantationTask+0x60>
					//linecolor = RPI_GetLineColor(column, row);
					linecolor = RPI_GetLineColor();
 8004738:	f7fe fe62 	bl	8003400 <RPI_GetLineColor>
 800473c:	4603      	mov	r3, r0
 800473e:	461a      	mov	r2, r3
 8004740:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <executePlantationTask+0xf8>)
 8004742:	701a      	strb	r2, [r3, #0]
					moveToCenterofCellinZeroRow();
 8004744:	f000 f87e 	bl	8004844 <moveToCenterofCellinZeroRow>

					if(linecolor == GREEN){
 8004748:	4b2e      	ldr	r3, [pc, #184]	@ (8004804 <executePlantationTask+0xf8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d147      	bne.n	80047e0 <executePlantationTask+0xd4>

						// Here we get the ball color after picking
						// ToDo: Handle that
						picktheBall(column, row);
 8004750:	79ba      	ldrb	r2, [r7, #6]
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f8a0 	bl	800489c <picktheBall>


						moveToCenterofNextColumnfromFirstRow();
 800475c:	f000 f888 	bl	8004870 <moveToCenterofNextColumnfromFirstRow>
						HAL_Delay(MOTION_DELAY);
 8004760:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <executePlantationTask+0xfc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fbdd 	bl	8004f24 <HAL_Delay>
						break;
 800476a:	e03f      	b.n	80047ec <executePlantationTask+0xe0>
					}
				}
				else if(row == 1){
 800476c:	79bb      	ldrb	r3, [r7, #6]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d119      	bne.n	80047a6 <executePlantationTask+0x9a>
					//linecolor = RPI_GetLineColor(column, row);
					linecolor = RPI_GetLineColor();
 8004772:	f7fe fe45 	bl	8003400 <RPI_GetLineColor>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	4b22      	ldr	r3, [pc, #136]	@ (8004804 <executePlantationTask+0xf8>)
 800477c:	701a      	strb	r2, [r3, #0]
					moveToCenterofNextCell();
 800477e:	f000 f845 	bl	800480c <moveToCenterofNextCell>

					if(linecolor == GREEN){
 8004782:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <executePlantationTask+0xf8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d12a      	bne.n	80047e0 <executePlantationTask+0xd4>
						// Here we get the ball color after picking
						// ToDo: Handle that
						picktheBall(column, row);
 800478a:	79ba      	ldrb	r2, [r7, #6]
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	4611      	mov	r1, r2
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f883 	bl	800489c <picktheBall>
						moveToCenterofNextColumnfromSecondRow();
 8004796:	f000 f871 	bl	800487c <moveToCenterofNextColumnfromSecondRow>
						HAL_Delay(MOTION_DELAY);
 800479a:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <executePlantationTask+0xfc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fbc0 	bl	8004f24 <HAL_Delay>
						break;
 80047a4:	e022      	b.n	80047ec <executePlantationTask+0xe0>
					}

				}else if(row == 2){
 80047a6:	79bb      	ldrb	r3, [r7, #6]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d119      	bne.n	80047e0 <executePlantationTask+0xd4>
					//linecolor = RPI_GetLineColor(column, row);
					linecolor = RPI_GetLineColor();
 80047ac:	f7fe fe28 	bl	8003400 <RPI_GetLineColor>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <executePlantationTask+0xf8>)
 80047b6:	701a      	strb	r2, [r3, #0]
					moveToCenterofNextCell();
 80047b8:	f000 f828 	bl	800480c <moveToCenterofNextCell>

					if(linecolor == GREEN){
 80047bc:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <executePlantationTask+0xf8>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10d      	bne.n	80047e0 <executePlantationTask+0xd4>
						// Here we get the ball color after picking
						// ToDo: Handle that
						picktheBall(column, row);
 80047c4:	79ba      	ldrb	r2, [r7, #6]
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	4611      	mov	r1, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f866 	bl	800489c <picktheBall>
						moveToCenterofNextColumnfromThiredRow();
 80047d0:	f000 f85c 	bl	800488c <moveToCenterofNextColumnfromThiredRow>
						HAL_Delay(MOTION_DELAY);
 80047d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <executePlantationTask+0xfc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fba3 	bl	8004f24 <HAL_Delay>
						break;
 80047de:	e005      	b.n	80047ec <executePlantationTask+0xe0>
		for(uint8_t row = 0; row < 4; row ++){
 80047e0:	79bb      	ldrb	r3, [r7, #6]
 80047e2:	3301      	adds	r3, #1
 80047e4:	71bb      	strb	r3, [r7, #6]
 80047e6:	79bb      	ldrb	r3, [r7, #6]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d9a2      	bls.n	8004732 <executePlantationTask+0x26>
	for(uint8_t column = 0; column < 5; column ++){
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	3301      	adds	r3, #1
 80047f0:	71fb      	strb	r3, [r7, #7]
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d999      	bls.n	800472c <executePlantationTask+0x20>
		}

	}

  }
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000960 	.word	0x20000960
 8004808:	0800d084 	.word	0x0800d084

0800480c <moveToCenterofNextCell>:

void moveToCenterofNextCell(){
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 8004810:	f7fe fe80 	bl	8003514 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <moveToCenterofNextCell+0x18>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe febf 	bl	800359c <Robot_FollowLineGivenDistance>
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	0800d088 	.word	0x0800d088

08004828 <moveToCenterofNextCellandNotStop>:

void moveToCenterofNextCellandNotStop(){
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 800482c:	f7fe fe72 	bl	8003514 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistanceandNotStop(DISTACE_TO_CENTER_OF_CELL);
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <moveToCenterofNextCellandNotStop+0x18>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe fee7 	bl	8003608 <Robot_FollowLineGivenDistanceandNotStop>
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	0800d088 	.word	0x0800d088

08004844 <moveToCenterofCellinZeroRow>:

void moveToCenterofCellinZeroRow(){
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunction();
 8004848:	f7fe fe1e 	bl	8003488 <Robot_LineFollowUntillJunction>
	Robot_TurnRight90Inplace();
 800484c:	f7fe ff56 	bl	80036fc <Robot_TurnRight90Inplace>
	Robot_FollowLineGivenDistance(DISTACE_TO_CENTER_OF_CELL);
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <moveToCenterofCellinZeroRow+0x24>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe fea1 	bl	800359c <Robot_FollowLineGivenDistance>
	HAL_Delay(MOTION_DELAY);
 800485a:	4b04      	ldr	r3, [pc, #16]	@ (800486c <moveToCenterofCellinZeroRow+0x28>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fb60 	bl	8004f24 <HAL_Delay>
}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}
 8004868:	0800d088 	.word	0x0800d088
 800486c:	0800d084 	.word	0x0800d084

08004870 <moveToCenterofNextColumnfromFirstRow>:

void moveToCenterofNextColumnfromFirstRow(){
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
	moveToCenterofCellinZeroRow();
 8004874:	f7ff ffe6 	bl	8004844 <moveToCenterofCellinZeroRow>
}
 8004878:	bf00      	nop
 800487a:	bd80      	pop	{r7, pc}

0800487c <moveToCenterofNextColumnfromSecondRow>:

void moveToCenterofNextColumnfromSecondRow(){
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 8004880:	f7ff ffd2 	bl	8004828 <moveToCenterofNextCellandNotStop>
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromFirstRow();
 8004884:	f7ff fff4 	bl	8004870 <moveToCenterofNextColumnfromFirstRow>
}
 8004888:	bf00      	nop
 800488a:	bd80      	pop	{r7, pc}

0800488c <moveToCenterofNextColumnfromThiredRow>:

void moveToCenterofNextColumnfromThiredRow(){
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 8004890:	f7ff ffca 	bl	8004828 <moveToCenterofNextCellandNotStop>
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromSecondRow();
 8004894:	f7ff fff2 	bl	800487c <moveToCenterofNextColumnfromSecondRow>
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}

0800489c <picktheBall>:

BallColor picktheBall(uint8_t column, uint8_t row){
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	460a      	mov	r2, r1
 80048a6:	71fb      	strb	r3, [r7, #7]
 80048a8:	4613      	mov	r3, r2
 80048aa:	71bb      	strb	r3, [r7, #6]
	Robot_TurnLeft90Inplace();
 80048ac:	f7fe ff56 	bl	800375c <Robot_TurnLeft90Inplace>
	ballcolor = RPI_GetBallColor(column, row);
 80048b0:	79ba      	ldrb	r2, [r7, #6]
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fdae 	bl	8003418 <RPI_GetBallColor>
 80048bc:	4603      	mov	r3, r0
 80048be:	461a      	mov	r2, r3
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <picktheBall+0x54>)
 80048c2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(MOTION_DELAY);
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <picktheBall+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fb2b 	bl	8004f24 <HAL_Delay>
	//ToDo: Pick The box
	Buzzer_Toggle(1000);
 80048ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048d2:	f7fc fddb 	bl	800148c <Buzzer_Toggle>
	HAL_Delay(MOTION_DELAY);
 80048d6:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <picktheBall+0x58>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fb22 	bl	8004f24 <HAL_Delay>

	Robot_TurnLeft90Inplace();
 80048e0:	f7fe ff3c 	bl	800375c <Robot_TurnLeft90Inplace>

	return ballcolor;
 80048e4:	4b02      	ldr	r3, [pc, #8]	@ (80048f0 <picktheBall+0x54>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000961 	.word	0x20000961
 80048f4:	0800d084 	.word	0x0800d084

080048f8 <runCurrentTask>:


//---------end 0f Plantation Task (Collect and identify potatoes)---------------------

// Task manager function
void runCurrentTask(TaskType task) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	71fb      	strb	r3, [r7, #7]

    switch (task) {
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <runCurrentTask+0x16>
        case TASK_PLANTATION:
            executePlantationTask();
 8004908:	f7ff ff00 	bl	800470c <executePlantationTask>
            break;
 800490c:	e000      	b.n	8004910 <runCurrentTask+0x18>
        default:

            break;
 800490e:	bf00      	nop
    }

    // Print final status after execution

}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004950 <LoopFillZerobss+0x10>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800491c:	f7ff fe72 	bl	8004604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004920:	480c      	ldr	r0, [pc, #48]	@ (8004954 <LoopFillZerobss+0x14>)
  ldr r1, =_edata
 8004922:	490d      	ldr	r1, [pc, #52]	@ (8004958 <LoopFillZerobss+0x18>)
  ldr r2, =_sidata
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <LoopFillZerobss+0x1c>)
  movs r3, #0
 8004926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004928:	e002      	b.n	8004930 <LoopCopyDataInit>

0800492a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800492a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800492c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800492e:	3304      	adds	r3, #4

08004930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004934:	d3f9      	bcc.n	800492a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004936:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <LoopFillZerobss+0x20>)
//  ldr r4, =_ebss
  movs r3, #0
 8004938:	2300      	movs	r3, #0
  b LoopFillZerobss
 800493a:	e001      	b.n	8004940 <LoopFillZerobss>

0800493c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800493c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800493e:	3204      	adds	r2, #4

08004940 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004940:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004942:	d3fb      	bcc.n	800493c <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004944:	f006 fa8a 	bl	800ae5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004948:	f7fd f970 	bl	8001c2c <main>
  bx  lr    
 800494c:	4770      	bx	lr
 800494e:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 8004950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004958:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800495c:	0800d834 	.word	0x0800d834
  ldr r2, =_sbss
 8004960:	200001e8 	.word	0x200001e8

08004964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004964:	e7fe      	b.n	8004964 <ADC_IRQHandler>
	...

08004968 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800496e:	f000 f9cd 	bl	8004d0c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004972:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004976:	2201      	movs	r2, #1
 8004978:	2178      	movs	r1, #120	@ 0x78
 800497a:	485b      	ldr	r0, [pc, #364]	@ (8004ae8 <SSD1306_Init+0x180>)
 800497c:	f002 fac8 	bl	8006f10 <HAL_I2C_IsDeviceReady>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8004986:	2300      	movs	r3, #0
 8004988:	e0a9      	b.n	8004ade <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800498a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800498e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004990:	e002      	b.n	8004998 <SSD1306_Init+0x30>
		p--;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3b01      	subs	r3, #1
 8004996:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f9      	bne.n	8004992 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800499e:	22ae      	movs	r2, #174	@ 0xae
 80049a0:	2100      	movs	r1, #0
 80049a2:	2078      	movs	r0, #120	@ 0x78
 80049a4:	f000 fa2e 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80049a8:	2220      	movs	r2, #32
 80049aa:	2100      	movs	r1, #0
 80049ac:	2078      	movs	r0, #120	@ 0x78
 80049ae:	f000 fa29 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80049b2:	2210      	movs	r2, #16
 80049b4:	2100      	movs	r1, #0
 80049b6:	2078      	movs	r0, #120	@ 0x78
 80049b8:	f000 fa24 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80049bc:	22b0      	movs	r2, #176	@ 0xb0
 80049be:	2100      	movs	r1, #0
 80049c0:	2078      	movs	r0, #120	@ 0x78
 80049c2:	f000 fa1f 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80049c6:	22c8      	movs	r2, #200	@ 0xc8
 80049c8:	2100      	movs	r1, #0
 80049ca:	2078      	movs	r0, #120	@ 0x78
 80049cc:	f000 fa1a 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	2078      	movs	r0, #120	@ 0x78
 80049d6:	f000 fa15 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80049da:	2210      	movs	r2, #16
 80049dc:	2100      	movs	r1, #0
 80049de:	2078      	movs	r0, #120	@ 0x78
 80049e0:	f000 fa10 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80049e4:	2240      	movs	r2, #64	@ 0x40
 80049e6:	2100      	movs	r1, #0
 80049e8:	2078      	movs	r0, #120	@ 0x78
 80049ea:	f000 fa0b 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80049ee:	2281      	movs	r2, #129	@ 0x81
 80049f0:	2100      	movs	r1, #0
 80049f2:	2078      	movs	r0, #120	@ 0x78
 80049f4:	f000 fa06 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80049f8:	22ff      	movs	r2, #255	@ 0xff
 80049fa:	2100      	movs	r1, #0
 80049fc:	2078      	movs	r0, #120	@ 0x78
 80049fe:	f000 fa01 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004a02:	22a1      	movs	r2, #161	@ 0xa1
 8004a04:	2100      	movs	r1, #0
 8004a06:	2078      	movs	r0, #120	@ 0x78
 8004a08:	f000 f9fc 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004a0c:	22a6      	movs	r2, #166	@ 0xa6
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2078      	movs	r0, #120	@ 0x78
 8004a12:	f000 f9f7 	bl	8004e04 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004a16:	22a8      	movs	r2, #168	@ 0xa8
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2078      	movs	r0, #120	@ 0x78
 8004a1c:	f000 f9f2 	bl	8004e04 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8004a20:	223f      	movs	r2, #63	@ 0x3f
 8004a22:	2100      	movs	r1, #0
 8004a24:	2078      	movs	r0, #120	@ 0x78
 8004a26:	f000 f9ed 	bl	8004e04 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004a2a:	22a4      	movs	r2, #164	@ 0xa4
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2078      	movs	r0, #120	@ 0x78
 8004a30:	f000 f9e8 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004a34:	22d3      	movs	r2, #211	@ 0xd3
 8004a36:	2100      	movs	r1, #0
 8004a38:	2078      	movs	r0, #120	@ 0x78
 8004a3a:	f000 f9e3 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2100      	movs	r1, #0
 8004a42:	2078      	movs	r0, #120	@ 0x78
 8004a44:	f000 f9de 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004a48:	22d5      	movs	r2, #213	@ 0xd5
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2078      	movs	r0, #120	@ 0x78
 8004a4e:	f000 f9d9 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004a52:	22f0      	movs	r2, #240	@ 0xf0
 8004a54:	2100      	movs	r1, #0
 8004a56:	2078      	movs	r0, #120	@ 0x78
 8004a58:	f000 f9d4 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004a5c:	22d9      	movs	r2, #217	@ 0xd9
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2078      	movs	r0, #120	@ 0x78
 8004a62:	f000 f9cf 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004a66:	2222      	movs	r2, #34	@ 0x22
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2078      	movs	r0, #120	@ 0x78
 8004a6c:	f000 f9ca 	bl	8004e04 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004a70:	22da      	movs	r2, #218	@ 0xda
 8004a72:	2100      	movs	r1, #0
 8004a74:	2078      	movs	r0, #120	@ 0x78
 8004a76:	f000 f9c5 	bl	8004e04 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8004a7a:	2212      	movs	r2, #18
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2078      	movs	r0, #120	@ 0x78
 8004a80:	f000 f9c0 	bl	8004e04 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004a84:	22db      	movs	r2, #219	@ 0xdb
 8004a86:	2100      	movs	r1, #0
 8004a88:	2078      	movs	r0, #120	@ 0x78
 8004a8a:	f000 f9bb 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004a8e:	2220      	movs	r2, #32
 8004a90:	2100      	movs	r1, #0
 8004a92:	2078      	movs	r0, #120	@ 0x78
 8004a94:	f000 f9b6 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004a98:	228d      	movs	r2, #141	@ 0x8d
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2078      	movs	r0, #120	@ 0x78
 8004a9e:	f000 f9b1 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004aa2:	2214      	movs	r2, #20
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2078      	movs	r0, #120	@ 0x78
 8004aa8:	f000 f9ac 	bl	8004e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004aac:	22af      	movs	r2, #175	@ 0xaf
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2078      	movs	r0, #120	@ 0x78
 8004ab2:	f000 f9a7 	bl	8004e04 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8004ab6:	222e      	movs	r2, #46	@ 0x2e
 8004ab8:	2100      	movs	r1, #0
 8004aba:	2078      	movs	r0, #120	@ 0x78
 8004abc:	f000 f9a2 	bl	8004e04 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f000 f843 	bl	8004b4c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004ac6:	f000 f813 	bl	8004af0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <SSD1306_Init+0x184>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004ad0:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <SSD1306_Init+0x184>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004ad6:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <SSD1306_Init+0x184>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8004adc:	2301      	movs	r3, #1
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000300 	.word	0x20000300
 8004aec:	20000d64 	.word	0x20000d64

08004af0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004af6:	2300      	movs	r3, #0
 8004af8:	71fb      	strb	r3, [r7, #7]
 8004afa:	e01d      	b.n	8004b38 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	3b50      	subs	r3, #80	@ 0x50
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	2100      	movs	r1, #0
 8004b06:	2078      	movs	r0, #120	@ 0x78
 8004b08:	f000 f97c 	bl	8004e04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2078      	movs	r0, #120	@ 0x78
 8004b12:	f000 f977 	bl	8004e04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004b16:	2210      	movs	r2, #16
 8004b18:	2100      	movs	r1, #0
 8004b1a:	2078      	movs	r0, #120	@ 0x78
 8004b1c:	f000 f972 	bl	8004e04 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	01db      	lsls	r3, r3, #7
 8004b24:	4a08      	ldr	r2, [pc, #32]	@ (8004b48 <SSD1306_UpdateScreen+0x58>)
 8004b26:	441a      	add	r2, r3
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	2140      	movs	r1, #64	@ 0x40
 8004b2c:	2078      	movs	r0, #120	@ 0x78
 8004b2e:	f000 f903 	bl	8004d38 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	3301      	adds	r3, #1
 8004b36:	71fb      	strb	r3, [r7, #7]
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	2b07      	cmp	r3, #7
 8004b3c:	d9de      	bls.n	8004afc <SSD1306_UpdateScreen+0xc>
	}
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000964 	.word	0x20000964

08004b4c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <SSD1306_Fill+0x14>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e000      	b.n	8004b62 <SSD1306_Fill+0x16>
 8004b60:	23ff      	movs	r3, #255	@ 0xff
 8004b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b66:	4619      	mov	r1, r3
 8004b68:	4803      	ldr	r0, [pc, #12]	@ (8004b78 <SSD1306_Fill+0x2c>)
 8004b6a:	f006 f90c 	bl	800ad86 <memset>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000964 	.word	0x20000964

08004b7c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	80fb      	strh	r3, [r7, #6]
 8004b86:	460b      	mov	r3, r1
 8004b88:	80bb      	strh	r3, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	70fb      	strb	r3, [r7, #3]
	if (
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b92:	d848      	bhi.n	8004c26 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004b94:	88bb      	ldrh	r3, [r7, #4]
 8004b96:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b98:	d845      	bhi.n	8004c26 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004b9a:	4b26      	ldr	r3, [pc, #152]	@ (8004c34 <SSD1306_DrawPixel+0xb8>)
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d11a      	bne.n	8004bec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004bb6:	88fa      	ldrh	r2, [r7, #6]
 8004bb8:	88bb      	ldrh	r3, [r7, #4]
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	b298      	uxth	r0, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	01db      	lsls	r3, r3, #7
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <SSD1306_DrawPixel+0xbc>)
 8004bc6:	5cd3      	ldrb	r3, [r2, r3]
 8004bc8:	b25a      	sxtb	r2, r3
 8004bca:	88bb      	ldrh	r3, [r7, #4]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b259      	sxtb	r1, r3
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	4603      	mov	r3, r0
 8004be0:	01db      	lsls	r3, r3, #7
 8004be2:	4413      	add	r3, r2
 8004be4:	b2c9      	uxtb	r1, r1
 8004be6:	4a14      	ldr	r2, [pc, #80]	@ (8004c38 <SSD1306_DrawPixel+0xbc>)
 8004be8:	54d1      	strb	r1, [r2, r3]
 8004bea:	e01d      	b.n	8004c28 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	88bb      	ldrh	r3, [r7, #4]
 8004bf0:	08db      	lsrs	r3, r3, #3
 8004bf2:	b298      	uxth	r0, r3
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	01db      	lsls	r3, r3, #7
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8004c38 <SSD1306_DrawPixel+0xbc>)
 8004bfc:	5cd3      	ldrb	r3, [r2, r3]
 8004bfe:	b25a      	sxtb	r2, r3
 8004c00:	88bb      	ldrh	r3, [r7, #4]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	2101      	movs	r1, #1
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	4013      	ands	r3, r2
 8004c14:	b259      	sxtb	r1, r3
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	4603      	mov	r3, r0
 8004c1a:	01db      	lsls	r3, r3, #7
 8004c1c:	4413      	add	r3, r2
 8004c1e:	b2c9      	uxtb	r1, r1
 8004c20:	4a05      	ldr	r2, [pc, #20]	@ (8004c38 <SSD1306_DrawPixel+0xbc>)
 8004c22:	54d1      	strb	r1, [r2, r3]
 8004c24:	e000      	b.n	8004c28 <SSD1306_DrawPixel+0xac>
		return;
 8004c26:	bf00      	nop
	}
}
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000d64 	.word	0x20000d64
 8004c38:	20000964 	.word	0x20000964

08004c3c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60ba      	str	r2, [r7, #8]
 8004c44:	461a      	mov	r2, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	81fb      	strh	r3, [r7, #14]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	81bb      	strh	r3, [r7, #12]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c56:	3307      	adds	r3, #7
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	da00      	bge.n	8004c5e <SSD1306_DrawBitmap+0x22>
 8004c5c:	3307      	adds	r3, #7
 8004c5e:	10db      	asrs	r3, r3, #3
 8004c60:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	82bb      	strh	r3, [r7, #20]
 8004c6a:	e044      	b.n	8004cf6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	827b      	strh	r3, [r7, #18]
 8004c70:	e02f      	b.n	8004cd2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8004c72:	8a7b      	ldrh	r3, [r7, #18]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
 8004c82:	e012      	b.n	8004caa <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004c84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c88:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004c8c:	fb03 f202 	mul.w	r2, r3, r2
 8004c90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da00      	bge.n	8004c9a <SSD1306_DrawBitmap+0x5e>
 8004c98:	3307      	adds	r3, #7
 8004c9a:	10db      	asrs	r3, r3, #3
 8004c9c:	b21b      	sxth	r3, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da09      	bge.n	8004cc6 <SSD1306_DrawBitmap+0x8a>
 8004cb2:	89fa      	ldrh	r2, [r7, #14]
 8004cb4:	8a7b      	ldrh	r3, [r7, #18]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	89b9      	ldrh	r1, [r7, #12]
 8004cbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff ff5b 	bl	8004b7c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8004cc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3301      	adds	r3, #1
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	827b      	strh	r3, [r7, #18]
 8004cd2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	dbc9      	blt.n	8004c72 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8004cde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	82bb      	strh	r3, [r7, #20]
 8004cea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	81bb      	strh	r3, [r7, #12]
 8004cf6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004cfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	dbb4      	blt.n	8004c6c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004d12:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <ssd1306_I2C_Init+0x28>)
 8004d14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004d16:	e002      	b.n	8004d1e <ssd1306_I2C_Init+0x12>
		p--;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f9      	bne.n	8004d18 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	0003d090 	.word	0x0003d090

08004d38 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b0c7      	sub	sp, #284	@ 0x11c
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	4604      	mov	r4, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004d46:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8004d4a:	600a      	str	r2, [r1, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d52:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004d56:	4622      	mov	r2, r4
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d5e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004d62:	4602      	mov	r2, r0
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d6e:	460a      	mov	r2, r1
 8004d70:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d7a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004d7e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004d8c:	e015      	b.n	8004dba <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8004d8e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004d92:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004d96:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004da2:	3301      	adds	r3, #1
 8004da4:	7811      	ldrb	r1, [r2, #0]
 8004da6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004daa:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004dae:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004db0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004db4:	3301      	adds	r3, #1
 8004db6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004dba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004dc4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8004dc8:	8812      	ldrh	r2, [r2, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d8df      	bhi.n	8004d8e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8004dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004dd2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	b299      	uxth	r1, r3
 8004dda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004dde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f107 020c 	add.w	r2, r7, #12
 8004dec:	200a      	movs	r0, #10
 8004dee:	9000      	str	r0, [sp, #0]
 8004df0:	4803      	ldr	r0, [pc, #12]	@ (8004e00 <ssd1306_I2C_WriteMulti+0xc8>)
 8004df2:	f001 fc63 	bl	80066bc <HAL_I2C_Master_Transmit>
}
 8004df6:	bf00      	nop
 8004df8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd90      	pop	{r4, r7, pc}
 8004e00:	20000300 	.word	0x20000300

08004e04 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	71bb      	strb	r3, [r7, #6]
 8004e12:	4613      	mov	r3, r2
 8004e14:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004e16:	79bb      	ldrb	r3, [r7, #6]
 8004e18:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004e1a:	797b      	ldrb	r3, [r7, #5]
 8004e1c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	b299      	uxth	r1, r3
 8004e22:	f107 020c 	add.w	r2, r7, #12
 8004e26:	230a      	movs	r3, #10
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	4803      	ldr	r0, [pc, #12]	@ (8004e3c <ssd1306_I2C_Write+0x38>)
 8004e2e:	f001 fc45 	bl	80066bc <HAL_I2C_Master_Transmit>
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000300 	.word	0x20000300

08004e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e44:	4b0e      	ldr	r3, [pc, #56]	@ (8004e80 <HAL_Init+0x40>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0d      	ldr	r2, [pc, #52]	@ (8004e80 <HAL_Init+0x40>)
 8004e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e50:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <HAL_Init+0x40>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a0a      	ldr	r2, [pc, #40]	@ (8004e80 <HAL_Init+0x40>)
 8004e56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e5c:	4b08      	ldr	r3, [pc, #32]	@ (8004e80 <HAL_Init+0x40>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a07      	ldr	r2, [pc, #28]	@ (8004e80 <HAL_Init+0x40>)
 8004e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e68:	2003      	movs	r0, #3
 8004e6a:	f000 fd5f 	bl	800592c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f000 f808 	bl	8004e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e74:	f7fe ff22 	bl	8003cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40023c00 	.word	0x40023c00

08004e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <HAL_InitTick+0x54>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <HAL_InitTick+0x58>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fd77 	bl	8005996 <HAL_SYSTICK_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00e      	b.n	8004ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d80a      	bhi.n	8004ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	f000 fd3f 	bl	8005942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ec4:	4a06      	ldr	r2, [pc, #24]	@ (8004ee0 <HAL_InitTick+0x5c>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e000      	b.n	8004ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000014 	.word	0x20000014
 8004edc:	2000001c 	.word	0x2000001c
 8004ee0:	20000018 	.word	0x20000018

08004ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ee8:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_IncTick+0x20>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_IncTick+0x24>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a04      	ldr	r2, [pc, #16]	@ (8004f08 <HAL_IncTick+0x24>)
 8004ef6:	6013      	str	r3, [r2, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000001c 	.word	0x2000001c
 8004f08:	20000d6c 	.word	0x20000d6c

08004f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f10:	4b03      	ldr	r3, [pc, #12]	@ (8004f20 <HAL_GetTick+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000d6c 	.word	0x20000d6c

08004f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f2c:	f7ff ffee 	bl	8004f0c <HAL_GetTick>
 8004f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d005      	beq.n	8004f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <HAL_Delay+0x44>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f4a:	bf00      	nop
 8004f4c:	f7ff ffde 	bl	8004f0c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d8f7      	bhi.n	8004f4c <HAL_Delay+0x28>
  {
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	2000001c 	.word	0x2000001c

08004f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e033      	b.n	8004fea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fe febe 	bl	8003d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d118      	bne.n	8004fdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004fb2:	f023 0302 	bic.w	r3, r3, #2
 8004fb6:	f043 0202 	orr.w	r2, r3, #2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fae8 	bl	8005594 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	f043 0201 	orr.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fda:	e001      	b.n	8004fe0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_ADC_Start+0x1a>
 800500a:	2302      	movs	r3, #2
 800500c:	e0b2      	b.n	8005174 <HAL_ADC_Start+0x180>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d018      	beq.n	8005056 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005034:	4b52      	ldr	r3, [pc, #328]	@ (8005180 <HAL_ADC_Start+0x18c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a52      	ldr	r2, [pc, #328]	@ (8005184 <HAL_ADC_Start+0x190>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0c9a      	lsrs	r2, r3, #18
 8005040:	4613      	mov	r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4413      	add	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005048:	e002      	b.n	8005050 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3b01      	subs	r3, #1
 800504e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f9      	bne.n	800504a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d17a      	bne.n	800515a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800508e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a2:	d106      	bne.n	80050b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a8:	f023 0206 	bic.w	r2, r3, #6
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80050b0:	e002      	b.n	80050b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050c0:	4b31      	ldr	r3, [pc, #196]	@ (8005188 <HAL_ADC_Start+0x194>)
 80050c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80050cc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d12a      	bne.n	8005130 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2b      	ldr	r2, [pc, #172]	@ (800518c <HAL_ADC_Start+0x198>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d015      	beq.n	8005110 <HAL_ADC_Start+0x11c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a29      	ldr	r2, [pc, #164]	@ (8005190 <HAL_ADC_Start+0x19c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d105      	bne.n	80050fa <HAL_ADC_Start+0x106>
 80050ee:	4b26      	ldr	r3, [pc, #152]	@ (8005188 <HAL_ADC_Start+0x194>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a25      	ldr	r2, [pc, #148]	@ (8005194 <HAL_ADC_Start+0x1a0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d136      	bne.n	8005172 <HAL_ADC_Start+0x17e>
 8005104:	4b20      	ldr	r3, [pc, #128]	@ (8005188 <HAL_ADC_Start+0x194>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d130      	bne.n	8005172 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d129      	bne.n	8005172 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800512c:	609a      	str	r2, [r3, #8]
 800512e:	e020      	b.n	8005172 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a15      	ldr	r2, [pc, #84]	@ (800518c <HAL_ADC_Start+0x198>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d11b      	bne.n	8005172 <HAL_ADC_Start+0x17e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d114      	bne.n	8005172 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	e00b      	b.n	8005172 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f043 0210 	orr.w	r2, r3, #16
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f043 0201 	orr.w	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000014 	.word	0x20000014
 8005184:	431bde83 	.word	0x431bde83
 8005188:	40012300 	.word	0x40012300
 800518c:	40012000 	.word	0x40012000
 8005190:	40012100 	.word	0x40012100
 8005194:	40012200 	.word	0x40012200

08005198 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_ADC_Stop+0x16>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e021      	b.n	80051f2 <HAL_ADC_Stop+0x5a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	f043 0201 	orr.w	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521a:	d113      	bne.n	8005244 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522a:	d10b      	bne.n	8005244 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e063      	b.n	800530c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005244:	f7ff fe62 	bl	8004f0c <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800524a:	e021      	b.n	8005290 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d01d      	beq.n	8005290 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_ADC_PollForConversion+0x6c>
 800525a:	f7ff fe57 	bl	8004f0c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d212      	bcs.n	8005290 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d00b      	beq.n	8005290 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527c:	f043 0204 	orr.w	r2, r3, #4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e03d      	b.n	800530c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b02      	cmp	r3, #2
 800529c:	d1d6      	bne.n	800524c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0212 	mvn.w	r2, #18
 80052a6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d123      	bne.n	800530a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d11f      	bne.n	800530a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d111      	bne.n	800530a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d105      	bne.n	800530a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f043 0201 	orr.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_ADC_ConfigChannel+0x1c>
 8005348:	2302      	movs	r3, #2
 800534a:	e113      	b.n	8005574 <HAL_ADC_ConfigChannel+0x244>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b09      	cmp	r3, #9
 800535a:	d925      	bls.n	80053a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68d9      	ldr	r1, [r3, #12]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	4613      	mov	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	3b1e      	subs	r3, #30
 8005372:	2207      	movs	r2, #7
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	43da      	mvns	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	400a      	ands	r2, r1
 8005380:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68d9      	ldr	r1, [r3, #12]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	4618      	mov	r0, r3
 8005394:	4603      	mov	r3, r0
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4403      	add	r3, r0
 800539a:	3b1e      	subs	r3, #30
 800539c:	409a      	lsls	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e022      	b.n	80053ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6919      	ldr	r1, [r3, #16]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	2207      	movs	r2, #7
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43da      	mvns	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	400a      	ands	r2, r1
 80053ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6919      	ldr	r1, [r3, #16]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4403      	add	r3, r0
 80053e4:	409a      	lsls	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d824      	bhi.n	8005440 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	3b05      	subs	r3, #5
 8005408:	221f      	movs	r2, #31
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43da      	mvns	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	400a      	ands	r2, r1
 8005416:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	4618      	mov	r0, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	3b05      	subs	r3, #5
 8005432:	fa00 f203 	lsl.w	r2, r0, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	635a      	str	r2, [r3, #52]	@ 0x34
 800543e:	e04c      	b.n	80054da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b0c      	cmp	r3, #12
 8005446:	d824      	bhi.n	8005492 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	3b23      	subs	r3, #35	@ 0x23
 800545a:	221f      	movs	r2, #31
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43da      	mvns	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	400a      	ands	r2, r1
 8005468:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	4618      	mov	r0, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	3b23      	subs	r3, #35	@ 0x23
 8005484:	fa00 f203 	lsl.w	r2, r0, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005490:	e023      	b.n	80054da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	3b41      	subs	r3, #65	@ 0x41
 80054a4:	221f      	movs	r2, #31
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	400a      	ands	r2, r1
 80054b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	4618      	mov	r0, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	3b41      	subs	r3, #65	@ 0x41
 80054ce:	fa00 f203 	lsl.w	r2, r0, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054da:	4b29      	ldr	r3, [pc, #164]	@ (8005580 <HAL_ADC_ConfigChannel+0x250>)
 80054dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a28      	ldr	r2, [pc, #160]	@ (8005584 <HAL_ADC_ConfigChannel+0x254>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10f      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x1d8>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b12      	cmp	r3, #18
 80054ee:	d10b      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <HAL_ADC_ConfigChannel+0x254>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d12b      	bne.n	800556a <HAL_ADC_ConfigChannel+0x23a>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1c      	ldr	r2, [pc, #112]	@ (8005588 <HAL_ADC_ConfigChannel+0x258>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <HAL_ADC_ConfigChannel+0x1f4>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b11      	cmp	r3, #17
 8005522:	d122      	bne.n	800556a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <HAL_ADC_ConfigChannel+0x258>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d111      	bne.n	800556a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005546:	4b11      	ldr	r3, [pc, #68]	@ (800558c <HAL_ADC_ConfigChannel+0x25c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <HAL_ADC_ConfigChannel+0x260>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	0c9a      	lsrs	r2, r3, #18
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800555c:	e002      	b.n	8005564 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3b01      	subs	r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f9      	bne.n	800555e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40012300 	.word	0x40012300
 8005584:	40012000 	.word	0x40012000
 8005588:	10000012 	.word	0x10000012
 800558c:	20000014 	.word	0x20000014
 8005590:	431bde83 	.word	0x431bde83

08005594 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800559c:	4b79      	ldr	r3, [pc, #484]	@ (8005784 <ADC_Init+0x1f0>)
 800559e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6859      	ldr	r1, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	021a      	lsls	r2, r3, #8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80055ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800560e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6899      	ldr	r1, [r3, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	4a58      	ldr	r2, [pc, #352]	@ (8005788 <ADC_Init+0x1f4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800563a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6899      	ldr	r1, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800565c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6899      	ldr	r1, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
 8005670:	e00f      	b.n	8005692 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005690:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0202 	bic.w	r2, r2, #2
 80056a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6899      	ldr	r1, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	7e1b      	ldrb	r3, [r3, #24]
 80056ac:	005a      	lsls	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01b      	beq.n	80056f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80056de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	3b01      	subs	r3, #1
 80056ec:	035a      	lsls	r2, r3, #13
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	e007      	b.n	8005708 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	3b01      	subs	r3, #1
 8005724:	051a      	lsls	r2, r3, #20
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800573c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6899      	ldr	r1, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800574a:	025a      	lsls	r2, r3, #9
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6899      	ldr	r1, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	029a      	lsls	r2, r3, #10
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	40012300 	.word	0x40012300
 8005788:	0f000001 	.word	0x0f000001

0800578c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800579c:	4b0c      	ldr	r3, [pc, #48]	@ (80057d0 <__NVIC_SetPriorityGrouping+0x44>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057a8:	4013      	ands	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057be:	4a04      	ldr	r2, [pc, #16]	@ (80057d0 <__NVIC_SetPriorityGrouping+0x44>)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	60d3      	str	r3, [r2, #12]
}
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057d8:	4b04      	ldr	r3, [pc, #16]	@ (80057ec <__NVIC_GetPriorityGrouping+0x18>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	0a1b      	lsrs	r3, r3, #8
 80057de:	f003 0307 	and.w	r3, r3, #7
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	e000ed00 	.word	0xe000ed00

080057f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	db0b      	blt.n	800581a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	f003 021f 	and.w	r2, r3, #31
 8005808:	4907      	ldr	r1, [pc, #28]	@ (8005828 <__NVIC_EnableIRQ+0x38>)
 800580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	2001      	movs	r0, #1
 8005812:	fa00 f202 	lsl.w	r2, r0, r2
 8005816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000e100 	.word	0xe000e100

0800582c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	6039      	str	r1, [r7, #0]
 8005836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583c:	2b00      	cmp	r3, #0
 800583e:	db0a      	blt.n	8005856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	490c      	ldr	r1, [pc, #48]	@ (8005878 <__NVIC_SetPriority+0x4c>)
 8005846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584a:	0112      	lsls	r2, r2, #4
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	440b      	add	r3, r1
 8005850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005854:	e00a      	b.n	800586c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4908      	ldr	r1, [pc, #32]	@ (800587c <__NVIC_SetPriority+0x50>)
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	3b04      	subs	r3, #4
 8005864:	0112      	lsls	r2, r2, #4
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	440b      	add	r3, r1
 800586a:	761a      	strb	r2, [r3, #24]
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000e100 	.word	0xe000e100
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005880:	b480      	push	{r7}
 8005882:	b089      	sub	sp, #36	@ 0x24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f1c3 0307 	rsb	r3, r3, #7
 800589a:	2b04      	cmp	r3, #4
 800589c:	bf28      	it	cs
 800589e:	2304      	movcs	r3, #4
 80058a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3304      	adds	r3, #4
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d902      	bls.n	80058b0 <NVIC_EncodePriority+0x30>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3b03      	subs	r3, #3
 80058ae:	e000      	b.n	80058b2 <NVIC_EncodePriority+0x32>
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43da      	mvns	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	401a      	ands	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058c8:	f04f 31ff 	mov.w	r1, #4294967295
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	43d9      	mvns	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d8:	4313      	orrs	r3, r2
         );
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3724      	adds	r7, #36	@ 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f8:	d301      	bcc.n	80058fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058fa:	2301      	movs	r3, #1
 80058fc:	e00f      	b.n	800591e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005928 <SysTick_Config+0x40>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3b01      	subs	r3, #1
 8005904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005906:	210f      	movs	r1, #15
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	f7ff ff8e 	bl	800582c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005910:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <SysTick_Config+0x40>)
 8005912:	2200      	movs	r2, #0
 8005914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005916:	4b04      	ldr	r3, [pc, #16]	@ (8005928 <SysTick_Config+0x40>)
 8005918:	2207      	movs	r2, #7
 800591a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000e010 	.word	0xe000e010

0800592c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff ff29 	bl	800578c <__NVIC_SetPriorityGrouping>
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	4603      	mov	r3, r0
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005954:	f7ff ff3e 	bl	80057d4 <__NVIC_GetPriorityGrouping>
 8005958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	6978      	ldr	r0, [r7, #20]
 8005960:	f7ff ff8e 	bl	8005880 <NVIC_EncodePriority>
 8005964:	4602      	mov	r2, r0
 8005966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff5d 	bl	800582c <__NVIC_SetPriority>
}
 8005972:	bf00      	nop
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	4603      	mov	r3, r0
 8005982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ff31 	bl	80057f0 <__NVIC_EnableIRQ>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff ffa2 	bl	80058e8 <SysTick_Config>
 80059a4:	4603      	mov	r3, r0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059bc:	f7ff faa6 	bl	8004f0c <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e099      	b.n	8005b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ec:	e00f      	b.n	8005a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ee:	f7ff fa8d 	bl	8004f0c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d908      	bls.n	8005a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2203      	movs	r2, #3
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e078      	b.n	8005b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e8      	bne.n	80059ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4b38      	ldr	r3, [pc, #224]	@ (8005b08 <HAL_DMA_Init+0x158>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d107      	bne.n	8005a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a70:	4313      	orrs	r3, r2
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d117      	bne.n	8005ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fa7b 	bl	8005fb0 <DMA_CheckFifoParam>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	@ 0x40
 8005ac4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e016      	b.n	8005b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa32 	bl	8005f44 <DMA_CalcBaseAndBitshift>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae8:	223f      	movs	r2, #63	@ 0x3f
 8005aea:	409a      	lsls	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	f010803f 	.word	0xf010803f

08005b0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b1a:	f7ff f9f7 	bl	8004f0c <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d008      	beq.n	8005b3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2280      	movs	r2, #128	@ 0x80
 8005b30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e052      	b.n	8005be4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0216 	bic.w	r2, r2, #22
 8005b4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <HAL_DMA_Abort+0x62>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0208 	bic.w	r2, r2, #8
 8005b7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b8e:	e013      	b.n	8005bb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b90:	f7ff f9bc 	bl	8004f0c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b05      	cmp	r3, #5
 8005b9c:	d90c      	bls.n	8005bb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e015      	b.n	8005be4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e4      	bne.n	8005b90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bca:	223f      	movs	r2, #63	@ 0x3f
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d004      	beq.n	8005c0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2280      	movs	r2, #128	@ 0x80
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e00c      	b.n	8005c24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2205      	movs	r2, #5
 8005c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c3c:	4b8e      	ldr	r3, [pc, #568]	@ (8005e78 <HAL_DMA_IRQHandler+0x248>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a8e      	ldr	r2, [pc, #568]	@ (8005e7c <HAL_DMA_IRQHandler+0x24c>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0a9b      	lsrs	r3, r3, #10
 8005c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01a      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d013      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c88:	2208      	movs	r2, #8
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c94:	f043 0201 	orr.w	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d012      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f043 0202 	orr.w	r2, r3, #2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d012      	beq.n	8005d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d00:	f043 0204 	orr.w	r2, r3, #4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	409a      	lsls	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d043      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d03c      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d018      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d108      	bne.n	8005d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d024      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
 8005d5e:	e01f      	b.n	8005da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01b      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
 8005d70:	e016      	b.n	8005da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0208 	bic.w	r2, r2, #8
 8005d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da4:	2220      	movs	r2, #32
 8005da6:	409a      	lsls	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 808f 	beq.w	8005ed0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8087 	beq.w	8005ed0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b05      	cmp	r3, #5
 8005dd8:	d136      	bne.n	8005e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0216 	bic.w	r2, r2, #22
 8005de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <HAL_DMA_IRQHandler+0x1da>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0208 	bic.w	r2, r2, #8
 8005e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1e:	223f      	movs	r2, #63	@ 0x3f
 8005e20:	409a      	lsls	r2, r3
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d07e      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
        }
        return;
 8005e46:	e079      	b.n	8005f3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01d      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10d      	bne.n	8005e80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d031      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
 8005e74:	e02c      	b.n	8005ed0 <HAL_DMA_IRQHandler+0x2a0>
 8005e76:	bf00      	nop
 8005e78:	20000014 	.word	0x20000014
 8005e7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d023      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
 8005e90:	e01e      	b.n	8005ed0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0210 	bic.w	r2, r2, #16
 8005eae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d032      	beq.n	8005f3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d022      	beq.n	8005f2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d307      	bcc.n	8005f18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f2      	bne.n	8005efc <HAL_DMA_IRQHandler+0x2cc>
 8005f16:	e000      	b.n	8005f1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
 8005f3a:	e000      	b.n	8005f3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f3c:	bf00      	nop
    }
  }
}
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	3b10      	subs	r3, #16
 8005f54:	4a14      	ldr	r2, [pc, #80]	@ (8005fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f5e:	4a13      	ldr	r2, [pc, #76]	@ (8005fac <DMA_CalcBaseAndBitshift+0x68>)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d909      	bls.n	8005f86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f84:	e007      	b.n	8005f96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	aaaaaaab 	.word	0xaaaaaaab
 8005fac:	0800d4a4 	.word	0x0800d4a4

08005fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d11f      	bne.n	800600a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d856      	bhi.n	800607e <DMA_CheckFifoParam+0xce>
 8005fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <DMA_CheckFifoParam+0x28>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005fe9 	.word	0x08005fe9
 8005fdc:	08005ffb 	.word	0x08005ffb
 8005fe0:	08005fe9 	.word	0x08005fe9
 8005fe4:	0800607f 	.word	0x0800607f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d046      	beq.n	8006082 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff8:	e043      	b.n	8006082 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006002:	d140      	bne.n	8006086 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006008:	e03d      	b.n	8006086 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006012:	d121      	bne.n	8006058 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d837      	bhi.n	800608a <DMA_CheckFifoParam+0xda>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <DMA_CheckFifoParam+0x70>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006031 	.word	0x08006031
 8006024:	08006037 	.word	0x08006037
 8006028:	08006031 	.word	0x08006031
 800602c:	08006049 	.word	0x08006049
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
      break;
 8006034:	e030      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d025      	beq.n	800608e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006046:	e022      	b.n	800608e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006050:	d11f      	bne.n	8006092 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006056:	e01c      	b.n	8006092 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d903      	bls.n	8006066 <DMA_CheckFifoParam+0xb6>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d003      	beq.n	800606c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006064:	e018      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
      break;
 800606a:	e015      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	e00b      	b.n	8006096 <DMA_CheckFifoParam+0xe6>
      break;
 800607e:	bf00      	nop
 8006080:	e00a      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      break;
 8006082:	bf00      	nop
 8006084:	e008      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      break;
 8006086:	bf00      	nop
 8006088:	e006      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      break;
 800608a:	bf00      	nop
 800608c:	e004      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      break;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      break;   
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <DMA_CheckFifoParam+0xe8>
      break;
 8006096:	bf00      	nop
    }
  } 
  
  return status; 
 8006098:	7bfb      	ldrb	r3, [r7, #15]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop

080060a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b089      	sub	sp, #36	@ 0x24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
 80060c2:	e165      	b.n	8006390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060c4:	2201      	movs	r2, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4013      	ands	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	429a      	cmp	r2, r3
 80060de:	f040 8154 	bne.w	800638a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d005      	beq.n	80060fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d130      	bne.n	800615c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	2203      	movs	r2, #3
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4013      	ands	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006130:	2201      	movs	r2, #1
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4013      	ands	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	f003 0201 	and.w	r2, r3, #1
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	2b03      	cmp	r3, #3
 8006166:	d017      	beq.n	8006198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	2203      	movs	r2, #3
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4013      	ands	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d123      	bne.n	80061ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	08da      	lsrs	r2, r3, #3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3208      	adds	r2, #8
 80061ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	220f      	movs	r2, #15
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	08da      	lsrs	r2, r3, #3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3208      	adds	r2, #8
 80061e6:	69b9      	ldr	r1, [r7, #24]
 80061e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	2203      	movs	r2, #3
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43db      	mvns	r3, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4013      	ands	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0203 	and.w	r2, r3, #3
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80ae 	beq.w	800638a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	4b5d      	ldr	r3, [pc, #372]	@ (80063a8 <HAL_GPIO_Init+0x300>)
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	4a5c      	ldr	r2, [pc, #368]	@ (80063a8 <HAL_GPIO_Init+0x300>)
 8006238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800623c:	6453      	str	r3, [r2, #68]	@ 0x44
 800623e:	4b5a      	ldr	r3, [pc, #360]	@ (80063a8 <HAL_GPIO_Init+0x300>)
 8006240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800624a:	4a58      	ldr	r2, [pc, #352]	@ (80063ac <HAL_GPIO_Init+0x304>)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	089b      	lsrs	r3, r3, #2
 8006250:	3302      	adds	r3, #2
 8006252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	220f      	movs	r2, #15
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4013      	ands	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a4f      	ldr	r2, [pc, #316]	@ (80063b0 <HAL_GPIO_Init+0x308>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d025      	beq.n	80062c2 <HAL_GPIO_Init+0x21a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a4e      	ldr	r2, [pc, #312]	@ (80063b4 <HAL_GPIO_Init+0x30c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01f      	beq.n	80062be <HAL_GPIO_Init+0x216>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a4d      	ldr	r2, [pc, #308]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d019      	beq.n	80062ba <HAL_GPIO_Init+0x212>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a4c      	ldr	r2, [pc, #304]	@ (80063bc <HAL_GPIO_Init+0x314>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <HAL_GPIO_Init+0x20e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a4b      	ldr	r2, [pc, #300]	@ (80063c0 <HAL_GPIO_Init+0x318>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00d      	beq.n	80062b2 <HAL_GPIO_Init+0x20a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a4a      	ldr	r2, [pc, #296]	@ (80063c4 <HAL_GPIO_Init+0x31c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d007      	beq.n	80062ae <HAL_GPIO_Init+0x206>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a49      	ldr	r2, [pc, #292]	@ (80063c8 <HAL_GPIO_Init+0x320>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d101      	bne.n	80062aa <HAL_GPIO_Init+0x202>
 80062a6:	2306      	movs	r3, #6
 80062a8:	e00c      	b.n	80062c4 <HAL_GPIO_Init+0x21c>
 80062aa:	2307      	movs	r3, #7
 80062ac:	e00a      	b.n	80062c4 <HAL_GPIO_Init+0x21c>
 80062ae:	2305      	movs	r3, #5
 80062b0:	e008      	b.n	80062c4 <HAL_GPIO_Init+0x21c>
 80062b2:	2304      	movs	r3, #4
 80062b4:	e006      	b.n	80062c4 <HAL_GPIO_Init+0x21c>
 80062b6:	2303      	movs	r3, #3
 80062b8:	e004      	b.n	80062c4 <HAL_GPIO_Init+0x21c>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e002      	b.n	80062c4 <HAL_GPIO_Init+0x21c>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <HAL_GPIO_Init+0x21c>
 80062c2:	2300      	movs	r3, #0
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	f002 0203 	and.w	r2, r2, #3
 80062ca:	0092      	lsls	r2, r2, #2
 80062cc:	4093      	lsls	r3, r2
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062d4:	4935      	ldr	r1, [pc, #212]	@ (80063ac <HAL_GPIO_Init+0x304>)
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	089b      	lsrs	r3, r3, #2
 80062da:	3302      	adds	r3, #2
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062e2:	4b3a      	ldr	r3, [pc, #232]	@ (80063cc <HAL_GPIO_Init+0x324>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	43db      	mvns	r3, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4013      	ands	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006306:	4a31      	ldr	r2, [pc, #196]	@ (80063cc <HAL_GPIO_Init+0x324>)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800630c:	4b2f      	ldr	r3, [pc, #188]	@ (80063cc <HAL_GPIO_Init+0x324>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	43db      	mvns	r3, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	4013      	ands	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006330:	4a26      	ldr	r2, [pc, #152]	@ (80063cc <HAL_GPIO_Init+0x324>)
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006336:	4b25      	ldr	r3, [pc, #148]	@ (80063cc <HAL_GPIO_Init+0x324>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800635a:	4a1c      	ldr	r2, [pc, #112]	@ (80063cc <HAL_GPIO_Init+0x324>)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006360:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <HAL_GPIO_Init+0x324>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006384:	4a11      	ldr	r2, [pc, #68]	@ (80063cc <HAL_GPIO_Init+0x324>)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3301      	adds	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b0f      	cmp	r3, #15
 8006394:	f67f ae96 	bls.w	80060c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	3724      	adds	r7, #36	@ 0x24
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40023800 	.word	0x40023800
 80063ac:	40013800 	.word	0x40013800
 80063b0:	40020000 	.word	0x40020000
 80063b4:	40020400 	.word	0x40020400
 80063b8:	40020800 	.word	0x40020800
 80063bc:	40020c00 	.word	0x40020c00
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40021400 	.word	0x40021400
 80063c8:	40021800 	.word	0x40021800
 80063cc:	40013c00 	.word	0x40013c00

080063d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	807b      	strh	r3, [r7, #2]
 80063dc:	4613      	mov	r3, r2
 80063de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063e0:	787b      	ldrb	r3, [r7, #1]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063e6:	887a      	ldrh	r2, [r7, #2]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063ec:	e003      	b.n	80063f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063ee:	887b      	ldrh	r3, [r7, #2]
 80063f0:	041a      	lsls	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	619a      	str	r2, [r3, #24]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800640e:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006410:	695a      	ldr	r2, [r3, #20]
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	4013      	ands	r3, r2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800641a:	4a05      	ldr	r2, [pc, #20]	@ (8006430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fa fff0 	bl	8001408 <HAL_GPIO_EXTI_Callback>
  }
}
 8006428:	bf00      	nop
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40013c00 	.word	0x40013c00

08006434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e12b      	b.n	800669e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fd fc9a 	bl	8003d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2224      	movs	r2, #36	@ 0x24
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006498:	f001 fbe0 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 800649c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4a81      	ldr	r2, [pc, #516]	@ (80066a8 <HAL_I2C_Init+0x274>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d807      	bhi.n	80064b8 <HAL_I2C_Init+0x84>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a80      	ldr	r2, [pc, #512]	@ (80066ac <HAL_I2C_Init+0x278>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bf94      	ite	ls
 80064b0:	2301      	movls	r3, #1
 80064b2:	2300      	movhi	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e006      	b.n	80064c6 <HAL_I2C_Init+0x92>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a7d      	ldr	r2, [pc, #500]	@ (80066b0 <HAL_I2C_Init+0x27c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	bf94      	ite	ls
 80064c0:	2301      	movls	r3, #1
 80064c2:	2300      	movhi	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e0e7      	b.n	800669e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a78      	ldr	r2, [pc, #480]	@ (80066b4 <HAL_I2C_Init+0x280>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	0c9b      	lsrs	r3, r3, #18
 80064d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	4a6a      	ldr	r2, [pc, #424]	@ (80066a8 <HAL_I2C_Init+0x274>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d802      	bhi.n	8006508 <HAL_I2C_Init+0xd4>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	3301      	adds	r3, #1
 8006506:	e009      	b.n	800651c <HAL_I2C_Init+0xe8>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	4a69      	ldr	r2, [pc, #420]	@ (80066b8 <HAL_I2C_Init+0x284>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	099b      	lsrs	r3, r3, #6
 800651a:	3301      	adds	r3, #1
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	430b      	orrs	r3, r1
 8006522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800652e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	495c      	ldr	r1, [pc, #368]	@ (80066a8 <HAL_I2C_Init+0x274>)
 8006538:	428b      	cmp	r3, r1
 800653a:	d819      	bhi.n	8006570 <HAL_I2C_Init+0x13c>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	1e59      	subs	r1, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	fbb1 f3f3 	udiv	r3, r1, r3
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006550:	400b      	ands	r3, r1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_I2C_Init+0x138>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1e59      	subs	r1, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	fbb1 f3f3 	udiv	r3, r1, r3
 8006564:	3301      	adds	r3, #1
 8006566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800656a:	e051      	b.n	8006610 <HAL_I2C_Init+0x1dc>
 800656c:	2304      	movs	r3, #4
 800656e:	e04f      	b.n	8006610 <HAL_I2C_Init+0x1dc>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d111      	bne.n	800659c <HAL_I2C_Init+0x168>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	1e58      	subs	r0, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6859      	ldr	r1, [r3, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	440b      	add	r3, r1
 8006586:	fbb0 f3f3 	udiv	r3, r0, r3
 800658a:	3301      	adds	r3, #1
 800658c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf0c      	ite	eq
 8006594:	2301      	moveq	r3, #1
 8006596:	2300      	movne	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	e012      	b.n	80065c2 <HAL_I2C_Init+0x18e>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	1e58      	subs	r0, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6859      	ldr	r1, [r3, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	0099      	lsls	r1, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b2:	3301      	adds	r3, #1
 80065b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_I2C_Init+0x196>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e022      	b.n	8006610 <HAL_I2C_Init+0x1dc>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10e      	bne.n	80065f0 <HAL_I2C_Init+0x1bc>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1e58      	subs	r0, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	440b      	add	r3, r1
 80065e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ee:	e00f      	b.n	8006610 <HAL_I2C_Init+0x1dc>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1e58      	subs	r0, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6859      	ldr	r1, [r3, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	0099      	lsls	r1, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	fbb0 f3f3 	udiv	r3, r0, r3
 8006606:	3301      	adds	r3, #1
 8006608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	6809      	ldr	r1, [r1, #0]
 8006614:	4313      	orrs	r3, r2
 8006616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69da      	ldr	r2, [r3, #28]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800663e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6911      	ldr	r1, [r2, #16]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68d2      	ldr	r2, [r2, #12]
 800664a:	4311      	orrs	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	430b      	orrs	r3, r1
 8006652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0201 	orr.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	000186a0 	.word	0x000186a0
 80066ac:	001e847f 	.word	0x001e847f
 80066b0:	003d08ff 	.word	0x003d08ff
 80066b4:	431bde83 	.word	0x431bde83
 80066b8:	10624dd3 	.word	0x10624dd3

080066bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	461a      	mov	r2, r3
 80066c8:	460b      	mov	r3, r1
 80066ca:	817b      	strh	r3, [r7, #10]
 80066cc:	4613      	mov	r3, r2
 80066ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066d0:	f7fe fc1c 	bl	8004f0c <HAL_GetTick>
 80066d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b20      	cmp	r3, #32
 80066e0:	f040 80e0 	bne.w	80068a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	2319      	movs	r3, #25
 80066ea:	2201      	movs	r2, #1
 80066ec:	4970      	ldr	r1, [pc, #448]	@ (80068b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 ff3c 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80066fa:	2302      	movs	r3, #2
 80066fc:	e0d3      	b.n	80068a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_I2C_Master_Transmit+0x50>
 8006708:	2302      	movs	r3, #2
 800670a:	e0cc      	b.n	80068a6 <HAL_I2C_Master_Transmit+0x1ea>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b01      	cmp	r3, #1
 8006720:	d007      	beq.n	8006732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2221      	movs	r2, #33	@ 0x21
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2210      	movs	r2, #16
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	893a      	ldrh	r2, [r7, #8]
 8006762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a50      	ldr	r2, [pc, #320]	@ (80068b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006772:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006774:	8979      	ldrh	r1, [r7, #10]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fcf6 	bl	800716c <I2C_MasterRequestWrite>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e08d      	b.n	80068a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80067a0:	e066      	b.n	8006870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	6a39      	ldr	r1, [r7, #32]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fffa 	bl	80077a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d107      	bne.n	80067ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e06b      	b.n	80068a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b04      	cmp	r3, #4
 800680a:	d11b      	bne.n	8006844 <HAL_I2C_Master_Transmit+0x188>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	6a39      	ldr	r1, [r7, #32]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fff1 	bl	8007830 <I2C_WaitOnBTFFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006858:	2b04      	cmp	r3, #4
 800685a:	d107      	bne.n	800686c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800686a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e01a      	b.n	80068a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	d194      	bne.n	80067a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e000      	b.n	80068a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80068a4:	2302      	movs	r3, #2
  }
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	00100002 	.word	0x00100002
 80068b4:	ffff0000 	.word	0xffff0000

080068b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	4608      	mov	r0, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	817b      	strh	r3, [r7, #10]
 80068ca:	460b      	mov	r3, r1
 80068cc:	813b      	strh	r3, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068d2:	f7fe fb1b 	bl	8004f0c <HAL_GetTick>
 80068d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	f040 80d9 	bne.w	8006a98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	2319      	movs	r3, #25
 80068ec:	2201      	movs	r2, #1
 80068ee:	496d      	ldr	r1, [pc, #436]	@ (8006aa4 <HAL_I2C_Mem_Write+0x1ec>)
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fe3b 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
 80068fe:	e0cc      	b.n	8006a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_I2C_Mem_Write+0x56>
 800690a:	2302      	movs	r3, #2
 800690c:	e0c5      	b.n	8006a9a <HAL_I2C_Mem_Write+0x1e2>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d007      	beq.n	8006934 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2221      	movs	r2, #33	@ 0x21
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2240      	movs	r2, #64	@ 0x40
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a3a      	ldr	r2, [r7, #32]
 800695e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a4d      	ldr	r2, [pc, #308]	@ (8006aa8 <HAL_I2C_Mem_Write+0x1f0>)
 8006974:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006976:	88f8      	ldrh	r0, [r7, #6]
 8006978:	893a      	ldrh	r2, [r7, #8]
 800697a:	8979      	ldrh	r1, [r7, #10]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	4603      	mov	r3, r0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fc72 	bl	8007270 <I2C_RequestMemoryWrite>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d052      	beq.n	8006a38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e081      	b.n	8006a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 ff00 	bl	80077a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00d      	beq.n	80069c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d107      	bne.n	80069be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e06b      	b.n	8006a9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d11b      	bne.n	8006a38 <HAL_I2C_Mem_Write+0x180>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1aa      	bne.n	8006996 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fef3 	bl	8007830 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00d      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d107      	bne.n	8006a68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e016      	b.n	8006a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	e000      	b.n	8006a9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
  }
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	00100002 	.word	0x00100002
 8006aa8:	ffff0000 	.word	0xffff0000

08006aac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	@ 0x30
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	817b      	strh	r3, [r7, #10]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	813b      	strh	r3, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ac6:	f7fe fa21 	bl	8004f0c <HAL_GetTick>
 8006aca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	f040 8214 	bne.w	8006f02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2319      	movs	r3, #25
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	497b      	ldr	r1, [pc, #492]	@ (8006cd0 <HAL_I2C_Mem_Read+0x224>)
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fd41 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006af0:	2302      	movs	r3, #2
 8006af2:	e207      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_I2C_Mem_Read+0x56>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e200      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d007      	beq.n	8006b28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2222      	movs	r2, #34	@ 0x22
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2240      	movs	r2, #64	@ 0x40
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4a5b      	ldr	r2, [pc, #364]	@ (8006cd4 <HAL_I2C_Mem_Read+0x228>)
 8006b68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b6a:	88f8      	ldrh	r0, [r7, #6]
 8006b6c:	893a      	ldrh	r2, [r7, #8]
 8006b6e:	8979      	ldrh	r1, [r7, #10]
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4603      	mov	r3, r0
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fc0e 	bl	800739c <I2C_RequestMemoryRead>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e1bc      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d113      	bne.n	8006bba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b92:	2300      	movs	r3, #0
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	623b      	str	r3, [r7, #32]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	623b      	str	r3, [r7, #32]
 8006ba6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e190      	b.n	8006edc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d11b      	bne.n	8006bfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	61fb      	str	r3, [r7, #28]
 8006be6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e170      	b.n	8006edc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d11b      	bne.n	8006c3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c22:	2300      	movs	r3, #0
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	e150      	b.n	8006edc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c50:	e144      	b.n	8006edc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	f200 80f1 	bhi.w	8006e3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d123      	bne.n	8006cac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fe29 	bl	80078c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e145      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006caa:	e117      	b.n	8006edc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d14e      	bne.n	8006d52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4906      	ldr	r1, [pc, #24]	@ (8006cd8 <HAL_I2C_Mem_Read+0x22c>)
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fc54 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e11a      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
 8006cce:	bf00      	nop
 8006cd0:	00100002 	.word	0x00100002
 8006cd4:	ffff0000 	.word	0xffff0000
 8006cd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d50:	e0c4      	b.n	8006edc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	2200      	movs	r2, #0
 8006d5a:	496c      	ldr	r1, [pc, #432]	@ (8006f0c <HAL_I2C_Mem_Read+0x460>)
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fc05 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0cb      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	2200      	movs	r2, #0
 8006db6:	4955      	ldr	r1, [pc, #340]	@ (8006f0c <HAL_I2C_Mem_Read+0x460>)
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fbd7 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e09d      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e3c:	e04e      	b.n	8006edc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fd3c 	bl	80078c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e058      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d124      	bne.n	8006edc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d107      	bne.n	8006eaa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ea8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f47f aeb6 	bne.w	8006c52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e000      	b.n	8006f04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3728      	adds	r7, #40	@ 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	00010004 	.word	0x00010004

08006f10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	@ 0x28
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006f20:	f7fd fff4 	bl	8004f0c <HAL_GetTick>
 8006f24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	f040 8111 	bne.w	800715a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	2319      	movs	r3, #25
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4988      	ldr	r1, [pc, #544]	@ (8007164 <HAL_I2C_IsDeviceReady+0x254>)
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fb12 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e104      	b.n	800715c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_I2C_IsDeviceReady+0x50>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e0fd      	b.n	800715c <HAL_I2C_IsDeviceReady+0x24c>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d007      	beq.n	8006f86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0201 	orr.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2224      	movs	r2, #36	@ 0x24
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4a70      	ldr	r2, [pc, #448]	@ (8007168 <HAL_I2C_IsDeviceReady+0x258>)
 8006fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fad0 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00d      	beq.n	8006fee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe0:	d103      	bne.n	8006fea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fe8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e0b6      	b.n	800715c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fee:	897b      	ldrh	r3, [r7, #10]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ffc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006ffe:	f7fd ff85 	bl	8004f0c <HAL_GetTick>
 8007002:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b02      	cmp	r3, #2
 8007010:	bf0c      	ite	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	2300      	movne	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007028:	bf0c      	ite	eq
 800702a:	2301      	moveq	r3, #1
 800702c:	2300      	movne	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007032:	e025      	b.n	8007080 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007034:	f7fd ff6a 	bl	8004f0c <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d302      	bcc.n	800704a <HAL_I2C_IsDeviceReady+0x13a>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d103      	bne.n	8007052 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	22a0      	movs	r2, #160	@ 0xa0
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b02      	cmp	r3, #2
 800705e:	bf0c      	ite	eq
 8007060:	2301      	moveq	r3, #1
 8007062:	2300      	movne	r3, #0
 8007064:	b2db      	uxtb	r3, r3
 8007066:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2ba0      	cmp	r3, #160	@ 0xa0
 800708a:	d005      	beq.n	8007098 <HAL_I2C_IsDeviceReady+0x188>
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <HAL_I2C_IsDeviceReady+0x188>
 8007092:	7dbb      	ldrb	r3, [r7, #22]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0cd      	beq.n	8007034 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d129      	bne.n	8007102 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	2319      	movs	r3, #25
 80070da:	2201      	movs	r2, #1
 80070dc:	4921      	ldr	r1, [pc, #132]	@ (8007164 <HAL_I2C_IsDeviceReady+0x254>)
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fa44 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e036      	b.n	800715c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	e02c      	b.n	800715c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007110:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800711a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2319      	movs	r3, #25
 8007122:	2201      	movs	r2, #1
 8007124:	490f      	ldr	r1, [pc, #60]	@ (8007164 <HAL_I2C_IsDeviceReady+0x254>)
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fa20 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e012      	b.n	800715c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	3301      	adds	r3, #1
 800713a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	f4ff af32 	bcc.w	8006faa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800715a:	2302      	movs	r3, #2
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	00100002 	.word	0x00100002
 8007168:	ffff0000 	.word	0xffff0000

0800716c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	607a      	str	r2, [r7, #4]
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	460b      	mov	r3, r1
 800717a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d006      	beq.n	8007196 <I2C_MasterRequestWrite+0x2a>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d003      	beq.n	8007196 <I2C_MasterRequestWrite+0x2a>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007194:	d108      	bne.n	80071a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e00b      	b.n	80071c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ac:	2b12      	cmp	r3, #18
 80071ae:	d107      	bne.n	80071c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f9cd 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00d      	beq.n	80071f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e6:	d103      	bne.n	80071f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e035      	b.n	8007260 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071fc:	d108      	bne.n	8007210 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071fe:	897b      	ldrh	r3, [r7, #10]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800720c:	611a      	str	r2, [r3, #16]
 800720e:	e01b      	b.n	8007248 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007210:	897b      	ldrh	r3, [r7, #10]
 8007212:	11db      	asrs	r3, r3, #7
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 0306 	and.w	r3, r3, #6
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f063 030f 	orn	r3, r3, #15
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	490e      	ldr	r1, [pc, #56]	@ (8007268 <I2C_MasterRequestWrite+0xfc>)
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fa16 	bl	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e010      	b.n	8007260 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800723e:	897b      	ldrh	r3, [r7, #10]
 8007240:	b2da      	uxtb	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	4907      	ldr	r1, [pc, #28]	@ (800726c <I2C_MasterRequestWrite+0x100>)
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fa06 	bl	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	00010008 	.word	0x00010008
 800726c:	00010002 	.word	0x00010002

08007270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	461a      	mov	r2, r3
 800727e:	4603      	mov	r3, r0
 8007280:	817b      	strh	r3, [r7, #10]
 8007282:	460b      	mov	r3, r1
 8007284:	813b      	strh	r3, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f960 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00d      	beq.n	80072ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c0:	d103      	bne.n	80072ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e05f      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072ce:	897b      	ldrh	r3, [r7, #10]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	492d      	ldr	r1, [pc, #180]	@ (8007398 <I2C_RequestMemoryWrite+0x128>)
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f9bb 	bl	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e04c      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800730a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800730c:	6a39      	ldr	r1, [r7, #32]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fa46 	bl	80077a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731e:	2b04      	cmp	r3, #4
 8007320:	d107      	bne.n	8007332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e02b      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007336:	88fb      	ldrh	r3, [r7, #6]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d105      	bne.n	8007348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800733c:	893b      	ldrh	r3, [r7, #8]
 800733e:	b2da      	uxtb	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	611a      	str	r2, [r3, #16]
 8007346:	e021      	b.n	800738c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007348:	893b      	ldrh	r3, [r7, #8]
 800734a:	0a1b      	lsrs	r3, r3, #8
 800734c:	b29b      	uxth	r3, r3
 800734e:	b2da      	uxtb	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007358:	6a39      	ldr	r1, [r7, #32]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fa20 	bl	80077a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00d      	beq.n	8007382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736a:	2b04      	cmp	r3, #4
 800736c:	d107      	bne.n	800737e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800737c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e005      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007382:	893b      	ldrh	r3, [r7, #8]
 8007384:	b2da      	uxtb	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	00010002 	.word	0x00010002

0800739c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	4608      	mov	r0, r1
 80073a6:	4611      	mov	r1, r2
 80073a8:	461a      	mov	r2, r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	817b      	strh	r3, [r7, #10]
 80073ae:	460b      	mov	r3, r1
 80073b0:	813b      	strh	r3, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	2200      	movs	r2, #0
 80073de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f8c2 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073fc:	d103      	bne.n	8007406 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007404:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e0aa      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800740a:	897b      	ldrh	r3, [r7, #10]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	6a3a      	ldr	r2, [r7, #32]
 800741e:	4952      	ldr	r1, [pc, #328]	@ (8007568 <I2C_RequestMemoryRead+0x1cc>)
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f91d 	bl	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e097      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007448:	6a39      	ldr	r1, [r7, #32]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 f9a8 	bl	80077a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00d      	beq.n	8007472 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	2b04      	cmp	r3, #4
 800745c:	d107      	bne.n	800746e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e076      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d105      	bne.n	8007484 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007478:	893b      	ldrh	r3, [r7, #8]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	611a      	str	r2, [r3, #16]
 8007482:	e021      	b.n	80074c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007484:	893b      	ldrh	r3, [r7, #8]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	b29b      	uxth	r3, r3
 800748a:	b2da      	uxtb	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007494:	6a39      	ldr	r1, [r7, #32]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f982 	bl	80077a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d107      	bne.n	80074ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e050      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074be:	893b      	ldrh	r3, [r7, #8]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ca:	6a39      	ldr	r1, [r7, #32]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f967 	bl	80077a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00d      	beq.n	80074f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d107      	bne.n	80074f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e035      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007502:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2200      	movs	r2, #0
 800750c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f82b 	bl	800756c <I2C_WaitOnFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800752a:	d103      	bne.n	8007534 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e013      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007538:	897b      	ldrh	r3, [r7, #10]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	6a3a      	ldr	r2, [r7, #32]
 800754c:	4906      	ldr	r1, [pc, #24]	@ (8007568 <I2C_RequestMemoryRead+0x1cc>)
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f886 	bl	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	00010002 	.word	0x00010002

0800756c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	4613      	mov	r3, r2
 800757a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800757c:	e048      	b.n	8007610 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d044      	beq.n	8007610 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007586:	f7fd fcc1 	bl	8004f0c <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d302      	bcc.n	800759c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d139      	bne.n	8007610 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	0c1b      	lsrs	r3, r3, #16
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d10d      	bne.n	80075c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	43da      	mvns	r2, r3
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4013      	ands	r3, r2
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	e00c      	b.n	80075dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	43da      	mvns	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4013      	ands	r3, r2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d116      	bne.n	8007610 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e023      	b.n	8007658 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	0c1b      	lsrs	r3, r3, #16
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	d10d      	bne.n	8007636 <I2C_WaitOnFlagUntilTimeout+0xca>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	43da      	mvns	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4013      	ands	r3, r2
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf0c      	ite	eq
 800762c:	2301      	moveq	r3, #1
 800762e:	2300      	movne	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	e00c      	b.n	8007650 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	43da      	mvns	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4013      	ands	r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf0c      	ite	eq
 8007648:	2301      	moveq	r3, #1
 800764a:	2300      	movne	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	429a      	cmp	r2, r3
 8007654:	d093      	beq.n	800757e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800766e:	e071      	b.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800767a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767e:	d123      	bne.n	80076c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800768e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b4:	f043 0204 	orr.w	r2, r3, #4
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e067      	b.n	8007798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d041      	beq.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d0:	f7fd fc1c 	bl	8004f0c <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d302      	bcc.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d136      	bne.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10c      	bne.n	800770a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	43da      	mvns	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4013      	ands	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf14      	ite	ne
 8007702:	2301      	movne	r3, #1
 8007704:	2300      	moveq	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	e00b      	b.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	43da      	mvns	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4013      	ands	r3, r2
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf14      	ite	ne
 800771c:	2301      	movne	r3, #1
 800771e:	2300      	moveq	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d016      	beq.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2220      	movs	r2, #32
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007740:	f043 0220 	orr.w	r2, r3, #32
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e021      	b.n	8007798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	0c1b      	lsrs	r3, r3, #16
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	d10c      	bne.n	8007778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	43da      	mvns	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4013      	ands	r3, r2
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	bf14      	ite	ne
 8007770:	2301      	movne	r3, #1
 8007772:	2300      	moveq	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e00b      	b.n	8007790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	43da      	mvns	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	f47f af6d 	bne.w	8007670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077ac:	e034      	b.n	8007818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f8e3 	bl	800797a <I2C_IsAcknowledgeFailed>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e034      	b.n	8007828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d028      	beq.n	8007818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c6:	f7fd fba1 	bl	8004f0c <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11d      	bne.n	8007818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e6:	2b80      	cmp	r3, #128	@ 0x80
 80077e8:	d016      	beq.n	8007818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007804:	f043 0220 	orr.w	r2, r3, #32
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e007      	b.n	8007828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007822:	2b80      	cmp	r3, #128	@ 0x80
 8007824:	d1c3      	bne.n	80077ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800783c:	e034      	b.n	80078a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f89b 	bl	800797a <I2C_IsAcknowledgeFailed>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e034      	b.n	80078b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007854:	d028      	beq.n	80078a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007856:	f7fd fb59 	bl	8004f0c <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	429a      	cmp	r2, r3
 8007864:	d302      	bcc.n	800786c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11d      	bne.n	80078a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b04      	cmp	r3, #4
 8007878:	d016      	beq.n	80078a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007894:	f043 0220 	orr.w	r2, r3, #32
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e007      	b.n	80078b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f003 0304 	and.w	r3, r3, #4
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d1c3      	bne.n	800783e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078cc:	e049      	b.n	8007962 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d119      	bne.n	8007910 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0210 	mvn.w	r2, #16
 80078e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e030      	b.n	8007972 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007910:	f7fd fafc 	bl	8004f0c <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	429a      	cmp	r2, r3
 800791e:	d302      	bcc.n	8007926 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d11d      	bne.n	8007962 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007930:	2b40      	cmp	r3, #64	@ 0x40
 8007932:	d016      	beq.n	8007962 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	f043 0220 	orr.w	r2, r3, #32
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e007      	b.n	8007972 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796c:	2b40      	cmp	r3, #64	@ 0x40
 800796e:	d1ae      	bne.n	80078ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800798c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007990:	d11b      	bne.n	80079ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800799a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b6:	f043 0204 	orr.w	r2, r3, #4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80079e2:	2300      	movs	r3, #0
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	4b20      	ldr	r3, [pc, #128]	@ (8007a68 <HAL_PWREx_EnableOverDrive+0x90>)
 80079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007a68 <HAL_PWREx_EnableOverDrive+0x90>)
 80079ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80079f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a68 <HAL_PWREx_EnableOverDrive+0x90>)
 80079f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80079fe:	4b1b      	ldr	r3, [pc, #108]	@ (8007a6c <HAL_PWREx_EnableOverDrive+0x94>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a04:	f7fd fa82 	bl	8004f0c <HAL_GetTick>
 8007a08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a0a:	e009      	b.n	8007a20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a0c:	f7fd fa7e 	bl	8004f0c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a1a:	d901      	bls.n	8007a20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e01f      	b.n	8007a60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a20:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x98>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2c:	d1ee      	bne.n	8007a0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007a2e:	4b11      	ldr	r3, [pc, #68]	@ (8007a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a34:	f7fd fa6a 	bl	8004f0c <HAL_GetTick>
 8007a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a3a:	e009      	b.n	8007a50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a3c:	f7fd fa66 	bl	8004f0c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a4a:	d901      	bls.n	8007a50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e007      	b.n	8007a60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x98>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a5c:	d1ee      	bne.n	8007a3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	420e0040 	.word	0x420e0040
 8007a70:	40007000 	.word	0x40007000
 8007a74:	420e0044 	.word	0x420e0044

08007a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0cc      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a8c:	4b68      	ldr	r3, [pc, #416]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d90c      	bls.n	8007ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9a:	4b65      	ldr	r3, [pc, #404]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa2:	4b63      	ldr	r3, [pc, #396]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d001      	beq.n	8007ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0b8      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d020      	beq.n	8007b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007acc:	4b59      	ldr	r3, [pc, #356]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4a58      	ldr	r2, [pc, #352]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ad6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ae4:	4b53      	ldr	r3, [pc, #332]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4a52      	ldr	r2, [pc, #328]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007aea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af0:	4b50      	ldr	r3, [pc, #320]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	494d      	ldr	r1, [pc, #308]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d044      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d107      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b16:	4b47      	ldr	r3, [pc, #284]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d119      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e07f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d003      	beq.n	8007b36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d107      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b36:	4b3f      	ldr	r3, [pc, #252]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e06f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b46:	4b3b      	ldr	r3, [pc, #236]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e067      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b56:	4b37      	ldr	r3, [pc, #220]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 0203 	bic.w	r2, r3, #3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4934      	ldr	r1, [pc, #208]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b68:	f7fd f9d0 	bl	8004f0c <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b70:	f7fd f9cc 	bl	8004f0c <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e04f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b86:	4b2b      	ldr	r3, [pc, #172]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 020c 	and.w	r2, r3, #12
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d1eb      	bne.n	8007b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b98:	4b25      	ldr	r3, [pc, #148]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d20c      	bcs.n	8007bc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba6:	4b22      	ldr	r3, [pc, #136]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bae:	4b20      	ldr	r3, [pc, #128]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d001      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e032      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bcc:	4b19      	ldr	r3, [pc, #100]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4916      	ldr	r1, [pc, #88]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bea:	4b12      	ldr	r3, [pc, #72]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	490e      	ldr	r1, [pc, #56]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bfe:	f000 f855 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8007c02:	4602      	mov	r2, r0
 8007c04:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	091b      	lsrs	r3, r3, #4
 8007c0a:	f003 030f 	and.w	r3, r3, #15
 8007c0e:	490a      	ldr	r1, [pc, #40]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c0>)
 8007c10:	5ccb      	ldrb	r3, [r1, r3]
 8007c12:	fa22 f303 	lsr.w	r3, r2, r3
 8007c16:	4a09      	ldr	r2, [pc, #36]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c4>)
 8007c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007c1a:	4b09      	ldr	r3, [pc, #36]	@ (8007c40 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd f930 	bl	8004e84 <HAL_InitTick>

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40023c00 	.word	0x40023c00
 8007c34:	40023800 	.word	0x40023800
 8007c38:	0800d08c 	.word	0x0800d08c
 8007c3c:	20000014 	.word	0x20000014
 8007c40:	20000018 	.word	0x20000018

08007c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c48:	4b03      	ldr	r3, [pc, #12]	@ (8007c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000014 	.word	0x20000014

08007c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c60:	f7ff fff0 	bl	8007c44 <HAL_RCC_GetHCLKFreq>
 8007c64:	4602      	mov	r2, r0
 8007c66:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	0a9b      	lsrs	r3, r3, #10
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	4903      	ldr	r1, [pc, #12]	@ (8007c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c72:	5ccb      	ldrb	r3, [r1, r3]
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	0800d09c 	.word	0x0800d09c

08007c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c88:	f7ff ffdc 	bl	8007c44 <HAL_RCC_GetHCLKFreq>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	0b5b      	lsrs	r3, r3, #13
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	4903      	ldr	r1, [pc, #12]	@ (8007ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c9a:	5ccb      	ldrb	r3, [r1, r3]
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	0800d09c 	.word	0x0800d09c

08007cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb0:	b0ae      	sub	sp, #184	@ 0xb8
 8007cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cd2:	4bcb      	ldr	r3, [pc, #812]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
 8007cda:	2b0c      	cmp	r3, #12
 8007cdc:	f200 8206 	bhi.w	80080ec <HAL_RCC_GetSysClockFreq+0x440>
 8007ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce6:	bf00      	nop
 8007ce8:	08007d1d 	.word	0x08007d1d
 8007cec:	080080ed 	.word	0x080080ed
 8007cf0:	080080ed 	.word	0x080080ed
 8007cf4:	080080ed 	.word	0x080080ed
 8007cf8:	08007d25 	.word	0x08007d25
 8007cfc:	080080ed 	.word	0x080080ed
 8007d00:	080080ed 	.word	0x080080ed
 8007d04:	080080ed 	.word	0x080080ed
 8007d08:	08007d2d 	.word	0x08007d2d
 8007d0c:	080080ed 	.word	0x080080ed
 8007d10:	080080ed 	.word	0x080080ed
 8007d14:	080080ed 	.word	0x080080ed
 8007d18:	08007f1d 	.word	0x08007f1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d1c:	4bb9      	ldr	r3, [pc, #740]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007d22:	e1e7      	b.n	80080f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d24:	4bb8      	ldr	r3, [pc, #736]	@ (8008008 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007d2a:	e1e3      	b.n	80080f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d2c:	4bb4      	ldr	r3, [pc, #720]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d38:	4bb1      	ldr	r3, [pc, #708]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d071      	beq.n	8007e28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d44:	4bae      	ldr	r3, [pc, #696]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	099b      	lsrs	r3, r3, #6
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	f04f 0000 	mov.w	r0, #0
 8007d72:	f04f 0100 	mov.w	r1, #0
 8007d76:	0159      	lsls	r1, r3, #5
 8007d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d7c:	0150      	lsls	r0, r2, #5
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4621      	mov	r1, r4
 8007d84:	1a51      	subs	r1, r2, r1
 8007d86:	6439      	str	r1, [r7, #64]	@ 0x40
 8007d88:	4629      	mov	r1, r5
 8007d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8007d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	018b      	lsls	r3, r1, #6
 8007da0:	4641      	mov	r1, r8
 8007da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007da6:	4641      	mov	r1, r8
 8007da8:	018a      	lsls	r2, r1, #6
 8007daa:	4641      	mov	r1, r8
 8007dac:	1a51      	subs	r1, r2, r1
 8007dae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007db0:	4649      	mov	r1, r9
 8007db2:	eb63 0301 	sbc.w	r3, r3, r1
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	f04f 0300 	mov.w	r3, #0
 8007dc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	00cb      	lsls	r3, r1, #3
 8007dc8:	4641      	mov	r1, r8
 8007dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dce:	4641      	mov	r1, r8
 8007dd0:	00ca      	lsls	r2, r1, #3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4622      	mov	r2, r4
 8007dda:	189b      	adds	r3, r3, r2
 8007ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dde:	462b      	mov	r3, r5
 8007de0:	460a      	mov	r2, r1
 8007de2:	eb42 0303 	adc.w	r3, r2, r3
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007df4:	4629      	mov	r1, r5
 8007df6:	024b      	lsls	r3, r1, #9
 8007df8:	4621      	mov	r1, r4
 8007dfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007dfe:	4621      	mov	r1, r4
 8007e00:	024a      	lsls	r2, r1, #9
 8007e02:	4610      	mov	r0, r2
 8007e04:	4619      	mov	r1, r3
 8007e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007e18:	f7f8 ff36 	bl	8000c88 <__aeabi_uldivmod>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4613      	mov	r3, r2
 8007e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e26:	e067      	b.n	8007ef8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e28:	4b75      	ldr	r3, [pc, #468]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	099b      	lsrs	r3, r3, #6
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e34:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e42:	2300      	movs	r3, #0
 8007e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	f04f 0000 	mov.w	r0, #0
 8007e52:	f04f 0100 	mov.w	r1, #0
 8007e56:	0159      	lsls	r1, r3, #5
 8007e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e5c:	0150      	lsls	r0, r2, #5
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	4621      	mov	r1, r4
 8007e64:	1a51      	subs	r1, r2, r1
 8007e66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007e68:	4629      	mov	r1, r5
 8007e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8007e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	f04f 0300 	mov.w	r3, #0
 8007e78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	018b      	lsls	r3, r1, #6
 8007e80:	4641      	mov	r1, r8
 8007e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e86:	4641      	mov	r1, r8
 8007e88:	018a      	lsls	r2, r1, #6
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e90:	4649      	mov	r1, r9
 8007e92:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ea2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ea6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eaa:	4692      	mov	sl, r2
 8007eac:	469b      	mov	fp, r3
 8007eae:	4623      	mov	r3, r4
 8007eb0:	eb1a 0303 	adds.w	r3, sl, r3
 8007eb4:	623b      	str	r3, [r7, #32]
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007eca:	4629      	mov	r1, r5
 8007ecc:	028b      	lsls	r3, r1, #10
 8007ece:	4621      	mov	r1, r4
 8007ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	028a      	lsls	r2, r1, #10
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4619      	mov	r1, r3
 8007edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ee4:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ee6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007eea:	f7f8 fecd 	bl	8000c88 <__aeabi_uldivmod>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007ef8:	4b41      	ldr	r3, [pc, #260]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	0c1b      	lsrs	r3, r3, #16
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	3301      	adds	r3, #1
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8007f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f1a:	e0eb      	b.n	80080f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f1c:	4b38      	ldr	r3, [pc, #224]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f28:	4b35      	ldr	r3, [pc, #212]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d06b      	beq.n	800800c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f34:	4b32      	ldr	r3, [pc, #200]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	099b      	lsrs	r3, r3, #6
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f48:	2300      	movs	r3, #0
 8007f4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	f04f 0000 	mov.w	r0, #0
 8007f58:	f04f 0100 	mov.w	r1, #0
 8007f5c:	0159      	lsls	r1, r3, #5
 8007f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f62:	0150      	lsls	r0, r2, #5
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4621      	mov	r1, r4
 8007f6a:	1a51      	subs	r1, r2, r1
 8007f6c:	61b9      	str	r1, [r7, #24]
 8007f6e:	4629      	mov	r1, r5
 8007f70:	eb63 0301 	sbc.w	r3, r3, r1
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	f04f 0300 	mov.w	r3, #0
 8007f7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007f82:	4659      	mov	r1, fp
 8007f84:	018b      	lsls	r3, r1, #6
 8007f86:	4651      	mov	r1, sl
 8007f88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f8c:	4651      	mov	r1, sl
 8007f8e:	018a      	lsls	r2, r1, #6
 8007f90:	4651      	mov	r1, sl
 8007f92:	ebb2 0801 	subs.w	r8, r2, r1
 8007f96:	4659      	mov	r1, fp
 8007f98:	eb63 0901 	sbc.w	r9, r3, r1
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fb0:	4690      	mov	r8, r2
 8007fb2:	4699      	mov	r9, r3
 8007fb4:	4623      	mov	r3, r4
 8007fb6:	eb18 0303 	adds.w	r3, r8, r3
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	eb49 0303 	adc.w	r3, r9, r3
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	024b      	lsls	r3, r1, #9
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fda:	4621      	mov	r1, r4
 8007fdc:	024a      	lsls	r2, r1, #9
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ff0:	f7f8 fe4a 	bl	8000c88 <__aeabi_uldivmod>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ffe:	e065      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x420>
 8008000:	40023800 	.word	0x40023800
 8008004:	00f42400 	.word	0x00f42400
 8008008:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800800c:	4b3d      	ldr	r3, [pc, #244]	@ (8008104 <HAL_RCC_GetSysClockFreq+0x458>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	099b      	lsrs	r3, r3, #6
 8008012:	2200      	movs	r2, #0
 8008014:	4618      	mov	r0, r3
 8008016:	4611      	mov	r1, r2
 8008018:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800801c:	653b      	str	r3, [r7, #80]	@ 0x50
 800801e:	2300      	movs	r3, #0
 8008020:	657b      	str	r3, [r7, #84]	@ 0x54
 8008022:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008026:	4642      	mov	r2, r8
 8008028:	464b      	mov	r3, r9
 800802a:	f04f 0000 	mov.w	r0, #0
 800802e:	f04f 0100 	mov.w	r1, #0
 8008032:	0159      	lsls	r1, r3, #5
 8008034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008038:	0150      	lsls	r0, r2, #5
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4641      	mov	r1, r8
 8008040:	1a51      	subs	r1, r2, r1
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	4649      	mov	r1, r9
 8008046:	eb63 0301 	sbc.w	r3, r3, r1
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	f04f 0300 	mov.w	r3, #0
 8008054:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008058:	4659      	mov	r1, fp
 800805a:	018b      	lsls	r3, r1, #6
 800805c:	4651      	mov	r1, sl
 800805e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008062:	4651      	mov	r1, sl
 8008064:	018a      	lsls	r2, r1, #6
 8008066:	4651      	mov	r1, sl
 8008068:	1a54      	subs	r4, r2, r1
 800806a:	4659      	mov	r1, fp
 800806c:	eb63 0501 	sbc.w	r5, r3, r1
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	00eb      	lsls	r3, r5, #3
 800807a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800807e:	00e2      	lsls	r2, r4, #3
 8008080:	4614      	mov	r4, r2
 8008082:	461d      	mov	r5, r3
 8008084:	4643      	mov	r3, r8
 8008086:	18e3      	adds	r3, r4, r3
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	464b      	mov	r3, r9
 800808c:	eb45 0303 	adc.w	r3, r5, r3
 8008090:	607b      	str	r3, [r7, #4]
 8008092:	f04f 0200 	mov.w	r2, #0
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800809e:	4629      	mov	r1, r5
 80080a0:	028b      	lsls	r3, r1, #10
 80080a2:	4621      	mov	r1, r4
 80080a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080a8:	4621      	mov	r1, r4
 80080aa:	028a      	lsls	r2, r1, #10
 80080ac:	4610      	mov	r0, r2
 80080ae:	4619      	mov	r1, r3
 80080b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b4:	2200      	movs	r2, #0
 80080b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80080ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80080be:	f7f8 fde3 	bl	8000c88 <__aeabi_uldivmod>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4613      	mov	r3, r2
 80080c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80080cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <HAL_RCC_GetSysClockFreq+0x458>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	0f1b      	lsrs	r3, r3, #28
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80080da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80080ea:	e003      	b.n	80080f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080ec:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <HAL_RCC_GetSysClockFreq+0x45c>)
 80080ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80080f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	37b8      	adds	r7, #184	@ 0xb8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008102:	bf00      	nop
 8008104:	40023800 	.word	0x40023800
 8008108:	00f42400 	.word	0x00f42400

0800810c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e28d      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 8083 	beq.w	8008232 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800812c:	4b94      	ldr	r3, [pc, #592]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 030c 	and.w	r3, r3, #12
 8008134:	2b04      	cmp	r3, #4
 8008136:	d019      	beq.n	800816c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008138:	4b91      	ldr	r3, [pc, #580]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 030c 	and.w	r3, r3, #12
        || \
 8008140:	2b08      	cmp	r3, #8
 8008142:	d106      	bne.n	8008152 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008144:	4b8e      	ldr	r3, [pc, #568]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800814c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008150:	d00c      	beq.n	800816c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008152:	4b8b      	ldr	r3, [pc, #556]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800815a:	2b0c      	cmp	r3, #12
 800815c:	d112      	bne.n	8008184 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800815e:	4b88      	ldr	r3, [pc, #544]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800816a:	d10b      	bne.n	8008184 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800816c:	4b84      	ldr	r3, [pc, #528]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d05b      	beq.n	8008230 <HAL_RCC_OscConfig+0x124>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d157      	bne.n	8008230 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e25a      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800818c:	d106      	bne.n	800819c <HAL_RCC_OscConfig+0x90>
 800818e:	4b7c      	ldr	r3, [pc, #496]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a7b      	ldr	r2, [pc, #492]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e01d      	b.n	80081d8 <HAL_RCC_OscConfig+0xcc>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081a4:	d10c      	bne.n	80081c0 <HAL_RCC_OscConfig+0xb4>
 80081a6:	4b76      	ldr	r3, [pc, #472]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a75      	ldr	r2, [pc, #468]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	4b73      	ldr	r3, [pc, #460]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a72      	ldr	r2, [pc, #456]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e00b      	b.n	80081d8 <HAL_RCC_OscConfig+0xcc>
 80081c0:	4b6f      	ldr	r3, [pc, #444]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a6e      	ldr	r2, [pc, #440]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a6b      	ldr	r2, [pc, #428]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d013      	beq.n	8008208 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fc fe94 	bl	8004f0c <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081e8:	f7fc fe90 	bl	8004f0c <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b64      	cmp	r3, #100	@ 0x64
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e21f      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081fa:	4b61      	ldr	r3, [pc, #388]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f0      	beq.n	80081e8 <HAL_RCC_OscConfig+0xdc>
 8008206:	e014      	b.n	8008232 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008208:	f7fc fe80 	bl	8004f0c <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008210:	f7fc fe7c 	bl	8004f0c <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b64      	cmp	r3, #100	@ 0x64
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e20b      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008222:	4b57      	ldr	r3, [pc, #348]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f0      	bne.n	8008210 <HAL_RCC_OscConfig+0x104>
 800822e:	e000      	b.n	8008232 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d06f      	beq.n	800831e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800823e:	4b50      	ldr	r3, [pc, #320]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b00      	cmp	r3, #0
 8008248:	d017      	beq.n	800827a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800824a:	4b4d      	ldr	r3, [pc, #308]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 030c 	and.w	r3, r3, #12
        || \
 8008252:	2b08      	cmp	r3, #8
 8008254:	d105      	bne.n	8008262 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008256:	4b4a      	ldr	r3, [pc, #296]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008262:	4b47      	ldr	r3, [pc, #284]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800826a:	2b0c      	cmp	r3, #12
 800826c:	d11c      	bne.n	80082a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800826e:	4b44      	ldr	r3, [pc, #272]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d116      	bne.n	80082a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800827a:	4b41      	ldr	r3, [pc, #260]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <HAL_RCC_OscConfig+0x186>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d001      	beq.n	8008292 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e1d3      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008292:	4b3b      	ldr	r3, [pc, #236]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	4937      	ldr	r1, [pc, #220]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082a6:	e03a      	b.n	800831e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d020      	beq.n	80082f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082b0:	4b34      	ldr	r3, [pc, #208]	@ (8008384 <HAL_RCC_OscConfig+0x278>)
 80082b2:	2201      	movs	r2, #1
 80082b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b6:	f7fc fe29 	bl	8004f0c <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082be:	f7fc fe25 	bl	8004f0c <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e1b4      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f0      	beq.n	80082be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082dc:	4b28      	ldr	r3, [pc, #160]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	4925      	ldr	r1, [pc, #148]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	600b      	str	r3, [r1, #0]
 80082f0:	e015      	b.n	800831e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082f2:	4b24      	ldr	r3, [pc, #144]	@ (8008384 <HAL_RCC_OscConfig+0x278>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f8:	f7fc fe08 	bl	8004f0c <HAL_GetTick>
 80082fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082fe:	e008      	b.n	8008312 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008300:	f7fc fe04 	bl	8004f0c <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e193      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008312:	4b1b      	ldr	r3, [pc, #108]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f0      	bne.n	8008300 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d036      	beq.n	8008398 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d016      	beq.n	8008360 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008332:	4b15      	ldr	r3, [pc, #84]	@ (8008388 <HAL_RCC_OscConfig+0x27c>)
 8008334:	2201      	movs	r2, #1
 8008336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008338:	f7fc fde8 	bl	8004f0c <HAL_GetTick>
 800833c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008340:	f7fc fde4 	bl	8004f0c <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e173      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008352:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <HAL_RCC_OscConfig+0x274>)
 8008354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f0      	beq.n	8008340 <HAL_RCC_OscConfig+0x234>
 800835e:	e01b      	b.n	8008398 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008360:	4b09      	ldr	r3, [pc, #36]	@ (8008388 <HAL_RCC_OscConfig+0x27c>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008366:	f7fc fdd1 	bl	8004f0c <HAL_GetTick>
 800836a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800836c:	e00e      	b.n	800838c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800836e:	f7fc fdcd 	bl	8004f0c <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d907      	bls.n	800838c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e15c      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
 8008380:	40023800 	.word	0x40023800
 8008384:	42470000 	.word	0x42470000
 8008388:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800838c:	4b8a      	ldr	r3, [pc, #552]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 800838e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1ea      	bne.n	800836e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8097 	beq.w	80084d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083a6:	2300      	movs	r3, #0
 80083a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083aa:	4b83      	ldr	r3, [pc, #524]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10f      	bne.n	80083d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083b6:	2300      	movs	r3, #0
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	4b7f      	ldr	r3, [pc, #508]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083be:	4a7e      	ldr	r2, [pc, #504]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80083c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80083c6:	4b7c      	ldr	r3, [pc, #496]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083ce:	60bb      	str	r3, [r7, #8]
 80083d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083d2:	2301      	movs	r3, #1
 80083d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083d6:	4b79      	ldr	r3, [pc, #484]	@ (80085bc <HAL_RCC_OscConfig+0x4b0>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d118      	bne.n	8008414 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083e2:	4b76      	ldr	r3, [pc, #472]	@ (80085bc <HAL_RCC_OscConfig+0x4b0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a75      	ldr	r2, [pc, #468]	@ (80085bc <HAL_RCC_OscConfig+0x4b0>)
 80083e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083ee:	f7fc fd8d 	bl	8004f0c <HAL_GetTick>
 80083f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f4:	e008      	b.n	8008408 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083f6:	f7fc fd89 	bl	8004f0c <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e118      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008408:	4b6c      	ldr	r3, [pc, #432]	@ (80085bc <HAL_RCC_OscConfig+0x4b0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d106      	bne.n	800842a <HAL_RCC_OscConfig+0x31e>
 800841c:	4b66      	ldr	r3, [pc, #408]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 800841e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008420:	4a65      	ldr	r2, [pc, #404]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	6713      	str	r3, [r2, #112]	@ 0x70
 8008428:	e01c      	b.n	8008464 <HAL_RCC_OscConfig+0x358>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b05      	cmp	r3, #5
 8008430:	d10c      	bne.n	800844c <HAL_RCC_OscConfig+0x340>
 8008432:	4b61      	ldr	r3, [pc, #388]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008436:	4a60      	ldr	r2, [pc, #384]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008438:	f043 0304 	orr.w	r3, r3, #4
 800843c:	6713      	str	r3, [r2, #112]	@ 0x70
 800843e:	4b5e      	ldr	r3, [pc, #376]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008442:	4a5d      	ldr	r2, [pc, #372]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008444:	f043 0301 	orr.w	r3, r3, #1
 8008448:	6713      	str	r3, [r2, #112]	@ 0x70
 800844a:	e00b      	b.n	8008464 <HAL_RCC_OscConfig+0x358>
 800844c:	4b5a      	ldr	r3, [pc, #360]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 800844e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008450:	4a59      	ldr	r2, [pc, #356]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	6713      	str	r3, [r2, #112]	@ 0x70
 8008458:	4b57      	ldr	r3, [pc, #348]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 800845a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845c:	4a56      	ldr	r2, [pc, #344]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 800845e:	f023 0304 	bic.w	r3, r3, #4
 8008462:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d015      	beq.n	8008498 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800846c:	f7fc fd4e 	bl	8004f0c <HAL_GetTick>
 8008470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008472:	e00a      	b.n	800848a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008474:	f7fc fd4a 	bl	8004f0c <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008482:	4293      	cmp	r3, r2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e0d7      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800848a:	4b4b      	ldr	r3, [pc, #300]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0ee      	beq.n	8008474 <HAL_RCC_OscConfig+0x368>
 8008496:	e014      	b.n	80084c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008498:	f7fc fd38 	bl	8004f0c <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800849e:	e00a      	b.n	80084b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a0:	f7fc fd34 	bl	8004f0c <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e0c1      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084b6:	4b40      	ldr	r3, [pc, #256]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1ee      	bne.n	80084a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d105      	bne.n	80084d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084c8:	4b3b      	ldr	r3, [pc, #236]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80084ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084cc:	4a3a      	ldr	r2, [pc, #232]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80084ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80ad 	beq.w	8008638 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084de:	4b36      	ldr	r3, [pc, #216]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 030c 	and.w	r3, r3, #12
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d060      	beq.n	80085ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d145      	bne.n	800857e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f2:	4b33      	ldr	r3, [pc, #204]	@ (80085c0 <HAL_RCC_OscConfig+0x4b4>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f8:	f7fc fd08 	bl	8004f0c <HAL_GetTick>
 80084fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008500:	f7fc fd04 	bl	8004f0c <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e093      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008512:	4b29      	ldr	r3, [pc, #164]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1f0      	bne.n	8008500 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69da      	ldr	r2, [r3, #28]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	019b      	lsls	r3, r3, #6
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008534:	085b      	lsrs	r3, r3, #1
 8008536:	3b01      	subs	r3, #1
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008540:	061b      	lsls	r3, r3, #24
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008548:	071b      	lsls	r3, r3, #28
 800854a:	491b      	ldr	r1, [pc, #108]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 800854c:	4313      	orrs	r3, r2
 800854e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008550:	4b1b      	ldr	r3, [pc, #108]	@ (80085c0 <HAL_RCC_OscConfig+0x4b4>)
 8008552:	2201      	movs	r2, #1
 8008554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008556:	f7fc fcd9 	bl	8004f0c <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800855e:	f7fc fcd5 	bl	8004f0c <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e064      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008570:	4b11      	ldr	r3, [pc, #68]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCC_OscConfig+0x452>
 800857c:	e05c      	b.n	8008638 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800857e:	4b10      	ldr	r3, [pc, #64]	@ (80085c0 <HAL_RCC_OscConfig+0x4b4>)
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008584:	f7fc fcc2 	bl	8004f0c <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800858c:	f7fc fcbe 	bl	8004f0c <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e04d      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800859e:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <HAL_RCC_OscConfig+0x4ac>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1f0      	bne.n	800858c <HAL_RCC_OscConfig+0x480>
 80085aa:	e045      	b.n	8008638 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d107      	bne.n	80085c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e040      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
 80085b8:	40023800 	.word	0x40023800
 80085bc:	40007000 	.word	0x40007000
 80085c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085c4:	4b1f      	ldr	r3, [pc, #124]	@ (8008644 <HAL_RCC_OscConfig+0x538>)
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d030      	beq.n	8008634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085dc:	429a      	cmp	r2, r3
 80085de:	d129      	bne.n	8008634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d122      	bne.n	8008634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80085f4:	4013      	ands	r3, r2
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80085fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d119      	bne.n	8008634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	3b01      	subs	r3, #1
 800860e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008610:	429a      	cmp	r2, r3
 8008612:	d10f      	bne.n	8008634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008620:	429a      	cmp	r2, r3
 8008622:	d107      	bne.n	8008634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008630:	429a      	cmp	r2, r3
 8008632:	d001      	beq.n	8008638 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	40023800 	.word	0x40023800

08008648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e041      	b.n	80086de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7fb fca8 	bl	8003fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f000 faec 	bl	8008c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <HAL_TIM_PWM_Start+0x24>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b01      	cmp	r3, #1
 8008702:	bf14      	ite	ne
 8008704:	2301      	movne	r3, #1
 8008706:	2300      	moveq	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	e022      	b.n	8008752 <HAL_TIM_PWM_Start+0x6a>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b04      	cmp	r3, #4
 8008710:	d109      	bne.n	8008726 <HAL_TIM_PWM_Start+0x3e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b01      	cmp	r3, #1
 800871c:	bf14      	ite	ne
 800871e:	2301      	movne	r3, #1
 8008720:	2300      	moveq	r3, #0
 8008722:	b2db      	uxtb	r3, r3
 8008724:	e015      	b.n	8008752 <HAL_TIM_PWM_Start+0x6a>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b08      	cmp	r3, #8
 800872a:	d109      	bne.n	8008740 <HAL_TIM_PWM_Start+0x58>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b01      	cmp	r3, #1
 8008736:	bf14      	ite	ne
 8008738:	2301      	movne	r3, #1
 800873a:	2300      	moveq	r3, #0
 800873c:	b2db      	uxtb	r3, r3
 800873e:	e008      	b.n	8008752 <HAL_TIM_PWM_Start+0x6a>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	bf14      	ite	ne
 800874c:	2301      	movne	r3, #1
 800874e:	2300      	moveq	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e07c      	b.n	8008854 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d104      	bne.n	800876a <HAL_TIM_PWM_Start+0x82>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008768:	e013      	b.n	8008792 <HAL_TIM_PWM_Start+0xaa>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b04      	cmp	r3, #4
 800876e:	d104      	bne.n	800877a <HAL_TIM_PWM_Start+0x92>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008778:	e00b      	b.n	8008792 <HAL_TIM_PWM_Start+0xaa>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b08      	cmp	r3, #8
 800877e:	d104      	bne.n	800878a <HAL_TIM_PWM_Start+0xa2>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008788:	e003      	b.n	8008792 <HAL_TIM_PWM_Start+0xaa>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2201      	movs	r2, #1
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fcbe 	bl	800911c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a2d      	ldr	r2, [pc, #180]	@ (800885c <HAL_TIM_PWM_Start+0x174>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_TIM_PWM_Start+0xcc>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008860 <HAL_TIM_PWM_Start+0x178>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d101      	bne.n	80087b8 <HAL_TIM_PWM_Start+0xd0>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <HAL_TIM_PWM_Start+0xd2>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d007      	beq.n	80087ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a22      	ldr	r2, [pc, #136]	@ (800885c <HAL_TIM_PWM_Start+0x174>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d022      	beq.n	800881e <HAL_TIM_PWM_Start+0x136>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e0:	d01d      	beq.n	800881e <HAL_TIM_PWM_Start+0x136>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008864 <HAL_TIM_PWM_Start+0x17c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d018      	beq.n	800881e <HAL_TIM_PWM_Start+0x136>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008868 <HAL_TIM_PWM_Start+0x180>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d013      	beq.n	800881e <HAL_TIM_PWM_Start+0x136>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a1c      	ldr	r2, [pc, #112]	@ (800886c <HAL_TIM_PWM_Start+0x184>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00e      	beq.n	800881e <HAL_TIM_PWM_Start+0x136>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a16      	ldr	r2, [pc, #88]	@ (8008860 <HAL_TIM_PWM_Start+0x178>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d009      	beq.n	800881e <HAL_TIM_PWM_Start+0x136>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a18      	ldr	r2, [pc, #96]	@ (8008870 <HAL_TIM_PWM_Start+0x188>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d004      	beq.n	800881e <HAL_TIM_PWM_Start+0x136>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a16      	ldr	r2, [pc, #88]	@ (8008874 <HAL_TIM_PWM_Start+0x18c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d111      	bne.n	8008842 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b06      	cmp	r3, #6
 800882e:	d010      	beq.n	8008852 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008840:	e007      	b.n	8008852 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0201 	orr.w	r2, r2, #1
 8008850:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	40010000 	.word	0x40010000
 8008860:	40010400 	.word	0x40010400
 8008864:	40000400 	.word	0x40000400
 8008868:	40000800 	.word	0x40000800
 800886c:	40000c00 	.word	0x40000c00
 8008870:	40014000 	.word	0x40014000
 8008874:	40001800 	.word	0x40001800

08008878 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e097      	b.n	80089bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fb fb15 	bl	8003ed0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6812      	ldr	r2, [r2, #0]
 80088b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088bc:	f023 0307 	bic.w	r3, r3, #7
 80088c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f000 f9c9 	bl	8008c64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	4313      	orrs	r3, r2
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008918:	f023 030c 	bic.w	r3, r3, #12
 800891c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008924:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	4313      	orrs	r3, r2
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	011a      	lsls	r2, r3, #4
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	031b      	lsls	r3, r3, #12
 8008948:	4313      	orrs	r3, r2
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008956:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800895e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	4313      	orrs	r3, r2
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d110      	bne.n	8008a16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d102      	bne.n	8008a00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80089fa:	7b7b      	ldrb	r3, [r7, #13]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d001      	beq.n	8008a04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e069      	b.n	8008ad8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a14:	e031      	b.n	8008a7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d110      	bne.n	8008a3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d102      	bne.n	8008a28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a22:	7b3b      	ldrb	r3, [r7, #12]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d001      	beq.n	8008a2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e055      	b.n	8008ad8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a3c:	e01d      	b.n	8008a7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d108      	bne.n	8008a56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d105      	bne.n	8008a56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a4a:	7b7b      	ldrb	r3, [r7, #13]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d102      	bne.n	8008a56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a50:	7b3b      	ldrb	r3, [r7, #12]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d001      	beq.n	8008a5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e03e      	b.n	8008ad8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_TIM_Encoder_Start+0xc4>
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d008      	beq.n	8008a98 <HAL_TIM_Encoder_Start+0xd4>
 8008a86:	e00f      	b.n	8008aa8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fb43 	bl	800911c <TIM_CCxChannelCmd>
      break;
 8008a96:	e016      	b.n	8008ac6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	2104      	movs	r1, #4
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fb3b 	bl	800911c <TIM_CCxChannelCmd>
      break;
 8008aa6:	e00e      	b.n	8008ac6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2201      	movs	r2, #1
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fb33 	bl	800911c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2201      	movs	r2, #1
 8008abc:	2104      	movs	r1, #4
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb2c 	bl	800911c <TIM_CCxChannelCmd>
      break;
 8008ac4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0201 	orr.w	r2, r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d101      	bne.n	8008afe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e0ae      	b.n	8008c5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b0c      	cmp	r3, #12
 8008b0a:	f200 809f 	bhi.w	8008c4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b49 	.word	0x08008b49
 8008b18:	08008c4d 	.word	0x08008c4d
 8008b1c:	08008c4d 	.word	0x08008c4d
 8008b20:	08008c4d 	.word	0x08008c4d
 8008b24:	08008b89 	.word	0x08008b89
 8008b28:	08008c4d 	.word	0x08008c4d
 8008b2c:	08008c4d 	.word	0x08008c4d
 8008b30:	08008c4d 	.word	0x08008c4d
 8008b34:	08008bcb 	.word	0x08008bcb
 8008b38:	08008c4d 	.word	0x08008c4d
 8008b3c:	08008c4d 	.word	0x08008c4d
 8008b40:	08008c4d 	.word	0x08008c4d
 8008b44:	08008c0b 	.word	0x08008c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 f934 	bl	8008dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0208 	orr.w	r2, r2, #8
 8008b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0204 	bic.w	r2, r2, #4
 8008b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6999      	ldr	r1, [r3, #24]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	619a      	str	r2, [r3, #24]
      break;
 8008b86:	e064      	b.n	8008c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 f984 	bl	8008e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699a      	ldr	r2, [r3, #24]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699a      	ldr	r2, [r3, #24]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6999      	ldr	r1, [r3, #24]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	021a      	lsls	r2, r3, #8
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	619a      	str	r2, [r3, #24]
      break;
 8008bc8:	e043      	b.n	8008c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68b9      	ldr	r1, [r7, #8]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f9d9 	bl	8008f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69da      	ldr	r2, [r3, #28]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f042 0208 	orr.w	r2, r2, #8
 8008be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69da      	ldr	r2, [r3, #28]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0204 	bic.w	r2, r2, #4
 8008bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69d9      	ldr	r1, [r3, #28]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	61da      	str	r2, [r3, #28]
      break;
 8008c08:	e023      	b.n	8008c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 fa2d 	bl	8009070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69da      	ldr	r2, [r3, #28]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69da      	ldr	r2, [r3, #28]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69d9      	ldr	r1, [r3, #28]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	021a      	lsls	r2, r3, #8
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	61da      	str	r2, [r3, #28]
      break;
 8008c4a:	e002      	b.n	8008c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a46      	ldr	r2, [pc, #280]	@ (8008d90 <TIM_Base_SetConfig+0x12c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c82:	d00f      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a43      	ldr	r2, [pc, #268]	@ (8008d94 <TIM_Base_SetConfig+0x130>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00b      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a42      	ldr	r2, [pc, #264]	@ (8008d98 <TIM_Base_SetConfig+0x134>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d007      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a41      	ldr	r2, [pc, #260]	@ (8008d9c <TIM_Base_SetConfig+0x138>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d003      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a40      	ldr	r2, [pc, #256]	@ (8008da0 <TIM_Base_SetConfig+0x13c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d108      	bne.n	8008cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a35      	ldr	r2, [pc, #212]	@ (8008d90 <TIM_Base_SetConfig+0x12c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d02b      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc4:	d027      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a32      	ldr	r2, [pc, #200]	@ (8008d94 <TIM_Base_SetConfig+0x130>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d023      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a31      	ldr	r2, [pc, #196]	@ (8008d98 <TIM_Base_SetConfig+0x134>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d01f      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a30      	ldr	r2, [pc, #192]	@ (8008d9c <TIM_Base_SetConfig+0x138>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d01b      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8008da0 <TIM_Base_SetConfig+0x13c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d017      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8008da4 <TIM_Base_SetConfig+0x140>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d013      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8008da8 <TIM_Base_SetConfig+0x144>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00f      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8008dac <TIM_Base_SetConfig+0x148>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00b      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a2b      	ldr	r2, [pc, #172]	@ (8008db0 <TIM_Base_SetConfig+0x14c>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d007      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a2a      	ldr	r2, [pc, #168]	@ (8008db4 <TIM_Base_SetConfig+0x150>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d003      	beq.n	8008d16 <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a29      	ldr	r2, [pc, #164]	@ (8008db8 <TIM_Base_SetConfig+0x154>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d108      	bne.n	8008d28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a10      	ldr	r2, [pc, #64]	@ (8008d90 <TIM_Base_SetConfig+0x12c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_Base_SetConfig+0xf8>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a12      	ldr	r2, [pc, #72]	@ (8008da0 <TIM_Base_SetConfig+0x13c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d103      	bne.n	8008d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d105      	bne.n	8008d82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f023 0201 	bic.w	r2, r3, #1
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	611a      	str	r2, [r3, #16]
  }
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40010400 	.word	0x40010400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40014400 	.word	0x40014400
 8008dac:	40014800 	.word	0x40014800
 8008db0:	40001800 	.word	0x40001800
 8008db4:	40001c00 	.word	0x40001c00
 8008db8:	40002000 	.word	0x40002000

08008dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	f023 0201 	bic.w	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0303 	bic.w	r3, r3, #3
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f023 0302 	bic.w	r3, r3, #2
 8008e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a20      	ldr	r2, [pc, #128]	@ (8008e94 <TIM_OC1_SetConfig+0xd8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC1_SetConfig+0x64>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8008e98 <TIM_OC1_SetConfig+0xdc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10c      	bne.n	8008e3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0308 	bic.w	r3, r3, #8
 8008e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f023 0304 	bic.w	r3, r3, #4
 8008e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a15      	ldr	r2, [pc, #84]	@ (8008e94 <TIM_OC1_SetConfig+0xd8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d003      	beq.n	8008e4a <TIM_OC1_SetConfig+0x8e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a14      	ldr	r2, [pc, #80]	@ (8008e98 <TIM_OC1_SetConfig+0xdc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d111      	bne.n	8008e6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400

08008e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	f023 0210 	bic.w	r2, r3, #16
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	021b      	lsls	r3, r3, #8
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f023 0320 	bic.w	r3, r3, #32
 8008ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a22      	ldr	r2, [pc, #136]	@ (8008f80 <TIM_OC2_SetConfig+0xe4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d003      	beq.n	8008f04 <TIM_OC2_SetConfig+0x68>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a21      	ldr	r2, [pc, #132]	@ (8008f84 <TIM_OC2_SetConfig+0xe8>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d10d      	bne.n	8008f20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a17      	ldr	r2, [pc, #92]	@ (8008f80 <TIM_OC2_SetConfig+0xe4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d003      	beq.n	8008f30 <TIM_OC2_SetConfig+0x94>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a16      	ldr	r2, [pc, #88]	@ (8008f84 <TIM_OC2_SetConfig+0xe8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d113      	bne.n	8008f58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	621a      	str	r2, [r3, #32]
}
 8008f72:	bf00      	nop
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	40010000 	.word	0x40010000
 8008f84:	40010400 	.word	0x40010400

08008f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0303 	bic.w	r3, r3, #3
 8008fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	021b      	lsls	r3, r3, #8
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a21      	ldr	r2, [pc, #132]	@ (8009068 <TIM_OC3_SetConfig+0xe0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d003      	beq.n	8008fee <TIM_OC3_SetConfig+0x66>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a20      	ldr	r2, [pc, #128]	@ (800906c <TIM_OC3_SetConfig+0xe4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d10d      	bne.n	800900a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a16      	ldr	r2, [pc, #88]	@ (8009068 <TIM_OC3_SetConfig+0xe0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d003      	beq.n	800901a <TIM_OC3_SetConfig+0x92>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a15      	ldr	r2, [pc, #84]	@ (800906c <TIM_OC3_SetConfig+0xe4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d113      	bne.n	8009042 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	621a      	str	r2, [r3, #32]
}
 800905c:	bf00      	nop
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	40010000 	.word	0x40010000
 800906c:	40010400 	.word	0x40010400

08009070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	031b      	lsls	r3, r3, #12
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a12      	ldr	r2, [pc, #72]	@ (8009114 <TIM_OC4_SetConfig+0xa4>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d003      	beq.n	80090d8 <TIM_OC4_SetConfig+0x68>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a11      	ldr	r2, [pc, #68]	@ (8009118 <TIM_OC4_SetConfig+0xa8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d109      	bne.n	80090ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	019b      	lsls	r3, r3, #6
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	621a      	str	r2, [r3, #32]
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40010000 	.word	0x40010000
 8009118:	40010400 	.word	0x40010400

0800911c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f003 031f 	and.w	r3, r3, #31
 800912e:	2201      	movs	r2, #1
 8009130:	fa02 f303 	lsl.w	r3, r2, r3
 8009134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a1a      	ldr	r2, [r3, #32]
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	43db      	mvns	r3, r3
 800913e:	401a      	ands	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a1a      	ldr	r2, [r3, #32]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	fa01 f303 	lsl.w	r3, r1, r3
 8009154:	431a      	orrs	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	621a      	str	r2, [r3, #32]
}
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
	...

08009168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800917c:	2302      	movs	r3, #2
 800917e:	e05a      	b.n	8009236 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a21      	ldr	r2, [pc, #132]	@ (8009244 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d022      	beq.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091cc:	d01d      	beq.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a1d      	ldr	r2, [pc, #116]	@ (8009248 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d018      	beq.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a1b      	ldr	r2, [pc, #108]	@ (800924c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d013      	beq.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a1a      	ldr	r2, [pc, #104]	@ (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d00e      	beq.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a18      	ldr	r2, [pc, #96]	@ (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d009      	beq.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a17      	ldr	r2, [pc, #92]	@ (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d004      	beq.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a15      	ldr	r2, [pc, #84]	@ (800925c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d10c      	bne.n	8009224 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	4313      	orrs	r3, r2
 800921a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	40010000 	.word	0x40010000
 8009248:	40000400 	.word	0x40000400
 800924c:	40000800 	.word	0x40000800
 8009250:	40000c00 	.word	0x40000c00
 8009254:	40010400 	.word	0x40010400
 8009258:	40014000 	.word	0x40014000
 800925c:	40001800 	.word	0x40001800

08009260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e042      	b.n	80092f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fa ff18 	bl	80040bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2224      	movs	r2, #36	@ 0x24
 8009290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fd69 	bl	8009d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	691a      	ldr	r2, [r3, #16]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695a      	ldr	r2, [r3, #20]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	@ 0x28
 8009304:	af02      	add	r7, sp, #8
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b20      	cmp	r3, #32
 800931e:	d175      	bne.n	800940c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <HAL_UART_Transmit+0x2c>
 8009326:	88fb      	ldrh	r3, [r7, #6]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e06e      	b.n	800940e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2221      	movs	r2, #33	@ 0x21
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800933e:	f7fb fde5 	bl	8004f0c <HAL_GetTick>
 8009342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	88fa      	ldrh	r2, [r7, #6]
 8009348:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	88fa      	ldrh	r2, [r7, #6]
 800934e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009358:	d108      	bne.n	800936c <HAL_UART_Transmit+0x6c>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d104      	bne.n	800936c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	61bb      	str	r3, [r7, #24]
 800936a:	e003      	b.n	8009374 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009370:	2300      	movs	r3, #0
 8009372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009374:	e02e      	b.n	80093d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2200      	movs	r2, #0
 800937e:	2180      	movs	r1, #128	@ 0x80
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fb05 	bl	8009990 <UART_WaitOnFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e03a      	b.n	800940e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10b      	bne.n	80093b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	3302      	adds	r3, #2
 80093b2:	61bb      	str	r3, [r7, #24]
 80093b4:	e007      	b.n	80093c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	781a      	ldrb	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	3301      	adds	r3, #1
 80093c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1cb      	bne.n	8009376 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2200      	movs	r2, #0
 80093e6:	2140      	movs	r1, #64	@ 0x40
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 fad1 	bl	8009990 <UART_WaitOnFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d005      	beq.n	8009400 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e006      	b.n	800940e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2220      	movs	r2, #32
 8009404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	e000      	b.n	800940e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800940c:	2302      	movs	r3, #2
  }
}
 800940e:	4618      	mov	r0, r3
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b0ba      	sub	sp, #232	@ 0xe8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800943e:	2300      	movs	r3, #0
 8009440:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009444:	2300      	movs	r3, #0
 8009446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10f      	bne.n	800947e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800945e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <HAL_UART_IRQHandler+0x66>
 800946a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fbc2 	bl	8009c00 <UART_Receive_IT>
      return;
 800947c:	e25b      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800947e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80de 	beq.w	8009644 <HAL_UART_IRQHandler+0x22c>
 8009488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009498:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 80d1 	beq.w	8009644 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <HAL_UART_IRQHandler+0xae>
 80094ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094be:	f043 0201 	orr.w	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00b      	beq.n	80094ea <HAL_UART_IRQHandler+0xd2>
 80094d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e2:	f043 0202 	orr.w	r2, r3, #2
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <HAL_UART_IRQHandler+0xf6>
 80094f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009506:	f043 0204 	orr.w	r2, r3, #4
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800950e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009512:	f003 0308 	and.w	r3, r3, #8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d011      	beq.n	800953e <HAL_UART_IRQHandler+0x126>
 800951a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d105      	bne.n	8009532 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009536:	f043 0208 	orr.w	r2, r3, #8
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 81f2 	beq.w	800992c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	d008      	beq.n	8009566 <HAL_UART_IRQHandler+0x14e>
 8009554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fb4d 	bl	8009c00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009570:	2b40      	cmp	r3, #64	@ 0x40
 8009572:	bf0c      	ite	eq
 8009574:	2301      	moveq	r3, #1
 8009576:	2300      	movne	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <HAL_UART_IRQHandler+0x17a>
 800958a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800958e:	2b00      	cmp	r3, #0
 8009590:	d04f      	beq.n	8009632 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fa55 	bl	8009a42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a2:	2b40      	cmp	r3, #64	@ 0x40
 80095a4:	d141      	bne.n	800962a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3314      	adds	r3, #20
 80095ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80095bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3314      	adds	r3, #20
 80095ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80095d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80095d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80095de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80095ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1d9      	bne.n	80095a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d013      	beq.n	8009622 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fe:	4a7e      	ldr	r2, [pc, #504]	@ (80097f8 <HAL_UART_IRQHandler+0x3e0>)
 8009600:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009606:	4618      	mov	r0, r3
 8009608:	f7fc faf0 	bl	8005bec <HAL_DMA_Abort_IT>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d016      	beq.n	8009640 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800961c:	4610      	mov	r0, r2
 800961e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009620:	e00e      	b.n	8009640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f99e 	bl	8009964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009628:	e00a      	b.n	8009640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f99a 	bl	8009964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009630:	e006      	b.n	8009640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f996 	bl	8009964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800963e:	e175      	b.n	800992c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009640:	bf00      	nop
    return;
 8009642:	e173      	b.n	800992c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009648:	2b01      	cmp	r3, #1
 800964a:	f040 814f 	bne.w	80098ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800964e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009652:	f003 0310 	and.w	r3, r3, #16
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 8148 	beq.w	80098ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800965c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8141 	beq.w	80098ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800966a:	2300      	movs	r3, #0
 800966c:	60bb      	str	r3, [r7, #8]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60bb      	str	r3, [r7, #8]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	60bb      	str	r3, [r7, #8]
 800967e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968a:	2b40      	cmp	r3, #64	@ 0x40
 800968c:	f040 80b6 	bne.w	80097fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800969c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 8145 	beq.w	8009930 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096ae:	429a      	cmp	r2, r3
 80096b0:	f080 813e 	bcs.w	8009930 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096c6:	f000 8088 	beq.w	80097da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	330c      	adds	r3, #12
 80096d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80096e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	330c      	adds	r3, #12
 80096f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80096f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009702:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800970e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1d9      	bne.n	80096ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3314      	adds	r3, #20
 800971c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009726:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009728:	f023 0301 	bic.w	r3, r3, #1
 800972c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3314      	adds	r3, #20
 8009736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800973a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800973e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009742:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800974c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e1      	bne.n	8009716 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3314      	adds	r3, #20
 8009758:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3314      	adds	r3, #20
 8009772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009776:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009778:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800977c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e3      	bne.n	8009752 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2220      	movs	r2, #32
 800978e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	330c      	adds	r3, #12
 800979e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097a2:	e853 3f00 	ldrex	r3, [r3]
 80097a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097aa:	f023 0310 	bic.w	r3, r3, #16
 80097ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	330c      	adds	r3, #12
 80097b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80097bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80097be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e3      	bne.n	8009798 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fc f999 	bl	8005b0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2202      	movs	r2, #2
 80097de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f8c1 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097f6:	e09b      	b.n	8009930 <HAL_UART_IRQHandler+0x518>
 80097f8:	08009b09 	.word	0x08009b09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009804:	b29b      	uxth	r3, r3
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 808e 	beq.w	8009934 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8089 	beq.w	8009934 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	330c      	adds	r3, #12
 8009842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009846:	647a      	str	r2, [r7, #68]	@ 0x44
 8009848:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800984c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e3      	bne.n	8009822 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3314      	adds	r3, #20
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	623b      	str	r3, [r7, #32]
   return(result);
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f023 0301 	bic.w	r3, r3, #1
 8009870:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3314      	adds	r3, #20
 800987a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800987e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800988c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e3      	bne.n	800985a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0310 	bic.w	r3, r3, #16
 80098b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	330c      	adds	r3, #12
 80098c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80098c4:	61fa      	str	r2, [r7, #28]
 80098c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	69b9      	ldr	r1, [r7, #24]
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	617b      	str	r3, [r7, #20]
   return(result);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e3      	bne.n	80098a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f847 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098ea:	e023      	b.n	8009934 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d009      	beq.n	800990c <HAL_UART_IRQHandler+0x4f4>
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f913 	bl	8009b30 <UART_Transmit_IT>
    return;
 800990a:	e014      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00e      	beq.n	8009936 <HAL_UART_IRQHandler+0x51e>
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800991c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d008      	beq.n	8009936 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f953 	bl	8009bd0 <UART_EndTransmit_IT>
    return;
 800992a:	e004      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
    return;
 800992c:	bf00      	nop
 800992e:	e002      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
      return;
 8009930:	bf00      	nop
 8009932:	e000      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
      return;
 8009934:	bf00      	nop
  }
}
 8009936:	37e8      	adds	r7, #232	@ 0xe8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4613      	mov	r3, r2
 800999e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099a0:	e03b      	b.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a8:	d037      	beq.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099aa:	f7fb faaf 	bl	8004f0c <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	6a3a      	ldr	r2, [r7, #32]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d302      	bcc.n	80099c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e03a      	b.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d023      	beq.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x8a>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b80      	cmp	r3, #128	@ 0x80
 80099d6:	d020      	beq.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x8a>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b40      	cmp	r3, #64	@ 0x40
 80099dc:	d01d      	beq.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0308 	and.w	r3, r3, #8
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d116      	bne.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 f81d 	bl	8009a42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2208      	movs	r2, #8
 8009a0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e00f      	b.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	4013      	ands	r3, r2
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	bf0c      	ite	eq
 8009a2a:	2301      	moveq	r3, #1
 8009a2c:	2300      	movne	r3, #0
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d0b4      	beq.n	80099a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b095      	sub	sp, #84	@ 0x54
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	330c      	adds	r3, #12
 8009a50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a54:	e853 3f00 	ldrex	r3, [r3]
 8009a58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	330c      	adds	r3, #12
 8009a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e5      	bne.n	8009a4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3314      	adds	r3, #20
 8009a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	e853 3f00 	ldrex	r3, [r3]
 8009a8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	f023 0301 	bic.w	r3, r3, #1
 8009a94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3314      	adds	r3, #20
 8009a9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1e5      	bne.n	8009a7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d119      	bne.n	8009aee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	330c      	adds	r3, #12
 8009ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f023 0310 	bic.w	r3, r3, #16
 8009ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	330c      	adds	r3, #12
 8009ad8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ada:	61ba      	str	r2, [r7, #24]
 8009adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6979      	ldr	r1, [r7, #20]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e5      	bne.n	8009aba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009afc:	bf00      	nop
 8009afe:	3754      	adds	r7, #84	@ 0x54
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff ff1e 	bl	8009964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b21      	cmp	r3, #33	@ 0x21
 8009b42:	d13e      	bne.n	8009bc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b4c:	d114      	bne.n	8009b78 <UART_Transmit_IT+0x48>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d110      	bne.n	8009b78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	1c9a      	adds	r2, r3, #2
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]
 8009b76:	e008      	b.n	8009b8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	1c59      	adds	r1, r3, #1
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	6211      	str	r1, [r2, #32]
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	4619      	mov	r1, r3
 8009b98:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10f      	bne.n	8009bbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e000      	b.n	8009bc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bc2:	2302      	movs	r3, #2
  }
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009be6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff fea3 	bl	800993c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08c      	sub	sp, #48	@ 0x30
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b22      	cmp	r3, #34	@ 0x22
 8009c12:	f040 80ae 	bne.w	8009d72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c1e:	d117      	bne.n	8009c50 <UART_Receive_IT+0x50>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d113      	bne.n	8009c50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c48:	1c9a      	adds	r2, r3, #2
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c4e:	e026      	b.n	8009c9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c62:	d007      	beq.n	8009c74 <UART_Receive_IT+0x74>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <UART_Receive_IT+0x82>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	e008      	b.n	8009c94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4619      	mov	r1, r3
 8009cac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d15d      	bne.n	8009d6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68da      	ldr	r2, [r3, #12]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0220 	bic.w	r2, r2, #32
 8009cc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009cd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	695a      	ldr	r2, [r3, #20]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0201 	bic.w	r2, r2, #1
 8009ce0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d135      	bne.n	8009d64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	330c      	adds	r3, #12
 8009d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f023 0310 	bic.w	r3, r3, #16
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	330c      	adds	r3, #12
 8009d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d1e:	623a      	str	r2, [r7, #32]
 8009d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	69f9      	ldr	r1, [r7, #28]
 8009d24:	6a3a      	ldr	r2, [r7, #32]
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e5      	bne.n	8009cfe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 0310 	and.w	r3, r3, #16
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d10a      	bne.n	8009d56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff fe0b 	bl	8009978 <HAL_UARTEx_RxEventCallback>
 8009d62:	e002      	b.n	8009d6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fdf3 	bl	8009950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e002      	b.n	8009d74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e000      	b.n	8009d74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d72:	2302      	movs	r3, #2
  }
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3730      	adds	r7, #48	@ 0x30
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d80:	b0c0      	sub	sp, #256	@ 0x100
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d98:	68d9      	ldr	r1, [r3, #12]
 8009d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	ea40 0301 	orr.w	r3, r0, r1
 8009da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009dd4:	f021 010c 	bic.w	r1, r1, #12
 8009dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009de2:	430b      	orrs	r3, r1
 8009de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df6:	6999      	ldr	r1, [r3, #24]
 8009df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	ea40 0301 	orr.w	r3, r0, r1
 8009e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	4b8f      	ldr	r3, [pc, #572]	@ (800a048 <UART_SetConfig+0x2cc>)
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d005      	beq.n	8009e1c <UART_SetConfig+0xa0>
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	4b8d      	ldr	r3, [pc, #564]	@ (800a04c <UART_SetConfig+0x2d0>)
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d104      	bne.n	8009e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e1c:	f7fd ff32 	bl	8007c84 <HAL_RCC_GetPCLK2Freq>
 8009e20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009e24:	e003      	b.n	8009e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e26:	f7fd ff19 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 8009e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e32:	69db      	ldr	r3, [r3, #28]
 8009e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e38:	f040 810c 	bne.w	800a054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009e4e:	4622      	mov	r2, r4
 8009e50:	462b      	mov	r3, r5
 8009e52:	1891      	adds	r1, r2, r2
 8009e54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009e56:	415b      	adcs	r3, r3
 8009e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e5e:	4621      	mov	r1, r4
 8009e60:	eb12 0801 	adds.w	r8, r2, r1
 8009e64:	4629      	mov	r1, r5
 8009e66:	eb43 0901 	adc.w	r9, r3, r1
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	f04f 0300 	mov.w	r3, #0
 8009e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e7e:	4690      	mov	r8, r2
 8009e80:	4699      	mov	r9, r3
 8009e82:	4623      	mov	r3, r4
 8009e84:	eb18 0303 	adds.w	r3, r8, r3
 8009e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	eb49 0303 	adc.w	r3, r9, r3
 8009e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009eaa:	460b      	mov	r3, r1
 8009eac:	18db      	adds	r3, r3, r3
 8009eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	eb42 0303 	adc.w	r3, r2, r3
 8009eb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ec0:	f7f6 fee2 	bl	8000c88 <__aeabi_uldivmod>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4b61      	ldr	r3, [pc, #388]	@ (800a050 <UART_SetConfig+0x2d4>)
 8009eca:	fba3 2302 	umull	r2, r3, r3, r2
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	011c      	lsls	r4, r3, #4
 8009ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009edc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	1891      	adds	r1, r2, r2
 8009eea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009eec:	415b      	adcs	r3, r3
 8009eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ef4:	4641      	mov	r1, r8
 8009ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8009efa:	4649      	mov	r1, r9
 8009efc:	eb43 0b01 	adc.w	fp, r3, r1
 8009f00:	f04f 0200 	mov.w	r2, #0
 8009f04:	f04f 0300 	mov.w	r3, #0
 8009f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f14:	4692      	mov	sl, r2
 8009f16:	469b      	mov	fp, r3
 8009f18:	4643      	mov	r3, r8
 8009f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8009f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f22:	464b      	mov	r3, r9
 8009f24:	eb4b 0303 	adc.w	r3, fp, r3
 8009f28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f40:	460b      	mov	r3, r1
 8009f42:	18db      	adds	r3, r3, r3
 8009f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f46:	4613      	mov	r3, r2
 8009f48:	eb42 0303 	adc.w	r3, r2, r3
 8009f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009f56:	f7f6 fe97 	bl	8000c88 <__aeabi_uldivmod>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	4b3b      	ldr	r3, [pc, #236]	@ (800a050 <UART_SetConfig+0x2d4>)
 8009f62:	fba3 2301 	umull	r2, r3, r3, r1
 8009f66:	095b      	lsrs	r3, r3, #5
 8009f68:	2264      	movs	r2, #100	@ 0x64
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
 8009f6e:	1acb      	subs	r3, r1, r3
 8009f70:	00db      	lsls	r3, r3, #3
 8009f72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009f76:	4b36      	ldr	r3, [pc, #216]	@ (800a050 <UART_SetConfig+0x2d4>)
 8009f78:	fba3 2302 	umull	r2, r3, r3, r2
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009f84:	441c      	add	r4, r3
 8009f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009f98:	4642      	mov	r2, r8
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	1891      	adds	r1, r2, r2
 8009f9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009fa0:	415b      	adcs	r3, r3
 8009fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009fa8:	4641      	mov	r1, r8
 8009faa:	1851      	adds	r1, r2, r1
 8009fac:	6339      	str	r1, [r7, #48]	@ 0x30
 8009fae:	4649      	mov	r1, r9
 8009fb0:	414b      	adcs	r3, r1
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009fc0:	4659      	mov	r1, fp
 8009fc2:	00cb      	lsls	r3, r1, #3
 8009fc4:	4651      	mov	r1, sl
 8009fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fca:	4651      	mov	r1, sl
 8009fcc:	00ca      	lsls	r2, r1, #3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	189b      	adds	r3, r3, r2
 8009fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fdc:	464b      	mov	r3, r9
 8009fde:	460a      	mov	r2, r1
 8009fe0:	eb42 0303 	adc.w	r3, r2, r3
 8009fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	18db      	adds	r3, r3, r3
 800a000:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a002:	4613      	mov	r3, r2
 800a004:	eb42 0303 	adc.w	r3, r2, r3
 800a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a00a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a00e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a012:	f7f6 fe39 	bl	8000c88 <__aeabi_uldivmod>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4b0d      	ldr	r3, [pc, #52]	@ (800a050 <UART_SetConfig+0x2d4>)
 800a01c:	fba3 1302 	umull	r1, r3, r3, r2
 800a020:	095b      	lsrs	r3, r3, #5
 800a022:	2164      	movs	r1, #100	@ 0x64
 800a024:	fb01 f303 	mul.w	r3, r1, r3
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	3332      	adds	r3, #50	@ 0x32
 800a02e:	4a08      	ldr	r2, [pc, #32]	@ (800a050 <UART_SetConfig+0x2d4>)
 800a030:	fba2 2303 	umull	r2, r3, r2, r3
 800a034:	095b      	lsrs	r3, r3, #5
 800a036:	f003 0207 	and.w	r2, r3, #7
 800a03a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4422      	add	r2, r4
 800a042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a044:	e106      	b.n	800a254 <UART_SetConfig+0x4d8>
 800a046:	bf00      	nop
 800a048:	40011000 	.word	0x40011000
 800a04c:	40011400 	.word	0x40011400
 800a050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a058:	2200      	movs	r2, #0
 800a05a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a05e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a066:	4642      	mov	r2, r8
 800a068:	464b      	mov	r3, r9
 800a06a:	1891      	adds	r1, r2, r2
 800a06c:	6239      	str	r1, [r7, #32]
 800a06e:	415b      	adcs	r3, r3
 800a070:	627b      	str	r3, [r7, #36]	@ 0x24
 800a072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a076:	4641      	mov	r1, r8
 800a078:	1854      	adds	r4, r2, r1
 800a07a:	4649      	mov	r1, r9
 800a07c:	eb43 0501 	adc.w	r5, r3, r1
 800a080:	f04f 0200 	mov.w	r2, #0
 800a084:	f04f 0300 	mov.w	r3, #0
 800a088:	00eb      	lsls	r3, r5, #3
 800a08a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a08e:	00e2      	lsls	r2, r4, #3
 800a090:	4614      	mov	r4, r2
 800a092:	461d      	mov	r5, r3
 800a094:	4643      	mov	r3, r8
 800a096:	18e3      	adds	r3, r4, r3
 800a098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a09c:	464b      	mov	r3, r9
 800a09e:	eb45 0303 	adc.w	r3, r5, r3
 800a0a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0b6:	f04f 0200 	mov.w	r2, #0
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	008b      	lsls	r3, r1, #2
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	008a      	lsls	r2, r1, #2
 800a0d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a0d4:	f7f6 fdd8 	bl	8000c88 <__aeabi_uldivmod>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4b60      	ldr	r3, [pc, #384]	@ (800a260 <UART_SetConfig+0x4e4>)
 800a0de:	fba3 2302 	umull	r2, r3, r3, r2
 800a0e2:	095b      	lsrs	r3, r3, #5
 800a0e4:	011c      	lsls	r4, r3, #4
 800a0e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a0f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a0f8:	4642      	mov	r2, r8
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	1891      	adds	r1, r2, r2
 800a0fe:	61b9      	str	r1, [r7, #24]
 800a100:	415b      	adcs	r3, r3
 800a102:	61fb      	str	r3, [r7, #28]
 800a104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a108:	4641      	mov	r1, r8
 800a10a:	1851      	adds	r1, r2, r1
 800a10c:	6139      	str	r1, [r7, #16]
 800a10e:	4649      	mov	r1, r9
 800a110:	414b      	adcs	r3, r1
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	f04f 0300 	mov.w	r3, #0
 800a11c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a120:	4659      	mov	r1, fp
 800a122:	00cb      	lsls	r3, r1, #3
 800a124:	4651      	mov	r1, sl
 800a126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a12a:	4651      	mov	r1, sl
 800a12c:	00ca      	lsls	r2, r1, #3
 800a12e:	4610      	mov	r0, r2
 800a130:	4619      	mov	r1, r3
 800a132:	4603      	mov	r3, r0
 800a134:	4642      	mov	r2, r8
 800a136:	189b      	adds	r3, r3, r2
 800a138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a13c:	464b      	mov	r3, r9
 800a13e:	460a      	mov	r2, r1
 800a140:	eb42 0303 	adc.w	r3, r2, r3
 800a144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a152:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	f04f 0300 	mov.w	r3, #0
 800a15c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a160:	4649      	mov	r1, r9
 800a162:	008b      	lsls	r3, r1, #2
 800a164:	4641      	mov	r1, r8
 800a166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a16a:	4641      	mov	r1, r8
 800a16c:	008a      	lsls	r2, r1, #2
 800a16e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a172:	f7f6 fd89 	bl	8000c88 <__aeabi_uldivmod>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	4b38      	ldr	r3, [pc, #224]	@ (800a260 <UART_SetConfig+0x4e4>)
 800a17e:	fba3 2301 	umull	r2, r3, r3, r1
 800a182:	095b      	lsrs	r3, r3, #5
 800a184:	2264      	movs	r2, #100	@ 0x64
 800a186:	fb02 f303 	mul.w	r3, r2, r3
 800a18a:	1acb      	subs	r3, r1, r3
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	3332      	adds	r3, #50	@ 0x32
 800a190:	4a33      	ldr	r2, [pc, #204]	@ (800a260 <UART_SetConfig+0x4e4>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	095b      	lsrs	r3, r3, #5
 800a198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a19c:	441c      	add	r4, r3
 800a19e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a1a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a1ac:	4642      	mov	r2, r8
 800a1ae:	464b      	mov	r3, r9
 800a1b0:	1891      	adds	r1, r2, r2
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	415b      	adcs	r3, r3
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1bc:	4641      	mov	r1, r8
 800a1be:	1851      	adds	r1, r2, r1
 800a1c0:	6039      	str	r1, [r7, #0]
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	414b      	adcs	r3, r1
 800a1c6:	607b      	str	r3, [r7, #4]
 800a1c8:	f04f 0200 	mov.w	r2, #0
 800a1cc:	f04f 0300 	mov.w	r3, #0
 800a1d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	00cb      	lsls	r3, r1, #3
 800a1d8:	4651      	mov	r1, sl
 800a1da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1de:	4651      	mov	r1, sl
 800a1e0:	00ca      	lsls	r2, r1, #3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	189b      	adds	r3, r3, r2
 800a1ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1ee:	464b      	mov	r3, r9
 800a1f0:	460a      	mov	r2, r1
 800a1f2:	eb42 0303 	adc.w	r3, r2, r3
 800a1f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	663b      	str	r3, [r7, #96]	@ 0x60
 800a202:	667a      	str	r2, [r7, #100]	@ 0x64
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a210:	4649      	mov	r1, r9
 800a212:	008b      	lsls	r3, r1, #2
 800a214:	4641      	mov	r1, r8
 800a216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a21a:	4641      	mov	r1, r8
 800a21c:	008a      	lsls	r2, r1, #2
 800a21e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a222:	f7f6 fd31 	bl	8000c88 <__aeabi_uldivmod>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4b0d      	ldr	r3, [pc, #52]	@ (800a260 <UART_SetConfig+0x4e4>)
 800a22c:	fba3 1302 	umull	r1, r3, r3, r2
 800a230:	095b      	lsrs	r3, r3, #5
 800a232:	2164      	movs	r1, #100	@ 0x64
 800a234:	fb01 f303 	mul.w	r3, r1, r3
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	3332      	adds	r3, #50	@ 0x32
 800a23e:	4a08      	ldr	r2, [pc, #32]	@ (800a260 <UART_SetConfig+0x4e4>)
 800a240:	fba2 2303 	umull	r2, r3, r2, r3
 800a244:	095b      	lsrs	r3, r3, #5
 800a246:	f003 020f 	and.w	r2, r3, #15
 800a24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4422      	add	r2, r4
 800a252:	609a      	str	r2, [r3, #8]
}
 800a254:	bf00      	nop
 800a256:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a25a:	46bd      	mov	sp, r7
 800a25c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a260:	51eb851f 	.word	0x51eb851f

0800a264 <__cvt>:
 800a264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	ec57 6b10 	vmov	r6, r7, d0
 800a26c:	2f00      	cmp	r7, #0
 800a26e:	460c      	mov	r4, r1
 800a270:	4619      	mov	r1, r3
 800a272:	463b      	mov	r3, r7
 800a274:	bfbb      	ittet	lt
 800a276:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a27a:	461f      	movlt	r7, r3
 800a27c:	2300      	movge	r3, #0
 800a27e:	232d      	movlt	r3, #45	@ 0x2d
 800a280:	700b      	strb	r3, [r1, #0]
 800a282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a284:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a288:	4691      	mov	r9, r2
 800a28a:	f023 0820 	bic.w	r8, r3, #32
 800a28e:	bfbc      	itt	lt
 800a290:	4632      	movlt	r2, r6
 800a292:	4616      	movlt	r6, r2
 800a294:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a298:	d005      	beq.n	800a2a6 <__cvt+0x42>
 800a29a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a29e:	d100      	bne.n	800a2a2 <__cvt+0x3e>
 800a2a0:	3401      	adds	r4, #1
 800a2a2:	2102      	movs	r1, #2
 800a2a4:	e000      	b.n	800a2a8 <__cvt+0x44>
 800a2a6:	2103      	movs	r1, #3
 800a2a8:	ab03      	add	r3, sp, #12
 800a2aa:	9301      	str	r3, [sp, #4]
 800a2ac:	ab02      	add	r3, sp, #8
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	ec47 6b10 	vmov	d0, r6, r7
 800a2b4:	4653      	mov	r3, sl
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	f000 fe8e 	bl	800afd8 <_dtoa_r>
 800a2bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	d119      	bne.n	800a2f8 <__cvt+0x94>
 800a2c4:	f019 0f01 	tst.w	r9, #1
 800a2c8:	d00e      	beq.n	800a2e8 <__cvt+0x84>
 800a2ca:	eb00 0904 	add.w	r9, r0, r4
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	f7f6 fc17 	bl	8000b08 <__aeabi_dcmpeq>
 800a2da:	b108      	cbz	r0, 800a2e0 <__cvt+0x7c>
 800a2dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2e0:	2230      	movs	r2, #48	@ 0x30
 800a2e2:	9b03      	ldr	r3, [sp, #12]
 800a2e4:	454b      	cmp	r3, r9
 800a2e6:	d31e      	bcc.n	800a326 <__cvt+0xc2>
 800a2e8:	9b03      	ldr	r3, [sp, #12]
 800a2ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2ec:	1b5b      	subs	r3, r3, r5
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	b004      	add	sp, #16
 800a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2fc:	eb00 0904 	add.w	r9, r0, r4
 800a300:	d1e5      	bne.n	800a2ce <__cvt+0x6a>
 800a302:	7803      	ldrb	r3, [r0, #0]
 800a304:	2b30      	cmp	r3, #48	@ 0x30
 800a306:	d10a      	bne.n	800a31e <__cvt+0xba>
 800a308:	2200      	movs	r2, #0
 800a30a:	2300      	movs	r3, #0
 800a30c:	4630      	mov	r0, r6
 800a30e:	4639      	mov	r1, r7
 800a310:	f7f6 fbfa 	bl	8000b08 <__aeabi_dcmpeq>
 800a314:	b918      	cbnz	r0, 800a31e <__cvt+0xba>
 800a316:	f1c4 0401 	rsb	r4, r4, #1
 800a31a:	f8ca 4000 	str.w	r4, [sl]
 800a31e:	f8da 3000 	ldr.w	r3, [sl]
 800a322:	4499      	add	r9, r3
 800a324:	e7d3      	b.n	800a2ce <__cvt+0x6a>
 800a326:	1c59      	adds	r1, r3, #1
 800a328:	9103      	str	r1, [sp, #12]
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	e7d9      	b.n	800a2e2 <__cvt+0x7e>

0800a32e <__exponent>:
 800a32e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a330:	2900      	cmp	r1, #0
 800a332:	bfba      	itte	lt
 800a334:	4249      	neglt	r1, r1
 800a336:	232d      	movlt	r3, #45	@ 0x2d
 800a338:	232b      	movge	r3, #43	@ 0x2b
 800a33a:	2909      	cmp	r1, #9
 800a33c:	7002      	strb	r2, [r0, #0]
 800a33e:	7043      	strb	r3, [r0, #1]
 800a340:	dd29      	ble.n	800a396 <__exponent+0x68>
 800a342:	f10d 0307 	add.w	r3, sp, #7
 800a346:	461d      	mov	r5, r3
 800a348:	270a      	movs	r7, #10
 800a34a:	461a      	mov	r2, r3
 800a34c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a350:	fb07 1416 	mls	r4, r7, r6, r1
 800a354:	3430      	adds	r4, #48	@ 0x30
 800a356:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a35a:	460c      	mov	r4, r1
 800a35c:	2c63      	cmp	r4, #99	@ 0x63
 800a35e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a362:	4631      	mov	r1, r6
 800a364:	dcf1      	bgt.n	800a34a <__exponent+0x1c>
 800a366:	3130      	adds	r1, #48	@ 0x30
 800a368:	1e94      	subs	r4, r2, #2
 800a36a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a36e:	1c41      	adds	r1, r0, #1
 800a370:	4623      	mov	r3, r4
 800a372:	42ab      	cmp	r3, r5
 800a374:	d30a      	bcc.n	800a38c <__exponent+0x5e>
 800a376:	f10d 0309 	add.w	r3, sp, #9
 800a37a:	1a9b      	subs	r3, r3, r2
 800a37c:	42ac      	cmp	r4, r5
 800a37e:	bf88      	it	hi
 800a380:	2300      	movhi	r3, #0
 800a382:	3302      	adds	r3, #2
 800a384:	4403      	add	r3, r0
 800a386:	1a18      	subs	r0, r3, r0
 800a388:	b003      	add	sp, #12
 800a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a390:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a394:	e7ed      	b.n	800a372 <__exponent+0x44>
 800a396:	2330      	movs	r3, #48	@ 0x30
 800a398:	3130      	adds	r1, #48	@ 0x30
 800a39a:	7083      	strb	r3, [r0, #2]
 800a39c:	70c1      	strb	r1, [r0, #3]
 800a39e:	1d03      	adds	r3, r0, #4
 800a3a0:	e7f1      	b.n	800a386 <__exponent+0x58>
	...

0800a3a4 <_printf_float>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	b08d      	sub	sp, #52	@ 0x34
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a3b0:	4616      	mov	r6, r2
 800a3b2:	461f      	mov	r7, r3
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	f000 fd01 	bl	800adbc <_localeconv_r>
 800a3ba:	6803      	ldr	r3, [r0, #0]
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f5 ff76 	bl	80002b0 <strlen>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3cc:	9005      	str	r0, [sp, #20]
 800a3ce:	3307      	adds	r3, #7
 800a3d0:	f023 0307 	bic.w	r3, r3, #7
 800a3d4:	f103 0208 	add.w	r2, r3, #8
 800a3d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3dc:	f8d4 b000 	ldr.w	fp, [r4]
 800a3e0:	f8c8 2000 	str.w	r2, [r8]
 800a3e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a3ec:	9307      	str	r3, [sp, #28]
 800a3ee:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3fa:	4b9c      	ldr	r3, [pc, #624]	@ (800a66c <_printf_float+0x2c8>)
 800a3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a400:	f7f6 fbb4 	bl	8000b6c <__aeabi_dcmpun>
 800a404:	bb70      	cbnz	r0, 800a464 <_printf_float+0xc0>
 800a406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a40a:	4b98      	ldr	r3, [pc, #608]	@ (800a66c <_printf_float+0x2c8>)
 800a40c:	f04f 32ff 	mov.w	r2, #4294967295
 800a410:	f7f6 fb8e 	bl	8000b30 <__aeabi_dcmple>
 800a414:	bb30      	cbnz	r0, 800a464 <_printf_float+0xc0>
 800a416:	2200      	movs	r2, #0
 800a418:	2300      	movs	r3, #0
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f6 fb7d 	bl	8000b1c <__aeabi_dcmplt>
 800a422:	b110      	cbz	r0, 800a42a <_printf_float+0x86>
 800a424:	232d      	movs	r3, #45	@ 0x2d
 800a426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a42a:	4a91      	ldr	r2, [pc, #580]	@ (800a670 <_printf_float+0x2cc>)
 800a42c:	4b91      	ldr	r3, [pc, #580]	@ (800a674 <_printf_float+0x2d0>)
 800a42e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a432:	bf8c      	ite	hi
 800a434:	4690      	movhi	r8, r2
 800a436:	4698      	movls	r8, r3
 800a438:	2303      	movs	r3, #3
 800a43a:	6123      	str	r3, [r4, #16]
 800a43c:	f02b 0304 	bic.w	r3, fp, #4
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	f04f 0900 	mov.w	r9, #0
 800a446:	9700      	str	r7, [sp, #0]
 800a448:	4633      	mov	r3, r6
 800a44a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a44c:	4621      	mov	r1, r4
 800a44e:	4628      	mov	r0, r5
 800a450:	f000 f9d2 	bl	800a7f8 <_printf_common>
 800a454:	3001      	adds	r0, #1
 800a456:	f040 808d 	bne.w	800a574 <_printf_float+0x1d0>
 800a45a:	f04f 30ff 	mov.w	r0, #4294967295
 800a45e:	b00d      	add	sp, #52	@ 0x34
 800a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a464:	4642      	mov	r2, r8
 800a466:	464b      	mov	r3, r9
 800a468:	4640      	mov	r0, r8
 800a46a:	4649      	mov	r1, r9
 800a46c:	f7f6 fb7e 	bl	8000b6c <__aeabi_dcmpun>
 800a470:	b140      	cbz	r0, 800a484 <_printf_float+0xe0>
 800a472:	464b      	mov	r3, r9
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfbc      	itt	lt
 800a478:	232d      	movlt	r3, #45	@ 0x2d
 800a47a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a47e:	4a7e      	ldr	r2, [pc, #504]	@ (800a678 <_printf_float+0x2d4>)
 800a480:	4b7e      	ldr	r3, [pc, #504]	@ (800a67c <_printf_float+0x2d8>)
 800a482:	e7d4      	b.n	800a42e <_printf_float+0x8a>
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a48a:	9206      	str	r2, [sp, #24]
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	d13b      	bne.n	800a508 <_printf_float+0x164>
 800a490:	2306      	movs	r3, #6
 800a492:	6063      	str	r3, [r4, #4]
 800a494:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a498:	2300      	movs	r3, #0
 800a49a:	6022      	str	r2, [r4, #0]
 800a49c:	9303      	str	r3, [sp, #12]
 800a49e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a4a4:	ab09      	add	r3, sp, #36	@ 0x24
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	6861      	ldr	r1, [r4, #4]
 800a4aa:	ec49 8b10 	vmov	d0, r8, r9
 800a4ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f7ff fed6 	bl	800a264 <__cvt>
 800a4b8:	9b06      	ldr	r3, [sp, #24]
 800a4ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4bc:	2b47      	cmp	r3, #71	@ 0x47
 800a4be:	4680      	mov	r8, r0
 800a4c0:	d129      	bne.n	800a516 <_printf_float+0x172>
 800a4c2:	1cc8      	adds	r0, r1, #3
 800a4c4:	db02      	blt.n	800a4cc <_printf_float+0x128>
 800a4c6:	6863      	ldr	r3, [r4, #4]
 800a4c8:	4299      	cmp	r1, r3
 800a4ca:	dd41      	ble.n	800a550 <_printf_float+0x1ac>
 800a4cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a4d0:	fa5f fa8a 	uxtb.w	sl, sl
 800a4d4:	3901      	subs	r1, #1
 800a4d6:	4652      	mov	r2, sl
 800a4d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4de:	f7ff ff26 	bl	800a32e <__exponent>
 800a4e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4e4:	1813      	adds	r3, r2, r0
 800a4e6:	2a01      	cmp	r2, #1
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	dc02      	bgt.n	800a4f4 <_printf_float+0x150>
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	07d2      	lsls	r2, r2, #31
 800a4f2:	d501      	bpl.n	800a4f8 <_printf_float+0x154>
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	6123      	str	r3, [r4, #16]
 800a4f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0a2      	beq.n	800a446 <_printf_float+0xa2>
 800a500:	232d      	movs	r3, #45	@ 0x2d
 800a502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a506:	e79e      	b.n	800a446 <_printf_float+0xa2>
 800a508:	9a06      	ldr	r2, [sp, #24]
 800a50a:	2a47      	cmp	r2, #71	@ 0x47
 800a50c:	d1c2      	bne.n	800a494 <_printf_float+0xf0>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1c0      	bne.n	800a494 <_printf_float+0xf0>
 800a512:	2301      	movs	r3, #1
 800a514:	e7bd      	b.n	800a492 <_printf_float+0xee>
 800a516:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a51a:	d9db      	bls.n	800a4d4 <_printf_float+0x130>
 800a51c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a520:	d118      	bne.n	800a554 <_printf_float+0x1b0>
 800a522:	2900      	cmp	r1, #0
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	dd0b      	ble.n	800a540 <_printf_float+0x19c>
 800a528:	6121      	str	r1, [r4, #16]
 800a52a:	b913      	cbnz	r3, 800a532 <_printf_float+0x18e>
 800a52c:	6822      	ldr	r2, [r4, #0]
 800a52e:	07d0      	lsls	r0, r2, #31
 800a530:	d502      	bpl.n	800a538 <_printf_float+0x194>
 800a532:	3301      	adds	r3, #1
 800a534:	440b      	add	r3, r1
 800a536:	6123      	str	r3, [r4, #16]
 800a538:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a53a:	f04f 0900 	mov.w	r9, #0
 800a53e:	e7db      	b.n	800a4f8 <_printf_float+0x154>
 800a540:	b913      	cbnz	r3, 800a548 <_printf_float+0x1a4>
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	07d2      	lsls	r2, r2, #31
 800a546:	d501      	bpl.n	800a54c <_printf_float+0x1a8>
 800a548:	3302      	adds	r3, #2
 800a54a:	e7f4      	b.n	800a536 <_printf_float+0x192>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e7f2      	b.n	800a536 <_printf_float+0x192>
 800a550:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a556:	4299      	cmp	r1, r3
 800a558:	db05      	blt.n	800a566 <_printf_float+0x1c2>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	6121      	str	r1, [r4, #16]
 800a55e:	07d8      	lsls	r0, r3, #31
 800a560:	d5ea      	bpl.n	800a538 <_printf_float+0x194>
 800a562:	1c4b      	adds	r3, r1, #1
 800a564:	e7e7      	b.n	800a536 <_printf_float+0x192>
 800a566:	2900      	cmp	r1, #0
 800a568:	bfd4      	ite	le
 800a56a:	f1c1 0202 	rsble	r2, r1, #2
 800a56e:	2201      	movgt	r2, #1
 800a570:	4413      	add	r3, r2
 800a572:	e7e0      	b.n	800a536 <_printf_float+0x192>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	055a      	lsls	r2, r3, #21
 800a578:	d407      	bmi.n	800a58a <_printf_float+0x1e6>
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	4642      	mov	r2, r8
 800a57e:	4631      	mov	r1, r6
 800a580:	4628      	mov	r0, r5
 800a582:	47b8      	blx	r7
 800a584:	3001      	adds	r0, #1
 800a586:	d12b      	bne.n	800a5e0 <_printf_float+0x23c>
 800a588:	e767      	b.n	800a45a <_printf_float+0xb6>
 800a58a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a58e:	f240 80dd 	bls.w	800a74c <_printf_float+0x3a8>
 800a592:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a596:	2200      	movs	r2, #0
 800a598:	2300      	movs	r3, #0
 800a59a:	f7f6 fab5 	bl	8000b08 <__aeabi_dcmpeq>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d033      	beq.n	800a60a <_printf_float+0x266>
 800a5a2:	4a37      	ldr	r2, [pc, #220]	@ (800a680 <_printf_float+0x2dc>)
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	47b8      	blx	r7
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	f43f af54 	beq.w	800a45a <_printf_float+0xb6>
 800a5b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a5b6:	4543      	cmp	r3, r8
 800a5b8:	db02      	blt.n	800a5c0 <_printf_float+0x21c>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	07d8      	lsls	r0, r3, #31
 800a5be:	d50f      	bpl.n	800a5e0 <_printf_float+0x23c>
 800a5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	47b8      	blx	r7
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	f43f af45 	beq.w	800a45a <_printf_float+0xb6>
 800a5d0:	f04f 0900 	mov.w	r9, #0
 800a5d4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5d8:	f104 0a1a 	add.w	sl, r4, #26
 800a5dc:	45c8      	cmp	r8, r9
 800a5de:	dc09      	bgt.n	800a5f4 <_printf_float+0x250>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	079b      	lsls	r3, r3, #30
 800a5e4:	f100 8103 	bmi.w	800a7ee <_printf_float+0x44a>
 800a5e8:	68e0      	ldr	r0, [r4, #12]
 800a5ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5ec:	4298      	cmp	r0, r3
 800a5ee:	bfb8      	it	lt
 800a5f0:	4618      	movlt	r0, r3
 800a5f2:	e734      	b.n	800a45e <_printf_float+0xba>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4652      	mov	r2, sl
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	47b8      	blx	r7
 800a5fe:	3001      	adds	r0, #1
 800a600:	f43f af2b 	beq.w	800a45a <_printf_float+0xb6>
 800a604:	f109 0901 	add.w	r9, r9, #1
 800a608:	e7e8      	b.n	800a5dc <_printf_float+0x238>
 800a60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dc39      	bgt.n	800a684 <_printf_float+0x2e0>
 800a610:	4a1b      	ldr	r2, [pc, #108]	@ (800a680 <_printf_float+0x2dc>)
 800a612:	2301      	movs	r3, #1
 800a614:	4631      	mov	r1, r6
 800a616:	4628      	mov	r0, r5
 800a618:	47b8      	blx	r7
 800a61a:	3001      	adds	r0, #1
 800a61c:	f43f af1d 	beq.w	800a45a <_printf_float+0xb6>
 800a620:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a624:	ea59 0303 	orrs.w	r3, r9, r3
 800a628:	d102      	bne.n	800a630 <_printf_float+0x28c>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	07d9      	lsls	r1, r3, #31
 800a62e:	d5d7      	bpl.n	800a5e0 <_printf_float+0x23c>
 800a630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a634:	4631      	mov	r1, r6
 800a636:	4628      	mov	r0, r5
 800a638:	47b8      	blx	r7
 800a63a:	3001      	adds	r0, #1
 800a63c:	f43f af0d 	beq.w	800a45a <_printf_float+0xb6>
 800a640:	f04f 0a00 	mov.w	sl, #0
 800a644:	f104 0b1a 	add.w	fp, r4, #26
 800a648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a64a:	425b      	negs	r3, r3
 800a64c:	4553      	cmp	r3, sl
 800a64e:	dc01      	bgt.n	800a654 <_printf_float+0x2b0>
 800a650:	464b      	mov	r3, r9
 800a652:	e793      	b.n	800a57c <_printf_float+0x1d8>
 800a654:	2301      	movs	r3, #1
 800a656:	465a      	mov	r2, fp
 800a658:	4631      	mov	r1, r6
 800a65a:	4628      	mov	r0, r5
 800a65c:	47b8      	blx	r7
 800a65e:	3001      	adds	r0, #1
 800a660:	f43f aefb 	beq.w	800a45a <_printf_float+0xb6>
 800a664:	f10a 0a01 	add.w	sl, sl, #1
 800a668:	e7ee      	b.n	800a648 <_printf_float+0x2a4>
 800a66a:	bf00      	nop
 800a66c:	7fefffff 	.word	0x7fefffff
 800a670:	0800d4b0 	.word	0x0800d4b0
 800a674:	0800d4ac 	.word	0x0800d4ac
 800a678:	0800d4b8 	.word	0x0800d4b8
 800a67c:	0800d4b4 	.word	0x0800d4b4
 800a680:	0800d4bc 	.word	0x0800d4bc
 800a684:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a686:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a68a:	4553      	cmp	r3, sl
 800a68c:	bfa8      	it	ge
 800a68e:	4653      	movge	r3, sl
 800a690:	2b00      	cmp	r3, #0
 800a692:	4699      	mov	r9, r3
 800a694:	dc36      	bgt.n	800a704 <_printf_float+0x360>
 800a696:	f04f 0b00 	mov.w	fp, #0
 800a69a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a69e:	f104 021a 	add.w	r2, r4, #26
 800a6a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6a4:	9306      	str	r3, [sp, #24]
 800a6a6:	eba3 0309 	sub.w	r3, r3, r9
 800a6aa:	455b      	cmp	r3, fp
 800a6ac:	dc31      	bgt.n	800a712 <_printf_float+0x36e>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b0:	459a      	cmp	sl, r3
 800a6b2:	dc3a      	bgt.n	800a72a <_printf_float+0x386>
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	07da      	lsls	r2, r3, #31
 800a6b8:	d437      	bmi.n	800a72a <_printf_float+0x386>
 800a6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6bc:	ebaa 0903 	sub.w	r9, sl, r3
 800a6c0:	9b06      	ldr	r3, [sp, #24]
 800a6c2:	ebaa 0303 	sub.w	r3, sl, r3
 800a6c6:	4599      	cmp	r9, r3
 800a6c8:	bfa8      	it	ge
 800a6ca:	4699      	movge	r9, r3
 800a6cc:	f1b9 0f00 	cmp.w	r9, #0
 800a6d0:	dc33      	bgt.n	800a73a <_printf_float+0x396>
 800a6d2:	f04f 0800 	mov.w	r8, #0
 800a6d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6da:	f104 0b1a 	add.w	fp, r4, #26
 800a6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a6e4:	eba3 0309 	sub.w	r3, r3, r9
 800a6e8:	4543      	cmp	r3, r8
 800a6ea:	f77f af79 	ble.w	800a5e0 <_printf_float+0x23c>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	465a      	mov	r2, fp
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b8      	blx	r7
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	f43f aeae 	beq.w	800a45a <_printf_float+0xb6>
 800a6fe:	f108 0801 	add.w	r8, r8, #1
 800a702:	e7ec      	b.n	800a6de <_printf_float+0x33a>
 800a704:	4642      	mov	r2, r8
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	d1c2      	bne.n	800a696 <_printf_float+0x2f2>
 800a710:	e6a3      	b.n	800a45a <_printf_float+0xb6>
 800a712:	2301      	movs	r3, #1
 800a714:	4631      	mov	r1, r6
 800a716:	4628      	mov	r0, r5
 800a718:	9206      	str	r2, [sp, #24]
 800a71a:	47b8      	blx	r7
 800a71c:	3001      	adds	r0, #1
 800a71e:	f43f ae9c 	beq.w	800a45a <_printf_float+0xb6>
 800a722:	9a06      	ldr	r2, [sp, #24]
 800a724:	f10b 0b01 	add.w	fp, fp, #1
 800a728:	e7bb      	b.n	800a6a2 <_printf_float+0x2fe>
 800a72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	d1c0      	bne.n	800a6ba <_printf_float+0x316>
 800a738:	e68f      	b.n	800a45a <_printf_float+0xb6>
 800a73a:	9a06      	ldr	r2, [sp, #24]
 800a73c:	464b      	mov	r3, r9
 800a73e:	4442      	add	r2, r8
 800a740:	4631      	mov	r1, r6
 800a742:	4628      	mov	r0, r5
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	d1c3      	bne.n	800a6d2 <_printf_float+0x32e>
 800a74a:	e686      	b.n	800a45a <_printf_float+0xb6>
 800a74c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a750:	f1ba 0f01 	cmp.w	sl, #1
 800a754:	dc01      	bgt.n	800a75a <_printf_float+0x3b6>
 800a756:	07db      	lsls	r3, r3, #31
 800a758:	d536      	bpl.n	800a7c8 <_printf_float+0x424>
 800a75a:	2301      	movs	r3, #1
 800a75c:	4642      	mov	r2, r8
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f ae78 	beq.w	800a45a <_printf_float+0xb6>
 800a76a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a76e:	4631      	mov	r1, r6
 800a770:	4628      	mov	r0, r5
 800a772:	47b8      	blx	r7
 800a774:	3001      	adds	r0, #1
 800a776:	f43f ae70 	beq.w	800a45a <_printf_float+0xb6>
 800a77a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a77e:	2200      	movs	r2, #0
 800a780:	2300      	movs	r3, #0
 800a782:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a786:	f7f6 f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 800a78a:	b9c0      	cbnz	r0, 800a7be <_printf_float+0x41a>
 800a78c:	4653      	mov	r3, sl
 800a78e:	f108 0201 	add.w	r2, r8, #1
 800a792:	4631      	mov	r1, r6
 800a794:	4628      	mov	r0, r5
 800a796:	47b8      	blx	r7
 800a798:	3001      	adds	r0, #1
 800a79a:	d10c      	bne.n	800a7b6 <_printf_float+0x412>
 800a79c:	e65d      	b.n	800a45a <_printf_float+0xb6>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	465a      	mov	r2, fp
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	47b8      	blx	r7
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	f43f ae56 	beq.w	800a45a <_printf_float+0xb6>
 800a7ae:	f108 0801 	add.w	r8, r8, #1
 800a7b2:	45d0      	cmp	r8, sl
 800a7b4:	dbf3      	blt.n	800a79e <_printf_float+0x3fa>
 800a7b6:	464b      	mov	r3, r9
 800a7b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7bc:	e6df      	b.n	800a57e <_printf_float+0x1da>
 800a7be:	f04f 0800 	mov.w	r8, #0
 800a7c2:	f104 0b1a 	add.w	fp, r4, #26
 800a7c6:	e7f4      	b.n	800a7b2 <_printf_float+0x40e>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4642      	mov	r2, r8
 800a7cc:	e7e1      	b.n	800a792 <_printf_float+0x3ee>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	464a      	mov	r2, r9
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	47b8      	blx	r7
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f43f ae3e 	beq.w	800a45a <_printf_float+0xb6>
 800a7de:	f108 0801 	add.w	r8, r8, #1
 800a7e2:	68e3      	ldr	r3, [r4, #12]
 800a7e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7e6:	1a5b      	subs	r3, r3, r1
 800a7e8:	4543      	cmp	r3, r8
 800a7ea:	dcf0      	bgt.n	800a7ce <_printf_float+0x42a>
 800a7ec:	e6fc      	b.n	800a5e8 <_printf_float+0x244>
 800a7ee:	f04f 0800 	mov.w	r8, #0
 800a7f2:	f104 0919 	add.w	r9, r4, #25
 800a7f6:	e7f4      	b.n	800a7e2 <_printf_float+0x43e>

0800a7f8 <_printf_common>:
 800a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	4698      	mov	r8, r3
 800a800:	688a      	ldr	r2, [r1, #8]
 800a802:	690b      	ldr	r3, [r1, #16]
 800a804:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a808:	4293      	cmp	r3, r2
 800a80a:	bfb8      	it	lt
 800a80c:	4613      	movlt	r3, r2
 800a80e:	6033      	str	r3, [r6, #0]
 800a810:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a814:	4607      	mov	r7, r0
 800a816:	460c      	mov	r4, r1
 800a818:	b10a      	cbz	r2, 800a81e <_printf_common+0x26>
 800a81a:	3301      	adds	r3, #1
 800a81c:	6033      	str	r3, [r6, #0]
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	0699      	lsls	r1, r3, #26
 800a822:	bf42      	ittt	mi
 800a824:	6833      	ldrmi	r3, [r6, #0]
 800a826:	3302      	addmi	r3, #2
 800a828:	6033      	strmi	r3, [r6, #0]
 800a82a:	6825      	ldr	r5, [r4, #0]
 800a82c:	f015 0506 	ands.w	r5, r5, #6
 800a830:	d106      	bne.n	800a840 <_printf_common+0x48>
 800a832:	f104 0a19 	add.w	sl, r4, #25
 800a836:	68e3      	ldr	r3, [r4, #12]
 800a838:	6832      	ldr	r2, [r6, #0]
 800a83a:	1a9b      	subs	r3, r3, r2
 800a83c:	42ab      	cmp	r3, r5
 800a83e:	dc26      	bgt.n	800a88e <_printf_common+0x96>
 800a840:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a844:	6822      	ldr	r2, [r4, #0]
 800a846:	3b00      	subs	r3, #0
 800a848:	bf18      	it	ne
 800a84a:	2301      	movne	r3, #1
 800a84c:	0692      	lsls	r2, r2, #26
 800a84e:	d42b      	bmi.n	800a8a8 <_printf_common+0xb0>
 800a850:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a854:	4641      	mov	r1, r8
 800a856:	4638      	mov	r0, r7
 800a858:	47c8      	blx	r9
 800a85a:	3001      	adds	r0, #1
 800a85c:	d01e      	beq.n	800a89c <_printf_common+0xa4>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	f003 0306 	and.w	r3, r3, #6
 800a866:	2b04      	cmp	r3, #4
 800a868:	bf02      	ittt	eq
 800a86a:	68e5      	ldreq	r5, [r4, #12]
 800a86c:	6833      	ldreq	r3, [r6, #0]
 800a86e:	1aed      	subeq	r5, r5, r3
 800a870:	68a3      	ldr	r3, [r4, #8]
 800a872:	bf0c      	ite	eq
 800a874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a878:	2500      	movne	r5, #0
 800a87a:	4293      	cmp	r3, r2
 800a87c:	bfc4      	itt	gt
 800a87e:	1a9b      	subgt	r3, r3, r2
 800a880:	18ed      	addgt	r5, r5, r3
 800a882:	2600      	movs	r6, #0
 800a884:	341a      	adds	r4, #26
 800a886:	42b5      	cmp	r5, r6
 800a888:	d11a      	bne.n	800a8c0 <_printf_common+0xc8>
 800a88a:	2000      	movs	r0, #0
 800a88c:	e008      	b.n	800a8a0 <_printf_common+0xa8>
 800a88e:	2301      	movs	r3, #1
 800a890:	4652      	mov	r2, sl
 800a892:	4641      	mov	r1, r8
 800a894:	4638      	mov	r0, r7
 800a896:	47c8      	blx	r9
 800a898:	3001      	adds	r0, #1
 800a89a:	d103      	bne.n	800a8a4 <_printf_common+0xac>
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a4:	3501      	adds	r5, #1
 800a8a6:	e7c6      	b.n	800a836 <_printf_common+0x3e>
 800a8a8:	18e1      	adds	r1, r4, r3
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	2030      	movs	r0, #48	@ 0x30
 800a8ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8b2:	4422      	add	r2, r4
 800a8b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8bc:	3302      	adds	r3, #2
 800a8be:	e7c7      	b.n	800a850 <_printf_common+0x58>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	4622      	mov	r2, r4
 800a8c4:	4641      	mov	r1, r8
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	47c8      	blx	r9
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	d0e6      	beq.n	800a89c <_printf_common+0xa4>
 800a8ce:	3601      	adds	r6, #1
 800a8d0:	e7d9      	b.n	800a886 <_printf_common+0x8e>
	...

0800a8d4 <_printf_i>:
 800a8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d8:	7e0f      	ldrb	r7, [r1, #24]
 800a8da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8dc:	2f78      	cmp	r7, #120	@ 0x78
 800a8de:	4691      	mov	r9, r2
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	469a      	mov	sl, r3
 800a8e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8ea:	d807      	bhi.n	800a8fc <_printf_i+0x28>
 800a8ec:	2f62      	cmp	r7, #98	@ 0x62
 800a8ee:	d80a      	bhi.n	800a906 <_printf_i+0x32>
 800a8f0:	2f00      	cmp	r7, #0
 800a8f2:	f000 80d1 	beq.w	800aa98 <_printf_i+0x1c4>
 800a8f6:	2f58      	cmp	r7, #88	@ 0x58
 800a8f8:	f000 80b8 	beq.w	800aa6c <_printf_i+0x198>
 800a8fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a900:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a904:	e03a      	b.n	800a97c <_printf_i+0xa8>
 800a906:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a90a:	2b15      	cmp	r3, #21
 800a90c:	d8f6      	bhi.n	800a8fc <_printf_i+0x28>
 800a90e:	a101      	add	r1, pc, #4	@ (adr r1, 800a914 <_printf_i+0x40>)
 800a910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a914:	0800a96d 	.word	0x0800a96d
 800a918:	0800a981 	.word	0x0800a981
 800a91c:	0800a8fd 	.word	0x0800a8fd
 800a920:	0800a8fd 	.word	0x0800a8fd
 800a924:	0800a8fd 	.word	0x0800a8fd
 800a928:	0800a8fd 	.word	0x0800a8fd
 800a92c:	0800a981 	.word	0x0800a981
 800a930:	0800a8fd 	.word	0x0800a8fd
 800a934:	0800a8fd 	.word	0x0800a8fd
 800a938:	0800a8fd 	.word	0x0800a8fd
 800a93c:	0800a8fd 	.word	0x0800a8fd
 800a940:	0800aa7f 	.word	0x0800aa7f
 800a944:	0800a9ab 	.word	0x0800a9ab
 800a948:	0800aa39 	.word	0x0800aa39
 800a94c:	0800a8fd 	.word	0x0800a8fd
 800a950:	0800a8fd 	.word	0x0800a8fd
 800a954:	0800aaa1 	.word	0x0800aaa1
 800a958:	0800a8fd 	.word	0x0800a8fd
 800a95c:	0800a9ab 	.word	0x0800a9ab
 800a960:	0800a8fd 	.word	0x0800a8fd
 800a964:	0800a8fd 	.word	0x0800a8fd
 800a968:	0800aa41 	.word	0x0800aa41
 800a96c:	6833      	ldr	r3, [r6, #0]
 800a96e:	1d1a      	adds	r2, r3, #4
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6032      	str	r2, [r6, #0]
 800a974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a978:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a97c:	2301      	movs	r3, #1
 800a97e:	e09c      	b.n	800aaba <_printf_i+0x1e6>
 800a980:	6833      	ldr	r3, [r6, #0]
 800a982:	6820      	ldr	r0, [r4, #0]
 800a984:	1d19      	adds	r1, r3, #4
 800a986:	6031      	str	r1, [r6, #0]
 800a988:	0606      	lsls	r6, r0, #24
 800a98a:	d501      	bpl.n	800a990 <_printf_i+0xbc>
 800a98c:	681d      	ldr	r5, [r3, #0]
 800a98e:	e003      	b.n	800a998 <_printf_i+0xc4>
 800a990:	0645      	lsls	r5, r0, #25
 800a992:	d5fb      	bpl.n	800a98c <_printf_i+0xb8>
 800a994:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a998:	2d00      	cmp	r5, #0
 800a99a:	da03      	bge.n	800a9a4 <_printf_i+0xd0>
 800a99c:	232d      	movs	r3, #45	@ 0x2d
 800a99e:	426d      	negs	r5, r5
 800a9a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9a4:	4858      	ldr	r0, [pc, #352]	@ (800ab08 <_printf_i+0x234>)
 800a9a6:	230a      	movs	r3, #10
 800a9a8:	e011      	b.n	800a9ce <_printf_i+0xfa>
 800a9aa:	6821      	ldr	r1, [r4, #0]
 800a9ac:	6833      	ldr	r3, [r6, #0]
 800a9ae:	0608      	lsls	r0, r1, #24
 800a9b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9b4:	d402      	bmi.n	800a9bc <_printf_i+0xe8>
 800a9b6:	0649      	lsls	r1, r1, #25
 800a9b8:	bf48      	it	mi
 800a9ba:	b2ad      	uxthmi	r5, r5
 800a9bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9be:	4852      	ldr	r0, [pc, #328]	@ (800ab08 <_printf_i+0x234>)
 800a9c0:	6033      	str	r3, [r6, #0]
 800a9c2:	bf14      	ite	ne
 800a9c4:	230a      	movne	r3, #10
 800a9c6:	2308      	moveq	r3, #8
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9ce:	6866      	ldr	r6, [r4, #4]
 800a9d0:	60a6      	str	r6, [r4, #8]
 800a9d2:	2e00      	cmp	r6, #0
 800a9d4:	db05      	blt.n	800a9e2 <_printf_i+0x10e>
 800a9d6:	6821      	ldr	r1, [r4, #0]
 800a9d8:	432e      	orrs	r6, r5
 800a9da:	f021 0104 	bic.w	r1, r1, #4
 800a9de:	6021      	str	r1, [r4, #0]
 800a9e0:	d04b      	beq.n	800aa7a <_printf_i+0x1a6>
 800a9e2:	4616      	mov	r6, r2
 800a9e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9e8:	fb03 5711 	mls	r7, r3, r1, r5
 800a9ec:	5dc7      	ldrb	r7, [r0, r7]
 800a9ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9f2:	462f      	mov	r7, r5
 800a9f4:	42bb      	cmp	r3, r7
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	d9f4      	bls.n	800a9e4 <_printf_i+0x110>
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	d10b      	bne.n	800aa16 <_printf_i+0x142>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	07df      	lsls	r7, r3, #31
 800aa02:	d508      	bpl.n	800aa16 <_printf_i+0x142>
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	6861      	ldr	r1, [r4, #4]
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	bfde      	ittt	le
 800aa0c:	2330      	movle	r3, #48	@ 0x30
 800aa0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa12:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa16:	1b92      	subs	r2, r2, r6
 800aa18:	6122      	str	r2, [r4, #16]
 800aa1a:	f8cd a000 	str.w	sl, [sp]
 800aa1e:	464b      	mov	r3, r9
 800aa20:	aa03      	add	r2, sp, #12
 800aa22:	4621      	mov	r1, r4
 800aa24:	4640      	mov	r0, r8
 800aa26:	f7ff fee7 	bl	800a7f8 <_printf_common>
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	d14a      	bne.n	800aac4 <_printf_i+0x1f0>
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	b004      	add	sp, #16
 800aa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	f043 0320 	orr.w	r3, r3, #32
 800aa3e:	6023      	str	r3, [r4, #0]
 800aa40:	4832      	ldr	r0, [pc, #200]	@ (800ab0c <_printf_i+0x238>)
 800aa42:	2778      	movs	r7, #120	@ 0x78
 800aa44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	6831      	ldr	r1, [r6, #0]
 800aa4c:	061f      	lsls	r7, r3, #24
 800aa4e:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa52:	d402      	bmi.n	800aa5a <_printf_i+0x186>
 800aa54:	065f      	lsls	r7, r3, #25
 800aa56:	bf48      	it	mi
 800aa58:	b2ad      	uxthmi	r5, r5
 800aa5a:	6031      	str	r1, [r6, #0]
 800aa5c:	07d9      	lsls	r1, r3, #31
 800aa5e:	bf44      	itt	mi
 800aa60:	f043 0320 	orrmi.w	r3, r3, #32
 800aa64:	6023      	strmi	r3, [r4, #0]
 800aa66:	b11d      	cbz	r5, 800aa70 <_printf_i+0x19c>
 800aa68:	2310      	movs	r3, #16
 800aa6a:	e7ad      	b.n	800a9c8 <_printf_i+0xf4>
 800aa6c:	4826      	ldr	r0, [pc, #152]	@ (800ab08 <_printf_i+0x234>)
 800aa6e:	e7e9      	b.n	800aa44 <_printf_i+0x170>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	f023 0320 	bic.w	r3, r3, #32
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	e7f6      	b.n	800aa68 <_printf_i+0x194>
 800aa7a:	4616      	mov	r6, r2
 800aa7c:	e7bd      	b.n	800a9fa <_printf_i+0x126>
 800aa7e:	6833      	ldr	r3, [r6, #0]
 800aa80:	6825      	ldr	r5, [r4, #0]
 800aa82:	6961      	ldr	r1, [r4, #20]
 800aa84:	1d18      	adds	r0, r3, #4
 800aa86:	6030      	str	r0, [r6, #0]
 800aa88:	062e      	lsls	r6, r5, #24
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	d501      	bpl.n	800aa92 <_printf_i+0x1be>
 800aa8e:	6019      	str	r1, [r3, #0]
 800aa90:	e002      	b.n	800aa98 <_printf_i+0x1c4>
 800aa92:	0668      	lsls	r0, r5, #25
 800aa94:	d5fb      	bpl.n	800aa8e <_printf_i+0x1ba>
 800aa96:	8019      	strh	r1, [r3, #0]
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	e7bc      	b.n	800aa1a <_printf_i+0x146>
 800aaa0:	6833      	ldr	r3, [r6, #0]
 800aaa2:	1d1a      	adds	r2, r3, #4
 800aaa4:	6032      	str	r2, [r6, #0]
 800aaa6:	681e      	ldr	r6, [r3, #0]
 800aaa8:	6862      	ldr	r2, [r4, #4]
 800aaaa:	2100      	movs	r1, #0
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7f5 fbaf 	bl	8000210 <memchr>
 800aab2:	b108      	cbz	r0, 800aab8 <_printf_i+0x1e4>
 800aab4:	1b80      	subs	r0, r0, r6
 800aab6:	6060      	str	r0, [r4, #4]
 800aab8:	6863      	ldr	r3, [r4, #4]
 800aaba:	6123      	str	r3, [r4, #16]
 800aabc:	2300      	movs	r3, #0
 800aabe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aac2:	e7aa      	b.n	800aa1a <_printf_i+0x146>
 800aac4:	6923      	ldr	r3, [r4, #16]
 800aac6:	4632      	mov	r2, r6
 800aac8:	4649      	mov	r1, r9
 800aaca:	4640      	mov	r0, r8
 800aacc:	47d0      	blx	sl
 800aace:	3001      	adds	r0, #1
 800aad0:	d0ad      	beq.n	800aa2e <_printf_i+0x15a>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	079b      	lsls	r3, r3, #30
 800aad6:	d413      	bmi.n	800ab00 <_printf_i+0x22c>
 800aad8:	68e0      	ldr	r0, [r4, #12]
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	4298      	cmp	r0, r3
 800aade:	bfb8      	it	lt
 800aae0:	4618      	movlt	r0, r3
 800aae2:	e7a6      	b.n	800aa32 <_printf_i+0x15e>
 800aae4:	2301      	movs	r3, #1
 800aae6:	4632      	mov	r2, r6
 800aae8:	4649      	mov	r1, r9
 800aaea:	4640      	mov	r0, r8
 800aaec:	47d0      	blx	sl
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d09d      	beq.n	800aa2e <_printf_i+0x15a>
 800aaf2:	3501      	adds	r5, #1
 800aaf4:	68e3      	ldr	r3, [r4, #12]
 800aaf6:	9903      	ldr	r1, [sp, #12]
 800aaf8:	1a5b      	subs	r3, r3, r1
 800aafa:	42ab      	cmp	r3, r5
 800aafc:	dcf2      	bgt.n	800aae4 <_printf_i+0x210>
 800aafe:	e7eb      	b.n	800aad8 <_printf_i+0x204>
 800ab00:	2500      	movs	r5, #0
 800ab02:	f104 0619 	add.w	r6, r4, #25
 800ab06:	e7f5      	b.n	800aaf4 <_printf_i+0x220>
 800ab08:	0800d4be 	.word	0x0800d4be
 800ab0c:	0800d4cf 	.word	0x0800d4cf

0800ab10 <std>:
 800ab10:	2300      	movs	r3, #0
 800ab12:	b510      	push	{r4, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	e9c0 3300 	strd	r3, r3, [r0]
 800ab1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab1e:	6083      	str	r3, [r0, #8]
 800ab20:	8181      	strh	r1, [r0, #12]
 800ab22:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab24:	81c2      	strh	r2, [r0, #14]
 800ab26:	6183      	str	r3, [r0, #24]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	305c      	adds	r0, #92	@ 0x5c
 800ab2e:	f000 f92a 	bl	800ad86 <memset>
 800ab32:	4b0d      	ldr	r3, [pc, #52]	@ (800ab68 <std+0x58>)
 800ab34:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab36:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <std+0x5c>)
 800ab38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <std+0x60>)
 800ab3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab74 <std+0x64>)
 800ab40:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab42:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <std+0x68>)
 800ab44:	6224      	str	r4, [r4, #32]
 800ab46:	429c      	cmp	r4, r3
 800ab48:	d006      	beq.n	800ab58 <std+0x48>
 800ab4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab4e:	4294      	cmp	r4, r2
 800ab50:	d002      	beq.n	800ab58 <std+0x48>
 800ab52:	33d0      	adds	r3, #208	@ 0xd0
 800ab54:	429c      	cmp	r4, r3
 800ab56:	d105      	bne.n	800ab64 <std+0x54>
 800ab58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab60:	f000 b9a0 	b.w	800aea4 <__retarget_lock_init_recursive>
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	bf00      	nop
 800ab68:	0800ad01 	.word	0x0800ad01
 800ab6c:	0800ad23 	.word	0x0800ad23
 800ab70:	0800ad5b 	.word	0x0800ad5b
 800ab74:	0800ad7f 	.word	0x0800ad7f
 800ab78:	20000d70 	.word	0x20000d70

0800ab7c <stdio_exit_handler>:
 800ab7c:	4a02      	ldr	r2, [pc, #8]	@ (800ab88 <stdio_exit_handler+0xc>)
 800ab7e:	4903      	ldr	r1, [pc, #12]	@ (800ab8c <stdio_exit_handler+0x10>)
 800ab80:	4803      	ldr	r0, [pc, #12]	@ (800ab90 <stdio_exit_handler+0x14>)
 800ab82:	f000 b869 	b.w	800ac58 <_fwalk_sglue>
 800ab86:	bf00      	nop
 800ab88:	20000020 	.word	0x20000020
 800ab8c:	0800c825 	.word	0x0800c825
 800ab90:	20000030 	.word	0x20000030

0800ab94 <cleanup_stdio>:
 800ab94:	6841      	ldr	r1, [r0, #4]
 800ab96:	4b0c      	ldr	r3, [pc, #48]	@ (800abc8 <cleanup_stdio+0x34>)
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	d001      	beq.n	800aba4 <cleanup_stdio+0x10>
 800aba0:	f001 fe40 	bl	800c824 <_fflush_r>
 800aba4:	68a1      	ldr	r1, [r4, #8]
 800aba6:	4b09      	ldr	r3, [pc, #36]	@ (800abcc <cleanup_stdio+0x38>)
 800aba8:	4299      	cmp	r1, r3
 800abaa:	d002      	beq.n	800abb2 <cleanup_stdio+0x1e>
 800abac:	4620      	mov	r0, r4
 800abae:	f001 fe39 	bl	800c824 <_fflush_r>
 800abb2:	68e1      	ldr	r1, [r4, #12]
 800abb4:	4b06      	ldr	r3, [pc, #24]	@ (800abd0 <cleanup_stdio+0x3c>)
 800abb6:	4299      	cmp	r1, r3
 800abb8:	d004      	beq.n	800abc4 <cleanup_stdio+0x30>
 800abba:	4620      	mov	r0, r4
 800abbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc0:	f001 be30 	b.w	800c824 <_fflush_r>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	bf00      	nop
 800abc8:	20000d70 	.word	0x20000d70
 800abcc:	20000dd8 	.word	0x20000dd8
 800abd0:	20000e40 	.word	0x20000e40

0800abd4 <global_stdio_init.part.0>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac04 <global_stdio_init.part.0+0x30>)
 800abd8:	4c0b      	ldr	r4, [pc, #44]	@ (800ac08 <global_stdio_init.part.0+0x34>)
 800abda:	4a0c      	ldr	r2, [pc, #48]	@ (800ac0c <global_stdio_init.part.0+0x38>)
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	4620      	mov	r0, r4
 800abe0:	2200      	movs	r2, #0
 800abe2:	2104      	movs	r1, #4
 800abe4:	f7ff ff94 	bl	800ab10 <std>
 800abe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abec:	2201      	movs	r2, #1
 800abee:	2109      	movs	r1, #9
 800abf0:	f7ff ff8e 	bl	800ab10 <std>
 800abf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abf8:	2202      	movs	r2, #2
 800abfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfe:	2112      	movs	r1, #18
 800ac00:	f7ff bf86 	b.w	800ab10 <std>
 800ac04:	20000ea8 	.word	0x20000ea8
 800ac08:	20000d70 	.word	0x20000d70
 800ac0c:	0800ab7d 	.word	0x0800ab7d

0800ac10 <__sfp_lock_acquire>:
 800ac10:	4801      	ldr	r0, [pc, #4]	@ (800ac18 <__sfp_lock_acquire+0x8>)
 800ac12:	f000 b948 	b.w	800aea6 <__retarget_lock_acquire_recursive>
 800ac16:	bf00      	nop
 800ac18:	20000eb1 	.word	0x20000eb1

0800ac1c <__sfp_lock_release>:
 800ac1c:	4801      	ldr	r0, [pc, #4]	@ (800ac24 <__sfp_lock_release+0x8>)
 800ac1e:	f000 b943 	b.w	800aea8 <__retarget_lock_release_recursive>
 800ac22:	bf00      	nop
 800ac24:	20000eb1 	.word	0x20000eb1

0800ac28 <__sinit>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	f7ff fff0 	bl	800ac10 <__sfp_lock_acquire>
 800ac30:	6a23      	ldr	r3, [r4, #32]
 800ac32:	b11b      	cbz	r3, 800ac3c <__sinit+0x14>
 800ac34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac38:	f7ff bff0 	b.w	800ac1c <__sfp_lock_release>
 800ac3c:	4b04      	ldr	r3, [pc, #16]	@ (800ac50 <__sinit+0x28>)
 800ac3e:	6223      	str	r3, [r4, #32]
 800ac40:	4b04      	ldr	r3, [pc, #16]	@ (800ac54 <__sinit+0x2c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1f5      	bne.n	800ac34 <__sinit+0xc>
 800ac48:	f7ff ffc4 	bl	800abd4 <global_stdio_init.part.0>
 800ac4c:	e7f2      	b.n	800ac34 <__sinit+0xc>
 800ac4e:	bf00      	nop
 800ac50:	0800ab95 	.word	0x0800ab95
 800ac54:	20000ea8 	.word	0x20000ea8

0800ac58 <_fwalk_sglue>:
 800ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	4688      	mov	r8, r1
 800ac60:	4614      	mov	r4, r2
 800ac62:	2600      	movs	r6, #0
 800ac64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac68:	f1b9 0901 	subs.w	r9, r9, #1
 800ac6c:	d505      	bpl.n	800ac7a <_fwalk_sglue+0x22>
 800ac6e:	6824      	ldr	r4, [r4, #0]
 800ac70:	2c00      	cmp	r4, #0
 800ac72:	d1f7      	bne.n	800ac64 <_fwalk_sglue+0xc>
 800ac74:	4630      	mov	r0, r6
 800ac76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d907      	bls.n	800ac90 <_fwalk_sglue+0x38>
 800ac80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac84:	3301      	adds	r3, #1
 800ac86:	d003      	beq.n	800ac90 <_fwalk_sglue+0x38>
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	47c0      	blx	r8
 800ac8e:	4306      	orrs	r6, r0
 800ac90:	3568      	adds	r5, #104	@ 0x68
 800ac92:	e7e9      	b.n	800ac68 <_fwalk_sglue+0x10>

0800ac94 <sniprintf>:
 800ac94:	b40c      	push	{r2, r3}
 800ac96:	b530      	push	{r4, r5, lr}
 800ac98:	4b18      	ldr	r3, [pc, #96]	@ (800acfc <sniprintf+0x68>)
 800ac9a:	1e0c      	subs	r4, r1, #0
 800ac9c:	681d      	ldr	r5, [r3, #0]
 800ac9e:	b09d      	sub	sp, #116	@ 0x74
 800aca0:	da08      	bge.n	800acb4 <sniprintf+0x20>
 800aca2:	238b      	movs	r3, #139	@ 0x8b
 800aca4:	602b      	str	r3, [r5, #0]
 800aca6:	f04f 30ff 	mov.w	r0, #4294967295
 800acaa:	b01d      	add	sp, #116	@ 0x74
 800acac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acb0:	b002      	add	sp, #8
 800acb2:	4770      	bx	lr
 800acb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800acbc:	f04f 0300 	mov.w	r3, #0
 800acc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800acc2:	bf14      	ite	ne
 800acc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acc8:	4623      	moveq	r3, r4
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	9307      	str	r3, [sp, #28]
 800acce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acd2:	9002      	str	r0, [sp, #8]
 800acd4:	9006      	str	r0, [sp, #24]
 800acd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800acda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800acdc:	ab21      	add	r3, sp, #132	@ 0x84
 800acde:	a902      	add	r1, sp, #8
 800ace0:	4628      	mov	r0, r5
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	f001 fc1e 	bl	800c524 <_svfiprintf_r>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	bfbc      	itt	lt
 800acec:	238b      	movlt	r3, #139	@ 0x8b
 800acee:	602b      	strlt	r3, [r5, #0]
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	d0da      	beq.n	800acaa <sniprintf+0x16>
 800acf4:	9b02      	ldr	r3, [sp, #8]
 800acf6:	2200      	movs	r2, #0
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	e7d6      	b.n	800acaa <sniprintf+0x16>
 800acfc:	2000002c 	.word	0x2000002c

0800ad00 <__sread>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	460c      	mov	r4, r1
 800ad04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad08:	f000 f87e 	bl	800ae08 <_read_r>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	bfab      	itete	ge
 800ad10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad12:	89a3      	ldrhlt	r3, [r4, #12]
 800ad14:	181b      	addge	r3, r3, r0
 800ad16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad1a:	bfac      	ite	ge
 800ad1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad1e:	81a3      	strhlt	r3, [r4, #12]
 800ad20:	bd10      	pop	{r4, pc}

0800ad22 <__swrite>:
 800ad22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad26:	461f      	mov	r7, r3
 800ad28:	898b      	ldrh	r3, [r1, #12]
 800ad2a:	05db      	lsls	r3, r3, #23
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	460c      	mov	r4, r1
 800ad30:	4616      	mov	r6, r2
 800ad32:	d505      	bpl.n	800ad40 <__swrite+0x1e>
 800ad34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad38:	2302      	movs	r3, #2
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f000 f852 	bl	800ade4 <_lseek_r>
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad4a:	81a3      	strh	r3, [r4, #12]
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	463b      	mov	r3, r7
 800ad50:	4628      	mov	r0, r5
 800ad52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad56:	f000 b869 	b.w	800ae2c <_write_r>

0800ad5a <__sseek>:
 800ad5a:	b510      	push	{r4, lr}
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad62:	f000 f83f 	bl	800ade4 <_lseek_r>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	bf15      	itete	ne
 800ad6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad76:	81a3      	strheq	r3, [r4, #12]
 800ad78:	bf18      	it	ne
 800ad7a:	81a3      	strhne	r3, [r4, #12]
 800ad7c:	bd10      	pop	{r4, pc}

0800ad7e <__sclose>:
 800ad7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad82:	f000 b81f 	b.w	800adc4 <_close_r>

0800ad86 <memset>:
 800ad86:	4402      	add	r2, r0
 800ad88:	4603      	mov	r3, r0
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d100      	bne.n	800ad90 <memset+0xa>
 800ad8e:	4770      	bx	lr
 800ad90:	f803 1b01 	strb.w	r1, [r3], #1
 800ad94:	e7f9      	b.n	800ad8a <memset+0x4>

0800ad96 <strncpy>:
 800ad96:	b510      	push	{r4, lr}
 800ad98:	3901      	subs	r1, #1
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	b132      	cbz	r2, 800adac <strncpy+0x16>
 800ad9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ada2:	f803 4b01 	strb.w	r4, [r3], #1
 800ada6:	3a01      	subs	r2, #1
 800ada8:	2c00      	cmp	r4, #0
 800adaa:	d1f7      	bne.n	800ad9c <strncpy+0x6>
 800adac:	441a      	add	r2, r3
 800adae:	2100      	movs	r1, #0
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d100      	bne.n	800adb6 <strncpy+0x20>
 800adb4:	bd10      	pop	{r4, pc}
 800adb6:	f803 1b01 	strb.w	r1, [r3], #1
 800adba:	e7f9      	b.n	800adb0 <strncpy+0x1a>

0800adbc <_localeconv_r>:
 800adbc:	4800      	ldr	r0, [pc, #0]	@ (800adc0 <_localeconv_r+0x4>)
 800adbe:	4770      	bx	lr
 800adc0:	2000016c 	.word	0x2000016c

0800adc4 <_close_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d06      	ldr	r5, [pc, #24]	@ (800ade0 <_close_r+0x1c>)
 800adc8:	2300      	movs	r3, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	602b      	str	r3, [r5, #0]
 800add0:	f7f9 fbae 	bl	8004530 <_close>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_close_r+0x1a>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_close_r+0x1a>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20000eac 	.word	0x20000eac

0800ade4 <_lseek_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d07      	ldr	r5, [pc, #28]	@ (800ae04 <_lseek_r+0x20>)
 800ade8:	4604      	mov	r4, r0
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	602a      	str	r2, [r5, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f7f9 fbc3 	bl	800457e <_lseek>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_lseek_r+0x1e>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_lseek_r+0x1e>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20000eac 	.word	0x20000eac

0800ae08 <_read_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d07      	ldr	r5, [pc, #28]	@ (800ae28 <_read_r+0x20>)
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	2200      	movs	r2, #0
 800ae14:	602a      	str	r2, [r5, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	f7f9 fb51 	bl	80044be <_read>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_read_r+0x1e>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_read_r+0x1e>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20000eac 	.word	0x20000eac

0800ae2c <_write_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d07      	ldr	r5, [pc, #28]	@ (800ae4c <_write_r+0x20>)
 800ae30:	4604      	mov	r4, r0
 800ae32:	4608      	mov	r0, r1
 800ae34:	4611      	mov	r1, r2
 800ae36:	2200      	movs	r2, #0
 800ae38:	602a      	str	r2, [r5, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f7f9 fb5c 	bl	80044f8 <_write>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_write_r+0x1e>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_write_r+0x1e>
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	20000eac 	.word	0x20000eac

0800ae50 <__errno>:
 800ae50:	4b01      	ldr	r3, [pc, #4]	@ (800ae58 <__errno+0x8>)
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	2000002c 	.word	0x2000002c

0800ae5c <__libc_init_array>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ae94 <__libc_init_array+0x38>)
 800ae60:	4c0d      	ldr	r4, [pc, #52]	@ (800ae98 <__libc_init_array+0x3c>)
 800ae62:	1b64      	subs	r4, r4, r5
 800ae64:	10a4      	asrs	r4, r4, #2
 800ae66:	2600      	movs	r6, #0
 800ae68:	42a6      	cmp	r6, r4
 800ae6a:	d109      	bne.n	800ae80 <__libc_init_array+0x24>
 800ae6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ae9c <__libc_init_array+0x40>)
 800ae6e:	4c0c      	ldr	r4, [pc, #48]	@ (800aea0 <__libc_init_array+0x44>)
 800ae70:	f002 f8be 	bl	800cff0 <_init>
 800ae74:	1b64      	subs	r4, r4, r5
 800ae76:	10a4      	asrs	r4, r4, #2
 800ae78:	2600      	movs	r6, #0
 800ae7a:	42a6      	cmp	r6, r4
 800ae7c:	d105      	bne.n	800ae8a <__libc_init_array+0x2e>
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae84:	4798      	blx	r3
 800ae86:	3601      	adds	r6, #1
 800ae88:	e7ee      	b.n	800ae68 <__libc_init_array+0xc>
 800ae8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8e:	4798      	blx	r3
 800ae90:	3601      	adds	r6, #1
 800ae92:	e7f2      	b.n	800ae7a <__libc_init_array+0x1e>
 800ae94:	0800d82c 	.word	0x0800d82c
 800ae98:	0800d82c 	.word	0x0800d82c
 800ae9c:	0800d82c 	.word	0x0800d82c
 800aea0:	0800d830 	.word	0x0800d830

0800aea4 <__retarget_lock_init_recursive>:
 800aea4:	4770      	bx	lr

0800aea6 <__retarget_lock_acquire_recursive>:
 800aea6:	4770      	bx	lr

0800aea8 <__retarget_lock_release_recursive>:
 800aea8:	4770      	bx	lr

0800aeaa <memcpy>:
 800aeaa:	440a      	add	r2, r1
 800aeac:	4291      	cmp	r1, r2
 800aeae:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeb2:	d100      	bne.n	800aeb6 <memcpy+0xc>
 800aeb4:	4770      	bx	lr
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aec0:	4291      	cmp	r1, r2
 800aec2:	d1f9      	bne.n	800aeb8 <memcpy+0xe>
 800aec4:	bd10      	pop	{r4, pc}

0800aec6 <quorem>:
 800aec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeca:	6903      	ldr	r3, [r0, #16]
 800aecc:	690c      	ldr	r4, [r1, #16]
 800aece:	42a3      	cmp	r3, r4
 800aed0:	4607      	mov	r7, r0
 800aed2:	db7e      	blt.n	800afd2 <quorem+0x10c>
 800aed4:	3c01      	subs	r4, #1
 800aed6:	f101 0814 	add.w	r8, r1, #20
 800aeda:	00a3      	lsls	r3, r4, #2
 800aedc:	f100 0514 	add.w	r5, r0, #20
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aeec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aef0:	3301      	adds	r3, #1
 800aef2:	429a      	cmp	r2, r3
 800aef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aef8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aefc:	d32e      	bcc.n	800af5c <quorem+0x96>
 800aefe:	f04f 0a00 	mov.w	sl, #0
 800af02:	46c4      	mov	ip, r8
 800af04:	46ae      	mov	lr, r5
 800af06:	46d3      	mov	fp, sl
 800af08:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af0c:	b298      	uxth	r0, r3
 800af0e:	fb06 a000 	mla	r0, r6, r0, sl
 800af12:	0c02      	lsrs	r2, r0, #16
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	fb06 2303 	mla	r3, r6, r3, r2
 800af1a:	f8de 2000 	ldr.w	r2, [lr]
 800af1e:	b280      	uxth	r0, r0
 800af20:	b292      	uxth	r2, r2
 800af22:	1a12      	subs	r2, r2, r0
 800af24:	445a      	add	r2, fp
 800af26:	f8de 0000 	ldr.w	r0, [lr]
 800af2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af2e:	b29b      	uxth	r3, r3
 800af30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af38:	b292      	uxth	r2, r2
 800af3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af3e:	45e1      	cmp	r9, ip
 800af40:	f84e 2b04 	str.w	r2, [lr], #4
 800af44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af48:	d2de      	bcs.n	800af08 <quorem+0x42>
 800af4a:	9b00      	ldr	r3, [sp, #0]
 800af4c:	58eb      	ldr	r3, [r5, r3]
 800af4e:	b92b      	cbnz	r3, 800af5c <quorem+0x96>
 800af50:	9b01      	ldr	r3, [sp, #4]
 800af52:	3b04      	subs	r3, #4
 800af54:	429d      	cmp	r5, r3
 800af56:	461a      	mov	r2, r3
 800af58:	d32f      	bcc.n	800afba <quorem+0xf4>
 800af5a:	613c      	str	r4, [r7, #16]
 800af5c:	4638      	mov	r0, r7
 800af5e:	f001 f97d 	bl	800c25c <__mcmp>
 800af62:	2800      	cmp	r0, #0
 800af64:	db25      	blt.n	800afb2 <quorem+0xec>
 800af66:	4629      	mov	r1, r5
 800af68:	2000      	movs	r0, #0
 800af6a:	f858 2b04 	ldr.w	r2, [r8], #4
 800af6e:	f8d1 c000 	ldr.w	ip, [r1]
 800af72:	fa1f fe82 	uxth.w	lr, r2
 800af76:	fa1f f38c 	uxth.w	r3, ip
 800af7a:	eba3 030e 	sub.w	r3, r3, lr
 800af7e:	4403      	add	r3, r0
 800af80:	0c12      	lsrs	r2, r2, #16
 800af82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af90:	45c1      	cmp	r9, r8
 800af92:	f841 3b04 	str.w	r3, [r1], #4
 800af96:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af9a:	d2e6      	bcs.n	800af6a <quorem+0xa4>
 800af9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afa4:	b922      	cbnz	r2, 800afb0 <quorem+0xea>
 800afa6:	3b04      	subs	r3, #4
 800afa8:	429d      	cmp	r5, r3
 800afaa:	461a      	mov	r2, r3
 800afac:	d30b      	bcc.n	800afc6 <quorem+0x100>
 800afae:	613c      	str	r4, [r7, #16]
 800afb0:	3601      	adds	r6, #1
 800afb2:	4630      	mov	r0, r6
 800afb4:	b003      	add	sp, #12
 800afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afba:	6812      	ldr	r2, [r2, #0]
 800afbc:	3b04      	subs	r3, #4
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	d1cb      	bne.n	800af5a <quorem+0x94>
 800afc2:	3c01      	subs	r4, #1
 800afc4:	e7c6      	b.n	800af54 <quorem+0x8e>
 800afc6:	6812      	ldr	r2, [r2, #0]
 800afc8:	3b04      	subs	r3, #4
 800afca:	2a00      	cmp	r2, #0
 800afcc:	d1ef      	bne.n	800afae <quorem+0xe8>
 800afce:	3c01      	subs	r4, #1
 800afd0:	e7ea      	b.n	800afa8 <quorem+0xe2>
 800afd2:	2000      	movs	r0, #0
 800afd4:	e7ee      	b.n	800afb4 <quorem+0xee>
	...

0800afd8 <_dtoa_r>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	69c7      	ldr	r7, [r0, #28]
 800afde:	b097      	sub	sp, #92	@ 0x5c
 800afe0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800afe4:	ec55 4b10 	vmov	r4, r5, d0
 800afe8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800afea:	9107      	str	r1, [sp, #28]
 800afec:	4681      	mov	r9, r0
 800afee:	920c      	str	r2, [sp, #48]	@ 0x30
 800aff0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aff2:	b97f      	cbnz	r7, 800b014 <_dtoa_r+0x3c>
 800aff4:	2010      	movs	r0, #16
 800aff6:	f000 fe09 	bl	800bc0c <malloc>
 800affa:	4602      	mov	r2, r0
 800affc:	f8c9 001c 	str.w	r0, [r9, #28]
 800b000:	b920      	cbnz	r0, 800b00c <_dtoa_r+0x34>
 800b002:	4ba9      	ldr	r3, [pc, #676]	@ (800b2a8 <_dtoa_r+0x2d0>)
 800b004:	21ef      	movs	r1, #239	@ 0xef
 800b006:	48a9      	ldr	r0, [pc, #676]	@ (800b2ac <_dtoa_r+0x2d4>)
 800b008:	f001 fc5e 	bl	800c8c8 <__assert_func>
 800b00c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b010:	6007      	str	r7, [r0, #0]
 800b012:	60c7      	str	r7, [r0, #12]
 800b014:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b018:	6819      	ldr	r1, [r3, #0]
 800b01a:	b159      	cbz	r1, 800b034 <_dtoa_r+0x5c>
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	604a      	str	r2, [r1, #4]
 800b020:	2301      	movs	r3, #1
 800b022:	4093      	lsls	r3, r2
 800b024:	608b      	str	r3, [r1, #8]
 800b026:	4648      	mov	r0, r9
 800b028:	f000 fee6 	bl	800bdf8 <_Bfree>
 800b02c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	1e2b      	subs	r3, r5, #0
 800b036:	bfb9      	ittee	lt
 800b038:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b03c:	9305      	strlt	r3, [sp, #20]
 800b03e:	2300      	movge	r3, #0
 800b040:	6033      	strge	r3, [r6, #0]
 800b042:	9f05      	ldr	r7, [sp, #20]
 800b044:	4b9a      	ldr	r3, [pc, #616]	@ (800b2b0 <_dtoa_r+0x2d8>)
 800b046:	bfbc      	itt	lt
 800b048:	2201      	movlt	r2, #1
 800b04a:	6032      	strlt	r2, [r6, #0]
 800b04c:	43bb      	bics	r3, r7
 800b04e:	d112      	bne.n	800b076 <_dtoa_r+0x9e>
 800b050:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b052:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b05c:	4323      	orrs	r3, r4
 800b05e:	f000 855a 	beq.w	800bb16 <_dtoa_r+0xb3e>
 800b062:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b064:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b2c4 <_dtoa_r+0x2ec>
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 855c 	beq.w	800bb26 <_dtoa_r+0xb4e>
 800b06e:	f10a 0303 	add.w	r3, sl, #3
 800b072:	f000 bd56 	b.w	800bb22 <_dtoa_r+0xb4a>
 800b076:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b07a:	2200      	movs	r2, #0
 800b07c:	ec51 0b17 	vmov	r0, r1, d7
 800b080:	2300      	movs	r3, #0
 800b082:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b086:	f7f5 fd3f 	bl	8000b08 <__aeabi_dcmpeq>
 800b08a:	4680      	mov	r8, r0
 800b08c:	b158      	cbz	r0, 800b0a6 <_dtoa_r+0xce>
 800b08e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b090:	2301      	movs	r3, #1
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b096:	b113      	cbz	r3, 800b09e <_dtoa_r+0xc6>
 800b098:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b09a:	4b86      	ldr	r3, [pc, #536]	@ (800b2b4 <_dtoa_r+0x2dc>)
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b2c8 <_dtoa_r+0x2f0>
 800b0a2:	f000 bd40 	b.w	800bb26 <_dtoa_r+0xb4e>
 800b0a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b0aa:	aa14      	add	r2, sp, #80	@ 0x50
 800b0ac:	a915      	add	r1, sp, #84	@ 0x54
 800b0ae:	4648      	mov	r0, r9
 800b0b0:	f001 f984 	bl	800c3bc <__d2b>
 800b0b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0b8:	9002      	str	r0, [sp, #8]
 800b0ba:	2e00      	cmp	r6, #0
 800b0bc:	d078      	beq.n	800b1b0 <_dtoa_r+0x1d8>
 800b0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b0d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b0d8:	4619      	mov	r1, r3
 800b0da:	2200      	movs	r2, #0
 800b0dc:	4b76      	ldr	r3, [pc, #472]	@ (800b2b8 <_dtoa_r+0x2e0>)
 800b0de:	f7f5 f8f3 	bl	80002c8 <__aeabi_dsub>
 800b0e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800b290 <_dtoa_r+0x2b8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 faa6 	bl	8000638 <__aeabi_dmul>
 800b0ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800b298 <_dtoa_r+0x2c0>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 f8eb 	bl	80002cc <__adddf3>
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	f7f5 fa32 	bl	8000564 <__aeabi_i2d>
 800b100:	a367      	add	r3, pc, #412	@ (adr r3, 800b2a0 <_dtoa_r+0x2c8>)
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	f7f5 fa97 	bl	8000638 <__aeabi_dmul>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4620      	mov	r0, r4
 800b110:	4629      	mov	r1, r5
 800b112:	f7f5 f8db 	bl	80002cc <__adddf3>
 800b116:	4604      	mov	r4, r0
 800b118:	460d      	mov	r5, r1
 800b11a:	f7f5 fd3d 	bl	8000b98 <__aeabi_d2iz>
 800b11e:	2200      	movs	r2, #0
 800b120:	4607      	mov	r7, r0
 800b122:	2300      	movs	r3, #0
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f7f5 fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800b12c:	b140      	cbz	r0, 800b140 <_dtoa_r+0x168>
 800b12e:	4638      	mov	r0, r7
 800b130:	f7f5 fa18 	bl	8000564 <__aeabi_i2d>
 800b134:	4622      	mov	r2, r4
 800b136:	462b      	mov	r3, r5
 800b138:	f7f5 fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800b13c:	b900      	cbnz	r0, 800b140 <_dtoa_r+0x168>
 800b13e:	3f01      	subs	r7, #1
 800b140:	2f16      	cmp	r7, #22
 800b142:	d852      	bhi.n	800b1ea <_dtoa_r+0x212>
 800b144:	4b5d      	ldr	r3, [pc, #372]	@ (800b2bc <_dtoa_r+0x2e4>)
 800b146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b152:	f7f5 fce3 	bl	8000b1c <__aeabi_dcmplt>
 800b156:	2800      	cmp	r0, #0
 800b158:	d049      	beq.n	800b1ee <_dtoa_r+0x216>
 800b15a:	3f01      	subs	r7, #1
 800b15c:	2300      	movs	r3, #0
 800b15e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b160:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b162:	1b9b      	subs	r3, r3, r6
 800b164:	1e5a      	subs	r2, r3, #1
 800b166:	bf45      	ittet	mi
 800b168:	f1c3 0301 	rsbmi	r3, r3, #1
 800b16c:	9300      	strmi	r3, [sp, #0]
 800b16e:	2300      	movpl	r3, #0
 800b170:	2300      	movmi	r3, #0
 800b172:	9206      	str	r2, [sp, #24]
 800b174:	bf54      	ite	pl
 800b176:	9300      	strpl	r3, [sp, #0]
 800b178:	9306      	strmi	r3, [sp, #24]
 800b17a:	2f00      	cmp	r7, #0
 800b17c:	db39      	blt.n	800b1f2 <_dtoa_r+0x21a>
 800b17e:	9b06      	ldr	r3, [sp, #24]
 800b180:	970d      	str	r7, [sp, #52]	@ 0x34
 800b182:	443b      	add	r3, r7
 800b184:	9306      	str	r3, [sp, #24]
 800b186:	2300      	movs	r3, #0
 800b188:	9308      	str	r3, [sp, #32]
 800b18a:	9b07      	ldr	r3, [sp, #28]
 800b18c:	2b09      	cmp	r3, #9
 800b18e:	d863      	bhi.n	800b258 <_dtoa_r+0x280>
 800b190:	2b05      	cmp	r3, #5
 800b192:	bfc4      	itt	gt
 800b194:	3b04      	subgt	r3, #4
 800b196:	9307      	strgt	r3, [sp, #28]
 800b198:	9b07      	ldr	r3, [sp, #28]
 800b19a:	f1a3 0302 	sub.w	r3, r3, #2
 800b19e:	bfcc      	ite	gt
 800b1a0:	2400      	movgt	r4, #0
 800b1a2:	2401      	movle	r4, #1
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d863      	bhi.n	800b270 <_dtoa_r+0x298>
 800b1a8:	e8df f003 	tbb	[pc, r3]
 800b1ac:	2b375452 	.word	0x2b375452
 800b1b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b1b4:	441e      	add	r6, r3
 800b1b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1ba:	2b20      	cmp	r3, #32
 800b1bc:	bfc1      	itttt	gt
 800b1be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1c2:	409f      	lslgt	r7, r3
 800b1c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b1c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b1cc:	bfd6      	itet	le
 800b1ce:	f1c3 0320 	rsble	r3, r3, #32
 800b1d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800b1d6:	fa04 f003 	lslle.w	r0, r4, r3
 800b1da:	f7f5 f9b3 	bl	8000544 <__aeabi_ui2d>
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b1e4:	3e01      	subs	r6, #1
 800b1e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800b1e8:	e776      	b.n	800b0d8 <_dtoa_r+0x100>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e7b7      	b.n	800b15e <_dtoa_r+0x186>
 800b1ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800b1f0:	e7b6      	b.n	800b160 <_dtoa_r+0x188>
 800b1f2:	9b00      	ldr	r3, [sp, #0]
 800b1f4:	1bdb      	subs	r3, r3, r7
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	427b      	negs	r3, r7
 800b1fa:	9308      	str	r3, [sp, #32]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800b200:	e7c3      	b.n	800b18a <_dtoa_r+0x1b2>
 800b202:	2301      	movs	r3, #1
 800b204:	9309      	str	r3, [sp, #36]	@ 0x24
 800b206:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b208:	eb07 0b03 	add.w	fp, r7, r3
 800b20c:	f10b 0301 	add.w	r3, fp, #1
 800b210:	2b01      	cmp	r3, #1
 800b212:	9303      	str	r3, [sp, #12]
 800b214:	bfb8      	it	lt
 800b216:	2301      	movlt	r3, #1
 800b218:	e006      	b.n	800b228 <_dtoa_r+0x250>
 800b21a:	2301      	movs	r3, #1
 800b21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b21e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b220:	2b00      	cmp	r3, #0
 800b222:	dd28      	ble.n	800b276 <_dtoa_r+0x29e>
 800b224:	469b      	mov	fp, r3
 800b226:	9303      	str	r3, [sp, #12]
 800b228:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b22c:	2100      	movs	r1, #0
 800b22e:	2204      	movs	r2, #4
 800b230:	f102 0514 	add.w	r5, r2, #20
 800b234:	429d      	cmp	r5, r3
 800b236:	d926      	bls.n	800b286 <_dtoa_r+0x2ae>
 800b238:	6041      	str	r1, [r0, #4]
 800b23a:	4648      	mov	r0, r9
 800b23c:	f000 fd9c 	bl	800bd78 <_Balloc>
 800b240:	4682      	mov	sl, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d142      	bne.n	800b2cc <_dtoa_r+0x2f4>
 800b246:	4b1e      	ldr	r3, [pc, #120]	@ (800b2c0 <_dtoa_r+0x2e8>)
 800b248:	4602      	mov	r2, r0
 800b24a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b24e:	e6da      	b.n	800b006 <_dtoa_r+0x2e>
 800b250:	2300      	movs	r3, #0
 800b252:	e7e3      	b.n	800b21c <_dtoa_r+0x244>
 800b254:	2300      	movs	r3, #0
 800b256:	e7d5      	b.n	800b204 <_dtoa_r+0x22c>
 800b258:	2401      	movs	r4, #1
 800b25a:	2300      	movs	r3, #0
 800b25c:	9307      	str	r3, [sp, #28]
 800b25e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b260:	f04f 3bff 	mov.w	fp, #4294967295
 800b264:	2200      	movs	r2, #0
 800b266:	f8cd b00c 	str.w	fp, [sp, #12]
 800b26a:	2312      	movs	r3, #18
 800b26c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b26e:	e7db      	b.n	800b228 <_dtoa_r+0x250>
 800b270:	2301      	movs	r3, #1
 800b272:	9309      	str	r3, [sp, #36]	@ 0x24
 800b274:	e7f4      	b.n	800b260 <_dtoa_r+0x288>
 800b276:	f04f 0b01 	mov.w	fp, #1
 800b27a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b27e:	465b      	mov	r3, fp
 800b280:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b284:	e7d0      	b.n	800b228 <_dtoa_r+0x250>
 800b286:	3101      	adds	r1, #1
 800b288:	0052      	lsls	r2, r2, #1
 800b28a:	e7d1      	b.n	800b230 <_dtoa_r+0x258>
 800b28c:	f3af 8000 	nop.w
 800b290:	636f4361 	.word	0x636f4361
 800b294:	3fd287a7 	.word	0x3fd287a7
 800b298:	8b60c8b3 	.word	0x8b60c8b3
 800b29c:	3fc68a28 	.word	0x3fc68a28
 800b2a0:	509f79fb 	.word	0x509f79fb
 800b2a4:	3fd34413 	.word	0x3fd34413
 800b2a8:	0800d4ed 	.word	0x0800d4ed
 800b2ac:	0800d504 	.word	0x0800d504
 800b2b0:	7ff00000 	.word	0x7ff00000
 800b2b4:	0800d4bd 	.word	0x0800d4bd
 800b2b8:	3ff80000 	.word	0x3ff80000
 800b2bc:	0800d658 	.word	0x0800d658
 800b2c0:	0800d55c 	.word	0x0800d55c
 800b2c4:	0800d4e9 	.word	0x0800d4e9
 800b2c8:	0800d4bc 	.word	0x0800d4bc
 800b2cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2d0:	6018      	str	r0, [r3, #0]
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	2b0e      	cmp	r3, #14
 800b2d6:	f200 80a1 	bhi.w	800b41c <_dtoa_r+0x444>
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	f000 809e 	beq.w	800b41c <_dtoa_r+0x444>
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	dd33      	ble.n	800b34c <_dtoa_r+0x374>
 800b2e4:	4b9c      	ldr	r3, [pc, #624]	@ (800b558 <_dtoa_r+0x580>)
 800b2e6:	f007 020f 	and.w	r2, r7, #15
 800b2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ee:	ed93 7b00 	vldr	d7, [r3]
 800b2f2:	05f8      	lsls	r0, r7, #23
 800b2f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b2f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b2fc:	d516      	bpl.n	800b32c <_dtoa_r+0x354>
 800b2fe:	4b97      	ldr	r3, [pc, #604]	@ (800b55c <_dtoa_r+0x584>)
 800b300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b308:	f7f5 fac0 	bl	800088c <__aeabi_ddiv>
 800b30c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b310:	f004 040f 	and.w	r4, r4, #15
 800b314:	2603      	movs	r6, #3
 800b316:	4d91      	ldr	r5, [pc, #580]	@ (800b55c <_dtoa_r+0x584>)
 800b318:	b954      	cbnz	r4, 800b330 <_dtoa_r+0x358>
 800b31a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b31e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b322:	f7f5 fab3 	bl	800088c <__aeabi_ddiv>
 800b326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b32a:	e028      	b.n	800b37e <_dtoa_r+0x3a6>
 800b32c:	2602      	movs	r6, #2
 800b32e:	e7f2      	b.n	800b316 <_dtoa_r+0x33e>
 800b330:	07e1      	lsls	r1, r4, #31
 800b332:	d508      	bpl.n	800b346 <_dtoa_r+0x36e>
 800b334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b33c:	f7f5 f97c 	bl	8000638 <__aeabi_dmul>
 800b340:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b344:	3601      	adds	r6, #1
 800b346:	1064      	asrs	r4, r4, #1
 800b348:	3508      	adds	r5, #8
 800b34a:	e7e5      	b.n	800b318 <_dtoa_r+0x340>
 800b34c:	f000 80af 	beq.w	800b4ae <_dtoa_r+0x4d6>
 800b350:	427c      	negs	r4, r7
 800b352:	4b81      	ldr	r3, [pc, #516]	@ (800b558 <_dtoa_r+0x580>)
 800b354:	4d81      	ldr	r5, [pc, #516]	@ (800b55c <_dtoa_r+0x584>)
 800b356:	f004 020f 	and.w	r2, r4, #15
 800b35a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b366:	f7f5 f967 	bl	8000638 <__aeabi_dmul>
 800b36a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b36e:	1124      	asrs	r4, r4, #4
 800b370:	2300      	movs	r3, #0
 800b372:	2602      	movs	r6, #2
 800b374:	2c00      	cmp	r4, #0
 800b376:	f040 808f 	bne.w	800b498 <_dtoa_r+0x4c0>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1d3      	bne.n	800b326 <_dtoa_r+0x34e>
 800b37e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b380:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 8094 	beq.w	800b4b2 <_dtoa_r+0x4da>
 800b38a:	4b75      	ldr	r3, [pc, #468]	@ (800b560 <_dtoa_r+0x588>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	4620      	mov	r0, r4
 800b390:	4629      	mov	r1, r5
 800b392:	f7f5 fbc3 	bl	8000b1c <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	f000 808b 	beq.w	800b4b2 <_dtoa_r+0x4da>
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 8087 	beq.w	800b4b2 <_dtoa_r+0x4da>
 800b3a4:	f1bb 0f00 	cmp.w	fp, #0
 800b3a8:	dd34      	ble.n	800b414 <_dtoa_r+0x43c>
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4b6d      	ldr	r3, [pc, #436]	@ (800b564 <_dtoa_r+0x58c>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f5 f941 	bl	8000638 <__aeabi_dmul>
 800b3b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800b3be:	3601      	adds	r6, #1
 800b3c0:	465c      	mov	r4, fp
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7f5 f8ce 	bl	8000564 <__aeabi_i2d>
 800b3c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3cc:	f7f5 f934 	bl	8000638 <__aeabi_dmul>
 800b3d0:	4b65      	ldr	r3, [pc, #404]	@ (800b568 <_dtoa_r+0x590>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f7f4 ff7a 	bl	80002cc <__adddf3>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b3de:	2c00      	cmp	r4, #0
 800b3e0:	d16a      	bne.n	800b4b8 <_dtoa_r+0x4e0>
 800b3e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3e6:	4b61      	ldr	r3, [pc, #388]	@ (800b56c <_dtoa_r+0x594>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f7f4 ff6d 	bl	80002c8 <__aeabi_dsub>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3f6:	462a      	mov	r2, r5
 800b3f8:	4633      	mov	r3, r6
 800b3fa:	f7f5 fbad 	bl	8000b58 <__aeabi_dcmpgt>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f040 8298 	bne.w	800b934 <_dtoa_r+0x95c>
 800b404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b408:	462a      	mov	r2, r5
 800b40a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b40e:	f7f5 fb85 	bl	8000b1c <__aeabi_dcmplt>
 800b412:	bb38      	cbnz	r0, 800b464 <_dtoa_r+0x48c>
 800b414:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b418:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b41c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f2c0 8157 	blt.w	800b6d2 <_dtoa_r+0x6fa>
 800b424:	2f0e      	cmp	r7, #14
 800b426:	f300 8154 	bgt.w	800b6d2 <_dtoa_r+0x6fa>
 800b42a:	4b4b      	ldr	r3, [pc, #300]	@ (800b558 <_dtoa_r+0x580>)
 800b42c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b430:	ed93 7b00 	vldr	d7, [r3]
 800b434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b436:	2b00      	cmp	r3, #0
 800b438:	ed8d 7b00 	vstr	d7, [sp]
 800b43c:	f280 80e5 	bge.w	800b60a <_dtoa_r+0x632>
 800b440:	9b03      	ldr	r3, [sp, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	f300 80e1 	bgt.w	800b60a <_dtoa_r+0x632>
 800b448:	d10c      	bne.n	800b464 <_dtoa_r+0x48c>
 800b44a:	4b48      	ldr	r3, [pc, #288]	@ (800b56c <_dtoa_r+0x594>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	ec51 0b17 	vmov	r0, r1, d7
 800b452:	f7f5 f8f1 	bl	8000638 <__aeabi_dmul>
 800b456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b45a:	f7f5 fb73 	bl	8000b44 <__aeabi_dcmpge>
 800b45e:	2800      	cmp	r0, #0
 800b460:	f000 8266 	beq.w	800b930 <_dtoa_r+0x958>
 800b464:	2400      	movs	r4, #0
 800b466:	4625      	mov	r5, r4
 800b468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b46a:	4656      	mov	r6, sl
 800b46c:	ea6f 0803 	mvn.w	r8, r3
 800b470:	2700      	movs	r7, #0
 800b472:	4621      	mov	r1, r4
 800b474:	4648      	mov	r0, r9
 800b476:	f000 fcbf 	bl	800bdf8 <_Bfree>
 800b47a:	2d00      	cmp	r5, #0
 800b47c:	f000 80bd 	beq.w	800b5fa <_dtoa_r+0x622>
 800b480:	b12f      	cbz	r7, 800b48e <_dtoa_r+0x4b6>
 800b482:	42af      	cmp	r7, r5
 800b484:	d003      	beq.n	800b48e <_dtoa_r+0x4b6>
 800b486:	4639      	mov	r1, r7
 800b488:	4648      	mov	r0, r9
 800b48a:	f000 fcb5 	bl	800bdf8 <_Bfree>
 800b48e:	4629      	mov	r1, r5
 800b490:	4648      	mov	r0, r9
 800b492:	f000 fcb1 	bl	800bdf8 <_Bfree>
 800b496:	e0b0      	b.n	800b5fa <_dtoa_r+0x622>
 800b498:	07e2      	lsls	r2, r4, #31
 800b49a:	d505      	bpl.n	800b4a8 <_dtoa_r+0x4d0>
 800b49c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4a0:	f7f5 f8ca 	bl	8000638 <__aeabi_dmul>
 800b4a4:	3601      	adds	r6, #1
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	1064      	asrs	r4, r4, #1
 800b4aa:	3508      	adds	r5, #8
 800b4ac:	e762      	b.n	800b374 <_dtoa_r+0x39c>
 800b4ae:	2602      	movs	r6, #2
 800b4b0:	e765      	b.n	800b37e <_dtoa_r+0x3a6>
 800b4b2:	9c03      	ldr	r4, [sp, #12]
 800b4b4:	46b8      	mov	r8, r7
 800b4b6:	e784      	b.n	800b3c2 <_dtoa_r+0x3ea>
 800b4b8:	4b27      	ldr	r3, [pc, #156]	@ (800b558 <_dtoa_r+0x580>)
 800b4ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4c4:	4454      	add	r4, sl
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	d054      	beq.n	800b574 <_dtoa_r+0x59c>
 800b4ca:	4929      	ldr	r1, [pc, #164]	@ (800b570 <_dtoa_r+0x598>)
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	f7f5 f9dd 	bl	800088c <__aeabi_ddiv>
 800b4d2:	4633      	mov	r3, r6
 800b4d4:	462a      	mov	r2, r5
 800b4d6:	f7f4 fef7 	bl	80002c8 <__aeabi_dsub>
 800b4da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b4de:	4656      	mov	r6, sl
 800b4e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e4:	f7f5 fb58 	bl	8000b98 <__aeabi_d2iz>
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	f7f5 f83b 	bl	8000564 <__aeabi_i2d>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4f6:	f7f4 fee7 	bl	80002c8 <__aeabi_dsub>
 800b4fa:	3530      	adds	r5, #48	@ 0x30
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b504:	f806 5b01 	strb.w	r5, [r6], #1
 800b508:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b50c:	f7f5 fb06 	bl	8000b1c <__aeabi_dcmplt>
 800b510:	2800      	cmp	r0, #0
 800b512:	d172      	bne.n	800b5fa <_dtoa_r+0x622>
 800b514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b518:	4911      	ldr	r1, [pc, #68]	@ (800b560 <_dtoa_r+0x588>)
 800b51a:	2000      	movs	r0, #0
 800b51c:	f7f4 fed4 	bl	80002c8 <__aeabi_dsub>
 800b520:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b524:	f7f5 fafa 	bl	8000b1c <__aeabi_dcmplt>
 800b528:	2800      	cmp	r0, #0
 800b52a:	f040 80b4 	bne.w	800b696 <_dtoa_r+0x6be>
 800b52e:	42a6      	cmp	r6, r4
 800b530:	f43f af70 	beq.w	800b414 <_dtoa_r+0x43c>
 800b534:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b538:	4b0a      	ldr	r3, [pc, #40]	@ (800b564 <_dtoa_r+0x58c>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	f7f5 f87c 	bl	8000638 <__aeabi_dmul>
 800b540:	4b08      	ldr	r3, [pc, #32]	@ (800b564 <_dtoa_r+0x58c>)
 800b542:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b546:	2200      	movs	r2, #0
 800b548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b54c:	f7f5 f874 	bl	8000638 <__aeabi_dmul>
 800b550:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b554:	e7c4      	b.n	800b4e0 <_dtoa_r+0x508>
 800b556:	bf00      	nop
 800b558:	0800d658 	.word	0x0800d658
 800b55c:	0800d630 	.word	0x0800d630
 800b560:	3ff00000 	.word	0x3ff00000
 800b564:	40240000 	.word	0x40240000
 800b568:	401c0000 	.word	0x401c0000
 800b56c:	40140000 	.word	0x40140000
 800b570:	3fe00000 	.word	0x3fe00000
 800b574:	4631      	mov	r1, r6
 800b576:	4628      	mov	r0, r5
 800b578:	f7f5 f85e 	bl	8000638 <__aeabi_dmul>
 800b57c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b580:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b582:	4656      	mov	r6, sl
 800b584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b588:	f7f5 fb06 	bl	8000b98 <__aeabi_d2iz>
 800b58c:	4605      	mov	r5, r0
 800b58e:	f7f4 ffe9 	bl	8000564 <__aeabi_i2d>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b59a:	f7f4 fe95 	bl	80002c8 <__aeabi_dsub>
 800b59e:	3530      	adds	r5, #48	@ 0x30
 800b5a0:	f806 5b01 	strb.w	r5, [r6], #1
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	42a6      	cmp	r6, r4
 800b5aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5ae:	f04f 0200 	mov.w	r2, #0
 800b5b2:	d124      	bne.n	800b5fe <_dtoa_r+0x626>
 800b5b4:	4baf      	ldr	r3, [pc, #700]	@ (800b874 <_dtoa_r+0x89c>)
 800b5b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b5ba:	f7f4 fe87 	bl	80002cc <__adddf3>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5c6:	f7f5 fac7 	bl	8000b58 <__aeabi_dcmpgt>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d163      	bne.n	800b696 <_dtoa_r+0x6be>
 800b5ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b5d2:	49a8      	ldr	r1, [pc, #672]	@ (800b874 <_dtoa_r+0x89c>)
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	f7f4 fe77 	bl	80002c8 <__aeabi_dsub>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5e2:	f7f5 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f43f af14 	beq.w	800b414 <_dtoa_r+0x43c>
 800b5ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b5ee:	1e73      	subs	r3, r6, #1
 800b5f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5f6:	2b30      	cmp	r3, #48	@ 0x30
 800b5f8:	d0f8      	beq.n	800b5ec <_dtoa_r+0x614>
 800b5fa:	4647      	mov	r7, r8
 800b5fc:	e03b      	b.n	800b676 <_dtoa_r+0x69e>
 800b5fe:	4b9e      	ldr	r3, [pc, #632]	@ (800b878 <_dtoa_r+0x8a0>)
 800b600:	f7f5 f81a 	bl	8000638 <__aeabi_dmul>
 800b604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b608:	e7bc      	b.n	800b584 <_dtoa_r+0x5ac>
 800b60a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b60e:	4656      	mov	r6, sl
 800b610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f5 f938 	bl	800088c <__aeabi_ddiv>
 800b61c:	f7f5 fabc 	bl	8000b98 <__aeabi_d2iz>
 800b620:	4680      	mov	r8, r0
 800b622:	f7f4 ff9f 	bl	8000564 <__aeabi_i2d>
 800b626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b62a:	f7f5 f805 	bl	8000638 <__aeabi_dmul>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b63a:	f7f4 fe45 	bl	80002c8 <__aeabi_dsub>
 800b63e:	f806 4b01 	strb.w	r4, [r6], #1
 800b642:	9d03      	ldr	r5, [sp, #12]
 800b644:	eba6 040a 	sub.w	r4, r6, sl
 800b648:	42a5      	cmp	r5, r4
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	d133      	bne.n	800b6b8 <_dtoa_r+0x6e0>
 800b650:	f7f4 fe3c 	bl	80002cc <__adddf3>
 800b654:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b658:	4604      	mov	r4, r0
 800b65a:	460d      	mov	r5, r1
 800b65c:	f7f5 fa7c 	bl	8000b58 <__aeabi_dcmpgt>
 800b660:	b9c0      	cbnz	r0, 800b694 <_dtoa_r+0x6bc>
 800b662:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b666:	4620      	mov	r0, r4
 800b668:	4629      	mov	r1, r5
 800b66a:	f7f5 fa4d 	bl	8000b08 <__aeabi_dcmpeq>
 800b66e:	b110      	cbz	r0, 800b676 <_dtoa_r+0x69e>
 800b670:	f018 0f01 	tst.w	r8, #1
 800b674:	d10e      	bne.n	800b694 <_dtoa_r+0x6bc>
 800b676:	9902      	ldr	r1, [sp, #8]
 800b678:	4648      	mov	r0, r9
 800b67a:	f000 fbbd 	bl	800bdf8 <_Bfree>
 800b67e:	2300      	movs	r3, #0
 800b680:	7033      	strb	r3, [r6, #0]
 800b682:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b684:	3701      	adds	r7, #1
 800b686:	601f      	str	r7, [r3, #0]
 800b688:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 824b 	beq.w	800bb26 <_dtoa_r+0xb4e>
 800b690:	601e      	str	r6, [r3, #0]
 800b692:	e248      	b.n	800bb26 <_dtoa_r+0xb4e>
 800b694:	46b8      	mov	r8, r7
 800b696:	4633      	mov	r3, r6
 800b698:	461e      	mov	r6, r3
 800b69a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b69e:	2a39      	cmp	r2, #57	@ 0x39
 800b6a0:	d106      	bne.n	800b6b0 <_dtoa_r+0x6d8>
 800b6a2:	459a      	cmp	sl, r3
 800b6a4:	d1f8      	bne.n	800b698 <_dtoa_r+0x6c0>
 800b6a6:	2230      	movs	r2, #48	@ 0x30
 800b6a8:	f108 0801 	add.w	r8, r8, #1
 800b6ac:	f88a 2000 	strb.w	r2, [sl]
 800b6b0:	781a      	ldrb	r2, [r3, #0]
 800b6b2:	3201      	adds	r2, #1
 800b6b4:	701a      	strb	r2, [r3, #0]
 800b6b6:	e7a0      	b.n	800b5fa <_dtoa_r+0x622>
 800b6b8:	4b6f      	ldr	r3, [pc, #444]	@ (800b878 <_dtoa_r+0x8a0>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f4 ffbc 	bl	8000638 <__aeabi_dmul>
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	f7f5 fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d09f      	beq.n	800b610 <_dtoa_r+0x638>
 800b6d0:	e7d1      	b.n	800b676 <_dtoa_r+0x69e>
 800b6d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	f000 80ea 	beq.w	800b8ae <_dtoa_r+0x8d6>
 800b6da:	9a07      	ldr	r2, [sp, #28]
 800b6dc:	2a01      	cmp	r2, #1
 800b6de:	f300 80cd 	bgt.w	800b87c <_dtoa_r+0x8a4>
 800b6e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	f000 80c1 	beq.w	800b86c <_dtoa_r+0x894>
 800b6ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b6ee:	9c08      	ldr	r4, [sp, #32]
 800b6f0:	9e00      	ldr	r6, [sp, #0]
 800b6f2:	9a00      	ldr	r2, [sp, #0]
 800b6f4:	441a      	add	r2, r3
 800b6f6:	9200      	str	r2, [sp, #0]
 800b6f8:	9a06      	ldr	r2, [sp, #24]
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	441a      	add	r2, r3
 800b6fe:	4648      	mov	r0, r9
 800b700:	9206      	str	r2, [sp, #24]
 800b702:	f000 fc2d 	bl	800bf60 <__i2b>
 800b706:	4605      	mov	r5, r0
 800b708:	b166      	cbz	r6, 800b724 <_dtoa_r+0x74c>
 800b70a:	9b06      	ldr	r3, [sp, #24]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dd09      	ble.n	800b724 <_dtoa_r+0x74c>
 800b710:	42b3      	cmp	r3, r6
 800b712:	9a00      	ldr	r2, [sp, #0]
 800b714:	bfa8      	it	ge
 800b716:	4633      	movge	r3, r6
 800b718:	1ad2      	subs	r2, r2, r3
 800b71a:	9200      	str	r2, [sp, #0]
 800b71c:	9a06      	ldr	r2, [sp, #24]
 800b71e:	1af6      	subs	r6, r6, r3
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	9306      	str	r3, [sp, #24]
 800b724:	9b08      	ldr	r3, [sp, #32]
 800b726:	b30b      	cbz	r3, 800b76c <_dtoa_r+0x794>
 800b728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 80c6 	beq.w	800b8bc <_dtoa_r+0x8e4>
 800b730:	2c00      	cmp	r4, #0
 800b732:	f000 80c0 	beq.w	800b8b6 <_dtoa_r+0x8de>
 800b736:	4629      	mov	r1, r5
 800b738:	4622      	mov	r2, r4
 800b73a:	4648      	mov	r0, r9
 800b73c:	f000 fcc8 	bl	800c0d0 <__pow5mult>
 800b740:	9a02      	ldr	r2, [sp, #8]
 800b742:	4601      	mov	r1, r0
 800b744:	4605      	mov	r5, r0
 800b746:	4648      	mov	r0, r9
 800b748:	f000 fc20 	bl	800bf8c <__multiply>
 800b74c:	9902      	ldr	r1, [sp, #8]
 800b74e:	4680      	mov	r8, r0
 800b750:	4648      	mov	r0, r9
 800b752:	f000 fb51 	bl	800bdf8 <_Bfree>
 800b756:	9b08      	ldr	r3, [sp, #32]
 800b758:	1b1b      	subs	r3, r3, r4
 800b75a:	9308      	str	r3, [sp, #32]
 800b75c:	f000 80b1 	beq.w	800b8c2 <_dtoa_r+0x8ea>
 800b760:	9a08      	ldr	r2, [sp, #32]
 800b762:	4641      	mov	r1, r8
 800b764:	4648      	mov	r0, r9
 800b766:	f000 fcb3 	bl	800c0d0 <__pow5mult>
 800b76a:	9002      	str	r0, [sp, #8]
 800b76c:	2101      	movs	r1, #1
 800b76e:	4648      	mov	r0, r9
 800b770:	f000 fbf6 	bl	800bf60 <__i2b>
 800b774:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b776:	4604      	mov	r4, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 81d8 	beq.w	800bb2e <_dtoa_r+0xb56>
 800b77e:	461a      	mov	r2, r3
 800b780:	4601      	mov	r1, r0
 800b782:	4648      	mov	r0, r9
 800b784:	f000 fca4 	bl	800c0d0 <__pow5mult>
 800b788:	9b07      	ldr	r3, [sp, #28]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	4604      	mov	r4, r0
 800b78e:	f300 809f 	bgt.w	800b8d0 <_dtoa_r+0x8f8>
 800b792:	9b04      	ldr	r3, [sp, #16]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f040 8097 	bne.w	800b8c8 <_dtoa_r+0x8f0>
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f040 8093 	bne.w	800b8cc <_dtoa_r+0x8f4>
 800b7a6:	9b05      	ldr	r3, [sp, #20]
 800b7a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7ac:	0d1b      	lsrs	r3, r3, #20
 800b7ae:	051b      	lsls	r3, r3, #20
 800b7b0:	b133      	cbz	r3, 800b7c0 <_dtoa_r+0x7e8>
 800b7b2:	9b00      	ldr	r3, [sp, #0]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	9b06      	ldr	r3, [sp, #24]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	9306      	str	r3, [sp, #24]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	9308      	str	r3, [sp, #32]
 800b7c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 81b8 	beq.w	800bb3a <_dtoa_r+0xb62>
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7d0:	6918      	ldr	r0, [r3, #16]
 800b7d2:	f000 fb79 	bl	800bec8 <__hi0bits>
 800b7d6:	f1c0 0020 	rsb	r0, r0, #32
 800b7da:	9b06      	ldr	r3, [sp, #24]
 800b7dc:	4418      	add	r0, r3
 800b7de:	f010 001f 	ands.w	r0, r0, #31
 800b7e2:	f000 8082 	beq.w	800b8ea <_dtoa_r+0x912>
 800b7e6:	f1c0 0320 	rsb	r3, r0, #32
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	dd73      	ble.n	800b8d6 <_dtoa_r+0x8fe>
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	f1c0 001c 	rsb	r0, r0, #28
 800b7f4:	4403      	add	r3, r0
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	9b06      	ldr	r3, [sp, #24]
 800b7fa:	4403      	add	r3, r0
 800b7fc:	4406      	add	r6, r0
 800b7fe:	9306      	str	r3, [sp, #24]
 800b800:	9b00      	ldr	r3, [sp, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	dd05      	ble.n	800b812 <_dtoa_r+0x83a>
 800b806:	9902      	ldr	r1, [sp, #8]
 800b808:	461a      	mov	r2, r3
 800b80a:	4648      	mov	r0, r9
 800b80c:	f000 fcba 	bl	800c184 <__lshift>
 800b810:	9002      	str	r0, [sp, #8]
 800b812:	9b06      	ldr	r3, [sp, #24]
 800b814:	2b00      	cmp	r3, #0
 800b816:	dd05      	ble.n	800b824 <_dtoa_r+0x84c>
 800b818:	4621      	mov	r1, r4
 800b81a:	461a      	mov	r2, r3
 800b81c:	4648      	mov	r0, r9
 800b81e:	f000 fcb1 	bl	800c184 <__lshift>
 800b822:	4604      	mov	r4, r0
 800b824:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b826:	2b00      	cmp	r3, #0
 800b828:	d061      	beq.n	800b8ee <_dtoa_r+0x916>
 800b82a:	9802      	ldr	r0, [sp, #8]
 800b82c:	4621      	mov	r1, r4
 800b82e:	f000 fd15 	bl	800c25c <__mcmp>
 800b832:	2800      	cmp	r0, #0
 800b834:	da5b      	bge.n	800b8ee <_dtoa_r+0x916>
 800b836:	2300      	movs	r3, #0
 800b838:	9902      	ldr	r1, [sp, #8]
 800b83a:	220a      	movs	r2, #10
 800b83c:	4648      	mov	r0, r9
 800b83e:	f000 fafd 	bl	800be3c <__multadd>
 800b842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b844:	9002      	str	r0, [sp, #8]
 800b846:	f107 38ff 	add.w	r8, r7, #4294967295
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 8177 	beq.w	800bb3e <_dtoa_r+0xb66>
 800b850:	4629      	mov	r1, r5
 800b852:	2300      	movs	r3, #0
 800b854:	220a      	movs	r2, #10
 800b856:	4648      	mov	r0, r9
 800b858:	f000 faf0 	bl	800be3c <__multadd>
 800b85c:	f1bb 0f00 	cmp.w	fp, #0
 800b860:	4605      	mov	r5, r0
 800b862:	dc6f      	bgt.n	800b944 <_dtoa_r+0x96c>
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	2b02      	cmp	r3, #2
 800b868:	dc49      	bgt.n	800b8fe <_dtoa_r+0x926>
 800b86a:	e06b      	b.n	800b944 <_dtoa_r+0x96c>
 800b86c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b86e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b872:	e73c      	b.n	800b6ee <_dtoa_r+0x716>
 800b874:	3fe00000 	.word	0x3fe00000
 800b878:	40240000 	.word	0x40240000
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	1e5c      	subs	r4, r3, #1
 800b880:	9b08      	ldr	r3, [sp, #32]
 800b882:	42a3      	cmp	r3, r4
 800b884:	db09      	blt.n	800b89a <_dtoa_r+0x8c2>
 800b886:	1b1c      	subs	r4, r3, r4
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f6bf af30 	bge.w	800b6f0 <_dtoa_r+0x718>
 800b890:	9b00      	ldr	r3, [sp, #0]
 800b892:	9a03      	ldr	r2, [sp, #12]
 800b894:	1a9e      	subs	r6, r3, r2
 800b896:	2300      	movs	r3, #0
 800b898:	e72b      	b.n	800b6f2 <_dtoa_r+0x71a>
 800b89a:	9b08      	ldr	r3, [sp, #32]
 800b89c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b89e:	9408      	str	r4, [sp, #32]
 800b8a0:	1ae3      	subs	r3, r4, r3
 800b8a2:	441a      	add	r2, r3
 800b8a4:	9e00      	ldr	r6, [sp, #0]
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b8aa:	2400      	movs	r4, #0
 800b8ac:	e721      	b.n	800b6f2 <_dtoa_r+0x71a>
 800b8ae:	9c08      	ldr	r4, [sp, #32]
 800b8b0:	9e00      	ldr	r6, [sp, #0]
 800b8b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b8b4:	e728      	b.n	800b708 <_dtoa_r+0x730>
 800b8b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b8ba:	e751      	b.n	800b760 <_dtoa_r+0x788>
 800b8bc:	9a08      	ldr	r2, [sp, #32]
 800b8be:	9902      	ldr	r1, [sp, #8]
 800b8c0:	e750      	b.n	800b764 <_dtoa_r+0x78c>
 800b8c2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b8c6:	e751      	b.n	800b76c <_dtoa_r+0x794>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e779      	b.n	800b7c0 <_dtoa_r+0x7e8>
 800b8cc:	9b04      	ldr	r3, [sp, #16]
 800b8ce:	e777      	b.n	800b7c0 <_dtoa_r+0x7e8>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9308      	str	r3, [sp, #32]
 800b8d4:	e779      	b.n	800b7ca <_dtoa_r+0x7f2>
 800b8d6:	d093      	beq.n	800b800 <_dtoa_r+0x828>
 800b8d8:	9a00      	ldr	r2, [sp, #0]
 800b8da:	331c      	adds	r3, #28
 800b8dc:	441a      	add	r2, r3
 800b8de:	9200      	str	r2, [sp, #0]
 800b8e0:	9a06      	ldr	r2, [sp, #24]
 800b8e2:	441a      	add	r2, r3
 800b8e4:	441e      	add	r6, r3
 800b8e6:	9206      	str	r2, [sp, #24]
 800b8e8:	e78a      	b.n	800b800 <_dtoa_r+0x828>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	e7f4      	b.n	800b8d8 <_dtoa_r+0x900>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	46b8      	mov	r8, r7
 800b8f4:	dc20      	bgt.n	800b938 <_dtoa_r+0x960>
 800b8f6:	469b      	mov	fp, r3
 800b8f8:	9b07      	ldr	r3, [sp, #28]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	dd1e      	ble.n	800b93c <_dtoa_r+0x964>
 800b8fe:	f1bb 0f00 	cmp.w	fp, #0
 800b902:	f47f adb1 	bne.w	800b468 <_dtoa_r+0x490>
 800b906:	4621      	mov	r1, r4
 800b908:	465b      	mov	r3, fp
 800b90a:	2205      	movs	r2, #5
 800b90c:	4648      	mov	r0, r9
 800b90e:	f000 fa95 	bl	800be3c <__multadd>
 800b912:	4601      	mov	r1, r0
 800b914:	4604      	mov	r4, r0
 800b916:	9802      	ldr	r0, [sp, #8]
 800b918:	f000 fca0 	bl	800c25c <__mcmp>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f77f ada3 	ble.w	800b468 <_dtoa_r+0x490>
 800b922:	4656      	mov	r6, sl
 800b924:	2331      	movs	r3, #49	@ 0x31
 800b926:	f806 3b01 	strb.w	r3, [r6], #1
 800b92a:	f108 0801 	add.w	r8, r8, #1
 800b92e:	e59f      	b.n	800b470 <_dtoa_r+0x498>
 800b930:	9c03      	ldr	r4, [sp, #12]
 800b932:	46b8      	mov	r8, r7
 800b934:	4625      	mov	r5, r4
 800b936:	e7f4      	b.n	800b922 <_dtoa_r+0x94a>
 800b938:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 8101 	beq.w	800bb46 <_dtoa_r+0xb6e>
 800b944:	2e00      	cmp	r6, #0
 800b946:	dd05      	ble.n	800b954 <_dtoa_r+0x97c>
 800b948:	4629      	mov	r1, r5
 800b94a:	4632      	mov	r2, r6
 800b94c:	4648      	mov	r0, r9
 800b94e:	f000 fc19 	bl	800c184 <__lshift>
 800b952:	4605      	mov	r5, r0
 800b954:	9b08      	ldr	r3, [sp, #32]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d05c      	beq.n	800ba14 <_dtoa_r+0xa3c>
 800b95a:	6869      	ldr	r1, [r5, #4]
 800b95c:	4648      	mov	r0, r9
 800b95e:	f000 fa0b 	bl	800bd78 <_Balloc>
 800b962:	4606      	mov	r6, r0
 800b964:	b928      	cbnz	r0, 800b972 <_dtoa_r+0x99a>
 800b966:	4b82      	ldr	r3, [pc, #520]	@ (800bb70 <_dtoa_r+0xb98>)
 800b968:	4602      	mov	r2, r0
 800b96a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b96e:	f7ff bb4a 	b.w	800b006 <_dtoa_r+0x2e>
 800b972:	692a      	ldr	r2, [r5, #16]
 800b974:	3202      	adds	r2, #2
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	f105 010c 	add.w	r1, r5, #12
 800b97c:	300c      	adds	r0, #12
 800b97e:	f7ff fa94 	bl	800aeaa <memcpy>
 800b982:	2201      	movs	r2, #1
 800b984:	4631      	mov	r1, r6
 800b986:	4648      	mov	r0, r9
 800b988:	f000 fbfc 	bl	800c184 <__lshift>
 800b98c:	f10a 0301 	add.w	r3, sl, #1
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	eb0a 030b 	add.w	r3, sl, fp
 800b996:	9308      	str	r3, [sp, #32]
 800b998:	9b04      	ldr	r3, [sp, #16]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	462f      	mov	r7, r5
 800b9a0:	9306      	str	r3, [sp, #24]
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	9802      	ldr	r0, [sp, #8]
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800b9ae:	f7ff fa8a 	bl	800aec6 <quorem>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	3330      	adds	r3, #48	@ 0x30
 800b9b6:	9003      	str	r0, [sp, #12]
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	9802      	ldr	r0, [sp, #8]
 800b9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9be:	f000 fc4d 	bl	800c25c <__mcmp>
 800b9c2:	462a      	mov	r2, r5
 800b9c4:	9004      	str	r0, [sp, #16]
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4648      	mov	r0, r9
 800b9ca:	f000 fc63 	bl	800c294 <__mdiff>
 800b9ce:	68c2      	ldr	r2, [r0, #12]
 800b9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	bb02      	cbnz	r2, 800ba18 <_dtoa_r+0xa40>
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	9802      	ldr	r0, [sp, #8]
 800b9da:	f000 fc3f 	bl	800c25c <__mcmp>
 800b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4648      	mov	r0, r9
 800b9e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b9e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9ea:	f000 fa05 	bl	800bdf8 <_Bfree>
 800b9ee:	9b07      	ldr	r3, [sp, #28]
 800b9f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b9f2:	9e00      	ldr	r6, [sp, #0]
 800b9f4:	ea42 0103 	orr.w	r1, r2, r3
 800b9f8:	9b06      	ldr	r3, [sp, #24]
 800b9fa:	4319      	orrs	r1, r3
 800b9fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fe:	d10d      	bne.n	800ba1c <_dtoa_r+0xa44>
 800ba00:	2b39      	cmp	r3, #57	@ 0x39
 800ba02:	d027      	beq.n	800ba54 <_dtoa_r+0xa7c>
 800ba04:	9a04      	ldr	r2, [sp, #16]
 800ba06:	2a00      	cmp	r2, #0
 800ba08:	dd01      	ble.n	800ba0e <_dtoa_r+0xa36>
 800ba0a:	9b03      	ldr	r3, [sp, #12]
 800ba0c:	3331      	adds	r3, #49	@ 0x31
 800ba0e:	f88b 3000 	strb.w	r3, [fp]
 800ba12:	e52e      	b.n	800b472 <_dtoa_r+0x49a>
 800ba14:	4628      	mov	r0, r5
 800ba16:	e7b9      	b.n	800b98c <_dtoa_r+0x9b4>
 800ba18:	2201      	movs	r2, #1
 800ba1a:	e7e2      	b.n	800b9e2 <_dtoa_r+0xa0a>
 800ba1c:	9904      	ldr	r1, [sp, #16]
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	db04      	blt.n	800ba2c <_dtoa_r+0xa54>
 800ba22:	9807      	ldr	r0, [sp, #28]
 800ba24:	4301      	orrs	r1, r0
 800ba26:	9806      	ldr	r0, [sp, #24]
 800ba28:	4301      	orrs	r1, r0
 800ba2a:	d120      	bne.n	800ba6e <_dtoa_r+0xa96>
 800ba2c:	2a00      	cmp	r2, #0
 800ba2e:	ddee      	ble.n	800ba0e <_dtoa_r+0xa36>
 800ba30:	9902      	ldr	r1, [sp, #8]
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	2201      	movs	r2, #1
 800ba36:	4648      	mov	r0, r9
 800ba38:	f000 fba4 	bl	800c184 <__lshift>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	9002      	str	r0, [sp, #8]
 800ba40:	f000 fc0c 	bl	800c25c <__mcmp>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	dc02      	bgt.n	800ba50 <_dtoa_r+0xa78>
 800ba4a:	d1e0      	bne.n	800ba0e <_dtoa_r+0xa36>
 800ba4c:	07da      	lsls	r2, r3, #31
 800ba4e:	d5de      	bpl.n	800ba0e <_dtoa_r+0xa36>
 800ba50:	2b39      	cmp	r3, #57	@ 0x39
 800ba52:	d1da      	bne.n	800ba0a <_dtoa_r+0xa32>
 800ba54:	2339      	movs	r3, #57	@ 0x39
 800ba56:	f88b 3000 	strb.w	r3, [fp]
 800ba5a:	4633      	mov	r3, r6
 800ba5c:	461e      	mov	r6, r3
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba64:	2a39      	cmp	r2, #57	@ 0x39
 800ba66:	d04e      	beq.n	800bb06 <_dtoa_r+0xb2e>
 800ba68:	3201      	adds	r2, #1
 800ba6a:	701a      	strb	r2, [r3, #0]
 800ba6c:	e501      	b.n	800b472 <_dtoa_r+0x49a>
 800ba6e:	2a00      	cmp	r2, #0
 800ba70:	dd03      	ble.n	800ba7a <_dtoa_r+0xaa2>
 800ba72:	2b39      	cmp	r3, #57	@ 0x39
 800ba74:	d0ee      	beq.n	800ba54 <_dtoa_r+0xa7c>
 800ba76:	3301      	adds	r3, #1
 800ba78:	e7c9      	b.n	800ba0e <_dtoa_r+0xa36>
 800ba7a:	9a00      	ldr	r2, [sp, #0]
 800ba7c:	9908      	ldr	r1, [sp, #32]
 800ba7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba82:	428a      	cmp	r2, r1
 800ba84:	d028      	beq.n	800bad8 <_dtoa_r+0xb00>
 800ba86:	9902      	ldr	r1, [sp, #8]
 800ba88:	2300      	movs	r3, #0
 800ba8a:	220a      	movs	r2, #10
 800ba8c:	4648      	mov	r0, r9
 800ba8e:	f000 f9d5 	bl	800be3c <__multadd>
 800ba92:	42af      	cmp	r7, r5
 800ba94:	9002      	str	r0, [sp, #8]
 800ba96:	f04f 0300 	mov.w	r3, #0
 800ba9a:	f04f 020a 	mov.w	r2, #10
 800ba9e:	4639      	mov	r1, r7
 800baa0:	4648      	mov	r0, r9
 800baa2:	d107      	bne.n	800bab4 <_dtoa_r+0xadc>
 800baa4:	f000 f9ca 	bl	800be3c <__multadd>
 800baa8:	4607      	mov	r7, r0
 800baaa:	4605      	mov	r5, r0
 800baac:	9b00      	ldr	r3, [sp, #0]
 800baae:	3301      	adds	r3, #1
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	e777      	b.n	800b9a4 <_dtoa_r+0x9cc>
 800bab4:	f000 f9c2 	bl	800be3c <__multadd>
 800bab8:	4629      	mov	r1, r5
 800baba:	4607      	mov	r7, r0
 800babc:	2300      	movs	r3, #0
 800babe:	220a      	movs	r2, #10
 800bac0:	4648      	mov	r0, r9
 800bac2:	f000 f9bb 	bl	800be3c <__multadd>
 800bac6:	4605      	mov	r5, r0
 800bac8:	e7f0      	b.n	800baac <_dtoa_r+0xad4>
 800baca:	f1bb 0f00 	cmp.w	fp, #0
 800bace:	bfcc      	ite	gt
 800bad0:	465e      	movgt	r6, fp
 800bad2:	2601      	movle	r6, #1
 800bad4:	4456      	add	r6, sl
 800bad6:	2700      	movs	r7, #0
 800bad8:	9902      	ldr	r1, [sp, #8]
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	2201      	movs	r2, #1
 800bade:	4648      	mov	r0, r9
 800bae0:	f000 fb50 	bl	800c184 <__lshift>
 800bae4:	4621      	mov	r1, r4
 800bae6:	9002      	str	r0, [sp, #8]
 800bae8:	f000 fbb8 	bl	800c25c <__mcmp>
 800baec:	2800      	cmp	r0, #0
 800baee:	dcb4      	bgt.n	800ba5a <_dtoa_r+0xa82>
 800baf0:	d102      	bne.n	800baf8 <_dtoa_r+0xb20>
 800baf2:	9b00      	ldr	r3, [sp, #0]
 800baf4:	07db      	lsls	r3, r3, #31
 800baf6:	d4b0      	bmi.n	800ba5a <_dtoa_r+0xa82>
 800baf8:	4633      	mov	r3, r6
 800bafa:	461e      	mov	r6, r3
 800bafc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb00:	2a30      	cmp	r2, #48	@ 0x30
 800bb02:	d0fa      	beq.n	800bafa <_dtoa_r+0xb22>
 800bb04:	e4b5      	b.n	800b472 <_dtoa_r+0x49a>
 800bb06:	459a      	cmp	sl, r3
 800bb08:	d1a8      	bne.n	800ba5c <_dtoa_r+0xa84>
 800bb0a:	2331      	movs	r3, #49	@ 0x31
 800bb0c:	f108 0801 	add.w	r8, r8, #1
 800bb10:	f88a 3000 	strb.w	r3, [sl]
 800bb14:	e4ad      	b.n	800b472 <_dtoa_r+0x49a>
 800bb16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bb74 <_dtoa_r+0xb9c>
 800bb1c:	b11b      	cbz	r3, 800bb26 <_dtoa_r+0xb4e>
 800bb1e:	f10a 0308 	add.w	r3, sl, #8
 800bb22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	4650      	mov	r0, sl
 800bb28:	b017      	add	sp, #92	@ 0x5c
 800bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2e:	9b07      	ldr	r3, [sp, #28]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	f77f ae2e 	ble.w	800b792 <_dtoa_r+0x7ba>
 800bb36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	2001      	movs	r0, #1
 800bb3c:	e64d      	b.n	800b7da <_dtoa_r+0x802>
 800bb3e:	f1bb 0f00 	cmp.w	fp, #0
 800bb42:	f77f aed9 	ble.w	800b8f8 <_dtoa_r+0x920>
 800bb46:	4656      	mov	r6, sl
 800bb48:	9802      	ldr	r0, [sp, #8]
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	f7ff f9bb 	bl	800aec6 <quorem>
 800bb50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bb54:	f806 3b01 	strb.w	r3, [r6], #1
 800bb58:	eba6 020a 	sub.w	r2, r6, sl
 800bb5c:	4593      	cmp	fp, r2
 800bb5e:	ddb4      	ble.n	800baca <_dtoa_r+0xaf2>
 800bb60:	9902      	ldr	r1, [sp, #8]
 800bb62:	2300      	movs	r3, #0
 800bb64:	220a      	movs	r2, #10
 800bb66:	4648      	mov	r0, r9
 800bb68:	f000 f968 	bl	800be3c <__multadd>
 800bb6c:	9002      	str	r0, [sp, #8]
 800bb6e:	e7eb      	b.n	800bb48 <_dtoa_r+0xb70>
 800bb70:	0800d55c 	.word	0x0800d55c
 800bb74:	0800d4e0 	.word	0x0800d4e0

0800bb78 <_free_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	2900      	cmp	r1, #0
 800bb7e:	d041      	beq.n	800bc04 <_free_r+0x8c>
 800bb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb84:	1f0c      	subs	r4, r1, #4
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bfb8      	it	lt
 800bb8a:	18e4      	addlt	r4, r4, r3
 800bb8c:	f000 f8e8 	bl	800bd60 <__malloc_lock>
 800bb90:	4a1d      	ldr	r2, [pc, #116]	@ (800bc08 <_free_r+0x90>)
 800bb92:	6813      	ldr	r3, [r2, #0]
 800bb94:	b933      	cbnz	r3, 800bba4 <_free_r+0x2c>
 800bb96:	6063      	str	r3, [r4, #4]
 800bb98:	6014      	str	r4, [r2, #0]
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba0:	f000 b8e4 	b.w	800bd6c <__malloc_unlock>
 800bba4:	42a3      	cmp	r3, r4
 800bba6:	d908      	bls.n	800bbba <_free_r+0x42>
 800bba8:	6820      	ldr	r0, [r4, #0]
 800bbaa:	1821      	adds	r1, r4, r0
 800bbac:	428b      	cmp	r3, r1
 800bbae:	bf01      	itttt	eq
 800bbb0:	6819      	ldreq	r1, [r3, #0]
 800bbb2:	685b      	ldreq	r3, [r3, #4]
 800bbb4:	1809      	addeq	r1, r1, r0
 800bbb6:	6021      	streq	r1, [r4, #0]
 800bbb8:	e7ed      	b.n	800bb96 <_free_r+0x1e>
 800bbba:	461a      	mov	r2, r3
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	b10b      	cbz	r3, 800bbc4 <_free_r+0x4c>
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	d9fa      	bls.n	800bbba <_free_r+0x42>
 800bbc4:	6811      	ldr	r1, [r2, #0]
 800bbc6:	1850      	adds	r0, r2, r1
 800bbc8:	42a0      	cmp	r0, r4
 800bbca:	d10b      	bne.n	800bbe4 <_free_r+0x6c>
 800bbcc:	6820      	ldr	r0, [r4, #0]
 800bbce:	4401      	add	r1, r0
 800bbd0:	1850      	adds	r0, r2, r1
 800bbd2:	4283      	cmp	r3, r0
 800bbd4:	6011      	str	r1, [r2, #0]
 800bbd6:	d1e0      	bne.n	800bb9a <_free_r+0x22>
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	6053      	str	r3, [r2, #4]
 800bbde:	4408      	add	r0, r1
 800bbe0:	6010      	str	r0, [r2, #0]
 800bbe2:	e7da      	b.n	800bb9a <_free_r+0x22>
 800bbe4:	d902      	bls.n	800bbec <_free_r+0x74>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	602b      	str	r3, [r5, #0]
 800bbea:	e7d6      	b.n	800bb9a <_free_r+0x22>
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	1821      	adds	r1, r4, r0
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	bf04      	itt	eq
 800bbf4:	6819      	ldreq	r1, [r3, #0]
 800bbf6:	685b      	ldreq	r3, [r3, #4]
 800bbf8:	6063      	str	r3, [r4, #4]
 800bbfa:	bf04      	itt	eq
 800bbfc:	1809      	addeq	r1, r1, r0
 800bbfe:	6021      	streq	r1, [r4, #0]
 800bc00:	6054      	str	r4, [r2, #4]
 800bc02:	e7ca      	b.n	800bb9a <_free_r+0x22>
 800bc04:	bd38      	pop	{r3, r4, r5, pc}
 800bc06:	bf00      	nop
 800bc08:	20000eb8 	.word	0x20000eb8

0800bc0c <malloc>:
 800bc0c:	4b02      	ldr	r3, [pc, #8]	@ (800bc18 <malloc+0xc>)
 800bc0e:	4601      	mov	r1, r0
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	f000 b825 	b.w	800bc60 <_malloc_r>
 800bc16:	bf00      	nop
 800bc18:	2000002c 	.word	0x2000002c

0800bc1c <sbrk_aligned>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	4e0f      	ldr	r6, [pc, #60]	@ (800bc5c <sbrk_aligned+0x40>)
 800bc20:	460c      	mov	r4, r1
 800bc22:	6831      	ldr	r1, [r6, #0]
 800bc24:	4605      	mov	r5, r0
 800bc26:	b911      	cbnz	r1, 800bc2e <sbrk_aligned+0x12>
 800bc28:	f000 fe3e 	bl	800c8a8 <_sbrk_r>
 800bc2c:	6030      	str	r0, [r6, #0]
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 fe39 	bl	800c8a8 <_sbrk_r>
 800bc36:	1c43      	adds	r3, r0, #1
 800bc38:	d103      	bne.n	800bc42 <sbrk_aligned+0x26>
 800bc3a:	f04f 34ff 	mov.w	r4, #4294967295
 800bc3e:	4620      	mov	r0, r4
 800bc40:	bd70      	pop	{r4, r5, r6, pc}
 800bc42:	1cc4      	adds	r4, r0, #3
 800bc44:	f024 0403 	bic.w	r4, r4, #3
 800bc48:	42a0      	cmp	r0, r4
 800bc4a:	d0f8      	beq.n	800bc3e <sbrk_aligned+0x22>
 800bc4c:	1a21      	subs	r1, r4, r0
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f000 fe2a 	bl	800c8a8 <_sbrk_r>
 800bc54:	3001      	adds	r0, #1
 800bc56:	d1f2      	bne.n	800bc3e <sbrk_aligned+0x22>
 800bc58:	e7ef      	b.n	800bc3a <sbrk_aligned+0x1e>
 800bc5a:	bf00      	nop
 800bc5c:	20000eb4 	.word	0x20000eb4

0800bc60 <_malloc_r>:
 800bc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc64:	1ccd      	adds	r5, r1, #3
 800bc66:	f025 0503 	bic.w	r5, r5, #3
 800bc6a:	3508      	adds	r5, #8
 800bc6c:	2d0c      	cmp	r5, #12
 800bc6e:	bf38      	it	cc
 800bc70:	250c      	movcc	r5, #12
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	4606      	mov	r6, r0
 800bc76:	db01      	blt.n	800bc7c <_malloc_r+0x1c>
 800bc78:	42a9      	cmp	r1, r5
 800bc7a:	d904      	bls.n	800bc86 <_malloc_r+0x26>
 800bc7c:	230c      	movs	r3, #12
 800bc7e:	6033      	str	r3, [r6, #0]
 800bc80:	2000      	movs	r0, #0
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd5c <_malloc_r+0xfc>
 800bc8a:	f000 f869 	bl	800bd60 <__malloc_lock>
 800bc8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc92:	461c      	mov	r4, r3
 800bc94:	bb44      	cbnz	r4, 800bce8 <_malloc_r+0x88>
 800bc96:	4629      	mov	r1, r5
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f7ff ffbf 	bl	800bc1c <sbrk_aligned>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	4604      	mov	r4, r0
 800bca2:	d158      	bne.n	800bd56 <_malloc_r+0xf6>
 800bca4:	f8d8 4000 	ldr.w	r4, [r8]
 800bca8:	4627      	mov	r7, r4
 800bcaa:	2f00      	cmp	r7, #0
 800bcac:	d143      	bne.n	800bd36 <_malloc_r+0xd6>
 800bcae:	2c00      	cmp	r4, #0
 800bcb0:	d04b      	beq.n	800bd4a <_malloc_r+0xea>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	eb04 0903 	add.w	r9, r4, r3
 800bcbc:	f000 fdf4 	bl	800c8a8 <_sbrk_r>
 800bcc0:	4581      	cmp	r9, r0
 800bcc2:	d142      	bne.n	800bd4a <_malloc_r+0xea>
 800bcc4:	6821      	ldr	r1, [r4, #0]
 800bcc6:	1a6d      	subs	r5, r5, r1
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4630      	mov	r0, r6
 800bccc:	f7ff ffa6 	bl	800bc1c <sbrk_aligned>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d03a      	beq.n	800bd4a <_malloc_r+0xea>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	442b      	add	r3, r5
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	f8d8 3000 	ldr.w	r3, [r8]
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	bb62      	cbnz	r2, 800bd3c <_malloc_r+0xdc>
 800bce2:	f8c8 7000 	str.w	r7, [r8]
 800bce6:	e00f      	b.n	800bd08 <_malloc_r+0xa8>
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	1b52      	subs	r2, r2, r5
 800bcec:	d420      	bmi.n	800bd30 <_malloc_r+0xd0>
 800bcee:	2a0b      	cmp	r2, #11
 800bcf0:	d917      	bls.n	800bd22 <_malloc_r+0xc2>
 800bcf2:	1961      	adds	r1, r4, r5
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	6025      	str	r5, [r4, #0]
 800bcf8:	bf18      	it	ne
 800bcfa:	6059      	strne	r1, [r3, #4]
 800bcfc:	6863      	ldr	r3, [r4, #4]
 800bcfe:	bf08      	it	eq
 800bd00:	f8c8 1000 	streq.w	r1, [r8]
 800bd04:	5162      	str	r2, [r4, r5]
 800bd06:	604b      	str	r3, [r1, #4]
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f000 f82f 	bl	800bd6c <__malloc_unlock>
 800bd0e:	f104 000b 	add.w	r0, r4, #11
 800bd12:	1d23      	adds	r3, r4, #4
 800bd14:	f020 0007 	bic.w	r0, r0, #7
 800bd18:	1ac2      	subs	r2, r0, r3
 800bd1a:	bf1c      	itt	ne
 800bd1c:	1a1b      	subne	r3, r3, r0
 800bd1e:	50a3      	strne	r3, [r4, r2]
 800bd20:	e7af      	b.n	800bc82 <_malloc_r+0x22>
 800bd22:	6862      	ldr	r2, [r4, #4]
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	bf0c      	ite	eq
 800bd28:	f8c8 2000 	streq.w	r2, [r8]
 800bd2c:	605a      	strne	r2, [r3, #4]
 800bd2e:	e7eb      	b.n	800bd08 <_malloc_r+0xa8>
 800bd30:	4623      	mov	r3, r4
 800bd32:	6864      	ldr	r4, [r4, #4]
 800bd34:	e7ae      	b.n	800bc94 <_malloc_r+0x34>
 800bd36:	463c      	mov	r4, r7
 800bd38:	687f      	ldr	r7, [r7, #4]
 800bd3a:	e7b6      	b.n	800bcaa <_malloc_r+0x4a>
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	42a3      	cmp	r3, r4
 800bd42:	d1fb      	bne.n	800bd3c <_malloc_r+0xdc>
 800bd44:	2300      	movs	r3, #0
 800bd46:	6053      	str	r3, [r2, #4]
 800bd48:	e7de      	b.n	800bd08 <_malloc_r+0xa8>
 800bd4a:	230c      	movs	r3, #12
 800bd4c:	6033      	str	r3, [r6, #0]
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 f80c 	bl	800bd6c <__malloc_unlock>
 800bd54:	e794      	b.n	800bc80 <_malloc_r+0x20>
 800bd56:	6005      	str	r5, [r0, #0]
 800bd58:	e7d6      	b.n	800bd08 <_malloc_r+0xa8>
 800bd5a:	bf00      	nop
 800bd5c:	20000eb8 	.word	0x20000eb8

0800bd60 <__malloc_lock>:
 800bd60:	4801      	ldr	r0, [pc, #4]	@ (800bd68 <__malloc_lock+0x8>)
 800bd62:	f7ff b8a0 	b.w	800aea6 <__retarget_lock_acquire_recursive>
 800bd66:	bf00      	nop
 800bd68:	20000eb0 	.word	0x20000eb0

0800bd6c <__malloc_unlock>:
 800bd6c:	4801      	ldr	r0, [pc, #4]	@ (800bd74 <__malloc_unlock+0x8>)
 800bd6e:	f7ff b89b 	b.w	800aea8 <__retarget_lock_release_recursive>
 800bd72:	bf00      	nop
 800bd74:	20000eb0 	.word	0x20000eb0

0800bd78 <_Balloc>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	69c6      	ldr	r6, [r0, #28]
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	460d      	mov	r5, r1
 800bd80:	b976      	cbnz	r6, 800bda0 <_Balloc+0x28>
 800bd82:	2010      	movs	r0, #16
 800bd84:	f7ff ff42 	bl	800bc0c <malloc>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	61e0      	str	r0, [r4, #28]
 800bd8c:	b920      	cbnz	r0, 800bd98 <_Balloc+0x20>
 800bd8e:	4b18      	ldr	r3, [pc, #96]	@ (800bdf0 <_Balloc+0x78>)
 800bd90:	4818      	ldr	r0, [pc, #96]	@ (800bdf4 <_Balloc+0x7c>)
 800bd92:	216b      	movs	r1, #107	@ 0x6b
 800bd94:	f000 fd98 	bl	800c8c8 <__assert_func>
 800bd98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd9c:	6006      	str	r6, [r0, #0]
 800bd9e:	60c6      	str	r6, [r0, #12]
 800bda0:	69e6      	ldr	r6, [r4, #28]
 800bda2:	68f3      	ldr	r3, [r6, #12]
 800bda4:	b183      	cbz	r3, 800bdc8 <_Balloc+0x50>
 800bda6:	69e3      	ldr	r3, [r4, #28]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdae:	b9b8      	cbnz	r0, 800bde0 <_Balloc+0x68>
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	fa01 f605 	lsl.w	r6, r1, r5
 800bdb6:	1d72      	adds	r2, r6, #5
 800bdb8:	0092      	lsls	r2, r2, #2
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 fda2 	bl	800c904 <_calloc_r>
 800bdc0:	b160      	cbz	r0, 800bddc <_Balloc+0x64>
 800bdc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdc6:	e00e      	b.n	800bde6 <_Balloc+0x6e>
 800bdc8:	2221      	movs	r2, #33	@ 0x21
 800bdca:	2104      	movs	r1, #4
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fd99 	bl	800c904 <_calloc_r>
 800bdd2:	69e3      	ldr	r3, [r4, #28]
 800bdd4:	60f0      	str	r0, [r6, #12]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e4      	bne.n	800bda6 <_Balloc+0x2e>
 800bddc:	2000      	movs	r0, #0
 800bdde:	bd70      	pop	{r4, r5, r6, pc}
 800bde0:	6802      	ldr	r2, [r0, #0]
 800bde2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bde6:	2300      	movs	r3, #0
 800bde8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdec:	e7f7      	b.n	800bdde <_Balloc+0x66>
 800bdee:	bf00      	nop
 800bdf0:	0800d4ed 	.word	0x0800d4ed
 800bdf4:	0800d56d 	.word	0x0800d56d

0800bdf8 <_Bfree>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	69c6      	ldr	r6, [r0, #28]
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	b976      	cbnz	r6, 800be20 <_Bfree+0x28>
 800be02:	2010      	movs	r0, #16
 800be04:	f7ff ff02 	bl	800bc0c <malloc>
 800be08:	4602      	mov	r2, r0
 800be0a:	61e8      	str	r0, [r5, #28]
 800be0c:	b920      	cbnz	r0, 800be18 <_Bfree+0x20>
 800be0e:	4b09      	ldr	r3, [pc, #36]	@ (800be34 <_Bfree+0x3c>)
 800be10:	4809      	ldr	r0, [pc, #36]	@ (800be38 <_Bfree+0x40>)
 800be12:	218f      	movs	r1, #143	@ 0x8f
 800be14:	f000 fd58 	bl	800c8c8 <__assert_func>
 800be18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be1c:	6006      	str	r6, [r0, #0]
 800be1e:	60c6      	str	r6, [r0, #12]
 800be20:	b13c      	cbz	r4, 800be32 <_Bfree+0x3a>
 800be22:	69eb      	ldr	r3, [r5, #28]
 800be24:	6862      	ldr	r2, [r4, #4]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be2c:	6021      	str	r1, [r4, #0]
 800be2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	0800d4ed 	.word	0x0800d4ed
 800be38:	0800d56d 	.word	0x0800d56d

0800be3c <__multadd>:
 800be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be40:	690d      	ldr	r5, [r1, #16]
 800be42:	4607      	mov	r7, r0
 800be44:	460c      	mov	r4, r1
 800be46:	461e      	mov	r6, r3
 800be48:	f101 0c14 	add.w	ip, r1, #20
 800be4c:	2000      	movs	r0, #0
 800be4e:	f8dc 3000 	ldr.w	r3, [ip]
 800be52:	b299      	uxth	r1, r3
 800be54:	fb02 6101 	mla	r1, r2, r1, r6
 800be58:	0c1e      	lsrs	r6, r3, #16
 800be5a:	0c0b      	lsrs	r3, r1, #16
 800be5c:	fb02 3306 	mla	r3, r2, r6, r3
 800be60:	b289      	uxth	r1, r1
 800be62:	3001      	adds	r0, #1
 800be64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be68:	4285      	cmp	r5, r0
 800be6a:	f84c 1b04 	str.w	r1, [ip], #4
 800be6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be72:	dcec      	bgt.n	800be4e <__multadd+0x12>
 800be74:	b30e      	cbz	r6, 800beba <__multadd+0x7e>
 800be76:	68a3      	ldr	r3, [r4, #8]
 800be78:	42ab      	cmp	r3, r5
 800be7a:	dc19      	bgt.n	800beb0 <__multadd+0x74>
 800be7c:	6861      	ldr	r1, [r4, #4]
 800be7e:	4638      	mov	r0, r7
 800be80:	3101      	adds	r1, #1
 800be82:	f7ff ff79 	bl	800bd78 <_Balloc>
 800be86:	4680      	mov	r8, r0
 800be88:	b928      	cbnz	r0, 800be96 <__multadd+0x5a>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bec0 <__multadd+0x84>)
 800be8e:	480d      	ldr	r0, [pc, #52]	@ (800bec4 <__multadd+0x88>)
 800be90:	21ba      	movs	r1, #186	@ 0xba
 800be92:	f000 fd19 	bl	800c8c8 <__assert_func>
 800be96:	6922      	ldr	r2, [r4, #16]
 800be98:	3202      	adds	r2, #2
 800be9a:	f104 010c 	add.w	r1, r4, #12
 800be9e:	0092      	lsls	r2, r2, #2
 800bea0:	300c      	adds	r0, #12
 800bea2:	f7ff f802 	bl	800aeaa <memcpy>
 800bea6:	4621      	mov	r1, r4
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff ffa5 	bl	800bdf8 <_Bfree>
 800beae:	4644      	mov	r4, r8
 800beb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800beb4:	3501      	adds	r5, #1
 800beb6:	615e      	str	r6, [r3, #20]
 800beb8:	6125      	str	r5, [r4, #16]
 800beba:	4620      	mov	r0, r4
 800bebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec0:	0800d55c 	.word	0x0800d55c
 800bec4:	0800d56d 	.word	0x0800d56d

0800bec8 <__hi0bits>:
 800bec8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800becc:	4603      	mov	r3, r0
 800bece:	bf36      	itet	cc
 800bed0:	0403      	lslcc	r3, r0, #16
 800bed2:	2000      	movcs	r0, #0
 800bed4:	2010      	movcc	r0, #16
 800bed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800beda:	bf3c      	itt	cc
 800bedc:	021b      	lslcc	r3, r3, #8
 800bede:	3008      	addcc	r0, #8
 800bee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bee4:	bf3c      	itt	cc
 800bee6:	011b      	lslcc	r3, r3, #4
 800bee8:	3004      	addcc	r0, #4
 800beea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800beee:	bf3c      	itt	cc
 800bef0:	009b      	lslcc	r3, r3, #2
 800bef2:	3002      	addcc	r0, #2
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	db05      	blt.n	800bf04 <__hi0bits+0x3c>
 800bef8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800befc:	f100 0001 	add.w	r0, r0, #1
 800bf00:	bf08      	it	eq
 800bf02:	2020      	moveq	r0, #32
 800bf04:	4770      	bx	lr

0800bf06 <__lo0bits>:
 800bf06:	6803      	ldr	r3, [r0, #0]
 800bf08:	4602      	mov	r2, r0
 800bf0a:	f013 0007 	ands.w	r0, r3, #7
 800bf0e:	d00b      	beq.n	800bf28 <__lo0bits+0x22>
 800bf10:	07d9      	lsls	r1, r3, #31
 800bf12:	d421      	bmi.n	800bf58 <__lo0bits+0x52>
 800bf14:	0798      	lsls	r0, r3, #30
 800bf16:	bf49      	itett	mi
 800bf18:	085b      	lsrmi	r3, r3, #1
 800bf1a:	089b      	lsrpl	r3, r3, #2
 800bf1c:	2001      	movmi	r0, #1
 800bf1e:	6013      	strmi	r3, [r2, #0]
 800bf20:	bf5c      	itt	pl
 800bf22:	6013      	strpl	r3, [r2, #0]
 800bf24:	2002      	movpl	r0, #2
 800bf26:	4770      	bx	lr
 800bf28:	b299      	uxth	r1, r3
 800bf2a:	b909      	cbnz	r1, 800bf30 <__lo0bits+0x2a>
 800bf2c:	0c1b      	lsrs	r3, r3, #16
 800bf2e:	2010      	movs	r0, #16
 800bf30:	b2d9      	uxtb	r1, r3
 800bf32:	b909      	cbnz	r1, 800bf38 <__lo0bits+0x32>
 800bf34:	3008      	adds	r0, #8
 800bf36:	0a1b      	lsrs	r3, r3, #8
 800bf38:	0719      	lsls	r1, r3, #28
 800bf3a:	bf04      	itt	eq
 800bf3c:	091b      	lsreq	r3, r3, #4
 800bf3e:	3004      	addeq	r0, #4
 800bf40:	0799      	lsls	r1, r3, #30
 800bf42:	bf04      	itt	eq
 800bf44:	089b      	lsreq	r3, r3, #2
 800bf46:	3002      	addeq	r0, #2
 800bf48:	07d9      	lsls	r1, r3, #31
 800bf4a:	d403      	bmi.n	800bf54 <__lo0bits+0x4e>
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	f100 0001 	add.w	r0, r0, #1
 800bf52:	d003      	beq.n	800bf5c <__lo0bits+0x56>
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	4770      	bx	lr
 800bf58:	2000      	movs	r0, #0
 800bf5a:	4770      	bx	lr
 800bf5c:	2020      	movs	r0, #32
 800bf5e:	4770      	bx	lr

0800bf60 <__i2b>:
 800bf60:	b510      	push	{r4, lr}
 800bf62:	460c      	mov	r4, r1
 800bf64:	2101      	movs	r1, #1
 800bf66:	f7ff ff07 	bl	800bd78 <_Balloc>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	b928      	cbnz	r0, 800bf7a <__i2b+0x1a>
 800bf6e:	4b05      	ldr	r3, [pc, #20]	@ (800bf84 <__i2b+0x24>)
 800bf70:	4805      	ldr	r0, [pc, #20]	@ (800bf88 <__i2b+0x28>)
 800bf72:	f240 1145 	movw	r1, #325	@ 0x145
 800bf76:	f000 fca7 	bl	800c8c8 <__assert_func>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	6144      	str	r4, [r0, #20]
 800bf7e:	6103      	str	r3, [r0, #16]
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	bf00      	nop
 800bf84:	0800d55c 	.word	0x0800d55c
 800bf88:	0800d56d 	.word	0x0800d56d

0800bf8c <__multiply>:
 800bf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	4617      	mov	r7, r2
 800bf92:	690a      	ldr	r2, [r1, #16]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	bfa8      	it	ge
 800bf9a:	463b      	movge	r3, r7
 800bf9c:	4689      	mov	r9, r1
 800bf9e:	bfa4      	itt	ge
 800bfa0:	460f      	movge	r7, r1
 800bfa2:	4699      	movge	r9, r3
 800bfa4:	693d      	ldr	r5, [r7, #16]
 800bfa6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	eb05 060a 	add.w	r6, r5, sl
 800bfb2:	42b3      	cmp	r3, r6
 800bfb4:	b085      	sub	sp, #20
 800bfb6:	bfb8      	it	lt
 800bfb8:	3101      	addlt	r1, #1
 800bfba:	f7ff fedd 	bl	800bd78 <_Balloc>
 800bfbe:	b930      	cbnz	r0, 800bfce <__multiply+0x42>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4b41      	ldr	r3, [pc, #260]	@ (800c0c8 <__multiply+0x13c>)
 800bfc4:	4841      	ldr	r0, [pc, #260]	@ (800c0cc <__multiply+0x140>)
 800bfc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bfca:	f000 fc7d 	bl	800c8c8 <__assert_func>
 800bfce:	f100 0414 	add.w	r4, r0, #20
 800bfd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bfd6:	4623      	mov	r3, r4
 800bfd8:	2200      	movs	r2, #0
 800bfda:	4573      	cmp	r3, lr
 800bfdc:	d320      	bcc.n	800c020 <__multiply+0x94>
 800bfde:	f107 0814 	add.w	r8, r7, #20
 800bfe2:	f109 0114 	add.w	r1, r9, #20
 800bfe6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bfea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bfee:	9302      	str	r3, [sp, #8]
 800bff0:	1beb      	subs	r3, r5, r7
 800bff2:	3b15      	subs	r3, #21
 800bff4:	f023 0303 	bic.w	r3, r3, #3
 800bff8:	3304      	adds	r3, #4
 800bffa:	3715      	adds	r7, #21
 800bffc:	42bd      	cmp	r5, r7
 800bffe:	bf38      	it	cc
 800c000:	2304      	movcc	r3, #4
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	9103      	str	r1, [sp, #12]
 800c008:	428b      	cmp	r3, r1
 800c00a:	d80c      	bhi.n	800c026 <__multiply+0x9a>
 800c00c:	2e00      	cmp	r6, #0
 800c00e:	dd03      	ble.n	800c018 <__multiply+0x8c>
 800c010:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c014:	2b00      	cmp	r3, #0
 800c016:	d055      	beq.n	800c0c4 <__multiply+0x138>
 800c018:	6106      	str	r6, [r0, #16]
 800c01a:	b005      	add	sp, #20
 800c01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c020:	f843 2b04 	str.w	r2, [r3], #4
 800c024:	e7d9      	b.n	800bfda <__multiply+0x4e>
 800c026:	f8b1 a000 	ldrh.w	sl, [r1]
 800c02a:	f1ba 0f00 	cmp.w	sl, #0
 800c02e:	d01f      	beq.n	800c070 <__multiply+0xe4>
 800c030:	46c4      	mov	ip, r8
 800c032:	46a1      	mov	r9, r4
 800c034:	2700      	movs	r7, #0
 800c036:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c03a:	f8d9 3000 	ldr.w	r3, [r9]
 800c03e:	fa1f fb82 	uxth.w	fp, r2
 800c042:	b29b      	uxth	r3, r3
 800c044:	fb0a 330b 	mla	r3, sl, fp, r3
 800c048:	443b      	add	r3, r7
 800c04a:	f8d9 7000 	ldr.w	r7, [r9]
 800c04e:	0c12      	lsrs	r2, r2, #16
 800c050:	0c3f      	lsrs	r7, r7, #16
 800c052:	fb0a 7202 	mla	r2, sl, r2, r7
 800c056:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c060:	4565      	cmp	r5, ip
 800c062:	f849 3b04 	str.w	r3, [r9], #4
 800c066:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c06a:	d8e4      	bhi.n	800c036 <__multiply+0xaa>
 800c06c:	9b01      	ldr	r3, [sp, #4]
 800c06e:	50e7      	str	r7, [r4, r3]
 800c070:	9b03      	ldr	r3, [sp, #12]
 800c072:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c076:	3104      	adds	r1, #4
 800c078:	f1b9 0f00 	cmp.w	r9, #0
 800c07c:	d020      	beq.n	800c0c0 <__multiply+0x134>
 800c07e:	6823      	ldr	r3, [r4, #0]
 800c080:	4647      	mov	r7, r8
 800c082:	46a4      	mov	ip, r4
 800c084:	f04f 0a00 	mov.w	sl, #0
 800c088:	f8b7 b000 	ldrh.w	fp, [r7]
 800c08c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c090:	fb09 220b 	mla	r2, r9, fp, r2
 800c094:	4452      	add	r2, sl
 800c096:	b29b      	uxth	r3, r3
 800c098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c09c:	f84c 3b04 	str.w	r3, [ip], #4
 800c0a0:	f857 3b04 	ldr.w	r3, [r7], #4
 800c0a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0a8:	f8bc 3000 	ldrh.w	r3, [ip]
 800c0ac:	fb09 330a 	mla	r3, r9, sl, r3
 800c0b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c0b4:	42bd      	cmp	r5, r7
 800c0b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0ba:	d8e5      	bhi.n	800c088 <__multiply+0xfc>
 800c0bc:	9a01      	ldr	r2, [sp, #4]
 800c0be:	50a3      	str	r3, [r4, r2]
 800c0c0:	3404      	adds	r4, #4
 800c0c2:	e79f      	b.n	800c004 <__multiply+0x78>
 800c0c4:	3e01      	subs	r6, #1
 800c0c6:	e7a1      	b.n	800c00c <__multiply+0x80>
 800c0c8:	0800d55c 	.word	0x0800d55c
 800c0cc:	0800d56d 	.word	0x0800d56d

0800c0d0 <__pow5mult>:
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	4615      	mov	r5, r2
 800c0d6:	f012 0203 	ands.w	r2, r2, #3
 800c0da:	4607      	mov	r7, r0
 800c0dc:	460e      	mov	r6, r1
 800c0de:	d007      	beq.n	800c0f0 <__pow5mult+0x20>
 800c0e0:	4c25      	ldr	r4, [pc, #148]	@ (800c178 <__pow5mult+0xa8>)
 800c0e2:	3a01      	subs	r2, #1
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0ea:	f7ff fea7 	bl	800be3c <__multadd>
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	10ad      	asrs	r5, r5, #2
 800c0f2:	d03d      	beq.n	800c170 <__pow5mult+0xa0>
 800c0f4:	69fc      	ldr	r4, [r7, #28]
 800c0f6:	b97c      	cbnz	r4, 800c118 <__pow5mult+0x48>
 800c0f8:	2010      	movs	r0, #16
 800c0fa:	f7ff fd87 	bl	800bc0c <malloc>
 800c0fe:	4602      	mov	r2, r0
 800c100:	61f8      	str	r0, [r7, #28]
 800c102:	b928      	cbnz	r0, 800c110 <__pow5mult+0x40>
 800c104:	4b1d      	ldr	r3, [pc, #116]	@ (800c17c <__pow5mult+0xac>)
 800c106:	481e      	ldr	r0, [pc, #120]	@ (800c180 <__pow5mult+0xb0>)
 800c108:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c10c:	f000 fbdc 	bl	800c8c8 <__assert_func>
 800c110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c114:	6004      	str	r4, [r0, #0]
 800c116:	60c4      	str	r4, [r0, #12]
 800c118:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c11c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c120:	b94c      	cbnz	r4, 800c136 <__pow5mult+0x66>
 800c122:	f240 2171 	movw	r1, #625	@ 0x271
 800c126:	4638      	mov	r0, r7
 800c128:	f7ff ff1a 	bl	800bf60 <__i2b>
 800c12c:	2300      	movs	r3, #0
 800c12e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c132:	4604      	mov	r4, r0
 800c134:	6003      	str	r3, [r0, #0]
 800c136:	f04f 0900 	mov.w	r9, #0
 800c13a:	07eb      	lsls	r3, r5, #31
 800c13c:	d50a      	bpl.n	800c154 <__pow5mult+0x84>
 800c13e:	4631      	mov	r1, r6
 800c140:	4622      	mov	r2, r4
 800c142:	4638      	mov	r0, r7
 800c144:	f7ff ff22 	bl	800bf8c <__multiply>
 800c148:	4631      	mov	r1, r6
 800c14a:	4680      	mov	r8, r0
 800c14c:	4638      	mov	r0, r7
 800c14e:	f7ff fe53 	bl	800bdf8 <_Bfree>
 800c152:	4646      	mov	r6, r8
 800c154:	106d      	asrs	r5, r5, #1
 800c156:	d00b      	beq.n	800c170 <__pow5mult+0xa0>
 800c158:	6820      	ldr	r0, [r4, #0]
 800c15a:	b938      	cbnz	r0, 800c16c <__pow5mult+0x9c>
 800c15c:	4622      	mov	r2, r4
 800c15e:	4621      	mov	r1, r4
 800c160:	4638      	mov	r0, r7
 800c162:	f7ff ff13 	bl	800bf8c <__multiply>
 800c166:	6020      	str	r0, [r4, #0]
 800c168:	f8c0 9000 	str.w	r9, [r0]
 800c16c:	4604      	mov	r4, r0
 800c16e:	e7e4      	b.n	800c13a <__pow5mult+0x6a>
 800c170:	4630      	mov	r0, r6
 800c172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c176:	bf00      	nop
 800c178:	0800d620 	.word	0x0800d620
 800c17c:	0800d4ed 	.word	0x0800d4ed
 800c180:	0800d56d 	.word	0x0800d56d

0800c184 <__lshift>:
 800c184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c188:	460c      	mov	r4, r1
 800c18a:	6849      	ldr	r1, [r1, #4]
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	4607      	mov	r7, r0
 800c196:	4691      	mov	r9, r2
 800c198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c19c:	f108 0601 	add.w	r6, r8, #1
 800c1a0:	42b3      	cmp	r3, r6
 800c1a2:	db0b      	blt.n	800c1bc <__lshift+0x38>
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	f7ff fde7 	bl	800bd78 <_Balloc>
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	b948      	cbnz	r0, 800c1c2 <__lshift+0x3e>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	4b28      	ldr	r3, [pc, #160]	@ (800c254 <__lshift+0xd0>)
 800c1b2:	4829      	ldr	r0, [pc, #164]	@ (800c258 <__lshift+0xd4>)
 800c1b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c1b8:	f000 fb86 	bl	800c8c8 <__assert_func>
 800c1bc:	3101      	adds	r1, #1
 800c1be:	005b      	lsls	r3, r3, #1
 800c1c0:	e7ee      	b.n	800c1a0 <__lshift+0x1c>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f100 0114 	add.w	r1, r0, #20
 800c1c8:	f100 0210 	add.w	r2, r0, #16
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	4553      	cmp	r3, sl
 800c1d0:	db33      	blt.n	800c23a <__lshift+0xb6>
 800c1d2:	6920      	ldr	r0, [r4, #16]
 800c1d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1d8:	f104 0314 	add.w	r3, r4, #20
 800c1dc:	f019 091f 	ands.w	r9, r9, #31
 800c1e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1e8:	d02b      	beq.n	800c242 <__lshift+0xbe>
 800c1ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c1ee:	468a      	mov	sl, r1
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c1f8:	4310      	orrs	r0, r2
 800c1fa:	f84a 0b04 	str.w	r0, [sl], #4
 800c1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c202:	459c      	cmp	ip, r3
 800c204:	fa22 f20e 	lsr.w	r2, r2, lr
 800c208:	d8f3      	bhi.n	800c1f2 <__lshift+0x6e>
 800c20a:	ebac 0304 	sub.w	r3, ip, r4
 800c20e:	3b15      	subs	r3, #21
 800c210:	f023 0303 	bic.w	r3, r3, #3
 800c214:	3304      	adds	r3, #4
 800c216:	f104 0015 	add.w	r0, r4, #21
 800c21a:	4560      	cmp	r0, ip
 800c21c:	bf88      	it	hi
 800c21e:	2304      	movhi	r3, #4
 800c220:	50ca      	str	r2, [r1, r3]
 800c222:	b10a      	cbz	r2, 800c228 <__lshift+0xa4>
 800c224:	f108 0602 	add.w	r6, r8, #2
 800c228:	3e01      	subs	r6, #1
 800c22a:	4638      	mov	r0, r7
 800c22c:	612e      	str	r6, [r5, #16]
 800c22e:	4621      	mov	r1, r4
 800c230:	f7ff fde2 	bl	800bdf8 <_Bfree>
 800c234:	4628      	mov	r0, r5
 800c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c23e:	3301      	adds	r3, #1
 800c240:	e7c5      	b.n	800c1ce <__lshift+0x4a>
 800c242:	3904      	subs	r1, #4
 800c244:	f853 2b04 	ldr.w	r2, [r3], #4
 800c248:	f841 2f04 	str.w	r2, [r1, #4]!
 800c24c:	459c      	cmp	ip, r3
 800c24e:	d8f9      	bhi.n	800c244 <__lshift+0xc0>
 800c250:	e7ea      	b.n	800c228 <__lshift+0xa4>
 800c252:	bf00      	nop
 800c254:	0800d55c 	.word	0x0800d55c
 800c258:	0800d56d 	.word	0x0800d56d

0800c25c <__mcmp>:
 800c25c:	690a      	ldr	r2, [r1, #16]
 800c25e:	4603      	mov	r3, r0
 800c260:	6900      	ldr	r0, [r0, #16]
 800c262:	1a80      	subs	r0, r0, r2
 800c264:	b530      	push	{r4, r5, lr}
 800c266:	d10e      	bne.n	800c286 <__mcmp+0x2a>
 800c268:	3314      	adds	r3, #20
 800c26a:	3114      	adds	r1, #20
 800c26c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c27c:	4295      	cmp	r5, r2
 800c27e:	d003      	beq.n	800c288 <__mcmp+0x2c>
 800c280:	d205      	bcs.n	800c28e <__mcmp+0x32>
 800c282:	f04f 30ff 	mov.w	r0, #4294967295
 800c286:	bd30      	pop	{r4, r5, pc}
 800c288:	42a3      	cmp	r3, r4
 800c28a:	d3f3      	bcc.n	800c274 <__mcmp+0x18>
 800c28c:	e7fb      	b.n	800c286 <__mcmp+0x2a>
 800c28e:	2001      	movs	r0, #1
 800c290:	e7f9      	b.n	800c286 <__mcmp+0x2a>
	...

0800c294 <__mdiff>:
 800c294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	4689      	mov	r9, r1
 800c29a:	4606      	mov	r6, r0
 800c29c:	4611      	mov	r1, r2
 800c29e:	4648      	mov	r0, r9
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	f7ff ffdb 	bl	800c25c <__mcmp>
 800c2a6:	1e05      	subs	r5, r0, #0
 800c2a8:	d112      	bne.n	800c2d0 <__mdiff+0x3c>
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	f7ff fd63 	bl	800bd78 <_Balloc>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	b928      	cbnz	r0, 800c2c2 <__mdiff+0x2e>
 800c2b6:	4b3f      	ldr	r3, [pc, #252]	@ (800c3b4 <__mdiff+0x120>)
 800c2b8:	f240 2137 	movw	r1, #567	@ 0x237
 800c2bc:	483e      	ldr	r0, [pc, #248]	@ (800c3b8 <__mdiff+0x124>)
 800c2be:	f000 fb03 	bl	800c8c8 <__assert_func>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	b003      	add	sp, #12
 800c2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d0:	bfbc      	itt	lt
 800c2d2:	464b      	movlt	r3, r9
 800c2d4:	46a1      	movlt	r9, r4
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2dc:	bfba      	itte	lt
 800c2de:	461c      	movlt	r4, r3
 800c2e0:	2501      	movlt	r5, #1
 800c2e2:	2500      	movge	r5, #0
 800c2e4:	f7ff fd48 	bl	800bd78 <_Balloc>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	b918      	cbnz	r0, 800c2f4 <__mdiff+0x60>
 800c2ec:	4b31      	ldr	r3, [pc, #196]	@ (800c3b4 <__mdiff+0x120>)
 800c2ee:	f240 2145 	movw	r1, #581	@ 0x245
 800c2f2:	e7e3      	b.n	800c2bc <__mdiff+0x28>
 800c2f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c2f8:	6926      	ldr	r6, [r4, #16]
 800c2fa:	60c5      	str	r5, [r0, #12]
 800c2fc:	f109 0310 	add.w	r3, r9, #16
 800c300:	f109 0514 	add.w	r5, r9, #20
 800c304:	f104 0e14 	add.w	lr, r4, #20
 800c308:	f100 0b14 	add.w	fp, r0, #20
 800c30c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c310:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	46d9      	mov	r9, fp
 800c318:	f04f 0c00 	mov.w	ip, #0
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c322:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	fa1f f38a 	uxth.w	r3, sl
 800c32c:	4619      	mov	r1, r3
 800c32e:	b283      	uxth	r3, r0
 800c330:	1acb      	subs	r3, r1, r3
 800c332:	0c00      	lsrs	r0, r0, #16
 800c334:	4463      	add	r3, ip
 800c336:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c33a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c33e:	b29b      	uxth	r3, r3
 800c340:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c344:	4576      	cmp	r6, lr
 800c346:	f849 3b04 	str.w	r3, [r9], #4
 800c34a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c34e:	d8e5      	bhi.n	800c31c <__mdiff+0x88>
 800c350:	1b33      	subs	r3, r6, r4
 800c352:	3b15      	subs	r3, #21
 800c354:	f023 0303 	bic.w	r3, r3, #3
 800c358:	3415      	adds	r4, #21
 800c35a:	3304      	adds	r3, #4
 800c35c:	42a6      	cmp	r6, r4
 800c35e:	bf38      	it	cc
 800c360:	2304      	movcc	r3, #4
 800c362:	441d      	add	r5, r3
 800c364:	445b      	add	r3, fp
 800c366:	461e      	mov	r6, r3
 800c368:	462c      	mov	r4, r5
 800c36a:	4544      	cmp	r4, r8
 800c36c:	d30e      	bcc.n	800c38c <__mdiff+0xf8>
 800c36e:	f108 0103 	add.w	r1, r8, #3
 800c372:	1b49      	subs	r1, r1, r5
 800c374:	f021 0103 	bic.w	r1, r1, #3
 800c378:	3d03      	subs	r5, #3
 800c37a:	45a8      	cmp	r8, r5
 800c37c:	bf38      	it	cc
 800c37e:	2100      	movcc	r1, #0
 800c380:	440b      	add	r3, r1
 800c382:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c386:	b191      	cbz	r1, 800c3ae <__mdiff+0x11a>
 800c388:	6117      	str	r7, [r2, #16]
 800c38a:	e79d      	b.n	800c2c8 <__mdiff+0x34>
 800c38c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c390:	46e6      	mov	lr, ip
 800c392:	0c08      	lsrs	r0, r1, #16
 800c394:	fa1c fc81 	uxtah	ip, ip, r1
 800c398:	4471      	add	r1, lr
 800c39a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c39e:	b289      	uxth	r1, r1
 800c3a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c3a4:	f846 1b04 	str.w	r1, [r6], #4
 800c3a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3ac:	e7dd      	b.n	800c36a <__mdiff+0xd6>
 800c3ae:	3f01      	subs	r7, #1
 800c3b0:	e7e7      	b.n	800c382 <__mdiff+0xee>
 800c3b2:	bf00      	nop
 800c3b4:	0800d55c 	.word	0x0800d55c
 800c3b8:	0800d56d 	.word	0x0800d56d

0800c3bc <__d2b>:
 800c3bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	460f      	mov	r7, r1
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	ec59 8b10 	vmov	r8, r9, d0
 800c3c8:	4616      	mov	r6, r2
 800c3ca:	f7ff fcd5 	bl	800bd78 <_Balloc>
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	b930      	cbnz	r0, 800c3e0 <__d2b+0x24>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	4b23      	ldr	r3, [pc, #140]	@ (800c464 <__d2b+0xa8>)
 800c3d6:	4824      	ldr	r0, [pc, #144]	@ (800c468 <__d2b+0xac>)
 800c3d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3dc:	f000 fa74 	bl	800c8c8 <__assert_func>
 800c3e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3e8:	b10d      	cbz	r5, 800c3ee <__d2b+0x32>
 800c3ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3ee:	9301      	str	r3, [sp, #4]
 800c3f0:	f1b8 0300 	subs.w	r3, r8, #0
 800c3f4:	d023      	beq.n	800c43e <__d2b+0x82>
 800c3f6:	4668      	mov	r0, sp
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	f7ff fd84 	bl	800bf06 <__lo0bits>
 800c3fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c402:	b1d0      	cbz	r0, 800c43a <__d2b+0x7e>
 800c404:	f1c0 0320 	rsb	r3, r0, #32
 800c408:	fa02 f303 	lsl.w	r3, r2, r3
 800c40c:	430b      	orrs	r3, r1
 800c40e:	40c2      	lsrs	r2, r0
 800c410:	6163      	str	r3, [r4, #20]
 800c412:	9201      	str	r2, [sp, #4]
 800c414:	9b01      	ldr	r3, [sp, #4]
 800c416:	61a3      	str	r3, [r4, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bf0c      	ite	eq
 800c41c:	2201      	moveq	r2, #1
 800c41e:	2202      	movne	r2, #2
 800c420:	6122      	str	r2, [r4, #16]
 800c422:	b1a5      	cbz	r5, 800c44e <__d2b+0x92>
 800c424:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c428:	4405      	add	r5, r0
 800c42a:	603d      	str	r5, [r7, #0]
 800c42c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c430:	6030      	str	r0, [r6, #0]
 800c432:	4620      	mov	r0, r4
 800c434:	b003      	add	sp, #12
 800c436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c43a:	6161      	str	r1, [r4, #20]
 800c43c:	e7ea      	b.n	800c414 <__d2b+0x58>
 800c43e:	a801      	add	r0, sp, #4
 800c440:	f7ff fd61 	bl	800bf06 <__lo0bits>
 800c444:	9b01      	ldr	r3, [sp, #4]
 800c446:	6163      	str	r3, [r4, #20]
 800c448:	3020      	adds	r0, #32
 800c44a:	2201      	movs	r2, #1
 800c44c:	e7e8      	b.n	800c420 <__d2b+0x64>
 800c44e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c452:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c456:	6038      	str	r0, [r7, #0]
 800c458:	6918      	ldr	r0, [r3, #16]
 800c45a:	f7ff fd35 	bl	800bec8 <__hi0bits>
 800c45e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c462:	e7e5      	b.n	800c430 <__d2b+0x74>
 800c464:	0800d55c 	.word	0x0800d55c
 800c468:	0800d56d 	.word	0x0800d56d

0800c46c <__ssputs_r>:
 800c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	688e      	ldr	r6, [r1, #8]
 800c472:	461f      	mov	r7, r3
 800c474:	42be      	cmp	r6, r7
 800c476:	680b      	ldr	r3, [r1, #0]
 800c478:	4682      	mov	sl, r0
 800c47a:	460c      	mov	r4, r1
 800c47c:	4690      	mov	r8, r2
 800c47e:	d82d      	bhi.n	800c4dc <__ssputs_r+0x70>
 800c480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c484:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c488:	d026      	beq.n	800c4d8 <__ssputs_r+0x6c>
 800c48a:	6965      	ldr	r5, [r4, #20]
 800c48c:	6909      	ldr	r1, [r1, #16]
 800c48e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c492:	eba3 0901 	sub.w	r9, r3, r1
 800c496:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c49a:	1c7b      	adds	r3, r7, #1
 800c49c:	444b      	add	r3, r9
 800c49e:	106d      	asrs	r5, r5, #1
 800c4a0:	429d      	cmp	r5, r3
 800c4a2:	bf38      	it	cc
 800c4a4:	461d      	movcc	r5, r3
 800c4a6:	0553      	lsls	r3, r2, #21
 800c4a8:	d527      	bpl.n	800c4fa <__ssputs_r+0x8e>
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	f7ff fbd8 	bl	800bc60 <_malloc_r>
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	b360      	cbz	r0, 800c50e <__ssputs_r+0xa2>
 800c4b4:	6921      	ldr	r1, [r4, #16]
 800c4b6:	464a      	mov	r2, r9
 800c4b8:	f7fe fcf7 	bl	800aeaa <memcpy>
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c4c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4c6:	81a3      	strh	r3, [r4, #12]
 800c4c8:	6126      	str	r6, [r4, #16]
 800c4ca:	6165      	str	r5, [r4, #20]
 800c4cc:	444e      	add	r6, r9
 800c4ce:	eba5 0509 	sub.w	r5, r5, r9
 800c4d2:	6026      	str	r6, [r4, #0]
 800c4d4:	60a5      	str	r5, [r4, #8]
 800c4d6:	463e      	mov	r6, r7
 800c4d8:	42be      	cmp	r6, r7
 800c4da:	d900      	bls.n	800c4de <__ssputs_r+0x72>
 800c4dc:	463e      	mov	r6, r7
 800c4de:	6820      	ldr	r0, [r4, #0]
 800c4e0:	4632      	mov	r2, r6
 800c4e2:	4641      	mov	r1, r8
 800c4e4:	f000 f9c6 	bl	800c874 <memmove>
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	1b9b      	subs	r3, r3, r6
 800c4ec:	60a3      	str	r3, [r4, #8]
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	4433      	add	r3, r6
 800c4f2:	6023      	str	r3, [r4, #0]
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fa:	462a      	mov	r2, r5
 800c4fc:	f000 fa28 	bl	800c950 <_realloc_r>
 800c500:	4606      	mov	r6, r0
 800c502:	2800      	cmp	r0, #0
 800c504:	d1e0      	bne.n	800c4c8 <__ssputs_r+0x5c>
 800c506:	6921      	ldr	r1, [r4, #16]
 800c508:	4650      	mov	r0, sl
 800c50a:	f7ff fb35 	bl	800bb78 <_free_r>
 800c50e:	230c      	movs	r3, #12
 800c510:	f8ca 3000 	str.w	r3, [sl]
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295
 800c520:	e7e9      	b.n	800c4f6 <__ssputs_r+0x8a>
	...

0800c524 <_svfiprintf_r>:
 800c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	4698      	mov	r8, r3
 800c52a:	898b      	ldrh	r3, [r1, #12]
 800c52c:	061b      	lsls	r3, r3, #24
 800c52e:	b09d      	sub	sp, #116	@ 0x74
 800c530:	4607      	mov	r7, r0
 800c532:	460d      	mov	r5, r1
 800c534:	4614      	mov	r4, r2
 800c536:	d510      	bpl.n	800c55a <_svfiprintf_r+0x36>
 800c538:	690b      	ldr	r3, [r1, #16]
 800c53a:	b973      	cbnz	r3, 800c55a <_svfiprintf_r+0x36>
 800c53c:	2140      	movs	r1, #64	@ 0x40
 800c53e:	f7ff fb8f 	bl	800bc60 <_malloc_r>
 800c542:	6028      	str	r0, [r5, #0]
 800c544:	6128      	str	r0, [r5, #16]
 800c546:	b930      	cbnz	r0, 800c556 <_svfiprintf_r+0x32>
 800c548:	230c      	movs	r3, #12
 800c54a:	603b      	str	r3, [r7, #0]
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	b01d      	add	sp, #116	@ 0x74
 800c552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c556:	2340      	movs	r3, #64	@ 0x40
 800c558:	616b      	str	r3, [r5, #20]
 800c55a:	2300      	movs	r3, #0
 800c55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c55e:	2320      	movs	r3, #32
 800c560:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c564:	f8cd 800c 	str.w	r8, [sp, #12]
 800c568:	2330      	movs	r3, #48	@ 0x30
 800c56a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c708 <_svfiprintf_r+0x1e4>
 800c56e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c572:	f04f 0901 	mov.w	r9, #1
 800c576:	4623      	mov	r3, r4
 800c578:	469a      	mov	sl, r3
 800c57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c57e:	b10a      	cbz	r2, 800c584 <_svfiprintf_r+0x60>
 800c580:	2a25      	cmp	r2, #37	@ 0x25
 800c582:	d1f9      	bne.n	800c578 <_svfiprintf_r+0x54>
 800c584:	ebba 0b04 	subs.w	fp, sl, r4
 800c588:	d00b      	beq.n	800c5a2 <_svfiprintf_r+0x7e>
 800c58a:	465b      	mov	r3, fp
 800c58c:	4622      	mov	r2, r4
 800c58e:	4629      	mov	r1, r5
 800c590:	4638      	mov	r0, r7
 800c592:	f7ff ff6b 	bl	800c46c <__ssputs_r>
 800c596:	3001      	adds	r0, #1
 800c598:	f000 80a7 	beq.w	800c6ea <_svfiprintf_r+0x1c6>
 800c59c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c59e:	445a      	add	r2, fp
 800c5a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f000 809f 	beq.w	800c6ea <_svfiprintf_r+0x1c6>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5b6:	f10a 0a01 	add.w	sl, sl, #1
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	9307      	str	r3, [sp, #28]
 800c5be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5c4:	4654      	mov	r4, sl
 800c5c6:	2205      	movs	r2, #5
 800c5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5cc:	484e      	ldr	r0, [pc, #312]	@ (800c708 <_svfiprintf_r+0x1e4>)
 800c5ce:	f7f3 fe1f 	bl	8000210 <memchr>
 800c5d2:	9a04      	ldr	r2, [sp, #16]
 800c5d4:	b9d8      	cbnz	r0, 800c60e <_svfiprintf_r+0xea>
 800c5d6:	06d0      	lsls	r0, r2, #27
 800c5d8:	bf44      	itt	mi
 800c5da:	2320      	movmi	r3, #32
 800c5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5e0:	0711      	lsls	r1, r2, #28
 800c5e2:	bf44      	itt	mi
 800c5e4:	232b      	movmi	r3, #43	@ 0x2b
 800c5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5f0:	d015      	beq.n	800c61e <_svfiprintf_r+0xfa>
 800c5f2:	9a07      	ldr	r2, [sp, #28]
 800c5f4:	4654      	mov	r4, sl
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	f04f 0c0a 	mov.w	ip, #10
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c602:	3b30      	subs	r3, #48	@ 0x30
 800c604:	2b09      	cmp	r3, #9
 800c606:	d94b      	bls.n	800c6a0 <_svfiprintf_r+0x17c>
 800c608:	b1b0      	cbz	r0, 800c638 <_svfiprintf_r+0x114>
 800c60a:	9207      	str	r2, [sp, #28]
 800c60c:	e014      	b.n	800c638 <_svfiprintf_r+0x114>
 800c60e:	eba0 0308 	sub.w	r3, r0, r8
 800c612:	fa09 f303 	lsl.w	r3, r9, r3
 800c616:	4313      	orrs	r3, r2
 800c618:	9304      	str	r3, [sp, #16]
 800c61a:	46a2      	mov	sl, r4
 800c61c:	e7d2      	b.n	800c5c4 <_svfiprintf_r+0xa0>
 800c61e:	9b03      	ldr	r3, [sp, #12]
 800c620:	1d19      	adds	r1, r3, #4
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	9103      	str	r1, [sp, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	bfbb      	ittet	lt
 800c62a:	425b      	neglt	r3, r3
 800c62c:	f042 0202 	orrlt.w	r2, r2, #2
 800c630:	9307      	strge	r3, [sp, #28]
 800c632:	9307      	strlt	r3, [sp, #28]
 800c634:	bfb8      	it	lt
 800c636:	9204      	strlt	r2, [sp, #16]
 800c638:	7823      	ldrb	r3, [r4, #0]
 800c63a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c63c:	d10a      	bne.n	800c654 <_svfiprintf_r+0x130>
 800c63e:	7863      	ldrb	r3, [r4, #1]
 800c640:	2b2a      	cmp	r3, #42	@ 0x2a
 800c642:	d132      	bne.n	800c6aa <_svfiprintf_r+0x186>
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	1d1a      	adds	r2, r3, #4
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	9203      	str	r2, [sp, #12]
 800c64c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c650:	3402      	adds	r4, #2
 800c652:	9305      	str	r3, [sp, #20]
 800c654:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c718 <_svfiprintf_r+0x1f4>
 800c658:	7821      	ldrb	r1, [r4, #0]
 800c65a:	2203      	movs	r2, #3
 800c65c:	4650      	mov	r0, sl
 800c65e:	f7f3 fdd7 	bl	8000210 <memchr>
 800c662:	b138      	cbz	r0, 800c674 <_svfiprintf_r+0x150>
 800c664:	9b04      	ldr	r3, [sp, #16]
 800c666:	eba0 000a 	sub.w	r0, r0, sl
 800c66a:	2240      	movs	r2, #64	@ 0x40
 800c66c:	4082      	lsls	r2, r0
 800c66e:	4313      	orrs	r3, r2
 800c670:	3401      	adds	r4, #1
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c678:	4824      	ldr	r0, [pc, #144]	@ (800c70c <_svfiprintf_r+0x1e8>)
 800c67a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c67e:	2206      	movs	r2, #6
 800c680:	f7f3 fdc6 	bl	8000210 <memchr>
 800c684:	2800      	cmp	r0, #0
 800c686:	d036      	beq.n	800c6f6 <_svfiprintf_r+0x1d2>
 800c688:	4b21      	ldr	r3, [pc, #132]	@ (800c710 <_svfiprintf_r+0x1ec>)
 800c68a:	bb1b      	cbnz	r3, 800c6d4 <_svfiprintf_r+0x1b0>
 800c68c:	9b03      	ldr	r3, [sp, #12]
 800c68e:	3307      	adds	r3, #7
 800c690:	f023 0307 	bic.w	r3, r3, #7
 800c694:	3308      	adds	r3, #8
 800c696:	9303      	str	r3, [sp, #12]
 800c698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c69a:	4433      	add	r3, r6
 800c69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c69e:	e76a      	b.n	800c576 <_svfiprintf_r+0x52>
 800c6a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	e7a8      	b.n	800c5fc <_svfiprintf_r+0xd8>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	3401      	adds	r4, #1
 800c6ae:	9305      	str	r3, [sp, #20]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	f04f 0c0a 	mov.w	ip, #10
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6bc:	3a30      	subs	r2, #48	@ 0x30
 800c6be:	2a09      	cmp	r2, #9
 800c6c0:	d903      	bls.n	800c6ca <_svfiprintf_r+0x1a6>
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0c6      	beq.n	800c654 <_svfiprintf_r+0x130>
 800c6c6:	9105      	str	r1, [sp, #20]
 800c6c8:	e7c4      	b.n	800c654 <_svfiprintf_r+0x130>
 800c6ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e7f0      	b.n	800c6b6 <_svfiprintf_r+0x192>
 800c6d4:	ab03      	add	r3, sp, #12
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	462a      	mov	r2, r5
 800c6da:	4b0e      	ldr	r3, [pc, #56]	@ (800c714 <_svfiprintf_r+0x1f0>)
 800c6dc:	a904      	add	r1, sp, #16
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f7fd fe60 	bl	800a3a4 <_printf_float>
 800c6e4:	1c42      	adds	r2, r0, #1
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	d1d6      	bne.n	800c698 <_svfiprintf_r+0x174>
 800c6ea:	89ab      	ldrh	r3, [r5, #12]
 800c6ec:	065b      	lsls	r3, r3, #25
 800c6ee:	f53f af2d 	bmi.w	800c54c <_svfiprintf_r+0x28>
 800c6f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6f4:	e72c      	b.n	800c550 <_svfiprintf_r+0x2c>
 800c6f6:	ab03      	add	r3, sp, #12
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4b05      	ldr	r3, [pc, #20]	@ (800c714 <_svfiprintf_r+0x1f0>)
 800c6fe:	a904      	add	r1, sp, #16
 800c700:	4638      	mov	r0, r7
 800c702:	f7fe f8e7 	bl	800a8d4 <_printf_i>
 800c706:	e7ed      	b.n	800c6e4 <_svfiprintf_r+0x1c0>
 800c708:	0800d5c6 	.word	0x0800d5c6
 800c70c:	0800d5d0 	.word	0x0800d5d0
 800c710:	0800a3a5 	.word	0x0800a3a5
 800c714:	0800c46d 	.word	0x0800c46d
 800c718:	0800d5cc 	.word	0x0800d5cc

0800c71c <__sflush_r>:
 800c71c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c724:	0716      	lsls	r6, r2, #28
 800c726:	4605      	mov	r5, r0
 800c728:	460c      	mov	r4, r1
 800c72a:	d454      	bmi.n	800c7d6 <__sflush_r+0xba>
 800c72c:	684b      	ldr	r3, [r1, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	dc02      	bgt.n	800c738 <__sflush_r+0x1c>
 800c732:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c734:	2b00      	cmp	r3, #0
 800c736:	dd48      	ble.n	800c7ca <__sflush_r+0xae>
 800c738:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c73a:	2e00      	cmp	r6, #0
 800c73c:	d045      	beq.n	800c7ca <__sflush_r+0xae>
 800c73e:	2300      	movs	r3, #0
 800c740:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c744:	682f      	ldr	r7, [r5, #0]
 800c746:	6a21      	ldr	r1, [r4, #32]
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	d030      	beq.n	800c7ae <__sflush_r+0x92>
 800c74c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	0759      	lsls	r1, r3, #29
 800c752:	d505      	bpl.n	800c760 <__sflush_r+0x44>
 800c754:	6863      	ldr	r3, [r4, #4]
 800c756:	1ad2      	subs	r2, r2, r3
 800c758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c75a:	b10b      	cbz	r3, 800c760 <__sflush_r+0x44>
 800c75c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	2300      	movs	r3, #0
 800c762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c764:	6a21      	ldr	r1, [r4, #32]
 800c766:	4628      	mov	r0, r5
 800c768:	47b0      	blx	r6
 800c76a:	1c43      	adds	r3, r0, #1
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	d106      	bne.n	800c77e <__sflush_r+0x62>
 800c770:	6829      	ldr	r1, [r5, #0]
 800c772:	291d      	cmp	r1, #29
 800c774:	d82b      	bhi.n	800c7ce <__sflush_r+0xb2>
 800c776:	4a2a      	ldr	r2, [pc, #168]	@ (800c820 <__sflush_r+0x104>)
 800c778:	40ca      	lsrs	r2, r1
 800c77a:	07d6      	lsls	r6, r2, #31
 800c77c:	d527      	bpl.n	800c7ce <__sflush_r+0xb2>
 800c77e:	2200      	movs	r2, #0
 800c780:	6062      	str	r2, [r4, #4]
 800c782:	04d9      	lsls	r1, r3, #19
 800c784:	6922      	ldr	r2, [r4, #16]
 800c786:	6022      	str	r2, [r4, #0]
 800c788:	d504      	bpl.n	800c794 <__sflush_r+0x78>
 800c78a:	1c42      	adds	r2, r0, #1
 800c78c:	d101      	bne.n	800c792 <__sflush_r+0x76>
 800c78e:	682b      	ldr	r3, [r5, #0]
 800c790:	b903      	cbnz	r3, 800c794 <__sflush_r+0x78>
 800c792:	6560      	str	r0, [r4, #84]	@ 0x54
 800c794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c796:	602f      	str	r7, [r5, #0]
 800c798:	b1b9      	cbz	r1, 800c7ca <__sflush_r+0xae>
 800c79a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c79e:	4299      	cmp	r1, r3
 800c7a0:	d002      	beq.n	800c7a8 <__sflush_r+0x8c>
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f7ff f9e8 	bl	800bb78 <_free_r>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7ac:	e00d      	b.n	800c7ca <__sflush_r+0xae>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b0      	blx	r6
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	1c50      	adds	r0, r2, #1
 800c7b8:	d1c9      	bne.n	800c74e <__sflush_r+0x32>
 800c7ba:	682b      	ldr	r3, [r5, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0c6      	beq.n	800c74e <__sflush_r+0x32>
 800c7c0:	2b1d      	cmp	r3, #29
 800c7c2:	d001      	beq.n	800c7c8 <__sflush_r+0xac>
 800c7c4:	2b16      	cmp	r3, #22
 800c7c6:	d11e      	bne.n	800c806 <__sflush_r+0xea>
 800c7c8:	602f      	str	r7, [r5, #0]
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e022      	b.n	800c814 <__sflush_r+0xf8>
 800c7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d2:	b21b      	sxth	r3, r3
 800c7d4:	e01b      	b.n	800c80e <__sflush_r+0xf2>
 800c7d6:	690f      	ldr	r7, [r1, #16]
 800c7d8:	2f00      	cmp	r7, #0
 800c7da:	d0f6      	beq.n	800c7ca <__sflush_r+0xae>
 800c7dc:	0793      	lsls	r3, r2, #30
 800c7de:	680e      	ldr	r6, [r1, #0]
 800c7e0:	bf08      	it	eq
 800c7e2:	694b      	ldreq	r3, [r1, #20]
 800c7e4:	600f      	str	r7, [r1, #0]
 800c7e6:	bf18      	it	ne
 800c7e8:	2300      	movne	r3, #0
 800c7ea:	eba6 0807 	sub.w	r8, r6, r7
 800c7ee:	608b      	str	r3, [r1, #8]
 800c7f0:	f1b8 0f00 	cmp.w	r8, #0
 800c7f4:	dde9      	ble.n	800c7ca <__sflush_r+0xae>
 800c7f6:	6a21      	ldr	r1, [r4, #32]
 800c7f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7fa:	4643      	mov	r3, r8
 800c7fc:	463a      	mov	r2, r7
 800c7fe:	4628      	mov	r0, r5
 800c800:	47b0      	blx	r6
 800c802:	2800      	cmp	r0, #0
 800c804:	dc08      	bgt.n	800c818 <__sflush_r+0xfc>
 800c806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c80e:	81a3      	strh	r3, [r4, #12]
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c818:	4407      	add	r7, r0
 800c81a:	eba8 0800 	sub.w	r8, r8, r0
 800c81e:	e7e7      	b.n	800c7f0 <__sflush_r+0xd4>
 800c820:	20400001 	.word	0x20400001

0800c824 <_fflush_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	690b      	ldr	r3, [r1, #16]
 800c828:	4605      	mov	r5, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	b913      	cbnz	r3, 800c834 <_fflush_r+0x10>
 800c82e:	2500      	movs	r5, #0
 800c830:	4628      	mov	r0, r5
 800c832:	bd38      	pop	{r3, r4, r5, pc}
 800c834:	b118      	cbz	r0, 800c83e <_fflush_r+0x1a>
 800c836:	6a03      	ldr	r3, [r0, #32]
 800c838:	b90b      	cbnz	r3, 800c83e <_fflush_r+0x1a>
 800c83a:	f7fe f9f5 	bl	800ac28 <__sinit>
 800c83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0f3      	beq.n	800c82e <_fflush_r+0xa>
 800c846:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c848:	07d0      	lsls	r0, r2, #31
 800c84a:	d404      	bmi.n	800c856 <_fflush_r+0x32>
 800c84c:	0599      	lsls	r1, r3, #22
 800c84e:	d402      	bmi.n	800c856 <_fflush_r+0x32>
 800c850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c852:	f7fe fb28 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800c856:	4628      	mov	r0, r5
 800c858:	4621      	mov	r1, r4
 800c85a:	f7ff ff5f 	bl	800c71c <__sflush_r>
 800c85e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c860:	07da      	lsls	r2, r3, #31
 800c862:	4605      	mov	r5, r0
 800c864:	d4e4      	bmi.n	800c830 <_fflush_r+0xc>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	059b      	lsls	r3, r3, #22
 800c86a:	d4e1      	bmi.n	800c830 <_fflush_r+0xc>
 800c86c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c86e:	f7fe fb1b 	bl	800aea8 <__retarget_lock_release_recursive>
 800c872:	e7dd      	b.n	800c830 <_fflush_r+0xc>

0800c874 <memmove>:
 800c874:	4288      	cmp	r0, r1
 800c876:	b510      	push	{r4, lr}
 800c878:	eb01 0402 	add.w	r4, r1, r2
 800c87c:	d902      	bls.n	800c884 <memmove+0x10>
 800c87e:	4284      	cmp	r4, r0
 800c880:	4623      	mov	r3, r4
 800c882:	d807      	bhi.n	800c894 <memmove+0x20>
 800c884:	1e43      	subs	r3, r0, #1
 800c886:	42a1      	cmp	r1, r4
 800c888:	d008      	beq.n	800c89c <memmove+0x28>
 800c88a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c88e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c892:	e7f8      	b.n	800c886 <memmove+0x12>
 800c894:	4402      	add	r2, r0
 800c896:	4601      	mov	r1, r0
 800c898:	428a      	cmp	r2, r1
 800c89a:	d100      	bne.n	800c89e <memmove+0x2a>
 800c89c:	bd10      	pop	{r4, pc}
 800c89e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8a6:	e7f7      	b.n	800c898 <memmove+0x24>

0800c8a8 <_sbrk_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d06      	ldr	r5, [pc, #24]	@ (800c8c4 <_sbrk_r+0x1c>)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	f7f7 fe70 	bl	8004598 <_sbrk>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_sbrk_r+0x1a>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_sbrk_r+0x1a>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20000eac 	.word	0x20000eac

0800c8c8 <__assert_func>:
 800c8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8ca:	4614      	mov	r4, r2
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4b09      	ldr	r3, [pc, #36]	@ (800c8f4 <__assert_func+0x2c>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	68d8      	ldr	r0, [r3, #12]
 800c8d6:	b14c      	cbz	r4, 800c8ec <__assert_func+0x24>
 800c8d8:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <__assert_func+0x30>)
 800c8da:	9100      	str	r1, [sp, #0]
 800c8dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8e0:	4906      	ldr	r1, [pc, #24]	@ (800c8fc <__assert_func+0x34>)
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	f000 f870 	bl	800c9c8 <fiprintf>
 800c8e8:	f000 f880 	bl	800c9ec <abort>
 800c8ec:	4b04      	ldr	r3, [pc, #16]	@ (800c900 <__assert_func+0x38>)
 800c8ee:	461c      	mov	r4, r3
 800c8f0:	e7f3      	b.n	800c8da <__assert_func+0x12>
 800c8f2:	bf00      	nop
 800c8f4:	2000002c 	.word	0x2000002c
 800c8f8:	0800d5e1 	.word	0x0800d5e1
 800c8fc:	0800d5ee 	.word	0x0800d5ee
 800c900:	0800d61c 	.word	0x0800d61c

0800c904 <_calloc_r>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	fba1 5402 	umull	r5, r4, r1, r2
 800c90a:	b934      	cbnz	r4, 800c91a <_calloc_r+0x16>
 800c90c:	4629      	mov	r1, r5
 800c90e:	f7ff f9a7 	bl	800bc60 <_malloc_r>
 800c912:	4606      	mov	r6, r0
 800c914:	b928      	cbnz	r0, 800c922 <_calloc_r+0x1e>
 800c916:	4630      	mov	r0, r6
 800c918:	bd70      	pop	{r4, r5, r6, pc}
 800c91a:	220c      	movs	r2, #12
 800c91c:	6002      	str	r2, [r0, #0]
 800c91e:	2600      	movs	r6, #0
 800c920:	e7f9      	b.n	800c916 <_calloc_r+0x12>
 800c922:	462a      	mov	r2, r5
 800c924:	4621      	mov	r1, r4
 800c926:	f7fe fa2e 	bl	800ad86 <memset>
 800c92a:	e7f4      	b.n	800c916 <_calloc_r+0x12>

0800c92c <__ascii_mbtowc>:
 800c92c:	b082      	sub	sp, #8
 800c92e:	b901      	cbnz	r1, 800c932 <__ascii_mbtowc+0x6>
 800c930:	a901      	add	r1, sp, #4
 800c932:	b142      	cbz	r2, 800c946 <__ascii_mbtowc+0x1a>
 800c934:	b14b      	cbz	r3, 800c94a <__ascii_mbtowc+0x1e>
 800c936:	7813      	ldrb	r3, [r2, #0]
 800c938:	600b      	str	r3, [r1, #0]
 800c93a:	7812      	ldrb	r2, [r2, #0]
 800c93c:	1e10      	subs	r0, r2, #0
 800c93e:	bf18      	it	ne
 800c940:	2001      	movne	r0, #1
 800c942:	b002      	add	sp, #8
 800c944:	4770      	bx	lr
 800c946:	4610      	mov	r0, r2
 800c948:	e7fb      	b.n	800c942 <__ascii_mbtowc+0x16>
 800c94a:	f06f 0001 	mvn.w	r0, #1
 800c94e:	e7f8      	b.n	800c942 <__ascii_mbtowc+0x16>

0800c950 <_realloc_r>:
 800c950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c954:	4607      	mov	r7, r0
 800c956:	4614      	mov	r4, r2
 800c958:	460d      	mov	r5, r1
 800c95a:	b921      	cbnz	r1, 800c966 <_realloc_r+0x16>
 800c95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c960:	4611      	mov	r1, r2
 800c962:	f7ff b97d 	b.w	800bc60 <_malloc_r>
 800c966:	b92a      	cbnz	r2, 800c974 <_realloc_r+0x24>
 800c968:	f7ff f906 	bl	800bb78 <_free_r>
 800c96c:	4625      	mov	r5, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	f000 f841 	bl	800c9fa <_malloc_usable_size_r>
 800c978:	4284      	cmp	r4, r0
 800c97a:	4606      	mov	r6, r0
 800c97c:	d802      	bhi.n	800c984 <_realloc_r+0x34>
 800c97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c982:	d8f4      	bhi.n	800c96e <_realloc_r+0x1e>
 800c984:	4621      	mov	r1, r4
 800c986:	4638      	mov	r0, r7
 800c988:	f7ff f96a 	bl	800bc60 <_malloc_r>
 800c98c:	4680      	mov	r8, r0
 800c98e:	b908      	cbnz	r0, 800c994 <_realloc_r+0x44>
 800c990:	4645      	mov	r5, r8
 800c992:	e7ec      	b.n	800c96e <_realloc_r+0x1e>
 800c994:	42b4      	cmp	r4, r6
 800c996:	4622      	mov	r2, r4
 800c998:	4629      	mov	r1, r5
 800c99a:	bf28      	it	cs
 800c99c:	4632      	movcs	r2, r6
 800c99e:	f7fe fa84 	bl	800aeaa <memcpy>
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7ff f8e7 	bl	800bb78 <_free_r>
 800c9aa:	e7f1      	b.n	800c990 <_realloc_r+0x40>

0800c9ac <__ascii_wctomb>:
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	4608      	mov	r0, r1
 800c9b0:	b141      	cbz	r1, 800c9c4 <__ascii_wctomb+0x18>
 800c9b2:	2aff      	cmp	r2, #255	@ 0xff
 800c9b4:	d904      	bls.n	800c9c0 <__ascii_wctomb+0x14>
 800c9b6:	228a      	movs	r2, #138	@ 0x8a
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	4770      	bx	lr
 800c9c0:	700a      	strb	r2, [r1, #0]
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <fiprintf>:
 800c9c8:	b40e      	push	{r1, r2, r3}
 800c9ca:	b503      	push	{r0, r1, lr}
 800c9cc:	4601      	mov	r1, r0
 800c9ce:	ab03      	add	r3, sp, #12
 800c9d0:	4805      	ldr	r0, [pc, #20]	@ (800c9e8 <fiprintf+0x20>)
 800c9d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9d6:	6800      	ldr	r0, [r0, #0]
 800c9d8:	9301      	str	r3, [sp, #4]
 800c9da:	f000 f83f 	bl	800ca5c <_vfiprintf_r>
 800c9de:	b002      	add	sp, #8
 800c9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9e4:	b003      	add	sp, #12
 800c9e6:	4770      	bx	lr
 800c9e8:	2000002c 	.word	0x2000002c

0800c9ec <abort>:
 800c9ec:	b508      	push	{r3, lr}
 800c9ee:	2006      	movs	r0, #6
 800c9f0:	f000 fa08 	bl	800ce04 <raise>
 800c9f4:	2001      	movs	r0, #1
 800c9f6:	f7f7 fd57 	bl	80044a8 <_exit>

0800c9fa <_malloc_usable_size_r>:
 800c9fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9fe:	1f18      	subs	r0, r3, #4
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	bfbc      	itt	lt
 800ca04:	580b      	ldrlt	r3, [r1, r0]
 800ca06:	18c0      	addlt	r0, r0, r3
 800ca08:	4770      	bx	lr

0800ca0a <__sfputc_r>:
 800ca0a:	6893      	ldr	r3, [r2, #8]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	b410      	push	{r4}
 800ca12:	6093      	str	r3, [r2, #8]
 800ca14:	da08      	bge.n	800ca28 <__sfputc_r+0x1e>
 800ca16:	6994      	ldr	r4, [r2, #24]
 800ca18:	42a3      	cmp	r3, r4
 800ca1a:	db01      	blt.n	800ca20 <__sfputc_r+0x16>
 800ca1c:	290a      	cmp	r1, #10
 800ca1e:	d103      	bne.n	800ca28 <__sfputc_r+0x1e>
 800ca20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca24:	f000 b932 	b.w	800cc8c <__swbuf_r>
 800ca28:	6813      	ldr	r3, [r2, #0]
 800ca2a:	1c58      	adds	r0, r3, #1
 800ca2c:	6010      	str	r0, [r2, #0]
 800ca2e:	7019      	strb	r1, [r3, #0]
 800ca30:	4608      	mov	r0, r1
 800ca32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <__sfputs_r>:
 800ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460f      	mov	r7, r1
 800ca3e:	4614      	mov	r4, r2
 800ca40:	18d5      	adds	r5, r2, r3
 800ca42:	42ac      	cmp	r4, r5
 800ca44:	d101      	bne.n	800ca4a <__sfputs_r+0x12>
 800ca46:	2000      	movs	r0, #0
 800ca48:	e007      	b.n	800ca5a <__sfputs_r+0x22>
 800ca4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4e:	463a      	mov	r2, r7
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7ff ffda 	bl	800ca0a <__sfputc_r>
 800ca56:	1c43      	adds	r3, r0, #1
 800ca58:	d1f3      	bne.n	800ca42 <__sfputs_r+0xa>
 800ca5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca5c <_vfiprintf_r>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	460d      	mov	r5, r1
 800ca62:	b09d      	sub	sp, #116	@ 0x74
 800ca64:	4614      	mov	r4, r2
 800ca66:	4698      	mov	r8, r3
 800ca68:	4606      	mov	r6, r0
 800ca6a:	b118      	cbz	r0, 800ca74 <_vfiprintf_r+0x18>
 800ca6c:	6a03      	ldr	r3, [r0, #32]
 800ca6e:	b90b      	cbnz	r3, 800ca74 <_vfiprintf_r+0x18>
 800ca70:	f7fe f8da 	bl	800ac28 <__sinit>
 800ca74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca76:	07d9      	lsls	r1, r3, #31
 800ca78:	d405      	bmi.n	800ca86 <_vfiprintf_r+0x2a>
 800ca7a:	89ab      	ldrh	r3, [r5, #12]
 800ca7c:	059a      	lsls	r2, r3, #22
 800ca7e:	d402      	bmi.n	800ca86 <_vfiprintf_r+0x2a>
 800ca80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca82:	f7fe fa10 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	071b      	lsls	r3, r3, #28
 800ca8a:	d501      	bpl.n	800ca90 <_vfiprintf_r+0x34>
 800ca8c:	692b      	ldr	r3, [r5, #16]
 800ca8e:	b99b      	cbnz	r3, 800cab8 <_vfiprintf_r+0x5c>
 800ca90:	4629      	mov	r1, r5
 800ca92:	4630      	mov	r0, r6
 800ca94:	f000 f938 	bl	800cd08 <__swsetup_r>
 800ca98:	b170      	cbz	r0, 800cab8 <_vfiprintf_r+0x5c>
 800ca9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca9c:	07dc      	lsls	r4, r3, #31
 800ca9e:	d504      	bpl.n	800caaa <_vfiprintf_r+0x4e>
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	b01d      	add	sp, #116	@ 0x74
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caaa:	89ab      	ldrh	r3, [r5, #12]
 800caac:	0598      	lsls	r0, r3, #22
 800caae:	d4f7      	bmi.n	800caa0 <_vfiprintf_r+0x44>
 800cab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cab2:	f7fe f9f9 	bl	800aea8 <__retarget_lock_release_recursive>
 800cab6:	e7f3      	b.n	800caa0 <_vfiprintf_r+0x44>
 800cab8:	2300      	movs	r3, #0
 800caba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cabc:	2320      	movs	r3, #32
 800cabe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac6:	2330      	movs	r3, #48	@ 0x30
 800cac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc78 <_vfiprintf_r+0x21c>
 800cacc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cad0:	f04f 0901 	mov.w	r9, #1
 800cad4:	4623      	mov	r3, r4
 800cad6:	469a      	mov	sl, r3
 800cad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cadc:	b10a      	cbz	r2, 800cae2 <_vfiprintf_r+0x86>
 800cade:	2a25      	cmp	r2, #37	@ 0x25
 800cae0:	d1f9      	bne.n	800cad6 <_vfiprintf_r+0x7a>
 800cae2:	ebba 0b04 	subs.w	fp, sl, r4
 800cae6:	d00b      	beq.n	800cb00 <_vfiprintf_r+0xa4>
 800cae8:	465b      	mov	r3, fp
 800caea:	4622      	mov	r2, r4
 800caec:	4629      	mov	r1, r5
 800caee:	4630      	mov	r0, r6
 800caf0:	f7ff ffa2 	bl	800ca38 <__sfputs_r>
 800caf4:	3001      	adds	r0, #1
 800caf6:	f000 80a7 	beq.w	800cc48 <_vfiprintf_r+0x1ec>
 800cafa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cafc:	445a      	add	r2, fp
 800cafe:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb00:	f89a 3000 	ldrb.w	r3, [sl]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 809f 	beq.w	800cc48 <_vfiprintf_r+0x1ec>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb14:	f10a 0a01 	add.w	sl, sl, #1
 800cb18:	9304      	str	r3, [sp, #16]
 800cb1a:	9307      	str	r3, [sp, #28]
 800cb1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb20:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb22:	4654      	mov	r4, sl
 800cb24:	2205      	movs	r2, #5
 800cb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2a:	4853      	ldr	r0, [pc, #332]	@ (800cc78 <_vfiprintf_r+0x21c>)
 800cb2c:	f7f3 fb70 	bl	8000210 <memchr>
 800cb30:	9a04      	ldr	r2, [sp, #16]
 800cb32:	b9d8      	cbnz	r0, 800cb6c <_vfiprintf_r+0x110>
 800cb34:	06d1      	lsls	r1, r2, #27
 800cb36:	bf44      	itt	mi
 800cb38:	2320      	movmi	r3, #32
 800cb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb3e:	0713      	lsls	r3, r2, #28
 800cb40:	bf44      	itt	mi
 800cb42:	232b      	movmi	r3, #43	@ 0x2b
 800cb44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb48:	f89a 3000 	ldrb.w	r3, [sl]
 800cb4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb4e:	d015      	beq.n	800cb7c <_vfiprintf_r+0x120>
 800cb50:	9a07      	ldr	r2, [sp, #28]
 800cb52:	4654      	mov	r4, sl
 800cb54:	2000      	movs	r0, #0
 800cb56:	f04f 0c0a 	mov.w	ip, #10
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb60:	3b30      	subs	r3, #48	@ 0x30
 800cb62:	2b09      	cmp	r3, #9
 800cb64:	d94b      	bls.n	800cbfe <_vfiprintf_r+0x1a2>
 800cb66:	b1b0      	cbz	r0, 800cb96 <_vfiprintf_r+0x13a>
 800cb68:	9207      	str	r2, [sp, #28]
 800cb6a:	e014      	b.n	800cb96 <_vfiprintf_r+0x13a>
 800cb6c:	eba0 0308 	sub.w	r3, r0, r8
 800cb70:	fa09 f303 	lsl.w	r3, r9, r3
 800cb74:	4313      	orrs	r3, r2
 800cb76:	9304      	str	r3, [sp, #16]
 800cb78:	46a2      	mov	sl, r4
 800cb7a:	e7d2      	b.n	800cb22 <_vfiprintf_r+0xc6>
 800cb7c:	9b03      	ldr	r3, [sp, #12]
 800cb7e:	1d19      	adds	r1, r3, #4
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	9103      	str	r1, [sp, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	bfbb      	ittet	lt
 800cb88:	425b      	neglt	r3, r3
 800cb8a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb8e:	9307      	strge	r3, [sp, #28]
 800cb90:	9307      	strlt	r3, [sp, #28]
 800cb92:	bfb8      	it	lt
 800cb94:	9204      	strlt	r2, [sp, #16]
 800cb96:	7823      	ldrb	r3, [r4, #0]
 800cb98:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb9a:	d10a      	bne.n	800cbb2 <_vfiprintf_r+0x156>
 800cb9c:	7863      	ldrb	r3, [r4, #1]
 800cb9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cba0:	d132      	bne.n	800cc08 <_vfiprintf_r+0x1ac>
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	1d1a      	adds	r2, r3, #4
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	9203      	str	r2, [sp, #12]
 800cbaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbae:	3402      	adds	r4, #2
 800cbb0:	9305      	str	r3, [sp, #20]
 800cbb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc88 <_vfiprintf_r+0x22c>
 800cbb6:	7821      	ldrb	r1, [r4, #0]
 800cbb8:	2203      	movs	r2, #3
 800cbba:	4650      	mov	r0, sl
 800cbbc:	f7f3 fb28 	bl	8000210 <memchr>
 800cbc0:	b138      	cbz	r0, 800cbd2 <_vfiprintf_r+0x176>
 800cbc2:	9b04      	ldr	r3, [sp, #16]
 800cbc4:	eba0 000a 	sub.w	r0, r0, sl
 800cbc8:	2240      	movs	r2, #64	@ 0x40
 800cbca:	4082      	lsls	r2, r0
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	3401      	adds	r4, #1
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd6:	4829      	ldr	r0, [pc, #164]	@ (800cc7c <_vfiprintf_r+0x220>)
 800cbd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbdc:	2206      	movs	r2, #6
 800cbde:	f7f3 fb17 	bl	8000210 <memchr>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d03f      	beq.n	800cc66 <_vfiprintf_r+0x20a>
 800cbe6:	4b26      	ldr	r3, [pc, #152]	@ (800cc80 <_vfiprintf_r+0x224>)
 800cbe8:	bb1b      	cbnz	r3, 800cc32 <_vfiprintf_r+0x1d6>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	3307      	adds	r3, #7
 800cbee:	f023 0307 	bic.w	r3, r3, #7
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	9303      	str	r3, [sp, #12]
 800cbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbf8:	443b      	add	r3, r7
 800cbfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbfc:	e76a      	b.n	800cad4 <_vfiprintf_r+0x78>
 800cbfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc02:	460c      	mov	r4, r1
 800cc04:	2001      	movs	r0, #1
 800cc06:	e7a8      	b.n	800cb5a <_vfiprintf_r+0xfe>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	3401      	adds	r4, #1
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f04f 0c0a 	mov.w	ip, #10
 800cc14:	4620      	mov	r0, r4
 800cc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1a:	3a30      	subs	r2, #48	@ 0x30
 800cc1c:	2a09      	cmp	r2, #9
 800cc1e:	d903      	bls.n	800cc28 <_vfiprintf_r+0x1cc>
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0c6      	beq.n	800cbb2 <_vfiprintf_r+0x156>
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	e7c4      	b.n	800cbb2 <_vfiprintf_r+0x156>
 800cc28:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e7f0      	b.n	800cc14 <_vfiprintf_r+0x1b8>
 800cc32:	ab03      	add	r3, sp, #12
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	462a      	mov	r2, r5
 800cc38:	4b12      	ldr	r3, [pc, #72]	@ (800cc84 <_vfiprintf_r+0x228>)
 800cc3a:	a904      	add	r1, sp, #16
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f7fd fbb1 	bl	800a3a4 <_printf_float>
 800cc42:	4607      	mov	r7, r0
 800cc44:	1c78      	adds	r0, r7, #1
 800cc46:	d1d6      	bne.n	800cbf6 <_vfiprintf_r+0x19a>
 800cc48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc4a:	07d9      	lsls	r1, r3, #31
 800cc4c:	d405      	bmi.n	800cc5a <_vfiprintf_r+0x1fe>
 800cc4e:	89ab      	ldrh	r3, [r5, #12]
 800cc50:	059a      	lsls	r2, r3, #22
 800cc52:	d402      	bmi.n	800cc5a <_vfiprintf_r+0x1fe>
 800cc54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc56:	f7fe f927 	bl	800aea8 <__retarget_lock_release_recursive>
 800cc5a:	89ab      	ldrh	r3, [r5, #12]
 800cc5c:	065b      	lsls	r3, r3, #25
 800cc5e:	f53f af1f 	bmi.w	800caa0 <_vfiprintf_r+0x44>
 800cc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc64:	e71e      	b.n	800caa4 <_vfiprintf_r+0x48>
 800cc66:	ab03      	add	r3, sp, #12
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	462a      	mov	r2, r5
 800cc6c:	4b05      	ldr	r3, [pc, #20]	@ (800cc84 <_vfiprintf_r+0x228>)
 800cc6e:	a904      	add	r1, sp, #16
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7fd fe2f 	bl	800a8d4 <_printf_i>
 800cc76:	e7e4      	b.n	800cc42 <_vfiprintf_r+0x1e6>
 800cc78:	0800d5c6 	.word	0x0800d5c6
 800cc7c:	0800d5d0 	.word	0x0800d5d0
 800cc80:	0800a3a5 	.word	0x0800a3a5
 800cc84:	0800ca39 	.word	0x0800ca39
 800cc88:	0800d5cc 	.word	0x0800d5cc

0800cc8c <__swbuf_r>:
 800cc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8e:	460e      	mov	r6, r1
 800cc90:	4614      	mov	r4, r2
 800cc92:	4605      	mov	r5, r0
 800cc94:	b118      	cbz	r0, 800cc9e <__swbuf_r+0x12>
 800cc96:	6a03      	ldr	r3, [r0, #32]
 800cc98:	b90b      	cbnz	r3, 800cc9e <__swbuf_r+0x12>
 800cc9a:	f7fd ffc5 	bl	800ac28 <__sinit>
 800cc9e:	69a3      	ldr	r3, [r4, #24]
 800cca0:	60a3      	str	r3, [r4, #8]
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	071a      	lsls	r2, r3, #28
 800cca6:	d501      	bpl.n	800ccac <__swbuf_r+0x20>
 800cca8:	6923      	ldr	r3, [r4, #16]
 800ccaa:	b943      	cbnz	r3, 800ccbe <__swbuf_r+0x32>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 f82a 	bl	800cd08 <__swsetup_r>
 800ccb4:	b118      	cbz	r0, 800ccbe <__swbuf_r+0x32>
 800ccb6:	f04f 37ff 	mov.w	r7, #4294967295
 800ccba:	4638      	mov	r0, r7
 800ccbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	6922      	ldr	r2, [r4, #16]
 800ccc2:	1a98      	subs	r0, r3, r2
 800ccc4:	6963      	ldr	r3, [r4, #20]
 800ccc6:	b2f6      	uxtb	r6, r6
 800ccc8:	4283      	cmp	r3, r0
 800ccca:	4637      	mov	r7, r6
 800cccc:	dc05      	bgt.n	800ccda <__swbuf_r+0x4e>
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f7ff fda7 	bl	800c824 <_fflush_r>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d1ed      	bne.n	800ccb6 <__swbuf_r+0x2a>
 800ccda:	68a3      	ldr	r3, [r4, #8]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	60a3      	str	r3, [r4, #8]
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	6022      	str	r2, [r4, #0]
 800cce6:	701e      	strb	r6, [r3, #0]
 800cce8:	6962      	ldr	r2, [r4, #20]
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d004      	beq.n	800ccfa <__swbuf_r+0x6e>
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	07db      	lsls	r3, r3, #31
 800ccf4:	d5e1      	bpl.n	800ccba <__swbuf_r+0x2e>
 800ccf6:	2e0a      	cmp	r6, #10
 800ccf8:	d1df      	bne.n	800ccba <__swbuf_r+0x2e>
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f7ff fd91 	bl	800c824 <_fflush_r>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d0d9      	beq.n	800ccba <__swbuf_r+0x2e>
 800cd06:	e7d6      	b.n	800ccb6 <__swbuf_r+0x2a>

0800cd08 <__swsetup_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4b29      	ldr	r3, [pc, #164]	@ (800cdb0 <__swsetup_r+0xa8>)
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	460c      	mov	r4, r1
 800cd12:	b118      	cbz	r0, 800cd1c <__swsetup_r+0x14>
 800cd14:	6a03      	ldr	r3, [r0, #32]
 800cd16:	b90b      	cbnz	r3, 800cd1c <__swsetup_r+0x14>
 800cd18:	f7fd ff86 	bl	800ac28 <__sinit>
 800cd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd20:	0719      	lsls	r1, r3, #28
 800cd22:	d422      	bmi.n	800cd6a <__swsetup_r+0x62>
 800cd24:	06da      	lsls	r2, r3, #27
 800cd26:	d407      	bmi.n	800cd38 <__swsetup_r+0x30>
 800cd28:	2209      	movs	r2, #9
 800cd2a:	602a      	str	r2, [r5, #0]
 800cd2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd30:	81a3      	strh	r3, [r4, #12]
 800cd32:	f04f 30ff 	mov.w	r0, #4294967295
 800cd36:	e033      	b.n	800cda0 <__swsetup_r+0x98>
 800cd38:	0758      	lsls	r0, r3, #29
 800cd3a:	d512      	bpl.n	800cd62 <__swsetup_r+0x5a>
 800cd3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd3e:	b141      	cbz	r1, 800cd52 <__swsetup_r+0x4a>
 800cd40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd44:	4299      	cmp	r1, r3
 800cd46:	d002      	beq.n	800cd4e <__swsetup_r+0x46>
 800cd48:	4628      	mov	r0, r5
 800cd4a:	f7fe ff15 	bl	800bb78 <_free_r>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd58:	81a3      	strh	r3, [r4, #12]
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	6063      	str	r3, [r4, #4]
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	f043 0308 	orr.w	r3, r3, #8
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	b94b      	cbnz	r3, 800cd82 <__swsetup_r+0x7a>
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd78:	d003      	beq.n	800cd82 <__swsetup_r+0x7a>
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	f000 f883 	bl	800ce88 <__smakebuf_r>
 800cd82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd86:	f013 0201 	ands.w	r2, r3, #1
 800cd8a:	d00a      	beq.n	800cda2 <__swsetup_r+0x9a>
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	60a2      	str	r2, [r4, #8]
 800cd90:	6962      	ldr	r2, [r4, #20]
 800cd92:	4252      	negs	r2, r2
 800cd94:	61a2      	str	r2, [r4, #24]
 800cd96:	6922      	ldr	r2, [r4, #16]
 800cd98:	b942      	cbnz	r2, 800cdac <__swsetup_r+0xa4>
 800cd9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd9e:	d1c5      	bne.n	800cd2c <__swsetup_r+0x24>
 800cda0:	bd38      	pop	{r3, r4, r5, pc}
 800cda2:	0799      	lsls	r1, r3, #30
 800cda4:	bf58      	it	pl
 800cda6:	6962      	ldrpl	r2, [r4, #20]
 800cda8:	60a2      	str	r2, [r4, #8]
 800cdaa:	e7f4      	b.n	800cd96 <__swsetup_r+0x8e>
 800cdac:	2000      	movs	r0, #0
 800cdae:	e7f7      	b.n	800cda0 <__swsetup_r+0x98>
 800cdb0:	2000002c 	.word	0x2000002c

0800cdb4 <_raise_r>:
 800cdb4:	291f      	cmp	r1, #31
 800cdb6:	b538      	push	{r3, r4, r5, lr}
 800cdb8:	4605      	mov	r5, r0
 800cdba:	460c      	mov	r4, r1
 800cdbc:	d904      	bls.n	800cdc8 <_raise_r+0x14>
 800cdbe:	2316      	movs	r3, #22
 800cdc0:	6003      	str	r3, [r0, #0]
 800cdc2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdca:	b112      	cbz	r2, 800cdd2 <_raise_r+0x1e>
 800cdcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdd0:	b94b      	cbnz	r3, 800cde6 <_raise_r+0x32>
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f000 f830 	bl	800ce38 <_getpid_r>
 800cdd8:	4622      	mov	r2, r4
 800cdda:	4601      	mov	r1, r0
 800cddc:	4628      	mov	r0, r5
 800cdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cde2:	f000 b817 	b.w	800ce14 <_kill_r>
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d00a      	beq.n	800ce00 <_raise_r+0x4c>
 800cdea:	1c59      	adds	r1, r3, #1
 800cdec:	d103      	bne.n	800cdf6 <_raise_r+0x42>
 800cdee:	2316      	movs	r3, #22
 800cdf0:	6003      	str	r3, [r0, #0]
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	e7e7      	b.n	800cdc6 <_raise_r+0x12>
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4798      	blx	r3
 800ce00:	2000      	movs	r0, #0
 800ce02:	e7e0      	b.n	800cdc6 <_raise_r+0x12>

0800ce04 <raise>:
 800ce04:	4b02      	ldr	r3, [pc, #8]	@ (800ce10 <raise+0xc>)
 800ce06:	4601      	mov	r1, r0
 800ce08:	6818      	ldr	r0, [r3, #0]
 800ce0a:	f7ff bfd3 	b.w	800cdb4 <_raise_r>
 800ce0e:	bf00      	nop
 800ce10:	2000002c 	.word	0x2000002c

0800ce14 <_kill_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d07      	ldr	r5, [pc, #28]	@ (800ce34 <_kill_r+0x20>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	4611      	mov	r1, r2
 800ce20:	602b      	str	r3, [r5, #0]
 800ce22:	f7f7 fb31 	bl	8004488 <_kill>
 800ce26:	1c43      	adds	r3, r0, #1
 800ce28:	d102      	bne.n	800ce30 <_kill_r+0x1c>
 800ce2a:	682b      	ldr	r3, [r5, #0]
 800ce2c:	b103      	cbz	r3, 800ce30 <_kill_r+0x1c>
 800ce2e:	6023      	str	r3, [r4, #0]
 800ce30:	bd38      	pop	{r3, r4, r5, pc}
 800ce32:	bf00      	nop
 800ce34:	20000eac 	.word	0x20000eac

0800ce38 <_getpid_r>:
 800ce38:	f7f7 bb1e 	b.w	8004478 <_getpid>

0800ce3c <__swhatbuf_r>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	460c      	mov	r4, r1
 800ce40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce44:	2900      	cmp	r1, #0
 800ce46:	b096      	sub	sp, #88	@ 0x58
 800ce48:	4615      	mov	r5, r2
 800ce4a:	461e      	mov	r6, r3
 800ce4c:	da0d      	bge.n	800ce6a <__swhatbuf_r+0x2e>
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce54:	f04f 0100 	mov.w	r1, #0
 800ce58:	bf14      	ite	ne
 800ce5a:	2340      	movne	r3, #64	@ 0x40
 800ce5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce60:	2000      	movs	r0, #0
 800ce62:	6031      	str	r1, [r6, #0]
 800ce64:	602b      	str	r3, [r5, #0]
 800ce66:	b016      	add	sp, #88	@ 0x58
 800ce68:	bd70      	pop	{r4, r5, r6, pc}
 800ce6a:	466a      	mov	r2, sp
 800ce6c:	f000 f848 	bl	800cf00 <_fstat_r>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	dbec      	blt.n	800ce4e <__swhatbuf_r+0x12>
 800ce74:	9901      	ldr	r1, [sp, #4]
 800ce76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce7e:	4259      	negs	r1, r3
 800ce80:	4159      	adcs	r1, r3
 800ce82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce86:	e7eb      	b.n	800ce60 <__swhatbuf_r+0x24>

0800ce88 <__smakebuf_r>:
 800ce88:	898b      	ldrh	r3, [r1, #12]
 800ce8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce8c:	079d      	lsls	r5, r3, #30
 800ce8e:	4606      	mov	r6, r0
 800ce90:	460c      	mov	r4, r1
 800ce92:	d507      	bpl.n	800cea4 <__smakebuf_r+0x1c>
 800ce94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	6123      	str	r3, [r4, #16]
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	6163      	str	r3, [r4, #20]
 800cea0:	b003      	add	sp, #12
 800cea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea4:	ab01      	add	r3, sp, #4
 800cea6:	466a      	mov	r2, sp
 800cea8:	f7ff ffc8 	bl	800ce3c <__swhatbuf_r>
 800ceac:	9f00      	ldr	r7, [sp, #0]
 800ceae:	4605      	mov	r5, r0
 800ceb0:	4639      	mov	r1, r7
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7fe fed4 	bl	800bc60 <_malloc_r>
 800ceb8:	b948      	cbnz	r0, 800cece <__smakebuf_r+0x46>
 800ceba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cebe:	059a      	lsls	r2, r3, #22
 800cec0:	d4ee      	bmi.n	800cea0 <__smakebuf_r+0x18>
 800cec2:	f023 0303 	bic.w	r3, r3, #3
 800cec6:	f043 0302 	orr.w	r3, r3, #2
 800ceca:	81a3      	strh	r3, [r4, #12]
 800cecc:	e7e2      	b.n	800ce94 <__smakebuf_r+0xc>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	6020      	str	r0, [r4, #0]
 800ced2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	9b01      	ldr	r3, [sp, #4]
 800ceda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cede:	b15b      	cbz	r3, 800cef8 <__smakebuf_r+0x70>
 800cee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cee4:	4630      	mov	r0, r6
 800cee6:	f000 f81d 	bl	800cf24 <_isatty_r>
 800ceea:	b128      	cbz	r0, 800cef8 <__smakebuf_r+0x70>
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	f023 0303 	bic.w	r3, r3, #3
 800cef2:	f043 0301 	orr.w	r3, r3, #1
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	89a3      	ldrh	r3, [r4, #12]
 800cefa:	431d      	orrs	r5, r3
 800cefc:	81a5      	strh	r5, [r4, #12]
 800cefe:	e7cf      	b.n	800cea0 <__smakebuf_r+0x18>

0800cf00 <_fstat_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d07      	ldr	r5, [pc, #28]	@ (800cf20 <_fstat_r+0x20>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	602b      	str	r3, [r5, #0]
 800cf0e:	f7f7 fb1b 	bl	8004548 <_fstat>
 800cf12:	1c43      	adds	r3, r0, #1
 800cf14:	d102      	bne.n	800cf1c <_fstat_r+0x1c>
 800cf16:	682b      	ldr	r3, [r5, #0]
 800cf18:	b103      	cbz	r3, 800cf1c <_fstat_r+0x1c>
 800cf1a:	6023      	str	r3, [r4, #0]
 800cf1c:	bd38      	pop	{r3, r4, r5, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000eac 	.word	0x20000eac

0800cf24 <_isatty_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4d06      	ldr	r5, [pc, #24]	@ (800cf40 <_isatty_r+0x1c>)
 800cf28:	2300      	movs	r3, #0
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	602b      	str	r3, [r5, #0]
 800cf30:	f7f7 fb1a 	bl	8004568 <_isatty>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d102      	bne.n	800cf3e <_isatty_r+0x1a>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	b103      	cbz	r3, 800cf3e <_isatty_r+0x1a>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	20000eac 	.word	0x20000eac

0800cf44 <fmaxf>:
 800cf44:	b508      	push	{r3, lr}
 800cf46:	ed2d 8b02 	vpush	{d8}
 800cf4a:	eeb0 8a40 	vmov.f32	s16, s0
 800cf4e:	eef0 8a60 	vmov.f32	s17, s1
 800cf52:	f000 f831 	bl	800cfb8 <__fpclassifyf>
 800cf56:	b930      	cbnz	r0, 800cf66 <fmaxf+0x22>
 800cf58:	eeb0 8a68 	vmov.f32	s16, s17
 800cf5c:	eeb0 0a48 	vmov.f32	s0, s16
 800cf60:	ecbd 8b02 	vpop	{d8}
 800cf64:	bd08      	pop	{r3, pc}
 800cf66:	eeb0 0a68 	vmov.f32	s0, s17
 800cf6a:	f000 f825 	bl	800cfb8 <__fpclassifyf>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d0f4      	beq.n	800cf5c <fmaxf+0x18>
 800cf72:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7a:	dded      	ble.n	800cf58 <fmaxf+0x14>
 800cf7c:	e7ee      	b.n	800cf5c <fmaxf+0x18>

0800cf7e <fminf>:
 800cf7e:	b508      	push	{r3, lr}
 800cf80:	ed2d 8b02 	vpush	{d8}
 800cf84:	eeb0 8a40 	vmov.f32	s16, s0
 800cf88:	eef0 8a60 	vmov.f32	s17, s1
 800cf8c:	f000 f814 	bl	800cfb8 <__fpclassifyf>
 800cf90:	b930      	cbnz	r0, 800cfa0 <fminf+0x22>
 800cf92:	eeb0 8a68 	vmov.f32	s16, s17
 800cf96:	eeb0 0a48 	vmov.f32	s0, s16
 800cf9a:	ecbd 8b02 	vpop	{d8}
 800cf9e:	bd08      	pop	{r3, pc}
 800cfa0:	eeb0 0a68 	vmov.f32	s0, s17
 800cfa4:	f000 f808 	bl	800cfb8 <__fpclassifyf>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d0f4      	beq.n	800cf96 <fminf+0x18>
 800cfac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb4:	d5ed      	bpl.n	800cf92 <fminf+0x14>
 800cfb6:	e7ee      	b.n	800cf96 <fminf+0x18>

0800cfb8 <__fpclassifyf>:
 800cfb8:	ee10 3a10 	vmov	r3, s0
 800cfbc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800cfc0:	d00d      	beq.n	800cfde <__fpclassifyf+0x26>
 800cfc2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800cfc6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800cfca:	d30a      	bcc.n	800cfe2 <__fpclassifyf+0x2a>
 800cfcc:	4b07      	ldr	r3, [pc, #28]	@ (800cfec <__fpclassifyf+0x34>)
 800cfce:	1e42      	subs	r2, r0, #1
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d908      	bls.n	800cfe6 <__fpclassifyf+0x2e>
 800cfd4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800cfd8:	4258      	negs	r0, r3
 800cfda:	4158      	adcs	r0, r3
 800cfdc:	4770      	bx	lr
 800cfde:	2002      	movs	r0, #2
 800cfe0:	4770      	bx	lr
 800cfe2:	2004      	movs	r0, #4
 800cfe4:	4770      	bx	lr
 800cfe6:	2003      	movs	r0, #3
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	007ffffe 	.word	0x007ffffe

0800cff0 <_init>:
 800cff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff2:	bf00      	nop
 800cff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cff6:	bc08      	pop	{r3}
 800cff8:	469e      	mov	lr, r3
 800cffa:	4770      	bx	lr

0800cffc <_fini>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	bf00      	nop
 800d000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d002:	bc08      	pop	{r3}
 800d004:	469e      	mov	lr, r3
 800d006:	4770      	bx	lr
