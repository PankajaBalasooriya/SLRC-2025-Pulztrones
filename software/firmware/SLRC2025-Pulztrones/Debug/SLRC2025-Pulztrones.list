
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c370  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800c540  0800c540  0000d540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd2c  0800cd2c  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd2c  0800cd2c  0000dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd34  0800cd34  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd34  0800cd34  0000dd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd38  0800cd38  0000dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cd3c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  200001d8  0800cf14  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e98  0800cf14  0000ee98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f94  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044a6  00000000  00000000  0002819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130e  00000000  00000000  0002df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ea4  00000000  00000000  0002f236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c12  00000000  00000000  000570da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e869d  00000000  00000000  00078cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c4  00000000  00000000  001613cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00168990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c528 	.word	0x0800c528

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800c528 	.word	0x0800c528

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <RPI_UART_Init>:
/* Private functions ---------------------------------------------------------*/

/**
 * @brief Initialize UART with interrupt capability
 */
void RPI_UART_Init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
   * PG14 -> USART6_TX
   * PG9  -> USART6_RX
   */

  /* Enable clock for GPIOG */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b34      	ldr	r3, [pc, #208]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a33      	ldr	r2, [pc, #204]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  /* Enable clock for USART6 */
  __HAL_RCC_USART6_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a2c      	ldr	r2, [pc, #176]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <RPI_UART_Init+0xdc>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pins */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_9;
 8001002:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001014:	2308      	movs	r3, #8
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	481d      	ldr	r0, [pc, #116]	@ (8001094 <RPI_UART_Init+0xe0>)
 8001020:	f004 fdca 	bl	8005bb8 <HAL_GPIO_Init>

  /* Configure UART */
  huart6.Instance = USART6;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001026:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <RPI_UART_Init+0xe8>)
 8001028:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <RPI_UART_Init+0xe4>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <RPI_UART_Init+0xe4>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <RPI_UART_Init+0xe4>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001056:	4810      	ldr	r0, [pc, #64]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001058:	f007 fe72 	bl	8008d40 <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <RPI_UART_Init+0xb2>
    Error_Handler();
 8001062:	f001 f915 	bl	8002290 <Error_Handler>
  }

  /* Enable UART global interrupt */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2047      	movs	r0, #71	@ 0x47
 800106c:	f004 f9f1 	bl	8005452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001070:	2047      	movs	r0, #71	@ 0x47
 8001072:	f004 fa0a 	bl	800548a <HAL_NVIC_EnableIRQ>

  /* Enable UART receive interrupt */
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <RPI_UART_Init+0xe4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <RPI_UART_Init+0xe4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0220 	orr.w	r2, r2, #32
 8001084:	60da      	str	r2, [r3, #12]
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40021800 	.word	0x40021800
 8001098:	200004f0 	.word	0x200004f0
 800109c:	40011400 	.word	0x40011400

080010a0 <ProcessCommand>:

/**
 * @brief Process received command
 */
void ProcessCommand(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  switch (rxCmd) {
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <ProcessCommand+0xb4>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	2b1f      	cmp	r3, #31
 80010ac:	d84e      	bhi.n	800114c <ProcessCommand+0xac>
 80010ae:	a201      	add	r2, pc, #4	@ (adr r2, 80010b4 <ProcessCommand+0x14>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	08001135 	.word	0x08001135
 80010b8:	0800113d 	.word	0x0800113d
 80010bc:	08001145 	.word	0x08001145
 80010c0:	0800114d 	.word	0x0800114d
 80010c4:	0800114d 	.word	0x0800114d
 80010c8:	0800114d 	.word	0x0800114d
 80010cc:	0800114d 	.word	0x0800114d
 80010d0:	0800114d 	.word	0x0800114d
 80010d4:	0800114d 	.word	0x0800114d
 80010d8:	0800114d 	.word	0x0800114d
 80010dc:	0800114d 	.word	0x0800114d
 80010e0:	0800114d 	.word	0x0800114d
 80010e4:	0800114d 	.word	0x0800114d
 80010e8:	0800114d 	.word	0x0800114d
 80010ec:	0800114d 	.word	0x0800114d
 80010f0:	0800114d 	.word	0x0800114d
 80010f4:	0800114d 	.word	0x0800114d
 80010f8:	0800114d 	.word	0x0800114d
 80010fc:	0800114d 	.word	0x0800114d
 8001100:	0800114d 	.word	0x0800114d
 8001104:	0800114d 	.word	0x0800114d
 8001108:	0800114d 	.word	0x0800114d
 800110c:	0800114d 	.word	0x0800114d
 8001110:	0800114d 	.word	0x0800114d
 8001114:	0800114d 	.word	0x0800114d
 8001118:	0800114d 	.word	0x0800114d
 800111c:	0800114d 	.word	0x0800114d
 8001120:	0800114d 	.word	0x0800114d
 8001124:	0800114d 	.word	0x0800114d
 8001128:	0800114d 	.word	0x0800114d
 800112c:	0800114d 	.word	0x0800114d
 8001130:	0800114d 	.word	0x0800114d
    case CMD_LINE_DETECTED:
      HandleLineDetection(rxBuffer);
 8001134:	4808      	ldr	r0, [pc, #32]	@ (8001158 <ProcessCommand+0xb8>)
 8001136:	f001 ff79 	bl	800302c <HandleLineDetection>
      break;
 800113a:	e008      	b.n	800114e <ProcessCommand+0xae>

    case CMD_GRID_POSITION:
      HandleGridPosition(rxBuffer);
 800113c:	4806      	ldr	r0, [pc, #24]	@ (8001158 <ProcessCommand+0xb8>)
 800113e:	f001 ff85 	bl	800304c <HandleGridPosition>
      break;
 8001142:	e004      	b.n	800114e <ProcessCommand+0xae>

    case CMD_COLOR_DETECTED:
      HandleColorDetection(rxBuffer);
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <ProcessCommand+0xb8>)
 8001146:	f001 ff94 	bl	8003072 <HandleColorDetection>
      break;
 800114a:	e000      	b.n	800114e <ProcessCommand+0xae>
      //StopRobot();
      break;

    default:
      /* Unknown command */
      break;
 800114c:	bf00      	nop
  }
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000278 	.word	0x20000278
 8001158:	200001f8 	.word	0x200001f8

0800115c <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d901      	bls.n	8001170 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 800116c:	230f      	movs	r3, #15
 800116e:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001180:	4823      	ldr	r0, [pc, #140]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 8001182:	f004 fead 	bl	8005ee0 <HAL_GPIO_WritePin>
 8001186:	e005      	b.n	8001194 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118e:	4820      	ldr	r0, [pc, #128]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 8001190:	f004 fea6 	bl	8005ee0 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a4:	481a      	ldr	r0, [pc, #104]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 80011a6:	f004 fe9b 	bl	8005ee0 <HAL_GPIO_WritePin>
 80011aa:	e005      	b.n	80011b8 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	4817      	ldr	r0, [pc, #92]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 80011b4:	f004 fe94 	bl	8005ee0 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011c8:	4811      	ldr	r0, [pc, #68]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 80011ca:	f004 fe89 	bl	8005ee0 <HAL_GPIO_WritePin>
 80011ce:	e005      	b.n	80011dc <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d6:	480e      	ldr	r0, [pc, #56]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 80011d8:	f004 fe82 	bl	8005ee0 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ec:	4808      	ldr	r0, [pc, #32]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 80011ee:	f004 fe77 	bl	8005ee0 <HAL_GPIO_WritePin>
 80011f2:	e005      	b.n	8001200 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <AnalogMux_SelectChannel+0xb4>)
 80011fc:	f004 fe70 	bl	8005ee0 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f000 faf1 	bl	80017e8 <delayMicroseconds>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020400 	.word	0x40020400

08001214 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 800121e:	480b      	ldr	r0, [pc, #44]	@ (800124c <AnalogMux_ReadADC+0x38>)
 8001220:	f003 fc70 	bl	8004b04 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001224:	2164      	movs	r1, #100	@ 0x64
 8001226:	4809      	ldr	r0, [pc, #36]	@ (800124c <AnalogMux_ReadADC+0x38>)
 8001228:	f003 fd71 	bl	8004d0e <HAL_ADC_PollForConversion>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d104      	bne.n	800123c <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <AnalogMux_ReadADC+0x38>)
 8001234:	f003 fdf6 	bl	8004e24 <HAL_ADC_GetValue>
 8001238:	4603      	mov	r3, r0
 800123a:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <AnalogMux_ReadADC+0x38>)
 800123e:	f003 fd33 	bl	8004ca8 <HAL_ADC_Stop>

    return adcValue;
 8001242:	88fb      	ldrh	r3, [r7, #6]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000298 	.word	0x20000298

08001250 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff7d 	bl	800115c <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 8001262:	2005      	movs	r0, #5
 8001264:	f000 fac0 	bl	80017e8 <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8001268:	f7ff ffd4 	bl	8001214 <AnalogMux_ReadADC>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	2120      	movs	r1, #32
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <Buzzer_On+0x14>)
 8001282:	f004 fe2d 	bl	8005ee0 <HAL_GPIO_WritePin>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40020000 	.word	0x40020000

08001290 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2120      	movs	r1, #32
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <Buzzer_Off+0x14>)
 800129a:	f004 fe21 	bl	8005ee0 <HAL_GPIO_WritePin>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000

080012a8 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 80012b0:	f7ff ffe2 	bl	8001278 <Buzzer_On>
    HAL_Delay(delay);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f003 fbbd 	bl	8004a34 <HAL_Delay>
    Buzzer_Off();
 80012ba:	f7ff ffe9 	bl	8001290 <Buzzer_Off>
    HAL_Delay(delay);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f003 fbb8 	bl	8004a34 <HAL_Delay>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 80012d0:	f7ff ffd2 	bl	8001278 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80012d4:	2064      	movs	r0, #100	@ 0x64
 80012d6:	f003 fbad 	bl	8004a34 <HAL_Delay>
    Buzzer_Off();
 80012da:	f7ff ffd9 	bl	8001290 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80012de:	2064      	movs	r0, #100	@ 0x64
 80012e0:	f003 fba8 	bl	8004a34 <HAL_Delay>

    Buzzer_On();
 80012e4:	f7ff ffc8 	bl	8001278 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80012e8:	2064      	movs	r0, #100	@ 0x64
 80012ea:	f003 fba3 	bl	8004a34 <HAL_Delay>
    Buzzer_Off();
 80012ee:	f7ff ffcf 	bl	8001290 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80012f2:	2064      	movs	r0, #100	@ 0x64
 80012f4:	f003 fb9e 	bl	8004a34 <HAL_Delay>

    Buzzer_On();
 80012f8:	f7ff ffbe 	bl	8001278 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80012fc:	20c8      	movs	r0, #200	@ 0xc8
 80012fe:	f003 fb99 	bl	8004a34 <HAL_Delay>
    Buzzer_Off();
 8001302:	f7ff ffc5 	bl	8001290 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001306:	2064      	movs	r0, #100	@ 0x64
 8001308:	f003 fb94 	bl	8004a34 <HAL_Delay>

    Buzzer_On();
 800130c:	f7ff ffb4 	bl	8001278 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001310:	2064      	movs	r0, #100	@ 0x64
 8001312:	f003 fb8f 	bl	8004a34 <HAL_Delay>
    Buzzer_Off();
 8001316:	f7ff ffbb 	bl	8001290 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800131a:	2064      	movs	r0, #100	@ 0x64
 800131c:	f003 fb8a 	bl	8004a34 <HAL_Delay>

    Buzzer_On();
 8001320:	f7ff ffaa 	bl	8001278 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001324:	20c8      	movs	r0, #200	@ 0xc8
 8001326:	f003 fb85 	bl	8004a34 <HAL_Delay>
    Buzzer_Off();
 800132a:	f7ff ffb1 	bl	8001290 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}

08001332 <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <Controller_EnableControllers>:

/**
 * Enable motor controllers.
 */
void Controller_EnableControllers(Controller *controller) {
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <Controller_DisableControllers>:

/**
 * Disable motor controllers.
 */
void Controller_DisableControllers(Controller *controller) {
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2020 	strb.w	r2, [r3, #32]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <Controller_ResetControllers>:

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <Controller_Stop>:

void Controller_Stop(){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8001408:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800141c <Controller_Stop+0x18>
 800140c:	f001 f8f8 	bl	8002600 <setMotorLPWM>
	setMotorRPWM(0);
 8001410:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800141c <Controller_Stop+0x18>
 8001414:	f001 f93a 	bl	800268c <setMotorRPWM>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	00000000 	.word	0x00000000

08001420 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	@ 0x40
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	ed87 0a02 	vstr	s0, [r7, #8]
 800142c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001430:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001440:	4b6c      	ldr	r3, [pc, #432]	@ (80015f4 <UpdateControllers+0x1d4>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed97 7a02 	vldr	s14, [r7, #8]
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 8001452:	f000 fad7 	bl	8001a04 <robot_fwd_change>
 8001456:	eeb0 7a40 	vmov.f32	s14, s0
 800145a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800145e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	ed93 7a00 	vldr	s14, [r3]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	edd3 7a02 	vldr	s15, [r3, #8]
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001482:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <UpdateControllers+0x1d8>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <UpdateControllers+0x1dc>)
 80014a0:	edd3 6a00 	vldr	s13, [r3]
 80014a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 80014b4:	4b4f      	ldr	r3, [pc, #316]	@ (80015f4 <UpdateControllers+0x1d4>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80014be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80014c6:	f000 faaf 	bl	8001a28 <robot_rot_change>
 80014ca:	eeb0 7a40 	vmov.f32	s14, s0
 80014ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80014d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80014ec:	edd7 7a00 	vldr	s15, [r7]
 80014f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a03 	vldr	s15, [r3, #12]
 8001506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	ed93 7a01 	vldr	s14, [r3, #4]
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <UpdateControllers+0x1e0>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <UpdateControllers+0x1e4>)
 8001528:	edd3 6a00 	vldr	s13, [r3]
 800152c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 800153c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001540:	edd7 7a08 	vldr	s15, [r7, #32]
 8001544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001548:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 800154c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001550:	edd7 7a08 	vldr	s15, [r7, #32]
 8001554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001558:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <UpdateControllers+0x1e8>)
 800155e:	ed93 7a00 	vldr	s14, [r3]
 8001562:	edd7 7a01 	vldr	s15, [r7, #4]
 8001566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156a:	4b28      	ldr	r3, [pc, #160]	@ (800160c <UpdateControllers+0x1ec>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001574:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 8001578:	ed97 7a02 	vldr	s14, [r7, #8]
 800157c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 8001588:	ed97 7a02 	vldr	s14, [r7, #8]
 800158c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d017      	beq.n	80015d2 <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 80015a2:	ed97 0a06 	vldr	s0, [r7, #24]
 80015a6:	f000 f833 	bl	8001610 <leftFeedForward>
 80015aa:	eeb0 7a40 	vmov.f32	s14, s0
 80015ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80015b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 80015ba:	ed97 0a05 	vldr	s0, [r7, #20]
 80015be:	f000 f88d 	bl	80016dc <rightFeedForward>
 80015c2:	eeb0 7a40 	vmov.f32	s14, s0
 80015c6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80015ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015ce:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80015dc:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80015e0:	f001 f80e 	bl	8002600 <setMotorLPWM>
        setMotorRPWM(right_output);
 80015e4:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80015e8:	f001 f850 	bl	800268c <setMotorRPWM>
    }


}
 80015ec:	bf00      	nop
 80015ee:	3740      	adds	r7, #64	@ 0x40
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	0800c550 	.word	0x0800c550
 80015f8:	0800c560 	.word	0x0800c560
 80015fc:	0800c564 	.word	0x0800c564
 8001600:	0800c568 	.word	0x0800c568
 8001604:	0800c56c 	.word	0x0800c56c
 8001608:	0800c540 	.word	0x0800c540
 800160c:	0800c548 	.word	0x0800c548

08001610 <leftFeedForward>:


float leftFeedForward(float speed) {
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 800161a:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <leftFeedForward+0xb8>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ed97 7a01 	vldr	s14, [r7, #4]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 800162c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	dd09      	ble.n	800164e <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <leftFeedForward+0xbc>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ed97 7a05 	vldr	s14, [r7, #20]
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	edc7 7a05 	vstr	s15, [r7, #20]
 800164c:	e00f      	b.n	800166e <leftFeedForward+0x5e>
  } else if (speed < 0) {
 800164e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d508      	bpl.n	800166e <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <leftFeedForward+0xbc>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ed97 7a05 	vldr	s14, [r7, #20]
 8001666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166a:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <leftFeedForward+0xc0>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ed97 7a01 	vldr	s14, [r7, #4]
 8001678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <leftFeedForward+0xc4>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800168a:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <leftFeedForward+0xc0>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <leftFeedForward+0xc8>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed97 7a04 	vldr	s14, [r7, #16]
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 80016a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	0800c554 	.word	0x0800c554
 80016cc:	0800c55c 	.word	0x0800c55c
 80016d0:	2000027c 	.word	0x2000027c
 80016d4:	0800c54c 	.word	0x0800c54c
 80016d8:	0800c558 	.word	0x0800c558

080016dc <rightFeedForward>:

float rightFeedForward(float speed) {
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <rightFeedForward+0xb8>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 80016f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	dd09      	ble.n	800171a <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <rightFeedForward+0xbc>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001714:	edc7 7a05 	vstr	s15, [r7, #20]
 8001718:	e00f      	b.n	800173a <rightFeedForward+0x5e>
  } else if (speed < 0) {
 800171a:	edd7 7a01 	vldr	s15, [r7, #4]
 800171e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	d508      	bpl.n	800173a <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <rightFeedForward+0xbc>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001736:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <rightFeedForward+0xc0>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ed97 7a01 	vldr	s14, [r7, #4]
 8001744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001748:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <rightFeedForward+0xc4>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 8001756:	4a11      	ldr	r2, [pc, #68]	@ (800179c <rightFeedForward+0xc0>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <rightFeedForward+0xc8>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ed97 7a04 	vldr	s14, [r7, #16]
 8001766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176a:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 800176e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001772:	edd7 7a03 	vldr	s15, [r7, #12]
 8001776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177a:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	ee07 3a90 	vmov	s15, r3
}
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	0800c554 	.word	0x0800c554
 8001798:	0800c55c 	.word	0x0800c55c
 800179c:	2000027c 	.word	0x2000027c
 80017a0:	0800c54c 	.word	0x0800c54c
 80017a4:	0800c558 	.word	0x0800c558

080017a8 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <Delay_Init+0x38>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10e      	bne.n	80017d6 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <Delay_Init+0x38>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <Delay_Init+0x38>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <Delay_Init+0x3c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <Delay_Init+0x3c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <Delay_Init+0x3c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
    }
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000edf0 	.word	0xe000edf0
 80017e4:	e0001000 	.word	0xe0001000

080017e8 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <delayMicroseconds+0x38>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	22b4      	movs	r2, #180	@ 0xb4
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001800:	bf00      	nop
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <delayMicroseconds+0x38>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f8      	bhi.n	8001802 <delayMicroseconds+0x1a>
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e0001000 	.word	0xe0001000

08001824 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8001828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	b21b      	sxth	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <getLeftEncoderCounts+0x14>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	b21b      	sxth	r3, r3
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40010000 	.word	0x40010000

08001854 <resetEncoders>:

void resetEncoders() {
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <resetEncoders+0x44>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 800185e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
	m_robot_distance = 0;
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <resetEncoders+0x48>)
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <resetEncoders+0x4c>)
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
	left_delta = 0;
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <resetEncoders+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	801a      	strh	r2, [r3, #0]
	right_delta = 0;
 800187c:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <resetEncoders+0x54>)
 800187e:	2200      	movs	r2, #0
 8001880:	801a      	strh	r2, [r3, #0]
	previous_left_count = 0;
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <resetEncoders+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	801a      	strh	r2, [r3, #0]
	previous_right_count = 0;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <resetEncoders+0x5c>)
 800188a:	2200      	movs	r2, #0
 800188c:	801a      	strh	r2, [r3, #0]

}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40010000 	.word	0x40010000
 800189c:	20000280 	.word	0x20000280
 80018a0:	20000284 	.word	0x20000284
 80018a4:	20000288 	.word	0x20000288
 80018a8:	2000028a 	.word	0x2000028a
 80018ac:	2000028c 	.word	0x2000028c
 80018b0:	2000028e 	.word	0x2000028e

080018b4 <resetEncodersinSystick>:

void resetEncodersinSystick() {
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <resetEncodersinSystick+0x1c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 80018be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40010000 	.word	0x40010000
 80018d4:	00000000 	.word	0x00000000

080018d8 <update_Encoder_Data>:

void update_Encoder_Data(){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 80018de:	f7ff ffad 	bl	800183c <getLeftEncoderCounts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 80018e6:	f7ff ff9d 	bl	8001824 <getRightEncoderCounts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 80018ee:	89fa      	ldrh	r2, [r7, #14]
 80018f0:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <update_Encoder_Data+0x108>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <update_Encoder_Data+0x10c>)
 8001900:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 8001902:	4a37      	ldr	r2, [pc, #220]	@ (80019e0 <update_Encoder_Data+0x108>)
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001908:	89ba      	ldrh	r2, [r7, #12]
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <update_Encoder_Data+0x110>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	b29b      	uxth	r3, r3
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b29b      	uxth	r3, r3
 8001916:	b21a      	sxth	r2, r3
 8001918:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <update_Encoder_Data+0x114>)
 800191a:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 800191c:	4a32      	ldr	r2, [pc, #200]	@ (80019e8 <update_Encoder_Data+0x110>)
 800191e:	89bb      	ldrh	r3, [r7, #12]
 8001920:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 8001922:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <update_Encoder_Data+0x10c>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe1b 	bl	8000564 <__aeabi_i2d>
 800192e:	a32a      	add	r3, pc, #168	@ (adr r3, 80019d8 <update_Encoder_Data+0x100>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe80 	bl	8000638 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f952 	bl	8000be8 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <update_Encoder_Data+0x114>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe08 	bl	8000564 <__aeabi_i2d>
 8001954:	a320      	add	r3, pc, #128	@ (adr r3, 80019d8 <update_Encoder_Data+0x100>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fe6d 	bl	8000638 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f93f 	bl	8000be8 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 800196e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001972:	edd7 7a02 	vldr	s15, [r7, #8]
 8001976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800197e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <update_Encoder_Data+0x118>)
 8001984:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <update_Encoder_Data+0x11c>)
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <update_Encoder_Data+0x118>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <update_Encoder_Data+0x11c>)
 800199a:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 800199e:	ed97 7a01 	vldr	s14, [r7, #4]
 80019a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <update_Encoder_Data+0x120>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <update_Encoder_Data+0x124>)
 80019b6:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <update_Encoder_Data+0x128>)
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <update_Encoder_Data+0x124>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <update_Encoder_Data+0x128>)
 80019cc:	edc3 7a00 	vstr	s15, [r3]


}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	58e4ab66 	.word	0x58e4ab66
 80019dc:	3fb0cd2e 	.word	0x3fb0cd2e
 80019e0:	2000028c 	.word	0x2000028c
 80019e4:	20000288 	.word	0x20000288
 80019e8:	2000028e 	.word	0x2000028e
 80019ec:	2000028a 	.word	0x2000028a
 80019f0:	20000290 	.word	0x20000290
 80019f4:	20000280 	.word	0x20000280
 80019f8:	0800c544 	.word	0x0800c544
 80019fc:	20000294 	.word	0x20000294
 8001a00:	20000284 	.word	0x20000284

08001a04 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <robot_fwd_change+0x20>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	607b      	str	r3, [r7, #4]
	return distance;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	ee07 3a90 	vmov	s15, r3
}
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	20000290 	.word	0x20000290

08001a28 <robot_rot_change>:

float robot_rot_change() {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <robot_rot_change+0x20>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	607b      	str	r3, [r7, #4]
	return distance;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	ee07 3a90 	vmov	s15, r3
}
 8001a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000294 	.word	0x20000294

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a52:	f002 ff7d 	bl	8004950 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a56:	f000 f891 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5a:	f000 fb73 	bl	8002144 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a5e:	f000 fb51 	bl	8002104 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a62:	f000 fad1 	bl	8002008 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001a66:	f000 f9a9 	bl	8001dbc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a6a:	f000 f9ff 	bl	8001e6c <MX_TIM2_Init>
  MX_I2C2_Init();
 8001a6e:	f000 f977 	bl	8001d60 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001a72:	f000 faf3 	bl	800205c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001a76:	f000 fb1b 	bl	80020b0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001a7a:	f000 f8f1 	bl	8001c60 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001a7e:	f000 f941 	bl	8001d04 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a82:	f000 fa47 	bl	8001f14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a86:	213c      	movs	r1, #60	@ 0x3c
 8001a88:	4832      	ldr	r0, [pc, #200]	@ (8001b54 <main+0x108>)
 8001a8a:	f006 fd0b 	bl	80084a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a8e:	213c      	movs	r1, #60	@ 0x3c
 8001a90:	4831      	ldr	r0, [pc, #196]	@ (8001b58 <main+0x10c>)
 8001a92:	f006 fd07 	bl	80084a4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a96:	2100      	movs	r1, #0
 8001a98:	4830      	ldr	r0, [pc, #192]	@ (8001b5c <main+0x110>)
 8001a9a:	f006 fb95 	bl	80081c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	482e      	ldr	r0, [pc, #184]	@ (8001b5c <main+0x110>)
 8001aa2:	f006 fb91 	bl	80081c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	482c      	ldr	r0, [pc, #176]	@ (8001b5c <main+0x110>)
 8001aaa:	f006 fb8d 	bl	80081c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001aae:	210c      	movs	r1, #12
 8001ab0:	482a      	ldr	r0, [pc, #168]	@ (8001b5c <main+0x110>)
 8001ab2:	f006 fb89 	bl	80081c8 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 8001ab6:	f002 fcdf 	bl	8004478 <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001aba:	2301      	movs	r3, #1
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	2340      	movs	r3, #64	@ 0x40
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	4a26      	ldr	r2, [pc, #152]	@ (8001b60 <main+0x114>)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f002 fe3f 	bl	800474c <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 8001ace:	f002 fd97 	bl	8004600 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 8001ad2:	f7ff fbfb 	bl	80012cc <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 8001ad6:	f7ff fe67 	bl	80017a8 <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();
  // This is the uart for the bluetooth
  //UART_Init(&huart3);
  RPI_UART_Init();
 8001ada:	f7ff fa6b 	bl	8000fb4 <RPI_UART_Init>

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 8001ade:	2032      	movs	r0, #50	@ 0x32
 8001ae0:	f001 fe5e 	bl	80037a0 <Servo_Init>
//  Servo_SetAngle(B, 90);
//  Servo_SetAngle(C, 35);

  //PCA9685_SetServoAngle(14, 100);

  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	481e      	ldr	r0, [pc, #120]	@ (8001b64 <main+0x118>)
 8001aea:	f004 f9f9 	bl	8005ee0 <HAL_GPIO_WritePin>


  // Or use them by name
  //Servo_SetAngleByName("base", 90);  // Set base to 120 degrees

  HAL_Delay(1000);
 8001aee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001af2:	f002 ff9f 	bl	8004a34 <HAL_Delay>
  Controller_Init(&controller);
 8001af6:	481c      	ldr	r0, [pc, #112]	@ (8001b68 <main+0x11c>)
 8001af8:	f7ff fc1b 	bl	8001332 <Controller_Init>
    Profile_Reset(&forward_profile);
 8001afc:	481b      	ldr	r0, [pc, #108]	@ (8001b6c <main+0x120>)
 8001afe:	f000 fea5 	bl	800284c <Profile_Reset>
    Profile_Reset(&rotation_profile);
 8001b02:	481b      	ldr	r0, [pc, #108]	@ (8001b70 <main+0x124>)
 8001b04:	f000 fea2 	bl	800284c <Profile_Reset>
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <main+0x124>)
 8001b0a:	4a18      	ldr	r2, [pc, #96]	@ (8001b6c <main+0x120>)
 8001b0c:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <main+0x11c>)
 8001b0e:	4819      	ldr	r0, [pc, #100]	@ (8001b74 <main+0x128>)
 8001b10:	f000 fbc4 	bl	800229c <Motion_Init>
    Controller_ResetControllers(&controller);
 8001b14:	4814      	ldr	r0, [pc, #80]	@ (8001b68 <main+0x11c>)
 8001b16:	f7ff fc5a 	bl	80013ce <Controller_ResetControllers>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 8001b1a:	2064      	movs	r0, #100	@ 0x64
 8001b1c:	f7ff fbc4 	bl	80012a8 <Buzzer_Toggle>

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

  HAL_Delay(2000);
 8001b20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b24:	f002 ff86 	bl	8004a34 <HAL_Delay>
  RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4813      	ldr	r0, [pc, #76]	@ (8001b78 <main+0x12c>)
 8001b2c:	f001 f89a 	bl	8002c64 <RAYKHA_Calibrate>

  Buzzer_Toggle(100);
 8001b30:	2064      	movs	r0, #100	@ 0x64
 8001b32:	f7ff fbb9 	bl	80012a8 <Buzzer_Toggle>

  //set_steering_mode(STEERING_CENTER_LINE_FOLLOW);

  //HAL_Delay(5000);
  Buzzer_Toggle(100);
 8001b36:	2064      	movs	r0, #100	@ 0x64
 8001b38:	f7ff fbb6 	bl	80012a8 <Buzzer_Toggle>

  HAL_Delay(2000);
 8001b3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b40:	f002 ff78 	bl	8004a34 <HAL_Delay>

  EnableSysTickFunction();
 8001b44:	f002 fb2a 	bl	800419c <EnableSysTickFunction>
  runCurrentTask(TASK_PLANTATION);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f002 fc5b 	bl	8004404 <runCurrentTask>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b4e:	bf00      	nop
 8001b50:	e7fd      	b.n	8001b4e <main+0x102>
 8001b52:	bf00      	nop
 8001b54:	20000388 	.word	0x20000388
 8001b58:	200003d0 	.word	0x200003d0
 8001b5c:	20000418 	.word	0x20000418
 8001b60:	0800c5b0 	.word	0x0800c5b0
 8001b64:	40020800 	.word	0x40020800
 8001b68:	2000067c 	.word	0x2000067c
 8001b6c:	20000634 	.word	0x20000634
 8001b70:	20000658 	.word	0x20000658
 8001b74:	200005c8 	.word	0x200005c8
 8001b78:	2000059c 	.word	0x2000059c

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2234      	movs	r2, #52	@ 0x34
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f008 fd51 	bl	800a632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <SystemClock_Config+0xdc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <SystemClock_Config+0xdc>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <SystemClock_Config+0xdc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <SystemClock_Config+0xe0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a25      	ldr	r2, [pc, #148]	@ (8001c5c <SystemClock_Config+0xe0>)
 8001bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <SystemClock_Config+0xe0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be0:	2310      	movs	r3, #16
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bec:	2308      	movs	r3, #8
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bf0:	23b4      	movs	r3, #180	@ 0xb4
 8001bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fff1 	bl	8007bec <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c10:	f000 fb3e 	bl	8002290 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c14:	f005 fc50 	bl	80074b8 <HAL_PWREx_EnableOverDrive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c1e:	f000 fb37 	bl	8002290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c22:	230f      	movs	r3, #15
 8001c24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	2105      	movs	r1, #5
 8001c40:	4618      	mov	r0, r3
 8001c42:	f005 fc89 	bl	8007558 <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c4c:	f000 fb20 	bl	8002290 <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3750      	adds	r7, #80	@ 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c74:	4a21      	ldr	r2, [pc, #132]	@ (8001cfc <MX_ADC1_Init+0x9c>)
 8001c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c92:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001ca2:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <MX_ADC1_Init+0xa0>)
 8001ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cc0:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001cc2:	f002 fedb 	bl	8004a7c <HAL_ADC_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ccc:	f000 fae0 	bl	8002290 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_ADC1_Init+0x98>)
 8001ce2:	f003 f8ad 	bl	8004e40 <HAL_ADC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cec:	f000 fad0 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000298 	.word	0x20000298
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	0f000001 	.word	0x0f000001

08001d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d0a:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <MX_I2C1_Init+0x54>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d10:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <MX_I2C1_Init+0x58>)
 8001d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d42:	f004 f8e7 	bl	8005f14 <HAL_I2C_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d4c:	f000 faa0 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200002e0 	.word	0x200002e0
 8001d58:	40005400 	.word	0x40005400
 8001d5c:	00061a80 	.word	0x00061a80

08001d60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d66:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <MX_I2C2_Init+0x54>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d6c:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <MX_I2C2_Init+0x58>)
 8001d6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_I2C2_Init+0x50>)
 8001d9e:	f004 f8b9 	bl	8005f14 <HAL_I2C_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001da8:	f000 fa72 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000334 	.word	0x20000334
 8001db4:	40005800 	.word	0x40005800
 8001db8:	000186a0 	.word	0x000186a0

08001dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	@ 0x30
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2224      	movs	r2, #36	@ 0x24
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f008 fc31 	bl	800a632 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dd8:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001dda:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <MX_TIM1_Init+0xac>)
 8001ddc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e04:	2303      	movs	r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001e30:	f006 fa92 	bl	8008358 <HAL_TIM_Encoder_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e3a:	f000 fa29 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	@ (8001e64 <MX_TIM1_Init+0xa8>)
 8001e4c:	f006 fefc 	bl	8008c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e56:	f000 fa1b 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3730      	adds	r7, #48	@ 0x30
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000388 	.word	0x20000388
 8001e68:	40010000 	.word	0x40010000

08001e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	@ 0x30
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2224      	movs	r2, #36	@ 0x24
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f008 fbd9 	bl	800a632 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001e9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001edc:	f006 fa3c 	bl	8008358 <HAL_TIM_Encoder_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ee6:	f000 f9d3 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <MX_TIM2_Init+0xa4>)
 8001ef8:	f006 fea6 	bl	8008c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f02:	f000 f9c5 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	3730      	adds	r7, #48	@ 0x30
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200003d0 	.word	0x200003d0

08001f14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f36:	4b32      	ldr	r3, [pc, #200]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f38:	4a32      	ldr	r2, [pc, #200]	@ (8002004 <MX_TIM3_Init+0xf0>)
 8001f3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f4a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001f4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b2b      	ldr	r3, [pc, #172]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f5c:	4828      	ldr	r0, [pc, #160]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f5e:	f006 f8e3 	bl	8008128 <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f68:	f000 f992 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4821      	ldr	r0, [pc, #132]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001f7c:	f006 fe64 	bl	8008c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f86:	f000 f983 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8a:	2360      	movs	r3, #96	@ 0x60
 8001f8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4817      	ldr	r0, [pc, #92]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fa2:	f006 fb0d 	bl	80085c0 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001fac:	f000 f970 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4812      	ldr	r0, [pc, #72]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fb8:	f006 fb02 	bl	80085c0 <HAL_TIM_PWM_ConfigChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fc2:	f000 f965 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2208      	movs	r2, #8
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fce:	f006 faf7 	bl	80085c0 <HAL_TIM_PWM_ConfigChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001fd8:	f000 f95a 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	220c      	movs	r2, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4807      	ldr	r0, [pc, #28]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001fe4:	f006 faec 	bl	80085c0 <HAL_TIM_PWM_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001fee:	f000 f94f 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ff2:	4803      	ldr	r0, [pc, #12]	@ (8002000 <MX_TIM3_Init+0xec>)
 8001ff4:	f001 fd9e 	bl	8003b34 <HAL_TIM_MspPostInit>

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	@ 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000418 	.word	0x20000418
 8002004:	40000400 	.word	0x40000400

08002008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_USART2_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002040:	f006 fe7e 	bl	8008d40 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 f921 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000460 	.word	0x20000460
 8002058:	40004400 	.word	0x40004400

0800205c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <MX_USART3_UART_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002068:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800206c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_USART3_UART_Init+0x4c>)
 8002094:	f006 fe54 	bl	8008d40 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800209e:	f000 f8f7 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004a8 	.word	0x200004a8
 80020ac:	40004800 	.word	0x40004800

080020b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_USART6_UART_Init+0x50>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_USART6_UART_Init+0x4c>)
 80020e8:	f006 fe2a 	bl	8008d40 <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020f2:	f000 f8cd 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200004f0 	.word	0x200004f0
 8002100:	40011400 	.word	0x40011400

08002104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <MX_DMA_Init+0x3c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a0b      	ldr	r2, [pc, #44]	@ (8002140 <MX_DMA_Init+0x3c>)
 8002114:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <MX_DMA_Init+0x3c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2039      	movs	r0, #57	@ 0x39
 800212c:	f003 f991 	bl	8005452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002130:	2039      	movs	r0, #57	@ 0x39
 8002132:	f003 f9aa 	bl	800548a <HAL_NVIC_EnableIRQ>

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b48      	ldr	r3, [pc, #288]	@ (8002280 <MX_GPIO_Init+0x13c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a47      	ldr	r2, [pc, #284]	@ (8002280 <MX_GPIO_Init+0x13c>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b45      	ldr	r3, [pc, #276]	@ (8002280 <MX_GPIO_Init+0x13c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b41      	ldr	r3, [pc, #260]	@ (8002280 <MX_GPIO_Init+0x13c>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a40      	ldr	r2, [pc, #256]	@ (8002280 <MX_GPIO_Init+0x13c>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <MX_GPIO_Init+0x13c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b3a      	ldr	r3, [pc, #232]	@ (8002280 <MX_GPIO_Init+0x13c>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a39      	ldr	r2, [pc, #228]	@ (8002280 <MX_GPIO_Init+0x13c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b37      	ldr	r3, [pc, #220]	@ (8002280 <MX_GPIO_Init+0x13c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b33      	ldr	r3, [pc, #204]	@ (8002280 <MX_GPIO_Init+0x13c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a32      	ldr	r2, [pc, #200]	@ (8002280 <MX_GPIO_Init+0x13c>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b30      	ldr	r3, [pc, #192]	@ (8002280 <MX_GPIO_Init+0x13c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIRPUMP_Pin|WATERPUMP_Pin, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2106      	movs	r1, #6
 80021ce:	482d      	ldr	r0, [pc, #180]	@ (8002284 <MX_GPIO_Init+0x140>)
 80021d0:	f003 fe86 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2120      	movs	r1, #32
 80021d8:	482b      	ldr	r0, [pc, #172]	@ (8002288 <MX_GPIO_Init+0x144>)
 80021da:	f003 fe81 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80021e4:	4829      	ldr	r0, [pc, #164]	@ (800228c <MX_GPIO_Init+0x148>)
 80021e6:	f003 fe7b 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80021f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4820      	ldr	r0, [pc, #128]	@ (8002284 <MX_GPIO_Init+0x140>)
 8002202:	f003 fcd9 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRPUMP_Pin WATERPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin|WATERPUMP_Pin;
 8002206:	2306      	movs	r3, #6
 8002208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800220e:	2301      	movs	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4819      	ldr	r0, [pc, #100]	@ (8002284 <MX_GPIO_Init+0x140>)
 800221e:	f003 fccb 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002222:	2320      	movs	r3, #32
 8002224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002226:	2301      	movs	r3, #1
 8002228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4813      	ldr	r0, [pc, #76]	@ (8002288 <MX_GPIO_Init+0x144>)
 800223a:	f003 fcbd 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 800223e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <MX_GPIO_Init+0x148>)
 8002258:	f003 fcae 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800225c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <MX_GPIO_Init+0x140>)
 8002272:	f003 fca1 	bl	8005bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	@ 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40020800 	.word	0x40020800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <Error_Handler+0x8>

0800229c <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 800229c:	b4b0      	push	{r4, r5, r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4614      	mov	r4, r2
 80022b0:	461d      	mov	r5, r3
 80022b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80022c6:	4615      	mov	r5, r2
 80022c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 80022dc:	4615      	mov	r5, r2
 80022de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	6023      	str	r3, [r4, #0]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bcb0      	pop	{r4, r5, r7}
 80022f2:	4770      	bx	lr

080022f4 <Motion_ResetDriveSystem>:

void Motion_ResetDriveSystem(Motion *motion) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	Motion_Stop(motion);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f81b 	bl	8002338 <Motion_Stop>
	Motion_DisableDrive(motion);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f822 	bl	800234c <Motion_DisableDrive>
    resetEncoders();
 8002308:	f7ff faa4 	bl	8001854 <resetEncoders>
    Profile_Reset(&(motion->forward));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3324      	adds	r3, #36	@ 0x24
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fa9b 	bl	800284c <Profile_Reset>
    Profile_Reset(&(motion->rotation));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3348      	adds	r3, #72	@ 0x48
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fa96 	bl	800284c <Profile_Reset>
    Controller_ResetControllers(&(motion->controller));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f853 	bl	80013ce <Controller_ResetControllers>
    Controller_EnableControllers(&(motion->controller));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f833 	bl	8001396 <Controller_EnableControllers>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <Motion_Stop>:

void Motion_Stop(Motion *motion) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	Controller_Stop();
 8002340:	f7ff f860 	bl	8001404 <Controller_Stop>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <Motion_DisableDrive>:

void Motion_DisableDrive(Motion *motion) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	Controller_DisableControllers(&(motion->controller));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff f82b 	bl	80013b2 <Controller_DisableControllers>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3324      	adds	r3, #36	@ 0x24
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fb67 	bl	8002a44 <Profile_GetSpeed>
 8002376:	eef0 7a40 	vmov.f32	s15, s0
}
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3348      	adds	r3, #72	@ 0x48
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fb57 	bl	8002a44 <Profile_GetSpeed>
 8002396:	eef0 7a40 	vmov.f32	s15, s0
}
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <Motion_StartMove>:
float Motion_Alpha(Motion *motion) {
    return Profile_GetAcceleration(&(motion->rotation));
}


void Motion_StartMove(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6178      	str	r0, [r7, #20]
 80023ac:	ed87 0a04 	vstr	s0, [r7, #16]
 80023b0:	edc7 0a03 	vstr	s1, [r7, #12]
 80023b4:	ed87 1a02 	vstr	s2, [r7, #8]
 80023b8:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(&(motion->forward), distance, top_speed, final_speed, acceleration);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3324      	adds	r3, #36	@ 0x24
 80023c0:	edd7 1a01 	vldr	s3, [r7, #4]
 80023c4:	ed97 1a02 	vldr	s2, [r7, #8]
 80023c8:	edd7 0a03 	vldr	s1, [r7, #12]
 80023cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fa54 	bl	800287e <Profile_Start>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <Motion_Move>:
uint8_t Motion_MoveFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->forward));
}

// wait untill mition is completed
void Motion_Move(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6178      	str	r0, [r7, #20]
 80023e6:	ed87 0a04 	vstr	s0, [r7, #16]
 80023ea:	edc7 0a03 	vstr	s1, [r7, #12]
 80023ee:	ed87 1a02 	vstr	s2, [r7, #8]
 80023f2:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Move(&(motion->forward), distance, top_speed, final_speed, acceleration);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3324      	adds	r3, #36	@ 0x24
 80023fa:	edd7 1a01 	vldr	s3, [r7, #4]
 80023fe:	ed97 1a02 	vldr	s2, [r7, #8]
 8002402:	edd7 0a03 	vldr	s1, [r7, #12]
 8002406:	ed97 0a04 	vldr	s0, [r7, #16]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fac2 	bl	8002994 <Profile_Move>
}
 8002410:	bf00      	nop
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <Motion_Turn>:
uint8_t Motion_TurnFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->rotation));
}

//wait untill motion is finished
void Motion_Turn(Motion *motion, float angle, float omega, float alpha) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	ed87 0a02 	vstr	s0, [r7, #8]
 8002424:	edc7 0a01 	vstr	s1, [r7, #4]
 8002428:	ed87 1a00 	vstr	s2, [r7]
    Profile_Move(&(motion->rotation), angle, omega, 0, alpha);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3348      	adds	r3, #72	@ 0x48
 8002430:	edd7 1a00 	vldr	s3, [r7]
 8002434:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8002450 <Motion_Turn+0x38>
 8002438:	edd7 0a01 	vldr	s1, [r7, #4]
 800243c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 faa7 	bl	8002994 <Profile_Move>
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	00000000 	.word	0x00000000

08002454 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3324      	adds	r3, #36	@ 0x24
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fb1d 	bl	8002aa0 <Profile_Update>
    Profile_Update(&(motion->rotation));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3348      	adds	r3, #72	@ 0x48
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fb18 	bl	8002aa0 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <Motion_SpinTurn>:

/**
  *
  * @brief turn in place. Force forward speed to zero
  */
void Motion_SpinTurn(Motion *motion, float angle, float omega, float alpha) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	ed87 0a02 	vstr	s0, [r7, #8]
 8002484:	edc7 0a01 	vstr	s1, [r7, #4]
 8002488:	ed87 1a00 	vstr	s2, [r7]
    Profile_SetTargetSpeed(&(motion->forward), 0);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3324      	adds	r3, #36	@ 0x24
 8002490:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80024d4 <Motion_SpinTurn+0x5c>
 8002494:	4618      	mov	r0, r3
 8002496:	f000 faf3 	bl	8002a80 <Profile_SetTargetSpeed>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 800249a:	e002      	b.n	80024a2 <Motion_SpinTurn+0x2a>
        HAL_Delay(2);
 800249c:	2002      	movs	r0, #2
 800249e:	f002 fac9 	bl	8004a34 <HAL_Delay>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3324      	adds	r3, #36	@ 0x24
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 facc 	bl	8002a44 <Profile_GetSpeed>
 80024ac:	eef0 7a40 	vmov.f32	s15, s0
 80024b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d1f0      	bne.n	800249c <Motion_SpinTurn+0x24>
    }
    Motion_Turn(motion, angle, omega, alpha);
 80024ba:	ed97 1a00 	vldr	s2, [r7]
 80024be:	edd7 0a01 	vldr	s1, [r7, #4]
 80024c2:	ed97 0a02 	vldr	s0, [r7, #8]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff ffa6 	bl	8002418 <Motion_Turn>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	00000000 	.word	0x00000000

080024d8 <Motion_StopAfter>:
   *
   * Calling this with the robot stationary is undefined. Don't do that.
   *
   * @brief bring the robot to a halt after a specific distance
   */
void Motion_StopAfter(Motion *motion, float distance) {
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	ed2d 8b02 	vpush	{d8}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	ed87 0a00 	vstr	s0, [r7]
    Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), 0, Profile_GetAcceleration(&(motion->forward)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3324      	adds	r3, #36	@ 0x24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 faa6 	bl	8002a44 <Profile_GetSpeed>
 80024f8:	eeb0 8a40 	vmov.f32	s16, s0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3324      	adds	r3, #36	@ 0x24
 8002500:	4618      	mov	r0, r3
 8002502:	f000 faae 	bl	8002a62 <Profile_GetAcceleration>
 8002506:	eef0 7a40 	vmov.f32	s15, s0
 800250a:	eef0 1a67 	vmov.f32	s3, s15
 800250e:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 800252c <Motion_StopAfter+0x54>
 8002512:	eef0 0a48 	vmov.f32	s1, s16
 8002516:	ed97 0a00 	vldr	s0, [r7]
 800251a:	4620      	mov	r0, r4
 800251c:	f000 fa3a 	bl	8002994 <Profile_Move>
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	ecbd 8b02 	vpop	{d8}
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	00000000 	.word	0x00000000

08002530 <Motion_SwitchToNextMotionAfter>:

// Test
void Motion_SwitchToNextMotionAfter(Motion *motion, float distance){
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	ed2d 8b02 	vpush	{d8}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	ed87 0a00 	vstr	s0, [r7]
	Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), Profile_GetSpeed(&(motion->forward)), Profile_GetAcceleration(&(motion->forward)));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3324      	adds	r3, #36	@ 0x24
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fa7a 	bl	8002a44 <Profile_GetSpeed>
 8002550:	eeb0 8a40 	vmov.f32	s16, s0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3324      	adds	r3, #36	@ 0x24
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa73 	bl	8002a44 <Profile_GetSpeed>
 800255e:	eef0 8a40 	vmov.f32	s17, s0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3324      	adds	r3, #36	@ 0x24
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fa7b 	bl	8002a62 <Profile_GetAcceleration>
 800256c:	eef0 7a40 	vmov.f32	s15, s0
 8002570:	eef0 1a67 	vmov.f32	s3, s15
 8002574:	eeb0 1a68 	vmov.f32	s2, s17
 8002578:	eef0 0a48 	vmov.f32	s1, s16
 800257c:	ed97 0a00 	vldr	s0, [r7]
 8002580:	4620      	mov	r0, r4
 8002582:	f000 fa07 	bl	8002994 <Profile_Move>
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	ecbd 8b02 	vpop	{d8}
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	0000      	movs	r0, r0
 8002594:	0000      	movs	r0, r0
	...

08002598 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fd fff0 	bl	8000588 <__aeabi_f2d>
 80025a8:	a313      	add	r3, pc, #76	@ (adr r3, 80025f8 <limitPWM+0x60>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe fad3 	bl	8000b58 <__aeabi_dcmpgt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <limitPWM+0x24>
		return PWM_MAX;
 80025b8:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <limitPWM+0x58>)
 80025ba:	e00d      	b.n	80025d8 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fd ffe3 	bl	8000588 <__aeabi_f2d>
 80025c2:	a309      	add	r3, pc, #36	@ (adr r3, 80025e8 <limitPWM+0x50>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe faa8 	bl	8000b1c <__aeabi_dcmplt>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <limitPWM+0x3e>
		return -PWM_MAX;
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <limitPWM+0x5c>)
 80025d4:	e000      	b.n	80025d8 <limitPWM+0x40>
	return pwm;
 80025d6:	687b      	ldr	r3, [r7, #4]
}
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb0 0a67 	vmov.f32	s0, s15
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	70a3d70a 	.word	0x70a3d70a
 80025ec:	bfef0a3d 	.word	0xbfef0a3d
 80025f0:	3f7851ec 	.word	0x3f7851ec
 80025f4:	bf7851ec 	.word	0xbf7851ec
 80025f8:	70a3d70a 	.word	0x70a3d70a
 80025fc:	3fef0a3d 	.word	0x3fef0a3d

08002600 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 800260a:	edd7 7a01 	vldr	s15, [r7, #4]
 800260e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002616:	db13      	blt.n	8002640 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8002618:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <setMotorLPWM+0x84>)
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800261e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002622:	f7ff ffb9 	bl	8002598 <limitPWM>
 8002626:	eef0 7a40 	vmov.f32	s15, s0
 800262a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002688 <setMotorLPWM+0x88>
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002632:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <setMotorLPWM+0x84>)
 8002634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002638:	ee17 2a90 	vmov	r2, s15
 800263c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800263e:	e01c      	b.n	800267a <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002640:	edd7 7a01 	vldr	s15, [r7, #4]
 8002644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	d400      	bmi.n	8002650 <setMotorLPWM+0x50>
}
 800264e:	e014      	b.n	800267a <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <setMotorLPWM+0x84>)
 8002652:	2200      	movs	r2, #0
 8002654:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002656:	ed97 0a01 	vldr	s0, [r7, #4]
 800265a:	f7ff ff9d 	bl	8002598 <limitPWM>
 800265e:	eef0 7a40 	vmov.f32	s15, s0
 8002662:	eef1 7a67 	vneg.f32	s15, s15
 8002666:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002688 <setMotorLPWM+0x88>
 800266a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <setMotorLPWM+0x84>)
 8002670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002674:	ee17 2a90 	vmov	r2, s15
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40000400 	.word	0x40000400
 8002688:	45e0f800 	.word	0x45e0f800

0800268c <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002696:	edd7 7a01 	vldr	s15, [r7, #4]
 800269a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	db13      	blt.n	80026cc <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <setMotorRPWM+0x84>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80026aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80026ae:	f7ff ff73 	bl	8002598 <limitPWM>
 80026b2:	eef0 7a40 	vmov.f32	s15, s0
 80026b6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002714 <setMotorRPWM+0x88>
 80026ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026be:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <setMotorRPWM+0x84>)
 80026c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026c4:	ee17 2a90 	vmov	r2, s15
 80026c8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80026ca:	e01c      	b.n	8002706 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 80026cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	d400      	bmi.n	80026dc <setMotorRPWM+0x50>
}
 80026da:	e014      	b.n	8002706 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <setMotorRPWM+0x84>)
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 80026e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80026e6:	f7ff ff57 	bl	8002598 <limitPWM>
 80026ea:	eef0 7a40 	vmov.f32	s15, s0
 80026ee:	eef1 7a67 	vneg.f32	s15, s15
 80026f2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002714 <setMotorRPWM+0x88>
 80026f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fa:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <setMotorRPWM+0x84>)
 80026fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002700:	ee17 2a90 	vmov	r2, s15
 8002704:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40000400 	.word	0x40000400
 8002714:	45e0f800 	.word	0x45e0f800

08002718 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af04      	add	r7, sp, #16
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	460b      	mov	r3, r1
 8002724:	71bb      	strb	r3, [r7, #6]
 8002726:	4613      	mov	r3, r2
 8002728:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	b29a      	uxth	r2, r3
 800272e:	230a      	movs	r3, #10
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	2301      	movs	r3, #1
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	f107 030f 	add.w	r3, r7, #15
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2301      	movs	r3, #1
 800273e:	2180      	movs	r1, #128	@ 0x80
 8002740:	4819      	ldr	r0, [pc, #100]	@ (80027a8 <PCA9685_SetBit+0x90>)
 8002742:	f003 ff23 	bl	800658c <HAL_I2C_Mem_Read>
  if (Value == 0)
 8002746:	797b      	ldrb	r3, [r7, #5]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800274c:	79bb      	ldrb	r3, [r7, #6]
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	b25b      	sxtb	r3, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	b25a      	sxtb	r2, r3
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	b25b      	sxtb	r3, r3
 800275e:	4013      	ands	r3, r2
 8002760:	b25b      	sxtb	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e00a      	b.n	800277e <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8002768:	79bb      	ldrb	r3, [r7, #6]
 800276a:	2201      	movs	r2, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	b25a      	sxtb	r2, r3
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	b25b      	sxtb	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b25b      	sxtb	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	b29a      	uxth	r2, r3
 8002782:	230a      	movs	r3, #10
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	2301      	movs	r3, #1
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	f107 030f 	add.w	r3, r7, #15
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	2180      	movs	r1, #128	@ 0x80
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <PCA9685_SetBit+0x90>)
 8002796:	f003 fdff 	bl	8006398 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f002 f94a 	bl	8004a34 <HAL_Delay>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000334 	.word	0x20000334

080027ac <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af04      	add	r7, sp, #16
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80027bc:	4293      	cmp	r3, r2
 80027be:	d902      	bls.n	80027c6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80027c0:	2303      	movs	r3, #3
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e00c      	b.n	80027e0 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b18      	cmp	r3, #24
 80027ca:	d802      	bhi.n	80027d2 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 80027cc:	23ff      	movs	r3, #255	@ 0xff
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e006      	b.n	80027e0 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	031b      	lsls	r3, r3, #12
 80027d6:	4a12      	ldr	r2, [pc, #72]	@ (8002820 <PCA9685_SetPWMFrequency+0x74>)
 80027d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 80027e0:	2201      	movs	r2, #1
 80027e2:	2104      	movs	r1, #4
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7ff ff97 	bl	8002718 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 80027ea:	230a      	movs	r3, #10
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	f107 030f 	add.w	r3, r7, #15
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	22fe      	movs	r2, #254	@ 0xfe
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	4809      	ldr	r0, [pc, #36]	@ (8002824 <PCA9685_SetPWMFrequency+0x78>)
 8002800:	f003 fdca 	bl	8006398 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2104      	movs	r1, #4
 8002808:	2000      	movs	r0, #0
 800280a:	f7ff ff85 	bl	8002718 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 800280e:	2201      	movs	r2, #1
 8002810:	2107      	movs	r1, #7
 8002812:	2000      	movs	r0, #0
 8002814:	f7ff ff80 	bl	8002718 <PCA9685_SetBit>
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	017d7840 	.word	0x017d7840
 8002824:	20000334 	.word	0x20000334

08002828 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ffb9 	bl	80027ac <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800283a:	2201      	movs	r2, #1
 800283c:	2105      	movs	r1, #5
 800283e:	2000      	movs	r0, #0
 8002840:	f7ff ff6a 	bl	8002718 <PCA9685_SetBit>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	6178      	str	r0, [r7, #20]
 8002886:	ed87 0a04 	vstr	s0, [r7, #16]
 800288a:	edc7 0a03 	vstr	s1, [r7, #12]
 800288e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002892:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 8002896:	edd7 7a04 	vldr	s15, [r7, #16]
 800289a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a2:	d502      	bpl.n	80028aa <Profile_Start+0x2c>
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	e000      	b.n	80028ac <Profile_Start+0x2e>
 80028aa:	2201      	movs	r2, #1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d505      	bpl.n	80028ca <Profile_Start+0x4c>
 80028be:	edd7 7a04 	vldr	s15, [r7, #16]
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 80028ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	d503      	bpl.n	80028e4 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2203      	movs	r2, #3
 80028e0:	701a      	strb	r2, [r3, #0]
        return;
 80028e2:	e052      	b.n	800298a <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 80028e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80028e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	dd01      	ble.n	80028fa <Profile_Start+0x7c>
        final_speed = top_speed;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800290e:	ee07 3a90 	vmov	s15, r3
 8002912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002916:	edd7 7a03 	vldr	s15, [r7, #12]
 800291a:	eef0 7ae7 	vabs.f32	s15, s15
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002936:	edd7 7a02 	vldr	s15, [r7, #8]
 800293a:	eef0 7ae7 	vabs.f32	s15, s15
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8002948:	edd7 7a01 	vldr	s15, [r7, #4]
 800294c:	eef0 7ae7 	vabs.f32	s15, s15
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	edd3 7a04 	vldr	s15, [r3, #16]
 800295c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002968:	db07      	blt.n	800297a <Profile_Start+0xfc>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002970:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002978:	e001      	b.n	800297e <Profile_Start+0x100>
 800297a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
}
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6178      	str	r0, [r7, #20]
 800299c:	ed87 0a04 	vstr	s0, [r7, #16]
 80029a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80029a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80029a8:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 80029ac:	edd7 1a01 	vldr	s3, [r7, #4]
 80029b0:	ed97 1a02 	vldr	s2, [r7, #8]
 80029b4:	edd7 0a03 	vldr	s1, [r7, #12]
 80029b8:	ed97 0a04 	vldr	s0, [r7, #16]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7ff ff5e 	bl	800287e <Profile_Start>
    Profile_WaitUntilFinished(profile);
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f000 f804 	bl	80029d0 <Profile_WaitUntilFinished>
}
 80029c8:	bf00      	nop
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <Profile_WaitUntilFinished>:
    profile->speed = profile->target_speed;
    profile->state = PS_FINISHED;
}

// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 80029d8:	e002      	b.n	80029e0 <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 80029da:	2002      	movs	r0, #2
 80029dc:	f002 f82a 	bl	8004a34 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d1f7      	bne.n	80029da <Profile_WaitUntilFinished+0xa>
    }
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a20:	eef0 7ae7 	vabs.f32	s15, s15
 8002a24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002a36:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	ee07 3a90 	vmov	s15, r3
}
 8002a54:	eeb0 0a67 	vmov.f32	s0, s15
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <Profile_GetAcceleration>:

// Get the current acceleration
float Profile_GetAcceleration(const Profile *profile) {
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
    return profile->acceleration;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	ee07 3a90 	vmov	s15, r3
}
 8002a72:	eeb0 0a67 	vmov.f32	s0, s15
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <Profile_SetTargetSpeed>:
void Profile_SetSpeed(Profile *profile, float speed) {
    profile->speed = speed;
}

// Set the target speed
void Profile_SetTargetSpeed(Profile *profile, float speed) {
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	ed87 0a00 	vstr	s0, [r7]
    profile->target_speed = speed;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80b5 	beq.w	8002c1e <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002aba:	4b5b      	ldr	r3, [pc, #364]	@ (8002c28 <Profile_Update+0x188>)
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac4:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ace:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ad8:	eef0 7ae7 	vabs.f32	s15, s15
 8002adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d128      	bne.n	8002b40 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff80 	bl	80029f4 <Profile_GetBrakingDistance>
 8002af4:	eeb0 7a40 	vmov.f32	s14, s0
 8002af8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	d51c      	bpl.n	8002b40 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d10b      	bne.n	8002b34 <Profile_Update+0x94>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b32:	e002      	b.n	8002b3a <Profile_Update+0x9a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	d519      	bpl.n	8002b8a <Profile_Update+0xea>
        profile->speed += delta_v;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	dd28      	ble.n	8002bd2 <Profile_Update+0x132>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	e023      	b.n	8002bd2 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	dd18      	ble.n	8002bd2 <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	d503      	bpl.n	8002bd2 <Profile_Update+0x132>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <Profile_Update+0x188>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d011      	beq.n	8002c20 <Profile_Update+0x180>
 8002bfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c00:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	d508      	bpl.n	8002c20 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2203      	movs	r2, #3
 8002c12:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
 8002c1c:	e000      	b.n	8002c20 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002c1e:	bf00      	nop
    }

}
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	0800c550 	.word	0x0800c550

08002c2c <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e00c      	b.n	8002c54 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	18d4      	adds	r4, r2, r3
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fb03 	bl	8001250 <AnalogMux_ReadChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b09      	cmp	r3, #9
 8002c58:	d9ef      	bls.n	8002c3a <RAYKHA_ReadRaw+0xe>
    }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd90      	pop	{r4, r7, pc}

08002c64 <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]

		uint16_t sensor_values[RAYKHA_NUM_SENSORS];

		// Initialize calibration data
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c76:	e013      	b.n	8002ca0 <RAYKHA_Calibrate+0x3c>
		{
			calibration->min_values[i] = 0xFFFF;  // Max possible value
 8002c78:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002c82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			calibration->max_values[i] = 0;       // Min possible value
 8002c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	2200      	movs	r2, #0
 8002c94:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	d9e7      	bls.n	8002c78 <RAYKHA_Calibrate+0x14>
		}

		calibration->line_type = line_type;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    	for(uint8_t i = 0; i < 100; i++){
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002cb6:	e0ad      	b.n	8002e14 <RAYKHA_Calibrate+0x1b0>
    		// Take multiple samples for more accurate calibration
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002cbe:	e053      	b.n	8002d68 <RAYKHA_Calibrate+0x104>
			{
				// Read raw sensor values
				RAYKHA_ReadRaw(sensor_values);
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ffb1 	bl	8002c2c <RAYKHA_ReadRaw>

				// Update min and max values
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002cd0:	e03e      	b.n	8002d50 <RAYKHA_Calibrate+0xec>
				{
					if (sensor_values[i] < calibration->min_values[i])
 8002cd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	3328      	adds	r3, #40	@ 0x28
 8002cda:	443b      	add	r3, r7
 8002cdc:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8002ce0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d20b      	bcs.n	8002d06 <RAYKHA_Calibrate+0xa2>
					{
						calibration->min_values[i] = sensor_values[i];
 8002cee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002cf2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	3328      	adds	r3, #40	@ 0x28
 8002cfa:	443b      	add	r3, r7
 8002cfc:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					}
					if (sensor_values[i] > calibration->max_values[i])
 8002d06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	3328      	adds	r3, #40	@ 0x28
 8002d0e:	443b      	add	r3, r7
 8002d10:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8002d14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	889b      	ldrh	r3, [r3, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90f      	bls.n	8002d46 <RAYKHA_Calibrate+0xe2>
					{
						calibration->max_values[i] = sensor_values[i];
 8002d26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d2a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	3328      	adds	r3, #40	@ 0x28
 8002d32:	443b      	add	r3, r7
 8002d34:	f833 0c1c 	ldrh.w	r0, [r3, #-28]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	f101 0308 	add.w	r3, r1, #8
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	4602      	mov	r2, r0
 8002d44:	809a      	strh	r2, [r3, #4]
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002d46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002d50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	d9bc      	bls.n	8002cd2 <RAYKHA_Calibrate+0x6e>
					}
				}

				// Short delay between samples
				HAL_Delay(10);
 8002d58:	200a      	movs	r0, #10
 8002d5a:	f001 fe6b 	bl	8004a34 <HAL_Delay>
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8002d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d62:	3301      	adds	r3, #1
 8002d64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002d68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d9a7      	bls.n	8002cc0 <RAYKHA_Calibrate+0x5c>
			}

			// Add small margins to avoid edge cases
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d76:	e044      	b.n	8002e02 <RAYKHA_Calibrate+0x19e>
			{
				if (calibration->min_values[i] > 20)
 8002d78:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d82:	2b14      	cmp	r3, #20
 8002d84:	d90c      	bls.n	8002da0 <RAYKHA_Calibrate+0x13c>
					calibration->min_values[i] -= 20;
 8002d86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d90:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d94:	3b14      	subs	r3, #20
 8002d96:	b299      	uxth	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002d9e:	e005      	b.n	8002dac <RAYKHA_Calibrate+0x148>
				else
					calibration->min_values[i] = 0;
 8002da0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2100      	movs	r1, #0
 8002da8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if (calibration->max_values[i] < 4075)
 8002dac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	3308      	adds	r3, #8
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	889b      	ldrh	r3, [r3, #4]
 8002dba:	f640 72ea 	movw	r2, #4074	@ 0xfea
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d811      	bhi.n	8002de6 <RAYKHA_Calibrate+0x182>
					calibration->max_values[i] += 20;
 8002dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	889a      	ldrh	r2, [r3, #4]
 8002dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dd4:	3214      	adds	r2, #20
 8002dd6:	b291      	uxth	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	460a      	mov	r2, r1
 8002de2:	809a      	strh	r2, [r3, #4]
 8002de4:	e008      	b.n	8002df8 <RAYKHA_Calibrate+0x194>
				else
					calibration->max_values[i] = 4095;
 8002de6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	3308      	adds	r3, #8
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002df6:	809a      	strh	r2, [r3, #4]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002df8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e06:	2b09      	cmp	r3, #9
 8002e08:	d9b6      	bls.n	8002d78 <RAYKHA_Calibrate+0x114>
    	for(uint8_t i = 0; i < 100; i++){
 8002e0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002e14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e18:	2b63      	cmp	r3, #99	@ 0x63
 8002e1a:	f67f af4d 	bls.w	8002cb8 <RAYKHA_Calibrate+0x54>
			}
    	}

}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	3728      	adds	r7, #40	@ 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fef8 	bl	8002c2c <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e05a      	b.n	8002ef8 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	3320      	adds	r3, #32
 8002e48:	443b      	add	r3, r7
 8002e4a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002e4e:	7ff9      	ldrb	r1, [r7, #31]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d206      	bcs.n	8002e68 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	2200      	movs	r2, #0
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	e044      	b.n	8002ef2 <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8002e68:	7ffb      	ldrb	r3, [r7, #31]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	3320      	adds	r3, #32
 8002e6e:	443b      	add	r3, r7
 8002e70:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	3308      	adds	r3, #8
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	440b      	add	r3, r1
 8002e7e:	889b      	ldrh	r3, [r3, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d907      	bls.n	8002e94 <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	e02e      	b.n	8002ef2 <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8002e94:	7ffb      	ldrb	r3, [r7, #31]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3320      	adds	r3, #32
 8002e9a:	443b      	add	r3, r7
 8002e9c:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8002ea0:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8002ea8:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	3308      	adds	r3, #8
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	18d4      	adds	r4, r2, r3
 8002ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	462a      	mov	r2, r5
 8002ec6:	f000 f879 	bl	8002fbc <map_range>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	440b      	add	r3, r1
 8002eea:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	d9a1      	bls.n	8002e42 <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdb0      	pop	{r4, r5, r7, pc}

08002f08 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73bb      	strb	r3, [r7, #14]
 8002f22:	e01c      	b.n	8002f5e <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8002f24:	7bbb      	ldrb	r3, [r7, #14]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8002f30:	89bb      	ldrh	r3, [r7, #12]
 8002f32:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f34:	d901      	bls.n	8002f3a <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8002f3a:	89bb      	ldrh	r3, [r7, #12]
 8002f3c:	7bba      	ldrb	r2, [r7, #14]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
        sum += value;
 8002f50:	89bb      	ldrh	r3, [r7, #12]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f58:	7bbb      	ldrb	r3, [r7, #14]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	73bb      	strb	r3, [r7, #14]
 8002f5e:	7bbb      	ldrb	r3, [r7, #14]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d9df      	bls.n	8002f24 <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <RAYKHA_GetLinePosition+0x68>
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b63      	cmp	r3, #99	@ 0x63
 8002f6e:	d802      	bhi.n	8002f76 <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	e003      	b.n	8002f7e <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffb6 	bl	8002f08 <RAYKHA_GetLinePosition>
 8002f9c:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d102      	bne.n	8002fac <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 8002fa6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002faa:	e003      	b.n	8002fb4 <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8002fb2:	3b14      	subs	r3, #20
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8002fbc:	b490      	push	{r4, r7}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	80fb      	strh	r3, [r7, #6]
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80bb      	strh	r3, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	807b      	strh	r3, [r7, #2]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d801      	bhi.n	8002fe6 <map_range+0x2a>
 8002fe2:	883b      	ldrh	r3, [r7, #0]
 8002fe4:	e01d      	b.n	8003022 <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	88bb      	ldrh	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	8b39      	ldrh	r1, [r7, #24]
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	1a8a      	subs	r2, r1, r2
 8002ff2:	fb03 f202 	mul.w	r2, r3, r2
 8002ff6:	8879      	ldrh	r1, [r7, #2]
 8002ff8:	88bb      	ldrh	r3, [r7, #4]
 8002ffa:	1acb      	subs	r3, r1, r3
 8002ffc:	fb92 f2f3 	sdiv	r2, r2, r3
 8003000:	883b      	ldrh	r3, [r7, #0]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 8003006:	883b      	ldrh	r3, [r7, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	429a      	cmp	r2, r3
 800300c:	da01      	bge.n	8003012 <map_range+0x56>
 800300e:	883b      	ldrh	r3, [r7, #0]
 8003010:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 8003012:	8b3b      	ldrh	r3, [r7, #24]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	429a      	cmp	r2, r3
 8003018:	dd01      	ble.n	800301e <map_range+0x62>
 800301a:	8b3b      	ldrh	r3, [r7, #24]
 800301c:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	b29b      	uxth	r3, r3
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bc90      	pop	{r4, r7}
 800302a:	4770      	bx	lr

0800302c <HandleLineDetection>:

/**
 * @brief Handle line detection data from Raspberry Pi
 * @param data Line detection data
 */
void HandleLineDetection(uint8_t *data) {
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Extract line position and orientation */
  int8_t linePosition = (int8_t)data[0]; // Negative = left, Positive = right, 0 = center
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	73fb      	strb	r3, [r7, #15]
  uint8_t lineAngle = data[1];           // Line angle in degrees
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	73bb      	strb	r3, [r7, #14]
    //TurnRight();
  } else {
    /* Go straight */
    //MoveForward();
  }
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HandleGridPosition>:

/**
 * @brief Handle grid position data from Raspberry Pi
 * @param data Grid position data
 */
void HandleGridPosition(uint8_t *data) {
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Extract grid coordinates */
  uint8_t gridX = data[0];
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	73fb      	strb	r3, [r7, #15]
  uint8_t gridY = data[1];
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	73bb      	strb	r3, [r7, #14]
  uint8_t orientation = data[2]; // 0=N, 1=E, 2=S, 3=W
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	789b      	ldrb	r3, [r3, #2]
 8003064:	737b      	strb	r3, [r7, #13]

  /* Use grid position for navigation */
  //NavigateGrid(gridX, gridY, orientation);
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HandleColorDetection>:

/**
 * @brief Handle color detection data from Raspberry Pi
 * @param data Color detection data
 */
void HandleColorDetection(uint8_t *data) {
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Extract color information */
  uint8_t colorId = data[0]; // 0=Unknown, 1=Red, 2=Green, 3=Blue, etc.
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	73fb      	strb	r3, [r7, #15]

  /* React based on color */
  switch (colorId) {
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d006      	beq.n	8003094 <HandleColorDetection+0x22>
 8003086:	2b03      	cmp	r3, #3
 8003088:	dc06      	bgt.n	8003098 <HandleColorDetection+0x26>
 800308a:	2b01      	cmp	r3, #1
 800308c:	d006      	beq.n	800309c <HandleColorDetection+0x2a>
 800308e:	2b02      	cmp	r3, #2
 8003090:	d006      	beq.n	80030a0 <HandleColorDetection+0x2e>
    case 3: /* Blue */
      //HandleBlueColor();
      break;
    default:
      /* Unknown color */
      break;
 8003092:	e001      	b.n	8003098 <HandleColorDetection+0x26>
      break;
 8003094:	bf00      	nop
 8003096:	e004      	b.n	80030a2 <HandleColorDetection+0x30>
      break;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <HandleColorDetection+0x30>
      break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HandleColorDetection+0x30>
      break;
 80030a0:	bf00      	nop
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <RPI_GetLineColor>:


LineColor RPI_GetLineColor(uint8_t column, uint8_t row){
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	460a      	mov	r2, r1
 80030b8:	71fb      	strb	r3, [r7, #7]
 80030ba:	4613      	mov	r3, r2
 80030bc:	71bb      	strb	r3, [r7, #6]
	// Need seperate code to handle color detection
	// use this to acces a global vairable

	if(column == 0 && row == 0){
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d104      	bne.n	80030ce <RPI_GetLineColor+0x20>
 80030c4:	79bb      	ldrb	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <RPI_GetLineColor+0x20>
		return GREEN;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <RPI_GetLineColor+0x62>
	}
	if(column == 1 && row == 1){
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d104      	bne.n	80030de <RPI_GetLineColor+0x30>
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <RPI_GetLineColor+0x30>
		return GREEN;
 80030da:	2301      	movs	r3, #1
 80030dc:	e018      	b.n	8003110 <RPI_GetLineColor+0x62>
	}
	if(column == 2 && row == 2){
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d104      	bne.n	80030ee <RPI_GetLineColor+0x40>
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d101      	bne.n	80030ee <RPI_GetLineColor+0x40>
		return GREEN;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e010      	b.n	8003110 <RPI_GetLineColor+0x62>
	}
	if(column == 3 && row == 0){
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d104      	bne.n	80030fe <RPI_GetLineColor+0x50>
 80030f4:	79bb      	ldrb	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <RPI_GetLineColor+0x50>
		return GREEN;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e008      	b.n	8003110 <RPI_GetLineColor+0x62>
	}
	if(column == 4 && row == 1){
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d104      	bne.n	800310e <RPI_GetLineColor+0x60>
 8003104:	79bb      	ldrb	r3, [r7, #6]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <RPI_GetLineColor+0x60>
		return GREEN;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <RPI_GetLineColor+0x62>
	}
	return WHITE;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <RPI_GetBallColor>:

BallColor RPI_GetBallColor(uint8_t column, uint8_t row){
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	460a      	mov	r2, r1
 8003126:	71fb      	strb	r3, [r7, #7]
 8003128:	4613      	mov	r3, r2
 800312a:	71bb      	strb	r3, [r7, #6]
	// Need seperate code to handle color detection
	// use this to acces a global vairable

	if(column == 0 && row == 0){
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d104      	bne.n	800313c <RPI_GetBallColor+0x20>
 8003132:	79bb      	ldrb	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <RPI_GetBallColor+0x20>
		return WHITE_BALL;
 8003138:	2300      	movs	r3, #0
 800313a:	e020      	b.n	800317e <RPI_GetBallColor+0x62>
	}
	if(column == 1 && row == 1){
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d104      	bne.n	800314c <RPI_GetBallColor+0x30>
 8003142:	79bb      	ldrb	r3, [r7, #6]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <RPI_GetBallColor+0x30>
		return YELLOW_BALL;
 8003148:	2301      	movs	r3, #1
 800314a:	e018      	b.n	800317e <RPI_GetBallColor+0x62>
	}
	if(column == 2 && row == 2){
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d104      	bne.n	800315c <RPI_GetBallColor+0x40>
 8003152:	79bb      	ldrb	r3, [r7, #6]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d101      	bne.n	800315c <RPI_GetBallColor+0x40>
		return YELLOW_BALL;
 8003158:	2301      	movs	r3, #1
 800315a:	e010      	b.n	800317e <RPI_GetBallColor+0x62>
	}
	if(column == 3 && row == 0){
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d104      	bne.n	800316c <RPI_GetBallColor+0x50>
 8003162:	79bb      	ldrb	r3, [r7, #6]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <RPI_GetBallColor+0x50>
		return WHITE_BALL;
 8003168:	2300      	movs	r3, #0
 800316a:	e008      	b.n	800317e <RPI_GetBallColor+0x62>
	}
	if(column == 4 && row == 1){
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d104      	bne.n	800317c <RPI_GetBallColor+0x60>
 8003172:	79bb      	ldrb	r3, [r7, #6]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <RPI_GetBallColor+0x60>
		return WHITE_BALL;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <RPI_GetBallColor+0x62>
	}
	return WHITE_BALL;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <Robot_LineFollowUntillJunction>:




//------------------------------------------------------------------------------//
JunctionType Robot_LineFollowUntillJunction(){
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 8003190:	2006      	movs	r0, #6
 8003192:	f000 fa4f 	bl	8003634 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 8003196:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <Robot_LineFollowUntillJunction+0x74>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <Robot_LineFollowUntillJunction+0x74>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	ee07 3a10 	vmov	s14, r3
 80031aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <Robot_LineFollowUntillJunction+0x78>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	ee06 3a90 	vmov	s13, r3
 80031b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80031ba:	eef0 1a66 	vmov.f32	s3, s13
 80031be:	eeb0 1a47 	vmov.f32	s2, s14
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003208 <Robot_LineFollowUntillJunction+0x7c>
 80031ca:	4810      	ldr	r0, [pc, #64]	@ (800320c <Robot_LineFollowUntillJunction+0x80>)
 80031cc:	f7ff f8ea 	bl	80023a4 <Motion_StartMove>
	junction = STRAIGHT_LINE;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <Robot_LineFollowUntillJunction+0x84>)
 80031d2:	2204      	movs	r2, #4
 80031d4:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <Robot_LineFollowUntillJunction+0x84>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d100      	bne.n	80031e0 <Robot_LineFollowUntillJunction+0x54>
 80031de:	e7fa      	b.n	80031d6 <Robot_LineFollowUntillJunction+0x4a>
			break;
 80031e0:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80031e2:	2003      	movs	r0, #3
 80031e4:	f000 fa26 	bl	8003634 <set_steering_mode>
	Motion_StopAfter(&motion, 45);
 80031e8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003214 <Robot_LineFollowUntillJunction+0x88>
 80031ec:	4807      	ldr	r0, [pc, #28]	@ (800320c <Robot_LineFollowUntillJunction+0x80>)
 80031ee:	f7ff f973 	bl	80024d8 <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 80031f2:	4806      	ldr	r0, [pc, #24]	@ (800320c <Robot_LineFollowUntillJunction+0x80>)
 80031f4:	f7ff f87e 	bl	80022f4 <Motion_ResetDriveSystem>
	return junction;
 80031f8:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <Robot_LineFollowUntillJunction+0x84>)
 80031fa:	781b      	ldrb	r3, [r3, #0]

}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	0800c57c 	.word	0x0800c57c
 8003204:	0800c580 	.word	0x0800c580
 8003208:	44bb8000 	.word	0x44bb8000
 800320c:	200005c8 	.word	0x200005c8
 8003210:	200006ec 	.word	0x200006ec
 8003214:	42340000 	.word	0x42340000

08003218 <Robot_LineFollowUntillJunctionAndNotStop>:
JunctionType Robot_LineFollowUntillJunctionAndNotStop(){
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 800321c:	2006      	movs	r0, #6
 800321e:	f000 fa09 	bl	8003634 <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322e:	4b16      	ldr	r3, [pc, #88]	@ (8003288 <Robot_LineFollowUntillJunctionAndNotStop+0x70>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	ee07 3a10 	vmov	s14, r3
 8003236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800323a:	4b14      	ldr	r3, [pc, #80]	@ (800328c <Robot_LineFollowUntillJunctionAndNotStop+0x74>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	ee06 3a90 	vmov	s13, r3
 8003242:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003246:	eef0 1a66 	vmov.f32	s3, s13
 800324a:	eeb0 1a47 	vmov.f32	s2, s14
 800324e:	eef0 0a67 	vmov.f32	s1, s15
 8003252:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8003290 <Robot_LineFollowUntillJunctionAndNotStop+0x78>
 8003256:	480f      	ldr	r0, [pc, #60]	@ (8003294 <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 8003258:	f7ff f8a4 	bl	80023a4 <Motion_StartMove>
	junction = STRAIGHT_LINE;
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 800325e:	2204      	movs	r2, #4
 8003260:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 8003262:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d100      	bne.n	800326c <Robot_LineFollowUntillJunctionAndNotStop+0x54>
 800326a:	e7fa      	b.n	8003262 <Robot_LineFollowUntillJunctionAndNotStop+0x4a>
			break;
 800326c:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 800326e:	2003      	movs	r0, #3
 8003270:	f000 f9e0 	bl	8003634 <set_steering_mode>
	//Motion_StopAfter(&motion, 45);
	Motion_SwitchToNextMotionAfter(&motion, 45);
 8003274:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800329c <Robot_LineFollowUntillJunctionAndNotStop+0x84>
 8003278:	4806      	ldr	r0, [pc, #24]	@ (8003294 <Robot_LineFollowUntillJunctionAndNotStop+0x7c>)
 800327a:	f7ff f959 	bl	8002530 <Motion_SwitchToNextMotionAfter>

	//Motion_ResetDriveSystem(&motion);
	return junction;
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <Robot_LineFollowUntillJunctionAndNotStop+0x80>)
 8003280:	781b      	ldrb	r3, [r3, #0]

}
 8003282:	4618      	mov	r0, r3
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	0800c57c 	.word	0x0800c57c
 800328c:	0800c580 	.word	0x0800c580
 8003290:	44bb8000 	.word	0x44bb8000
 8003294:	200005c8 	.word	0x200005c8
 8003298:	200006ec 	.word	0x200006ec
 800329c:	42340000 	.word	0x42340000

080032a0 <Robot_FollowLineGivenDistance>:


void Robot_FollowLineGivenDistance(int distnace){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80032a8:	2006      	movs	r0, #6
 80032aa:	f000 f9c3 	bl	8003634 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, 0    , FORWARD_ACCELERATION_1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b8:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <Robot_FollowLineGivenDistance+0x5c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	ee07 3a10 	vmov	s14, r3
 80032c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80032c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <Robot_FollowLineGivenDistance+0x60>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	ee06 3a90 	vmov	s13, r3
 80032cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80032d0:	eef0 1a66 	vmov.f32	s3, s13
 80032d4:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8003304 <Robot_FollowLineGivenDistance+0x64>
 80032d8:	eef0 0a47 	vmov.f32	s1, s14
 80032dc:	eeb0 0a67 	vmov.f32	s0, s15
 80032e0:	4809      	ldr	r0, [pc, #36]	@ (8003308 <Robot_FollowLineGivenDistance+0x68>)
 80032e2:	f7ff f87c 	bl	80023de <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	set_steering_mode(STEERING_OFF);
 80032e6:	2003      	movs	r0, #3
 80032e8:	f000 f9a4 	bl	8003634 <set_steering_mode>
	Motion_ResetDriveSystem(&motion);
 80032ec:	4806      	ldr	r0, [pc, #24]	@ (8003308 <Robot_FollowLineGivenDistance+0x68>)
 80032ee:	f7ff f801 	bl	80022f4 <Motion_ResetDriveSystem>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	0800c584 	.word	0x0800c584
 8003300:	0800c588 	.word	0x0800c588
 8003304:	00000000 	.word	0x00000000
 8003308:	200005c8 	.word	0x200005c8

0800330c <Robot_FollowLineGivenDistanceandNotStop>:

void Robot_FollowLineGivenDistanceandNotStop(int distnace){
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 8003314:	2006      	movs	r0, #6
 8003316:	f000 f98d 	bl	8003634 <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, FORWARD_SPEED_1    , FORWARD_ACCELERATION_1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	ee07 3a10 	vmov	s14, r3
 800332c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003330:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <Robot_FollowLineGivenDistanceandNotStop+0x5c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	ee06 3a90 	vmov	s13, r3
 8003338:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <Robot_FollowLineGivenDistanceandNotStop+0x60>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	ee06 3a10 	vmov	s12, r3
 8003344:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003348:	eef0 1a46 	vmov.f32	s3, s12
 800334c:	eeb0 1a66 	vmov.f32	s2, s13
 8003350:	eef0 0a47 	vmov.f32	s1, s14
 8003354:	eeb0 0a67 	vmov.f32	s0, s15
 8003358:	4805      	ldr	r0, [pc, #20]	@ (8003370 <Robot_FollowLineGivenDistanceandNotStop+0x64>)
 800335a:	f7ff f840 	bl	80023de <Motion_Move>
	//Motion_ResetDriveSystem(&motion);
	//set_steering_mode(STEERING_OFF);
	//Motion_ResetDriveSystem(&motion);
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	0800c584 	.word	0x0800c584
 800336c:	0800c588 	.word	0x0800c588
 8003370:	200005c8 	.word	0x200005c8

08003374 <Robot_MoveForwardUntillLine>:

JunctionType Robot_MoveForwardUntillLine(){
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_OFF_READLINE);
 8003378:	2004      	movs	r0, #4
 800337a:	f000 f95b 	bl	8003634 <set_steering_mode>
	Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, FORWARD_SPEED_1, FORWARD_ACCELERATION_1);
 800337e:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <Robot_MoveForwardUntillLine+0x74>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800338a:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <Robot_MoveForwardUntillLine+0x74>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	ee07 3a10 	vmov	s14, r3
 8003392:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <Robot_MoveForwardUntillLine+0x78>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	ee06 3a90 	vmov	s13, r3
 800339e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80033a2:	eef0 1a66 	vmov.f32	s3, s13
 80033a6:	eeb0 1a47 	vmov.f32	s2, s14
 80033aa:	eef0 0a67 	vmov.f32	s1, s15
 80033ae:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80033f0 <Robot_MoveForwardUntillLine+0x7c>
 80033b2:	4810      	ldr	r0, [pc, #64]	@ (80033f4 <Robot_MoveForwardUntillLine+0x80>)
 80033b4:	f7fe fff6 	bl	80023a4 <Motion_StartMove>
	junction = NO_LINE;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <Robot_MoveForwardUntillLine+0x84>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != NO_LINE){
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <Robot_MoveForwardUntillLine+0x84>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d100      	bne.n	80033c8 <Robot_MoveForwardUntillLine+0x54>
 80033c6:	e7fa      	b.n	80033be <Robot_MoveForwardUntillLine+0x4a>
			break;
 80033c8:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80033ca:	2003      	movs	r0, #3
 80033cc:	f000 f932 	bl	8003634 <set_steering_mode>
	Motion_StopAfter(&motion, 60);
 80033d0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80033fc <Robot_MoveForwardUntillLine+0x88>
 80033d4:	4807      	ldr	r0, [pc, #28]	@ (80033f4 <Robot_MoveForwardUntillLine+0x80>)
 80033d6:	f7ff f87f 	bl	80024d8 <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 80033da:	4806      	ldr	r0, [pc, #24]	@ (80033f4 <Robot_MoveForwardUntillLine+0x80>)
 80033dc:	f7fe ff8a 	bl	80022f4 <Motion_ResetDriveSystem>
	return junction;
 80033e0:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <Robot_MoveForwardUntillLine+0x84>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	0800c584 	.word	0x0800c584
 80033ec:	0800c588 	.word	0x0800c588
 80033f0:	44bb8000 	.word	0x44bb8000
 80033f4:	200005c8 	.word	0x200005c8
 80033f8:	200006ec 	.word	0x200006ec
 80033fc:	42700000 	.word	0x42700000

08003400 <Robot_TurnRight90Inplace>:
	set_steering_mode(STEERING_OFF);
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, FORWARD_SPEED_1, FORWARD_ACCELERATION_1);
	Motion_ResetDriveSystem(&motion);
}

void Robot_TurnRight90Inplace(){
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003404:	4b11      	ldr	r3, [pc, #68]	@ (800344c <Robot_TurnRight90Inplace+0x4c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fb13 	bl	8004a34 <HAL_Delay>
	Motion_SpinTurn(&motion, -90, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 800340e:	4b10      	ldr	r3, [pc, #64]	@ (8003450 <Robot_TurnRight90Inplace+0x50>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341a:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <Robot_TurnRight90Inplace+0x54>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	ee07 3a10 	vmov	s14, r3
 8003422:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003426:	eeb0 1a47 	vmov.f32	s2, s14
 800342a:	eef0 0a67 	vmov.f32	s1, s15
 800342e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003458 <Robot_TurnRight90Inplace+0x58>
 8003432:	480a      	ldr	r0, [pc, #40]	@ (800345c <Robot_TurnRight90Inplace+0x5c>)
 8003434:	f7ff f820 	bl	8002478 <Motion_SpinTurn>

	HAL_Delay(MOTION_DELAY);
 8003438:	4b04      	ldr	r3, [pc, #16]	@ (800344c <Robot_TurnRight90Inplace+0x4c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f001 faf9 	bl	8004a34 <HAL_Delay>
	Motion_ResetDriveSystem(&motion);
 8003442:	4806      	ldr	r0, [pc, #24]	@ (800345c <Robot_TurnRight90Inplace+0x5c>)
 8003444:	f7fe ff56 	bl	80022f4 <Motion_ResetDriveSystem>
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	0800c594 	.word	0x0800c594
 8003450:	0800c58c 	.word	0x0800c58c
 8003454:	0800c590 	.word	0x0800c590
 8003458:	c2b40000 	.word	0xc2b40000
 800345c:	200005c8 	.word	0x200005c8

08003460 <Robot_TurnLeft90Inplace>:

void Robot_TurnLeft90Inplace(){
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <Robot_TurnLeft90Inplace+0x4c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f001 fae3 	bl	8004a34 <HAL_Delay>
	Motion_SpinTurn(&motion, 90, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 800346e:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <Robot_TurnLeft90Inplace+0x50>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347a:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <Robot_TurnLeft90Inplace+0x54>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	ee07 3a10 	vmov	s14, r3
 8003482:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003486:	eeb0 1a47 	vmov.f32	s2, s14
 800348a:	eef0 0a67 	vmov.f32	s1, s15
 800348e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80034b8 <Robot_TurnLeft90Inplace+0x58>
 8003492:	480a      	ldr	r0, [pc, #40]	@ (80034bc <Robot_TurnLeft90Inplace+0x5c>)
 8003494:	f7fe fff0 	bl	8002478 <Motion_SpinTurn>

	HAL_Delay(MOTION_DELAY);
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <Robot_TurnLeft90Inplace+0x4c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fac9 	bl	8004a34 <HAL_Delay>
	Motion_ResetDriveSystem(&motion);
 80034a2:	4806      	ldr	r0, [pc, #24]	@ (80034bc <Robot_TurnLeft90Inplace+0x5c>)
 80034a4:	f7fe ff26 	bl	80022f4 <Motion_ResetDriveSystem>
}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	0800c594 	.word	0x0800c594
 80034b0:	0800c58c 	.word	0x0800c58c
 80034b4:	0800c590 	.word	0x0800c590
 80034b8:	42b40000 	.word	0x42b40000
 80034bc:	200005c8 	.word	0x200005c8

080034c0 <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 80034c6:	4b23      	ldr	r3, [pc, #140]	@ (8003554 <DetectJunction+0x94>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e00e      	b.n	80034f0 <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 80034d2:	4a21      	ldr	r2, [pc, #132]	@ (8003558 <DetectJunction+0x98>)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034da:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80034de:	d904      	bls.n	80034ea <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 80034e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003554 <DetectJunction+0x94>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003554 <DetectJunction+0x94>)
 80034e8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b09      	cmp	r3, #9
 80034f4:	dded      	ble.n	80034d2 <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 80034f6:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <DetectJunction+0x98>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 80034fc:	4b16      	ldr	r3, [pc, #88]	@ (8003558 <DetectJunction+0x98>)
 80034fe:	8a5b      	ldrh	r3, [r3, #18]
 8003500:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 8003502:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <DetectJunction+0x94>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b05      	cmp	r3, #5
 8003508:	dd17      	ble.n	800353a <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003510:	dd05      	ble.n	800351e <DetectJunction+0x5e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003518:	dd01      	ble.n	800351e <DetectJunction+0x5e>
			return T_JUNCTION;
 800351a:	2303      	movs	r3, #3
 800351c:	e014      	b.n	8003548 <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003524:	dd01      	ble.n	800352a <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 8003526:	2301      	movs	r3, #1
 8003528:	e00e      	b.n	8003548 <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003530:	dd01      	ble.n	8003536 <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 8003532:	2302      	movs	r3, #2
 8003534:	e008      	b.n	8003548 <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 8003536:	2304      	movs	r3, #4
 8003538:	e006      	b.n	8003548 <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <DetectJunction+0x94>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <DetectJunction+0x86>
		return NO_LINE;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 8003546:	2304      	movs	r3, #4
	}
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	200006f0 	.word	0x200006f0
 8003558:	200006d4 	.word	0x200006d4

0800355c <get_steering_feedback>:
	rfs.raw = 0;
	rws.raw = 0;
}


float get_steering_feedback() {
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 8003560:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <get_steering_feedback+0x18>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	ee07 3a90 	vmov	s15, r3
}
 8003568:	eeb0 0a67 	vmov.f32	s0, s15
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	200006a8 	.word	0x200006a8

08003578 <CalculateSteeringAdjustment>:




/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
    float pTerm = STEERING_KP * m_cross_track_error;
 800357e:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <CalculateSteeringAdjustment+0xa0>)
 8003580:	ed93 7a00 	vldr	s14, [r3]
 8003584:	4b25      	ldr	r3, [pc, #148]	@ (800361c <CalculateSteeringAdjustment+0xa4>)
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a03 	vstr	s15, [r7, #12]
    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 8003592:	4b22      	ldr	r3, [pc, #136]	@ (800361c <CalculateSteeringAdjustment+0xa4>)
 8003594:	ed93 7a00 	vldr	s14, [r3]
 8003598:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <CalculateSteeringAdjustment+0xa8>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035a2:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <CalculateSteeringAdjustment+0xac>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ac:	edc7 7a02 	vstr	s15, [r7, #8]
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <CalculateSteeringAdjustment+0xb0>)
 80035b2:	ed93 7a00 	vldr	s14, [r3]
 80035b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	ed97 7a03 	vldr	s14, [r7, #12]
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <CalculateSteeringAdjustment+0xb4>)
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	eef1 7a67 	vneg.f32	s15, s15
 80035d4:	eef0 0a67 	vmov.f32	s1, s15
 80035d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80035dc:	f008 ff4e 	bl	800c47c <fmaxf>
 80035e0:	eeb0 7a40 	vmov.f32	s14, s0
 80035e4:	4b11      	ldr	r3, [pc, #68]	@ (800362c <CalculateSteeringAdjustment+0xb4>)
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	eef0 0a67 	vmov.f32	s1, s15
 80035ee:	eeb0 0a47 	vmov.f32	s0, s14
 80035f2:	f008 ff60 	bl	800c4b6 <fminf>
 80035f6:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 80035fa:	4b08      	ldr	r3, [pc, #32]	@ (800361c <CalculateSteeringAdjustment+0xa4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a08      	ldr	r2, [pc, #32]	@ (8003620 <CalculateSteeringAdjustment+0xa8>)
 8003600:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 8003602:	4a0b      	ldr	r2, [pc, #44]	@ (8003630 <CalculateSteeringAdjustment+0xb8>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6013      	str	r3, [r2, #0]
    return adjustment;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	ee07 3a90 	vmov	s15, r3
}
 800360e:	eeb0 0a67 	vmov.f32	s0, s15
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	0800c570 	.word	0x0800c570
 800361c:	200006a4 	.word	0x200006a4
 8003620:	200006a0 	.word	0x200006a0
 8003624:	0800c574 	.word	0x0800c574
 8003628:	0800c54c 	.word	0x0800c54c
 800362c:	0800c578 	.word	0x0800c578
 8003630:	200006a8 	.word	0x200006a8

08003634 <set_steering_mode>:

void set_steering_mode(uint8_t mode){
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
	m_last_steering_error = m_cross_track_error;
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <set_steering_mode+0x2c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <set_steering_mode+0x30>)
 8003644:	6013      	str	r3, [r2, #0]
	m_steering_adjustment = 0;
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <set_steering_mode+0x34>)
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
	g_steering_mode = mode;
 800364e:	4a07      	ldr	r2, [pc, #28]	@ (800366c <set_steering_mode+0x38>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	7013      	strb	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	200006a4 	.word	0x200006a4
 8003664:	200006a0 	.word	0x200006a0
 8003668:	200006a8 	.word	0x200006a8
 800366c:	20000000 	.word	0x20000000

08003670 <Sensors_Update>:
	    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}


/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	int error = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 800367a:	4b3e      	ldr	r3, [pc, #248]	@ (8003774 <Sensors_Update+0x104>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b06      	cmp	r3, #6
 8003682:	d114      	bne.n	80036ae <Sensors_Update+0x3e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003684:	493c      	ldr	r1, [pc, #240]	@ (8003778 <Sensors_Update+0x108>)
 8003686:	483d      	ldr	r0, [pc, #244]	@ (800377c <Sensors_Update+0x10c>)
 8003688:	f7ff fbce 	bl	8002e28 <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 800368c:	493a      	ldr	r1, [pc, #232]	@ (8003778 <Sensors_Update+0x108>)
 800368e:	483b      	ldr	r0, [pc, #236]	@ (800377c <Sensors_Update+0x10c>)
 8003690:	f7ff fc7b 	bl	8002f8a <RAYKHA_GetPositionForPID>
 8003694:	4603      	mov	r3, r0
 8003696:	4a3a      	ldr	r2, [pc, #232]	@ (8003780 <Sensors_Update+0x110>)
 8003698:	6013      	str	r3, [r2, #0]

		error = line_position;
 800369a:	4b39      	ldr	r3, [pc, #228]	@ (8003780 <Sensors_Update+0x110>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	607b      	str	r3, [r7, #4]

		junction = DetectJunction();
 80036a0:	f7ff ff0e 	bl	80034c0 <DetectJunction>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <Sensors_Update+0x114>)
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e054      	b.n	8003758 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 80036ae:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <Sensors_Update+0x104>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d10a      	bne.n	80036ce <Sensors_Update+0x5e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 80036b8:	492f      	ldr	r1, [pc, #188]	@ (8003778 <Sensors_Update+0x108>)
 80036ba:	4830      	ldr	r0, [pc, #192]	@ (800377c <Sensors_Update+0x10c>)
 80036bc:	f7ff fbb4 	bl	8002e28 <RAYKHA_ReadCalibrated>
		junction = DetectJunction();
 80036c0:	f7ff fefe 	bl	80034c0 <DetectJunction>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <Sensors_Update+0x114>)
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e044      	b.n	8003758 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEER_NORMAL){
 80036ce:	4b29      	ldr	r3, [pc, #164]	@ (8003774 <Sensors_Update+0x104>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11e      	bne.n	8003716 <Sensors_Update+0xa6>
		if(lws.raw < 500)lws.raw = 500;
 80036d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <Sensors_Update+0x118>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036e2:	d203      	bcs.n	80036ec <Sensors_Update+0x7c>
 80036e4:	4b28      	ldr	r3, [pc, #160]	@ (8003788 <Sensors_Update+0x118>)
 80036e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80036ea:	801a      	strh	r2, [r3, #0]
		if(rws.raw < 500)rws.raw = 500;
 80036ec:	4b27      	ldr	r3, [pc, #156]	@ (800378c <Sensors_Update+0x11c>)
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036f6:	d203      	bcs.n	8003700 <Sensors_Update+0x90>
 80036f8:	4b24      	ldr	r3, [pc, #144]	@ (800378c <Sensors_Update+0x11c>)
 80036fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80036fe:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8003700:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <Sensors_Update+0x120>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800370a:	d225      	bcs.n	8003758 <Sensors_Update+0xe8>
 800370c:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <Sensors_Update+0x120>)
 800370e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003712:	801a      	strh	r2, [r3, #0]
 8003714:	e020      	b.n	8003758 <Sensors_Update+0xe8>
		//UART_Transmit_Int(&huart6, ">R", rws.value);

		// Update wall detection flags

    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <Sensors_Update+0x104>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b05      	cmp	r3, #5
 800371e:	d11b      	bne.n	8003758 <Sensors_Update+0xe8>


    	if(lfs.raw > 250)lfs.raw = 250;
 8003720:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <Sensors_Update+0x124>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	2bfa      	cmp	r3, #250	@ 0xfa
 8003728:	d902      	bls.n	8003730 <Sensors_Update+0xc0>
 800372a:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <Sensors_Update+0x124>)
 800372c:	22fa      	movs	r2, #250	@ 0xfa
 800372e:	801a      	strh	r2, [r3, #0]
		if(rfs.raw > 230)rfs.raw = 230;
 8003730:	4b19      	ldr	r3, [pc, #100]	@ (8003798 <Sensors_Update+0x128>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	2be6      	cmp	r3, #230	@ 0xe6
 8003738:	d902      	bls.n	8003740 <Sensors_Update+0xd0>
 800373a:	4b17      	ldr	r3, [pc, #92]	@ (8003798 <Sensors_Update+0x128>)
 800373c:	22e6      	movs	r2, #230	@ 0xe6
 800373e:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <Sensors_Update+0x120>)
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800374a:	d203      	bcs.n	8003754 <Sensors_Update+0xe4>
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <Sensors_Update+0x120>)
 800374e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003752:	801a      	strh	r2, [r3, #0]



		error = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	607b      	str	r3, [r7, #4]

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003762:	4b0e      	ldr	r3, [pc, #56]	@ (800379c <Sensors_Update+0x12c>)
 8003764:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 8003768:	f7ff ff06 	bl	8003578 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000000 	.word	0x20000000
 8003778:	2000059c 	.word	0x2000059c
 800377c:	200006d4 	.word	0x200006d4
 8003780:	200006e8 	.word	0x200006e8
 8003784:	200006ec 	.word	0x200006ec
 8003788:	200006b4 	.word	0x200006b4
 800378c:	200006cc 	.word	0x200006cc
 8003790:	200006bc 	.word	0x200006bc
 8003794:	200006ac 	.word	0x200006ac
 8003798:	200006c4 	.word	0x200006c4
 800379c:	200006a4 	.word	0x200006a4

080037a0 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 80037aa:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <Servo_Init+0x3c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d110      	bne.n	80037d4 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff f837 	bl	8002828 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 80037ba:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80037be:	2100      	movs	r1, #0
 80037c0:	4807      	ldr	r0, [pc, #28]	@ (80037e0 <Servo_Init+0x40>)
 80037c2:	f006 ff36 	bl	800a632 <memset>
    servoCount = 0;
 80037c6:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <Servo_Init+0x44>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 80037cc:	4b03      	ldr	r3, [pc, #12]	@ (80037dc <Servo_Init+0x3c>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e000      	b.n	80037d6 <Servo_Init+0x36>
        return;
 80037d4:	bf00      	nop
}
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000935 	.word	0x20000935
 80037e0:	200006f4 	.word	0x200006f4
 80037e4:	20000934 	.word	0x20000934

080037e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <HAL_MspInit+0x4c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <HAL_MspInit+0x4c>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <HAL_MspInit+0x4c>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_MspInit+0x4c>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	4a08      	ldr	r2, [pc, #32]	@ (8003834 <HAL_MspInit+0x4c>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	@ 0x40
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_MspInit+0x4c>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003826:	2007      	movs	r0, #7
 8003828:	f001 fe08 	bl	800543c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800

08003838 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a17      	ldr	r2, [pc, #92]	@ (80038b4 <HAL_ADC_MspInit+0x7c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d127      	bne.n	80038aa <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <HAL_ADC_MspInit+0x80>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4a15      	ldr	r2, [pc, #84]	@ (80038b8 <HAL_ADC_MspInit+0x80>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003868:	6453      	str	r3, [r2, #68]	@ 0x44
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <HAL_ADC_MspInit+0x80>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <HAL_ADC_MspInit+0x80>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a0e      	ldr	r2, [pc, #56]	@ (80038b8 <HAL_ADC_MspInit+0x80>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <HAL_ADC_MspInit+0x80>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8003892:	2301      	movs	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003896:	2303      	movs	r3, #3
 8003898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	4805      	ldr	r0, [pc, #20]	@ (80038bc <HAL_ADC_MspInit+0x84>)
 80038a6:	f002 f987 	bl	8005bb8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	@ 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40012000 	.word	0x40012000
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020800 	.word	0x40020800

080038c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	@ 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 031c 	add.w	r3, r7, #28
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a42      	ldr	r2, [pc, #264]	@ (80039e8 <HAL_I2C_MspInit+0x128>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d12c      	bne.n	800393c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	4b41      	ldr	r3, [pc, #260]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	4a40      	ldr	r2, [pc, #256]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f2:	4b3e      	ldr	r3, [pc, #248]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038fe:	23c0      	movs	r3, #192	@ 0xc0
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003902:	2312      	movs	r3, #18
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800390e:	2304      	movs	r3, #4
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4619      	mov	r1, r3
 8003918:	4835      	ldr	r0, [pc, #212]	@ (80039f0 <HAL_I2C_MspInit+0x130>)
 800391a:	f002 f94d 	bl	8005bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	4b32      	ldr	r3, [pc, #200]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	4a31      	ldr	r2, [pc, #196]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 8003928:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800392c:	6413      	str	r3, [r2, #64]	@ 0x40
 800392e:	4b2f      	ldr	r3, [pc, #188]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800393a:	e050      	b.n	80039de <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2c      	ldr	r2, [pc, #176]	@ (80039f4 <HAL_I2C_MspInit+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d14b      	bne.n	80039de <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	4a27      	ldr	r2, [pc, #156]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	6313      	str	r3, [r2, #48]	@ 0x30
 8003956:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	4a20      	ldr	r2, [pc, #128]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6313      	str	r3, [r2, #48]	@ 0x30
 8003972:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800397e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003984:	2312      	movs	r3, #18
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003990:	2304      	movs	r3, #4
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4619      	mov	r1, r3
 800399a:	4815      	ldr	r0, [pc, #84]	@ (80039f0 <HAL_I2C_MspInit+0x130>)
 800399c:	f002 f90c 	bl	8005bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039a6:	2312      	movs	r3, #18
 80039a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ae:	2303      	movs	r3, #3
 80039b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039b2:	2304      	movs	r3, #4
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	480e      	ldr	r0, [pc, #56]	@ (80039f8 <HAL_I2C_MspInit+0x138>)
 80039be:	f002 f8fb 	bl	8005bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 80039cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_I2C_MspInit+0x12c>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
}
 80039de:	bf00      	nop
 80039e0:	3730      	adds	r7, #48	@ 0x30
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40005400 	.word	0x40005400
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40005800 	.word	0x40005800
 80039f8:	40020800 	.word	0x40020800

080039fc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	@ 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 031c 	add.w	r3, r7, #28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a32      	ldr	r2, [pc, #200]	@ (8003ae4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12d      	bne.n	8003a7a <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	4b31      	ldr	r3, [pc, #196]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	4a30      	ldr	r2, [pc, #192]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4a29      	ldr	r2, [pc, #164]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003a56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6c:	f107 031c 	add.w	r3, r7, #28
 8003a70:	4619      	mov	r1, r3
 8003a72:	481e      	ldr	r0, [pc, #120]	@ (8003aec <HAL_TIM_Encoder_MspInit+0xf0>)
 8003a74:	f002 f8a0 	bl	8005bb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a78:	e030      	b.n	8003adc <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a82:	d12b      	bne.n	8003adc <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	4a16      	ldr	r2, [pc, #88]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a94:	4b14      	ldr	r3, [pc, #80]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003abc:	2303      	movs	r3, #3
 8003abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003acc:	2301      	movs	r3, #1
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	f107 031c 	add.w	r3, r7, #28
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4805      	ldr	r0, [pc, #20]	@ (8003aec <HAL_TIM_Encoder_MspInit+0xf0>)
 8003ad8:	f002 f86e 	bl	8005bb8 <HAL_GPIO_Init>
}
 8003adc:	bf00      	nop
 8003ade:	3730      	adds	r7, #48	@ 0x30
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40020000 	.word	0x40020000

08003af0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0b      	ldr	r2, [pc, #44]	@ (8003b2c <HAL_TIM_PWM_MspInit+0x3c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10d      	bne.n	8003b1e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <HAL_TIM_PWM_MspInit+0x40>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	4a09      	ldr	r2, [pc, #36]	@ (8003b30 <HAL_TIM_PWM_MspInit+0x40>)
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b12:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <HAL_TIM_PWM_MspInit+0x40>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40023800 	.word	0x40023800

08003b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	@ 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a21      	ldr	r2, [pc, #132]	@ (8003bd8 <HAL_TIM_MspPostInit+0xa4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d13b      	bne.n	8003bce <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	4b20      	ldr	r3, [pc, #128]	@ (8003bdc <HAL_TIM_MspPostInit+0xa8>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bdc <HAL_TIM_MspPostInit+0xa8>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b66:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <HAL_TIM_MspPostInit+0xa8>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <HAL_TIM_MspPostInit+0xa8>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	4a18      	ldr	r2, [pc, #96]	@ (8003bdc <HAL_TIM_MspPostInit+0xa8>)
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b82:	4b16      	ldr	r3, [pc, #88]	@ (8003bdc <HAL_TIM_MspPostInit+0xa8>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b8e:	23c0      	movs	r3, #192	@ 0xc0
 8003b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	480d      	ldr	r0, [pc, #52]	@ (8003be0 <HAL_TIM_MspPostInit+0xac>)
 8003baa:	f002 f805 	bl	8005bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc2:	f107 0314 	add.w	r3, r7, #20
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4806      	ldr	r0, [pc, #24]	@ (8003be4 <HAL_TIM_MspPostInit+0xb0>)
 8003bca:	f001 fff5 	bl	8005bb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003bce:	bf00      	nop
 8003bd0:	3728      	adds	r7, #40	@ 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40020400 	.word	0x40020400

08003be8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08e      	sub	sp, #56	@ 0x38
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a66      	ldr	r2, [pc, #408]	@ (8003da0 <HAL_UART_MspInit+0x1b8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d12c      	bne.n	8003c64 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	4b65      	ldr	r3, [pc, #404]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	4a64      	ldr	r2, [pc, #400]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1a:	4b62      	ldr	r3, [pc, #392]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c36:	4b5b      	ldr	r3, [pc, #364]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c42:	230c      	movs	r3, #12
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c52:	2307      	movs	r3, #7
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4852      	ldr	r0, [pc, #328]	@ (8003da8 <HAL_UART_MspInit+0x1c0>)
 8003c5e:	f001 ffab 	bl	8005bb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c62:	e099      	b.n	8003d98 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a50      	ldr	r2, [pc, #320]	@ (8003dac <HAL_UART_MspInit+0x1c4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d12d      	bne.n	8003cca <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	4b4c      	ldr	r3, [pc, #304]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	4a4b      	ldr	r2, [pc, #300]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	4b45      	ldr	r3, [pc, #276]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a44      	ldr	r2, [pc, #272]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b42      	ldr	r3, [pc, #264]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8003ca6:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2302      	movs	r3, #2
 8003cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cb8:	2307      	movs	r3, #7
 8003cba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	483b      	ldr	r0, [pc, #236]	@ (8003db0 <HAL_UART_MspInit+0x1c8>)
 8003cc4:	f001 ff78 	bl	8005bb8 <HAL_GPIO_Init>
}
 8003cc8:	e066      	b.n	8003d98 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a39      	ldr	r2, [pc, #228]	@ (8003db4 <HAL_UART_MspInit+0x1cc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d161      	bne.n	8003d98 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cdc:	4a31      	ldr	r2, [pc, #196]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003cde:	f043 0320 	orr.w	r3, r3, #32
 8003ce2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d00:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <HAL_UART_MspInit+0x1bc>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d0c:	23c0      	movs	r3, #192	@ 0xc0
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d10:	2302      	movs	r3, #2
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d24:	4619      	mov	r1, r3
 8003d26:	4822      	ldr	r0, [pc, #136]	@ (8003db0 <HAL_UART_MspInit+0x1c8>)
 8003d28:	f001 ff46 	bl	8005bb8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003d2c:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d2e:	4a23      	ldr	r2, [pc, #140]	@ (8003dbc <HAL_UART_MspInit+0x1d4>)
 8003d30:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003d32:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d34:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d38:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d46:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d4c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d54:	4b18      	ldr	r3, [pc, #96]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003d5a:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d60:	4b15      	ldr	r3, [pc, #84]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d66:	4b14      	ldr	r3, [pc, #80]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003d6c:	4812      	ldr	r0, [pc, #72]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d6e:	f001 fba7 	bl	80054c0 <HAL_DMA_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_UART_MspInit+0x194>
      Error_Handler();
 8003d78:	f7fe fa8a 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d82:	4a0d      	ldr	r2, [pc, #52]	@ (8003db8 <HAL_UART_MspInit+0x1d0>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2047      	movs	r0, #71	@ 0x47
 8003d8e:	f001 fb60 	bl	8005452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d92:	2047      	movs	r0, #71	@ 0x47
 8003d94:	f001 fb79 	bl	800548a <HAL_NVIC_EnableIRQ>
}
 8003d98:	bf00      	nop
 8003d9a:	3738      	adds	r7, #56	@ 0x38
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40004400 	.word	0x40004400
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020000 	.word	0x40020000
 8003dac:	40004800 	.word	0x40004800
 8003db0:	40020800 	.word	0x40020800
 8003db4:	40011400 	.word	0x40011400
 8003db8:	20000538 	.word	0x20000538
 8003dbc:	40026428 	.word	0x40026428

08003dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <NMI_Handler+0x4>

08003dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dcc:	bf00      	nop
 8003dce:	e7fd      	b.n	8003dcc <HardFault_Handler+0x4>

08003dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <MemManage_Handler+0x4>

08003dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <BusFault_Handler+0x4>

08003de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <UsageFault_Handler+0x4>

08003de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e18:	f000 fdec 	bl	80049f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <SysTick_Handler+0x3c>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <SysTick_Handler+0x3c>)
 8003e28:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <SysTick_Handler+0x40>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <SysTick_Handler+0x3c>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b13      	cmp	r3, #19
 8003e3c:	d904      	bls.n	8003e48 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8003e3e:	4b04      	ldr	r3, [pc, #16]	@ (8003e50 <SysTick_Handler+0x3c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 8003e44:	f000 f97e 	bl	8004144 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8003e48:	f000 f9b4 	bl	80041b4 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000936 	.word	0x20000936
 8003e54:	20000598 	.word	0x20000598

08003e58 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003e5c:	4802      	ldr	r0, [pc, #8]	@ (8003e68 <DMA2_Stream1_IRQHandler+0x10>)
 8003e5e:	f001 fc6f 	bl	8005740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000538 	.word	0x20000538

08003e6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003e70:	4841      	ldr	r0, [pc, #260]	@ (8003f78 <USART6_IRQHandler+0x10c>)
 8003e72:	f004 ffb5 	bl	8008de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	/* Check if receive interrupt */
	  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) != RESET) {
 8003e76:	4b40      	ldr	r3, [pc, #256]	@ (8003f78 <USART6_IRQHandler+0x10c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d173      	bne.n	8003f6c <USART6_IRQHandler+0x100>
	    /* Read byte from UART */
	    rxByte = (uint8_t)(huart6.Instance->DR & 0xFF);
 8003e84:	4b3c      	ldr	r3, [pc, #240]	@ (8003f78 <USART6_IRQHandler+0x10c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <USART6_IRQHandler+0x110>)
 8003e8e:	701a      	strb	r2, [r3, #0]

	    /* State machine for packet reception */
	    switch (rxState) {
 8003e90:	4b3b      	ldr	r3, [pc, #236]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d85f      	bhi.n	8003f58 <USART6_IRQHandler+0xec>
 8003e98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <USART6_IRQHandler+0x34>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003eb5 	.word	0x08003eb5
 8003ea4:	08003ec5 	.word	0x08003ec5
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003efb 	.word	0x08003efb
 8003eb0:	08003f45 	.word	0x08003f45
	      case WAITING_FOR_START:
	        if (rxByte == START_MARKER) {
 8003eb4:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <USART6_IRQHandler+0x110>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b3c      	cmp	r3, #60	@ 0x3c
 8003eba:	d151      	bne.n	8003f60 <USART6_IRQHandler+0xf4>
	          rxState = WAITING_FOR_CMD;
 8003ebc:	4b30      	ldr	r3, [pc, #192]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8003ec2:	e04d      	b.n	8003f60 <USART6_IRQHandler+0xf4>

	      case WAITING_FOR_CMD:
	        rxCmd = rxByte;
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f7c <USART6_IRQHandler+0x110>)
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8003f84 <USART6_IRQHandler+0x118>)
 8003eca:	701a      	strb	r2, [r3, #0]
	        rxState = WAITING_FOR_LENGTH;
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
	        break;
 8003ed2:	e046      	b.n	8003f62 <USART6_IRQHandler+0xf6>

	      case WAITING_FOR_LENGTH:
	        rxLength = rxByte;
 8003ed4:	4b29      	ldr	r3, [pc, #164]	@ (8003f7c <USART6_IRQHandler+0x110>)
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f88 <USART6_IRQHandler+0x11c>)
 8003eda:	701a      	strb	r2, [r3, #0]
	        rxIndex = 0;
 8003edc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f8c <USART6_IRQHandler+0x120>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]

	        if (rxLength > 0) {
 8003ee2:	4b29      	ldr	r3, [pc, #164]	@ (8003f88 <USART6_IRQHandler+0x11c>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <USART6_IRQHandler+0x86>
	          rxState = RECEIVING_DATA;
 8003eea:	4b25      	ldr	r3, [pc, #148]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003eec:	2203      	movs	r2, #3
 8003eee:	701a      	strb	r2, [r3, #0]
	        } else {
	          rxState = WAITING_FOR_END;
	        }
	        break;
 8003ef0:	e037      	b.n	8003f62 <USART6_IRQHandler+0xf6>
	          rxState = WAITING_FOR_END;
 8003ef2:	4b23      	ldr	r3, [pc, #140]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	701a      	strb	r2, [r3, #0]
	        break;
 8003ef8:	e033      	b.n	8003f62 <USART6_IRQHandler+0xf6>

	      case RECEIVING_DATA:
	        if (rxIndex < rxLength && rxIndex < MAX_BUFFER_SIZE) {
 8003efa:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <USART6_IRQHandler+0x120>)
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	4b22      	ldr	r3, [pc, #136]	@ (8003f88 <USART6_IRQHandler+0x11c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d219      	bcs.n	8003f3a <USART6_IRQHandler+0xce>
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <USART6_IRQHandler+0x120>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b25b      	sxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db14      	blt.n	8003f3a <USART6_IRQHandler+0xce>
	          rxBuffer[rxIndex++] = rxByte;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <USART6_IRQHandler+0x120>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	b2d1      	uxtb	r1, r2
 8003f18:	4a1c      	ldr	r2, [pc, #112]	@ (8003f8c <USART6_IRQHandler+0x120>)
 8003f1a:	7011      	strb	r1, [r2, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <USART6_IRQHandler+0x110>)
 8003f20:	7819      	ldrb	r1, [r3, #0]
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <USART6_IRQHandler+0x124>)
 8003f24:	5499      	strb	r1, [r3, r2]

	          if (rxIndex >= rxLength) {
 8003f26:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <USART6_IRQHandler+0x120>)
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	4b17      	ldr	r3, [pc, #92]	@ (8003f88 <USART6_IRQHandler+0x11c>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d307      	bcc.n	8003f42 <USART6_IRQHandler+0xd6>
	            rxState = WAITING_FOR_END;
 8003f32:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003f34:	2204      	movs	r2, #4
 8003f36:	701a      	strb	r2, [r3, #0]
	          if (rxIndex >= rxLength) {
 8003f38:	e003      	b.n	8003f42 <USART6_IRQHandler+0xd6>
	          }
	        } else {
	          /* Buffer overflow, reset state */
	          rxState = WAITING_FOR_START;
 8003f3a:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8003f40:	e00f      	b.n	8003f62 <USART6_IRQHandler+0xf6>
 8003f42:	e00e      	b.n	8003f62 <USART6_IRQHandler+0xf6>

	      case WAITING_FOR_END:
	        if (rxByte == END_MARKER) {
 8003f44:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <USART6_IRQHandler+0x110>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f4a:	d101      	bne.n	8003f50 <USART6_IRQHandler+0xe4>
	          /* Complete packet received, process it */
	          ProcessCommand();
 8003f4c:	f7fd f8a8 	bl	80010a0 <ProcessCommand>
	        }
	        /* Reset state machine for next packet */
	        rxState = WAITING_FOR_START;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
	        break;
 8003f56:	e004      	b.n	8003f62 <USART6_IRQHandler+0xf6>

	      default:
	        rxState = WAITING_FOR_START;
 8003f58:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <USART6_IRQHandler+0x114>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
	        break;
 8003f5e:	e000      	b.n	8003f62 <USART6_IRQHandler+0xf6>
	        break;
 8003f60:	bf00      	nop
	    }

	    /* Clear interrupt flag - use _CLEAR_FLAG instead of _CLEAR_IT */
	    __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);
 8003f62:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <USART6_IRQHandler+0x10c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0220 	mvn.w	r2, #32
 8003f6a:	601a      	str	r2, [r3, #0]
	  }

	  /* Handle other UART interrupts if needed */
	  HAL_UART_IRQHandler(&huart6);
 8003f6c:	4802      	ldr	r0, [pc, #8]	@ (8003f78 <USART6_IRQHandler+0x10c>)
 8003f6e:	f004 ff37 	bl	8008de0 <HAL_UART_IRQHandler>

  /* USER CODE END USART6_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200004f0 	.word	0x200004f0
 8003f7c:	2000027b 	.word	0x2000027b
 8003f80:	200001f4 	.word	0x200001f4
 8003f84:	20000278 	.word	0x20000278
 8003f88:	20000279 	.word	0x20000279
 8003f8c:	2000027a 	.word	0x2000027a
 8003f90:	200001f8 	.word	0x200001f8

08003f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_kill>:

int _kill(int pid, int sig)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fae:	f006 fb93 	bl	800a6d8 <__errno>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2216      	movs	r2, #22
 8003fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_exit>:

void _exit (int status)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe7 	bl	8003fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <_exit+0x12>

08003fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e00a      	b.n	8004002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fec:	f3af 8000 	nop.w
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	60ba      	str	r2, [r7, #8]
 8003ff8:	b2ca      	uxtb	r2, r1
 8003ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	dbf0      	blt.n	8003fec <_read+0x12>
  }

  return len;
 800400a:	687b      	ldr	r3, [r7, #4]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e009      	b.n	800403a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	60ba      	str	r2, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbf1      	blt.n	8004026 <_write+0x12>
  }
  return len;
 8004042:	687b      	ldr	r3, [r7, #4]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_close>:

int _close(int file)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004074:	605a      	str	r2, [r3, #4]
  return 0;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_isatty>:

int _isatty(int file)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800408c:	2301      	movs	r3, #1
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040bc:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <_sbrk+0x5c>)
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <_sbrk+0x60>)
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040c8:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <_sbrk+0x64>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	@ (800411c <_sbrk+0x68>)
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <_sbrk+0x64>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d207      	bcs.n	80040f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040e4:	f006 faf8 	bl	800a6d8 <__errno>
 80040e8:	4603      	mov	r3, r0
 80040ea:	220c      	movs	r2, #12
 80040ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	e009      	b.n	8004108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040f4:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <_sbrk+0x64>)
 8004104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20020000 	.word	0x20020000
 8004114:	00000400 	.word	0x00000400
 8004118:	20000938 	.word	0x20000938
 800411c:	20000e98 	.word	0x20000e98

08004120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <SystemInit+0x20>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	4a05      	ldr	r2, [pc, #20]	@ (8004140 <SystemInit+0x20>)
 800412c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8004144:	b580      	push	{r7, lr}
 8004146:	ed2d 8b02 	vpush	{d8}
 800414a:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 800414c:	f7fd fbc4 	bl	80018d8 <update_Encoder_Data>
		Motion_Update(&motion);
 8004150:	4810      	ldr	r0, [pc, #64]	@ (8004194 <SysTickFunction+0x50>)
 8004152:	f7fe f97f 	bl	8002454 <Motion_Update>
		Sensors_Update();
 8004156:	f7ff fa8b 	bl	8003670 <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 800415a:	480e      	ldr	r0, [pc, #56]	@ (8004194 <SysTickFunction+0x50>)
 800415c:	f7fe f902 	bl	8002364 <Motion_Velocity>
 8004160:	eeb0 8a40 	vmov.f32	s16, s0
 8004164:	480b      	ldr	r0, [pc, #44]	@ (8004194 <SysTickFunction+0x50>)
 8004166:	f7fe f90d 	bl	8002384 <Motion_Omega>
 800416a:	eef0 8a40 	vmov.f32	s17, s0
 800416e:	f7ff f9f5 	bl	800355c <get_steering_feedback>
 8004172:	eef0 7a40 	vmov.f32	s15, s0
 8004176:	eeb0 1a67 	vmov.f32	s2, s15
 800417a:	eef0 0a68 	vmov.f32	s1, s17
 800417e:	eeb0 0a48 	vmov.f32	s0, s16
 8004182:	4805      	ldr	r0, [pc, #20]	@ (8004198 <SysTickFunction+0x54>)
 8004184:	f7fd f94c 	bl	8001420 <UpdateControllers>
	//--------------------------------------------------------------------
		//UART_Transmit_EncoderData(&huart3);



}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	ecbd 8b02 	vpop	{d8}
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200005c8 	.word	0x200005c8
 8004198:	2000067c 	.word	0x2000067c

0800419c <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <EnableSysTickFunction+0x14>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 80041a6:	200a      	movs	r0, #10
 80041a8:	f000 fc44 	bl	8004a34 <HAL_Delay>
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000598 	.word	0x20000598

080041b4 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80041ba:	f7fd fb33 	bl	8001824 <getRightEncoderCounts>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	f647 1318 	movw	r3, #31000	@ 0x7918
 80041c6:	429a      	cmp	r2, r3
 80041c8:	dc15      	bgt.n	80041f6 <CheckEncoderCounts+0x42>
 80041ca:	f7fd fb37 	bl	800183c <getLeftEncoderCounts>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	f647 1318 	movw	r3, #31000	@ 0x7918
 80041d6:	429a      	cmp	r2, r3
 80041d8:	dc0d      	bgt.n	80041f6 <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80041da:	f7fd fb23 	bl	8001824 <getRightEncoderCounts>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <CheckEncoderCounts+0x6c>)
 80041e4:	429a      	cmp	r2, r3
 80041e6:	db06      	blt.n	80041f6 <CheckEncoderCounts+0x42>
 80041e8:	f7fd fb28 	bl	800183c <getLeftEncoderCounts>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <CheckEncoderCounts+0x6c>)
 80041f2:	429a      	cmp	r2, r3
 80041f4:	da10      	bge.n	8004218 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80041f6:	f7fd fb15 	bl	8001824 <getRightEncoderCounts>
 80041fa:	4603      	mov	r3, r0
 80041fc:	b29c      	uxth	r4, r3
 80041fe:	f7fd fb1d 	bl	800183c <getLeftEncoderCounts>
 8004202:	4603      	mov	r3, r0
 8004204:	b29b      	uxth	r3, r3
 8004206:	1ae3      	subs	r3, r4, r3
 8004208:	b29b      	uxth	r3, r3
 800420a:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 800420c:	f7fd fb52 	bl	80018b4 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8004210:	4a04      	ldr	r2, [pc, #16]	@ (8004224 <CheckEncoderCounts+0x70>)
 8004212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004216:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}
 8004220:	ffff86e8 	.word	0xffff86e8
 8004224:	40010000 	.word	0x40010000

08004228 <executePlantationTask>:


//---------Start 0f Plantation Task (Collect and identify potatoes)--------------------
LineColor linecolor;
BallColor ballcolor;
void executePlantationTask(void) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
	Robot_MoveForwardUntillLine();
 800422e:	f7ff f8a1 	bl	8003374 <Robot_MoveForwardUntillLine>
	Robot_TurnLeft90Inplace();
 8004232:	f7ff f915 	bl	8003460 <Robot_TurnLeft90Inplace>

	//Start the task
	for(uint8_t column = 0; column < 5; column ++){
 8004236:	2300      	movs	r3, #0
 8004238:	71fb      	strb	r3, [r7, #7]
 800423a:	e06e      	b.n	800431a <executePlantationTask+0xf2>
		for(uint8_t row = 0; row < 4; row ++){
 800423c:	2300      	movs	r3, #0
 800423e:	71bb      	strb	r3, [r7, #6]
 8004240:	e065      	b.n	800430e <executePlantationTask+0xe6>
				if(row == 0){
 8004242:	79bb      	ldrb	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11d      	bne.n	8004284 <executePlantationTask+0x5c>
					linecolor = RPI_GetLineColor(column, row);
 8004248:	79ba      	ldrb	r2, [r7, #6]
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe ff2d 	bl	80030ae <RPI_GetLineColor>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	4b34      	ldr	r3, [pc, #208]	@ (800432c <executePlantationTask+0x104>)
 800425a:	701a      	strb	r2, [r3, #0]
					moveToCenterofCellinZeroRow();
 800425c:	f000 f87c 	bl	8004358 <moveToCenterofCellinZeroRow>

					if(linecolor == GREEN){
 8004260:	4b32      	ldr	r3, [pc, #200]	@ (800432c <executePlantationTask+0x104>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d14f      	bne.n	8004308 <executePlantationTask+0xe0>

						// Here we get the ball color after picking
						// ToDo: Handle that
						picktheBall(column, row);
 8004268:	79ba      	ldrb	r2, [r7, #6]
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f89a 	bl	80043a8 <picktheBall>


						moveToCenterofNextColumnfromFirstRow();
 8004274:	f000 f882 	bl	800437c <moveToCenterofNextColumnfromFirstRow>
						HAL_Delay(MOTION_DELAY);
 8004278:	4b2d      	ldr	r3, [pc, #180]	@ (8004330 <executePlantationTask+0x108>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fbd9 	bl	8004a34 <HAL_Delay>
						break;
 8004282:	e047      	b.n	8004314 <executePlantationTask+0xec>
					}
				}
				else if(row == 1){
 8004284:	79bb      	ldrb	r3, [r7, #6]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d11d      	bne.n	80042c6 <executePlantationTask+0x9e>
					linecolor = RPI_GetLineColor(column, row);
 800428a:	79ba      	ldrb	r2, [r7, #6]
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe ff0c 	bl	80030ae <RPI_GetLineColor>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	4b24      	ldr	r3, [pc, #144]	@ (800432c <executePlantationTask+0x104>)
 800429c:	701a      	strb	r2, [r3, #0]
					moveToCenterofNextCell();
 800429e:	f000 f849 	bl	8004334 <moveToCenterofNextCell>

					if(linecolor == GREEN){
 80042a2:	4b22      	ldr	r3, [pc, #136]	@ (800432c <executePlantationTask+0x104>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d12e      	bne.n	8004308 <executePlantationTask+0xe0>
						// Here we get the ball color after picking
						// ToDo: Handle that
						picktheBall(column, row);
 80042aa:	79ba      	ldrb	r2, [r7, #6]
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f879 	bl	80043a8 <picktheBall>
						moveToCenterofNextColumnfromSecondRow();
 80042b6:	f000 f867 	bl	8004388 <moveToCenterofNextColumnfromSecondRow>
						HAL_Delay(MOTION_DELAY);
 80042ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004330 <executePlantationTask+0x108>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fbb8 	bl	8004a34 <HAL_Delay>
						break;
 80042c4:	e026      	b.n	8004314 <executePlantationTask+0xec>
					}

				}else if(row == 2){
 80042c6:	79bb      	ldrb	r3, [r7, #6]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d11d      	bne.n	8004308 <executePlantationTask+0xe0>
					linecolor = RPI_GetLineColor(column, row);
 80042cc:	79ba      	ldrb	r2, [r7, #6]
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe feeb 	bl	80030ae <RPI_GetLineColor>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	4b13      	ldr	r3, [pc, #76]	@ (800432c <executePlantationTask+0x104>)
 80042de:	701a      	strb	r2, [r3, #0]
					moveToCenterofNextCell();
 80042e0:	f000 f828 	bl	8004334 <moveToCenterofNextCell>

					if(linecolor == GREEN){
 80042e4:	4b11      	ldr	r3, [pc, #68]	@ (800432c <executePlantationTask+0x104>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10d      	bne.n	8004308 <executePlantationTask+0xe0>
						// Here we get the ball color after picking
						// ToDo: Handle that
						picktheBall(column, row);
 80042ec:	79ba      	ldrb	r2, [r7, #6]
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f858 	bl	80043a8 <picktheBall>
						moveToCenterofNextColumnfromThiredRow();
 80042f8:	f000 f84e 	bl	8004398 <moveToCenterofNextColumnfromThiredRow>
						HAL_Delay(MOTION_DELAY);
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <executePlantationTask+0x108>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fb97 	bl	8004a34 <HAL_Delay>
						break;
 8004306:	e005      	b.n	8004314 <executePlantationTask+0xec>
		for(uint8_t row = 0; row < 4; row ++){
 8004308:	79bb      	ldrb	r3, [r7, #6]
 800430a:	3301      	adds	r3, #1
 800430c:	71bb      	strb	r3, [r7, #6]
 800430e:	79bb      	ldrb	r3, [r7, #6]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d996      	bls.n	8004242 <executePlantationTask+0x1a>
	for(uint8_t column = 0; column < 5; column ++){
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	3301      	adds	r3, #1
 8004318:	71fb      	strb	r3, [r7, #7]
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d98d      	bls.n	800423c <executePlantationTask+0x14>
		}

	}

  }
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2000093c 	.word	0x2000093c
 8004330:	0800c594 	.word	0x0800c594

08004334 <moveToCenterofNextCell>:

void moveToCenterofNextCell(){
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 8004338:	f7fe ff6e 	bl	8003218 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistance(170);
 800433c:	20aa      	movs	r0, #170	@ 0xaa
 800433e:	f7fe ffaf 	bl	80032a0 <Robot_FollowLineGivenDistance>
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}

08004346 <moveToCenterofNextCellandNotStop>:

void moveToCenterofNextCellandNotStop(){
 8004346:	b580      	push	{r7, lr}
 8004348:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunctionAndNotStop();
 800434a:	f7fe ff65 	bl	8003218 <Robot_LineFollowUntillJunctionAndNotStop>
	Robot_FollowLineGivenDistanceandNotStop(170);
 800434e:	20aa      	movs	r0, #170	@ 0xaa
 8004350:	f7fe ffdc 	bl	800330c <Robot_FollowLineGivenDistanceandNotStop>
}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}

08004358 <moveToCenterofCellinZeroRow>:

void moveToCenterofCellinZeroRow(){
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
	Robot_LineFollowUntillJunction();
 800435c:	f7fe ff16 	bl	800318c <Robot_LineFollowUntillJunction>
	Robot_TurnRight90Inplace();
 8004360:	f7ff f84e 	bl	8003400 <Robot_TurnRight90Inplace>
	Robot_FollowLineGivenDistance(170);
 8004364:	20aa      	movs	r0, #170	@ 0xaa
 8004366:	f7fe ff9b 	bl	80032a0 <Robot_FollowLineGivenDistance>
	HAL_Delay(MOTION_DELAY);
 800436a:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <moveToCenterofCellinZeroRow+0x20>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fb60 	bl	8004a34 <HAL_Delay>
}
 8004374:	bf00      	nop
 8004376:	bd80      	pop	{r7, pc}
 8004378:	0800c594 	.word	0x0800c594

0800437c <moveToCenterofNextColumnfromFirstRow>:

void moveToCenterofNextColumnfromFirstRow(){
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
	moveToCenterofCellinZeroRow();
 8004380:	f7ff ffea 	bl	8004358 <moveToCenterofCellinZeroRow>
}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}

08004388 <moveToCenterofNextColumnfromSecondRow>:

void moveToCenterofNextColumnfromSecondRow(){
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 800438c:	f7ff ffdb 	bl	8004346 <moveToCenterofNextCellandNotStop>
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromFirstRow();
 8004390:	f7ff fff4 	bl	800437c <moveToCenterofNextColumnfromFirstRow>
}
 8004394:	bf00      	nop
 8004396:	bd80      	pop	{r7, pc}

08004398 <moveToCenterofNextColumnfromThiredRow>:

void moveToCenterofNextColumnfromThiredRow(){
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	//moveToCenterofNextCell();
	moveToCenterofNextCellandNotStop();
 800439c:	f7ff ffd3 	bl	8004346 <moveToCenterofNextCellandNotStop>
	//HAL_Delay(MOTION_DELAY);
	moveToCenterofNextColumnfromSecondRow();
 80043a0:	f7ff fff2 	bl	8004388 <moveToCenterofNextColumnfromSecondRow>
}
 80043a4:	bf00      	nop
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <picktheBall>:

BallColor picktheBall(uint8_t column, uint8_t row){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	460a      	mov	r2, r1
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71bb      	strb	r3, [r7, #6]
	Robot_TurnLeft90Inplace();
 80043b8:	f7ff f852 	bl	8003460 <Robot_TurnLeft90Inplace>
	ballcolor = RPI_GetBallColor(column, row);
 80043bc:	79ba      	ldrb	r2, [r7, #6]
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe feaa 	bl	800311c <RPI_GetBallColor>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <picktheBall+0x54>)
 80043ce:	701a      	strb	r2, [r3, #0]
	HAL_Delay(MOTION_DELAY);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <picktheBall+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fb2d 	bl	8004a34 <HAL_Delay>
	//ToDo: Pick The box
	Buzzer_Toggle(1000);
 80043da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043de:	f7fc ff63 	bl	80012a8 <Buzzer_Toggle>
	HAL_Delay(MOTION_DELAY);
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <picktheBall+0x58>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fb24 	bl	8004a34 <HAL_Delay>

	Robot_TurnLeft90Inplace();
 80043ec:	f7ff f838 	bl	8003460 <Robot_TurnLeft90Inplace>

	return ballcolor;
 80043f0:	4b02      	ldr	r3, [pc, #8]	@ (80043fc <picktheBall+0x54>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	2000093d 	.word	0x2000093d
 8004400:	0800c594 	.word	0x0800c594

08004404 <runCurrentTask>:


//---------end 0f Plantation Task (Collect and identify potatoes)---------------------

// Task manager function
void runCurrentTask(TaskType task) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]

    switch (task) {
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <runCurrentTask+0x16>
        case TASK_PLANTATION:
            executePlantationTask();
 8004414:	f7ff ff08 	bl	8004228 <executePlantationTask>
            break;
 8004418:	e000      	b.n	800441c <runCurrentTask+0x18>
        default:

            break;
 800441a:	bf00      	nop
    }

    // Print final status after execution

}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800445c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004428:	f7ff fe7a 	bl	8004120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800442c:	480c      	ldr	r0, [pc, #48]	@ (8004460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800442e:	490d      	ldr	r1, [pc, #52]	@ (8004464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004430:	4a0d      	ldr	r2, [pc, #52]	@ (8004468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004434:	e002      	b.n	800443c <LoopCopyDataInit>

08004436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800443a:	3304      	adds	r3, #4

0800443c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800443c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800443e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004440:	d3f9      	bcc.n	8004436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004442:	4a0a      	ldr	r2, [pc, #40]	@ (800446c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004444:	4c0a      	ldr	r4, [pc, #40]	@ (8004470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004448:	e001      	b.n	800444e <LoopFillZerobss>

0800444a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800444a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800444c:	3204      	adds	r2, #4

0800444e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800444e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004450:	d3fb      	bcc.n	800444a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004452:	f006 f947 	bl	800a6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004456:	f7fd faf9 	bl	8001a4c <main>
  bx  lr    
 800445a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800445c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004464:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004468:	0800cd3c 	.word	0x0800cd3c
  ldr r2, =_sbss
 800446c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004470:	20000e98 	.word	0x20000e98

08004474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004474:	e7fe      	b.n	8004474 <ADC_IRQHandler>
	...

08004478 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800447e:	f000 f9cd 	bl	800481c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004482:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004486:	2201      	movs	r2, #1
 8004488:	2178      	movs	r1, #120	@ 0x78
 800448a:	485b      	ldr	r0, [pc, #364]	@ (80045f8 <SSD1306_Init+0x180>)
 800448c:	f002 fab0 	bl	80069f0 <HAL_I2C_IsDeviceReady>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8004496:	2300      	movs	r3, #0
 8004498:	e0a9      	b.n	80045ee <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800449a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800449e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80044a0:	e002      	b.n	80044a8 <SSD1306_Init+0x30>
		p--;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f9      	bne.n	80044a2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80044ae:	22ae      	movs	r2, #174	@ 0xae
 80044b0:	2100      	movs	r1, #0
 80044b2:	2078      	movs	r0, #120	@ 0x78
 80044b4:	f000 fa2e 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80044b8:	2220      	movs	r2, #32
 80044ba:	2100      	movs	r1, #0
 80044bc:	2078      	movs	r0, #120	@ 0x78
 80044be:	f000 fa29 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80044c2:	2210      	movs	r2, #16
 80044c4:	2100      	movs	r1, #0
 80044c6:	2078      	movs	r0, #120	@ 0x78
 80044c8:	f000 fa24 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80044cc:	22b0      	movs	r2, #176	@ 0xb0
 80044ce:	2100      	movs	r1, #0
 80044d0:	2078      	movs	r0, #120	@ 0x78
 80044d2:	f000 fa1f 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80044d6:	22c8      	movs	r2, #200	@ 0xc8
 80044d8:	2100      	movs	r1, #0
 80044da:	2078      	movs	r0, #120	@ 0x78
 80044dc:	f000 fa1a 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80044e0:	2200      	movs	r2, #0
 80044e2:	2100      	movs	r1, #0
 80044e4:	2078      	movs	r0, #120	@ 0x78
 80044e6:	f000 fa15 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80044ea:	2210      	movs	r2, #16
 80044ec:	2100      	movs	r1, #0
 80044ee:	2078      	movs	r0, #120	@ 0x78
 80044f0:	f000 fa10 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80044f4:	2240      	movs	r2, #64	@ 0x40
 80044f6:	2100      	movs	r1, #0
 80044f8:	2078      	movs	r0, #120	@ 0x78
 80044fa:	f000 fa0b 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80044fe:	2281      	movs	r2, #129	@ 0x81
 8004500:	2100      	movs	r1, #0
 8004502:	2078      	movs	r0, #120	@ 0x78
 8004504:	f000 fa06 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004508:	22ff      	movs	r2, #255	@ 0xff
 800450a:	2100      	movs	r1, #0
 800450c:	2078      	movs	r0, #120	@ 0x78
 800450e:	f000 fa01 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004512:	22a1      	movs	r2, #161	@ 0xa1
 8004514:	2100      	movs	r1, #0
 8004516:	2078      	movs	r0, #120	@ 0x78
 8004518:	f000 f9fc 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800451c:	22a6      	movs	r2, #166	@ 0xa6
 800451e:	2100      	movs	r1, #0
 8004520:	2078      	movs	r0, #120	@ 0x78
 8004522:	f000 f9f7 	bl	8004914 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004526:	22a8      	movs	r2, #168	@ 0xa8
 8004528:	2100      	movs	r1, #0
 800452a:	2078      	movs	r0, #120	@ 0x78
 800452c:	f000 f9f2 	bl	8004914 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8004530:	223f      	movs	r2, #63	@ 0x3f
 8004532:	2100      	movs	r1, #0
 8004534:	2078      	movs	r0, #120	@ 0x78
 8004536:	f000 f9ed 	bl	8004914 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800453a:	22a4      	movs	r2, #164	@ 0xa4
 800453c:	2100      	movs	r1, #0
 800453e:	2078      	movs	r0, #120	@ 0x78
 8004540:	f000 f9e8 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004544:	22d3      	movs	r2, #211	@ 0xd3
 8004546:	2100      	movs	r1, #0
 8004548:	2078      	movs	r0, #120	@ 0x78
 800454a:	f000 f9e3 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	2078      	movs	r0, #120	@ 0x78
 8004554:	f000 f9de 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004558:	22d5      	movs	r2, #213	@ 0xd5
 800455a:	2100      	movs	r1, #0
 800455c:	2078      	movs	r0, #120	@ 0x78
 800455e:	f000 f9d9 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004562:	22f0      	movs	r2, #240	@ 0xf0
 8004564:	2100      	movs	r1, #0
 8004566:	2078      	movs	r0, #120	@ 0x78
 8004568:	f000 f9d4 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800456c:	22d9      	movs	r2, #217	@ 0xd9
 800456e:	2100      	movs	r1, #0
 8004570:	2078      	movs	r0, #120	@ 0x78
 8004572:	f000 f9cf 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004576:	2222      	movs	r2, #34	@ 0x22
 8004578:	2100      	movs	r1, #0
 800457a:	2078      	movs	r0, #120	@ 0x78
 800457c:	f000 f9ca 	bl	8004914 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004580:	22da      	movs	r2, #218	@ 0xda
 8004582:	2100      	movs	r1, #0
 8004584:	2078      	movs	r0, #120	@ 0x78
 8004586:	f000 f9c5 	bl	8004914 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800458a:	2212      	movs	r2, #18
 800458c:	2100      	movs	r1, #0
 800458e:	2078      	movs	r0, #120	@ 0x78
 8004590:	f000 f9c0 	bl	8004914 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004594:	22db      	movs	r2, #219	@ 0xdb
 8004596:	2100      	movs	r1, #0
 8004598:	2078      	movs	r0, #120	@ 0x78
 800459a:	f000 f9bb 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800459e:	2220      	movs	r2, #32
 80045a0:	2100      	movs	r1, #0
 80045a2:	2078      	movs	r0, #120	@ 0x78
 80045a4:	f000 f9b6 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80045a8:	228d      	movs	r2, #141	@ 0x8d
 80045aa:	2100      	movs	r1, #0
 80045ac:	2078      	movs	r0, #120	@ 0x78
 80045ae:	f000 f9b1 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80045b2:	2214      	movs	r2, #20
 80045b4:	2100      	movs	r1, #0
 80045b6:	2078      	movs	r0, #120	@ 0x78
 80045b8:	f000 f9ac 	bl	8004914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80045bc:	22af      	movs	r2, #175	@ 0xaf
 80045be:	2100      	movs	r1, #0
 80045c0:	2078      	movs	r0, #120	@ 0x78
 80045c2:	f000 f9a7 	bl	8004914 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80045c6:	222e      	movs	r2, #46	@ 0x2e
 80045c8:	2100      	movs	r1, #0
 80045ca:	2078      	movs	r0, #120	@ 0x78
 80045cc:	f000 f9a2 	bl	8004914 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80045d0:	2000      	movs	r0, #0
 80045d2:	f000 f843 	bl	800465c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80045d6:	f000 f813 	bl	8004600 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <SSD1306_Init+0x184>)
 80045dc:	2200      	movs	r2, #0
 80045de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <SSD1306_Init+0x184>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80045e6:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <SSD1306_Init+0x184>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80045ec:	2301      	movs	r3, #1
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200002e0 	.word	0x200002e0
 80045fc:	20000d40 	.word	0x20000d40

08004600 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004606:	2300      	movs	r3, #0
 8004608:	71fb      	strb	r3, [r7, #7]
 800460a:	e01d      	b.n	8004648 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	3b50      	subs	r3, #80	@ 0x50
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	2100      	movs	r1, #0
 8004616:	2078      	movs	r0, #120	@ 0x78
 8004618:	f000 f97c 	bl	8004914 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800461c:	2200      	movs	r2, #0
 800461e:	2100      	movs	r1, #0
 8004620:	2078      	movs	r0, #120	@ 0x78
 8004622:	f000 f977 	bl	8004914 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004626:	2210      	movs	r2, #16
 8004628:	2100      	movs	r1, #0
 800462a:	2078      	movs	r0, #120	@ 0x78
 800462c:	f000 f972 	bl	8004914 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	4a08      	ldr	r2, [pc, #32]	@ (8004658 <SSD1306_UpdateScreen+0x58>)
 8004636:	441a      	add	r2, r3
 8004638:	2380      	movs	r3, #128	@ 0x80
 800463a:	2140      	movs	r1, #64	@ 0x40
 800463c:	2078      	movs	r0, #120	@ 0x78
 800463e:	f000 f903 	bl	8004848 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	3301      	adds	r3, #1
 8004646:	71fb      	strb	r3, [r7, #7]
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	2b07      	cmp	r3, #7
 800464c:	d9de      	bls.n	800460c <SSD1306_UpdateScreen+0xc>
	}
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000940 	.word	0x20000940

0800465c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <SSD1306_Fill+0x14>
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <SSD1306_Fill+0x16>
 8004670:	23ff      	movs	r3, #255	@ 0xff
 8004672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004676:	4619      	mov	r1, r3
 8004678:	4803      	ldr	r0, [pc, #12]	@ (8004688 <SSD1306_Fill+0x2c>)
 800467a:	f005 ffda 	bl	800a632 <memset>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000940 	.word	0x20000940

0800468c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
 8004696:	460b      	mov	r3, r1
 8004698:	80bb      	strh	r3, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	70fb      	strb	r3, [r7, #3]
	if (
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80046a2:	d848      	bhi.n	8004736 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80046a4:	88bb      	ldrh	r3, [r7, #4]
 80046a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80046a8:	d845      	bhi.n	8004736 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80046aa:	4b26      	ldr	r3, [pc, #152]	@ (8004744 <SSD1306_DrawPixel+0xb8>)
 80046ac:	791b      	ldrb	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d11a      	bne.n	80046fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	88bb      	ldrh	r3, [r7, #4]
 80046ca:	08db      	lsrs	r3, r3, #3
 80046cc:	b298      	uxth	r0, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	01db      	lsls	r3, r3, #7
 80046d2:	4413      	add	r3, r2
 80046d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <SSD1306_DrawPixel+0xbc>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	b25a      	sxtb	r2, r3
 80046da:	88bb      	ldrh	r3, [r7, #4]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b259      	sxtb	r1, r3
 80046ec:	88fa      	ldrh	r2, [r7, #6]
 80046ee:	4603      	mov	r3, r0
 80046f0:	01db      	lsls	r3, r3, #7
 80046f2:	4413      	add	r3, r2
 80046f4:	b2c9      	uxtb	r1, r1
 80046f6:	4a14      	ldr	r2, [pc, #80]	@ (8004748 <SSD1306_DrawPixel+0xbc>)
 80046f8:	54d1      	strb	r1, [r2, r3]
 80046fa:	e01d      	b.n	8004738 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	88bb      	ldrh	r3, [r7, #4]
 8004700:	08db      	lsrs	r3, r3, #3
 8004702:	b298      	uxth	r0, r3
 8004704:	4603      	mov	r3, r0
 8004706:	01db      	lsls	r3, r3, #7
 8004708:	4413      	add	r3, r2
 800470a:	4a0f      	ldr	r2, [pc, #60]	@ (8004748 <SSD1306_DrawPixel+0xbc>)
 800470c:	5cd3      	ldrb	r3, [r2, r3]
 800470e:	b25a      	sxtb	r2, r3
 8004710:	88bb      	ldrh	r3, [r7, #4]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	b25b      	sxtb	r3, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	b25b      	sxtb	r3, r3
 8004722:	4013      	ands	r3, r2
 8004724:	b259      	sxtb	r1, r3
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	4603      	mov	r3, r0
 800472a:	01db      	lsls	r3, r3, #7
 800472c:	4413      	add	r3, r2
 800472e:	b2c9      	uxtb	r1, r1
 8004730:	4a05      	ldr	r2, [pc, #20]	@ (8004748 <SSD1306_DrawPixel+0xbc>)
 8004732:	54d1      	strb	r1, [r2, r3]
 8004734:	e000      	b.n	8004738 <SSD1306_DrawPixel+0xac>
		return;
 8004736:	bf00      	nop
	}
}
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000d40 	.word	0x20000d40
 8004748:	20000940 	.word	0x20000940

0800474c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60ba      	str	r2, [r7, #8]
 8004754:	461a      	mov	r2, r3
 8004756:	4603      	mov	r3, r0
 8004758:	81fb      	strh	r3, [r7, #14]
 800475a:	460b      	mov	r3, r1
 800475c:	81bb      	strh	r3, [r7, #12]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004766:	3307      	adds	r3, #7
 8004768:	2b00      	cmp	r3, #0
 800476a:	da00      	bge.n	800476e <SSD1306_DrawBitmap+0x22>
 800476c:	3307      	adds	r3, #7
 800476e:	10db      	asrs	r3, r3, #3
 8004770:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8004776:	2300      	movs	r3, #0
 8004778:	82bb      	strh	r3, [r7, #20]
 800477a:	e044      	b.n	8004806 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800477c:	2300      	movs	r3, #0
 800477e:	827b      	strh	r3, [r7, #18]
 8004780:	e02f      	b.n	80047e2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8004782:	8a7b      	ldrh	r3, [r7, #18]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
 8004792:	e012      	b.n	80047ba <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004794:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004798:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800479c:	fb03 f202 	mul.w	r2, r3, r2
 80047a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da00      	bge.n	80047aa <SSD1306_DrawBitmap+0x5e>
 80047a8:	3307      	adds	r3, #7
 80047aa:	10db      	asrs	r3, r3, #3
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80047ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da09      	bge.n	80047d6 <SSD1306_DrawBitmap+0x8a>
 80047c2:	89fa      	ldrh	r2, [r7, #14]
 80047c4:	8a7b      	ldrh	r3, [r7, #18]
 80047c6:	4413      	add	r3, r2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	89b9      	ldrh	r1, [r7, #12]
 80047cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff5b 	bl	800468c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80047d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	827b      	strh	r3, [r7, #18]
 80047e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80047e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	dbc9      	blt.n	8004782 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80047ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	82bb      	strh	r3, [r7, #20]
 80047fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3301      	adds	r3, #1
 8004802:	b29b      	uxth	r3, r3
 8004804:	81bb      	strh	r3, [r7, #12]
 8004806:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800480a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800480e:	429a      	cmp	r2, r3
 8004810:	dbb4      	blt.n	800477c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004822:	4b08      	ldr	r3, [pc, #32]	@ (8004844 <ssd1306_I2C_Init+0x28>)
 8004824:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004826:	e002      	b.n	800482e <ssd1306_I2C_Init+0x12>
		p--;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3b01      	subs	r3, #1
 800482c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f9      	bne.n	8004828 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	0003d090 	.word	0x0003d090

08004848 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b0c7      	sub	sp, #284	@ 0x11c
 800484c:	af02      	add	r7, sp, #8
 800484e:	4604      	mov	r4, r0
 8004850:	4608      	mov	r0, r1
 8004852:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004856:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800485a:	600a      	str	r2, [r1, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004862:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004866:	4622      	mov	r2, r4
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800486e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004872:	4602      	mov	r2, r0
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800487a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800487e:	460a      	mov	r2, r1
 8004880:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800488a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800488e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004896:	2300      	movs	r3, #0
 8004898:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800489c:	e015      	b.n	80048ca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800489e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80048a2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80048a6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	441a      	add	r2, r3
 80048ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80048b2:	3301      	adds	r3, #1
 80048b4:	7811      	ldrb	r1, [r2, #0]
 80048b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80048ba:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80048be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80048c0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80048c4:	3301      	adds	r3, #1
 80048c6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80048ca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80048d4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80048d8:	8812      	ldrh	r2, [r2, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d8df      	bhi.n	800489e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80048de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048e2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b299      	uxth	r1, r3
 80048ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f107 020c 	add.w	r2, r7, #12
 80048fc:	200a      	movs	r0, #10
 80048fe:	9000      	str	r0, [sp, #0]
 8004900:	4803      	ldr	r0, [pc, #12]	@ (8004910 <ssd1306_I2C_WriteMulti+0xc8>)
 8004902:	f001 fc4b 	bl	800619c <HAL_I2C_Master_Transmit>
}
 8004906:	bf00      	nop
 8004908:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800490c:	46bd      	mov	sp, r7
 800490e:	bd90      	pop	{r4, r7, pc}
 8004910:	200002e0 	.word	0x200002e0

08004914 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af02      	add	r7, sp, #8
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
 800491e:	460b      	mov	r3, r1
 8004920:	71bb      	strb	r3, [r7, #6]
 8004922:	4613      	mov	r3, r2
 8004924:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004926:	79bb      	ldrb	r3, [r7, #6]
 8004928:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800492a:	797b      	ldrb	r3, [r7, #5]
 800492c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	b299      	uxth	r1, r3
 8004932:	f107 020c 	add.w	r2, r7, #12
 8004936:	230a      	movs	r3, #10
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	2302      	movs	r3, #2
 800493c:	4803      	ldr	r0, [pc, #12]	@ (800494c <ssd1306_I2C_Write+0x38>)
 800493e:	f001 fc2d 	bl	800619c <HAL_I2C_Master_Transmit>
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	200002e0 	.word	0x200002e0

08004950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004954:	4b0e      	ldr	r3, [pc, #56]	@ (8004990 <HAL_Init+0x40>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0d      	ldr	r2, [pc, #52]	@ (8004990 <HAL_Init+0x40>)
 800495a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800495e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <HAL_Init+0x40>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <HAL_Init+0x40>)
 8004966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800496a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800496c:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <HAL_Init+0x40>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a07      	ldr	r2, [pc, #28]	@ (8004990 <HAL_Init+0x40>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004978:	2003      	movs	r0, #3
 800497a:	f000 fd5f 	bl	800543c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800497e:	2000      	movs	r0, #0
 8004980:	f000 f808 	bl	8004994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004984:	f7fe ff30 	bl	80037e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023c00 	.word	0x40023c00

08004994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800499c:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <HAL_InitTick+0x54>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <HAL_InitTick+0x58>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	4619      	mov	r1, r3
 80049a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fd77 	bl	80054a6 <HAL_SYSTICK_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e00e      	b.n	80049e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b0f      	cmp	r3, #15
 80049c6:	d80a      	bhi.n	80049de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049c8:	2200      	movs	r2, #0
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	f000 fd3f 	bl	8005452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049d4:	4a06      	ldr	r2, [pc, #24]	@ (80049f0 <HAL_InitTick+0x5c>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000004 	.word	0x20000004
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	20000008 	.word	0x20000008

080049f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049f8:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_IncTick+0x20>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_IncTick+0x24>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4413      	add	r3, r2
 8004a04:	4a04      	ldr	r2, [pc, #16]	@ (8004a18 <HAL_IncTick+0x24>)
 8004a06:	6013      	str	r3, [r2, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c
 8004a18:	20000d48 	.word	0x20000d48

08004a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a20:	4b03      	ldr	r3, [pc, #12]	@ (8004a30 <HAL_GetTick+0x14>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000d48 	.word	0x20000d48

08004a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a3c:	f7ff ffee 	bl	8004a1c <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d005      	beq.n	8004a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <HAL_Delay+0x44>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a5a:	bf00      	nop
 8004a5c:	f7ff ffde 	bl	8004a1c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d8f7      	bhi.n	8004a5c <HAL_Delay+0x28>
  {
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e033      	b.n	8004afa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fe fecc 	bl	8003838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d118      	bne.n	8004aec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ac2:	f023 0302 	bic.w	r3, r3, #2
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fae8 	bl	80050a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	f023 0303 	bic.w	r3, r3, #3
 8004ae2:	f043 0201 	orr.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aea:	e001      	b.n	8004af0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_ADC_Start+0x1a>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e0b2      	b.n	8004c84 <HAL_ADC_Start+0x180>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d018      	beq.n	8004b66 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b44:	4b52      	ldr	r3, [pc, #328]	@ (8004c90 <HAL_ADC_Start+0x18c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_ADC_Start+0x190>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0c9a      	lsrs	r2, r3, #18
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004b58:	e002      	b.n	8004b60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f9      	bne.n	8004b5a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d17a      	bne.n	8004c6a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b9e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb2:	d106      	bne.n	8004bc2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb8:	f023 0206 	bic.w	r2, r3, #6
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bc0:	e002      	b.n	8004bc8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bd0:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <HAL_ADC_Start+0x194>)
 8004bd2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004bdc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d12a      	bne.n	8004c40 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a2b      	ldr	r2, [pc, #172]	@ (8004c9c <HAL_ADC_Start+0x198>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d015      	beq.n	8004c20 <HAL_ADC_Start+0x11c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a29      	ldr	r2, [pc, #164]	@ (8004ca0 <HAL_ADC_Start+0x19c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d105      	bne.n	8004c0a <HAL_ADC_Start+0x106>
 8004bfe:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <HAL_ADC_Start+0x194>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ca4 <HAL_ADC_Start+0x1a0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d136      	bne.n	8004c82 <HAL_ADC_Start+0x17e>
 8004c14:	4b20      	ldr	r3, [pc, #128]	@ (8004c98 <HAL_ADC_Start+0x194>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d130      	bne.n	8004c82 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d129      	bne.n	8004c82 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	e020      	b.n	8004c82 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a15      	ldr	r2, [pc, #84]	@ (8004c9c <HAL_ADC_Start+0x198>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d11b      	bne.n	8004c82 <HAL_ADC_Start+0x17e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d114      	bne.n	8004c82 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	e00b      	b.n	8004c82 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f043 0210 	orr.w	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7a:	f043 0201 	orr.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000004 	.word	0x20000004
 8004c94:	431bde83 	.word	0x431bde83
 8004c98:	40012300 	.word	0x40012300
 8004c9c:	40012000 	.word	0x40012000
 8004ca0:	40012100 	.word	0x40012100
 8004ca4:	40012200 	.word	0x40012200

08004ca8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_ADC_Stop+0x16>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e021      	b.n	8004d02 <HAL_ADC_Stop+0x5a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	f043 0201 	orr.w	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d2a:	d113      	bne.n	8004d54 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d3a:	d10b      	bne.n	8004d54 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e063      	b.n	8004e1c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d54:	f7ff fe62 	bl	8004a1c <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d5a:	e021      	b.n	8004da0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d01d      	beq.n	8004da0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <HAL_ADC_PollForConversion+0x6c>
 8004d6a:	f7ff fe57 	bl	8004a1c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d212      	bcs.n	8004da0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d00b      	beq.n	8004da0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e03d      	b.n	8004e1c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d1d6      	bne.n	8004d5c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0212 	mvn.w	r2, #18
 8004db6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d123      	bne.n	8004e1a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d11f      	bne.n	8004e1a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d006      	beq.n	8004df6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d111      	bne.n	8004e1a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f043 0201 	orr.w	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x1c>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e113      	b.n	8005084 <HAL_ADC_ConfigChannel+0x244>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b09      	cmp	r3, #9
 8004e6a:	d925      	bls.n	8004eb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68d9      	ldr	r1, [r3, #12]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	3b1e      	subs	r3, #30
 8004e82:	2207      	movs	r2, #7
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	400a      	ands	r2, r1
 8004e90:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68d9      	ldr	r1, [r3, #12]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4403      	add	r3, r0
 8004eaa:	3b1e      	subs	r3, #30
 8004eac:	409a      	lsls	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	e022      	b.n	8004efe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6919      	ldr	r1, [r3, #16]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	2207      	movs	r2, #7
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43da      	mvns	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	400a      	ands	r2, r1
 8004eda:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6919      	ldr	r1, [r3, #16]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4618      	mov	r0, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4403      	add	r3, r0
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d824      	bhi.n	8004f50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	3b05      	subs	r3, #5
 8004f18:	221f      	movs	r2, #31
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	400a      	ands	r2, r1
 8004f26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	4618      	mov	r0, r3
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	3b05      	subs	r3, #5
 8004f42:	fa00 f203 	lsl.w	r2, r0, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f4e:	e04c      	b.n	8004fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d824      	bhi.n	8004fa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	3b23      	subs	r3, #35	@ 0x23
 8004f6a:	221f      	movs	r2, #31
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43da      	mvns	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	400a      	ands	r2, r1
 8004f78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	4618      	mov	r0, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	3b23      	subs	r3, #35	@ 0x23
 8004f94:	fa00 f203 	lsl.w	r2, r0, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa0:	e023      	b.n	8004fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3b41      	subs	r3, #65	@ 0x41
 8004fb4:	221f      	movs	r2, #31
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	3b41      	subs	r3, #65	@ 0x41
 8004fde:	fa00 f203 	lsl.w	r2, r0, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <HAL_ADC_ConfigChannel+0x250>)
 8004fec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a28      	ldr	r2, [pc, #160]	@ (8005094 <HAL_ADC_ConfigChannel+0x254>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10f      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x1d8>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b12      	cmp	r3, #18
 8004ffe:	d10b      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <HAL_ADC_ConfigChannel+0x254>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d12b      	bne.n	800507a <HAL_ADC_ConfigChannel+0x23a>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_ADC_ConfigChannel+0x258>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <HAL_ADC_ConfigChannel+0x1f4>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b11      	cmp	r3, #17
 8005032:	d122      	bne.n	800507a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a11      	ldr	r2, [pc, #68]	@ (8005098 <HAL_ADC_ConfigChannel+0x258>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d111      	bne.n	800507a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005056:	4b11      	ldr	r3, [pc, #68]	@ (800509c <HAL_ADC_ConfigChannel+0x25c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a11      	ldr	r2, [pc, #68]	@ (80050a0 <HAL_ADC_ConfigChannel+0x260>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	0c9a      	lsrs	r2, r3, #18
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800506c:	e002      	b.n	8005074 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3b01      	subs	r3, #1
 8005072:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f9      	bne.n	800506e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012300 	.word	0x40012300
 8005094:	40012000 	.word	0x40012000
 8005098:	10000012 	.word	0x10000012
 800509c:	20000004 	.word	0x20000004
 80050a0:	431bde83 	.word	0x431bde83

080050a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050ac:	4b79      	ldr	r3, [pc, #484]	@ (8005294 <ADC_Init+0x1f0>)
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	021a      	lsls	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80050fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6859      	ldr	r1, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800511e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6899      	ldr	r1, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005136:	4a58      	ldr	r2, [pc, #352]	@ (8005298 <ADC_Init+0x1f4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800514a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6899      	ldr	r1, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800516c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6899      	ldr	r1, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	e00f      	b.n	80051a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80051a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0202 	bic.w	r2, r2, #2
 80051b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6899      	ldr	r1, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	7e1b      	ldrb	r3, [r3, #24]
 80051bc:	005a      	lsls	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01b      	beq.n	8005208 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80051ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6859      	ldr	r1, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	3b01      	subs	r3, #1
 80051fc:	035a      	lsls	r2, r3, #13
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	e007      	b.n	8005218 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	3b01      	subs	r3, #1
 8005234:	051a      	lsls	r2, r3, #20
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800524c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800525a:	025a      	lsls	r2, r3, #9
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6899      	ldr	r1, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	029a      	lsls	r2, r3, #10
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	609a      	str	r2, [r3, #8]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40012300 	.word	0x40012300
 8005298:	0f000001 	.word	0x0f000001

0800529c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052ac:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <__NVIC_SetPriorityGrouping+0x44>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052b8:	4013      	ands	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ce:	4a04      	ldr	r2, [pc, #16]	@ (80052e0 <__NVIC_SetPriorityGrouping+0x44>)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	60d3      	str	r3, [r2, #12]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	e000ed00 	.word	0xe000ed00

080052e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052e8:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <__NVIC_GetPriorityGrouping+0x18>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	0a1b      	lsrs	r3, r3, #8
 80052ee:	f003 0307 	and.w	r3, r3, #7
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800530a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530e:	2b00      	cmp	r3, #0
 8005310:	db0b      	blt.n	800532a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	f003 021f 	and.w	r2, r3, #31
 8005318:	4907      	ldr	r1, [pc, #28]	@ (8005338 <__NVIC_EnableIRQ+0x38>)
 800531a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	2001      	movs	r0, #1
 8005322:	fa00 f202 	lsl.w	r2, r0, r2
 8005326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	e000e100 	.word	0xe000e100

0800533c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	6039      	str	r1, [r7, #0]
 8005346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534c:	2b00      	cmp	r3, #0
 800534e:	db0a      	blt.n	8005366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	490c      	ldr	r1, [pc, #48]	@ (8005388 <__NVIC_SetPriority+0x4c>)
 8005356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535a:	0112      	lsls	r2, r2, #4
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	440b      	add	r3, r1
 8005360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005364:	e00a      	b.n	800537c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4908      	ldr	r1, [pc, #32]	@ (800538c <__NVIC_SetPriority+0x50>)
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	3b04      	subs	r3, #4
 8005374:	0112      	lsls	r2, r2, #4
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	440b      	add	r3, r1
 800537a:	761a      	strb	r2, [r3, #24]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	e000e100 	.word	0xe000e100
 800538c:	e000ed00 	.word	0xe000ed00

08005390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	@ 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f1c3 0307 	rsb	r3, r3, #7
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	bf28      	it	cs
 80053ae:	2304      	movcs	r3, #4
 80053b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d902      	bls.n	80053c0 <NVIC_EncodePriority+0x30>
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3b03      	subs	r3, #3
 80053be:	e000      	b.n	80053c2 <NVIC_EncodePriority+0x32>
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c4:	f04f 32ff 	mov.w	r2, #4294967295
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43da      	mvns	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	401a      	ands	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053d8:	f04f 31ff 	mov.w	r1, #4294967295
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	43d9      	mvns	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e8:	4313      	orrs	r3, r2
         );
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3724      	adds	r7, #36	@ 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3b01      	subs	r3, #1
 8005404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005408:	d301      	bcc.n	800540e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800540a:	2301      	movs	r3, #1
 800540c:	e00f      	b.n	800542e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800540e:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <SysTick_Config+0x40>)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3b01      	subs	r3, #1
 8005414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005416:	210f      	movs	r1, #15
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
 800541c:	f7ff ff8e 	bl	800533c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005420:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <SysTick_Config+0x40>)
 8005422:	2200      	movs	r2, #0
 8005424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005426:	4b04      	ldr	r3, [pc, #16]	@ (8005438 <SysTick_Config+0x40>)
 8005428:	2207      	movs	r2, #7
 800542a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000e010 	.word	0xe000e010

0800543c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff ff29 	bl	800529c <__NVIC_SetPriorityGrouping>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	4603      	mov	r3, r0
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005464:	f7ff ff3e 	bl	80052e4 <__NVIC_GetPriorityGrouping>
 8005468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	6978      	ldr	r0, [r7, #20]
 8005470:	f7ff ff8e 	bl	8005390 <NVIC_EncodePriority>
 8005474:	4602      	mov	r2, r0
 8005476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff ff5d 	bl	800533c <__NVIC_SetPriority>
}
 8005482:	bf00      	nop
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	4603      	mov	r3, r0
 8005492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ff31 	bl	8005300 <__NVIC_EnableIRQ>
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ffa2 	bl	80053f8 <SysTick_Config>
 80054b4:	4603      	mov	r3, r0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054cc:	f7ff faa6 	bl	8004a1c <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e099      	b.n	8005610 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054fc:	e00f      	b.n	800551e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054fe:	f7ff fa8d 	bl	8004a1c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b05      	cmp	r3, #5
 800550a:	d908      	bls.n	800551e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2203      	movs	r2, #3
 8005516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e078      	b.n	8005610 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e8      	bne.n	80054fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4b38      	ldr	r3, [pc, #224]	@ (8005618 <HAL_DMA_Init+0x158>)
 8005538:	4013      	ands	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800554a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005574:	2b04      	cmp	r3, #4
 8005576:	d107      	bne.n	8005588 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005580:	4313      	orrs	r3, r2
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 0307 	bic.w	r3, r3, #7
 800559e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d117      	bne.n	80055e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fa7b 	bl	8005ac0 <DMA_CheckFifoParam>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2240      	movs	r2, #64	@ 0x40
 80055d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80055de:	2301      	movs	r3, #1
 80055e0:	e016      	b.n	8005610 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa32 	bl	8005a54 <DMA_CalcBaseAndBitshift>
 80055f0:	4603      	mov	r3, r0
 80055f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f8:	223f      	movs	r2, #63	@ 0x3f
 80055fa:	409a      	lsls	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	f010803f 	.word	0xf010803f

0800561c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005628:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800562a:	f7ff f9f7 	bl	8004a1c <HAL_GetTick>
 800562e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d008      	beq.n	800564e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2280      	movs	r2, #128	@ 0x80
 8005640:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e052      	b.n	80056f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0216 	bic.w	r2, r2, #22
 800565c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800566c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_DMA_Abort+0x62>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0208 	bic.w	r2, r2, #8
 800568c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800569e:	e013      	b.n	80056c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056a0:	f7ff f9bc 	bl	8004a1c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d90c      	bls.n	80056c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2203      	movs	r2, #3
 80056b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e015      	b.n	80056f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e4      	bne.n	80056a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056da:	223f      	movs	r2, #63	@ 0x3f
 80056dc:	409a      	lsls	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d004      	beq.n	800571a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2280      	movs	r2, #128	@ 0x80
 8005714:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e00c      	b.n	8005734 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2205      	movs	r2, #5
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800574c:	4b8e      	ldr	r3, [pc, #568]	@ (8005988 <HAL_DMA_IRQHandler+0x248>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a8e      	ldr	r2, [pc, #568]	@ (800598c <HAL_DMA_IRQHandler+0x24c>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	0a9b      	lsrs	r3, r3, #10
 8005758:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576a:	2208      	movs	r2, #8
 800576c:	409a      	lsls	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01a      	beq.n	80057ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d013      	beq.n	80057ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005798:	2208      	movs	r2, #8
 800579a:	409a      	lsls	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a4:	f043 0201 	orr.w	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b0:	2201      	movs	r2, #1
 80057b2:	409a      	lsls	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d012      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	f043 0202 	orr.w	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e6:	2204      	movs	r2, #4
 80057e8:	409a      	lsls	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d012      	beq.n	8005818 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005804:	2204      	movs	r2, #4
 8005806:	409a      	lsls	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	f043 0204 	orr.w	r2, r3, #4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581c:	2210      	movs	r2, #16
 800581e:	409a      	lsls	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d043      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d03c      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583a:	2210      	movs	r2, #16
 800583c:	409a      	lsls	r2, r3
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d018      	beq.n	8005882 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d024      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
 800586e:	e01f      	b.n	80058b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	e016      	b.n	80058b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0208 	bic.w	r2, r2, #8
 800589e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b4:	2220      	movs	r2, #32
 80058b6:	409a      	lsls	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 808f 	beq.w	80059e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8087 	beq.w	80059e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	2220      	movs	r2, #32
 80058d8:	409a      	lsls	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b05      	cmp	r3, #5
 80058e8:	d136      	bne.n	8005958 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0216 	bic.w	r2, r2, #22
 80058f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005908:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <HAL_DMA_IRQHandler+0x1da>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0208 	bic.w	r2, r2, #8
 8005928:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592e:	223f      	movs	r2, #63	@ 0x3f
 8005930:	409a      	lsls	r2, r3
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594a:	2b00      	cmp	r3, #0
 800594c:	d07e      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
        }
        return;
 8005956:	e079      	b.n	8005a4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01d      	beq.n	80059a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10d      	bne.n	8005990 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005978:	2b00      	cmp	r3, #0
 800597a:	d031      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
 8005984:	e02c      	b.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
 8005986:	bf00      	nop
 8005988:	20000004 	.word	0x20000004
 800598c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d023      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
 80059a0:	e01e      	b.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10f      	bne.n	80059d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0210 	bic.w	r2, r2, #16
 80059be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d032      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d022      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2205      	movs	r2, #5
 80059f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d307      	bcc.n	8005a28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f2      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x2cc>
 8005a26:	e000      	b.n	8005a2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
 8005a4a:	e000      	b.n	8005a4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a4c:	bf00      	nop
    }
  }
}
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	3b10      	subs	r3, #16
 8005a64:	4a14      	ldr	r2, [pc, #80]	@ (8005ab8 <DMA_CalcBaseAndBitshift+0x64>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a6e:	4a13      	ldr	r2, [pc, #76]	@ (8005abc <DMA_CalcBaseAndBitshift+0x68>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d909      	bls.n	8005a96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	1d1a      	adds	r2, r3, #4
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a94:	e007      	b.n	8005aa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	aaaaaaab 	.word	0xaaaaaaab
 8005abc:	0800c9b0 	.word	0x0800c9b0

08005ac0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11f      	bne.n	8005b1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d856      	bhi.n	8005b8e <DMA_CheckFifoParam+0xce>
 8005ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <DMA_CheckFifoParam+0x28>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005b0b 	.word	0x08005b0b
 8005af0:	08005af9 	.word	0x08005af9
 8005af4:	08005b8f 	.word	0x08005b8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d046      	beq.n	8005b92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b08:	e043      	b.n	8005b92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b12:	d140      	bne.n	8005b96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b18:	e03d      	b.n	8005b96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b22:	d121      	bne.n	8005b68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d837      	bhi.n	8005b9a <DMA_CheckFifoParam+0xda>
 8005b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <DMA_CheckFifoParam+0x70>)
 8005b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b30:	08005b41 	.word	0x08005b41
 8005b34:	08005b47 	.word	0x08005b47
 8005b38:	08005b41 	.word	0x08005b41
 8005b3c:	08005b59 	.word	0x08005b59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      break;
 8005b44:	e030      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d025      	beq.n	8005b9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b56:	e022      	b.n	8005b9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b60:	d11f      	bne.n	8005ba2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b66:	e01c      	b.n	8005ba2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d903      	bls.n	8005b76 <DMA_CheckFifoParam+0xb6>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d003      	beq.n	8005b7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b74:	e018      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7a:	e015      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8c:	e00b      	b.n	8005ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e00a      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8005b92:	bf00      	nop
 8005b94:	e008      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8005b96:	bf00      	nop
 8005b98:	e006      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e004      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ba6:	bf00      	nop
    }
  } 
  
  return status; 
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop

08005bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	@ 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	e165      	b.n	8005ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4013      	ands	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	f040 8154 	bne.w	8005e9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d005      	beq.n	8005c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d130      	bne.n	8005c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	2203      	movs	r2, #3
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c40:	2201      	movs	r2, #1
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	f003 0201 	and.w	r2, r3, #1
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d017      	beq.n	8005ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	2203      	movs	r2, #3
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d123      	bne.n	8005cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	08da      	lsrs	r2, r3, #3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3208      	adds	r2, #8
 8005cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	220f      	movs	r2, #15
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	08da      	lsrs	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3208      	adds	r2, #8
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	2203      	movs	r2, #3
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 0203 	and.w	r2, r3, #3
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80ae 	beq.w	8005e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	4b5d      	ldr	r3, [pc, #372]	@ (8005eb8 <HAL_GPIO_Init+0x300>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	4a5c      	ldr	r2, [pc, #368]	@ (8005eb8 <HAL_GPIO_Init+0x300>)
 8005d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8005eb8 <HAL_GPIO_Init+0x300>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d5a:	4a58      	ldr	r2, [pc, #352]	@ (8005ebc <HAL_GPIO_Init+0x304>)
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	3302      	adds	r3, #2
 8005d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	220f      	movs	r2, #15
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a4f      	ldr	r2, [pc, #316]	@ (8005ec0 <HAL_GPIO_Init+0x308>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d025      	beq.n	8005dd2 <HAL_GPIO_Init+0x21a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a4e      	ldr	r2, [pc, #312]	@ (8005ec4 <HAL_GPIO_Init+0x30c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01f      	beq.n	8005dce <HAL_GPIO_Init+0x216>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a4d      	ldr	r2, [pc, #308]	@ (8005ec8 <HAL_GPIO_Init+0x310>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d019      	beq.n	8005dca <HAL_GPIO_Init+0x212>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a4c      	ldr	r2, [pc, #304]	@ (8005ecc <HAL_GPIO_Init+0x314>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_GPIO_Init+0x20e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ed0 <HAL_GPIO_Init+0x318>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00d      	beq.n	8005dc2 <HAL_GPIO_Init+0x20a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed4 <HAL_GPIO_Init+0x31c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <HAL_GPIO_Init+0x206>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a49      	ldr	r2, [pc, #292]	@ (8005ed8 <HAL_GPIO_Init+0x320>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <HAL_GPIO_Init+0x202>
 8005db6:	2306      	movs	r3, #6
 8005db8:	e00c      	b.n	8005dd4 <HAL_GPIO_Init+0x21c>
 8005dba:	2307      	movs	r3, #7
 8005dbc:	e00a      	b.n	8005dd4 <HAL_GPIO_Init+0x21c>
 8005dbe:	2305      	movs	r3, #5
 8005dc0:	e008      	b.n	8005dd4 <HAL_GPIO_Init+0x21c>
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	e006      	b.n	8005dd4 <HAL_GPIO_Init+0x21c>
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e004      	b.n	8005dd4 <HAL_GPIO_Init+0x21c>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e002      	b.n	8005dd4 <HAL_GPIO_Init+0x21c>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <HAL_GPIO_Init+0x21c>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	f002 0203 	and.w	r2, r2, #3
 8005dda:	0092      	lsls	r2, r2, #2
 8005ddc:	4093      	lsls	r3, r2
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005de4:	4935      	ldr	r1, [pc, #212]	@ (8005ebc <HAL_GPIO_Init+0x304>)
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	3302      	adds	r3, #2
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005df2:	4b3a      	ldr	r3, [pc, #232]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e16:	4a31      	ldr	r2, [pc, #196]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	43db      	mvns	r3, r3
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e40:	4a26      	ldr	r2, [pc, #152]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e46:	4b25      	ldr	r3, [pc, #148]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4013      	ands	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e70:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e94:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <HAL_GPIO_Init+0x324>)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	f67f ae96 	bls.w	8005bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	3724      	adds	r7, #36	@ 0x24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40013800 	.word	0x40013800
 8005ec0:	40020000 	.word	0x40020000
 8005ec4:	40020400 	.word	0x40020400
 8005ec8:	40020800 	.word	0x40020800
 8005ecc:	40020c00 	.word	0x40020c00
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40021400 	.word	0x40021400
 8005ed8:	40021800 	.word	0x40021800
 8005edc:	40013c00 	.word	0x40013c00

08005ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	807b      	strh	r3, [r7, #2]
 8005eec:	4613      	mov	r3, r2
 8005eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ef0:	787b      	ldrb	r3, [r7, #1]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005efc:	e003      	b.n	8005f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	041a      	lsls	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	619a      	str	r2, [r3, #24]
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e12b      	b.n	800617e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fd fcc0 	bl	80038c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2224      	movs	r2, #36	@ 0x24
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f78:	f001 fbe0 	bl	800773c <HAL_RCC_GetPCLK1Freq>
 8005f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4a81      	ldr	r2, [pc, #516]	@ (8006188 <HAL_I2C_Init+0x274>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d807      	bhi.n	8005f98 <HAL_I2C_Init+0x84>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a80      	ldr	r2, [pc, #512]	@ (800618c <HAL_I2C_Init+0x278>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bf94      	ite	ls
 8005f90:	2301      	movls	r3, #1
 8005f92:	2300      	movhi	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e006      	b.n	8005fa6 <HAL_I2C_Init+0x92>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a7d      	ldr	r2, [pc, #500]	@ (8006190 <HAL_I2C_Init+0x27c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bf94      	ite	ls
 8005fa0:	2301      	movls	r3, #1
 8005fa2:	2300      	movhi	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e0e7      	b.n	800617e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a78      	ldr	r2, [pc, #480]	@ (8006194 <HAL_I2C_Init+0x280>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	0c9b      	lsrs	r3, r3, #18
 8005fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8006188 <HAL_I2C_Init+0x274>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d802      	bhi.n	8005fe8 <HAL_I2C_Init+0xd4>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	e009      	b.n	8005ffc <HAL_I2C_Init+0xe8>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	4a69      	ldr	r2, [pc, #420]	@ (8006198 <HAL_I2C_Init+0x284>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	099b      	lsrs	r3, r3, #6
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	430b      	orrs	r3, r1
 8006002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800600e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	495c      	ldr	r1, [pc, #368]	@ (8006188 <HAL_I2C_Init+0x274>)
 8006018:	428b      	cmp	r3, r1
 800601a:	d819      	bhi.n	8006050 <HAL_I2C_Init+0x13c>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	1e59      	subs	r1, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	fbb1 f3f3 	udiv	r3, r1, r3
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006030:	400b      	ands	r3, r1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_I2C_Init+0x138>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1e59      	subs	r1, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	fbb1 f3f3 	udiv	r3, r1, r3
 8006044:	3301      	adds	r3, #1
 8006046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800604a:	e051      	b.n	80060f0 <HAL_I2C_Init+0x1dc>
 800604c:	2304      	movs	r3, #4
 800604e:	e04f      	b.n	80060f0 <HAL_I2C_Init+0x1dc>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d111      	bne.n	800607c <HAL_I2C_Init+0x168>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1e58      	subs	r0, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	440b      	add	r3, r1
 8006066:	fbb0 f3f3 	udiv	r3, r0, r3
 800606a:	3301      	adds	r3, #1
 800606c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e012      	b.n	80060a2 <HAL_I2C_Init+0x18e>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1e58      	subs	r0, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6859      	ldr	r1, [r3, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	0099      	lsls	r1, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006092:	3301      	adds	r3, #1
 8006094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_I2C_Init+0x196>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e022      	b.n	80060f0 <HAL_I2C_Init+0x1dc>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10e      	bne.n	80060d0 <HAL_I2C_Init+0x1bc>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1e58      	subs	r0, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6859      	ldr	r1, [r3, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	440b      	add	r3, r1
 80060c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80060c4:	3301      	adds	r3, #1
 80060c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ce:	e00f      	b.n	80060f0 <HAL_I2C_Init+0x1dc>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1e58      	subs	r0, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6859      	ldr	r1, [r3, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	0099      	lsls	r1, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060e6:	3301      	adds	r3, #1
 80060e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	6809      	ldr	r1, [r1, #0]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800611e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6911      	ldr	r1, [r2, #16]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68d2      	ldr	r2, [r2, #12]
 800612a:	4311      	orrs	r1, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	430b      	orrs	r3, r1
 8006132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695a      	ldr	r2, [r3, #20]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	000186a0 	.word	0x000186a0
 800618c:	001e847f 	.word	0x001e847f
 8006190:	003d08ff 	.word	0x003d08ff
 8006194:	431bde83 	.word	0x431bde83
 8006198:	10624dd3 	.word	0x10624dd3

0800619c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	461a      	mov	r2, r3
 80061a8:	460b      	mov	r3, r1
 80061aa:	817b      	strh	r3, [r7, #10]
 80061ac:	4613      	mov	r3, r2
 80061ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061b0:	f7fe fc34 	bl	8004a1c <HAL_GetTick>
 80061b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b20      	cmp	r3, #32
 80061c0:	f040 80e0 	bne.w	8006384 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	2319      	movs	r3, #25
 80061ca:	2201      	movs	r2, #1
 80061cc:	4970      	ldr	r1, [pc, #448]	@ (8006390 <HAL_I2C_Master_Transmit+0x1f4>)
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 ff3c 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
 80061dc:	e0d3      	b.n	8006386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_I2C_Master_Transmit+0x50>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e0cc      	b.n	8006386 <HAL_I2C_Master_Transmit+0x1ea>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d007      	beq.n	8006212 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0201 	orr.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2221      	movs	r2, #33	@ 0x21
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2210      	movs	r2, #16
 800622e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	893a      	ldrh	r2, [r7, #8]
 8006242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a50      	ldr	r2, [pc, #320]	@ (8006394 <HAL_I2C_Master_Transmit+0x1f8>)
 8006252:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006254:	8979      	ldrh	r1, [r7, #10]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fcf6 	bl	8006c4c <I2C_MasterRequestWrite>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e08d      	b.n	8006386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006280:	e066      	b.n	8006350 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	6a39      	ldr	r1, [r7, #32]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fffa 	bl	8007280 <I2C_WaitOnTXEFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	2b04      	cmp	r3, #4
 8006298:	d107      	bne.n	80062aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e06b      	b.n	8006386 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	781a      	ldrb	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d11b      	bne.n	8006324 <HAL_I2C_Master_Transmit+0x188>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	6a39      	ldr	r1, [r7, #32]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fff1 	bl	8007310 <I2C_WaitOnBTFFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	2b04      	cmp	r3, #4
 800633a:	d107      	bne.n	800634c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e01a      	b.n	8006386 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	d194      	bne.n	8006282 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	00100002 	.word	0x00100002
 8006394:	ffff0000 	.word	0xffff0000

08006398 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af02      	add	r7, sp, #8
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	4608      	mov	r0, r1
 80063a2:	4611      	mov	r1, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	817b      	strh	r3, [r7, #10]
 80063aa:	460b      	mov	r3, r1
 80063ac:	813b      	strh	r3, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063b2:	f7fe fb33 	bl	8004a1c <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	f040 80d9 	bne.w	8006578 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	2319      	movs	r3, #25
 80063cc:	2201      	movs	r2, #1
 80063ce:	496d      	ldr	r1, [pc, #436]	@ (8006584 <HAL_I2C_Mem_Write+0x1ec>)
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fe3b 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
 80063de:	e0cc      	b.n	800657a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_I2C_Mem_Write+0x56>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e0c5      	b.n	800657a <HAL_I2C_Mem_Write+0x1e2>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d007      	beq.n	8006414 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2221      	movs	r2, #33	@ 0x21
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2240      	movs	r2, #64	@ 0x40
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006444:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a4d      	ldr	r2, [pc, #308]	@ (8006588 <HAL_I2C_Mem_Write+0x1f0>)
 8006454:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006456:	88f8      	ldrh	r0, [r7, #6]
 8006458:	893a      	ldrh	r2, [r7, #8]
 800645a:	8979      	ldrh	r1, [r7, #10]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	4603      	mov	r3, r0
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 fc72 	bl	8006d50 <I2C_RequestMemoryWrite>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d052      	beq.n	8006518 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e081      	b.n	800657a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 ff00 	bl	8007280 <I2C_WaitOnTXEFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00d      	beq.n	80064a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	2b04      	cmp	r3, #4
 800648c:	d107      	bne.n	800649e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800649c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e06b      	b.n	800657a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d11b      	bne.n	8006518 <HAL_I2C_Mem_Write+0x180>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d017      	beq.n	8006518 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1aa      	bne.n	8006476 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fef3 	bl	8007310 <I2C_WaitOnBTFFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006534:	2b04      	cmp	r3, #4
 8006536:	d107      	bne.n	8006548 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006546:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e016      	b.n	800657a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800655a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	e000      	b.n	800657a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006578:	2302      	movs	r3, #2
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	00100002 	.word	0x00100002
 8006588:	ffff0000 	.word	0xffff0000

0800658c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	@ 0x30
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	817b      	strh	r3, [r7, #10]
 800659e:	460b      	mov	r3, r1
 80065a0:	813b      	strh	r3, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065a6:	f7fe fa39 	bl	8004a1c <HAL_GetTick>
 80065aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	f040 8214 	bne.w	80069e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2319      	movs	r3, #25
 80065c0:	2201      	movs	r2, #1
 80065c2:	497b      	ldr	r1, [pc, #492]	@ (80067b0 <HAL_I2C_Mem_Read+0x224>)
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fd41 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
 80065d2:	e207      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_I2C_Mem_Read+0x56>
 80065de:	2302      	movs	r3, #2
 80065e0:	e200      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d007      	beq.n	8006608 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2222      	movs	r2, #34	@ 0x22
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2240      	movs	r2, #64	@ 0x40
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a5b      	ldr	r2, [pc, #364]	@ (80067b4 <HAL_I2C_Mem_Read+0x228>)
 8006648:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800664a:	88f8      	ldrh	r0, [r7, #6]
 800664c:	893a      	ldrh	r2, [r7, #8]
 800664e:	8979      	ldrh	r1, [r7, #10]
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	4603      	mov	r3, r0
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fc0e 	bl	8006e7c <I2C_RequestMemoryRead>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e1bc      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d113      	bne.n	800669a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006672:	2300      	movs	r3, #0
 8006674:	623b      	str	r3, [r7, #32]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e190      	b.n	80069bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d11b      	bne.n	80066da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	e170      	b.n	80069bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d11b      	bne.n	800671a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	e150      	b.n	80069bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006730:	e144      	b.n	80069bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006736:	2b03      	cmp	r3, #3
 8006738:	f200 80f1 	bhi.w	800691e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006740:	2b01      	cmp	r3, #1
 8006742:	d123      	bne.n	800678c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006746:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fe29 	bl	80073a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e145      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800678a:	e117      	b.n	80069bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006790:	2b02      	cmp	r3, #2
 8006792:	d14e      	bne.n	8006832 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	2200      	movs	r2, #0
 800679c:	4906      	ldr	r1, [pc, #24]	@ (80067b8 <HAL_I2C_Mem_Read+0x22c>)
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fc54 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d008      	beq.n	80067bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e11a      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
 80067ae:	bf00      	nop
 80067b0:	00100002 	.word	0x00100002
 80067b4:	ffff0000 	.word	0xffff0000
 80067b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006830:	e0c4      	b.n	80069bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	2200      	movs	r2, #0
 800683a:	496c      	ldr	r1, [pc, #432]	@ (80069ec <HAL_I2C_Mem_Read+0x460>)
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fc05 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0cb      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800685a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	2200      	movs	r2, #0
 8006896:	4955      	ldr	r1, [pc, #340]	@ (80069ec <HAL_I2C_Mem_Read+0x460>)
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fbd7 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e09d      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800691c:	e04e      	b.n	80069bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800691e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006920:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fd3c 	bl	80073a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e058      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b04      	cmp	r3, #4
 8006970:	d124      	bne.n	80069bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006976:	2b03      	cmp	r3, #3
 8006978:	d107      	bne.n	800698a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006988:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f47f aeb6 	bne.w	8006732 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80069e2:	2302      	movs	r3, #2
  }
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3728      	adds	r7, #40	@ 0x28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	00010004 	.word	0x00010004

080069f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	@ 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	607a      	str	r2, [r7, #4]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	460b      	mov	r3, r1
 80069fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006a00:	f7fe f80c 	bl	8004a1c <HAL_GetTick>
 8006a04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	f040 8111 	bne.w	8006c3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	2319      	movs	r3, #25
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4988      	ldr	r1, [pc, #544]	@ (8006c44 <HAL_I2C_IsDeviceReady+0x254>)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fb12 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e104      	b.n	8006c3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_I2C_IsDeviceReady+0x50>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e0fd      	b.n	8006c3c <HAL_I2C_IsDeviceReady+0x24c>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d007      	beq.n	8006a66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2224      	movs	r2, #36	@ 0x24
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a70      	ldr	r2, [pc, #448]	@ (8006c48 <HAL_I2C_IsDeviceReady+0x258>)
 8006a88:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fad0 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac0:	d103      	bne.n	8006aca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ac8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e0b6      	b.n	8006c3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ace:	897b      	ldrh	r3, [r7, #10]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006adc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006ade:	f7fd ff9d 	bl	8004a1c <HAL_GetTick>
 8006ae2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b08:	bf0c      	ite	eq
 8006b0a:	2301      	moveq	r3, #1
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b12:	e025      	b.n	8006b60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b14:	f7fd ff82 	bl	8004a1c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <HAL_I2C_IsDeviceReady+0x13a>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	22a0      	movs	r2, #160	@ 0xa0
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b56:	bf0c      	ite	eq
 8006b58:	2301      	moveq	r3, #1
 8006b5a:	2300      	movne	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b6a:	d005      	beq.n	8006b78 <HAL_I2C_IsDeviceReady+0x188>
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <HAL_I2C_IsDeviceReady+0x188>
 8006b72:	7dbb      	ldrb	r3, [r7, #22]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0cd      	beq.n	8006b14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d129      	bne.n	8006be2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2319      	movs	r3, #25
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4921      	ldr	r1, [pc, #132]	@ (8006c44 <HAL_I2C_IsDeviceReady+0x254>)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fa44 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e036      	b.n	8006c3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e02c      	b.n	8006c3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bf0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	2319      	movs	r3, #25
 8006c02:	2201      	movs	r2, #1
 8006c04:	490f      	ldr	r1, [pc, #60]	@ (8006c44 <HAL_I2C_IsDeviceReady+0x254>)
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fa20 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e012      	b.n	8006c3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	f4ff af32 	bcc.w	8006a8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006c3a:	2302      	movs	r3, #2
  }
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	00100002 	.word	0x00100002
 8006c48:	ffff0000 	.word	0xffff0000

08006c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d006      	beq.n	8006c76 <I2C_MasterRequestWrite+0x2a>
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d003      	beq.n	8006c76 <I2C_MasterRequestWrite+0x2a>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c74:	d108      	bne.n	8006c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e00b      	b.n	8006ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8c:	2b12      	cmp	r3, #18
 8006c8e:	d107      	bne.n	8006ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f9cd 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00d      	beq.n	8006cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc6:	d103      	bne.n	8006cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e035      	b.n	8006d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cdc:	d108      	bne.n	8006cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cde:	897b      	ldrh	r3, [r7, #10]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006cec:	611a      	str	r2, [r3, #16]
 8006cee:	e01b      	b.n	8006d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006cf0:	897b      	ldrh	r3, [r7, #10]
 8006cf2:	11db      	asrs	r3, r3, #7
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f003 0306 	and.w	r3, r3, #6
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f063 030f 	orn	r3, r3, #15
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	490e      	ldr	r1, [pc, #56]	@ (8006d48 <I2C_MasterRequestWrite+0xfc>)
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fa16 	bl	8007140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e010      	b.n	8006d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d1e:	897b      	ldrh	r3, [r7, #10]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4907      	ldr	r1, [pc, #28]	@ (8006d4c <I2C_MasterRequestWrite+0x100>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fa06 	bl	8007140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	00010008 	.word	0x00010008
 8006d4c:	00010002 	.word	0x00010002

08006d50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	4608      	mov	r0, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	817b      	strh	r3, [r7, #10]
 8006d62:	460b      	mov	r3, r1
 8006d64:	813b      	strh	r3, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f960 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00d      	beq.n	8006dae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da0:	d103      	bne.n	8006daa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006da8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e05f      	b.n	8006e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dae:	897b      	ldrh	r3, [r7, #10]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006dbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	6a3a      	ldr	r2, [r7, #32]
 8006dc2:	492d      	ldr	r1, [pc, #180]	@ (8006e78 <I2C_RequestMemoryWrite+0x128>)
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f9bb 	bl	8007140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e04c      	b.n	8006e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dec:	6a39      	ldr	r1, [r7, #32]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fa46 	bl	8007280 <I2C_WaitOnTXEFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d107      	bne.n	8006e12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e02b      	b.n	8006e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d105      	bne.n	8006e28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e1c:	893b      	ldrh	r3, [r7, #8]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	611a      	str	r2, [r3, #16]
 8006e26:	e021      	b.n	8006e6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e28:	893b      	ldrh	r3, [r7, #8]
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e38:	6a39      	ldr	r1, [r7, #32]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fa20 	bl	8007280 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d107      	bne.n	8006e5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e005      	b.n	8006e6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e62:	893b      	ldrh	r3, [r7, #8]
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	00010002 	.word	0x00010002

08006e7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	817b      	strh	r3, [r7, #10]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	813b      	strh	r3, [r7, #8]
 8006e92:	4613      	mov	r3, r2
 8006e94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f8c2 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00d      	beq.n	8006eea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006edc:	d103      	bne.n	8006ee6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ee4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e0aa      	b.n	8007040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eea:	897b      	ldrh	r3, [r7, #10]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	6a3a      	ldr	r2, [r7, #32]
 8006efe:	4952      	ldr	r1, [pc, #328]	@ (8007048 <I2C_RequestMemoryRead+0x1cc>)
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f91d 	bl	8007140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e097      	b.n	8007040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f28:	6a39      	ldr	r1, [r7, #32]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f9a8 	bl	8007280 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d107      	bne.n	8006f4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e076      	b.n	8007040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d105      	bne.n	8006f64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f58:	893b      	ldrh	r3, [r7, #8]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	611a      	str	r2, [r3, #16]
 8006f62:	e021      	b.n	8006fa8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f64:	893b      	ldrh	r3, [r7, #8]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	6a39      	ldr	r1, [r7, #32]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f982 	bl	8007280 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d107      	bne.n	8006f9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e050      	b.n	8007040 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f9e:	893b      	ldrh	r3, [r7, #8]
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006faa:	6a39      	ldr	r1, [r7, #32]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f967 	bl	8007280 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d107      	bne.n	8006fd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e035      	b.n	8007040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fe2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f82b 	bl	800704c <I2C_WaitOnFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00d      	beq.n	8007018 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800700a:	d103      	bne.n	8007014 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007012:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e013      	b.n	8007040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007018:	897b      	ldrh	r3, [r7, #10]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	b2da      	uxtb	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	4906      	ldr	r1, [pc, #24]	@ (8007048 <I2C_RequestMemoryRead+0x1cc>)
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f886 	bl	8007140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	00010002 	.word	0x00010002

0800704c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800705c:	e048      	b.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d044      	beq.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007066:	f7fd fcd9 	bl	8004a1c <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d139      	bne.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	0c1b      	lsrs	r3, r3, #16
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b01      	cmp	r3, #1
 8007084:	d10d      	bne.n	80070a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	43da      	mvns	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4013      	ands	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf0c      	ite	eq
 8007098:	2301      	moveq	r3, #1
 800709a:	2300      	movne	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	e00c      	b.n	80070bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	43da      	mvns	r2, r3
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4013      	ands	r3, r2
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d116      	bne.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e023      	b.n	8007138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d10d      	bne.n	8007116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	43da      	mvns	r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4013      	ands	r3, r2
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	e00c      	b.n	8007130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	43da      	mvns	r2, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	429a      	cmp	r2, r3
 8007134:	d093      	beq.n	800705e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800714e:	e071      	b.n	8007234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800715a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800715e:	d123      	bne.n	80071a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800716e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007194:	f043 0204 	orr.w	r2, r3, #4
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e067      	b.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ae:	d041      	beq.n	8007234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b0:	f7fd fc34 	bl	8004a1c <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d302      	bcc.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d136      	bne.n	8007234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10c      	bne.n	80071ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	43da      	mvns	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4013      	ands	r3, r2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bf14      	ite	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	2300      	moveq	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	e00b      	b.n	8007202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	43da      	mvns	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4013      	ands	r3, r2
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bf14      	ite	ne
 80071fc:	2301      	movne	r3, #1
 80071fe:	2300      	moveq	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e021      	b.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	0c1b      	lsrs	r3, r3, #16
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b01      	cmp	r3, #1
 800723c:	d10c      	bne.n	8007258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	43da      	mvns	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	4013      	ands	r3, r2
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e00b      	b.n	8007270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	43da      	mvns	r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4013      	ands	r3, r2
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	bf14      	ite	ne
 800726a:	2301      	movne	r3, #1
 800726c:	2300      	moveq	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f af6d 	bne.w	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800728c:	e034      	b.n	80072f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f8e3 	bl	800745a <I2C_IsAcknowledgeFailed>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e034      	b.n	8007308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d028      	beq.n	80072f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a6:	f7fd fbb9 	bl	8004a1c <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d302      	bcc.n	80072bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d11d      	bne.n	80072f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c6:	2b80      	cmp	r3, #128	@ 0x80
 80072c8:	d016      	beq.n	80072f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e4:	f043 0220 	orr.w	r2, r3, #32
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e007      	b.n	8007308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007302:	2b80      	cmp	r3, #128	@ 0x80
 8007304:	d1c3      	bne.n	800728e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800731c:	e034      	b.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f89b 	bl	800745a <I2C_IsAcknowledgeFailed>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e034      	b.n	8007398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d028      	beq.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7fd fb71 	bl	8004a1c <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d11d      	bne.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b04      	cmp	r3, #4
 8007358:	d016      	beq.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007374:	f043 0220 	orr.w	r2, r3, #32
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e007      	b.n	8007398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b04      	cmp	r3, #4
 8007394:	d1c3      	bne.n	800731e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073ac:	e049      	b.n	8007442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d119      	bne.n	80073f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0210 	mvn.w	r2, #16
 80073c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e030      	b.n	8007452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f0:	f7fd fb14 	bl	8004a1c <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d302      	bcc.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d11d      	bne.n	8007442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007410:	2b40      	cmp	r3, #64	@ 0x40
 8007412:	d016      	beq.n	8007442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	f043 0220 	orr.w	r2, r3, #32
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e007      	b.n	8007452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744c:	2b40      	cmp	r3, #64	@ 0x40
 800744e:	d1ae      	bne.n	80073ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800746c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007470:	d11b      	bne.n	80074aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800747a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80074c2:	2300      	movs	r3, #0
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	4b20      	ldr	r3, [pc, #128]	@ (8007548 <HAL_PWREx_EnableOverDrive+0x90>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007548 <HAL_PWREx_EnableOverDrive+0x90>)
 80074cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80074d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007548 <HAL_PWREx_EnableOverDrive+0x90>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074de:	4b1b      	ldr	r3, [pc, #108]	@ (800754c <HAL_PWREx_EnableOverDrive+0x94>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074e4:	f7fd fa9a 	bl	8004a1c <HAL_GetTick>
 80074e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074ea:	e009      	b.n	8007500 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074ec:	f7fd fa96 	bl	8004a1c <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074fa:	d901      	bls.n	8007500 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e01f      	b.n	8007540 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007500:	4b13      	ldr	r3, [pc, #76]	@ (8007550 <HAL_PWREx_EnableOverDrive+0x98>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800750c:	d1ee      	bne.n	80074ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800750e:	4b11      	ldr	r3, [pc, #68]	@ (8007554 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007514:	f7fd fa82 	bl	8004a1c <HAL_GetTick>
 8007518:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800751a:	e009      	b.n	8007530 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800751c:	f7fd fa7e 	bl	8004a1c <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800752a:	d901      	bls.n	8007530 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e007      	b.n	8007540 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007530:	4b07      	ldr	r3, [pc, #28]	@ (8007550 <HAL_PWREx_EnableOverDrive+0x98>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800753c:	d1ee      	bne.n	800751c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	40023800 	.word	0x40023800
 800754c:	420e0040 	.word	0x420e0040
 8007550:	40007000 	.word	0x40007000
 8007554:	420e0044 	.word	0x420e0044

08007558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e0cc      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800756c:	4b68      	ldr	r3, [pc, #416]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d90c      	bls.n	8007594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757a:	4b65      	ldr	r3, [pc, #404]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	4b63      	ldr	r3, [pc, #396]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d001      	beq.n	8007594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0b8      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d020      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075ac:	4b59      	ldr	r3, [pc, #356]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4a58      	ldr	r2, [pc, #352]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075c4:	4b53      	ldr	r3, [pc, #332]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a52      	ldr	r2, [pc, #328]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d0:	4b50      	ldr	r3, [pc, #320]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	494d      	ldr	r1, [pc, #308]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d044      	beq.n	8007678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f6:	4b47      	ldr	r3, [pc, #284]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d119      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e07f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d003      	beq.n	8007616 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007612:	2b03      	cmp	r3, #3
 8007614:	d107      	bne.n	8007626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007616:	4b3f      	ldr	r3, [pc, #252]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e06f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007626:	4b3b      	ldr	r3, [pc, #236]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e067      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007636:	4b37      	ldr	r3, [pc, #220]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f023 0203 	bic.w	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	4934      	ldr	r1, [pc, #208]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007644:	4313      	orrs	r3, r2
 8007646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007648:	f7fd f9e8 	bl	8004a1c <HAL_GetTick>
 800764c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800764e:	e00a      	b.n	8007666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007650:	f7fd f9e4 	bl	8004a1c <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800765e:	4293      	cmp	r3, r2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e04f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007666:	4b2b      	ldr	r3, [pc, #172]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 020c 	and.w	r2, r3, #12
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	429a      	cmp	r2, r3
 8007676:	d1eb      	bne.n	8007650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007678:	4b25      	ldr	r3, [pc, #148]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d20c      	bcs.n	80076a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007686:	4b22      	ldr	r3, [pc, #136]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800768e:	4b20      	ldr	r3, [pc, #128]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e032      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ac:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4916      	ldr	r1, [pc, #88]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ca:	4b12      	ldr	r3, [pc, #72]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	490e      	ldr	r1, [pc, #56]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076de:	f000 f855 	bl	800778c <HAL_RCC_GetSysClockFreq>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	490a      	ldr	r1, [pc, #40]	@ (8007718 <HAL_RCC_ClockConfig+0x1c0>)
 80076f0:	5ccb      	ldrb	r3, [r1, r3]
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	4a09      	ldr	r2, [pc, #36]	@ (800771c <HAL_RCC_ClockConfig+0x1c4>)
 80076f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80076fa:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <HAL_RCC_ClockConfig+0x1c8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd f948 	bl	8004994 <HAL_InitTick>

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40023c00 	.word	0x40023c00
 8007714:	40023800 	.word	0x40023800
 8007718:	0800c598 	.word	0x0800c598
 800771c:	20000004 	.word	0x20000004
 8007720:	20000008 	.word	0x20000008

08007724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007728:	4b03      	ldr	r3, [pc, #12]	@ (8007738 <HAL_RCC_GetHCLKFreq+0x14>)
 800772a:	681b      	ldr	r3, [r3, #0]
}
 800772c:	4618      	mov	r0, r3
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	20000004 	.word	0x20000004

0800773c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007740:	f7ff fff0 	bl	8007724 <HAL_RCC_GetHCLKFreq>
 8007744:	4602      	mov	r2, r0
 8007746:	4b05      	ldr	r3, [pc, #20]	@ (800775c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	0a9b      	lsrs	r3, r3, #10
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	4903      	ldr	r1, [pc, #12]	@ (8007760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007752:	5ccb      	ldrb	r3, [r1, r3]
 8007754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007758:	4618      	mov	r0, r3
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40023800 	.word	0x40023800
 8007760:	0800c5a8 	.word	0x0800c5a8

08007764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007768:	f7ff ffdc 	bl	8007724 <HAL_RCC_GetHCLKFreq>
 800776c:	4602      	mov	r2, r0
 800776e:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	0b5b      	lsrs	r3, r3, #13
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	4903      	ldr	r1, [pc, #12]	@ (8007788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800777a:	5ccb      	ldrb	r3, [r1, r3]
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007780:	4618      	mov	r0, r3
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40023800 	.word	0x40023800
 8007788:	0800c5a8 	.word	0x0800c5a8

0800778c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800778c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007790:	b0ae      	sub	sp, #184	@ 0xb8
 8007792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b2:	4bcb      	ldr	r3, [pc, #812]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 030c 	and.w	r3, r3, #12
 80077ba:	2b0c      	cmp	r3, #12
 80077bc:	f200 8206 	bhi.w	8007bcc <HAL_RCC_GetSysClockFreq+0x440>
 80077c0:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	08007bcd 	.word	0x08007bcd
 80077d0:	08007bcd 	.word	0x08007bcd
 80077d4:	08007bcd 	.word	0x08007bcd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	08007bcd 	.word	0x08007bcd
 80077e0:	08007bcd 	.word	0x08007bcd
 80077e4:	08007bcd 	.word	0x08007bcd
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	08007bcd 	.word	0x08007bcd
 80077f0:	08007bcd 	.word	0x08007bcd
 80077f4:	08007bcd 	.word	0x08007bcd
 80077f8:	080079fd 	.word	0x080079fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077fc:	4bb9      	ldr	r3, [pc, #740]	@ (8007ae4 <HAL_RCC_GetSysClockFreq+0x358>)
 80077fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007802:	e1e7      	b.n	8007bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007804:	4bb8      	ldr	r3, [pc, #736]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800780a:	e1e3      	b.n	8007bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800780c:	4bb4      	ldr	r3, [pc, #720]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007814:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007818:	4bb1      	ldr	r3, [pc, #708]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d071      	beq.n	8007908 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007824:	4bae      	ldr	r3, [pc, #696]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	099b      	lsrs	r3, r3, #6
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007830:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800784a:	4622      	mov	r2, r4
 800784c:	462b      	mov	r3, r5
 800784e:	f04f 0000 	mov.w	r0, #0
 8007852:	f04f 0100 	mov.w	r1, #0
 8007856:	0159      	lsls	r1, r3, #5
 8007858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800785c:	0150      	lsls	r0, r2, #5
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4621      	mov	r1, r4
 8007864:	1a51      	subs	r1, r2, r1
 8007866:	6439      	str	r1, [r7, #64]	@ 0x40
 8007868:	4629      	mov	r1, r5
 800786a:	eb63 0301 	sbc.w	r3, r3, r1
 800786e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800787c:	4649      	mov	r1, r9
 800787e:	018b      	lsls	r3, r1, #6
 8007880:	4641      	mov	r1, r8
 8007882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007886:	4641      	mov	r1, r8
 8007888:	018a      	lsls	r2, r1, #6
 800788a:	4641      	mov	r1, r8
 800788c:	1a51      	subs	r1, r2, r1
 800788e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007890:	4649      	mov	r1, r9
 8007892:	eb63 0301 	sbc.w	r3, r3, r1
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80078a4:	4649      	mov	r1, r9
 80078a6:	00cb      	lsls	r3, r1, #3
 80078a8:	4641      	mov	r1, r8
 80078aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ae:	4641      	mov	r1, r8
 80078b0:	00ca      	lsls	r2, r1, #3
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	4622      	mov	r2, r4
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80078be:	462b      	mov	r3, r5
 80078c0:	460a      	mov	r2, r1
 80078c2:	eb42 0303 	adc.w	r3, r2, r3
 80078c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	f04f 0300 	mov.w	r3, #0
 80078d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80078d4:	4629      	mov	r1, r5
 80078d6:	024b      	lsls	r3, r1, #9
 80078d8:	4621      	mov	r1, r4
 80078da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80078de:	4621      	mov	r1, r4
 80078e0:	024a      	lsls	r2, r1, #9
 80078e2:	4610      	mov	r0, r2
 80078e4:	4619      	mov	r1, r3
 80078e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80078f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80078f8:	f7f9 f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4613      	mov	r3, r2
 8007902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007906:	e067      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007908:	4b75      	ldr	r3, [pc, #468]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	099b      	lsrs	r3, r3, #6
 800790e:	2200      	movs	r2, #0
 8007910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007914:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007918:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007922:	2300      	movs	r3, #0
 8007924:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007926:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800792a:	4622      	mov	r2, r4
 800792c:	462b      	mov	r3, r5
 800792e:	f04f 0000 	mov.w	r0, #0
 8007932:	f04f 0100 	mov.w	r1, #0
 8007936:	0159      	lsls	r1, r3, #5
 8007938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800793c:	0150      	lsls	r0, r2, #5
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4621      	mov	r1, r4
 8007944:	1a51      	subs	r1, r2, r1
 8007946:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007948:	4629      	mov	r1, r5
 800794a:	eb63 0301 	sbc.w	r3, r3, r1
 800794e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800795c:	4649      	mov	r1, r9
 800795e:	018b      	lsls	r3, r1, #6
 8007960:	4641      	mov	r1, r8
 8007962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007966:	4641      	mov	r1, r8
 8007968:	018a      	lsls	r2, r1, #6
 800796a:	4641      	mov	r1, r8
 800796c:	ebb2 0a01 	subs.w	sl, r2, r1
 8007970:	4649      	mov	r1, r9
 8007972:	eb63 0b01 	sbc.w	fp, r3, r1
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007982:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800798a:	4692      	mov	sl, r2
 800798c:	469b      	mov	fp, r3
 800798e:	4623      	mov	r3, r4
 8007990:	eb1a 0303 	adds.w	r3, sl, r3
 8007994:	623b      	str	r3, [r7, #32]
 8007996:	462b      	mov	r3, r5
 8007998:	eb4b 0303 	adc.w	r3, fp, r3
 800799c:	627b      	str	r3, [r7, #36]	@ 0x24
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80079aa:	4629      	mov	r1, r5
 80079ac:	028b      	lsls	r3, r1, #10
 80079ae:	4621      	mov	r1, r4
 80079b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079b4:	4621      	mov	r1, r4
 80079b6:	028a      	lsls	r2, r1, #10
 80079b8:	4610      	mov	r0, r2
 80079ba:	4619      	mov	r1, r3
 80079bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079c0:	2200      	movs	r2, #0
 80079c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80079c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80079c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80079ca:	f7f9 f95d 	bl	8000c88 <__aeabi_uldivmod>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4613      	mov	r3, r2
 80079d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80079d8:	4b41      	ldr	r3, [pc, #260]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	0c1b      	lsrs	r3, r3, #16
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	3301      	adds	r3, #1
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80079ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80079fa:	e0eb      	b.n	8007bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079fc:	4b38      	ldr	r3, [pc, #224]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a08:	4b35      	ldr	r3, [pc, #212]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d06b      	beq.n	8007aec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a14:	4b32      	ldr	r3, [pc, #200]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	099b      	lsrs	r3, r3, #6
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a28:	2300      	movs	r3, #0
 8007a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007a30:	4622      	mov	r2, r4
 8007a32:	462b      	mov	r3, r5
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f04f 0100 	mov.w	r1, #0
 8007a3c:	0159      	lsls	r1, r3, #5
 8007a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a42:	0150      	lsls	r0, r2, #5
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4621      	mov	r1, r4
 8007a4a:	1a51      	subs	r1, r2, r1
 8007a4c:	61b9      	str	r1, [r7, #24]
 8007a4e:	4629      	mov	r1, r5
 8007a50:	eb63 0301 	sbc.w	r3, r3, r1
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007a62:	4659      	mov	r1, fp
 8007a64:	018b      	lsls	r3, r1, #6
 8007a66:	4651      	mov	r1, sl
 8007a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a6c:	4651      	mov	r1, sl
 8007a6e:	018a      	lsls	r2, r1, #6
 8007a70:	4651      	mov	r1, sl
 8007a72:	ebb2 0801 	subs.w	r8, r2, r1
 8007a76:	4659      	mov	r1, fp
 8007a78:	eb63 0901 	sbc.w	r9, r3, r1
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a90:	4690      	mov	r8, r2
 8007a92:	4699      	mov	r9, r3
 8007a94:	4623      	mov	r3, r4
 8007a96:	eb18 0303 	adds.w	r3, r8, r3
 8007a9a:	613b      	str	r3, [r7, #16]
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	eb49 0303 	adc.w	r3, r9, r3
 8007aa2:	617b      	str	r3, [r7, #20]
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	024b      	lsls	r3, r1, #9
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007aba:	4621      	mov	r1, r4
 8007abc:	024a      	lsls	r2, r1, #9
 8007abe:	4610      	mov	r0, r2
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007aca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ad0:	f7f9 f8da 	bl	8000c88 <__aeabi_uldivmod>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4613      	mov	r3, r2
 8007ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ade:	e065      	b.n	8007bac <HAL_RCC_GetSysClockFreq+0x420>
 8007ae0:	40023800 	.word	0x40023800
 8007ae4:	00f42400 	.word	0x00f42400
 8007ae8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aec:	4b3d      	ldr	r3, [pc, #244]	@ (8007be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	099b      	lsrs	r3, r3, #6
 8007af2:	2200      	movs	r2, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	4611      	mov	r1, r2
 8007af8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007afe:	2300      	movs	r3, #0
 8007b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007b06:	4642      	mov	r2, r8
 8007b08:	464b      	mov	r3, r9
 8007b0a:	f04f 0000 	mov.w	r0, #0
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	0159      	lsls	r1, r3, #5
 8007b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b18:	0150      	lsls	r0, r2, #5
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4641      	mov	r1, r8
 8007b20:	1a51      	subs	r1, r2, r1
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	4649      	mov	r1, r9
 8007b26:	eb63 0301 	sbc.w	r3, r3, r1
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007b38:	4659      	mov	r1, fp
 8007b3a:	018b      	lsls	r3, r1, #6
 8007b3c:	4651      	mov	r1, sl
 8007b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b42:	4651      	mov	r1, sl
 8007b44:	018a      	lsls	r2, r1, #6
 8007b46:	4651      	mov	r1, sl
 8007b48:	1a54      	subs	r4, r2, r1
 8007b4a:	4659      	mov	r1, fp
 8007b4c:	eb63 0501 	sbc.w	r5, r3, r1
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	00eb      	lsls	r3, r5, #3
 8007b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b5e:	00e2      	lsls	r2, r4, #3
 8007b60:	4614      	mov	r4, r2
 8007b62:	461d      	mov	r5, r3
 8007b64:	4643      	mov	r3, r8
 8007b66:	18e3      	adds	r3, r4, r3
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	464b      	mov	r3, r9
 8007b6c:	eb45 0303 	adc.w	r3, r5, r3
 8007b70:	607b      	str	r3, [r7, #4]
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b7e:	4629      	mov	r1, r5
 8007b80:	028b      	lsls	r3, r1, #10
 8007b82:	4621      	mov	r1, r4
 8007b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b88:	4621      	mov	r1, r4
 8007b8a:	028a      	lsls	r2, r1, #10
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4619      	mov	r1, r3
 8007b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b94:	2200      	movs	r2, #0
 8007b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b98:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007b9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b9e:	f7f9 f873 	bl	8000c88 <__aeabi_uldivmod>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007bac:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	0f1b      	lsrs	r3, r3, #28
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007bca:	e003      	b.n	8007bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	@ (8007be8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	37b8      	adds	r7, #184	@ 0xb8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007be2:	bf00      	nop
 8007be4:	40023800 	.word	0x40023800
 8007be8:	00f42400 	.word	0x00f42400

08007bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e28d      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 8083 	beq.w	8007d12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c0c:	4b94      	ldr	r3, [pc, #592]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 030c 	and.w	r3, r3, #12
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d019      	beq.n	8007c4c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007c18:	4b91      	ldr	r3, [pc, #580]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f003 030c 	and.w	r3, r3, #12
        || \
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d106      	bne.n	8007c32 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007c24:	4b8e      	ldr	r3, [pc, #568]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c30:	d00c      	beq.n	8007c4c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c32:	4b8b      	ldr	r3, [pc, #556]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007c3a:	2b0c      	cmp	r3, #12
 8007c3c:	d112      	bne.n	8007c64 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c3e:	4b88      	ldr	r3, [pc, #544]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c4a:	d10b      	bne.n	8007c64 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c4c:	4b84      	ldr	r3, [pc, #528]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05b      	beq.n	8007d10 <HAL_RCC_OscConfig+0x124>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d157      	bne.n	8007d10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e25a      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c6c:	d106      	bne.n	8007c7c <HAL_RCC_OscConfig+0x90>
 8007c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a7b      	ldr	r2, [pc, #492]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	e01d      	b.n	8007cb8 <HAL_RCC_OscConfig+0xcc>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c84:	d10c      	bne.n	8007ca0 <HAL_RCC_OscConfig+0xb4>
 8007c86:	4b76      	ldr	r3, [pc, #472]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a75      	ldr	r2, [pc, #468]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4b73      	ldr	r3, [pc, #460]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a72      	ldr	r2, [pc, #456]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	e00b      	b.n	8007cb8 <HAL_RCC_OscConfig+0xcc>
 8007ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	4b6c      	ldr	r3, [pc, #432]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d013      	beq.n	8007ce8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc0:	f7fc feac 	bl	8004a1c <HAL_GetTick>
 8007cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc6:	e008      	b.n	8007cda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cc8:	f7fc fea8 	bl	8004a1c <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b64      	cmp	r3, #100	@ 0x64
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e21f      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cda:	4b61      	ldr	r3, [pc, #388]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f0      	beq.n	8007cc8 <HAL_RCC_OscConfig+0xdc>
 8007ce6:	e014      	b.n	8007d12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce8:	f7fc fe98 	bl	8004a1c <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cf0:	f7fc fe94 	bl	8004a1c <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b64      	cmp	r3, #100	@ 0x64
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e20b      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d02:	4b57      	ldr	r3, [pc, #348]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x104>
 8007d0e:	e000      	b.n	8007d12 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d06f      	beq.n	8007dfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d1e:	4b50      	ldr	r3, [pc, #320]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d017      	beq.n	8007d5a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007d32:	2b08      	cmp	r3, #8
 8007d34:	d105      	bne.n	8007d42 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007d36:	4b4a      	ldr	r3, [pc, #296]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00b      	beq.n	8007d5a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d42:	4b47      	ldr	r3, [pc, #284]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007d4a:	2b0c      	cmp	r3, #12
 8007d4c:	d11c      	bne.n	8007d88 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d4e:	4b44      	ldr	r3, [pc, #272]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d116      	bne.n	8007d88 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d5a:	4b41      	ldr	r3, [pc, #260]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <HAL_RCC_OscConfig+0x186>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d001      	beq.n	8007d72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e1d3      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d72:	4b3b      	ldr	r3, [pc, #236]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	4937      	ldr	r1, [pc, #220]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d86:	e03a      	b.n	8007dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d020      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d90:	4b34      	ldr	r3, [pc, #208]	@ (8007e64 <HAL_RCC_OscConfig+0x278>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d96:	f7fc fe41 	bl	8004a1c <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d9c:	e008      	b.n	8007db0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d9e:	f7fc fe3d 	bl	8004a1c <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d901      	bls.n	8007db0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e1b4      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db0:	4b2b      	ldr	r3, [pc, #172]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0f0      	beq.n	8007d9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dbc:	4b28      	ldr	r3, [pc, #160]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	4925      	ldr	r1, [pc, #148]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	600b      	str	r3, [r1, #0]
 8007dd0:	e015      	b.n	8007dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dd2:	4b24      	ldr	r3, [pc, #144]	@ (8007e64 <HAL_RCC_OscConfig+0x278>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd8:	f7fc fe20 	bl	8004a1c <HAL_GetTick>
 8007ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dde:	e008      	b.n	8007df2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007de0:	f7fc fe1c 	bl	8004a1c <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e193      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007df2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1f0      	bne.n	8007de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d036      	beq.n	8007e78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d016      	beq.n	8007e40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e12:	4b15      	ldr	r3, [pc, #84]	@ (8007e68 <HAL_RCC_OscConfig+0x27c>)
 8007e14:	2201      	movs	r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e18:	f7fc fe00 	bl	8004a1c <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e20:	f7fc fdfc 	bl	8004a1c <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e173      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e32:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <HAL_RCC_OscConfig+0x274>)
 8007e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0f0      	beq.n	8007e20 <HAL_RCC_OscConfig+0x234>
 8007e3e:	e01b      	b.n	8007e78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e40:	4b09      	ldr	r3, [pc, #36]	@ (8007e68 <HAL_RCC_OscConfig+0x27c>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e46:	f7fc fde9 	bl	8004a1c <HAL_GetTick>
 8007e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e4c:	e00e      	b.n	8007e6c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e4e:	f7fc fde5 	bl	8004a1c <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d907      	bls.n	8007e6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e15c      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
 8007e60:	40023800 	.word	0x40023800
 8007e64:	42470000 	.word	0x42470000
 8007e68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e6c:	4b8a      	ldr	r3, [pc, #552]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1ea      	bne.n	8007e4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 8097 	beq.w	8007fb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e8a:	4b83      	ldr	r3, [pc, #524]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10f      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
 8007e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eae:	60bb      	str	r3, [r7, #8]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb6:	4b79      	ldr	r3, [pc, #484]	@ (800809c <HAL_RCC_OscConfig+0x4b0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d118      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ec2:	4b76      	ldr	r3, [pc, #472]	@ (800809c <HAL_RCC_OscConfig+0x4b0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a75      	ldr	r2, [pc, #468]	@ (800809c <HAL_RCC_OscConfig+0x4b0>)
 8007ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ece:	f7fc fda5 	bl	8004a1c <HAL_GetTick>
 8007ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ed4:	e008      	b.n	8007ee8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ed6:	f7fc fda1 	bl	8004a1c <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e118      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800809c <HAL_RCC_OscConfig+0x4b0>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0f0      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d106      	bne.n	8007f0a <HAL_RCC_OscConfig+0x31e>
 8007efc:	4b66      	ldr	r3, [pc, #408]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f00:	4a65      	ldr	r2, [pc, #404]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f08:	e01c      	b.n	8007f44 <HAL_RCC_OscConfig+0x358>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d10c      	bne.n	8007f2c <HAL_RCC_OscConfig+0x340>
 8007f12:	4b61      	ldr	r3, [pc, #388]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f16:	4a60      	ldr	r2, [pc, #384]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f18:	f043 0304 	orr.w	r3, r3, #4
 8007f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f22:	4a5d      	ldr	r2, [pc, #372]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f24:	f043 0301 	orr.w	r3, r3, #1
 8007f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2a:	e00b      	b.n	8007f44 <HAL_RCC_OscConfig+0x358>
 8007f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f30:	4a59      	ldr	r2, [pc, #356]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f38:	4b57      	ldr	r3, [pc, #348]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3c:	4a56      	ldr	r2, [pc, #344]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f3e:	f023 0304 	bic.w	r3, r3, #4
 8007f42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d015      	beq.n	8007f78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4c:	f7fc fd66 	bl	8004a1c <HAL_GetTick>
 8007f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f52:	e00a      	b.n	8007f6a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f54:	f7fc fd62 	bl	8004a1c <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e0d7      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0ee      	beq.n	8007f54 <HAL_RCC_OscConfig+0x368>
 8007f76:	e014      	b.n	8007fa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f78:	f7fc fd50 	bl	8004a1c <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f7e:	e00a      	b.n	8007f96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f80:	f7fc fd4c 	bl	8004a1c <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e0c1      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f96:	4b40      	ldr	r3, [pc, #256]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1ee      	bne.n	8007f80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d105      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fac:	4a3a      	ldr	r2, [pc, #232]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80ad 	beq.w	8008118 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fbe:	4b36      	ldr	r3, [pc, #216]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 030c 	and.w	r3, r3, #12
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	d060      	beq.n	800808c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d145      	bne.n	800805e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd2:	4b33      	ldr	r3, [pc, #204]	@ (80080a0 <HAL_RCC_OscConfig+0x4b4>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd8:	f7fc fd20 	bl	8004a1c <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fde:	e008      	b.n	8007ff2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fe0:	f7fc fd1c 	bl	8004a1c <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e093      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ff2:	4b29      	ldr	r3, [pc, #164]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f0      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	69da      	ldr	r2, [r3, #28]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800c:	019b      	lsls	r3, r3, #6
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	3b01      	subs	r3, #1
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	061b      	lsls	r3, r3, #24
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008028:	071b      	lsls	r3, r3, #28
 800802a:	491b      	ldr	r1, [pc, #108]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 800802c:	4313      	orrs	r3, r2
 800802e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008030:	4b1b      	ldr	r3, [pc, #108]	@ (80080a0 <HAL_RCC_OscConfig+0x4b4>)
 8008032:	2201      	movs	r2, #1
 8008034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008036:	f7fc fcf1 	bl	8004a1c <HAL_GetTick>
 800803a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800803c:	e008      	b.n	8008050 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803e:	f7fc fced 	bl	8004a1c <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e064      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008050:	4b11      	ldr	r3, [pc, #68]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0f0      	beq.n	800803e <HAL_RCC_OscConfig+0x452>
 800805c:	e05c      	b.n	8008118 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800805e:	4b10      	ldr	r3, [pc, #64]	@ (80080a0 <HAL_RCC_OscConfig+0x4b4>)
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7fc fcda 	bl	8004a1c <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806a:	e008      	b.n	800807e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800806c:	f7fc fcd6 	bl	8004a1c <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e04d      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807e:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <HAL_RCC_OscConfig+0x4ac>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f0      	bne.n	800806c <HAL_RCC_OscConfig+0x480>
 800808a:	e045      	b.n	8008118 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d107      	bne.n	80080a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e040      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
 8008098:	40023800 	.word	0x40023800
 800809c:	40007000 	.word	0x40007000
 80080a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008124 <HAL_RCC_OscConfig+0x538>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d030      	beq.n	8008114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080bc:	429a      	cmp	r2, r3
 80080be:	d129      	bne.n	8008114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d122      	bne.n	8008114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080d4:	4013      	ands	r3, r2
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080dc:	4293      	cmp	r3, r2
 80080de:	d119      	bne.n	8008114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	3b01      	subs	r3, #1
 80080ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d10f      	bne.n	8008114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008100:	429a      	cmp	r2, r3
 8008102:	d107      	bne.n	8008114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008110:	429a      	cmp	r2, r3
 8008112:	d001      	beq.n	8008118 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40023800 	.word	0x40023800

08008128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e041      	b.n	80081be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fb fcce 	bl	8003af0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f000 faec 	bl	8008744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <HAL_TIM_PWM_Start+0x24>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	bf14      	ite	ne
 80081e4:	2301      	movne	r3, #1
 80081e6:	2300      	moveq	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	e022      	b.n	8008232 <HAL_TIM_PWM_Start+0x6a>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d109      	bne.n	8008206 <HAL_TIM_PWM_Start+0x3e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	bf14      	ite	ne
 80081fe:	2301      	movne	r3, #1
 8008200:	2300      	moveq	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	e015      	b.n	8008232 <HAL_TIM_PWM_Start+0x6a>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b08      	cmp	r3, #8
 800820a:	d109      	bne.n	8008220 <HAL_TIM_PWM_Start+0x58>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	bf14      	ite	ne
 8008218:	2301      	movne	r3, #1
 800821a:	2300      	moveq	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	e008      	b.n	8008232 <HAL_TIM_PWM_Start+0x6a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	bf14      	ite	ne
 800822c:	2301      	movne	r3, #1
 800822e:	2300      	moveq	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e07c      	b.n	8008334 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d104      	bne.n	800824a <HAL_TIM_PWM_Start+0x82>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008248:	e013      	b.n	8008272 <HAL_TIM_PWM_Start+0xaa>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b04      	cmp	r3, #4
 800824e:	d104      	bne.n	800825a <HAL_TIM_PWM_Start+0x92>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008258:	e00b      	b.n	8008272 <HAL_TIM_PWM_Start+0xaa>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b08      	cmp	r3, #8
 800825e:	d104      	bne.n	800826a <HAL_TIM_PWM_Start+0xa2>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008268:	e003      	b.n	8008272 <HAL_TIM_PWM_Start+0xaa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2201      	movs	r2, #1
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fcbe 	bl	8008bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2d      	ldr	r2, [pc, #180]	@ (800833c <HAL_TIM_PWM_Start+0x174>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_TIM_PWM_Start+0xcc>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2c      	ldr	r2, [pc, #176]	@ (8008340 <HAL_TIM_PWM_Start+0x178>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d101      	bne.n	8008298 <HAL_TIM_PWM_Start+0xd0>
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <HAL_TIM_PWM_Start+0xd2>
 8008298:	2300      	movs	r3, #0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a22      	ldr	r2, [pc, #136]	@ (800833c <HAL_TIM_PWM_Start+0x174>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d022      	beq.n	80082fe <HAL_TIM_PWM_Start+0x136>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c0:	d01d      	beq.n	80082fe <HAL_TIM_PWM_Start+0x136>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008344 <HAL_TIM_PWM_Start+0x17c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d018      	beq.n	80082fe <HAL_TIM_PWM_Start+0x136>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008348 <HAL_TIM_PWM_Start+0x180>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <HAL_TIM_PWM_Start+0x136>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1c      	ldr	r2, [pc, #112]	@ (800834c <HAL_TIM_PWM_Start+0x184>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <HAL_TIM_PWM_Start+0x136>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a16      	ldr	r2, [pc, #88]	@ (8008340 <HAL_TIM_PWM_Start+0x178>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <HAL_TIM_PWM_Start+0x136>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a18      	ldr	r2, [pc, #96]	@ (8008350 <HAL_TIM_PWM_Start+0x188>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_TIM_PWM_Start+0x136>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a16      	ldr	r2, [pc, #88]	@ (8008354 <HAL_TIM_PWM_Start+0x18c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d111      	bne.n	8008322 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b06      	cmp	r3, #6
 800830e:	d010      	beq.n	8008332 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008320:	e007      	b.n	8008332 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40010000 	.word	0x40010000
 8008340:	40010400 	.word	0x40010400
 8008344:	40000400 	.word	0x40000400
 8008348:	40000800 	.word	0x40000800
 800834c:	40000c00 	.word	0x40000c00
 8008350:	40014000 	.word	0x40014000
 8008354:	40001800 	.word	0x40001800

08008358 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e097      	b.n	800849c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fb fb3b 	bl	80039fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2202      	movs	r2, #2
 800838a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6812      	ldr	r2, [r2, #0]
 8008398:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800839c:	f023 0307 	bic.w	r3, r3, #7
 80083a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f000 f9c9 	bl	8008744 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083da:	f023 0303 	bic.w	r3, r3, #3
 80083de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	4313      	orrs	r3, r2
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80083f8:	f023 030c 	bic.w	r3, r3, #12
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008404:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	4313      	orrs	r3, r2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	011a      	lsls	r2, r3, #4
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	031b      	lsls	r3, r3, #12
 8008428:	4313      	orrs	r3, r2
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008436:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800843e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	4313      	orrs	r3, r2
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80084cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d110      	bne.n	80084f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d102      	bne.n	80084e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80084da:	7b7b      	ldrb	r3, [r7, #13]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d001      	beq.n	80084e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e069      	b.n	80085b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084f4:	e031      	b.n	800855a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d110      	bne.n	800851e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d102      	bne.n	8008508 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008502:	7b3b      	ldrb	r3, [r7, #12]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d001      	beq.n	800850c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e055      	b.n	80085b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800851c:	e01d      	b.n	800855a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d108      	bne.n	8008536 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d105      	bne.n	8008536 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800852a:	7b7b      	ldrb	r3, [r7, #13]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d102      	bne.n	8008536 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008530:	7b3b      	ldrb	r3, [r7, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d001      	beq.n	800853a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e03e      	b.n	80085b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2202      	movs	r2, #2
 800853e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2202      	movs	r2, #2
 8008546:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2202      	movs	r2, #2
 800854e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2202      	movs	r2, #2
 8008556:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <HAL_TIM_Encoder_Start+0xc4>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b04      	cmp	r3, #4
 8008564:	d008      	beq.n	8008578 <HAL_TIM_Encoder_Start+0xd4>
 8008566:	e00f      	b.n	8008588 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2201      	movs	r2, #1
 800856e:	2100      	movs	r1, #0
 8008570:	4618      	mov	r0, r3
 8008572:	f000 fb43 	bl	8008bfc <TIM_CCxChannelCmd>
      break;
 8008576:	e016      	b.n	80085a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2201      	movs	r2, #1
 800857e:	2104      	movs	r1, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fb3b 	bl	8008bfc <TIM_CCxChannelCmd>
      break;
 8008586:	e00e      	b.n	80085a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2201      	movs	r2, #1
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fb33 	bl	8008bfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2201      	movs	r2, #1
 800859c:	2104      	movs	r1, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fb2c 	bl	8008bfc <TIM_CCxChannelCmd>
      break;
 80085a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085da:	2302      	movs	r3, #2
 80085dc:	e0ae      	b.n	800873c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b0c      	cmp	r3, #12
 80085ea:	f200 809f 	bhi.w	800872c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80085ee:	a201      	add	r2, pc, #4	@ (adr r2, 80085f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008629 	.word	0x08008629
 80085f8:	0800872d 	.word	0x0800872d
 80085fc:	0800872d 	.word	0x0800872d
 8008600:	0800872d 	.word	0x0800872d
 8008604:	08008669 	.word	0x08008669
 8008608:	0800872d 	.word	0x0800872d
 800860c:	0800872d 	.word	0x0800872d
 8008610:	0800872d 	.word	0x0800872d
 8008614:	080086ab 	.word	0x080086ab
 8008618:	0800872d 	.word	0x0800872d
 800861c:	0800872d 	.word	0x0800872d
 8008620:	0800872d 	.word	0x0800872d
 8008624:	080086eb 	.word	0x080086eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f934 	bl	800889c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0208 	orr.w	r2, r2, #8
 8008642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	699a      	ldr	r2, [r3, #24]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0204 	bic.w	r2, r2, #4
 8008652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6999      	ldr	r1, [r3, #24]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	619a      	str	r2, [r3, #24]
      break;
 8008666:	e064      	b.n	8008732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f984 	bl	800897c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6999      	ldr	r1, [r3, #24]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	021a      	lsls	r2, r3, #8
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	619a      	str	r2, [r3, #24]
      break;
 80086a8:	e043      	b.n	8008732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 f9d9 	bl	8008a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69da      	ldr	r2, [r3, #28]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0208 	orr.w	r2, r2, #8
 80086c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69da      	ldr	r2, [r3, #28]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0204 	bic.w	r2, r2, #4
 80086d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69d9      	ldr	r1, [r3, #28]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	61da      	str	r2, [r3, #28]
      break;
 80086e8:	e023      	b.n	8008732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fa2d 	bl	8008b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69da      	ldr	r2, [r3, #28]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69d9      	ldr	r1, [r3, #28]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	021a      	lsls	r2, r3, #8
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	61da      	str	r2, [r3, #28]
      break;
 800872a:	e002      	b.n	8008732 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
      break;
 8008730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800873a:	7dfb      	ldrb	r3, [r7, #23]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a46      	ldr	r2, [pc, #280]	@ (8008870 <TIM_Base_SetConfig+0x12c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d013      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008762:	d00f      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a43      	ldr	r2, [pc, #268]	@ (8008874 <TIM_Base_SetConfig+0x130>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00b      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a42      	ldr	r2, [pc, #264]	@ (8008878 <TIM_Base_SetConfig+0x134>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d007      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a41      	ldr	r2, [pc, #260]	@ (800887c <TIM_Base_SetConfig+0x138>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a40      	ldr	r2, [pc, #256]	@ (8008880 <TIM_Base_SetConfig+0x13c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d108      	bne.n	8008796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a35      	ldr	r2, [pc, #212]	@ (8008870 <TIM_Base_SetConfig+0x12c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d02b      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a4:	d027      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a32      	ldr	r2, [pc, #200]	@ (8008874 <TIM_Base_SetConfig+0x130>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d023      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a31      	ldr	r2, [pc, #196]	@ (8008878 <TIM_Base_SetConfig+0x134>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d01f      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a30      	ldr	r2, [pc, #192]	@ (800887c <TIM_Base_SetConfig+0x138>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01b      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008880 <TIM_Base_SetConfig+0x13c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d017      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008884 <TIM_Base_SetConfig+0x140>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d013      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008888 <TIM_Base_SetConfig+0x144>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00f      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a2c      	ldr	r2, [pc, #176]	@ (800888c <TIM_Base_SetConfig+0x148>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008890 <TIM_Base_SetConfig+0x14c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008894 <TIM_Base_SetConfig+0x150>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a29      	ldr	r2, [pc, #164]	@ (8008898 <TIM_Base_SetConfig+0x154>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d108      	bne.n	8008808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a10      	ldr	r2, [pc, #64]	@ (8008870 <TIM_Base_SetConfig+0x12c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_Base_SetConfig+0xf8>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a12      	ldr	r2, [pc, #72]	@ (8008880 <TIM_Base_SetConfig+0x13c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d103      	bne.n	8008844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b01      	cmp	r3, #1
 8008854:	d105      	bne.n	8008862 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f023 0201 	bic.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	611a      	str	r2, [r3, #16]
  }
}
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	40010000 	.word	0x40010000
 8008874:	40000400 	.word	0x40000400
 8008878:	40000800 	.word	0x40000800
 800887c:	40000c00 	.word	0x40000c00
 8008880:	40010400 	.word	0x40010400
 8008884:	40014000 	.word	0x40014000
 8008888:	40014400 	.word	0x40014400
 800888c:	40014800 	.word	0x40014800
 8008890:	40001800 	.word	0x40001800
 8008894:	40001c00 	.word	0x40001c00
 8008898:	40002000 	.word	0x40002000

0800889c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	f023 0201 	bic.w	r2, r3, #1
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 0302 	bic.w	r3, r3, #2
 80088e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a20      	ldr	r2, [pc, #128]	@ (8008974 <TIM_OC1_SetConfig+0xd8>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_OC1_SetConfig+0x64>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008978 <TIM_OC1_SetConfig+0xdc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d10c      	bne.n	800891a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f023 0308 	bic.w	r3, r3, #8
 8008906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	4313      	orrs	r3, r2
 8008910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f023 0304 	bic.w	r3, r3, #4
 8008918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a15      	ldr	r2, [pc, #84]	@ (8008974 <TIM_OC1_SetConfig+0xd8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d003      	beq.n	800892a <TIM_OC1_SetConfig+0x8e>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a14      	ldr	r2, [pc, #80]	@ (8008978 <TIM_OC1_SetConfig+0xdc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d111      	bne.n	800894e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	621a      	str	r2, [r3, #32]
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	40010000 	.word	0x40010000
 8008978:	40010400 	.word	0x40010400

0800897c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	f023 0210 	bic.w	r2, r3, #16
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	4313      	orrs	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f023 0320 	bic.w	r3, r3, #32
 80089c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a22      	ldr	r2, [pc, #136]	@ (8008a60 <TIM_OC2_SetConfig+0xe4>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d003      	beq.n	80089e4 <TIM_OC2_SetConfig+0x68>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a21      	ldr	r2, [pc, #132]	@ (8008a64 <TIM_OC2_SetConfig+0xe8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d10d      	bne.n	8008a00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a17      	ldr	r2, [pc, #92]	@ (8008a60 <TIM_OC2_SetConfig+0xe4>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d003      	beq.n	8008a10 <TIM_OC2_SetConfig+0x94>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a16      	ldr	r2, [pc, #88]	@ (8008a64 <TIM_OC2_SetConfig+0xe8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d113      	bne.n	8008a38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	621a      	str	r2, [r3, #32]
}
 8008a52:	bf00      	nop
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	40010000 	.word	0x40010000
 8008a64:	40010400 	.word	0x40010400

08008a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a21      	ldr	r2, [pc, #132]	@ (8008b48 <TIM_OC3_SetConfig+0xe0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_OC3_SetConfig+0x66>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a20      	ldr	r2, [pc, #128]	@ (8008b4c <TIM_OC3_SetConfig+0xe4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d10d      	bne.n	8008aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a16      	ldr	r2, [pc, #88]	@ (8008b48 <TIM_OC3_SetConfig+0xe0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_OC3_SetConfig+0x92>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a15      	ldr	r2, [pc, #84]	@ (8008b4c <TIM_OC3_SetConfig+0xe4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d113      	bne.n	8008b22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	621a      	str	r2, [r3, #32]
}
 8008b3c:	bf00      	nop
 8008b3e:	371c      	adds	r7, #28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	40010000 	.word	0x40010000
 8008b4c:	40010400 	.word	0x40010400

08008b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	031b      	lsls	r3, r3, #12
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a12      	ldr	r2, [pc, #72]	@ (8008bf4 <TIM_OC4_SetConfig+0xa4>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d003      	beq.n	8008bb8 <TIM_OC4_SetConfig+0x68>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a11      	ldr	r2, [pc, #68]	@ (8008bf8 <TIM_OC4_SetConfig+0xa8>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d109      	bne.n	8008bcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	019b      	lsls	r3, r3, #6
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	621a      	str	r2, [r3, #32]
}
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40010400 	.word	0x40010400

08008bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f003 031f 	and.w	r3, r3, #31
 8008c0e:	2201      	movs	r2, #1
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1a      	ldr	r2, [r3, #32]
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	401a      	ands	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f003 031f 	and.w	r3, r3, #31
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	fa01 f303 	lsl.w	r3, r1, r3
 8008c34:	431a      	orrs	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e05a      	b.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a21      	ldr	r2, [pc, #132]	@ (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d022      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cac:	d01d      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d018      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d013      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d00e      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a18      	ldr	r2, [pc, #96]	@ (8008d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d009      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a17      	ldr	r2, [pc, #92]	@ (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d004      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a15      	ldr	r2, [pc, #84]	@ (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d10c      	bne.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40010000 	.word	0x40010000
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40010400 	.word	0x40010400
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40001800 	.word	0x40001800

08008d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e042      	b.n	8008dd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7fa ff3e 	bl	8003be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2224      	movs	r2, #36	@ 0x24
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fc85 	bl	8009694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	691a      	ldr	r2, [r3, #16]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	695a      	ldr	r2, [r3, #20]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b0ba      	sub	sp, #232	@ 0xe8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10f      	bne.n	8008e46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <HAL_UART_IRQHandler+0x66>
 8008e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fb69 	bl	8009516 <UART_Receive_IT>
      return;
 8008e44:	e25b      	b.n	80092fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80de 	beq.w	800900c <HAL_UART_IRQHandler+0x22c>
 8008e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80d1 	beq.w	800900c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00b      	beq.n	8008e8e <HAL_UART_IRQHandler+0xae>
 8008e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e86:	f043 0201 	orr.w	r2, r3, #1
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <HAL_UART_IRQHandler+0xd2>
 8008e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eaa:	f043 0202 	orr.w	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <HAL_UART_IRQHandler+0xf6>
 8008ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ece:	f043 0204 	orr.w	r2, r3, #4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d011      	beq.n	8008f06 <HAL_UART_IRQHandler+0x126>
 8008ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d105      	bne.n	8008efa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d005      	beq.n	8008f06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008efe:	f043 0208 	orr.w	r2, r3, #8
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 81f2 	beq.w	80092f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d008      	beq.n	8008f2e <HAL_UART_IRQHandler+0x14e>
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 faf4 	bl	8009516 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f38:	2b40      	cmp	r3, #64	@ 0x40
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d103      	bne.n	8008f5a <HAL_UART_IRQHandler+0x17a>
 8008f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d04f      	beq.n	8008ffa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f9fc 	bl	8009358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f6a:	2b40      	cmp	r3, #64	@ 0x40
 8008f6c:	d141      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3314      	adds	r3, #20
 8008f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1d9      	bne.n	8008f6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d013      	beq.n	8008fea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc6:	4a7e      	ldr	r2, [pc, #504]	@ (80091c0 <HAL_UART_IRQHandler+0x3e0>)
 8008fc8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fc fb94 	bl	80056fc <HAL_DMA_Abort_IT>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d016      	beq.n	8009008 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe8:	e00e      	b.n	8009008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f99e 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff0:	e00a      	b.n	8009008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f99a 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff8:	e006      	b.n	8009008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f996 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009006:	e175      	b.n	80092f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009008:	bf00      	nop
    return;
 800900a:	e173      	b.n	80092f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009010:	2b01      	cmp	r3, #1
 8009012:	f040 814f 	bne.w	80092b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901a:	f003 0310 	and.w	r3, r3, #16
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 8148 	beq.w	80092b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8141 	beq.w	80092b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009032:	2300      	movs	r3, #0
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60bb      	str	r3, [r7, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	60bb      	str	r3, [r7, #8]
 8009046:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009052:	2b40      	cmp	r3, #64	@ 0x40
 8009054:	f040 80b6 	bne.w	80091c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009064:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 8145 	beq.w	80092f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009076:	429a      	cmp	r2, r3
 8009078:	f080 813e 	bcs.w	80092f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009082:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800908e:	f000 8088 	beq.w	80091a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80090be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1d9      	bne.n	8009092 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3314      	adds	r3, #20
 80090e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090f0:	f023 0301 	bic.w	r3, r3, #1
 80090f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3314      	adds	r3, #20
 80090fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009102:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009106:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800910a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e1      	bne.n	80090de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3314      	adds	r3, #20
 8009120:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800912a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800912c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3314      	adds	r3, #20
 800913a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800913e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009140:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009144:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800914c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e3      	bne.n	800911a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2220      	movs	r2, #32
 8009156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
 8009166:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009172:	f023 0310 	bic.w	r3, r3, #16
 8009176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	330c      	adds	r3, #12
 8009180:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009184:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009186:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800918a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800918c:	e841 2300 	strex	r3, r2, [r1]
 8009190:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1e3      	bne.n	8009160 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919c:	4618      	mov	r0, r3
 800919e:	f7fc fa3d 	bl	800561c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2202      	movs	r2, #2
 80091a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8c1 	bl	8009340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091be:	e09b      	b.n	80092f8 <HAL_UART_IRQHandler+0x518>
 80091c0:	0800941f 	.word	0x0800941f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 808e 	beq.w	80092fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80091e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8089 	beq.w	80092fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	330c      	adds	r3, #12
 80091f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800920e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800921c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e3      	bne.n	80091ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	623b      	str	r3, [r7, #32]
   return(result);
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009246:	633a      	str	r2, [r7, #48]	@ 0x30
 8009248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800924c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	60fb      	str	r3, [r7, #12]
   return(result);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800928c:	61fa      	str	r2, [r7, #28]
 800928e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	69b9      	ldr	r1, [r7, #24]
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	617b      	str	r3, [r7, #20]
   return(result);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f847 	bl	8009340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092b2:	e023      	b.n	80092fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <HAL_UART_IRQHandler+0x4f4>
 80092c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f8ba 	bl	8009446 <UART_Transmit_IT>
    return;
 80092d2:	e014      	b.n	80092fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <HAL_UART_IRQHandler+0x51e>
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d008      	beq.n	80092fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f8fa 	bl	80094e6 <UART_EndTransmit_IT>
    return;
 80092f2:	e004      	b.n	80092fe <HAL_UART_IRQHandler+0x51e>
    return;
 80092f4:	bf00      	nop
 80092f6:	e002      	b.n	80092fe <HAL_UART_IRQHandler+0x51e>
      return;
 80092f8:	bf00      	nop
 80092fa:	e000      	b.n	80092fe <HAL_UART_IRQHandler+0x51e>
      return;
 80092fc:	bf00      	nop
  }
}
 80092fe:	37e8      	adds	r7, #232	@ 0xe8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b095      	sub	sp, #84	@ 0x54
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009380:	643a      	str	r2, [r7, #64]	@ 0x40
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e5      	bne.n	8009360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3314      	adds	r3, #20
 800939a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	f023 0301 	bic.w	r3, r3, #1
 80093aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3314      	adds	r3, #20
 80093b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e5      	bne.n	8009394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d119      	bne.n	8009404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	330c      	adds	r3, #12
 80093d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f023 0310 	bic.w	r3, r3, #16
 80093e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	330c      	adds	r3, #12
 80093ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093f0:	61ba      	str	r2, [r7, #24]
 80093f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	613b      	str	r3, [r7, #16]
   return(result);
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e5      	bne.n	80093d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009412:	bf00      	nop
 8009414:	3754      	adds	r7, #84	@ 0x54
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7ff ff77 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b21      	cmp	r3, #33	@ 0x21
 8009458:	d13e      	bne.n	80094d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009462:	d114      	bne.n	800948e <UART_Transmit_IT+0x48>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d110      	bne.n	800948e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009480:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	1c9a      	adds	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	621a      	str	r2, [r3, #32]
 800948c:	e008      	b.n	80094a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	1c59      	adds	r1, r3, #1
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6211      	str	r1, [r2, #32]
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4619      	mov	r1, r3
 80094ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10f      	bne.n	80094d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80094c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	e000      	b.n	80094da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094d8:	2302      	movs	r3, #2
  }
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff fefc 	bl	8009304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b08c      	sub	sp, #48	@ 0x30
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b22      	cmp	r3, #34	@ 0x22
 8009528:	f040 80ae 	bne.w	8009688 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009534:	d117      	bne.n	8009566 <UART_Receive_IT+0x50>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d113      	bne.n	8009566 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	b29b      	uxth	r3, r3
 8009550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009554:	b29a      	uxth	r2, r3
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955e:	1c9a      	adds	r2, r3, #2
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	629a      	str	r2, [r3, #40]	@ 0x28
 8009564:	e026      	b.n	80095b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800956c:	2300      	movs	r3, #0
 800956e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009578:	d007      	beq.n	800958a <UART_Receive_IT+0x74>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <UART_Receive_IT+0x82>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e008      	b.n	80095aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	4619      	mov	r1, r3
 80095c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d15d      	bne.n	8009684 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0220 	bic.w	r2, r2, #32
 80095d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0201 	bic.w	r2, r2, #1
 80095f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960a:	2b01      	cmp	r3, #1
 800960c:	d135      	bne.n	800967a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	330c      	adds	r3, #12
 800961a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	613b      	str	r3, [r7, #16]
   return(result);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f023 0310 	bic.w	r3, r3, #16
 800962a:	627b      	str	r3, [r7, #36]	@ 0x24
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	330c      	adds	r3, #12
 8009632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009634:	623a      	str	r2, [r7, #32]
 8009636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	69f9      	ldr	r1, [r7, #28]
 800963a:	6a3a      	ldr	r2, [r7, #32]
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	61bb      	str	r3, [r7, #24]
   return(result);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e5      	bne.n	8009614 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b10      	cmp	r3, #16
 8009654:	d10a      	bne.n	800966c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	60fb      	str	r3, [r7, #12]
 800966a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fe64 	bl	8009340 <HAL_UARTEx_RxEventCallback>
 8009678:	e002      	b.n	8009680 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff fe4c 	bl	8009318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	e002      	b.n	800968a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	e000      	b.n	800968a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009688:	2302      	movs	r3, #2
  }
}
 800968a:	4618      	mov	r0, r3
 800968c:	3730      	adds	r7, #48	@ 0x30
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009698:	b0c0      	sub	sp, #256	@ 0x100
 800969a:	af00      	add	r7, sp, #0
 800969c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80096ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b0:	68d9      	ldr	r1, [r3, #12]
 80096b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	ea40 0301 	orr.w	r3, r0, r1
 80096bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	4313      	orrs	r3, r2
 80096dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80096e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80096ec:	f021 010c 	bic.w	r1, r1, #12
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80096fa:	430b      	orrs	r3, r1
 80096fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800970a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800970e:	6999      	ldr	r1, [r3, #24]
 8009710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	ea40 0301 	orr.w	r3, r0, r1
 800971a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800971c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	4b8f      	ldr	r3, [pc, #572]	@ (8009960 <UART_SetConfig+0x2cc>)
 8009724:	429a      	cmp	r2, r3
 8009726:	d005      	beq.n	8009734 <UART_SetConfig+0xa0>
 8009728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b8d      	ldr	r3, [pc, #564]	@ (8009964 <UART_SetConfig+0x2d0>)
 8009730:	429a      	cmp	r2, r3
 8009732:	d104      	bne.n	800973e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009734:	f7fe f816 	bl	8007764 <HAL_RCC_GetPCLK2Freq>
 8009738:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800973c:	e003      	b.n	8009746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800973e:	f7fd fffd 	bl	800773c <HAL_RCC_GetPCLK1Freq>
 8009742:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009750:	f040 810c 	bne.w	800996c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009758:	2200      	movs	r2, #0
 800975a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800975e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009766:	4622      	mov	r2, r4
 8009768:	462b      	mov	r3, r5
 800976a:	1891      	adds	r1, r2, r2
 800976c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800976e:	415b      	adcs	r3, r3
 8009770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009776:	4621      	mov	r1, r4
 8009778:	eb12 0801 	adds.w	r8, r2, r1
 800977c:	4629      	mov	r1, r5
 800977e:	eb43 0901 	adc.w	r9, r3, r1
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	f04f 0300 	mov.w	r3, #0
 800978a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800978e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009796:	4690      	mov	r8, r2
 8009798:	4699      	mov	r9, r3
 800979a:	4623      	mov	r3, r4
 800979c:	eb18 0303 	adds.w	r3, r8, r3
 80097a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097a4:	462b      	mov	r3, r5
 80097a6:	eb49 0303 	adc.w	r3, r9, r3
 80097aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80097ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80097ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80097be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80097c2:	460b      	mov	r3, r1
 80097c4:	18db      	adds	r3, r3, r3
 80097c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80097c8:	4613      	mov	r3, r2
 80097ca:	eb42 0303 	adc.w	r3, r2, r3
 80097ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80097d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80097d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80097d8:	f7f7 fa56 	bl	8000c88 <__aeabi_uldivmod>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	4b61      	ldr	r3, [pc, #388]	@ (8009968 <UART_SetConfig+0x2d4>)
 80097e2:	fba3 2302 	umull	r2, r3, r3, r2
 80097e6:	095b      	lsrs	r3, r3, #5
 80097e8:	011c      	lsls	r4, r3, #4
 80097ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80097f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	1891      	adds	r1, r2, r2
 8009802:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009804:	415b      	adcs	r3, r3
 8009806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800980c:	4641      	mov	r1, r8
 800980e:	eb12 0a01 	adds.w	sl, r2, r1
 8009812:	4649      	mov	r1, r9
 8009814:	eb43 0b01 	adc.w	fp, r3, r1
 8009818:	f04f 0200 	mov.w	r2, #0
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800982c:	4692      	mov	sl, r2
 800982e:	469b      	mov	fp, r3
 8009830:	4643      	mov	r3, r8
 8009832:	eb1a 0303 	adds.w	r3, sl, r3
 8009836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800983a:	464b      	mov	r3, r9
 800983c:	eb4b 0303 	adc.w	r3, fp, r3
 8009840:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009858:	460b      	mov	r3, r1
 800985a:	18db      	adds	r3, r3, r3
 800985c:	643b      	str	r3, [r7, #64]	@ 0x40
 800985e:	4613      	mov	r3, r2
 8009860:	eb42 0303 	adc.w	r3, r2, r3
 8009864:	647b      	str	r3, [r7, #68]	@ 0x44
 8009866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800986a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800986e:	f7f7 fa0b 	bl	8000c88 <__aeabi_uldivmod>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4611      	mov	r1, r2
 8009878:	4b3b      	ldr	r3, [pc, #236]	@ (8009968 <UART_SetConfig+0x2d4>)
 800987a:	fba3 2301 	umull	r2, r3, r3, r1
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	2264      	movs	r2, #100	@ 0x64
 8009882:	fb02 f303 	mul.w	r3, r2, r3
 8009886:	1acb      	subs	r3, r1, r3
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800988e:	4b36      	ldr	r3, [pc, #216]	@ (8009968 <UART_SetConfig+0x2d4>)
 8009890:	fba3 2302 	umull	r2, r3, r3, r2
 8009894:	095b      	lsrs	r3, r3, #5
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800989c:	441c      	add	r4, r3
 800989e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80098ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80098b0:	4642      	mov	r2, r8
 80098b2:	464b      	mov	r3, r9
 80098b4:	1891      	adds	r1, r2, r2
 80098b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80098b8:	415b      	adcs	r3, r3
 80098ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80098c0:	4641      	mov	r1, r8
 80098c2:	1851      	adds	r1, r2, r1
 80098c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80098c6:	4649      	mov	r1, r9
 80098c8:	414b      	adcs	r3, r1
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	f04f 0300 	mov.w	r3, #0
 80098d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80098d8:	4659      	mov	r1, fp
 80098da:	00cb      	lsls	r3, r1, #3
 80098dc:	4651      	mov	r1, sl
 80098de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098e2:	4651      	mov	r1, sl
 80098e4:	00ca      	lsls	r2, r1, #3
 80098e6:	4610      	mov	r0, r2
 80098e8:	4619      	mov	r1, r3
 80098ea:	4603      	mov	r3, r0
 80098ec:	4642      	mov	r2, r8
 80098ee:	189b      	adds	r3, r3, r2
 80098f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098f4:	464b      	mov	r3, r9
 80098f6:	460a      	mov	r2, r1
 80098f8:	eb42 0303 	adc.w	r3, r2, r3
 80098fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800990c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009914:	460b      	mov	r3, r1
 8009916:	18db      	adds	r3, r3, r3
 8009918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800991a:	4613      	mov	r3, r2
 800991c:	eb42 0303 	adc.w	r3, r2, r3
 8009920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800992a:	f7f7 f9ad 	bl	8000c88 <__aeabi_uldivmod>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4b0d      	ldr	r3, [pc, #52]	@ (8009968 <UART_SetConfig+0x2d4>)
 8009934:	fba3 1302 	umull	r1, r3, r3, r2
 8009938:	095b      	lsrs	r3, r3, #5
 800993a:	2164      	movs	r1, #100	@ 0x64
 800993c:	fb01 f303 	mul.w	r3, r1, r3
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	3332      	adds	r3, #50	@ 0x32
 8009946:	4a08      	ldr	r2, [pc, #32]	@ (8009968 <UART_SetConfig+0x2d4>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	095b      	lsrs	r3, r3, #5
 800994e:	f003 0207 	and.w	r2, r3, #7
 8009952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4422      	add	r2, r4
 800995a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800995c:	e106      	b.n	8009b6c <UART_SetConfig+0x4d8>
 800995e:	bf00      	nop
 8009960:	40011000 	.word	0x40011000
 8009964:	40011400 	.word	0x40011400
 8009968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800996c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009970:	2200      	movs	r2, #0
 8009972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800997a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800997e:	4642      	mov	r2, r8
 8009980:	464b      	mov	r3, r9
 8009982:	1891      	adds	r1, r2, r2
 8009984:	6239      	str	r1, [r7, #32]
 8009986:	415b      	adcs	r3, r3
 8009988:	627b      	str	r3, [r7, #36]	@ 0x24
 800998a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800998e:	4641      	mov	r1, r8
 8009990:	1854      	adds	r4, r2, r1
 8009992:	4649      	mov	r1, r9
 8009994:	eb43 0501 	adc.w	r5, r3, r1
 8009998:	f04f 0200 	mov.w	r2, #0
 800999c:	f04f 0300 	mov.w	r3, #0
 80099a0:	00eb      	lsls	r3, r5, #3
 80099a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099a6:	00e2      	lsls	r2, r4, #3
 80099a8:	4614      	mov	r4, r2
 80099aa:	461d      	mov	r5, r3
 80099ac:	4643      	mov	r3, r8
 80099ae:	18e3      	adds	r3, r4, r3
 80099b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099b4:	464b      	mov	r3, r9
 80099b6:	eb45 0303 	adc.w	r3, r5, r3
 80099ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099ce:	f04f 0200 	mov.w	r2, #0
 80099d2:	f04f 0300 	mov.w	r3, #0
 80099d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80099da:	4629      	mov	r1, r5
 80099dc:	008b      	lsls	r3, r1, #2
 80099de:	4621      	mov	r1, r4
 80099e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099e4:	4621      	mov	r1, r4
 80099e6:	008a      	lsls	r2, r1, #2
 80099e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80099ec:	f7f7 f94c 	bl	8000c88 <__aeabi_uldivmod>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4b60      	ldr	r3, [pc, #384]	@ (8009b78 <UART_SetConfig+0x4e4>)
 80099f6:	fba3 2302 	umull	r2, r3, r3, r2
 80099fa:	095b      	lsrs	r3, r3, #5
 80099fc:	011c      	lsls	r4, r3, #4
 80099fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009a10:	4642      	mov	r2, r8
 8009a12:	464b      	mov	r3, r9
 8009a14:	1891      	adds	r1, r2, r2
 8009a16:	61b9      	str	r1, [r7, #24]
 8009a18:	415b      	adcs	r3, r3
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a20:	4641      	mov	r1, r8
 8009a22:	1851      	adds	r1, r2, r1
 8009a24:	6139      	str	r1, [r7, #16]
 8009a26:	4649      	mov	r1, r9
 8009a28:	414b      	adcs	r3, r1
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	f04f 0200 	mov.w	r2, #0
 8009a30:	f04f 0300 	mov.w	r3, #0
 8009a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a38:	4659      	mov	r1, fp
 8009a3a:	00cb      	lsls	r3, r1, #3
 8009a3c:	4651      	mov	r1, sl
 8009a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a42:	4651      	mov	r1, sl
 8009a44:	00ca      	lsls	r2, r1, #3
 8009a46:	4610      	mov	r0, r2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4642      	mov	r2, r8
 8009a4e:	189b      	adds	r3, r3, r2
 8009a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a54:	464b      	mov	r3, r9
 8009a56:	460a      	mov	r2, r1
 8009a58:	eb42 0303 	adc.w	r3, r2, r3
 8009a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	f04f 0300 	mov.w	r3, #0
 8009a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009a78:	4649      	mov	r1, r9
 8009a7a:	008b      	lsls	r3, r1, #2
 8009a7c:	4641      	mov	r1, r8
 8009a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a82:	4641      	mov	r1, r8
 8009a84:	008a      	lsls	r2, r1, #2
 8009a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009a8a:	f7f7 f8fd 	bl	8000c88 <__aeabi_uldivmod>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4611      	mov	r1, r2
 8009a94:	4b38      	ldr	r3, [pc, #224]	@ (8009b78 <UART_SetConfig+0x4e4>)
 8009a96:	fba3 2301 	umull	r2, r3, r3, r1
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	2264      	movs	r2, #100	@ 0x64
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
 8009aa2:	1acb      	subs	r3, r1, r3
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	3332      	adds	r3, #50	@ 0x32
 8009aa8:	4a33      	ldr	r2, [pc, #204]	@ (8009b78 <UART_SetConfig+0x4e4>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ab4:	441c      	add	r4, r3
 8009ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aba:	2200      	movs	r2, #0
 8009abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8009ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	1891      	adds	r1, r2, r2
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	415b      	adcs	r3, r3
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ad4:	4641      	mov	r1, r8
 8009ad6:	1851      	adds	r1, r2, r1
 8009ad8:	6039      	str	r1, [r7, #0]
 8009ada:	4649      	mov	r1, r9
 8009adc:	414b      	adcs	r3, r1
 8009ade:	607b      	str	r3, [r7, #4]
 8009ae0:	f04f 0200 	mov.w	r2, #0
 8009ae4:	f04f 0300 	mov.w	r3, #0
 8009ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009aec:	4659      	mov	r1, fp
 8009aee:	00cb      	lsls	r3, r1, #3
 8009af0:	4651      	mov	r1, sl
 8009af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009af6:	4651      	mov	r1, sl
 8009af8:	00ca      	lsls	r2, r1, #3
 8009afa:	4610      	mov	r0, r2
 8009afc:	4619      	mov	r1, r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	4642      	mov	r2, r8
 8009b02:	189b      	adds	r3, r3, r2
 8009b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b06:	464b      	mov	r3, r9
 8009b08:	460a      	mov	r2, r1
 8009b0a:	eb42 0303 	adc.w	r3, r2, r3
 8009b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	f04f 0300 	mov.w	r3, #0
 8009b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009b28:	4649      	mov	r1, r9
 8009b2a:	008b      	lsls	r3, r1, #2
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b32:	4641      	mov	r1, r8
 8009b34:	008a      	lsls	r2, r1, #2
 8009b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009b3a:	f7f7 f8a5 	bl	8000c88 <__aeabi_uldivmod>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4b0d      	ldr	r3, [pc, #52]	@ (8009b78 <UART_SetConfig+0x4e4>)
 8009b44:	fba3 1302 	umull	r1, r3, r3, r2
 8009b48:	095b      	lsrs	r3, r3, #5
 8009b4a:	2164      	movs	r1, #100	@ 0x64
 8009b4c:	fb01 f303 	mul.w	r3, r1, r3
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	3332      	adds	r3, #50	@ 0x32
 8009b56:	4a08      	ldr	r2, [pc, #32]	@ (8009b78 <UART_SetConfig+0x4e4>)
 8009b58:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5c:	095b      	lsrs	r3, r3, #5
 8009b5e:	f003 020f 	and.w	r2, r3, #15
 8009b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4422      	add	r2, r4
 8009b6a:	609a      	str	r2, [r3, #8]
}
 8009b6c:	bf00      	nop
 8009b6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009b72:	46bd      	mov	sp, r7
 8009b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b78:	51eb851f 	.word	0x51eb851f

08009b7c <__cvt>:
 8009b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b80:	ec57 6b10 	vmov	r6, r7, d0
 8009b84:	2f00      	cmp	r7, #0
 8009b86:	460c      	mov	r4, r1
 8009b88:	4619      	mov	r1, r3
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	bfbb      	ittet	lt
 8009b8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b92:	461f      	movlt	r7, r3
 8009b94:	2300      	movge	r3, #0
 8009b96:	232d      	movlt	r3, #45	@ 0x2d
 8009b98:	700b      	strb	r3, [r1, #0]
 8009b9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ba0:	4691      	mov	r9, r2
 8009ba2:	f023 0820 	bic.w	r8, r3, #32
 8009ba6:	bfbc      	itt	lt
 8009ba8:	4632      	movlt	r2, r6
 8009baa:	4616      	movlt	r6, r2
 8009bac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bb0:	d005      	beq.n	8009bbe <__cvt+0x42>
 8009bb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009bb6:	d100      	bne.n	8009bba <__cvt+0x3e>
 8009bb8:	3401      	adds	r4, #1
 8009bba:	2102      	movs	r1, #2
 8009bbc:	e000      	b.n	8009bc0 <__cvt+0x44>
 8009bbe:	2103      	movs	r1, #3
 8009bc0:	ab03      	add	r3, sp, #12
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	ab02      	add	r3, sp, #8
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	ec47 6b10 	vmov	d0, r6, r7
 8009bcc:	4653      	mov	r3, sl
 8009bce:	4622      	mov	r2, r4
 8009bd0:	f000 fe46 	bl	800a860 <_dtoa_r>
 8009bd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009bd8:	4605      	mov	r5, r0
 8009bda:	d119      	bne.n	8009c10 <__cvt+0x94>
 8009bdc:	f019 0f01 	tst.w	r9, #1
 8009be0:	d00e      	beq.n	8009c00 <__cvt+0x84>
 8009be2:	eb00 0904 	add.w	r9, r0, r4
 8009be6:	2200      	movs	r2, #0
 8009be8:	2300      	movs	r3, #0
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 ff8b 	bl	8000b08 <__aeabi_dcmpeq>
 8009bf2:	b108      	cbz	r0, 8009bf8 <__cvt+0x7c>
 8009bf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bf8:	2230      	movs	r2, #48	@ 0x30
 8009bfa:	9b03      	ldr	r3, [sp, #12]
 8009bfc:	454b      	cmp	r3, r9
 8009bfe:	d31e      	bcc.n	8009c3e <__cvt+0xc2>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c04:	1b5b      	subs	r3, r3, r5
 8009c06:	4628      	mov	r0, r5
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	b004      	add	sp, #16
 8009c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c14:	eb00 0904 	add.w	r9, r0, r4
 8009c18:	d1e5      	bne.n	8009be6 <__cvt+0x6a>
 8009c1a:	7803      	ldrb	r3, [r0, #0]
 8009c1c:	2b30      	cmp	r3, #48	@ 0x30
 8009c1e:	d10a      	bne.n	8009c36 <__cvt+0xba>
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4630      	mov	r0, r6
 8009c26:	4639      	mov	r1, r7
 8009c28:	f7f6 ff6e 	bl	8000b08 <__aeabi_dcmpeq>
 8009c2c:	b918      	cbnz	r0, 8009c36 <__cvt+0xba>
 8009c2e:	f1c4 0401 	rsb	r4, r4, #1
 8009c32:	f8ca 4000 	str.w	r4, [sl]
 8009c36:	f8da 3000 	ldr.w	r3, [sl]
 8009c3a:	4499      	add	r9, r3
 8009c3c:	e7d3      	b.n	8009be6 <__cvt+0x6a>
 8009c3e:	1c59      	adds	r1, r3, #1
 8009c40:	9103      	str	r1, [sp, #12]
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e7d9      	b.n	8009bfa <__cvt+0x7e>

08009c46 <__exponent>:
 8009c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	bfba      	itte	lt
 8009c4c:	4249      	neglt	r1, r1
 8009c4e:	232d      	movlt	r3, #45	@ 0x2d
 8009c50:	232b      	movge	r3, #43	@ 0x2b
 8009c52:	2909      	cmp	r1, #9
 8009c54:	7002      	strb	r2, [r0, #0]
 8009c56:	7043      	strb	r3, [r0, #1]
 8009c58:	dd29      	ble.n	8009cae <__exponent+0x68>
 8009c5a:	f10d 0307 	add.w	r3, sp, #7
 8009c5e:	461d      	mov	r5, r3
 8009c60:	270a      	movs	r7, #10
 8009c62:	461a      	mov	r2, r3
 8009c64:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c68:	fb07 1416 	mls	r4, r7, r6, r1
 8009c6c:	3430      	adds	r4, #48	@ 0x30
 8009c6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c72:	460c      	mov	r4, r1
 8009c74:	2c63      	cmp	r4, #99	@ 0x63
 8009c76:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	dcf1      	bgt.n	8009c62 <__exponent+0x1c>
 8009c7e:	3130      	adds	r1, #48	@ 0x30
 8009c80:	1e94      	subs	r4, r2, #2
 8009c82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c86:	1c41      	adds	r1, r0, #1
 8009c88:	4623      	mov	r3, r4
 8009c8a:	42ab      	cmp	r3, r5
 8009c8c:	d30a      	bcc.n	8009ca4 <__exponent+0x5e>
 8009c8e:	f10d 0309 	add.w	r3, sp, #9
 8009c92:	1a9b      	subs	r3, r3, r2
 8009c94:	42ac      	cmp	r4, r5
 8009c96:	bf88      	it	hi
 8009c98:	2300      	movhi	r3, #0
 8009c9a:	3302      	adds	r3, #2
 8009c9c:	4403      	add	r3, r0
 8009c9e:	1a18      	subs	r0, r3, r0
 8009ca0:	b003      	add	sp, #12
 8009ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ca8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009cac:	e7ed      	b.n	8009c8a <__exponent+0x44>
 8009cae:	2330      	movs	r3, #48	@ 0x30
 8009cb0:	3130      	adds	r1, #48	@ 0x30
 8009cb2:	7083      	strb	r3, [r0, #2]
 8009cb4:	70c1      	strb	r1, [r0, #3]
 8009cb6:	1d03      	adds	r3, r0, #4
 8009cb8:	e7f1      	b.n	8009c9e <__exponent+0x58>
	...

08009cbc <_printf_float>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	b08d      	sub	sp, #52	@ 0x34
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009cc8:	4616      	mov	r6, r2
 8009cca:	461f      	mov	r7, r3
 8009ccc:	4605      	mov	r5, r0
 8009cce:	f000 fcb9 	bl	800a644 <_localeconv_r>
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7f6 faea 	bl	80002b0 <strlen>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce4:	9005      	str	r0, [sp, #20]
 8009ce6:	3307      	adds	r3, #7
 8009ce8:	f023 0307 	bic.w	r3, r3, #7
 8009cec:	f103 0208 	add.w	r2, r3, #8
 8009cf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009cf4:	f8d4 b000 	ldr.w	fp, [r4]
 8009cf8:	f8c8 2000 	str.w	r2, [r8]
 8009cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d04:	9307      	str	r3, [sp, #28]
 8009d06:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d12:	4b9c      	ldr	r3, [pc, #624]	@ (8009f84 <_printf_float+0x2c8>)
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	f7f6 ff28 	bl	8000b6c <__aeabi_dcmpun>
 8009d1c:	bb70      	cbnz	r0, 8009d7c <_printf_float+0xc0>
 8009d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d22:	4b98      	ldr	r3, [pc, #608]	@ (8009f84 <_printf_float+0x2c8>)
 8009d24:	f04f 32ff 	mov.w	r2, #4294967295
 8009d28:	f7f6 ff02 	bl	8000b30 <__aeabi_dcmple>
 8009d2c:	bb30      	cbnz	r0, 8009d7c <_printf_float+0xc0>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2300      	movs	r3, #0
 8009d32:	4640      	mov	r0, r8
 8009d34:	4649      	mov	r1, r9
 8009d36:	f7f6 fef1 	bl	8000b1c <__aeabi_dcmplt>
 8009d3a:	b110      	cbz	r0, 8009d42 <_printf_float+0x86>
 8009d3c:	232d      	movs	r3, #45	@ 0x2d
 8009d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d42:	4a91      	ldr	r2, [pc, #580]	@ (8009f88 <_printf_float+0x2cc>)
 8009d44:	4b91      	ldr	r3, [pc, #580]	@ (8009f8c <_printf_float+0x2d0>)
 8009d46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d4a:	bf8c      	ite	hi
 8009d4c:	4690      	movhi	r8, r2
 8009d4e:	4698      	movls	r8, r3
 8009d50:	2303      	movs	r3, #3
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	f02b 0304 	bic.w	r3, fp, #4
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	f04f 0900 	mov.w	r9, #0
 8009d5e:	9700      	str	r7, [sp, #0]
 8009d60:	4633      	mov	r3, r6
 8009d62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d64:	4621      	mov	r1, r4
 8009d66:	4628      	mov	r0, r5
 8009d68:	f000 f9d2 	bl	800a110 <_printf_common>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f040 808d 	bne.w	8009e8c <_printf_float+0x1d0>
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295
 8009d76:	b00d      	add	sp, #52	@ 0x34
 8009d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	464b      	mov	r3, r9
 8009d80:	4640      	mov	r0, r8
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7f6 fef2 	bl	8000b6c <__aeabi_dcmpun>
 8009d88:	b140      	cbz	r0, 8009d9c <_printf_float+0xe0>
 8009d8a:	464b      	mov	r3, r9
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfbc      	itt	lt
 8009d90:	232d      	movlt	r3, #45	@ 0x2d
 8009d92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d96:	4a7e      	ldr	r2, [pc, #504]	@ (8009f90 <_printf_float+0x2d4>)
 8009d98:	4b7e      	ldr	r3, [pc, #504]	@ (8009f94 <_printf_float+0x2d8>)
 8009d9a:	e7d4      	b.n	8009d46 <_printf_float+0x8a>
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009da2:	9206      	str	r2, [sp, #24]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	d13b      	bne.n	8009e20 <_printf_float+0x164>
 8009da8:	2306      	movs	r3, #6
 8009daa:	6063      	str	r3, [r4, #4]
 8009dac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009db0:	2300      	movs	r3, #0
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009db8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009dbc:	ab09      	add	r3, sp, #36	@ 0x24
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	6861      	ldr	r1, [r4, #4]
 8009dc2:	ec49 8b10 	vmov	d0, r8, r9
 8009dc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f7ff fed6 	bl	8009b7c <__cvt>
 8009dd0:	9b06      	ldr	r3, [sp, #24]
 8009dd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dd4:	2b47      	cmp	r3, #71	@ 0x47
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	d129      	bne.n	8009e2e <_printf_float+0x172>
 8009dda:	1cc8      	adds	r0, r1, #3
 8009ddc:	db02      	blt.n	8009de4 <_printf_float+0x128>
 8009dde:	6863      	ldr	r3, [r4, #4]
 8009de0:	4299      	cmp	r1, r3
 8009de2:	dd41      	ble.n	8009e68 <_printf_float+0x1ac>
 8009de4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009de8:	fa5f fa8a 	uxtb.w	sl, sl
 8009dec:	3901      	subs	r1, #1
 8009dee:	4652      	mov	r2, sl
 8009df0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009df4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009df6:	f7ff ff26 	bl	8009c46 <__exponent>
 8009dfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dfc:	1813      	adds	r3, r2, r0
 8009dfe:	2a01      	cmp	r2, #1
 8009e00:	4681      	mov	r9, r0
 8009e02:	6123      	str	r3, [r4, #16]
 8009e04:	dc02      	bgt.n	8009e0c <_printf_float+0x150>
 8009e06:	6822      	ldr	r2, [r4, #0]
 8009e08:	07d2      	lsls	r2, r2, #31
 8009e0a:	d501      	bpl.n	8009e10 <_printf_float+0x154>
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	6123      	str	r3, [r4, #16]
 8009e10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0a2      	beq.n	8009d5e <_printf_float+0xa2>
 8009e18:	232d      	movs	r3, #45	@ 0x2d
 8009e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e1e:	e79e      	b.n	8009d5e <_printf_float+0xa2>
 8009e20:	9a06      	ldr	r2, [sp, #24]
 8009e22:	2a47      	cmp	r2, #71	@ 0x47
 8009e24:	d1c2      	bne.n	8009dac <_printf_float+0xf0>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1c0      	bne.n	8009dac <_printf_float+0xf0>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e7bd      	b.n	8009daa <_printf_float+0xee>
 8009e2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e32:	d9db      	bls.n	8009dec <_printf_float+0x130>
 8009e34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e38:	d118      	bne.n	8009e6c <_printf_float+0x1b0>
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	6863      	ldr	r3, [r4, #4]
 8009e3e:	dd0b      	ble.n	8009e58 <_printf_float+0x19c>
 8009e40:	6121      	str	r1, [r4, #16]
 8009e42:	b913      	cbnz	r3, 8009e4a <_printf_float+0x18e>
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	07d0      	lsls	r0, r2, #31
 8009e48:	d502      	bpl.n	8009e50 <_printf_float+0x194>
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	440b      	add	r3, r1
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e52:	f04f 0900 	mov.w	r9, #0
 8009e56:	e7db      	b.n	8009e10 <_printf_float+0x154>
 8009e58:	b913      	cbnz	r3, 8009e60 <_printf_float+0x1a4>
 8009e5a:	6822      	ldr	r2, [r4, #0]
 8009e5c:	07d2      	lsls	r2, r2, #31
 8009e5e:	d501      	bpl.n	8009e64 <_printf_float+0x1a8>
 8009e60:	3302      	adds	r3, #2
 8009e62:	e7f4      	b.n	8009e4e <_printf_float+0x192>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e7f2      	b.n	8009e4e <_printf_float+0x192>
 8009e68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	db05      	blt.n	8009e7e <_printf_float+0x1c2>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	6121      	str	r1, [r4, #16]
 8009e76:	07d8      	lsls	r0, r3, #31
 8009e78:	d5ea      	bpl.n	8009e50 <_printf_float+0x194>
 8009e7a:	1c4b      	adds	r3, r1, #1
 8009e7c:	e7e7      	b.n	8009e4e <_printf_float+0x192>
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	bfd4      	ite	le
 8009e82:	f1c1 0202 	rsble	r2, r1, #2
 8009e86:	2201      	movgt	r2, #1
 8009e88:	4413      	add	r3, r2
 8009e8a:	e7e0      	b.n	8009e4e <_printf_float+0x192>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	055a      	lsls	r2, r3, #21
 8009e90:	d407      	bmi.n	8009ea2 <_printf_float+0x1e6>
 8009e92:	6923      	ldr	r3, [r4, #16]
 8009e94:	4642      	mov	r2, r8
 8009e96:	4631      	mov	r1, r6
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b8      	blx	r7
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d12b      	bne.n	8009ef8 <_printf_float+0x23c>
 8009ea0:	e767      	b.n	8009d72 <_printf_float+0xb6>
 8009ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ea6:	f240 80dd 	bls.w	800a064 <_printf_float+0x3a8>
 8009eaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f7f6 fe29 	bl	8000b08 <__aeabi_dcmpeq>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d033      	beq.n	8009f22 <_printf_float+0x266>
 8009eba:	4a37      	ldr	r2, [pc, #220]	@ (8009f98 <_printf_float+0x2dc>)
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	f43f af54 	beq.w	8009d72 <_printf_float+0xb6>
 8009eca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009ece:	4543      	cmp	r3, r8
 8009ed0:	db02      	blt.n	8009ed8 <_printf_float+0x21c>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	07d8      	lsls	r0, r3, #31
 8009ed6:	d50f      	bpl.n	8009ef8 <_printf_float+0x23c>
 8009ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	f43f af45 	beq.w	8009d72 <_printf_float+0xb6>
 8009ee8:	f04f 0900 	mov.w	r9, #0
 8009eec:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ef0:	f104 0a1a 	add.w	sl, r4, #26
 8009ef4:	45c8      	cmp	r8, r9
 8009ef6:	dc09      	bgt.n	8009f0c <_printf_float+0x250>
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	079b      	lsls	r3, r3, #30
 8009efc:	f100 8103 	bmi.w	800a106 <_printf_float+0x44a>
 8009f00:	68e0      	ldr	r0, [r4, #12]
 8009f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f04:	4298      	cmp	r0, r3
 8009f06:	bfb8      	it	lt
 8009f08:	4618      	movlt	r0, r3
 8009f0a:	e734      	b.n	8009d76 <_printf_float+0xba>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4652      	mov	r2, sl
 8009f10:	4631      	mov	r1, r6
 8009f12:	4628      	mov	r0, r5
 8009f14:	47b8      	blx	r7
 8009f16:	3001      	adds	r0, #1
 8009f18:	f43f af2b 	beq.w	8009d72 <_printf_float+0xb6>
 8009f1c:	f109 0901 	add.w	r9, r9, #1
 8009f20:	e7e8      	b.n	8009ef4 <_printf_float+0x238>
 8009f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dc39      	bgt.n	8009f9c <_printf_float+0x2e0>
 8009f28:	4a1b      	ldr	r2, [pc, #108]	@ (8009f98 <_printf_float+0x2dc>)
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f af1d 	beq.w	8009d72 <_printf_float+0xb6>
 8009f38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f3c:	ea59 0303 	orrs.w	r3, r9, r3
 8009f40:	d102      	bne.n	8009f48 <_printf_float+0x28c>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	07d9      	lsls	r1, r3, #31
 8009f46:	d5d7      	bpl.n	8009ef8 <_printf_float+0x23c>
 8009f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f af0d 	beq.w	8009d72 <_printf_float+0xb6>
 8009f58:	f04f 0a00 	mov.w	sl, #0
 8009f5c:	f104 0b1a 	add.w	fp, r4, #26
 8009f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f62:	425b      	negs	r3, r3
 8009f64:	4553      	cmp	r3, sl
 8009f66:	dc01      	bgt.n	8009f6c <_printf_float+0x2b0>
 8009f68:	464b      	mov	r3, r9
 8009f6a:	e793      	b.n	8009e94 <_printf_float+0x1d8>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	465a      	mov	r2, fp
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f aefb 	beq.w	8009d72 <_printf_float+0xb6>
 8009f7c:	f10a 0a01 	add.w	sl, sl, #1
 8009f80:	e7ee      	b.n	8009f60 <_printf_float+0x2a4>
 8009f82:	bf00      	nop
 8009f84:	7fefffff 	.word	0x7fefffff
 8009f88:	0800c9bc 	.word	0x0800c9bc
 8009f8c:	0800c9b8 	.word	0x0800c9b8
 8009f90:	0800c9c4 	.word	0x0800c9c4
 8009f94:	0800c9c0 	.word	0x0800c9c0
 8009f98:	0800c9c8 	.word	0x0800c9c8
 8009f9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fa2:	4553      	cmp	r3, sl
 8009fa4:	bfa8      	it	ge
 8009fa6:	4653      	movge	r3, sl
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	4699      	mov	r9, r3
 8009fac:	dc36      	bgt.n	800a01c <_printf_float+0x360>
 8009fae:	f04f 0b00 	mov.w	fp, #0
 8009fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fb6:	f104 021a 	add.w	r2, r4, #26
 8009fba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fbc:	9306      	str	r3, [sp, #24]
 8009fbe:	eba3 0309 	sub.w	r3, r3, r9
 8009fc2:	455b      	cmp	r3, fp
 8009fc4:	dc31      	bgt.n	800a02a <_printf_float+0x36e>
 8009fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc8:	459a      	cmp	sl, r3
 8009fca:	dc3a      	bgt.n	800a042 <_printf_float+0x386>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	07da      	lsls	r2, r3, #31
 8009fd0:	d437      	bmi.n	800a042 <_printf_float+0x386>
 8009fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd4:	ebaa 0903 	sub.w	r9, sl, r3
 8009fd8:	9b06      	ldr	r3, [sp, #24]
 8009fda:	ebaa 0303 	sub.w	r3, sl, r3
 8009fde:	4599      	cmp	r9, r3
 8009fe0:	bfa8      	it	ge
 8009fe2:	4699      	movge	r9, r3
 8009fe4:	f1b9 0f00 	cmp.w	r9, #0
 8009fe8:	dc33      	bgt.n	800a052 <_printf_float+0x396>
 8009fea:	f04f 0800 	mov.w	r8, #0
 8009fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ff2:	f104 0b1a 	add.w	fp, r4, #26
 8009ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff8:	ebaa 0303 	sub.w	r3, sl, r3
 8009ffc:	eba3 0309 	sub.w	r3, r3, r9
 800a000:	4543      	cmp	r3, r8
 800a002:	f77f af79 	ble.w	8009ef8 <_printf_float+0x23c>
 800a006:	2301      	movs	r3, #1
 800a008:	465a      	mov	r2, fp
 800a00a:	4631      	mov	r1, r6
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f aeae 	beq.w	8009d72 <_printf_float+0xb6>
 800a016:	f108 0801 	add.w	r8, r8, #1
 800a01a:	e7ec      	b.n	8009ff6 <_printf_float+0x33a>
 800a01c:	4642      	mov	r2, r8
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	d1c2      	bne.n	8009fae <_printf_float+0x2f2>
 800a028:	e6a3      	b.n	8009d72 <_printf_float+0xb6>
 800a02a:	2301      	movs	r3, #1
 800a02c:	4631      	mov	r1, r6
 800a02e:	4628      	mov	r0, r5
 800a030:	9206      	str	r2, [sp, #24]
 800a032:	47b8      	blx	r7
 800a034:	3001      	adds	r0, #1
 800a036:	f43f ae9c 	beq.w	8009d72 <_printf_float+0xb6>
 800a03a:	9a06      	ldr	r2, [sp, #24]
 800a03c:	f10b 0b01 	add.w	fp, fp, #1
 800a040:	e7bb      	b.n	8009fba <_printf_float+0x2fe>
 800a042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a046:	4631      	mov	r1, r6
 800a048:	4628      	mov	r0, r5
 800a04a:	47b8      	blx	r7
 800a04c:	3001      	adds	r0, #1
 800a04e:	d1c0      	bne.n	8009fd2 <_printf_float+0x316>
 800a050:	e68f      	b.n	8009d72 <_printf_float+0xb6>
 800a052:	9a06      	ldr	r2, [sp, #24]
 800a054:	464b      	mov	r3, r9
 800a056:	4442      	add	r2, r8
 800a058:	4631      	mov	r1, r6
 800a05a:	4628      	mov	r0, r5
 800a05c:	47b8      	blx	r7
 800a05e:	3001      	adds	r0, #1
 800a060:	d1c3      	bne.n	8009fea <_printf_float+0x32e>
 800a062:	e686      	b.n	8009d72 <_printf_float+0xb6>
 800a064:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a068:	f1ba 0f01 	cmp.w	sl, #1
 800a06c:	dc01      	bgt.n	800a072 <_printf_float+0x3b6>
 800a06e:	07db      	lsls	r3, r3, #31
 800a070:	d536      	bpl.n	800a0e0 <_printf_float+0x424>
 800a072:	2301      	movs	r3, #1
 800a074:	4642      	mov	r2, r8
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	f43f ae78 	beq.w	8009d72 <_printf_float+0xb6>
 800a082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	f43f ae70 	beq.w	8009d72 <_printf_float+0xb6>
 800a092:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a096:	2200      	movs	r2, #0
 800a098:	2300      	movs	r3, #0
 800a09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a09e:	f7f6 fd33 	bl	8000b08 <__aeabi_dcmpeq>
 800a0a2:	b9c0      	cbnz	r0, 800a0d6 <_printf_float+0x41a>
 800a0a4:	4653      	mov	r3, sl
 800a0a6:	f108 0201 	add.w	r2, r8, #1
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b8      	blx	r7
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	d10c      	bne.n	800a0ce <_printf_float+0x412>
 800a0b4:	e65d      	b.n	8009d72 <_printf_float+0xb6>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	465a      	mov	r2, fp
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	4628      	mov	r0, r5
 800a0be:	47b8      	blx	r7
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	f43f ae56 	beq.w	8009d72 <_printf_float+0xb6>
 800a0c6:	f108 0801 	add.w	r8, r8, #1
 800a0ca:	45d0      	cmp	r8, sl
 800a0cc:	dbf3      	blt.n	800a0b6 <_printf_float+0x3fa>
 800a0ce:	464b      	mov	r3, r9
 800a0d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0d4:	e6df      	b.n	8009e96 <_printf_float+0x1da>
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	f104 0b1a 	add.w	fp, r4, #26
 800a0de:	e7f4      	b.n	800a0ca <_printf_float+0x40e>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	4642      	mov	r2, r8
 800a0e4:	e7e1      	b.n	800a0aa <_printf_float+0x3ee>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	464a      	mov	r2, r9
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b8      	blx	r7
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	f43f ae3e 	beq.w	8009d72 <_printf_float+0xb6>
 800a0f6:	f108 0801 	add.w	r8, r8, #1
 800a0fa:	68e3      	ldr	r3, [r4, #12]
 800a0fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0fe:	1a5b      	subs	r3, r3, r1
 800a100:	4543      	cmp	r3, r8
 800a102:	dcf0      	bgt.n	800a0e6 <_printf_float+0x42a>
 800a104:	e6fc      	b.n	8009f00 <_printf_float+0x244>
 800a106:	f04f 0800 	mov.w	r8, #0
 800a10a:	f104 0919 	add.w	r9, r4, #25
 800a10e:	e7f4      	b.n	800a0fa <_printf_float+0x43e>

0800a110 <_printf_common>:
 800a110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a114:	4616      	mov	r6, r2
 800a116:	4698      	mov	r8, r3
 800a118:	688a      	ldr	r2, [r1, #8]
 800a11a:	690b      	ldr	r3, [r1, #16]
 800a11c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a120:	4293      	cmp	r3, r2
 800a122:	bfb8      	it	lt
 800a124:	4613      	movlt	r3, r2
 800a126:	6033      	str	r3, [r6, #0]
 800a128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a12c:	4607      	mov	r7, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	b10a      	cbz	r2, 800a136 <_printf_common+0x26>
 800a132:	3301      	adds	r3, #1
 800a134:	6033      	str	r3, [r6, #0]
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	0699      	lsls	r1, r3, #26
 800a13a:	bf42      	ittt	mi
 800a13c:	6833      	ldrmi	r3, [r6, #0]
 800a13e:	3302      	addmi	r3, #2
 800a140:	6033      	strmi	r3, [r6, #0]
 800a142:	6825      	ldr	r5, [r4, #0]
 800a144:	f015 0506 	ands.w	r5, r5, #6
 800a148:	d106      	bne.n	800a158 <_printf_common+0x48>
 800a14a:	f104 0a19 	add.w	sl, r4, #25
 800a14e:	68e3      	ldr	r3, [r4, #12]
 800a150:	6832      	ldr	r2, [r6, #0]
 800a152:	1a9b      	subs	r3, r3, r2
 800a154:	42ab      	cmp	r3, r5
 800a156:	dc26      	bgt.n	800a1a6 <_printf_common+0x96>
 800a158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	3b00      	subs	r3, #0
 800a160:	bf18      	it	ne
 800a162:	2301      	movne	r3, #1
 800a164:	0692      	lsls	r2, r2, #26
 800a166:	d42b      	bmi.n	800a1c0 <_printf_common+0xb0>
 800a168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a16c:	4641      	mov	r1, r8
 800a16e:	4638      	mov	r0, r7
 800a170:	47c8      	blx	r9
 800a172:	3001      	adds	r0, #1
 800a174:	d01e      	beq.n	800a1b4 <_printf_common+0xa4>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	6922      	ldr	r2, [r4, #16]
 800a17a:	f003 0306 	and.w	r3, r3, #6
 800a17e:	2b04      	cmp	r3, #4
 800a180:	bf02      	ittt	eq
 800a182:	68e5      	ldreq	r5, [r4, #12]
 800a184:	6833      	ldreq	r3, [r6, #0]
 800a186:	1aed      	subeq	r5, r5, r3
 800a188:	68a3      	ldr	r3, [r4, #8]
 800a18a:	bf0c      	ite	eq
 800a18c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a190:	2500      	movne	r5, #0
 800a192:	4293      	cmp	r3, r2
 800a194:	bfc4      	itt	gt
 800a196:	1a9b      	subgt	r3, r3, r2
 800a198:	18ed      	addgt	r5, r5, r3
 800a19a:	2600      	movs	r6, #0
 800a19c:	341a      	adds	r4, #26
 800a19e:	42b5      	cmp	r5, r6
 800a1a0:	d11a      	bne.n	800a1d8 <_printf_common+0xc8>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	e008      	b.n	800a1b8 <_printf_common+0xa8>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	4641      	mov	r1, r8
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	47c8      	blx	r9
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d103      	bne.n	800a1bc <_printf_common+0xac>
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1bc:	3501      	adds	r5, #1
 800a1be:	e7c6      	b.n	800a14e <_printf_common+0x3e>
 800a1c0:	18e1      	adds	r1, r4, r3
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	2030      	movs	r0, #48	@ 0x30
 800a1c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1ca:	4422      	add	r2, r4
 800a1cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1d4:	3302      	adds	r3, #2
 800a1d6:	e7c7      	b.n	800a168 <_printf_common+0x58>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4622      	mov	r2, r4
 800a1dc:	4641      	mov	r1, r8
 800a1de:	4638      	mov	r0, r7
 800a1e0:	47c8      	blx	r9
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d0e6      	beq.n	800a1b4 <_printf_common+0xa4>
 800a1e6:	3601      	adds	r6, #1
 800a1e8:	e7d9      	b.n	800a19e <_printf_common+0x8e>
	...

0800a1ec <_printf_i>:
 800a1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	7e0f      	ldrb	r7, [r1, #24]
 800a1f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1f4:	2f78      	cmp	r7, #120	@ 0x78
 800a1f6:	4691      	mov	r9, r2
 800a1f8:	4680      	mov	r8, r0
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	469a      	mov	sl, r3
 800a1fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a202:	d807      	bhi.n	800a214 <_printf_i+0x28>
 800a204:	2f62      	cmp	r7, #98	@ 0x62
 800a206:	d80a      	bhi.n	800a21e <_printf_i+0x32>
 800a208:	2f00      	cmp	r7, #0
 800a20a:	f000 80d1 	beq.w	800a3b0 <_printf_i+0x1c4>
 800a20e:	2f58      	cmp	r7, #88	@ 0x58
 800a210:	f000 80b8 	beq.w	800a384 <_printf_i+0x198>
 800a214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a21c:	e03a      	b.n	800a294 <_printf_i+0xa8>
 800a21e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a222:	2b15      	cmp	r3, #21
 800a224:	d8f6      	bhi.n	800a214 <_printf_i+0x28>
 800a226:	a101      	add	r1, pc, #4	@ (adr r1, 800a22c <_printf_i+0x40>)
 800a228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a22c:	0800a285 	.word	0x0800a285
 800a230:	0800a299 	.word	0x0800a299
 800a234:	0800a215 	.word	0x0800a215
 800a238:	0800a215 	.word	0x0800a215
 800a23c:	0800a215 	.word	0x0800a215
 800a240:	0800a215 	.word	0x0800a215
 800a244:	0800a299 	.word	0x0800a299
 800a248:	0800a215 	.word	0x0800a215
 800a24c:	0800a215 	.word	0x0800a215
 800a250:	0800a215 	.word	0x0800a215
 800a254:	0800a215 	.word	0x0800a215
 800a258:	0800a397 	.word	0x0800a397
 800a25c:	0800a2c3 	.word	0x0800a2c3
 800a260:	0800a351 	.word	0x0800a351
 800a264:	0800a215 	.word	0x0800a215
 800a268:	0800a215 	.word	0x0800a215
 800a26c:	0800a3b9 	.word	0x0800a3b9
 800a270:	0800a215 	.word	0x0800a215
 800a274:	0800a2c3 	.word	0x0800a2c3
 800a278:	0800a215 	.word	0x0800a215
 800a27c:	0800a215 	.word	0x0800a215
 800a280:	0800a359 	.word	0x0800a359
 800a284:	6833      	ldr	r3, [r6, #0]
 800a286:	1d1a      	adds	r2, r3, #4
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6032      	str	r2, [r6, #0]
 800a28c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a294:	2301      	movs	r3, #1
 800a296:	e09c      	b.n	800a3d2 <_printf_i+0x1e6>
 800a298:	6833      	ldr	r3, [r6, #0]
 800a29a:	6820      	ldr	r0, [r4, #0]
 800a29c:	1d19      	adds	r1, r3, #4
 800a29e:	6031      	str	r1, [r6, #0]
 800a2a0:	0606      	lsls	r6, r0, #24
 800a2a2:	d501      	bpl.n	800a2a8 <_printf_i+0xbc>
 800a2a4:	681d      	ldr	r5, [r3, #0]
 800a2a6:	e003      	b.n	800a2b0 <_printf_i+0xc4>
 800a2a8:	0645      	lsls	r5, r0, #25
 800a2aa:	d5fb      	bpl.n	800a2a4 <_printf_i+0xb8>
 800a2ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2b0:	2d00      	cmp	r5, #0
 800a2b2:	da03      	bge.n	800a2bc <_printf_i+0xd0>
 800a2b4:	232d      	movs	r3, #45	@ 0x2d
 800a2b6:	426d      	negs	r5, r5
 800a2b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2bc:	4858      	ldr	r0, [pc, #352]	@ (800a420 <_printf_i+0x234>)
 800a2be:	230a      	movs	r3, #10
 800a2c0:	e011      	b.n	800a2e6 <_printf_i+0xfa>
 800a2c2:	6821      	ldr	r1, [r4, #0]
 800a2c4:	6833      	ldr	r3, [r6, #0]
 800a2c6:	0608      	lsls	r0, r1, #24
 800a2c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2cc:	d402      	bmi.n	800a2d4 <_printf_i+0xe8>
 800a2ce:	0649      	lsls	r1, r1, #25
 800a2d0:	bf48      	it	mi
 800a2d2:	b2ad      	uxthmi	r5, r5
 800a2d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2d6:	4852      	ldr	r0, [pc, #328]	@ (800a420 <_printf_i+0x234>)
 800a2d8:	6033      	str	r3, [r6, #0]
 800a2da:	bf14      	ite	ne
 800a2dc:	230a      	movne	r3, #10
 800a2de:	2308      	moveq	r3, #8
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2e6:	6866      	ldr	r6, [r4, #4]
 800a2e8:	60a6      	str	r6, [r4, #8]
 800a2ea:	2e00      	cmp	r6, #0
 800a2ec:	db05      	blt.n	800a2fa <_printf_i+0x10e>
 800a2ee:	6821      	ldr	r1, [r4, #0]
 800a2f0:	432e      	orrs	r6, r5
 800a2f2:	f021 0104 	bic.w	r1, r1, #4
 800a2f6:	6021      	str	r1, [r4, #0]
 800a2f8:	d04b      	beq.n	800a392 <_printf_i+0x1a6>
 800a2fa:	4616      	mov	r6, r2
 800a2fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a300:	fb03 5711 	mls	r7, r3, r1, r5
 800a304:	5dc7      	ldrb	r7, [r0, r7]
 800a306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a30a:	462f      	mov	r7, r5
 800a30c:	42bb      	cmp	r3, r7
 800a30e:	460d      	mov	r5, r1
 800a310:	d9f4      	bls.n	800a2fc <_printf_i+0x110>
 800a312:	2b08      	cmp	r3, #8
 800a314:	d10b      	bne.n	800a32e <_printf_i+0x142>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	07df      	lsls	r7, r3, #31
 800a31a:	d508      	bpl.n	800a32e <_printf_i+0x142>
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	6861      	ldr	r1, [r4, #4]
 800a320:	4299      	cmp	r1, r3
 800a322:	bfde      	ittt	le
 800a324:	2330      	movle	r3, #48	@ 0x30
 800a326:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a32a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a32e:	1b92      	subs	r2, r2, r6
 800a330:	6122      	str	r2, [r4, #16]
 800a332:	f8cd a000 	str.w	sl, [sp]
 800a336:	464b      	mov	r3, r9
 800a338:	aa03      	add	r2, sp, #12
 800a33a:	4621      	mov	r1, r4
 800a33c:	4640      	mov	r0, r8
 800a33e:	f7ff fee7 	bl	800a110 <_printf_common>
 800a342:	3001      	adds	r0, #1
 800a344:	d14a      	bne.n	800a3dc <_printf_i+0x1f0>
 800a346:	f04f 30ff 	mov.w	r0, #4294967295
 800a34a:	b004      	add	sp, #16
 800a34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	f043 0320 	orr.w	r3, r3, #32
 800a356:	6023      	str	r3, [r4, #0]
 800a358:	4832      	ldr	r0, [pc, #200]	@ (800a424 <_printf_i+0x238>)
 800a35a:	2778      	movs	r7, #120	@ 0x78
 800a35c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	6831      	ldr	r1, [r6, #0]
 800a364:	061f      	lsls	r7, r3, #24
 800a366:	f851 5b04 	ldr.w	r5, [r1], #4
 800a36a:	d402      	bmi.n	800a372 <_printf_i+0x186>
 800a36c:	065f      	lsls	r7, r3, #25
 800a36e:	bf48      	it	mi
 800a370:	b2ad      	uxthmi	r5, r5
 800a372:	6031      	str	r1, [r6, #0]
 800a374:	07d9      	lsls	r1, r3, #31
 800a376:	bf44      	itt	mi
 800a378:	f043 0320 	orrmi.w	r3, r3, #32
 800a37c:	6023      	strmi	r3, [r4, #0]
 800a37e:	b11d      	cbz	r5, 800a388 <_printf_i+0x19c>
 800a380:	2310      	movs	r3, #16
 800a382:	e7ad      	b.n	800a2e0 <_printf_i+0xf4>
 800a384:	4826      	ldr	r0, [pc, #152]	@ (800a420 <_printf_i+0x234>)
 800a386:	e7e9      	b.n	800a35c <_printf_i+0x170>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	f023 0320 	bic.w	r3, r3, #32
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	e7f6      	b.n	800a380 <_printf_i+0x194>
 800a392:	4616      	mov	r6, r2
 800a394:	e7bd      	b.n	800a312 <_printf_i+0x126>
 800a396:	6833      	ldr	r3, [r6, #0]
 800a398:	6825      	ldr	r5, [r4, #0]
 800a39a:	6961      	ldr	r1, [r4, #20]
 800a39c:	1d18      	adds	r0, r3, #4
 800a39e:	6030      	str	r0, [r6, #0]
 800a3a0:	062e      	lsls	r6, r5, #24
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	d501      	bpl.n	800a3aa <_printf_i+0x1be>
 800a3a6:	6019      	str	r1, [r3, #0]
 800a3a8:	e002      	b.n	800a3b0 <_printf_i+0x1c4>
 800a3aa:	0668      	lsls	r0, r5, #25
 800a3ac:	d5fb      	bpl.n	800a3a6 <_printf_i+0x1ba>
 800a3ae:	8019      	strh	r1, [r3, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	4616      	mov	r6, r2
 800a3b6:	e7bc      	b.n	800a332 <_printf_i+0x146>
 800a3b8:	6833      	ldr	r3, [r6, #0]
 800a3ba:	1d1a      	adds	r2, r3, #4
 800a3bc:	6032      	str	r2, [r6, #0]
 800a3be:	681e      	ldr	r6, [r3, #0]
 800a3c0:	6862      	ldr	r2, [r4, #4]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	f7f5 ff23 	bl	8000210 <memchr>
 800a3ca:	b108      	cbz	r0, 800a3d0 <_printf_i+0x1e4>
 800a3cc:	1b80      	subs	r0, r0, r6
 800a3ce:	6060      	str	r0, [r4, #4]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3da:	e7aa      	b.n	800a332 <_printf_i+0x146>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	4632      	mov	r2, r6
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	47d0      	blx	sl
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d0ad      	beq.n	800a346 <_printf_i+0x15a>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	079b      	lsls	r3, r3, #30
 800a3ee:	d413      	bmi.n	800a418 <_printf_i+0x22c>
 800a3f0:	68e0      	ldr	r0, [r4, #12]
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	4298      	cmp	r0, r3
 800a3f6:	bfb8      	it	lt
 800a3f8:	4618      	movlt	r0, r3
 800a3fa:	e7a6      	b.n	800a34a <_printf_i+0x15e>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4632      	mov	r2, r6
 800a400:	4649      	mov	r1, r9
 800a402:	4640      	mov	r0, r8
 800a404:	47d0      	blx	sl
 800a406:	3001      	adds	r0, #1
 800a408:	d09d      	beq.n	800a346 <_printf_i+0x15a>
 800a40a:	3501      	adds	r5, #1
 800a40c:	68e3      	ldr	r3, [r4, #12]
 800a40e:	9903      	ldr	r1, [sp, #12]
 800a410:	1a5b      	subs	r3, r3, r1
 800a412:	42ab      	cmp	r3, r5
 800a414:	dcf2      	bgt.n	800a3fc <_printf_i+0x210>
 800a416:	e7eb      	b.n	800a3f0 <_printf_i+0x204>
 800a418:	2500      	movs	r5, #0
 800a41a:	f104 0619 	add.w	r6, r4, #25
 800a41e:	e7f5      	b.n	800a40c <_printf_i+0x220>
 800a420:	0800c9ca 	.word	0x0800c9ca
 800a424:	0800c9db 	.word	0x0800c9db

0800a428 <std>:
 800a428:	2300      	movs	r3, #0
 800a42a:	b510      	push	{r4, lr}
 800a42c:	4604      	mov	r4, r0
 800a42e:	e9c0 3300 	strd	r3, r3, [r0]
 800a432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a436:	6083      	str	r3, [r0, #8]
 800a438:	8181      	strh	r1, [r0, #12]
 800a43a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a43c:	81c2      	strh	r2, [r0, #14]
 800a43e:	6183      	str	r3, [r0, #24]
 800a440:	4619      	mov	r1, r3
 800a442:	2208      	movs	r2, #8
 800a444:	305c      	adds	r0, #92	@ 0x5c
 800a446:	f000 f8f4 	bl	800a632 <memset>
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <std+0x58>)
 800a44c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <std+0x5c>)
 800a450:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a452:	4b0d      	ldr	r3, [pc, #52]	@ (800a488 <std+0x60>)
 800a454:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a456:	4b0d      	ldr	r3, [pc, #52]	@ (800a48c <std+0x64>)
 800a458:	6323      	str	r3, [r4, #48]	@ 0x30
 800a45a:	4b0d      	ldr	r3, [pc, #52]	@ (800a490 <std+0x68>)
 800a45c:	6224      	str	r4, [r4, #32]
 800a45e:	429c      	cmp	r4, r3
 800a460:	d006      	beq.n	800a470 <std+0x48>
 800a462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a466:	4294      	cmp	r4, r2
 800a468:	d002      	beq.n	800a470 <std+0x48>
 800a46a:	33d0      	adds	r3, #208	@ 0xd0
 800a46c:	429c      	cmp	r4, r3
 800a46e:	d105      	bne.n	800a47c <std+0x54>
 800a470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a478:	f000 b958 	b.w	800a72c <__retarget_lock_init_recursive>
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	bf00      	nop
 800a480:	0800a5ad 	.word	0x0800a5ad
 800a484:	0800a5cf 	.word	0x0800a5cf
 800a488:	0800a607 	.word	0x0800a607
 800a48c:	0800a62b 	.word	0x0800a62b
 800a490:	20000d4c 	.word	0x20000d4c

0800a494 <stdio_exit_handler>:
 800a494:	4a02      	ldr	r2, [pc, #8]	@ (800a4a0 <stdio_exit_handler+0xc>)
 800a496:	4903      	ldr	r1, [pc, #12]	@ (800a4a4 <stdio_exit_handler+0x10>)
 800a498:	4803      	ldr	r0, [pc, #12]	@ (800a4a8 <stdio_exit_handler+0x14>)
 800a49a:	f000 b869 	b.w	800a570 <_fwalk_sglue>
 800a49e:	bf00      	nop
 800a4a0:	20000010 	.word	0x20000010
 800a4a4:	0800bdfd 	.word	0x0800bdfd
 800a4a8:	20000020 	.word	0x20000020

0800a4ac <cleanup_stdio>:
 800a4ac:	6841      	ldr	r1, [r0, #4]
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e0 <cleanup_stdio+0x34>)
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	b510      	push	{r4, lr}
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	d001      	beq.n	800a4bc <cleanup_stdio+0x10>
 800a4b8:	f001 fca0 	bl	800bdfc <_fflush_r>
 800a4bc:	68a1      	ldr	r1, [r4, #8]
 800a4be:	4b09      	ldr	r3, [pc, #36]	@ (800a4e4 <cleanup_stdio+0x38>)
 800a4c0:	4299      	cmp	r1, r3
 800a4c2:	d002      	beq.n	800a4ca <cleanup_stdio+0x1e>
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f001 fc99 	bl	800bdfc <_fflush_r>
 800a4ca:	68e1      	ldr	r1, [r4, #12]
 800a4cc:	4b06      	ldr	r3, [pc, #24]	@ (800a4e8 <cleanup_stdio+0x3c>)
 800a4ce:	4299      	cmp	r1, r3
 800a4d0:	d004      	beq.n	800a4dc <cleanup_stdio+0x30>
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d8:	f001 bc90 	b.w	800bdfc <_fflush_r>
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000d4c 	.word	0x20000d4c
 800a4e4:	20000db4 	.word	0x20000db4
 800a4e8:	20000e1c 	.word	0x20000e1c

0800a4ec <global_stdio_init.part.0>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a51c <global_stdio_init.part.0+0x30>)
 800a4f0:	4c0b      	ldr	r4, [pc, #44]	@ (800a520 <global_stdio_init.part.0+0x34>)
 800a4f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a524 <global_stdio_init.part.0+0x38>)
 800a4f4:	601a      	str	r2, [r3, #0]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2104      	movs	r1, #4
 800a4fc:	f7ff ff94 	bl	800a428 <std>
 800a500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a504:	2201      	movs	r2, #1
 800a506:	2109      	movs	r1, #9
 800a508:	f7ff ff8e 	bl	800a428 <std>
 800a50c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a510:	2202      	movs	r2, #2
 800a512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a516:	2112      	movs	r1, #18
 800a518:	f7ff bf86 	b.w	800a428 <std>
 800a51c:	20000e84 	.word	0x20000e84
 800a520:	20000d4c 	.word	0x20000d4c
 800a524:	0800a495 	.word	0x0800a495

0800a528 <__sfp_lock_acquire>:
 800a528:	4801      	ldr	r0, [pc, #4]	@ (800a530 <__sfp_lock_acquire+0x8>)
 800a52a:	f000 b900 	b.w	800a72e <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	20000e8d 	.word	0x20000e8d

0800a534 <__sfp_lock_release>:
 800a534:	4801      	ldr	r0, [pc, #4]	@ (800a53c <__sfp_lock_release+0x8>)
 800a536:	f000 b8fb 	b.w	800a730 <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	20000e8d 	.word	0x20000e8d

0800a540 <__sinit>:
 800a540:	b510      	push	{r4, lr}
 800a542:	4604      	mov	r4, r0
 800a544:	f7ff fff0 	bl	800a528 <__sfp_lock_acquire>
 800a548:	6a23      	ldr	r3, [r4, #32]
 800a54a:	b11b      	cbz	r3, 800a554 <__sinit+0x14>
 800a54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a550:	f7ff bff0 	b.w	800a534 <__sfp_lock_release>
 800a554:	4b04      	ldr	r3, [pc, #16]	@ (800a568 <__sinit+0x28>)
 800a556:	6223      	str	r3, [r4, #32]
 800a558:	4b04      	ldr	r3, [pc, #16]	@ (800a56c <__sinit+0x2c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1f5      	bne.n	800a54c <__sinit+0xc>
 800a560:	f7ff ffc4 	bl	800a4ec <global_stdio_init.part.0>
 800a564:	e7f2      	b.n	800a54c <__sinit+0xc>
 800a566:	bf00      	nop
 800a568:	0800a4ad 	.word	0x0800a4ad
 800a56c:	20000e84 	.word	0x20000e84

0800a570 <_fwalk_sglue>:
 800a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a574:	4607      	mov	r7, r0
 800a576:	4688      	mov	r8, r1
 800a578:	4614      	mov	r4, r2
 800a57a:	2600      	movs	r6, #0
 800a57c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a580:	f1b9 0901 	subs.w	r9, r9, #1
 800a584:	d505      	bpl.n	800a592 <_fwalk_sglue+0x22>
 800a586:	6824      	ldr	r4, [r4, #0]
 800a588:	2c00      	cmp	r4, #0
 800a58a:	d1f7      	bne.n	800a57c <_fwalk_sglue+0xc>
 800a58c:	4630      	mov	r0, r6
 800a58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a592:	89ab      	ldrh	r3, [r5, #12]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d907      	bls.n	800a5a8 <_fwalk_sglue+0x38>
 800a598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a59c:	3301      	adds	r3, #1
 800a59e:	d003      	beq.n	800a5a8 <_fwalk_sglue+0x38>
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	47c0      	blx	r8
 800a5a6:	4306      	orrs	r6, r0
 800a5a8:	3568      	adds	r5, #104	@ 0x68
 800a5aa:	e7e9      	b.n	800a580 <_fwalk_sglue+0x10>

0800a5ac <__sread>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	f000 f86c 	bl	800a690 <_read_r>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	bfab      	itete	ge
 800a5bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5be:	89a3      	ldrhlt	r3, [r4, #12]
 800a5c0:	181b      	addge	r3, r3, r0
 800a5c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5c6:	bfac      	ite	ge
 800a5c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5ca:	81a3      	strhlt	r3, [r4, #12]
 800a5cc:	bd10      	pop	{r4, pc}

0800a5ce <__swrite>:
 800a5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d2:	461f      	mov	r7, r3
 800a5d4:	898b      	ldrh	r3, [r1, #12]
 800a5d6:	05db      	lsls	r3, r3, #23
 800a5d8:	4605      	mov	r5, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	4616      	mov	r6, r2
 800a5de:	d505      	bpl.n	800a5ec <__swrite+0x1e>
 800a5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f000 f840 	bl	800a66c <_lseek_r>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a602:	f000 b857 	b.w	800a6b4 <_write_r>

0800a606 <__sseek>:
 800a606:	b510      	push	{r4, lr}
 800a608:	460c      	mov	r4, r1
 800a60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60e:	f000 f82d 	bl	800a66c <_lseek_r>
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	bf15      	itete	ne
 800a618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a61a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a61e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a622:	81a3      	strheq	r3, [r4, #12]
 800a624:	bf18      	it	ne
 800a626:	81a3      	strhne	r3, [r4, #12]
 800a628:	bd10      	pop	{r4, pc}

0800a62a <__sclose>:
 800a62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62e:	f000 b80d 	b.w	800a64c <_close_r>

0800a632 <memset>:
 800a632:	4402      	add	r2, r0
 800a634:	4603      	mov	r3, r0
 800a636:	4293      	cmp	r3, r2
 800a638:	d100      	bne.n	800a63c <memset+0xa>
 800a63a:	4770      	bx	lr
 800a63c:	f803 1b01 	strb.w	r1, [r3], #1
 800a640:	e7f9      	b.n	800a636 <memset+0x4>
	...

0800a644 <_localeconv_r>:
 800a644:	4800      	ldr	r0, [pc, #0]	@ (800a648 <_localeconv_r+0x4>)
 800a646:	4770      	bx	lr
 800a648:	2000015c 	.word	0x2000015c

0800a64c <_close_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d06      	ldr	r5, [pc, #24]	@ (800a668 <_close_r+0x1c>)
 800a650:	2300      	movs	r3, #0
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7f9 fcf8 	bl	800404c <_close>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_close_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_close_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	20000e88 	.word	0x20000e88

0800a66c <_lseek_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	@ (800a68c <_lseek_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f9 fd0d 	bl	800409a <_lseek>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_lseek_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_lseek_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	20000e88 	.word	0x20000e88

0800a690 <_read_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d07      	ldr	r5, [pc, #28]	@ (800a6b0 <_read_r+0x20>)
 800a694:	4604      	mov	r4, r0
 800a696:	4608      	mov	r0, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f9 fc9b 	bl	8003fda <_read>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_read_r+0x1e>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_read_r+0x1e>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20000e88 	.word	0x20000e88

0800a6b4 <_write_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	@ (800a6d4 <_write_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f9 fca6 	bl	8004014 <_write>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_write_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_write_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20000e88 	.word	0x20000e88

0800a6d8 <__errno>:
 800a6d8:	4b01      	ldr	r3, [pc, #4]	@ (800a6e0 <__errno+0x8>)
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	2000001c 	.word	0x2000001c

0800a6e4 <__libc_init_array>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a71c <__libc_init_array+0x38>)
 800a6e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a720 <__libc_init_array+0x3c>)
 800a6ea:	1b64      	subs	r4, r4, r5
 800a6ec:	10a4      	asrs	r4, r4, #2
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	42a6      	cmp	r6, r4
 800a6f2:	d109      	bne.n	800a708 <__libc_init_array+0x24>
 800a6f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a724 <__libc_init_array+0x40>)
 800a6f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a728 <__libc_init_array+0x44>)
 800a6f8:	f001 ff16 	bl	800c528 <_init>
 800a6fc:	1b64      	subs	r4, r4, r5
 800a6fe:	10a4      	asrs	r4, r4, #2
 800a700:	2600      	movs	r6, #0
 800a702:	42a6      	cmp	r6, r4
 800a704:	d105      	bne.n	800a712 <__libc_init_array+0x2e>
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	f855 3b04 	ldr.w	r3, [r5], #4
 800a70c:	4798      	blx	r3
 800a70e:	3601      	adds	r6, #1
 800a710:	e7ee      	b.n	800a6f0 <__libc_init_array+0xc>
 800a712:	f855 3b04 	ldr.w	r3, [r5], #4
 800a716:	4798      	blx	r3
 800a718:	3601      	adds	r6, #1
 800a71a:	e7f2      	b.n	800a702 <__libc_init_array+0x1e>
 800a71c:	0800cd34 	.word	0x0800cd34
 800a720:	0800cd34 	.word	0x0800cd34
 800a724:	0800cd34 	.word	0x0800cd34
 800a728:	0800cd38 	.word	0x0800cd38

0800a72c <__retarget_lock_init_recursive>:
 800a72c:	4770      	bx	lr

0800a72e <__retarget_lock_acquire_recursive>:
 800a72e:	4770      	bx	lr

0800a730 <__retarget_lock_release_recursive>:
 800a730:	4770      	bx	lr

0800a732 <memcpy>:
 800a732:	440a      	add	r2, r1
 800a734:	4291      	cmp	r1, r2
 800a736:	f100 33ff 	add.w	r3, r0, #4294967295
 800a73a:	d100      	bne.n	800a73e <memcpy+0xc>
 800a73c:	4770      	bx	lr
 800a73e:	b510      	push	{r4, lr}
 800a740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a744:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a748:	4291      	cmp	r1, r2
 800a74a:	d1f9      	bne.n	800a740 <memcpy+0xe>
 800a74c:	bd10      	pop	{r4, pc}

0800a74e <quorem>:
 800a74e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a752:	6903      	ldr	r3, [r0, #16]
 800a754:	690c      	ldr	r4, [r1, #16]
 800a756:	42a3      	cmp	r3, r4
 800a758:	4607      	mov	r7, r0
 800a75a:	db7e      	blt.n	800a85a <quorem+0x10c>
 800a75c:	3c01      	subs	r4, #1
 800a75e:	f101 0814 	add.w	r8, r1, #20
 800a762:	00a3      	lsls	r3, r4, #2
 800a764:	f100 0514 	add.w	r5, r0, #20
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a778:	3301      	adds	r3, #1
 800a77a:	429a      	cmp	r2, r3
 800a77c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a780:	fbb2 f6f3 	udiv	r6, r2, r3
 800a784:	d32e      	bcc.n	800a7e4 <quorem+0x96>
 800a786:	f04f 0a00 	mov.w	sl, #0
 800a78a:	46c4      	mov	ip, r8
 800a78c:	46ae      	mov	lr, r5
 800a78e:	46d3      	mov	fp, sl
 800a790:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a794:	b298      	uxth	r0, r3
 800a796:	fb06 a000 	mla	r0, r6, r0, sl
 800a79a:	0c02      	lsrs	r2, r0, #16
 800a79c:	0c1b      	lsrs	r3, r3, #16
 800a79e:	fb06 2303 	mla	r3, r6, r3, r2
 800a7a2:	f8de 2000 	ldr.w	r2, [lr]
 800a7a6:	b280      	uxth	r0, r0
 800a7a8:	b292      	uxth	r2, r2
 800a7aa:	1a12      	subs	r2, r2, r0
 800a7ac:	445a      	add	r2, fp
 800a7ae:	f8de 0000 	ldr.w	r0, [lr]
 800a7b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a7bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a7c0:	b292      	uxth	r2, r2
 800a7c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7c6:	45e1      	cmp	r9, ip
 800a7c8:	f84e 2b04 	str.w	r2, [lr], #4
 800a7cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7d0:	d2de      	bcs.n	800a790 <quorem+0x42>
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	58eb      	ldr	r3, [r5, r3]
 800a7d6:	b92b      	cbnz	r3, 800a7e4 <quorem+0x96>
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	3b04      	subs	r3, #4
 800a7dc:	429d      	cmp	r5, r3
 800a7de:	461a      	mov	r2, r3
 800a7e0:	d32f      	bcc.n	800a842 <quorem+0xf4>
 800a7e2:	613c      	str	r4, [r7, #16]
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f001 f97d 	bl	800bae4 <__mcmp>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	db25      	blt.n	800a83a <quorem+0xec>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7f6:	f8d1 c000 	ldr.w	ip, [r1]
 800a7fa:	fa1f fe82 	uxth.w	lr, r2
 800a7fe:	fa1f f38c 	uxth.w	r3, ip
 800a802:	eba3 030e 	sub.w	r3, r3, lr
 800a806:	4403      	add	r3, r0
 800a808:	0c12      	lsrs	r2, r2, #16
 800a80a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a80e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a812:	b29b      	uxth	r3, r3
 800a814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a818:	45c1      	cmp	r9, r8
 800a81a:	f841 3b04 	str.w	r3, [r1], #4
 800a81e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a822:	d2e6      	bcs.n	800a7f2 <quorem+0xa4>
 800a824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a82c:	b922      	cbnz	r2, 800a838 <quorem+0xea>
 800a82e:	3b04      	subs	r3, #4
 800a830:	429d      	cmp	r5, r3
 800a832:	461a      	mov	r2, r3
 800a834:	d30b      	bcc.n	800a84e <quorem+0x100>
 800a836:	613c      	str	r4, [r7, #16]
 800a838:	3601      	adds	r6, #1
 800a83a:	4630      	mov	r0, r6
 800a83c:	b003      	add	sp, #12
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	6812      	ldr	r2, [r2, #0]
 800a844:	3b04      	subs	r3, #4
 800a846:	2a00      	cmp	r2, #0
 800a848:	d1cb      	bne.n	800a7e2 <quorem+0x94>
 800a84a:	3c01      	subs	r4, #1
 800a84c:	e7c6      	b.n	800a7dc <quorem+0x8e>
 800a84e:	6812      	ldr	r2, [r2, #0]
 800a850:	3b04      	subs	r3, #4
 800a852:	2a00      	cmp	r2, #0
 800a854:	d1ef      	bne.n	800a836 <quorem+0xe8>
 800a856:	3c01      	subs	r4, #1
 800a858:	e7ea      	b.n	800a830 <quorem+0xe2>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e7ee      	b.n	800a83c <quorem+0xee>
	...

0800a860 <_dtoa_r>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	69c7      	ldr	r7, [r0, #28]
 800a866:	b097      	sub	sp, #92	@ 0x5c
 800a868:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a86c:	ec55 4b10 	vmov	r4, r5, d0
 800a870:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a872:	9107      	str	r1, [sp, #28]
 800a874:	4681      	mov	r9, r0
 800a876:	920c      	str	r2, [sp, #48]	@ 0x30
 800a878:	9311      	str	r3, [sp, #68]	@ 0x44
 800a87a:	b97f      	cbnz	r7, 800a89c <_dtoa_r+0x3c>
 800a87c:	2010      	movs	r0, #16
 800a87e:	f000 fe09 	bl	800b494 <malloc>
 800a882:	4602      	mov	r2, r0
 800a884:	f8c9 001c 	str.w	r0, [r9, #28]
 800a888:	b920      	cbnz	r0, 800a894 <_dtoa_r+0x34>
 800a88a:	4ba9      	ldr	r3, [pc, #676]	@ (800ab30 <_dtoa_r+0x2d0>)
 800a88c:	21ef      	movs	r1, #239	@ 0xef
 800a88e:	48a9      	ldr	r0, [pc, #676]	@ (800ab34 <_dtoa_r+0x2d4>)
 800a890:	f001 faec 	bl	800be6c <__assert_func>
 800a894:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a898:	6007      	str	r7, [r0, #0]
 800a89a:	60c7      	str	r7, [r0, #12]
 800a89c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a8a0:	6819      	ldr	r1, [r3, #0]
 800a8a2:	b159      	cbz	r1, 800a8bc <_dtoa_r+0x5c>
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	604a      	str	r2, [r1, #4]
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4093      	lsls	r3, r2
 800a8ac:	608b      	str	r3, [r1, #8]
 800a8ae:	4648      	mov	r0, r9
 800a8b0:	f000 fee6 	bl	800b680 <_Bfree>
 800a8b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	1e2b      	subs	r3, r5, #0
 800a8be:	bfb9      	ittee	lt
 800a8c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a8c4:	9305      	strlt	r3, [sp, #20]
 800a8c6:	2300      	movge	r3, #0
 800a8c8:	6033      	strge	r3, [r6, #0]
 800a8ca:	9f05      	ldr	r7, [sp, #20]
 800a8cc:	4b9a      	ldr	r3, [pc, #616]	@ (800ab38 <_dtoa_r+0x2d8>)
 800a8ce:	bfbc      	itt	lt
 800a8d0:	2201      	movlt	r2, #1
 800a8d2:	6032      	strlt	r2, [r6, #0]
 800a8d4:	43bb      	bics	r3, r7
 800a8d6:	d112      	bne.n	800a8fe <_dtoa_r+0x9e>
 800a8d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8e4:	4323      	orrs	r3, r4
 800a8e6:	f000 855a 	beq.w	800b39e <_dtoa_r+0xb3e>
 800a8ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ab4c <_dtoa_r+0x2ec>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 855c 	beq.w	800b3ae <_dtoa_r+0xb4e>
 800a8f6:	f10a 0303 	add.w	r3, sl, #3
 800a8fa:	f000 bd56 	b.w	800b3aa <_dtoa_r+0xb4a>
 800a8fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a902:	2200      	movs	r2, #0
 800a904:	ec51 0b17 	vmov	r0, r1, d7
 800a908:	2300      	movs	r3, #0
 800a90a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a90e:	f7f6 f8fb 	bl	8000b08 <__aeabi_dcmpeq>
 800a912:	4680      	mov	r8, r0
 800a914:	b158      	cbz	r0, 800a92e <_dtoa_r+0xce>
 800a916:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a918:	2301      	movs	r3, #1
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a91e:	b113      	cbz	r3, 800a926 <_dtoa_r+0xc6>
 800a920:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a922:	4b86      	ldr	r3, [pc, #536]	@ (800ab3c <_dtoa_r+0x2dc>)
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ab50 <_dtoa_r+0x2f0>
 800a92a:	f000 bd40 	b.w	800b3ae <_dtoa_r+0xb4e>
 800a92e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a932:	aa14      	add	r2, sp, #80	@ 0x50
 800a934:	a915      	add	r1, sp, #84	@ 0x54
 800a936:	4648      	mov	r0, r9
 800a938:	f001 f984 	bl	800bc44 <__d2b>
 800a93c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a940:	9002      	str	r0, [sp, #8]
 800a942:	2e00      	cmp	r6, #0
 800a944:	d078      	beq.n	800aa38 <_dtoa_r+0x1d8>
 800a946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a948:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a950:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a954:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a958:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a95c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a960:	4619      	mov	r1, r3
 800a962:	2200      	movs	r2, #0
 800a964:	4b76      	ldr	r3, [pc, #472]	@ (800ab40 <_dtoa_r+0x2e0>)
 800a966:	f7f5 fcaf 	bl	80002c8 <__aeabi_dsub>
 800a96a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ab18 <_dtoa_r+0x2b8>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f7f5 fe62 	bl	8000638 <__aeabi_dmul>
 800a974:	a36a      	add	r3, pc, #424	@ (adr r3, 800ab20 <_dtoa_r+0x2c0>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f5 fca7 	bl	80002cc <__adddf3>
 800a97e:	4604      	mov	r4, r0
 800a980:	4630      	mov	r0, r6
 800a982:	460d      	mov	r5, r1
 800a984:	f7f5 fdee 	bl	8000564 <__aeabi_i2d>
 800a988:	a367      	add	r3, pc, #412	@ (adr r3, 800ab28 <_dtoa_r+0x2c8>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f5 fe53 	bl	8000638 <__aeabi_dmul>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f5 fc97 	bl	80002cc <__adddf3>
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	f7f6 f8f9 	bl	8000b98 <__aeabi_d2iz>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4607      	mov	r7, r0
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f6 f8b4 	bl	8000b1c <__aeabi_dcmplt>
 800a9b4:	b140      	cbz	r0, 800a9c8 <_dtoa_r+0x168>
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f7f5 fdd4 	bl	8000564 <__aeabi_i2d>
 800a9bc:	4622      	mov	r2, r4
 800a9be:	462b      	mov	r3, r5
 800a9c0:	f7f6 f8a2 	bl	8000b08 <__aeabi_dcmpeq>
 800a9c4:	b900      	cbnz	r0, 800a9c8 <_dtoa_r+0x168>
 800a9c6:	3f01      	subs	r7, #1
 800a9c8:	2f16      	cmp	r7, #22
 800a9ca:	d852      	bhi.n	800aa72 <_dtoa_r+0x212>
 800a9cc:	4b5d      	ldr	r3, [pc, #372]	@ (800ab44 <_dtoa_r+0x2e4>)
 800a9ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9da:	f7f6 f89f 	bl	8000b1c <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d049      	beq.n	800aa76 <_dtoa_r+0x216>
 800a9e2:	3f01      	subs	r7, #1
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a9ea:	1b9b      	subs	r3, r3, r6
 800a9ec:	1e5a      	subs	r2, r3, #1
 800a9ee:	bf45      	ittet	mi
 800a9f0:	f1c3 0301 	rsbmi	r3, r3, #1
 800a9f4:	9300      	strmi	r3, [sp, #0]
 800a9f6:	2300      	movpl	r3, #0
 800a9f8:	2300      	movmi	r3, #0
 800a9fa:	9206      	str	r2, [sp, #24]
 800a9fc:	bf54      	ite	pl
 800a9fe:	9300      	strpl	r3, [sp, #0]
 800aa00:	9306      	strmi	r3, [sp, #24]
 800aa02:	2f00      	cmp	r7, #0
 800aa04:	db39      	blt.n	800aa7a <_dtoa_r+0x21a>
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	970d      	str	r7, [sp, #52]	@ 0x34
 800aa0a:	443b      	add	r3, r7
 800aa0c:	9306      	str	r3, [sp, #24]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	9b07      	ldr	r3, [sp, #28]
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	d863      	bhi.n	800aae0 <_dtoa_r+0x280>
 800aa18:	2b05      	cmp	r3, #5
 800aa1a:	bfc4      	itt	gt
 800aa1c:	3b04      	subgt	r3, #4
 800aa1e:	9307      	strgt	r3, [sp, #28]
 800aa20:	9b07      	ldr	r3, [sp, #28]
 800aa22:	f1a3 0302 	sub.w	r3, r3, #2
 800aa26:	bfcc      	ite	gt
 800aa28:	2400      	movgt	r4, #0
 800aa2a:	2401      	movle	r4, #1
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d863      	bhi.n	800aaf8 <_dtoa_r+0x298>
 800aa30:	e8df f003 	tbb	[pc, r3]
 800aa34:	2b375452 	.word	0x2b375452
 800aa38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aa3c:	441e      	add	r6, r3
 800aa3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa42:	2b20      	cmp	r3, #32
 800aa44:	bfc1      	itttt	gt
 800aa46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa4a:	409f      	lslgt	r7, r3
 800aa4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa50:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa54:	bfd6      	itet	le
 800aa56:	f1c3 0320 	rsble	r3, r3, #32
 800aa5a:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa5e:	fa04 f003 	lslle.w	r0, r4, r3
 800aa62:	f7f5 fd6f 	bl	8000544 <__aeabi_ui2d>
 800aa66:	2201      	movs	r2, #1
 800aa68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa6c:	3e01      	subs	r6, #1
 800aa6e:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa70:	e776      	b.n	800a960 <_dtoa_r+0x100>
 800aa72:	2301      	movs	r3, #1
 800aa74:	e7b7      	b.n	800a9e6 <_dtoa_r+0x186>
 800aa76:	9010      	str	r0, [sp, #64]	@ 0x40
 800aa78:	e7b6      	b.n	800a9e8 <_dtoa_r+0x188>
 800aa7a:	9b00      	ldr	r3, [sp, #0]
 800aa7c:	1bdb      	subs	r3, r3, r7
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	427b      	negs	r3, r7
 800aa82:	9308      	str	r3, [sp, #32]
 800aa84:	2300      	movs	r3, #0
 800aa86:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa88:	e7c3      	b.n	800aa12 <_dtoa_r+0x1b2>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa90:	eb07 0b03 	add.w	fp, r7, r3
 800aa94:	f10b 0301 	add.w	r3, fp, #1
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	9303      	str	r3, [sp, #12]
 800aa9c:	bfb8      	it	lt
 800aa9e:	2301      	movlt	r3, #1
 800aaa0:	e006      	b.n	800aab0 <_dtoa_r+0x250>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dd28      	ble.n	800aafe <_dtoa_r+0x29e>
 800aaac:	469b      	mov	fp, r3
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800aab4:	2100      	movs	r1, #0
 800aab6:	2204      	movs	r2, #4
 800aab8:	f102 0514 	add.w	r5, r2, #20
 800aabc:	429d      	cmp	r5, r3
 800aabe:	d926      	bls.n	800ab0e <_dtoa_r+0x2ae>
 800aac0:	6041      	str	r1, [r0, #4]
 800aac2:	4648      	mov	r0, r9
 800aac4:	f000 fd9c 	bl	800b600 <_Balloc>
 800aac8:	4682      	mov	sl, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d142      	bne.n	800ab54 <_dtoa_r+0x2f4>
 800aace:	4b1e      	ldr	r3, [pc, #120]	@ (800ab48 <_dtoa_r+0x2e8>)
 800aad0:	4602      	mov	r2, r0
 800aad2:	f240 11af 	movw	r1, #431	@ 0x1af
 800aad6:	e6da      	b.n	800a88e <_dtoa_r+0x2e>
 800aad8:	2300      	movs	r3, #0
 800aada:	e7e3      	b.n	800aaa4 <_dtoa_r+0x244>
 800aadc:	2300      	movs	r3, #0
 800aade:	e7d5      	b.n	800aa8c <_dtoa_r+0x22c>
 800aae0:	2401      	movs	r4, #1
 800aae2:	2300      	movs	r3, #0
 800aae4:	9307      	str	r3, [sp, #28]
 800aae6:	9409      	str	r4, [sp, #36]	@ 0x24
 800aae8:	f04f 3bff 	mov.w	fp, #4294967295
 800aaec:	2200      	movs	r2, #0
 800aaee:	f8cd b00c 	str.w	fp, [sp, #12]
 800aaf2:	2312      	movs	r3, #18
 800aaf4:	920c      	str	r2, [sp, #48]	@ 0x30
 800aaf6:	e7db      	b.n	800aab0 <_dtoa_r+0x250>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	9309      	str	r3, [sp, #36]	@ 0x24
 800aafc:	e7f4      	b.n	800aae8 <_dtoa_r+0x288>
 800aafe:	f04f 0b01 	mov.w	fp, #1
 800ab02:	f8cd b00c 	str.w	fp, [sp, #12]
 800ab06:	465b      	mov	r3, fp
 800ab08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ab0c:	e7d0      	b.n	800aab0 <_dtoa_r+0x250>
 800ab0e:	3101      	adds	r1, #1
 800ab10:	0052      	lsls	r2, r2, #1
 800ab12:	e7d1      	b.n	800aab8 <_dtoa_r+0x258>
 800ab14:	f3af 8000 	nop.w
 800ab18:	636f4361 	.word	0x636f4361
 800ab1c:	3fd287a7 	.word	0x3fd287a7
 800ab20:	8b60c8b3 	.word	0x8b60c8b3
 800ab24:	3fc68a28 	.word	0x3fc68a28
 800ab28:	509f79fb 	.word	0x509f79fb
 800ab2c:	3fd34413 	.word	0x3fd34413
 800ab30:	0800c9f9 	.word	0x0800c9f9
 800ab34:	0800ca10 	.word	0x0800ca10
 800ab38:	7ff00000 	.word	0x7ff00000
 800ab3c:	0800c9c9 	.word	0x0800c9c9
 800ab40:	3ff80000 	.word	0x3ff80000
 800ab44:	0800cb60 	.word	0x0800cb60
 800ab48:	0800ca68 	.word	0x0800ca68
 800ab4c:	0800c9f5 	.word	0x0800c9f5
 800ab50:	0800c9c8 	.word	0x0800c9c8
 800ab54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab58:	6018      	str	r0, [r3, #0]
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	2b0e      	cmp	r3, #14
 800ab5e:	f200 80a1 	bhi.w	800aca4 <_dtoa_r+0x444>
 800ab62:	2c00      	cmp	r4, #0
 800ab64:	f000 809e 	beq.w	800aca4 <_dtoa_r+0x444>
 800ab68:	2f00      	cmp	r7, #0
 800ab6a:	dd33      	ble.n	800abd4 <_dtoa_r+0x374>
 800ab6c:	4b9c      	ldr	r3, [pc, #624]	@ (800ade0 <_dtoa_r+0x580>)
 800ab6e:	f007 020f 	and.w	r2, r7, #15
 800ab72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab76:	ed93 7b00 	vldr	d7, [r3]
 800ab7a:	05f8      	lsls	r0, r7, #23
 800ab7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ab80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab84:	d516      	bpl.n	800abb4 <_dtoa_r+0x354>
 800ab86:	4b97      	ldr	r3, [pc, #604]	@ (800ade4 <_dtoa_r+0x584>)
 800ab88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab90:	f7f5 fe7c 	bl	800088c <__aeabi_ddiv>
 800ab94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab98:	f004 040f 	and.w	r4, r4, #15
 800ab9c:	2603      	movs	r6, #3
 800ab9e:	4d91      	ldr	r5, [pc, #580]	@ (800ade4 <_dtoa_r+0x584>)
 800aba0:	b954      	cbnz	r4, 800abb8 <_dtoa_r+0x358>
 800aba2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abaa:	f7f5 fe6f 	bl	800088c <__aeabi_ddiv>
 800abae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abb2:	e028      	b.n	800ac06 <_dtoa_r+0x3a6>
 800abb4:	2602      	movs	r6, #2
 800abb6:	e7f2      	b.n	800ab9e <_dtoa_r+0x33e>
 800abb8:	07e1      	lsls	r1, r4, #31
 800abba:	d508      	bpl.n	800abce <_dtoa_r+0x36e>
 800abbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800abc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abc4:	f7f5 fd38 	bl	8000638 <__aeabi_dmul>
 800abc8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800abcc:	3601      	adds	r6, #1
 800abce:	1064      	asrs	r4, r4, #1
 800abd0:	3508      	adds	r5, #8
 800abd2:	e7e5      	b.n	800aba0 <_dtoa_r+0x340>
 800abd4:	f000 80af 	beq.w	800ad36 <_dtoa_r+0x4d6>
 800abd8:	427c      	negs	r4, r7
 800abda:	4b81      	ldr	r3, [pc, #516]	@ (800ade0 <_dtoa_r+0x580>)
 800abdc:	4d81      	ldr	r5, [pc, #516]	@ (800ade4 <_dtoa_r+0x584>)
 800abde:	f004 020f 	and.w	r2, r4, #15
 800abe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abee:	f7f5 fd23 	bl	8000638 <__aeabi_dmul>
 800abf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abf6:	1124      	asrs	r4, r4, #4
 800abf8:	2300      	movs	r3, #0
 800abfa:	2602      	movs	r6, #2
 800abfc:	2c00      	cmp	r4, #0
 800abfe:	f040 808f 	bne.w	800ad20 <_dtoa_r+0x4c0>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1d3      	bne.n	800abae <_dtoa_r+0x34e>
 800ac06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 8094 	beq.w	800ad3a <_dtoa_r+0x4da>
 800ac12:	4b75      	ldr	r3, [pc, #468]	@ (800ade8 <_dtoa_r+0x588>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	4620      	mov	r0, r4
 800ac18:	4629      	mov	r1, r5
 800ac1a:	f7f5 ff7f 	bl	8000b1c <__aeabi_dcmplt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	f000 808b 	beq.w	800ad3a <_dtoa_r+0x4da>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 8087 	beq.w	800ad3a <_dtoa_r+0x4da>
 800ac2c:	f1bb 0f00 	cmp.w	fp, #0
 800ac30:	dd34      	ble.n	800ac9c <_dtoa_r+0x43c>
 800ac32:	4620      	mov	r0, r4
 800ac34:	4b6d      	ldr	r3, [pc, #436]	@ (800adec <_dtoa_r+0x58c>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	4629      	mov	r1, r5
 800ac3a:	f7f5 fcfd 	bl	8000638 <__aeabi_dmul>
 800ac3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac42:	f107 38ff 	add.w	r8, r7, #4294967295
 800ac46:	3601      	adds	r6, #1
 800ac48:	465c      	mov	r4, fp
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7f5 fc8a 	bl	8000564 <__aeabi_i2d>
 800ac50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac54:	f7f5 fcf0 	bl	8000638 <__aeabi_dmul>
 800ac58:	4b65      	ldr	r3, [pc, #404]	@ (800adf0 <_dtoa_r+0x590>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f7f5 fb36 	bl	80002cc <__adddf3>
 800ac60:	4605      	mov	r5, r0
 800ac62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	d16a      	bne.n	800ad40 <_dtoa_r+0x4e0>
 800ac6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac6e:	4b61      	ldr	r3, [pc, #388]	@ (800adf4 <_dtoa_r+0x594>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	f7f5 fb29 	bl	80002c8 <__aeabi_dsub>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4633      	mov	r3, r6
 800ac82:	f7f5 ff69 	bl	8000b58 <__aeabi_dcmpgt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f040 8298 	bne.w	800b1bc <_dtoa_r+0x95c>
 800ac8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac90:	462a      	mov	r2, r5
 800ac92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac96:	f7f5 ff41 	bl	8000b1c <__aeabi_dcmplt>
 800ac9a:	bb38      	cbnz	r0, 800acec <_dtoa_r+0x48c>
 800ac9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800aca0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aca4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f2c0 8157 	blt.w	800af5a <_dtoa_r+0x6fa>
 800acac:	2f0e      	cmp	r7, #14
 800acae:	f300 8154 	bgt.w	800af5a <_dtoa_r+0x6fa>
 800acb2:	4b4b      	ldr	r3, [pc, #300]	@ (800ade0 <_dtoa_r+0x580>)
 800acb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acb8:	ed93 7b00 	vldr	d7, [r3]
 800acbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	ed8d 7b00 	vstr	d7, [sp]
 800acc4:	f280 80e5 	bge.w	800ae92 <_dtoa_r+0x632>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	f300 80e1 	bgt.w	800ae92 <_dtoa_r+0x632>
 800acd0:	d10c      	bne.n	800acec <_dtoa_r+0x48c>
 800acd2:	4b48      	ldr	r3, [pc, #288]	@ (800adf4 <_dtoa_r+0x594>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	ec51 0b17 	vmov	r0, r1, d7
 800acda:	f7f5 fcad 	bl	8000638 <__aeabi_dmul>
 800acde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ace2:	f7f5 ff2f 	bl	8000b44 <__aeabi_dcmpge>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f000 8266 	beq.w	800b1b8 <_dtoa_r+0x958>
 800acec:	2400      	movs	r4, #0
 800acee:	4625      	mov	r5, r4
 800acf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acf2:	4656      	mov	r6, sl
 800acf4:	ea6f 0803 	mvn.w	r8, r3
 800acf8:	2700      	movs	r7, #0
 800acfa:	4621      	mov	r1, r4
 800acfc:	4648      	mov	r0, r9
 800acfe:	f000 fcbf 	bl	800b680 <_Bfree>
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	f000 80bd 	beq.w	800ae82 <_dtoa_r+0x622>
 800ad08:	b12f      	cbz	r7, 800ad16 <_dtoa_r+0x4b6>
 800ad0a:	42af      	cmp	r7, r5
 800ad0c:	d003      	beq.n	800ad16 <_dtoa_r+0x4b6>
 800ad0e:	4639      	mov	r1, r7
 800ad10:	4648      	mov	r0, r9
 800ad12:	f000 fcb5 	bl	800b680 <_Bfree>
 800ad16:	4629      	mov	r1, r5
 800ad18:	4648      	mov	r0, r9
 800ad1a:	f000 fcb1 	bl	800b680 <_Bfree>
 800ad1e:	e0b0      	b.n	800ae82 <_dtoa_r+0x622>
 800ad20:	07e2      	lsls	r2, r4, #31
 800ad22:	d505      	bpl.n	800ad30 <_dtoa_r+0x4d0>
 800ad24:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad28:	f7f5 fc86 	bl	8000638 <__aeabi_dmul>
 800ad2c:	3601      	adds	r6, #1
 800ad2e:	2301      	movs	r3, #1
 800ad30:	1064      	asrs	r4, r4, #1
 800ad32:	3508      	adds	r5, #8
 800ad34:	e762      	b.n	800abfc <_dtoa_r+0x39c>
 800ad36:	2602      	movs	r6, #2
 800ad38:	e765      	b.n	800ac06 <_dtoa_r+0x3a6>
 800ad3a:	9c03      	ldr	r4, [sp, #12]
 800ad3c:	46b8      	mov	r8, r7
 800ad3e:	e784      	b.n	800ac4a <_dtoa_r+0x3ea>
 800ad40:	4b27      	ldr	r3, [pc, #156]	@ (800ade0 <_dtoa_r+0x580>)
 800ad42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad4c:	4454      	add	r4, sl
 800ad4e:	2900      	cmp	r1, #0
 800ad50:	d054      	beq.n	800adfc <_dtoa_r+0x59c>
 800ad52:	4929      	ldr	r1, [pc, #164]	@ (800adf8 <_dtoa_r+0x598>)
 800ad54:	2000      	movs	r0, #0
 800ad56:	f7f5 fd99 	bl	800088c <__aeabi_ddiv>
 800ad5a:	4633      	mov	r3, r6
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	f7f5 fab3 	bl	80002c8 <__aeabi_dsub>
 800ad62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad66:	4656      	mov	r6, sl
 800ad68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad6c:	f7f5 ff14 	bl	8000b98 <__aeabi_d2iz>
 800ad70:	4605      	mov	r5, r0
 800ad72:	f7f5 fbf7 	bl	8000564 <__aeabi_i2d>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad7e:	f7f5 faa3 	bl	80002c8 <__aeabi_dsub>
 800ad82:	3530      	adds	r5, #48	@ 0x30
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad8c:	f806 5b01 	strb.w	r5, [r6], #1
 800ad90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad94:	f7f5 fec2 	bl	8000b1c <__aeabi_dcmplt>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d172      	bne.n	800ae82 <_dtoa_r+0x622>
 800ad9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ada0:	4911      	ldr	r1, [pc, #68]	@ (800ade8 <_dtoa_r+0x588>)
 800ada2:	2000      	movs	r0, #0
 800ada4:	f7f5 fa90 	bl	80002c8 <__aeabi_dsub>
 800ada8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800adac:	f7f5 feb6 	bl	8000b1c <__aeabi_dcmplt>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	f040 80b4 	bne.w	800af1e <_dtoa_r+0x6be>
 800adb6:	42a6      	cmp	r6, r4
 800adb8:	f43f af70 	beq.w	800ac9c <_dtoa_r+0x43c>
 800adbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800adc0:	4b0a      	ldr	r3, [pc, #40]	@ (800adec <_dtoa_r+0x58c>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	f7f5 fc38 	bl	8000638 <__aeabi_dmul>
 800adc8:	4b08      	ldr	r3, [pc, #32]	@ (800adec <_dtoa_r+0x58c>)
 800adca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800adce:	2200      	movs	r2, #0
 800add0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800add4:	f7f5 fc30 	bl	8000638 <__aeabi_dmul>
 800add8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800addc:	e7c4      	b.n	800ad68 <_dtoa_r+0x508>
 800adde:	bf00      	nop
 800ade0:	0800cb60 	.word	0x0800cb60
 800ade4:	0800cb38 	.word	0x0800cb38
 800ade8:	3ff00000 	.word	0x3ff00000
 800adec:	40240000 	.word	0x40240000
 800adf0:	401c0000 	.word	0x401c0000
 800adf4:	40140000 	.word	0x40140000
 800adf8:	3fe00000 	.word	0x3fe00000
 800adfc:	4631      	mov	r1, r6
 800adfe:	4628      	mov	r0, r5
 800ae00:	f7f5 fc1a 	bl	8000638 <__aeabi_dmul>
 800ae04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae08:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ae0a:	4656      	mov	r6, sl
 800ae0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae10:	f7f5 fec2 	bl	8000b98 <__aeabi_d2iz>
 800ae14:	4605      	mov	r5, r0
 800ae16:	f7f5 fba5 	bl	8000564 <__aeabi_i2d>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae22:	f7f5 fa51 	bl	80002c8 <__aeabi_dsub>
 800ae26:	3530      	adds	r5, #48	@ 0x30
 800ae28:	f806 5b01 	strb.w	r5, [r6], #1
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	42a6      	cmp	r6, r4
 800ae32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae36:	f04f 0200 	mov.w	r2, #0
 800ae3a:	d124      	bne.n	800ae86 <_dtoa_r+0x626>
 800ae3c:	4baf      	ldr	r3, [pc, #700]	@ (800b0fc <_dtoa_r+0x89c>)
 800ae3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae42:	f7f5 fa43 	bl	80002cc <__adddf3>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae4e:	f7f5 fe83 	bl	8000b58 <__aeabi_dcmpgt>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d163      	bne.n	800af1e <_dtoa_r+0x6be>
 800ae56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae5a:	49a8      	ldr	r1, [pc, #672]	@ (800b0fc <_dtoa_r+0x89c>)
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f7f5 fa33 	bl	80002c8 <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae6a:	f7f5 fe57 	bl	8000b1c <__aeabi_dcmplt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f43f af14 	beq.w	800ac9c <_dtoa_r+0x43c>
 800ae74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ae76:	1e73      	subs	r3, r6, #1
 800ae78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae7e:	2b30      	cmp	r3, #48	@ 0x30
 800ae80:	d0f8      	beq.n	800ae74 <_dtoa_r+0x614>
 800ae82:	4647      	mov	r7, r8
 800ae84:	e03b      	b.n	800aefe <_dtoa_r+0x69e>
 800ae86:	4b9e      	ldr	r3, [pc, #632]	@ (800b100 <_dtoa_r+0x8a0>)
 800ae88:	f7f5 fbd6 	bl	8000638 <__aeabi_dmul>
 800ae8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae90:	e7bc      	b.n	800ae0c <_dtoa_r+0x5ac>
 800ae92:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae96:	4656      	mov	r6, sl
 800ae98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 fcf4 	bl	800088c <__aeabi_ddiv>
 800aea4:	f7f5 fe78 	bl	8000b98 <__aeabi_d2iz>
 800aea8:	4680      	mov	r8, r0
 800aeaa:	f7f5 fb5b 	bl	8000564 <__aeabi_i2d>
 800aeae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeb2:	f7f5 fbc1 	bl	8000638 <__aeabi_dmul>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aec2:	f7f5 fa01 	bl	80002c8 <__aeabi_dsub>
 800aec6:	f806 4b01 	strb.w	r4, [r6], #1
 800aeca:	9d03      	ldr	r5, [sp, #12]
 800aecc:	eba6 040a 	sub.w	r4, r6, sl
 800aed0:	42a5      	cmp	r5, r4
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	d133      	bne.n	800af40 <_dtoa_r+0x6e0>
 800aed8:	f7f5 f9f8 	bl	80002cc <__adddf3>
 800aedc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aee0:	4604      	mov	r4, r0
 800aee2:	460d      	mov	r5, r1
 800aee4:	f7f5 fe38 	bl	8000b58 <__aeabi_dcmpgt>
 800aee8:	b9c0      	cbnz	r0, 800af1c <_dtoa_r+0x6bc>
 800aeea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeee:	4620      	mov	r0, r4
 800aef0:	4629      	mov	r1, r5
 800aef2:	f7f5 fe09 	bl	8000b08 <__aeabi_dcmpeq>
 800aef6:	b110      	cbz	r0, 800aefe <_dtoa_r+0x69e>
 800aef8:	f018 0f01 	tst.w	r8, #1
 800aefc:	d10e      	bne.n	800af1c <_dtoa_r+0x6bc>
 800aefe:	9902      	ldr	r1, [sp, #8]
 800af00:	4648      	mov	r0, r9
 800af02:	f000 fbbd 	bl	800b680 <_Bfree>
 800af06:	2300      	movs	r3, #0
 800af08:	7033      	strb	r3, [r6, #0]
 800af0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af0c:	3701      	adds	r7, #1
 800af0e:	601f      	str	r7, [r3, #0]
 800af10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 824b 	beq.w	800b3ae <_dtoa_r+0xb4e>
 800af18:	601e      	str	r6, [r3, #0]
 800af1a:	e248      	b.n	800b3ae <_dtoa_r+0xb4e>
 800af1c:	46b8      	mov	r8, r7
 800af1e:	4633      	mov	r3, r6
 800af20:	461e      	mov	r6, r3
 800af22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af26:	2a39      	cmp	r2, #57	@ 0x39
 800af28:	d106      	bne.n	800af38 <_dtoa_r+0x6d8>
 800af2a:	459a      	cmp	sl, r3
 800af2c:	d1f8      	bne.n	800af20 <_dtoa_r+0x6c0>
 800af2e:	2230      	movs	r2, #48	@ 0x30
 800af30:	f108 0801 	add.w	r8, r8, #1
 800af34:	f88a 2000 	strb.w	r2, [sl]
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	3201      	adds	r2, #1
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	e7a0      	b.n	800ae82 <_dtoa_r+0x622>
 800af40:	4b6f      	ldr	r3, [pc, #444]	@ (800b100 <_dtoa_r+0x8a0>)
 800af42:	2200      	movs	r2, #0
 800af44:	f7f5 fb78 	bl	8000638 <__aeabi_dmul>
 800af48:	2200      	movs	r2, #0
 800af4a:	2300      	movs	r3, #0
 800af4c:	4604      	mov	r4, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	f7f5 fdda 	bl	8000b08 <__aeabi_dcmpeq>
 800af54:	2800      	cmp	r0, #0
 800af56:	d09f      	beq.n	800ae98 <_dtoa_r+0x638>
 800af58:	e7d1      	b.n	800aefe <_dtoa_r+0x69e>
 800af5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af5c:	2a00      	cmp	r2, #0
 800af5e:	f000 80ea 	beq.w	800b136 <_dtoa_r+0x8d6>
 800af62:	9a07      	ldr	r2, [sp, #28]
 800af64:	2a01      	cmp	r2, #1
 800af66:	f300 80cd 	bgt.w	800b104 <_dtoa_r+0x8a4>
 800af6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af6c:	2a00      	cmp	r2, #0
 800af6e:	f000 80c1 	beq.w	800b0f4 <_dtoa_r+0x894>
 800af72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af76:	9c08      	ldr	r4, [sp, #32]
 800af78:	9e00      	ldr	r6, [sp, #0]
 800af7a:	9a00      	ldr	r2, [sp, #0]
 800af7c:	441a      	add	r2, r3
 800af7e:	9200      	str	r2, [sp, #0]
 800af80:	9a06      	ldr	r2, [sp, #24]
 800af82:	2101      	movs	r1, #1
 800af84:	441a      	add	r2, r3
 800af86:	4648      	mov	r0, r9
 800af88:	9206      	str	r2, [sp, #24]
 800af8a:	f000 fc2d 	bl	800b7e8 <__i2b>
 800af8e:	4605      	mov	r5, r0
 800af90:	b166      	cbz	r6, 800afac <_dtoa_r+0x74c>
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	dd09      	ble.n	800afac <_dtoa_r+0x74c>
 800af98:	42b3      	cmp	r3, r6
 800af9a:	9a00      	ldr	r2, [sp, #0]
 800af9c:	bfa8      	it	ge
 800af9e:	4633      	movge	r3, r6
 800afa0:	1ad2      	subs	r2, r2, r3
 800afa2:	9200      	str	r2, [sp, #0]
 800afa4:	9a06      	ldr	r2, [sp, #24]
 800afa6:	1af6      	subs	r6, r6, r3
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	9306      	str	r3, [sp, #24]
 800afac:	9b08      	ldr	r3, [sp, #32]
 800afae:	b30b      	cbz	r3, 800aff4 <_dtoa_r+0x794>
 800afb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 80c6 	beq.w	800b144 <_dtoa_r+0x8e4>
 800afb8:	2c00      	cmp	r4, #0
 800afba:	f000 80c0 	beq.w	800b13e <_dtoa_r+0x8de>
 800afbe:	4629      	mov	r1, r5
 800afc0:	4622      	mov	r2, r4
 800afc2:	4648      	mov	r0, r9
 800afc4:	f000 fcc8 	bl	800b958 <__pow5mult>
 800afc8:	9a02      	ldr	r2, [sp, #8]
 800afca:	4601      	mov	r1, r0
 800afcc:	4605      	mov	r5, r0
 800afce:	4648      	mov	r0, r9
 800afd0:	f000 fc20 	bl	800b814 <__multiply>
 800afd4:	9902      	ldr	r1, [sp, #8]
 800afd6:	4680      	mov	r8, r0
 800afd8:	4648      	mov	r0, r9
 800afda:	f000 fb51 	bl	800b680 <_Bfree>
 800afde:	9b08      	ldr	r3, [sp, #32]
 800afe0:	1b1b      	subs	r3, r3, r4
 800afe2:	9308      	str	r3, [sp, #32]
 800afe4:	f000 80b1 	beq.w	800b14a <_dtoa_r+0x8ea>
 800afe8:	9a08      	ldr	r2, [sp, #32]
 800afea:	4641      	mov	r1, r8
 800afec:	4648      	mov	r0, r9
 800afee:	f000 fcb3 	bl	800b958 <__pow5mult>
 800aff2:	9002      	str	r0, [sp, #8]
 800aff4:	2101      	movs	r1, #1
 800aff6:	4648      	mov	r0, r9
 800aff8:	f000 fbf6 	bl	800b7e8 <__i2b>
 800affc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800affe:	4604      	mov	r4, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 81d8 	beq.w	800b3b6 <_dtoa_r+0xb56>
 800b006:	461a      	mov	r2, r3
 800b008:	4601      	mov	r1, r0
 800b00a:	4648      	mov	r0, r9
 800b00c:	f000 fca4 	bl	800b958 <__pow5mult>
 800b010:	9b07      	ldr	r3, [sp, #28]
 800b012:	2b01      	cmp	r3, #1
 800b014:	4604      	mov	r4, r0
 800b016:	f300 809f 	bgt.w	800b158 <_dtoa_r+0x8f8>
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f040 8097 	bne.w	800b150 <_dtoa_r+0x8f0>
 800b022:	9b05      	ldr	r3, [sp, #20]
 800b024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 8093 	bne.w	800b154 <_dtoa_r+0x8f4>
 800b02e:	9b05      	ldr	r3, [sp, #20]
 800b030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b034:	0d1b      	lsrs	r3, r3, #20
 800b036:	051b      	lsls	r3, r3, #20
 800b038:	b133      	cbz	r3, 800b048 <_dtoa_r+0x7e8>
 800b03a:	9b00      	ldr	r3, [sp, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	9b06      	ldr	r3, [sp, #24]
 800b042:	3301      	adds	r3, #1
 800b044:	9306      	str	r3, [sp, #24]
 800b046:	2301      	movs	r3, #1
 800b048:	9308      	str	r3, [sp, #32]
 800b04a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 81b8 	beq.w	800b3c2 <_dtoa_r+0xb62>
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b058:	6918      	ldr	r0, [r3, #16]
 800b05a:	f000 fb79 	bl	800b750 <__hi0bits>
 800b05e:	f1c0 0020 	rsb	r0, r0, #32
 800b062:	9b06      	ldr	r3, [sp, #24]
 800b064:	4418      	add	r0, r3
 800b066:	f010 001f 	ands.w	r0, r0, #31
 800b06a:	f000 8082 	beq.w	800b172 <_dtoa_r+0x912>
 800b06e:	f1c0 0320 	rsb	r3, r0, #32
 800b072:	2b04      	cmp	r3, #4
 800b074:	dd73      	ble.n	800b15e <_dtoa_r+0x8fe>
 800b076:	9b00      	ldr	r3, [sp, #0]
 800b078:	f1c0 001c 	rsb	r0, r0, #28
 800b07c:	4403      	add	r3, r0
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	9b06      	ldr	r3, [sp, #24]
 800b082:	4403      	add	r3, r0
 800b084:	4406      	add	r6, r0
 800b086:	9306      	str	r3, [sp, #24]
 800b088:	9b00      	ldr	r3, [sp, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	dd05      	ble.n	800b09a <_dtoa_r+0x83a>
 800b08e:	9902      	ldr	r1, [sp, #8]
 800b090:	461a      	mov	r2, r3
 800b092:	4648      	mov	r0, r9
 800b094:	f000 fcba 	bl	800ba0c <__lshift>
 800b098:	9002      	str	r0, [sp, #8]
 800b09a:	9b06      	ldr	r3, [sp, #24]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd05      	ble.n	800b0ac <_dtoa_r+0x84c>
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	4648      	mov	r0, r9
 800b0a6:	f000 fcb1 	bl	800ba0c <__lshift>
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d061      	beq.n	800b176 <_dtoa_r+0x916>
 800b0b2:	9802      	ldr	r0, [sp, #8]
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	f000 fd15 	bl	800bae4 <__mcmp>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	da5b      	bge.n	800b176 <_dtoa_r+0x916>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	9902      	ldr	r1, [sp, #8]
 800b0c2:	220a      	movs	r2, #10
 800b0c4:	4648      	mov	r0, r9
 800b0c6:	f000 fafd 	bl	800b6c4 <__multadd>
 800b0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	f107 38ff 	add.w	r8, r7, #4294967295
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 8177 	beq.w	800b3c6 <_dtoa_r+0xb66>
 800b0d8:	4629      	mov	r1, r5
 800b0da:	2300      	movs	r3, #0
 800b0dc:	220a      	movs	r2, #10
 800b0de:	4648      	mov	r0, r9
 800b0e0:	f000 faf0 	bl	800b6c4 <__multadd>
 800b0e4:	f1bb 0f00 	cmp.w	fp, #0
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	dc6f      	bgt.n	800b1cc <_dtoa_r+0x96c>
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	dc49      	bgt.n	800b186 <_dtoa_r+0x926>
 800b0f2:	e06b      	b.n	800b1cc <_dtoa_r+0x96c>
 800b0f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0fa:	e73c      	b.n	800af76 <_dtoa_r+0x716>
 800b0fc:	3fe00000 	.word	0x3fe00000
 800b100:	40240000 	.word	0x40240000
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	1e5c      	subs	r4, r3, #1
 800b108:	9b08      	ldr	r3, [sp, #32]
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	db09      	blt.n	800b122 <_dtoa_r+0x8c2>
 800b10e:	1b1c      	subs	r4, r3, r4
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f6bf af30 	bge.w	800af78 <_dtoa_r+0x718>
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	9a03      	ldr	r2, [sp, #12]
 800b11c:	1a9e      	subs	r6, r3, r2
 800b11e:	2300      	movs	r3, #0
 800b120:	e72b      	b.n	800af7a <_dtoa_r+0x71a>
 800b122:	9b08      	ldr	r3, [sp, #32]
 800b124:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b126:	9408      	str	r4, [sp, #32]
 800b128:	1ae3      	subs	r3, r4, r3
 800b12a:	441a      	add	r2, r3
 800b12c:	9e00      	ldr	r6, [sp, #0]
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	920d      	str	r2, [sp, #52]	@ 0x34
 800b132:	2400      	movs	r4, #0
 800b134:	e721      	b.n	800af7a <_dtoa_r+0x71a>
 800b136:	9c08      	ldr	r4, [sp, #32]
 800b138:	9e00      	ldr	r6, [sp, #0]
 800b13a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b13c:	e728      	b.n	800af90 <_dtoa_r+0x730>
 800b13e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b142:	e751      	b.n	800afe8 <_dtoa_r+0x788>
 800b144:	9a08      	ldr	r2, [sp, #32]
 800b146:	9902      	ldr	r1, [sp, #8]
 800b148:	e750      	b.n	800afec <_dtoa_r+0x78c>
 800b14a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b14e:	e751      	b.n	800aff4 <_dtoa_r+0x794>
 800b150:	2300      	movs	r3, #0
 800b152:	e779      	b.n	800b048 <_dtoa_r+0x7e8>
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	e777      	b.n	800b048 <_dtoa_r+0x7e8>
 800b158:	2300      	movs	r3, #0
 800b15a:	9308      	str	r3, [sp, #32]
 800b15c:	e779      	b.n	800b052 <_dtoa_r+0x7f2>
 800b15e:	d093      	beq.n	800b088 <_dtoa_r+0x828>
 800b160:	9a00      	ldr	r2, [sp, #0]
 800b162:	331c      	adds	r3, #28
 800b164:	441a      	add	r2, r3
 800b166:	9200      	str	r2, [sp, #0]
 800b168:	9a06      	ldr	r2, [sp, #24]
 800b16a:	441a      	add	r2, r3
 800b16c:	441e      	add	r6, r3
 800b16e:	9206      	str	r2, [sp, #24]
 800b170:	e78a      	b.n	800b088 <_dtoa_r+0x828>
 800b172:	4603      	mov	r3, r0
 800b174:	e7f4      	b.n	800b160 <_dtoa_r+0x900>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	46b8      	mov	r8, r7
 800b17c:	dc20      	bgt.n	800b1c0 <_dtoa_r+0x960>
 800b17e:	469b      	mov	fp, r3
 800b180:	9b07      	ldr	r3, [sp, #28]
 800b182:	2b02      	cmp	r3, #2
 800b184:	dd1e      	ble.n	800b1c4 <_dtoa_r+0x964>
 800b186:	f1bb 0f00 	cmp.w	fp, #0
 800b18a:	f47f adb1 	bne.w	800acf0 <_dtoa_r+0x490>
 800b18e:	4621      	mov	r1, r4
 800b190:	465b      	mov	r3, fp
 800b192:	2205      	movs	r2, #5
 800b194:	4648      	mov	r0, r9
 800b196:	f000 fa95 	bl	800b6c4 <__multadd>
 800b19a:	4601      	mov	r1, r0
 800b19c:	4604      	mov	r4, r0
 800b19e:	9802      	ldr	r0, [sp, #8]
 800b1a0:	f000 fca0 	bl	800bae4 <__mcmp>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	f77f ada3 	ble.w	800acf0 <_dtoa_r+0x490>
 800b1aa:	4656      	mov	r6, sl
 800b1ac:	2331      	movs	r3, #49	@ 0x31
 800b1ae:	f806 3b01 	strb.w	r3, [r6], #1
 800b1b2:	f108 0801 	add.w	r8, r8, #1
 800b1b6:	e59f      	b.n	800acf8 <_dtoa_r+0x498>
 800b1b8:	9c03      	ldr	r4, [sp, #12]
 800b1ba:	46b8      	mov	r8, r7
 800b1bc:	4625      	mov	r5, r4
 800b1be:	e7f4      	b.n	800b1aa <_dtoa_r+0x94a>
 800b1c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 8101 	beq.w	800b3ce <_dtoa_r+0xb6e>
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	dd05      	ble.n	800b1dc <_dtoa_r+0x97c>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	4648      	mov	r0, r9
 800b1d6:	f000 fc19 	bl	800ba0c <__lshift>
 800b1da:	4605      	mov	r5, r0
 800b1dc:	9b08      	ldr	r3, [sp, #32]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d05c      	beq.n	800b29c <_dtoa_r+0xa3c>
 800b1e2:	6869      	ldr	r1, [r5, #4]
 800b1e4:	4648      	mov	r0, r9
 800b1e6:	f000 fa0b 	bl	800b600 <_Balloc>
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	b928      	cbnz	r0, 800b1fa <_dtoa_r+0x99a>
 800b1ee:	4b82      	ldr	r3, [pc, #520]	@ (800b3f8 <_dtoa_r+0xb98>)
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1f6:	f7ff bb4a 	b.w	800a88e <_dtoa_r+0x2e>
 800b1fa:	692a      	ldr	r2, [r5, #16]
 800b1fc:	3202      	adds	r2, #2
 800b1fe:	0092      	lsls	r2, r2, #2
 800b200:	f105 010c 	add.w	r1, r5, #12
 800b204:	300c      	adds	r0, #12
 800b206:	f7ff fa94 	bl	800a732 <memcpy>
 800b20a:	2201      	movs	r2, #1
 800b20c:	4631      	mov	r1, r6
 800b20e:	4648      	mov	r0, r9
 800b210:	f000 fbfc 	bl	800ba0c <__lshift>
 800b214:	f10a 0301 	add.w	r3, sl, #1
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	eb0a 030b 	add.w	r3, sl, fp
 800b21e:	9308      	str	r3, [sp, #32]
 800b220:	9b04      	ldr	r3, [sp, #16]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	462f      	mov	r7, r5
 800b228:	9306      	str	r3, [sp, #24]
 800b22a:	4605      	mov	r5, r0
 800b22c:	9b00      	ldr	r3, [sp, #0]
 800b22e:	9802      	ldr	r0, [sp, #8]
 800b230:	4621      	mov	r1, r4
 800b232:	f103 3bff 	add.w	fp, r3, #4294967295
 800b236:	f7ff fa8a 	bl	800a74e <quorem>
 800b23a:	4603      	mov	r3, r0
 800b23c:	3330      	adds	r3, #48	@ 0x30
 800b23e:	9003      	str	r0, [sp, #12]
 800b240:	4639      	mov	r1, r7
 800b242:	9802      	ldr	r0, [sp, #8]
 800b244:	9309      	str	r3, [sp, #36]	@ 0x24
 800b246:	f000 fc4d 	bl	800bae4 <__mcmp>
 800b24a:	462a      	mov	r2, r5
 800b24c:	9004      	str	r0, [sp, #16]
 800b24e:	4621      	mov	r1, r4
 800b250:	4648      	mov	r0, r9
 800b252:	f000 fc63 	bl	800bb1c <__mdiff>
 800b256:	68c2      	ldr	r2, [r0, #12]
 800b258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25a:	4606      	mov	r6, r0
 800b25c:	bb02      	cbnz	r2, 800b2a0 <_dtoa_r+0xa40>
 800b25e:	4601      	mov	r1, r0
 800b260:	9802      	ldr	r0, [sp, #8]
 800b262:	f000 fc3f 	bl	800bae4 <__mcmp>
 800b266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b268:	4602      	mov	r2, r0
 800b26a:	4631      	mov	r1, r6
 800b26c:	4648      	mov	r0, r9
 800b26e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b270:	9309      	str	r3, [sp, #36]	@ 0x24
 800b272:	f000 fa05 	bl	800b680 <_Bfree>
 800b276:	9b07      	ldr	r3, [sp, #28]
 800b278:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b27a:	9e00      	ldr	r6, [sp, #0]
 800b27c:	ea42 0103 	orr.w	r1, r2, r3
 800b280:	9b06      	ldr	r3, [sp, #24]
 800b282:	4319      	orrs	r1, r3
 800b284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b286:	d10d      	bne.n	800b2a4 <_dtoa_r+0xa44>
 800b288:	2b39      	cmp	r3, #57	@ 0x39
 800b28a:	d027      	beq.n	800b2dc <_dtoa_r+0xa7c>
 800b28c:	9a04      	ldr	r2, [sp, #16]
 800b28e:	2a00      	cmp	r2, #0
 800b290:	dd01      	ble.n	800b296 <_dtoa_r+0xa36>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	3331      	adds	r3, #49	@ 0x31
 800b296:	f88b 3000 	strb.w	r3, [fp]
 800b29a:	e52e      	b.n	800acfa <_dtoa_r+0x49a>
 800b29c:	4628      	mov	r0, r5
 800b29e:	e7b9      	b.n	800b214 <_dtoa_r+0x9b4>
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	e7e2      	b.n	800b26a <_dtoa_r+0xa0a>
 800b2a4:	9904      	ldr	r1, [sp, #16]
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	db04      	blt.n	800b2b4 <_dtoa_r+0xa54>
 800b2aa:	9807      	ldr	r0, [sp, #28]
 800b2ac:	4301      	orrs	r1, r0
 800b2ae:	9806      	ldr	r0, [sp, #24]
 800b2b0:	4301      	orrs	r1, r0
 800b2b2:	d120      	bne.n	800b2f6 <_dtoa_r+0xa96>
 800b2b4:	2a00      	cmp	r2, #0
 800b2b6:	ddee      	ble.n	800b296 <_dtoa_r+0xa36>
 800b2b8:	9902      	ldr	r1, [sp, #8]
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	4648      	mov	r0, r9
 800b2c0:	f000 fba4 	bl	800ba0c <__lshift>
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	9002      	str	r0, [sp, #8]
 800b2c8:	f000 fc0c 	bl	800bae4 <__mcmp>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	dc02      	bgt.n	800b2d8 <_dtoa_r+0xa78>
 800b2d2:	d1e0      	bne.n	800b296 <_dtoa_r+0xa36>
 800b2d4:	07da      	lsls	r2, r3, #31
 800b2d6:	d5de      	bpl.n	800b296 <_dtoa_r+0xa36>
 800b2d8:	2b39      	cmp	r3, #57	@ 0x39
 800b2da:	d1da      	bne.n	800b292 <_dtoa_r+0xa32>
 800b2dc:	2339      	movs	r3, #57	@ 0x39
 800b2de:	f88b 3000 	strb.w	r3, [fp]
 800b2e2:	4633      	mov	r3, r6
 800b2e4:	461e      	mov	r6, r3
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2ec:	2a39      	cmp	r2, #57	@ 0x39
 800b2ee:	d04e      	beq.n	800b38e <_dtoa_r+0xb2e>
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	e501      	b.n	800acfa <_dtoa_r+0x49a>
 800b2f6:	2a00      	cmp	r2, #0
 800b2f8:	dd03      	ble.n	800b302 <_dtoa_r+0xaa2>
 800b2fa:	2b39      	cmp	r3, #57	@ 0x39
 800b2fc:	d0ee      	beq.n	800b2dc <_dtoa_r+0xa7c>
 800b2fe:	3301      	adds	r3, #1
 800b300:	e7c9      	b.n	800b296 <_dtoa_r+0xa36>
 800b302:	9a00      	ldr	r2, [sp, #0]
 800b304:	9908      	ldr	r1, [sp, #32]
 800b306:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b30a:	428a      	cmp	r2, r1
 800b30c:	d028      	beq.n	800b360 <_dtoa_r+0xb00>
 800b30e:	9902      	ldr	r1, [sp, #8]
 800b310:	2300      	movs	r3, #0
 800b312:	220a      	movs	r2, #10
 800b314:	4648      	mov	r0, r9
 800b316:	f000 f9d5 	bl	800b6c4 <__multadd>
 800b31a:	42af      	cmp	r7, r5
 800b31c:	9002      	str	r0, [sp, #8]
 800b31e:	f04f 0300 	mov.w	r3, #0
 800b322:	f04f 020a 	mov.w	r2, #10
 800b326:	4639      	mov	r1, r7
 800b328:	4648      	mov	r0, r9
 800b32a:	d107      	bne.n	800b33c <_dtoa_r+0xadc>
 800b32c:	f000 f9ca 	bl	800b6c4 <__multadd>
 800b330:	4607      	mov	r7, r0
 800b332:	4605      	mov	r5, r0
 800b334:	9b00      	ldr	r3, [sp, #0]
 800b336:	3301      	adds	r3, #1
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	e777      	b.n	800b22c <_dtoa_r+0x9cc>
 800b33c:	f000 f9c2 	bl	800b6c4 <__multadd>
 800b340:	4629      	mov	r1, r5
 800b342:	4607      	mov	r7, r0
 800b344:	2300      	movs	r3, #0
 800b346:	220a      	movs	r2, #10
 800b348:	4648      	mov	r0, r9
 800b34a:	f000 f9bb 	bl	800b6c4 <__multadd>
 800b34e:	4605      	mov	r5, r0
 800b350:	e7f0      	b.n	800b334 <_dtoa_r+0xad4>
 800b352:	f1bb 0f00 	cmp.w	fp, #0
 800b356:	bfcc      	ite	gt
 800b358:	465e      	movgt	r6, fp
 800b35a:	2601      	movle	r6, #1
 800b35c:	4456      	add	r6, sl
 800b35e:	2700      	movs	r7, #0
 800b360:	9902      	ldr	r1, [sp, #8]
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	2201      	movs	r2, #1
 800b366:	4648      	mov	r0, r9
 800b368:	f000 fb50 	bl	800ba0c <__lshift>
 800b36c:	4621      	mov	r1, r4
 800b36e:	9002      	str	r0, [sp, #8]
 800b370:	f000 fbb8 	bl	800bae4 <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	dcb4      	bgt.n	800b2e2 <_dtoa_r+0xa82>
 800b378:	d102      	bne.n	800b380 <_dtoa_r+0xb20>
 800b37a:	9b00      	ldr	r3, [sp, #0]
 800b37c:	07db      	lsls	r3, r3, #31
 800b37e:	d4b0      	bmi.n	800b2e2 <_dtoa_r+0xa82>
 800b380:	4633      	mov	r3, r6
 800b382:	461e      	mov	r6, r3
 800b384:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b388:	2a30      	cmp	r2, #48	@ 0x30
 800b38a:	d0fa      	beq.n	800b382 <_dtoa_r+0xb22>
 800b38c:	e4b5      	b.n	800acfa <_dtoa_r+0x49a>
 800b38e:	459a      	cmp	sl, r3
 800b390:	d1a8      	bne.n	800b2e4 <_dtoa_r+0xa84>
 800b392:	2331      	movs	r3, #49	@ 0x31
 800b394:	f108 0801 	add.w	r8, r8, #1
 800b398:	f88a 3000 	strb.w	r3, [sl]
 800b39c:	e4ad      	b.n	800acfa <_dtoa_r+0x49a>
 800b39e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b3a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b3fc <_dtoa_r+0xb9c>
 800b3a4:	b11b      	cbz	r3, 800b3ae <_dtoa_r+0xb4e>
 800b3a6:	f10a 0308 	add.w	r3, sl, #8
 800b3aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	b017      	add	sp, #92	@ 0x5c
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	9b07      	ldr	r3, [sp, #28]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	f77f ae2e 	ble.w	800b01a <_dtoa_r+0x7ba>
 800b3be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3c0:	9308      	str	r3, [sp, #32]
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	e64d      	b.n	800b062 <_dtoa_r+0x802>
 800b3c6:	f1bb 0f00 	cmp.w	fp, #0
 800b3ca:	f77f aed9 	ble.w	800b180 <_dtoa_r+0x920>
 800b3ce:	4656      	mov	r6, sl
 800b3d0:	9802      	ldr	r0, [sp, #8]
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	f7ff f9bb 	bl	800a74e <quorem>
 800b3d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b3dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b3e0:	eba6 020a 	sub.w	r2, r6, sl
 800b3e4:	4593      	cmp	fp, r2
 800b3e6:	ddb4      	ble.n	800b352 <_dtoa_r+0xaf2>
 800b3e8:	9902      	ldr	r1, [sp, #8]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	220a      	movs	r2, #10
 800b3ee:	4648      	mov	r0, r9
 800b3f0:	f000 f968 	bl	800b6c4 <__multadd>
 800b3f4:	9002      	str	r0, [sp, #8]
 800b3f6:	e7eb      	b.n	800b3d0 <_dtoa_r+0xb70>
 800b3f8:	0800ca68 	.word	0x0800ca68
 800b3fc:	0800c9ec 	.word	0x0800c9ec

0800b400 <_free_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	4605      	mov	r5, r0
 800b404:	2900      	cmp	r1, #0
 800b406:	d041      	beq.n	800b48c <_free_r+0x8c>
 800b408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b40c:	1f0c      	subs	r4, r1, #4
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bfb8      	it	lt
 800b412:	18e4      	addlt	r4, r4, r3
 800b414:	f000 f8e8 	bl	800b5e8 <__malloc_lock>
 800b418:	4a1d      	ldr	r2, [pc, #116]	@ (800b490 <_free_r+0x90>)
 800b41a:	6813      	ldr	r3, [r2, #0]
 800b41c:	b933      	cbnz	r3, 800b42c <_free_r+0x2c>
 800b41e:	6063      	str	r3, [r4, #4]
 800b420:	6014      	str	r4, [r2, #0]
 800b422:	4628      	mov	r0, r5
 800b424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b428:	f000 b8e4 	b.w	800b5f4 <__malloc_unlock>
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	d908      	bls.n	800b442 <_free_r+0x42>
 800b430:	6820      	ldr	r0, [r4, #0]
 800b432:	1821      	adds	r1, r4, r0
 800b434:	428b      	cmp	r3, r1
 800b436:	bf01      	itttt	eq
 800b438:	6819      	ldreq	r1, [r3, #0]
 800b43a:	685b      	ldreq	r3, [r3, #4]
 800b43c:	1809      	addeq	r1, r1, r0
 800b43e:	6021      	streq	r1, [r4, #0]
 800b440:	e7ed      	b.n	800b41e <_free_r+0x1e>
 800b442:	461a      	mov	r2, r3
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	b10b      	cbz	r3, 800b44c <_free_r+0x4c>
 800b448:	42a3      	cmp	r3, r4
 800b44a:	d9fa      	bls.n	800b442 <_free_r+0x42>
 800b44c:	6811      	ldr	r1, [r2, #0]
 800b44e:	1850      	adds	r0, r2, r1
 800b450:	42a0      	cmp	r0, r4
 800b452:	d10b      	bne.n	800b46c <_free_r+0x6c>
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	4401      	add	r1, r0
 800b458:	1850      	adds	r0, r2, r1
 800b45a:	4283      	cmp	r3, r0
 800b45c:	6011      	str	r1, [r2, #0]
 800b45e:	d1e0      	bne.n	800b422 <_free_r+0x22>
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	6053      	str	r3, [r2, #4]
 800b466:	4408      	add	r0, r1
 800b468:	6010      	str	r0, [r2, #0]
 800b46a:	e7da      	b.n	800b422 <_free_r+0x22>
 800b46c:	d902      	bls.n	800b474 <_free_r+0x74>
 800b46e:	230c      	movs	r3, #12
 800b470:	602b      	str	r3, [r5, #0]
 800b472:	e7d6      	b.n	800b422 <_free_r+0x22>
 800b474:	6820      	ldr	r0, [r4, #0]
 800b476:	1821      	adds	r1, r4, r0
 800b478:	428b      	cmp	r3, r1
 800b47a:	bf04      	itt	eq
 800b47c:	6819      	ldreq	r1, [r3, #0]
 800b47e:	685b      	ldreq	r3, [r3, #4]
 800b480:	6063      	str	r3, [r4, #4]
 800b482:	bf04      	itt	eq
 800b484:	1809      	addeq	r1, r1, r0
 800b486:	6021      	streq	r1, [r4, #0]
 800b488:	6054      	str	r4, [r2, #4]
 800b48a:	e7ca      	b.n	800b422 <_free_r+0x22>
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	bf00      	nop
 800b490:	20000e94 	.word	0x20000e94

0800b494 <malloc>:
 800b494:	4b02      	ldr	r3, [pc, #8]	@ (800b4a0 <malloc+0xc>)
 800b496:	4601      	mov	r1, r0
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	f000 b825 	b.w	800b4e8 <_malloc_r>
 800b49e:	bf00      	nop
 800b4a0:	2000001c 	.word	0x2000001c

0800b4a4 <sbrk_aligned>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	4e0f      	ldr	r6, [pc, #60]	@ (800b4e4 <sbrk_aligned+0x40>)
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	6831      	ldr	r1, [r6, #0]
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	b911      	cbnz	r1, 800b4b6 <sbrk_aligned+0x12>
 800b4b0:	f000 fccc 	bl	800be4c <_sbrk_r>
 800b4b4:	6030      	str	r0, [r6, #0]
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f000 fcc7 	bl	800be4c <_sbrk_r>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	d103      	bne.n	800b4ca <sbrk_aligned+0x26>
 800b4c2:	f04f 34ff 	mov.w	r4, #4294967295
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	1cc4      	adds	r4, r0, #3
 800b4cc:	f024 0403 	bic.w	r4, r4, #3
 800b4d0:	42a0      	cmp	r0, r4
 800b4d2:	d0f8      	beq.n	800b4c6 <sbrk_aligned+0x22>
 800b4d4:	1a21      	subs	r1, r4, r0
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 fcb8 	bl	800be4c <_sbrk_r>
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d1f2      	bne.n	800b4c6 <sbrk_aligned+0x22>
 800b4e0:	e7ef      	b.n	800b4c2 <sbrk_aligned+0x1e>
 800b4e2:	bf00      	nop
 800b4e4:	20000e90 	.word	0x20000e90

0800b4e8 <_malloc_r>:
 800b4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ec:	1ccd      	adds	r5, r1, #3
 800b4ee:	f025 0503 	bic.w	r5, r5, #3
 800b4f2:	3508      	adds	r5, #8
 800b4f4:	2d0c      	cmp	r5, #12
 800b4f6:	bf38      	it	cc
 800b4f8:	250c      	movcc	r5, #12
 800b4fa:	2d00      	cmp	r5, #0
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	db01      	blt.n	800b504 <_malloc_r+0x1c>
 800b500:	42a9      	cmp	r1, r5
 800b502:	d904      	bls.n	800b50e <_malloc_r+0x26>
 800b504:	230c      	movs	r3, #12
 800b506:	6033      	str	r3, [r6, #0]
 800b508:	2000      	movs	r0, #0
 800b50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b50e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5e4 <_malloc_r+0xfc>
 800b512:	f000 f869 	bl	800b5e8 <__malloc_lock>
 800b516:	f8d8 3000 	ldr.w	r3, [r8]
 800b51a:	461c      	mov	r4, r3
 800b51c:	bb44      	cbnz	r4, 800b570 <_malloc_r+0x88>
 800b51e:	4629      	mov	r1, r5
 800b520:	4630      	mov	r0, r6
 800b522:	f7ff ffbf 	bl	800b4a4 <sbrk_aligned>
 800b526:	1c43      	adds	r3, r0, #1
 800b528:	4604      	mov	r4, r0
 800b52a:	d158      	bne.n	800b5de <_malloc_r+0xf6>
 800b52c:	f8d8 4000 	ldr.w	r4, [r8]
 800b530:	4627      	mov	r7, r4
 800b532:	2f00      	cmp	r7, #0
 800b534:	d143      	bne.n	800b5be <_malloc_r+0xd6>
 800b536:	2c00      	cmp	r4, #0
 800b538:	d04b      	beq.n	800b5d2 <_malloc_r+0xea>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	4639      	mov	r1, r7
 800b53e:	4630      	mov	r0, r6
 800b540:	eb04 0903 	add.w	r9, r4, r3
 800b544:	f000 fc82 	bl	800be4c <_sbrk_r>
 800b548:	4581      	cmp	r9, r0
 800b54a:	d142      	bne.n	800b5d2 <_malloc_r+0xea>
 800b54c:	6821      	ldr	r1, [r4, #0]
 800b54e:	1a6d      	subs	r5, r5, r1
 800b550:	4629      	mov	r1, r5
 800b552:	4630      	mov	r0, r6
 800b554:	f7ff ffa6 	bl	800b4a4 <sbrk_aligned>
 800b558:	3001      	adds	r0, #1
 800b55a:	d03a      	beq.n	800b5d2 <_malloc_r+0xea>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	442b      	add	r3, r5
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	f8d8 3000 	ldr.w	r3, [r8]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	bb62      	cbnz	r2, 800b5c4 <_malloc_r+0xdc>
 800b56a:	f8c8 7000 	str.w	r7, [r8]
 800b56e:	e00f      	b.n	800b590 <_malloc_r+0xa8>
 800b570:	6822      	ldr	r2, [r4, #0]
 800b572:	1b52      	subs	r2, r2, r5
 800b574:	d420      	bmi.n	800b5b8 <_malloc_r+0xd0>
 800b576:	2a0b      	cmp	r2, #11
 800b578:	d917      	bls.n	800b5aa <_malloc_r+0xc2>
 800b57a:	1961      	adds	r1, r4, r5
 800b57c:	42a3      	cmp	r3, r4
 800b57e:	6025      	str	r5, [r4, #0]
 800b580:	bf18      	it	ne
 800b582:	6059      	strne	r1, [r3, #4]
 800b584:	6863      	ldr	r3, [r4, #4]
 800b586:	bf08      	it	eq
 800b588:	f8c8 1000 	streq.w	r1, [r8]
 800b58c:	5162      	str	r2, [r4, r5]
 800b58e:	604b      	str	r3, [r1, #4]
 800b590:	4630      	mov	r0, r6
 800b592:	f000 f82f 	bl	800b5f4 <__malloc_unlock>
 800b596:	f104 000b 	add.w	r0, r4, #11
 800b59a:	1d23      	adds	r3, r4, #4
 800b59c:	f020 0007 	bic.w	r0, r0, #7
 800b5a0:	1ac2      	subs	r2, r0, r3
 800b5a2:	bf1c      	itt	ne
 800b5a4:	1a1b      	subne	r3, r3, r0
 800b5a6:	50a3      	strne	r3, [r4, r2]
 800b5a8:	e7af      	b.n	800b50a <_malloc_r+0x22>
 800b5aa:	6862      	ldr	r2, [r4, #4]
 800b5ac:	42a3      	cmp	r3, r4
 800b5ae:	bf0c      	ite	eq
 800b5b0:	f8c8 2000 	streq.w	r2, [r8]
 800b5b4:	605a      	strne	r2, [r3, #4]
 800b5b6:	e7eb      	b.n	800b590 <_malloc_r+0xa8>
 800b5b8:	4623      	mov	r3, r4
 800b5ba:	6864      	ldr	r4, [r4, #4]
 800b5bc:	e7ae      	b.n	800b51c <_malloc_r+0x34>
 800b5be:	463c      	mov	r4, r7
 800b5c0:	687f      	ldr	r7, [r7, #4]
 800b5c2:	e7b6      	b.n	800b532 <_malloc_r+0x4a>
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	d1fb      	bne.n	800b5c4 <_malloc_r+0xdc>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	6053      	str	r3, [r2, #4]
 800b5d0:	e7de      	b.n	800b590 <_malloc_r+0xa8>
 800b5d2:	230c      	movs	r3, #12
 800b5d4:	6033      	str	r3, [r6, #0]
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f000 f80c 	bl	800b5f4 <__malloc_unlock>
 800b5dc:	e794      	b.n	800b508 <_malloc_r+0x20>
 800b5de:	6005      	str	r5, [r0, #0]
 800b5e0:	e7d6      	b.n	800b590 <_malloc_r+0xa8>
 800b5e2:	bf00      	nop
 800b5e4:	20000e94 	.word	0x20000e94

0800b5e8 <__malloc_lock>:
 800b5e8:	4801      	ldr	r0, [pc, #4]	@ (800b5f0 <__malloc_lock+0x8>)
 800b5ea:	f7ff b8a0 	b.w	800a72e <__retarget_lock_acquire_recursive>
 800b5ee:	bf00      	nop
 800b5f0:	20000e8c 	.word	0x20000e8c

0800b5f4 <__malloc_unlock>:
 800b5f4:	4801      	ldr	r0, [pc, #4]	@ (800b5fc <__malloc_unlock+0x8>)
 800b5f6:	f7ff b89b 	b.w	800a730 <__retarget_lock_release_recursive>
 800b5fa:	bf00      	nop
 800b5fc:	20000e8c 	.word	0x20000e8c

0800b600 <_Balloc>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	69c6      	ldr	r6, [r0, #28]
 800b604:	4604      	mov	r4, r0
 800b606:	460d      	mov	r5, r1
 800b608:	b976      	cbnz	r6, 800b628 <_Balloc+0x28>
 800b60a:	2010      	movs	r0, #16
 800b60c:	f7ff ff42 	bl	800b494 <malloc>
 800b610:	4602      	mov	r2, r0
 800b612:	61e0      	str	r0, [r4, #28]
 800b614:	b920      	cbnz	r0, 800b620 <_Balloc+0x20>
 800b616:	4b18      	ldr	r3, [pc, #96]	@ (800b678 <_Balloc+0x78>)
 800b618:	4818      	ldr	r0, [pc, #96]	@ (800b67c <_Balloc+0x7c>)
 800b61a:	216b      	movs	r1, #107	@ 0x6b
 800b61c:	f000 fc26 	bl	800be6c <__assert_func>
 800b620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b624:	6006      	str	r6, [r0, #0]
 800b626:	60c6      	str	r6, [r0, #12]
 800b628:	69e6      	ldr	r6, [r4, #28]
 800b62a:	68f3      	ldr	r3, [r6, #12]
 800b62c:	b183      	cbz	r3, 800b650 <_Balloc+0x50>
 800b62e:	69e3      	ldr	r3, [r4, #28]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b636:	b9b8      	cbnz	r0, 800b668 <_Balloc+0x68>
 800b638:	2101      	movs	r1, #1
 800b63a:	fa01 f605 	lsl.w	r6, r1, r5
 800b63e:	1d72      	adds	r2, r6, #5
 800b640:	0092      	lsls	r2, r2, #2
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fc30 	bl	800bea8 <_calloc_r>
 800b648:	b160      	cbz	r0, 800b664 <_Balloc+0x64>
 800b64a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b64e:	e00e      	b.n	800b66e <_Balloc+0x6e>
 800b650:	2221      	movs	r2, #33	@ 0x21
 800b652:	2104      	movs	r1, #4
 800b654:	4620      	mov	r0, r4
 800b656:	f000 fc27 	bl	800bea8 <_calloc_r>
 800b65a:	69e3      	ldr	r3, [r4, #28]
 800b65c:	60f0      	str	r0, [r6, #12]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1e4      	bne.n	800b62e <_Balloc+0x2e>
 800b664:	2000      	movs	r0, #0
 800b666:	bd70      	pop	{r4, r5, r6, pc}
 800b668:	6802      	ldr	r2, [r0, #0]
 800b66a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b66e:	2300      	movs	r3, #0
 800b670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b674:	e7f7      	b.n	800b666 <_Balloc+0x66>
 800b676:	bf00      	nop
 800b678:	0800c9f9 	.word	0x0800c9f9
 800b67c:	0800ca79 	.word	0x0800ca79

0800b680 <_Bfree>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	69c6      	ldr	r6, [r0, #28]
 800b684:	4605      	mov	r5, r0
 800b686:	460c      	mov	r4, r1
 800b688:	b976      	cbnz	r6, 800b6a8 <_Bfree+0x28>
 800b68a:	2010      	movs	r0, #16
 800b68c:	f7ff ff02 	bl	800b494 <malloc>
 800b690:	4602      	mov	r2, r0
 800b692:	61e8      	str	r0, [r5, #28]
 800b694:	b920      	cbnz	r0, 800b6a0 <_Bfree+0x20>
 800b696:	4b09      	ldr	r3, [pc, #36]	@ (800b6bc <_Bfree+0x3c>)
 800b698:	4809      	ldr	r0, [pc, #36]	@ (800b6c0 <_Bfree+0x40>)
 800b69a:	218f      	movs	r1, #143	@ 0x8f
 800b69c:	f000 fbe6 	bl	800be6c <__assert_func>
 800b6a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6a4:	6006      	str	r6, [r0, #0]
 800b6a6:	60c6      	str	r6, [r0, #12]
 800b6a8:	b13c      	cbz	r4, 800b6ba <_Bfree+0x3a>
 800b6aa:	69eb      	ldr	r3, [r5, #28]
 800b6ac:	6862      	ldr	r2, [r4, #4]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6b4:	6021      	str	r1, [r4, #0]
 800b6b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
 800b6bc:	0800c9f9 	.word	0x0800c9f9
 800b6c0:	0800ca79 	.word	0x0800ca79

0800b6c4 <__multadd>:
 800b6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c8:	690d      	ldr	r5, [r1, #16]
 800b6ca:	4607      	mov	r7, r0
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	461e      	mov	r6, r3
 800b6d0:	f101 0c14 	add.w	ip, r1, #20
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b6da:	b299      	uxth	r1, r3
 800b6dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b6e0:	0c1e      	lsrs	r6, r3, #16
 800b6e2:	0c0b      	lsrs	r3, r1, #16
 800b6e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b6e8:	b289      	uxth	r1, r1
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6f0:	4285      	cmp	r5, r0
 800b6f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b6f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6fa:	dcec      	bgt.n	800b6d6 <__multadd+0x12>
 800b6fc:	b30e      	cbz	r6, 800b742 <__multadd+0x7e>
 800b6fe:	68a3      	ldr	r3, [r4, #8]
 800b700:	42ab      	cmp	r3, r5
 800b702:	dc19      	bgt.n	800b738 <__multadd+0x74>
 800b704:	6861      	ldr	r1, [r4, #4]
 800b706:	4638      	mov	r0, r7
 800b708:	3101      	adds	r1, #1
 800b70a:	f7ff ff79 	bl	800b600 <_Balloc>
 800b70e:	4680      	mov	r8, r0
 800b710:	b928      	cbnz	r0, 800b71e <__multadd+0x5a>
 800b712:	4602      	mov	r2, r0
 800b714:	4b0c      	ldr	r3, [pc, #48]	@ (800b748 <__multadd+0x84>)
 800b716:	480d      	ldr	r0, [pc, #52]	@ (800b74c <__multadd+0x88>)
 800b718:	21ba      	movs	r1, #186	@ 0xba
 800b71a:	f000 fba7 	bl	800be6c <__assert_func>
 800b71e:	6922      	ldr	r2, [r4, #16]
 800b720:	3202      	adds	r2, #2
 800b722:	f104 010c 	add.w	r1, r4, #12
 800b726:	0092      	lsls	r2, r2, #2
 800b728:	300c      	adds	r0, #12
 800b72a:	f7ff f802 	bl	800a732 <memcpy>
 800b72e:	4621      	mov	r1, r4
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff ffa5 	bl	800b680 <_Bfree>
 800b736:	4644      	mov	r4, r8
 800b738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b73c:	3501      	adds	r5, #1
 800b73e:	615e      	str	r6, [r3, #20]
 800b740:	6125      	str	r5, [r4, #16]
 800b742:	4620      	mov	r0, r4
 800b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b748:	0800ca68 	.word	0x0800ca68
 800b74c:	0800ca79 	.word	0x0800ca79

0800b750 <__hi0bits>:
 800b750:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b754:	4603      	mov	r3, r0
 800b756:	bf36      	itet	cc
 800b758:	0403      	lslcc	r3, r0, #16
 800b75a:	2000      	movcs	r0, #0
 800b75c:	2010      	movcc	r0, #16
 800b75e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b762:	bf3c      	itt	cc
 800b764:	021b      	lslcc	r3, r3, #8
 800b766:	3008      	addcc	r0, #8
 800b768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b76c:	bf3c      	itt	cc
 800b76e:	011b      	lslcc	r3, r3, #4
 800b770:	3004      	addcc	r0, #4
 800b772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b776:	bf3c      	itt	cc
 800b778:	009b      	lslcc	r3, r3, #2
 800b77a:	3002      	addcc	r0, #2
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	db05      	blt.n	800b78c <__hi0bits+0x3c>
 800b780:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b784:	f100 0001 	add.w	r0, r0, #1
 800b788:	bf08      	it	eq
 800b78a:	2020      	moveq	r0, #32
 800b78c:	4770      	bx	lr

0800b78e <__lo0bits>:
 800b78e:	6803      	ldr	r3, [r0, #0]
 800b790:	4602      	mov	r2, r0
 800b792:	f013 0007 	ands.w	r0, r3, #7
 800b796:	d00b      	beq.n	800b7b0 <__lo0bits+0x22>
 800b798:	07d9      	lsls	r1, r3, #31
 800b79a:	d421      	bmi.n	800b7e0 <__lo0bits+0x52>
 800b79c:	0798      	lsls	r0, r3, #30
 800b79e:	bf49      	itett	mi
 800b7a0:	085b      	lsrmi	r3, r3, #1
 800b7a2:	089b      	lsrpl	r3, r3, #2
 800b7a4:	2001      	movmi	r0, #1
 800b7a6:	6013      	strmi	r3, [r2, #0]
 800b7a8:	bf5c      	itt	pl
 800b7aa:	6013      	strpl	r3, [r2, #0]
 800b7ac:	2002      	movpl	r0, #2
 800b7ae:	4770      	bx	lr
 800b7b0:	b299      	uxth	r1, r3
 800b7b2:	b909      	cbnz	r1, 800b7b8 <__lo0bits+0x2a>
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	2010      	movs	r0, #16
 800b7b8:	b2d9      	uxtb	r1, r3
 800b7ba:	b909      	cbnz	r1, 800b7c0 <__lo0bits+0x32>
 800b7bc:	3008      	adds	r0, #8
 800b7be:	0a1b      	lsrs	r3, r3, #8
 800b7c0:	0719      	lsls	r1, r3, #28
 800b7c2:	bf04      	itt	eq
 800b7c4:	091b      	lsreq	r3, r3, #4
 800b7c6:	3004      	addeq	r0, #4
 800b7c8:	0799      	lsls	r1, r3, #30
 800b7ca:	bf04      	itt	eq
 800b7cc:	089b      	lsreq	r3, r3, #2
 800b7ce:	3002      	addeq	r0, #2
 800b7d0:	07d9      	lsls	r1, r3, #31
 800b7d2:	d403      	bmi.n	800b7dc <__lo0bits+0x4e>
 800b7d4:	085b      	lsrs	r3, r3, #1
 800b7d6:	f100 0001 	add.w	r0, r0, #1
 800b7da:	d003      	beq.n	800b7e4 <__lo0bits+0x56>
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	4770      	bx	lr
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	4770      	bx	lr
 800b7e4:	2020      	movs	r0, #32
 800b7e6:	4770      	bx	lr

0800b7e8 <__i2b>:
 800b7e8:	b510      	push	{r4, lr}
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	f7ff ff07 	bl	800b600 <_Balloc>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	b928      	cbnz	r0, 800b802 <__i2b+0x1a>
 800b7f6:	4b05      	ldr	r3, [pc, #20]	@ (800b80c <__i2b+0x24>)
 800b7f8:	4805      	ldr	r0, [pc, #20]	@ (800b810 <__i2b+0x28>)
 800b7fa:	f240 1145 	movw	r1, #325	@ 0x145
 800b7fe:	f000 fb35 	bl	800be6c <__assert_func>
 800b802:	2301      	movs	r3, #1
 800b804:	6144      	str	r4, [r0, #20]
 800b806:	6103      	str	r3, [r0, #16]
 800b808:	bd10      	pop	{r4, pc}
 800b80a:	bf00      	nop
 800b80c:	0800ca68 	.word	0x0800ca68
 800b810:	0800ca79 	.word	0x0800ca79

0800b814 <__multiply>:
 800b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	4617      	mov	r7, r2
 800b81a:	690a      	ldr	r2, [r1, #16]
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	429a      	cmp	r2, r3
 800b820:	bfa8      	it	ge
 800b822:	463b      	movge	r3, r7
 800b824:	4689      	mov	r9, r1
 800b826:	bfa4      	itt	ge
 800b828:	460f      	movge	r7, r1
 800b82a:	4699      	movge	r9, r3
 800b82c:	693d      	ldr	r5, [r7, #16]
 800b82e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	6879      	ldr	r1, [r7, #4]
 800b836:	eb05 060a 	add.w	r6, r5, sl
 800b83a:	42b3      	cmp	r3, r6
 800b83c:	b085      	sub	sp, #20
 800b83e:	bfb8      	it	lt
 800b840:	3101      	addlt	r1, #1
 800b842:	f7ff fedd 	bl	800b600 <_Balloc>
 800b846:	b930      	cbnz	r0, 800b856 <__multiply+0x42>
 800b848:	4602      	mov	r2, r0
 800b84a:	4b41      	ldr	r3, [pc, #260]	@ (800b950 <__multiply+0x13c>)
 800b84c:	4841      	ldr	r0, [pc, #260]	@ (800b954 <__multiply+0x140>)
 800b84e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b852:	f000 fb0b 	bl	800be6c <__assert_func>
 800b856:	f100 0414 	add.w	r4, r0, #20
 800b85a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b85e:	4623      	mov	r3, r4
 800b860:	2200      	movs	r2, #0
 800b862:	4573      	cmp	r3, lr
 800b864:	d320      	bcc.n	800b8a8 <__multiply+0x94>
 800b866:	f107 0814 	add.w	r8, r7, #20
 800b86a:	f109 0114 	add.w	r1, r9, #20
 800b86e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b872:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b876:	9302      	str	r3, [sp, #8]
 800b878:	1beb      	subs	r3, r5, r7
 800b87a:	3b15      	subs	r3, #21
 800b87c:	f023 0303 	bic.w	r3, r3, #3
 800b880:	3304      	adds	r3, #4
 800b882:	3715      	adds	r7, #21
 800b884:	42bd      	cmp	r5, r7
 800b886:	bf38      	it	cc
 800b888:	2304      	movcc	r3, #4
 800b88a:	9301      	str	r3, [sp, #4]
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	9103      	str	r1, [sp, #12]
 800b890:	428b      	cmp	r3, r1
 800b892:	d80c      	bhi.n	800b8ae <__multiply+0x9a>
 800b894:	2e00      	cmp	r6, #0
 800b896:	dd03      	ble.n	800b8a0 <__multiply+0x8c>
 800b898:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d055      	beq.n	800b94c <__multiply+0x138>
 800b8a0:	6106      	str	r6, [r0, #16]
 800b8a2:	b005      	add	sp, #20
 800b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a8:	f843 2b04 	str.w	r2, [r3], #4
 800b8ac:	e7d9      	b.n	800b862 <__multiply+0x4e>
 800b8ae:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8b2:	f1ba 0f00 	cmp.w	sl, #0
 800b8b6:	d01f      	beq.n	800b8f8 <__multiply+0xe4>
 800b8b8:	46c4      	mov	ip, r8
 800b8ba:	46a1      	mov	r9, r4
 800b8bc:	2700      	movs	r7, #0
 800b8be:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b8c2:	f8d9 3000 	ldr.w	r3, [r9]
 800b8c6:	fa1f fb82 	uxth.w	fp, r2
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b8d0:	443b      	add	r3, r7
 800b8d2:	f8d9 7000 	ldr.w	r7, [r9]
 800b8d6:	0c12      	lsrs	r2, r2, #16
 800b8d8:	0c3f      	lsrs	r7, r7, #16
 800b8da:	fb0a 7202 	mla	r2, sl, r2, r7
 800b8de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8e8:	4565      	cmp	r5, ip
 800b8ea:	f849 3b04 	str.w	r3, [r9], #4
 800b8ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b8f2:	d8e4      	bhi.n	800b8be <__multiply+0xaa>
 800b8f4:	9b01      	ldr	r3, [sp, #4]
 800b8f6:	50e7      	str	r7, [r4, r3]
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b8fe:	3104      	adds	r1, #4
 800b900:	f1b9 0f00 	cmp.w	r9, #0
 800b904:	d020      	beq.n	800b948 <__multiply+0x134>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	4647      	mov	r7, r8
 800b90a:	46a4      	mov	ip, r4
 800b90c:	f04f 0a00 	mov.w	sl, #0
 800b910:	f8b7 b000 	ldrh.w	fp, [r7]
 800b914:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b918:	fb09 220b 	mla	r2, r9, fp, r2
 800b91c:	4452      	add	r2, sl
 800b91e:	b29b      	uxth	r3, r3
 800b920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b924:	f84c 3b04 	str.w	r3, [ip], #4
 800b928:	f857 3b04 	ldr.w	r3, [r7], #4
 800b92c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b930:	f8bc 3000 	ldrh.w	r3, [ip]
 800b934:	fb09 330a 	mla	r3, r9, sl, r3
 800b938:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b93c:	42bd      	cmp	r5, r7
 800b93e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b942:	d8e5      	bhi.n	800b910 <__multiply+0xfc>
 800b944:	9a01      	ldr	r2, [sp, #4]
 800b946:	50a3      	str	r3, [r4, r2]
 800b948:	3404      	adds	r4, #4
 800b94a:	e79f      	b.n	800b88c <__multiply+0x78>
 800b94c:	3e01      	subs	r6, #1
 800b94e:	e7a1      	b.n	800b894 <__multiply+0x80>
 800b950:	0800ca68 	.word	0x0800ca68
 800b954:	0800ca79 	.word	0x0800ca79

0800b958 <__pow5mult>:
 800b958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b95c:	4615      	mov	r5, r2
 800b95e:	f012 0203 	ands.w	r2, r2, #3
 800b962:	4607      	mov	r7, r0
 800b964:	460e      	mov	r6, r1
 800b966:	d007      	beq.n	800b978 <__pow5mult+0x20>
 800b968:	4c25      	ldr	r4, [pc, #148]	@ (800ba00 <__pow5mult+0xa8>)
 800b96a:	3a01      	subs	r2, #1
 800b96c:	2300      	movs	r3, #0
 800b96e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b972:	f7ff fea7 	bl	800b6c4 <__multadd>
 800b976:	4606      	mov	r6, r0
 800b978:	10ad      	asrs	r5, r5, #2
 800b97a:	d03d      	beq.n	800b9f8 <__pow5mult+0xa0>
 800b97c:	69fc      	ldr	r4, [r7, #28]
 800b97e:	b97c      	cbnz	r4, 800b9a0 <__pow5mult+0x48>
 800b980:	2010      	movs	r0, #16
 800b982:	f7ff fd87 	bl	800b494 <malloc>
 800b986:	4602      	mov	r2, r0
 800b988:	61f8      	str	r0, [r7, #28]
 800b98a:	b928      	cbnz	r0, 800b998 <__pow5mult+0x40>
 800b98c:	4b1d      	ldr	r3, [pc, #116]	@ (800ba04 <__pow5mult+0xac>)
 800b98e:	481e      	ldr	r0, [pc, #120]	@ (800ba08 <__pow5mult+0xb0>)
 800b990:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b994:	f000 fa6a 	bl	800be6c <__assert_func>
 800b998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b99c:	6004      	str	r4, [r0, #0]
 800b99e:	60c4      	str	r4, [r0, #12]
 800b9a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9a8:	b94c      	cbnz	r4, 800b9be <__pow5mult+0x66>
 800b9aa:	f240 2171 	movw	r1, #625	@ 0x271
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	f7ff ff1a 	bl	800b7e8 <__i2b>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	f04f 0900 	mov.w	r9, #0
 800b9c2:	07eb      	lsls	r3, r5, #31
 800b9c4:	d50a      	bpl.n	800b9dc <__pow5mult+0x84>
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	4622      	mov	r2, r4
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	f7ff ff22 	bl	800b814 <__multiply>
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f7ff fe53 	bl	800b680 <_Bfree>
 800b9da:	4646      	mov	r6, r8
 800b9dc:	106d      	asrs	r5, r5, #1
 800b9de:	d00b      	beq.n	800b9f8 <__pow5mult+0xa0>
 800b9e0:	6820      	ldr	r0, [r4, #0]
 800b9e2:	b938      	cbnz	r0, 800b9f4 <__pow5mult+0x9c>
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7ff ff13 	bl	800b814 <__multiply>
 800b9ee:	6020      	str	r0, [r4, #0]
 800b9f0:	f8c0 9000 	str.w	r9, [r0]
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	e7e4      	b.n	800b9c2 <__pow5mult+0x6a>
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fe:	bf00      	nop
 800ba00:	0800cb2c 	.word	0x0800cb2c
 800ba04:	0800c9f9 	.word	0x0800c9f9
 800ba08:	0800ca79 	.word	0x0800ca79

0800ba0c <__lshift>:
 800ba0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba10:	460c      	mov	r4, r1
 800ba12:	6849      	ldr	r1, [r1, #4]
 800ba14:	6923      	ldr	r3, [r4, #16]
 800ba16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba1a:	68a3      	ldr	r3, [r4, #8]
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	4691      	mov	r9, r2
 800ba20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba24:	f108 0601 	add.w	r6, r8, #1
 800ba28:	42b3      	cmp	r3, r6
 800ba2a:	db0b      	blt.n	800ba44 <__lshift+0x38>
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	f7ff fde7 	bl	800b600 <_Balloc>
 800ba32:	4605      	mov	r5, r0
 800ba34:	b948      	cbnz	r0, 800ba4a <__lshift+0x3e>
 800ba36:	4602      	mov	r2, r0
 800ba38:	4b28      	ldr	r3, [pc, #160]	@ (800badc <__lshift+0xd0>)
 800ba3a:	4829      	ldr	r0, [pc, #164]	@ (800bae0 <__lshift+0xd4>)
 800ba3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba40:	f000 fa14 	bl	800be6c <__assert_func>
 800ba44:	3101      	adds	r1, #1
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	e7ee      	b.n	800ba28 <__lshift+0x1c>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f100 0114 	add.w	r1, r0, #20
 800ba50:	f100 0210 	add.w	r2, r0, #16
 800ba54:	4618      	mov	r0, r3
 800ba56:	4553      	cmp	r3, sl
 800ba58:	db33      	blt.n	800bac2 <__lshift+0xb6>
 800ba5a:	6920      	ldr	r0, [r4, #16]
 800ba5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba60:	f104 0314 	add.w	r3, r4, #20
 800ba64:	f019 091f 	ands.w	r9, r9, #31
 800ba68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba70:	d02b      	beq.n	800baca <__lshift+0xbe>
 800ba72:	f1c9 0e20 	rsb	lr, r9, #32
 800ba76:	468a      	mov	sl, r1
 800ba78:	2200      	movs	r2, #0
 800ba7a:	6818      	ldr	r0, [r3, #0]
 800ba7c:	fa00 f009 	lsl.w	r0, r0, r9
 800ba80:	4310      	orrs	r0, r2
 800ba82:	f84a 0b04 	str.w	r0, [sl], #4
 800ba86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8a:	459c      	cmp	ip, r3
 800ba8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba90:	d8f3      	bhi.n	800ba7a <__lshift+0x6e>
 800ba92:	ebac 0304 	sub.w	r3, ip, r4
 800ba96:	3b15      	subs	r3, #21
 800ba98:	f023 0303 	bic.w	r3, r3, #3
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	f104 0015 	add.w	r0, r4, #21
 800baa2:	4560      	cmp	r0, ip
 800baa4:	bf88      	it	hi
 800baa6:	2304      	movhi	r3, #4
 800baa8:	50ca      	str	r2, [r1, r3]
 800baaa:	b10a      	cbz	r2, 800bab0 <__lshift+0xa4>
 800baac:	f108 0602 	add.w	r6, r8, #2
 800bab0:	3e01      	subs	r6, #1
 800bab2:	4638      	mov	r0, r7
 800bab4:	612e      	str	r6, [r5, #16]
 800bab6:	4621      	mov	r1, r4
 800bab8:	f7ff fde2 	bl	800b680 <_Bfree>
 800babc:	4628      	mov	r0, r5
 800babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bac6:	3301      	adds	r3, #1
 800bac8:	e7c5      	b.n	800ba56 <__lshift+0x4a>
 800baca:	3904      	subs	r1, #4
 800bacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bad4:	459c      	cmp	ip, r3
 800bad6:	d8f9      	bhi.n	800bacc <__lshift+0xc0>
 800bad8:	e7ea      	b.n	800bab0 <__lshift+0xa4>
 800bada:	bf00      	nop
 800badc:	0800ca68 	.word	0x0800ca68
 800bae0:	0800ca79 	.word	0x0800ca79

0800bae4 <__mcmp>:
 800bae4:	690a      	ldr	r2, [r1, #16]
 800bae6:	4603      	mov	r3, r0
 800bae8:	6900      	ldr	r0, [r0, #16]
 800baea:	1a80      	subs	r0, r0, r2
 800baec:	b530      	push	{r4, r5, lr}
 800baee:	d10e      	bne.n	800bb0e <__mcmp+0x2a>
 800baf0:	3314      	adds	r3, #20
 800baf2:	3114      	adds	r1, #20
 800baf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800baf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bafc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb04:	4295      	cmp	r5, r2
 800bb06:	d003      	beq.n	800bb10 <__mcmp+0x2c>
 800bb08:	d205      	bcs.n	800bb16 <__mcmp+0x32>
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0e:	bd30      	pop	{r4, r5, pc}
 800bb10:	42a3      	cmp	r3, r4
 800bb12:	d3f3      	bcc.n	800bafc <__mcmp+0x18>
 800bb14:	e7fb      	b.n	800bb0e <__mcmp+0x2a>
 800bb16:	2001      	movs	r0, #1
 800bb18:	e7f9      	b.n	800bb0e <__mcmp+0x2a>
	...

0800bb1c <__mdiff>:
 800bb1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	4689      	mov	r9, r1
 800bb22:	4606      	mov	r6, r0
 800bb24:	4611      	mov	r1, r2
 800bb26:	4648      	mov	r0, r9
 800bb28:	4614      	mov	r4, r2
 800bb2a:	f7ff ffdb 	bl	800bae4 <__mcmp>
 800bb2e:	1e05      	subs	r5, r0, #0
 800bb30:	d112      	bne.n	800bb58 <__mdiff+0x3c>
 800bb32:	4629      	mov	r1, r5
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff fd63 	bl	800b600 <_Balloc>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	b928      	cbnz	r0, 800bb4a <__mdiff+0x2e>
 800bb3e:	4b3f      	ldr	r3, [pc, #252]	@ (800bc3c <__mdiff+0x120>)
 800bb40:	f240 2137 	movw	r1, #567	@ 0x237
 800bb44:	483e      	ldr	r0, [pc, #248]	@ (800bc40 <__mdiff+0x124>)
 800bb46:	f000 f991 	bl	800be6c <__assert_func>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb50:	4610      	mov	r0, r2
 800bb52:	b003      	add	sp, #12
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	bfbc      	itt	lt
 800bb5a:	464b      	movlt	r3, r9
 800bb5c:	46a1      	movlt	r9, r4
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb64:	bfba      	itte	lt
 800bb66:	461c      	movlt	r4, r3
 800bb68:	2501      	movlt	r5, #1
 800bb6a:	2500      	movge	r5, #0
 800bb6c:	f7ff fd48 	bl	800b600 <_Balloc>
 800bb70:	4602      	mov	r2, r0
 800bb72:	b918      	cbnz	r0, 800bb7c <__mdiff+0x60>
 800bb74:	4b31      	ldr	r3, [pc, #196]	@ (800bc3c <__mdiff+0x120>)
 800bb76:	f240 2145 	movw	r1, #581	@ 0x245
 800bb7a:	e7e3      	b.n	800bb44 <__mdiff+0x28>
 800bb7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb80:	6926      	ldr	r6, [r4, #16]
 800bb82:	60c5      	str	r5, [r0, #12]
 800bb84:	f109 0310 	add.w	r3, r9, #16
 800bb88:	f109 0514 	add.w	r5, r9, #20
 800bb8c:	f104 0e14 	add.w	lr, r4, #20
 800bb90:	f100 0b14 	add.w	fp, r0, #20
 800bb94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	46d9      	mov	r9, fp
 800bba0:	f04f 0c00 	mov.w	ip, #0
 800bba4:	9b01      	ldr	r3, [sp, #4]
 800bba6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bbaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	fa1f f38a 	uxth.w	r3, sl
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	b283      	uxth	r3, r0
 800bbb8:	1acb      	subs	r3, r1, r3
 800bbba:	0c00      	lsrs	r0, r0, #16
 800bbbc:	4463      	add	r3, ip
 800bbbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bbcc:	4576      	cmp	r6, lr
 800bbce:	f849 3b04 	str.w	r3, [r9], #4
 800bbd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbd6:	d8e5      	bhi.n	800bba4 <__mdiff+0x88>
 800bbd8:	1b33      	subs	r3, r6, r4
 800bbda:	3b15      	subs	r3, #21
 800bbdc:	f023 0303 	bic.w	r3, r3, #3
 800bbe0:	3415      	adds	r4, #21
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	42a6      	cmp	r6, r4
 800bbe6:	bf38      	it	cc
 800bbe8:	2304      	movcc	r3, #4
 800bbea:	441d      	add	r5, r3
 800bbec:	445b      	add	r3, fp
 800bbee:	461e      	mov	r6, r3
 800bbf0:	462c      	mov	r4, r5
 800bbf2:	4544      	cmp	r4, r8
 800bbf4:	d30e      	bcc.n	800bc14 <__mdiff+0xf8>
 800bbf6:	f108 0103 	add.w	r1, r8, #3
 800bbfa:	1b49      	subs	r1, r1, r5
 800bbfc:	f021 0103 	bic.w	r1, r1, #3
 800bc00:	3d03      	subs	r5, #3
 800bc02:	45a8      	cmp	r8, r5
 800bc04:	bf38      	it	cc
 800bc06:	2100      	movcc	r1, #0
 800bc08:	440b      	add	r3, r1
 800bc0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc0e:	b191      	cbz	r1, 800bc36 <__mdiff+0x11a>
 800bc10:	6117      	str	r7, [r2, #16]
 800bc12:	e79d      	b.n	800bb50 <__mdiff+0x34>
 800bc14:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc18:	46e6      	mov	lr, ip
 800bc1a:	0c08      	lsrs	r0, r1, #16
 800bc1c:	fa1c fc81 	uxtah	ip, ip, r1
 800bc20:	4471      	add	r1, lr
 800bc22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc26:	b289      	uxth	r1, r1
 800bc28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc2c:	f846 1b04 	str.w	r1, [r6], #4
 800bc30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc34:	e7dd      	b.n	800bbf2 <__mdiff+0xd6>
 800bc36:	3f01      	subs	r7, #1
 800bc38:	e7e7      	b.n	800bc0a <__mdiff+0xee>
 800bc3a:	bf00      	nop
 800bc3c:	0800ca68 	.word	0x0800ca68
 800bc40:	0800ca79 	.word	0x0800ca79

0800bc44 <__d2b>:
 800bc44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc48:	460f      	mov	r7, r1
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	ec59 8b10 	vmov	r8, r9, d0
 800bc50:	4616      	mov	r6, r2
 800bc52:	f7ff fcd5 	bl	800b600 <_Balloc>
 800bc56:	4604      	mov	r4, r0
 800bc58:	b930      	cbnz	r0, 800bc68 <__d2b+0x24>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	4b23      	ldr	r3, [pc, #140]	@ (800bcec <__d2b+0xa8>)
 800bc5e:	4824      	ldr	r0, [pc, #144]	@ (800bcf0 <__d2b+0xac>)
 800bc60:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc64:	f000 f902 	bl	800be6c <__assert_func>
 800bc68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc70:	b10d      	cbz	r5, 800bc76 <__d2b+0x32>
 800bc72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	f1b8 0300 	subs.w	r3, r8, #0
 800bc7c:	d023      	beq.n	800bcc6 <__d2b+0x82>
 800bc7e:	4668      	mov	r0, sp
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	f7ff fd84 	bl	800b78e <__lo0bits>
 800bc86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc8a:	b1d0      	cbz	r0, 800bcc2 <__d2b+0x7e>
 800bc8c:	f1c0 0320 	rsb	r3, r0, #32
 800bc90:	fa02 f303 	lsl.w	r3, r2, r3
 800bc94:	430b      	orrs	r3, r1
 800bc96:	40c2      	lsrs	r2, r0
 800bc98:	6163      	str	r3, [r4, #20]
 800bc9a:	9201      	str	r2, [sp, #4]
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	61a3      	str	r3, [r4, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bf0c      	ite	eq
 800bca4:	2201      	moveq	r2, #1
 800bca6:	2202      	movne	r2, #2
 800bca8:	6122      	str	r2, [r4, #16]
 800bcaa:	b1a5      	cbz	r5, 800bcd6 <__d2b+0x92>
 800bcac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bcb0:	4405      	add	r5, r0
 800bcb2:	603d      	str	r5, [r7, #0]
 800bcb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bcb8:	6030      	str	r0, [r6, #0]
 800bcba:	4620      	mov	r0, r4
 800bcbc:	b003      	add	sp, #12
 800bcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcc2:	6161      	str	r1, [r4, #20]
 800bcc4:	e7ea      	b.n	800bc9c <__d2b+0x58>
 800bcc6:	a801      	add	r0, sp, #4
 800bcc8:	f7ff fd61 	bl	800b78e <__lo0bits>
 800bccc:	9b01      	ldr	r3, [sp, #4]
 800bcce:	6163      	str	r3, [r4, #20]
 800bcd0:	3020      	adds	r0, #32
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	e7e8      	b.n	800bca8 <__d2b+0x64>
 800bcd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bcde:	6038      	str	r0, [r7, #0]
 800bce0:	6918      	ldr	r0, [r3, #16]
 800bce2:	f7ff fd35 	bl	800b750 <__hi0bits>
 800bce6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcea:	e7e5      	b.n	800bcb8 <__d2b+0x74>
 800bcec:	0800ca68 	.word	0x0800ca68
 800bcf0:	0800ca79 	.word	0x0800ca79

0800bcf4 <__sflush_r>:
 800bcf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfc:	0716      	lsls	r6, r2, #28
 800bcfe:	4605      	mov	r5, r0
 800bd00:	460c      	mov	r4, r1
 800bd02:	d454      	bmi.n	800bdae <__sflush_r+0xba>
 800bd04:	684b      	ldr	r3, [r1, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dc02      	bgt.n	800bd10 <__sflush_r+0x1c>
 800bd0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dd48      	ble.n	800bda2 <__sflush_r+0xae>
 800bd10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd12:	2e00      	cmp	r6, #0
 800bd14:	d045      	beq.n	800bda2 <__sflush_r+0xae>
 800bd16:	2300      	movs	r3, #0
 800bd18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd1c:	682f      	ldr	r7, [r5, #0]
 800bd1e:	6a21      	ldr	r1, [r4, #32]
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	d030      	beq.n	800bd86 <__sflush_r+0x92>
 800bd24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	0759      	lsls	r1, r3, #29
 800bd2a:	d505      	bpl.n	800bd38 <__sflush_r+0x44>
 800bd2c:	6863      	ldr	r3, [r4, #4]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd32:	b10b      	cbz	r3, 800bd38 <__sflush_r+0x44>
 800bd34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd36:	1ad2      	subs	r2, r2, r3
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd3c:	6a21      	ldr	r1, [r4, #32]
 800bd3e:	4628      	mov	r0, r5
 800bd40:	47b0      	blx	r6
 800bd42:	1c43      	adds	r3, r0, #1
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	d106      	bne.n	800bd56 <__sflush_r+0x62>
 800bd48:	6829      	ldr	r1, [r5, #0]
 800bd4a:	291d      	cmp	r1, #29
 800bd4c:	d82b      	bhi.n	800bda6 <__sflush_r+0xb2>
 800bd4e:	4a2a      	ldr	r2, [pc, #168]	@ (800bdf8 <__sflush_r+0x104>)
 800bd50:	40ca      	lsrs	r2, r1
 800bd52:	07d6      	lsls	r6, r2, #31
 800bd54:	d527      	bpl.n	800bda6 <__sflush_r+0xb2>
 800bd56:	2200      	movs	r2, #0
 800bd58:	6062      	str	r2, [r4, #4]
 800bd5a:	04d9      	lsls	r1, r3, #19
 800bd5c:	6922      	ldr	r2, [r4, #16]
 800bd5e:	6022      	str	r2, [r4, #0]
 800bd60:	d504      	bpl.n	800bd6c <__sflush_r+0x78>
 800bd62:	1c42      	adds	r2, r0, #1
 800bd64:	d101      	bne.n	800bd6a <__sflush_r+0x76>
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	b903      	cbnz	r3, 800bd6c <__sflush_r+0x78>
 800bd6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd6e:	602f      	str	r7, [r5, #0]
 800bd70:	b1b9      	cbz	r1, 800bda2 <__sflush_r+0xae>
 800bd72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd76:	4299      	cmp	r1, r3
 800bd78:	d002      	beq.n	800bd80 <__sflush_r+0x8c>
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f7ff fb40 	bl	800b400 <_free_r>
 800bd80:	2300      	movs	r3, #0
 800bd82:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd84:	e00d      	b.n	800bda2 <__sflush_r+0xae>
 800bd86:	2301      	movs	r3, #1
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b0      	blx	r6
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	1c50      	adds	r0, r2, #1
 800bd90:	d1c9      	bne.n	800bd26 <__sflush_r+0x32>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d0c6      	beq.n	800bd26 <__sflush_r+0x32>
 800bd98:	2b1d      	cmp	r3, #29
 800bd9a:	d001      	beq.n	800bda0 <__sflush_r+0xac>
 800bd9c:	2b16      	cmp	r3, #22
 800bd9e:	d11e      	bne.n	800bdde <__sflush_r+0xea>
 800bda0:	602f      	str	r7, [r5, #0]
 800bda2:	2000      	movs	r0, #0
 800bda4:	e022      	b.n	800bdec <__sflush_r+0xf8>
 800bda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdaa:	b21b      	sxth	r3, r3
 800bdac:	e01b      	b.n	800bde6 <__sflush_r+0xf2>
 800bdae:	690f      	ldr	r7, [r1, #16]
 800bdb0:	2f00      	cmp	r7, #0
 800bdb2:	d0f6      	beq.n	800bda2 <__sflush_r+0xae>
 800bdb4:	0793      	lsls	r3, r2, #30
 800bdb6:	680e      	ldr	r6, [r1, #0]
 800bdb8:	bf08      	it	eq
 800bdba:	694b      	ldreq	r3, [r1, #20]
 800bdbc:	600f      	str	r7, [r1, #0]
 800bdbe:	bf18      	it	ne
 800bdc0:	2300      	movne	r3, #0
 800bdc2:	eba6 0807 	sub.w	r8, r6, r7
 800bdc6:	608b      	str	r3, [r1, #8]
 800bdc8:	f1b8 0f00 	cmp.w	r8, #0
 800bdcc:	dde9      	ble.n	800bda2 <__sflush_r+0xae>
 800bdce:	6a21      	ldr	r1, [r4, #32]
 800bdd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdd2:	4643      	mov	r3, r8
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	47b0      	blx	r6
 800bdda:	2800      	cmp	r0, #0
 800bddc:	dc08      	bgt.n	800bdf0 <__sflush_r+0xfc>
 800bdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bde6:	81a3      	strh	r3, [r4, #12]
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf0:	4407      	add	r7, r0
 800bdf2:	eba8 0800 	sub.w	r8, r8, r0
 800bdf6:	e7e7      	b.n	800bdc8 <__sflush_r+0xd4>
 800bdf8:	20400001 	.word	0x20400001

0800bdfc <_fflush_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	690b      	ldr	r3, [r1, #16]
 800be00:	4605      	mov	r5, r0
 800be02:	460c      	mov	r4, r1
 800be04:	b913      	cbnz	r3, 800be0c <_fflush_r+0x10>
 800be06:	2500      	movs	r5, #0
 800be08:	4628      	mov	r0, r5
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	b118      	cbz	r0, 800be16 <_fflush_r+0x1a>
 800be0e:	6a03      	ldr	r3, [r0, #32]
 800be10:	b90b      	cbnz	r3, 800be16 <_fflush_r+0x1a>
 800be12:	f7fe fb95 	bl	800a540 <__sinit>
 800be16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0f3      	beq.n	800be06 <_fflush_r+0xa>
 800be1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be20:	07d0      	lsls	r0, r2, #31
 800be22:	d404      	bmi.n	800be2e <_fflush_r+0x32>
 800be24:	0599      	lsls	r1, r3, #22
 800be26:	d402      	bmi.n	800be2e <_fflush_r+0x32>
 800be28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be2a:	f7fe fc80 	bl	800a72e <__retarget_lock_acquire_recursive>
 800be2e:	4628      	mov	r0, r5
 800be30:	4621      	mov	r1, r4
 800be32:	f7ff ff5f 	bl	800bcf4 <__sflush_r>
 800be36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be38:	07da      	lsls	r2, r3, #31
 800be3a:	4605      	mov	r5, r0
 800be3c:	d4e4      	bmi.n	800be08 <_fflush_r+0xc>
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	059b      	lsls	r3, r3, #22
 800be42:	d4e1      	bmi.n	800be08 <_fflush_r+0xc>
 800be44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be46:	f7fe fc73 	bl	800a730 <__retarget_lock_release_recursive>
 800be4a:	e7dd      	b.n	800be08 <_fflush_r+0xc>

0800be4c <_sbrk_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	4d06      	ldr	r5, [pc, #24]	@ (800be68 <_sbrk_r+0x1c>)
 800be50:	2300      	movs	r3, #0
 800be52:	4604      	mov	r4, r0
 800be54:	4608      	mov	r0, r1
 800be56:	602b      	str	r3, [r5, #0]
 800be58:	f7f8 f92c 	bl	80040b4 <_sbrk>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d102      	bne.n	800be66 <_sbrk_r+0x1a>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	b103      	cbz	r3, 800be66 <_sbrk_r+0x1a>
 800be64:	6023      	str	r3, [r4, #0]
 800be66:	bd38      	pop	{r3, r4, r5, pc}
 800be68:	20000e88 	.word	0x20000e88

0800be6c <__assert_func>:
 800be6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be6e:	4614      	mov	r4, r2
 800be70:	461a      	mov	r2, r3
 800be72:	4b09      	ldr	r3, [pc, #36]	@ (800be98 <__assert_func+0x2c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4605      	mov	r5, r0
 800be78:	68d8      	ldr	r0, [r3, #12]
 800be7a:	b14c      	cbz	r4, 800be90 <__assert_func+0x24>
 800be7c:	4b07      	ldr	r3, [pc, #28]	@ (800be9c <__assert_func+0x30>)
 800be7e:	9100      	str	r1, [sp, #0]
 800be80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be84:	4906      	ldr	r1, [pc, #24]	@ (800bea0 <__assert_func+0x34>)
 800be86:	462b      	mov	r3, r5
 800be88:	f000 f842 	bl	800bf10 <fiprintf>
 800be8c:	f000 f852 	bl	800bf34 <abort>
 800be90:	4b04      	ldr	r3, [pc, #16]	@ (800bea4 <__assert_func+0x38>)
 800be92:	461c      	mov	r4, r3
 800be94:	e7f3      	b.n	800be7e <__assert_func+0x12>
 800be96:	bf00      	nop
 800be98:	2000001c 	.word	0x2000001c
 800be9c:	0800cadc 	.word	0x0800cadc
 800bea0:	0800cae9 	.word	0x0800cae9
 800bea4:	0800cb17 	.word	0x0800cb17

0800bea8 <_calloc_r>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	fba1 5402 	umull	r5, r4, r1, r2
 800beae:	b934      	cbnz	r4, 800bebe <_calloc_r+0x16>
 800beb0:	4629      	mov	r1, r5
 800beb2:	f7ff fb19 	bl	800b4e8 <_malloc_r>
 800beb6:	4606      	mov	r6, r0
 800beb8:	b928      	cbnz	r0, 800bec6 <_calloc_r+0x1e>
 800beba:	4630      	mov	r0, r6
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	220c      	movs	r2, #12
 800bec0:	6002      	str	r2, [r0, #0]
 800bec2:	2600      	movs	r6, #0
 800bec4:	e7f9      	b.n	800beba <_calloc_r+0x12>
 800bec6:	462a      	mov	r2, r5
 800bec8:	4621      	mov	r1, r4
 800beca:	f7fe fbb2 	bl	800a632 <memset>
 800bece:	e7f4      	b.n	800beba <_calloc_r+0x12>

0800bed0 <__ascii_mbtowc>:
 800bed0:	b082      	sub	sp, #8
 800bed2:	b901      	cbnz	r1, 800bed6 <__ascii_mbtowc+0x6>
 800bed4:	a901      	add	r1, sp, #4
 800bed6:	b142      	cbz	r2, 800beea <__ascii_mbtowc+0x1a>
 800bed8:	b14b      	cbz	r3, 800beee <__ascii_mbtowc+0x1e>
 800beda:	7813      	ldrb	r3, [r2, #0]
 800bedc:	600b      	str	r3, [r1, #0]
 800bede:	7812      	ldrb	r2, [r2, #0]
 800bee0:	1e10      	subs	r0, r2, #0
 800bee2:	bf18      	it	ne
 800bee4:	2001      	movne	r0, #1
 800bee6:	b002      	add	sp, #8
 800bee8:	4770      	bx	lr
 800beea:	4610      	mov	r0, r2
 800beec:	e7fb      	b.n	800bee6 <__ascii_mbtowc+0x16>
 800beee:	f06f 0001 	mvn.w	r0, #1
 800bef2:	e7f8      	b.n	800bee6 <__ascii_mbtowc+0x16>

0800bef4 <__ascii_wctomb>:
 800bef4:	4603      	mov	r3, r0
 800bef6:	4608      	mov	r0, r1
 800bef8:	b141      	cbz	r1, 800bf0c <__ascii_wctomb+0x18>
 800befa:	2aff      	cmp	r2, #255	@ 0xff
 800befc:	d904      	bls.n	800bf08 <__ascii_wctomb+0x14>
 800befe:	228a      	movs	r2, #138	@ 0x8a
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	f04f 30ff 	mov.w	r0, #4294967295
 800bf06:	4770      	bx	lr
 800bf08:	700a      	strb	r2, [r1, #0]
 800bf0a:	2001      	movs	r0, #1
 800bf0c:	4770      	bx	lr
	...

0800bf10 <fiprintf>:
 800bf10:	b40e      	push	{r1, r2, r3}
 800bf12:	b503      	push	{r0, r1, lr}
 800bf14:	4601      	mov	r1, r0
 800bf16:	ab03      	add	r3, sp, #12
 800bf18:	4805      	ldr	r0, [pc, #20]	@ (800bf30 <fiprintf+0x20>)
 800bf1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1e:	6800      	ldr	r0, [r0, #0]
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	f000 f837 	bl	800bf94 <_vfiprintf_r>
 800bf26:	b002      	add	sp, #8
 800bf28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf2c:	b003      	add	sp, #12
 800bf2e:	4770      	bx	lr
 800bf30:	2000001c 	.word	0x2000001c

0800bf34 <abort>:
 800bf34:	b508      	push	{r3, lr}
 800bf36:	2006      	movs	r0, #6
 800bf38:	f000 fa00 	bl	800c33c <raise>
 800bf3c:	2001      	movs	r0, #1
 800bf3e:	f7f8 f841 	bl	8003fc4 <_exit>

0800bf42 <__sfputc_r>:
 800bf42:	6893      	ldr	r3, [r2, #8]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	b410      	push	{r4}
 800bf4a:	6093      	str	r3, [r2, #8]
 800bf4c:	da08      	bge.n	800bf60 <__sfputc_r+0x1e>
 800bf4e:	6994      	ldr	r4, [r2, #24]
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	db01      	blt.n	800bf58 <__sfputc_r+0x16>
 800bf54:	290a      	cmp	r1, #10
 800bf56:	d103      	bne.n	800bf60 <__sfputc_r+0x1e>
 800bf58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf5c:	f000 b932 	b.w	800c1c4 <__swbuf_r>
 800bf60:	6813      	ldr	r3, [r2, #0]
 800bf62:	1c58      	adds	r0, r3, #1
 800bf64:	6010      	str	r0, [r2, #0]
 800bf66:	7019      	strb	r1, [r3, #0]
 800bf68:	4608      	mov	r0, r1
 800bf6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <__sfputs_r>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	4614      	mov	r4, r2
 800bf78:	18d5      	adds	r5, r2, r3
 800bf7a:	42ac      	cmp	r4, r5
 800bf7c:	d101      	bne.n	800bf82 <__sfputs_r+0x12>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e007      	b.n	800bf92 <__sfputs_r+0x22>
 800bf82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf86:	463a      	mov	r2, r7
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7ff ffda 	bl	800bf42 <__sfputc_r>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	d1f3      	bne.n	800bf7a <__sfputs_r+0xa>
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf94 <_vfiprintf_r>:
 800bf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf98:	460d      	mov	r5, r1
 800bf9a:	b09d      	sub	sp, #116	@ 0x74
 800bf9c:	4614      	mov	r4, r2
 800bf9e:	4698      	mov	r8, r3
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	b118      	cbz	r0, 800bfac <_vfiprintf_r+0x18>
 800bfa4:	6a03      	ldr	r3, [r0, #32]
 800bfa6:	b90b      	cbnz	r3, 800bfac <_vfiprintf_r+0x18>
 800bfa8:	f7fe faca 	bl	800a540 <__sinit>
 800bfac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <_vfiprintf_r+0x2a>
 800bfb2:	89ab      	ldrh	r3, [r5, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <_vfiprintf_r+0x2a>
 800bfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfba:	f7fe fbb8 	bl	800a72e <__retarget_lock_acquire_recursive>
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	071b      	lsls	r3, r3, #28
 800bfc2:	d501      	bpl.n	800bfc8 <_vfiprintf_r+0x34>
 800bfc4:	692b      	ldr	r3, [r5, #16]
 800bfc6:	b99b      	cbnz	r3, 800bff0 <_vfiprintf_r+0x5c>
 800bfc8:	4629      	mov	r1, r5
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f000 f938 	bl	800c240 <__swsetup_r>
 800bfd0:	b170      	cbz	r0, 800bff0 <_vfiprintf_r+0x5c>
 800bfd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfd4:	07dc      	lsls	r4, r3, #31
 800bfd6:	d504      	bpl.n	800bfe2 <_vfiprintf_r+0x4e>
 800bfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfdc:	b01d      	add	sp, #116	@ 0x74
 800bfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe2:	89ab      	ldrh	r3, [r5, #12]
 800bfe4:	0598      	lsls	r0, r3, #22
 800bfe6:	d4f7      	bmi.n	800bfd8 <_vfiprintf_r+0x44>
 800bfe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfea:	f7fe fba1 	bl	800a730 <__retarget_lock_release_recursive>
 800bfee:	e7f3      	b.n	800bfd8 <_vfiprintf_r+0x44>
 800bff0:	2300      	movs	r3, #0
 800bff2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bff4:	2320      	movs	r3, #32
 800bff6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bffa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bffe:	2330      	movs	r3, #48	@ 0x30
 800c000:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c1b0 <_vfiprintf_r+0x21c>
 800c004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c008:	f04f 0901 	mov.w	r9, #1
 800c00c:	4623      	mov	r3, r4
 800c00e:	469a      	mov	sl, r3
 800c010:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c014:	b10a      	cbz	r2, 800c01a <_vfiprintf_r+0x86>
 800c016:	2a25      	cmp	r2, #37	@ 0x25
 800c018:	d1f9      	bne.n	800c00e <_vfiprintf_r+0x7a>
 800c01a:	ebba 0b04 	subs.w	fp, sl, r4
 800c01e:	d00b      	beq.n	800c038 <_vfiprintf_r+0xa4>
 800c020:	465b      	mov	r3, fp
 800c022:	4622      	mov	r2, r4
 800c024:	4629      	mov	r1, r5
 800c026:	4630      	mov	r0, r6
 800c028:	f7ff ffa2 	bl	800bf70 <__sfputs_r>
 800c02c:	3001      	adds	r0, #1
 800c02e:	f000 80a7 	beq.w	800c180 <_vfiprintf_r+0x1ec>
 800c032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c034:	445a      	add	r2, fp
 800c036:	9209      	str	r2, [sp, #36]	@ 0x24
 800c038:	f89a 3000 	ldrb.w	r3, [sl]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f000 809f 	beq.w	800c180 <_vfiprintf_r+0x1ec>
 800c042:	2300      	movs	r3, #0
 800c044:	f04f 32ff 	mov.w	r2, #4294967295
 800c048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c04c:	f10a 0a01 	add.w	sl, sl, #1
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	9307      	str	r3, [sp, #28]
 800c054:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c058:	931a      	str	r3, [sp, #104]	@ 0x68
 800c05a:	4654      	mov	r4, sl
 800c05c:	2205      	movs	r2, #5
 800c05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c062:	4853      	ldr	r0, [pc, #332]	@ (800c1b0 <_vfiprintf_r+0x21c>)
 800c064:	f7f4 f8d4 	bl	8000210 <memchr>
 800c068:	9a04      	ldr	r2, [sp, #16]
 800c06a:	b9d8      	cbnz	r0, 800c0a4 <_vfiprintf_r+0x110>
 800c06c:	06d1      	lsls	r1, r2, #27
 800c06e:	bf44      	itt	mi
 800c070:	2320      	movmi	r3, #32
 800c072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c076:	0713      	lsls	r3, r2, #28
 800c078:	bf44      	itt	mi
 800c07a:	232b      	movmi	r3, #43	@ 0x2b
 800c07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c080:	f89a 3000 	ldrb.w	r3, [sl]
 800c084:	2b2a      	cmp	r3, #42	@ 0x2a
 800c086:	d015      	beq.n	800c0b4 <_vfiprintf_r+0x120>
 800c088:	9a07      	ldr	r2, [sp, #28]
 800c08a:	4654      	mov	r4, sl
 800c08c:	2000      	movs	r0, #0
 800c08e:	f04f 0c0a 	mov.w	ip, #10
 800c092:	4621      	mov	r1, r4
 800c094:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c098:	3b30      	subs	r3, #48	@ 0x30
 800c09a:	2b09      	cmp	r3, #9
 800c09c:	d94b      	bls.n	800c136 <_vfiprintf_r+0x1a2>
 800c09e:	b1b0      	cbz	r0, 800c0ce <_vfiprintf_r+0x13a>
 800c0a0:	9207      	str	r2, [sp, #28]
 800c0a2:	e014      	b.n	800c0ce <_vfiprintf_r+0x13a>
 800c0a4:	eba0 0308 	sub.w	r3, r0, r8
 800c0a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	46a2      	mov	sl, r4
 800c0b2:	e7d2      	b.n	800c05a <_vfiprintf_r+0xc6>
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	1d19      	adds	r1, r3, #4
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	9103      	str	r1, [sp, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	bfbb      	ittet	lt
 800c0c0:	425b      	neglt	r3, r3
 800c0c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0c6:	9307      	strge	r3, [sp, #28]
 800c0c8:	9307      	strlt	r3, [sp, #28]
 800c0ca:	bfb8      	it	lt
 800c0cc:	9204      	strlt	r2, [sp, #16]
 800c0ce:	7823      	ldrb	r3, [r4, #0]
 800c0d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0d2:	d10a      	bne.n	800c0ea <_vfiprintf_r+0x156>
 800c0d4:	7863      	ldrb	r3, [r4, #1]
 800c0d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0d8:	d132      	bne.n	800c140 <_vfiprintf_r+0x1ac>
 800c0da:	9b03      	ldr	r3, [sp, #12]
 800c0dc:	1d1a      	adds	r2, r3, #4
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	9203      	str	r2, [sp, #12]
 800c0e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0e6:	3402      	adds	r4, #2
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c1c0 <_vfiprintf_r+0x22c>
 800c0ee:	7821      	ldrb	r1, [r4, #0]
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	4650      	mov	r0, sl
 800c0f4:	f7f4 f88c 	bl	8000210 <memchr>
 800c0f8:	b138      	cbz	r0, 800c10a <_vfiprintf_r+0x176>
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	eba0 000a 	sub.w	r0, r0, sl
 800c100:	2240      	movs	r2, #64	@ 0x40
 800c102:	4082      	lsls	r2, r0
 800c104:	4313      	orrs	r3, r2
 800c106:	3401      	adds	r4, #1
 800c108:	9304      	str	r3, [sp, #16]
 800c10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10e:	4829      	ldr	r0, [pc, #164]	@ (800c1b4 <_vfiprintf_r+0x220>)
 800c110:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c114:	2206      	movs	r2, #6
 800c116:	f7f4 f87b 	bl	8000210 <memchr>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d03f      	beq.n	800c19e <_vfiprintf_r+0x20a>
 800c11e:	4b26      	ldr	r3, [pc, #152]	@ (800c1b8 <_vfiprintf_r+0x224>)
 800c120:	bb1b      	cbnz	r3, 800c16a <_vfiprintf_r+0x1d6>
 800c122:	9b03      	ldr	r3, [sp, #12]
 800c124:	3307      	adds	r3, #7
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	3308      	adds	r3, #8
 800c12c:	9303      	str	r3, [sp, #12]
 800c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c130:	443b      	add	r3, r7
 800c132:	9309      	str	r3, [sp, #36]	@ 0x24
 800c134:	e76a      	b.n	800c00c <_vfiprintf_r+0x78>
 800c136:	fb0c 3202 	mla	r2, ip, r2, r3
 800c13a:	460c      	mov	r4, r1
 800c13c:	2001      	movs	r0, #1
 800c13e:	e7a8      	b.n	800c092 <_vfiprintf_r+0xfe>
 800c140:	2300      	movs	r3, #0
 800c142:	3401      	adds	r4, #1
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	4619      	mov	r1, r3
 800c148:	f04f 0c0a 	mov.w	ip, #10
 800c14c:	4620      	mov	r0, r4
 800c14e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c152:	3a30      	subs	r2, #48	@ 0x30
 800c154:	2a09      	cmp	r2, #9
 800c156:	d903      	bls.n	800c160 <_vfiprintf_r+0x1cc>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0c6      	beq.n	800c0ea <_vfiprintf_r+0x156>
 800c15c:	9105      	str	r1, [sp, #20]
 800c15e:	e7c4      	b.n	800c0ea <_vfiprintf_r+0x156>
 800c160:	fb0c 2101 	mla	r1, ip, r1, r2
 800c164:	4604      	mov	r4, r0
 800c166:	2301      	movs	r3, #1
 800c168:	e7f0      	b.n	800c14c <_vfiprintf_r+0x1b8>
 800c16a:	ab03      	add	r3, sp, #12
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	462a      	mov	r2, r5
 800c170:	4b12      	ldr	r3, [pc, #72]	@ (800c1bc <_vfiprintf_r+0x228>)
 800c172:	a904      	add	r1, sp, #16
 800c174:	4630      	mov	r0, r6
 800c176:	f7fd fda1 	bl	8009cbc <_printf_float>
 800c17a:	4607      	mov	r7, r0
 800c17c:	1c78      	adds	r0, r7, #1
 800c17e:	d1d6      	bne.n	800c12e <_vfiprintf_r+0x19a>
 800c180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c182:	07d9      	lsls	r1, r3, #31
 800c184:	d405      	bmi.n	800c192 <_vfiprintf_r+0x1fe>
 800c186:	89ab      	ldrh	r3, [r5, #12]
 800c188:	059a      	lsls	r2, r3, #22
 800c18a:	d402      	bmi.n	800c192 <_vfiprintf_r+0x1fe>
 800c18c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c18e:	f7fe facf 	bl	800a730 <__retarget_lock_release_recursive>
 800c192:	89ab      	ldrh	r3, [r5, #12]
 800c194:	065b      	lsls	r3, r3, #25
 800c196:	f53f af1f 	bmi.w	800bfd8 <_vfiprintf_r+0x44>
 800c19a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c19c:	e71e      	b.n	800bfdc <_vfiprintf_r+0x48>
 800c19e:	ab03      	add	r3, sp, #12
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	4b05      	ldr	r3, [pc, #20]	@ (800c1bc <_vfiprintf_r+0x228>)
 800c1a6:	a904      	add	r1, sp, #16
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7fe f81f 	bl	800a1ec <_printf_i>
 800c1ae:	e7e4      	b.n	800c17a <_vfiprintf_r+0x1e6>
 800c1b0:	0800cb18 	.word	0x0800cb18
 800c1b4:	0800cb22 	.word	0x0800cb22
 800c1b8:	08009cbd 	.word	0x08009cbd
 800c1bc:	0800bf71 	.word	0x0800bf71
 800c1c0:	0800cb1e 	.word	0x0800cb1e

0800c1c4 <__swbuf_r>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	460e      	mov	r6, r1
 800c1c8:	4614      	mov	r4, r2
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	b118      	cbz	r0, 800c1d6 <__swbuf_r+0x12>
 800c1ce:	6a03      	ldr	r3, [r0, #32]
 800c1d0:	b90b      	cbnz	r3, 800c1d6 <__swbuf_r+0x12>
 800c1d2:	f7fe f9b5 	bl	800a540 <__sinit>
 800c1d6:	69a3      	ldr	r3, [r4, #24]
 800c1d8:	60a3      	str	r3, [r4, #8]
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	071a      	lsls	r2, r3, #28
 800c1de:	d501      	bpl.n	800c1e4 <__swbuf_r+0x20>
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	b943      	cbnz	r3, 800c1f6 <__swbuf_r+0x32>
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	f000 f82a 	bl	800c240 <__swsetup_r>
 800c1ec:	b118      	cbz	r0, 800c1f6 <__swbuf_r+0x32>
 800c1ee:	f04f 37ff 	mov.w	r7, #4294967295
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	6922      	ldr	r2, [r4, #16]
 800c1fa:	1a98      	subs	r0, r3, r2
 800c1fc:	6963      	ldr	r3, [r4, #20]
 800c1fe:	b2f6      	uxtb	r6, r6
 800c200:	4283      	cmp	r3, r0
 800c202:	4637      	mov	r7, r6
 800c204:	dc05      	bgt.n	800c212 <__swbuf_r+0x4e>
 800c206:	4621      	mov	r1, r4
 800c208:	4628      	mov	r0, r5
 800c20a:	f7ff fdf7 	bl	800bdfc <_fflush_r>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d1ed      	bne.n	800c1ee <__swbuf_r+0x2a>
 800c212:	68a3      	ldr	r3, [r4, #8]
 800c214:	3b01      	subs	r3, #1
 800c216:	60a3      	str	r3, [r4, #8]
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	6022      	str	r2, [r4, #0]
 800c21e:	701e      	strb	r6, [r3, #0]
 800c220:	6962      	ldr	r2, [r4, #20]
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	429a      	cmp	r2, r3
 800c226:	d004      	beq.n	800c232 <__swbuf_r+0x6e>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	07db      	lsls	r3, r3, #31
 800c22c:	d5e1      	bpl.n	800c1f2 <__swbuf_r+0x2e>
 800c22e:	2e0a      	cmp	r6, #10
 800c230:	d1df      	bne.n	800c1f2 <__swbuf_r+0x2e>
 800c232:	4621      	mov	r1, r4
 800c234:	4628      	mov	r0, r5
 800c236:	f7ff fde1 	bl	800bdfc <_fflush_r>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d0d9      	beq.n	800c1f2 <__swbuf_r+0x2e>
 800c23e:	e7d6      	b.n	800c1ee <__swbuf_r+0x2a>

0800c240 <__swsetup_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4b29      	ldr	r3, [pc, #164]	@ (800c2e8 <__swsetup_r+0xa8>)
 800c244:	4605      	mov	r5, r0
 800c246:	6818      	ldr	r0, [r3, #0]
 800c248:	460c      	mov	r4, r1
 800c24a:	b118      	cbz	r0, 800c254 <__swsetup_r+0x14>
 800c24c:	6a03      	ldr	r3, [r0, #32]
 800c24e:	b90b      	cbnz	r3, 800c254 <__swsetup_r+0x14>
 800c250:	f7fe f976 	bl	800a540 <__sinit>
 800c254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c258:	0719      	lsls	r1, r3, #28
 800c25a:	d422      	bmi.n	800c2a2 <__swsetup_r+0x62>
 800c25c:	06da      	lsls	r2, r3, #27
 800c25e:	d407      	bmi.n	800c270 <__swsetup_r+0x30>
 800c260:	2209      	movs	r2, #9
 800c262:	602a      	str	r2, [r5, #0]
 800c264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	e033      	b.n	800c2d8 <__swsetup_r+0x98>
 800c270:	0758      	lsls	r0, r3, #29
 800c272:	d512      	bpl.n	800c29a <__swsetup_r+0x5a>
 800c274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c276:	b141      	cbz	r1, 800c28a <__swsetup_r+0x4a>
 800c278:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c27c:	4299      	cmp	r1, r3
 800c27e:	d002      	beq.n	800c286 <__swsetup_r+0x46>
 800c280:	4628      	mov	r0, r5
 800c282:	f7ff f8bd 	bl	800b400 <_free_r>
 800c286:	2300      	movs	r3, #0
 800c288:	6363      	str	r3, [r4, #52]	@ 0x34
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	2300      	movs	r3, #0
 800c294:	6063      	str	r3, [r4, #4]
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	f043 0308 	orr.w	r3, r3, #8
 800c2a0:	81a3      	strh	r3, [r4, #12]
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	b94b      	cbnz	r3, 800c2ba <__swsetup_r+0x7a>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2b0:	d003      	beq.n	800c2ba <__swsetup_r+0x7a>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f000 f883 	bl	800c3c0 <__smakebuf_r>
 800c2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2be:	f013 0201 	ands.w	r2, r3, #1
 800c2c2:	d00a      	beq.n	800c2da <__swsetup_r+0x9a>
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	60a2      	str	r2, [r4, #8]
 800c2c8:	6962      	ldr	r2, [r4, #20]
 800c2ca:	4252      	negs	r2, r2
 800c2cc:	61a2      	str	r2, [r4, #24]
 800c2ce:	6922      	ldr	r2, [r4, #16]
 800c2d0:	b942      	cbnz	r2, 800c2e4 <__swsetup_r+0xa4>
 800c2d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2d6:	d1c5      	bne.n	800c264 <__swsetup_r+0x24>
 800c2d8:	bd38      	pop	{r3, r4, r5, pc}
 800c2da:	0799      	lsls	r1, r3, #30
 800c2dc:	bf58      	it	pl
 800c2de:	6962      	ldrpl	r2, [r4, #20]
 800c2e0:	60a2      	str	r2, [r4, #8]
 800c2e2:	e7f4      	b.n	800c2ce <__swsetup_r+0x8e>
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e7f7      	b.n	800c2d8 <__swsetup_r+0x98>
 800c2e8:	2000001c 	.word	0x2000001c

0800c2ec <_raise_r>:
 800c2ec:	291f      	cmp	r1, #31
 800c2ee:	b538      	push	{r3, r4, r5, lr}
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	d904      	bls.n	800c300 <_raise_r+0x14>
 800c2f6:	2316      	movs	r3, #22
 800c2f8:	6003      	str	r3, [r0, #0]
 800c2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c302:	b112      	cbz	r2, 800c30a <_raise_r+0x1e>
 800c304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c308:	b94b      	cbnz	r3, 800c31e <_raise_r+0x32>
 800c30a:	4628      	mov	r0, r5
 800c30c:	f000 f830 	bl	800c370 <_getpid_r>
 800c310:	4622      	mov	r2, r4
 800c312:	4601      	mov	r1, r0
 800c314:	4628      	mov	r0, r5
 800c316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c31a:	f000 b817 	b.w	800c34c <_kill_r>
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d00a      	beq.n	800c338 <_raise_r+0x4c>
 800c322:	1c59      	adds	r1, r3, #1
 800c324:	d103      	bne.n	800c32e <_raise_r+0x42>
 800c326:	2316      	movs	r3, #22
 800c328:	6003      	str	r3, [r0, #0]
 800c32a:	2001      	movs	r0, #1
 800c32c:	e7e7      	b.n	800c2fe <_raise_r+0x12>
 800c32e:	2100      	movs	r1, #0
 800c330:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c334:	4620      	mov	r0, r4
 800c336:	4798      	blx	r3
 800c338:	2000      	movs	r0, #0
 800c33a:	e7e0      	b.n	800c2fe <_raise_r+0x12>

0800c33c <raise>:
 800c33c:	4b02      	ldr	r3, [pc, #8]	@ (800c348 <raise+0xc>)
 800c33e:	4601      	mov	r1, r0
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	f7ff bfd3 	b.w	800c2ec <_raise_r>
 800c346:	bf00      	nop
 800c348:	2000001c 	.word	0x2000001c

0800c34c <_kill_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d07      	ldr	r5, [pc, #28]	@ (800c36c <_kill_r+0x20>)
 800c350:	2300      	movs	r3, #0
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	4611      	mov	r1, r2
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	f7f7 fe23 	bl	8003fa4 <_kill>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	d102      	bne.n	800c368 <_kill_r+0x1c>
 800c362:	682b      	ldr	r3, [r5, #0]
 800c364:	b103      	cbz	r3, 800c368 <_kill_r+0x1c>
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	bd38      	pop	{r3, r4, r5, pc}
 800c36a:	bf00      	nop
 800c36c:	20000e88 	.word	0x20000e88

0800c370 <_getpid_r>:
 800c370:	f7f7 be10 	b.w	8003f94 <_getpid>

0800c374 <__swhatbuf_r>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	460c      	mov	r4, r1
 800c378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37c:	2900      	cmp	r1, #0
 800c37e:	b096      	sub	sp, #88	@ 0x58
 800c380:	4615      	mov	r5, r2
 800c382:	461e      	mov	r6, r3
 800c384:	da0d      	bge.n	800c3a2 <__swhatbuf_r+0x2e>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c38c:	f04f 0100 	mov.w	r1, #0
 800c390:	bf14      	ite	ne
 800c392:	2340      	movne	r3, #64	@ 0x40
 800c394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c398:	2000      	movs	r0, #0
 800c39a:	6031      	str	r1, [r6, #0]
 800c39c:	602b      	str	r3, [r5, #0]
 800c39e:	b016      	add	sp, #88	@ 0x58
 800c3a0:	bd70      	pop	{r4, r5, r6, pc}
 800c3a2:	466a      	mov	r2, sp
 800c3a4:	f000 f848 	bl	800c438 <_fstat_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	dbec      	blt.n	800c386 <__swhatbuf_r+0x12>
 800c3ac:	9901      	ldr	r1, [sp, #4]
 800c3ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3b6:	4259      	negs	r1, r3
 800c3b8:	4159      	adcs	r1, r3
 800c3ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3be:	e7eb      	b.n	800c398 <__swhatbuf_r+0x24>

0800c3c0 <__smakebuf_r>:
 800c3c0:	898b      	ldrh	r3, [r1, #12]
 800c3c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c4:	079d      	lsls	r5, r3, #30
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	d507      	bpl.n	800c3dc <__smakebuf_r+0x1c>
 800c3cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	6123      	str	r3, [r4, #16]
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	6163      	str	r3, [r4, #20]
 800c3d8:	b003      	add	sp, #12
 800c3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3dc:	ab01      	add	r3, sp, #4
 800c3de:	466a      	mov	r2, sp
 800c3e0:	f7ff ffc8 	bl	800c374 <__swhatbuf_r>
 800c3e4:	9f00      	ldr	r7, [sp, #0]
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	4639      	mov	r1, r7
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f7ff f87c 	bl	800b4e8 <_malloc_r>
 800c3f0:	b948      	cbnz	r0, 800c406 <__smakebuf_r+0x46>
 800c3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f6:	059a      	lsls	r2, r3, #22
 800c3f8:	d4ee      	bmi.n	800c3d8 <__smakebuf_r+0x18>
 800c3fa:	f023 0303 	bic.w	r3, r3, #3
 800c3fe:	f043 0302 	orr.w	r3, r3, #2
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	e7e2      	b.n	800c3cc <__smakebuf_r+0xc>
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	6020      	str	r0, [r4, #0]
 800c40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	9b01      	ldr	r3, [sp, #4]
 800c412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c416:	b15b      	cbz	r3, 800c430 <__smakebuf_r+0x70>
 800c418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c41c:	4630      	mov	r0, r6
 800c41e:	f000 f81d 	bl	800c45c <_isatty_r>
 800c422:	b128      	cbz	r0, 800c430 <__smakebuf_r+0x70>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	f043 0301 	orr.w	r3, r3, #1
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	431d      	orrs	r5, r3
 800c434:	81a5      	strh	r5, [r4, #12]
 800c436:	e7cf      	b.n	800c3d8 <__smakebuf_r+0x18>

0800c438 <_fstat_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4d07      	ldr	r5, [pc, #28]	@ (800c458 <_fstat_r+0x20>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	4611      	mov	r1, r2
 800c444:	602b      	str	r3, [r5, #0]
 800c446:	f7f7 fe0d 	bl	8004064 <_fstat>
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	d102      	bne.n	800c454 <_fstat_r+0x1c>
 800c44e:	682b      	ldr	r3, [r5, #0]
 800c450:	b103      	cbz	r3, 800c454 <_fstat_r+0x1c>
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	bd38      	pop	{r3, r4, r5, pc}
 800c456:	bf00      	nop
 800c458:	20000e88 	.word	0x20000e88

0800c45c <_isatty_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4d06      	ldr	r5, [pc, #24]	@ (800c478 <_isatty_r+0x1c>)
 800c460:	2300      	movs	r3, #0
 800c462:	4604      	mov	r4, r0
 800c464:	4608      	mov	r0, r1
 800c466:	602b      	str	r3, [r5, #0]
 800c468:	f7f7 fe0c 	bl	8004084 <_isatty>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d102      	bne.n	800c476 <_isatty_r+0x1a>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	b103      	cbz	r3, 800c476 <_isatty_r+0x1a>
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	20000e88 	.word	0x20000e88

0800c47c <fmaxf>:
 800c47c:	b508      	push	{r3, lr}
 800c47e:	ed2d 8b02 	vpush	{d8}
 800c482:	eeb0 8a40 	vmov.f32	s16, s0
 800c486:	eef0 8a60 	vmov.f32	s17, s1
 800c48a:	f000 f831 	bl	800c4f0 <__fpclassifyf>
 800c48e:	b930      	cbnz	r0, 800c49e <fmaxf+0x22>
 800c490:	eeb0 8a68 	vmov.f32	s16, s17
 800c494:	eeb0 0a48 	vmov.f32	s0, s16
 800c498:	ecbd 8b02 	vpop	{d8}
 800c49c:	bd08      	pop	{r3, pc}
 800c49e:	eeb0 0a68 	vmov.f32	s0, s17
 800c4a2:	f000 f825 	bl	800c4f0 <__fpclassifyf>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d0f4      	beq.n	800c494 <fmaxf+0x18>
 800c4aa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b2:	dded      	ble.n	800c490 <fmaxf+0x14>
 800c4b4:	e7ee      	b.n	800c494 <fmaxf+0x18>

0800c4b6 <fminf>:
 800c4b6:	b508      	push	{r3, lr}
 800c4b8:	ed2d 8b02 	vpush	{d8}
 800c4bc:	eeb0 8a40 	vmov.f32	s16, s0
 800c4c0:	eef0 8a60 	vmov.f32	s17, s1
 800c4c4:	f000 f814 	bl	800c4f0 <__fpclassifyf>
 800c4c8:	b930      	cbnz	r0, 800c4d8 <fminf+0x22>
 800c4ca:	eeb0 8a68 	vmov.f32	s16, s17
 800c4ce:	eeb0 0a48 	vmov.f32	s0, s16
 800c4d2:	ecbd 8b02 	vpop	{d8}
 800c4d6:	bd08      	pop	{r3, pc}
 800c4d8:	eeb0 0a68 	vmov.f32	s0, s17
 800c4dc:	f000 f808 	bl	800c4f0 <__fpclassifyf>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d0f4      	beq.n	800c4ce <fminf+0x18>
 800c4e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ec:	d5ed      	bpl.n	800c4ca <fminf+0x14>
 800c4ee:	e7ee      	b.n	800c4ce <fminf+0x18>

0800c4f0 <__fpclassifyf>:
 800c4f0:	ee10 3a10 	vmov	r3, s0
 800c4f4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c4f8:	d00d      	beq.n	800c516 <__fpclassifyf+0x26>
 800c4fa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c4fe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c502:	d30a      	bcc.n	800c51a <__fpclassifyf+0x2a>
 800c504:	4b07      	ldr	r3, [pc, #28]	@ (800c524 <__fpclassifyf+0x34>)
 800c506:	1e42      	subs	r2, r0, #1
 800c508:	429a      	cmp	r2, r3
 800c50a:	d908      	bls.n	800c51e <__fpclassifyf+0x2e>
 800c50c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c510:	4258      	negs	r0, r3
 800c512:	4158      	adcs	r0, r3
 800c514:	4770      	bx	lr
 800c516:	2002      	movs	r0, #2
 800c518:	4770      	bx	lr
 800c51a:	2004      	movs	r0, #4
 800c51c:	4770      	bx	lr
 800c51e:	2003      	movs	r0, #3
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	007ffffe 	.word	0x007ffffe

0800c528 <_init>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr

0800c534 <_fini>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	bf00      	nop
 800c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53a:	bc08      	pop	{r3}
 800c53c:	469e      	mov	lr, r3
 800c53e:	4770      	bx	lr
