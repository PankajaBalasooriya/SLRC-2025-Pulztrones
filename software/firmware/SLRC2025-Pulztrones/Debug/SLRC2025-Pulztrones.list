
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800783c  0800783c  0000883c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ac  080078ac  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  080078ac  080078ac  000088ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b4  080078b4  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b4  080078b4  000088b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078b8  080078b8  000088b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080078bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  2000005c  08007918  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08007918  00009740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001317e  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aad  00000000  00000000  0001c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0001ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e32  00000000  00000000  0001fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c65  00000000  00000000  00020cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f86  00000000  00000000  00024957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e108c  00000000  00000000  0003c8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  0011d9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00122c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007824 	.word	0x08007824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08007824 	.word	0x08007824

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e06:	b21b      	sxth	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <getLeftEncoderCounts+0x14>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	b21b      	sxth	r3, r3
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40010000 	.word	0x40010000

08000e2c <resetEncoders>:

void resetEncoders() {
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <resetEncoders+0x1c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8000e36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40010000 	.word	0x40010000

08000e4c <HAL_UART_RxCpltCallback>:
    // Transmit the string over UART
    HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)  // Check if it's UART6
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_UART_RxCpltCallback+0x2c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d107      	bne.n	8000e6e <HAL_UART_RxCpltCallback+0x22>
    {
        data_received = 1;  // Set flag to indicate new data
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_UART_RxCpltCallback+0x30>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Restart reception
 8000e64:	2232      	movs	r2, #50	@ 0x32
 8000e66:	4906      	ldr	r1, [pc, #24]	@ (8000e80 <HAL_UART_RxCpltCallback+0x34>)
 8000e68:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <HAL_UART_RxCpltCallback+0x38>)
 8000e6a:	f005 f8ef 	bl	800604c <HAL_UART_Receive_IT>
    }
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	200003aa 	.word	0x200003aa
 8000e80:	20000378 	.word	0x20000378
 8000e84:	200002d0 	.word	0x200002d0

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f001 fae1 	bl	8002454 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f87d 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fb5f 	bl	8001558 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9a:	f000 fb3d 	bl	8001518 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e9e:	f000 fabd 	bl	800141c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ea2:	f000 f995 	bl	80011d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ea6:	f000 f9eb 	bl	8001280 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000eaa:	f000 f963 	bl	8001174 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000eae:	f000 fadf 	bl	8001470 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000eb2:	f000 fb07 	bl	80014c4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000eb6:	f000 f8dd 	bl	8001074 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eba:	f000 f92d 	bl	8001118 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ebe:	f000 fa33 	bl	8001328 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ec2:	213c      	movs	r1, #60	@ 0x3c
 8000ec4:	4825      	ldr	r0, [pc, #148]	@ (8000f5c <main+0xd4>)
 8000ec6:	f004 fc23 	bl	8005710 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000eca:	213c      	movs	r1, #60	@ 0x3c
 8000ecc:	4824      	ldr	r0, [pc, #144]	@ (8000f60 <main+0xd8>)
 8000ece:	f004 fc1f 	bl	8005710 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4823      	ldr	r0, [pc, #140]	@ (8000f64 <main+0xdc>)
 8000ed6:	f004 faad 	bl	8005434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000eda:	2104      	movs	r1, #4
 8000edc:	4821      	ldr	r0, [pc, #132]	@ (8000f64 <main+0xdc>)
 8000ede:	f004 faa9 	bl	8005434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	481f      	ldr	r0, [pc, #124]	@ (8000f64 <main+0xdc>)
 8000ee6:	f004 faa5 	bl	8005434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000eea:	210c      	movs	r1, #12
 8000eec:	481d      	ldr	r0, [pc, #116]	@ (8000f64 <main+0xdc>)
 8000eee:	f004 faa1 	bl	8005434 <HAL_TIM_PWM_Start>


  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 8000ef2:	2032      	movs	r0, #50	@ 0x32
 8000ef4:	f000 fce6 	bl	80018c4 <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 8000ef8:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8000f68 <main+0xe0>
 8000efc:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8000f6c <main+0xe4>
 8000f00:	491b      	ldr	r1, [pc, #108]	@ (8000f70 <main+0xe8>)
 8000f02:	200b      	movs	r0, #11
 8000f04:	f000 fd02 	bl	800190c <Servo_Register>
 8000f08:	60f8      	str	r0, [r7, #12]
  int arm = Servo_Register(13, "arm", 0, 180);
 8000f0a:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8000f68 <main+0xe0>
 8000f0e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8000f6c <main+0xe4>
 8000f12:	4918      	ldr	r1, [pc, #96]	@ (8000f74 <main+0xec>)
 8000f14:	200d      	movs	r0, #13
 8000f16:	f000 fcf9 	bl	800190c <Servo_Register>
 8000f1a:	60b8      	str	r0, [r7, #8]
  int base = Servo_Register(15, "base", 0, 180);
 8000f1c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f68 <main+0xe0>
 8000f20:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000f6c <main+0xe4>
 8000f24:	4914      	ldr	r1, [pc, #80]	@ (8000f78 <main+0xf0>)
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 fcf0 	bl	800190c <Servo_Register>
 8000f2c:	6078      	str	r0, [r7, #4]

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 8000f2e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000f7c <main+0xf4>
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 fdde 	bl	8001af4 <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 8000f38:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8000f80 <main+0xf8>
 8000f3c:	68b8      	ldr	r0, [r7, #8]
 8000f3e:	f000 fdd9 	bl	8001af4 <Servo_SetAngle>

  // Or use them by name
  Servo_SetAngleByName("base", 150);  // Set base to 120 degrees
 8000f42:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8000f84 <main+0xfc>
 8000f46:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <main+0xf0>)
 8000f48:	f000 fe48 	bl	8001bdc <Servo_SetAngleByName>
  // Reset all servos to center position
  //Servo_ResetAll();


  /*-------------------------------------------------------------------*/
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt
 8000f4c:	2232      	movs	r2, #50	@ 0x32
 8000f4e:	490e      	ldr	r1, [pc, #56]	@ (8000f88 <main+0x100>)
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <main+0x104>)
 8000f52:	f005 f87b 	bl	800604c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f56:	bf00      	nop
 8000f58:	e7fd      	b.n	8000f56 <main+0xce>
 8000f5a:	bf00      	nop
 8000f5c:	20000168 	.word	0x20000168
 8000f60:	200001b0 	.word	0x200001b0
 8000f64:	200001f8 	.word	0x200001f8
 8000f68:	43340000 	.word	0x43340000
 8000f6c:	00000000 	.word	0x00000000
 8000f70:	0800783c 	.word	0x0800783c
 8000f74:	08007844 	.word	0x08007844
 8000f78:	08007848 	.word	0x08007848
 8000f7c:	420c0000 	.word	0x420c0000
 8000f80:	42c80000 	.word	0x42c80000
 8000f84:	43160000 	.word	0x43160000
 8000f88:	20000378 	.word	0x20000378
 8000f8c:	200002d0 	.word	0x200002d0

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	@ 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2234      	movs	r2, #52	@ 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f005 ffac 	bl	8006efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <SystemClock_Config+0xdc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800106c <SystemClock_Config+0xdc>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc4:	4b29      	ldr	r3, [pc, #164]	@ (800106c <SystemClock_Config+0xdc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <SystemClock_Config+0xe0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a25      	ldr	r2, [pc, #148]	@ (8001070 <SystemClock_Config+0xe0>)
 8000fda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <SystemClock_Config+0xe0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001004:	23b4      	movs	r3, #180	@ 0xb4
 8001006:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001010:	2302      	movs	r3, #2
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4618      	mov	r0, r3
 800101a:	f003 ff1d 	bl	8004e58 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001024:	f000 fb1e 	bl	8001664 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001028:	f003 fb7c 	bl	8004724 <HAL_PWREx_EnableOverDrive>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001032:	f000 fb17 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2302      	movs	r3, #2
 800103c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001042:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	2105      	movs	r1, #5
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fbb5 	bl	80047c4 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001060:	f000 fb00 	bl	8001664 <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3750      	adds	r7, #80	@ 0x50
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	463b      	mov	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <MX_ADC1_Init+0x98>)
 8001088:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <MX_ADC1_Init+0x9c>)
 800108a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <MX_ADC1_Init+0x98>)
 800108e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001092:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <MX_ADC1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <MX_ADC1_Init+0x98>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <MX_ADC1_Init+0x98>)
 80010b6:	4a17      	ldr	r2, [pc, #92]	@ (8001114 <MX_ADC1_Init+0xa0>)
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_ADC1_Init+0x98>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_ADC1_Init+0x98>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <MX_ADC1_Init+0x98>)
 80010d6:	f001 fa53 	bl	8002580 <HAL_ADC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e0:	f000 fac0 	bl	8001664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010e4:	230a      	movs	r3, #10
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_ADC1_Init+0x98>)
 80010f6:	f001 fa87 	bl	8002608 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001100:	f000 fab0 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000078 	.word	0x20000078
 8001110:	40012000 	.word	0x40012000
 8001114:	0f000001 	.word	0x0f000001

08001118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <MX_I2C1_Init+0x50>)
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <MX_I2C1_Init+0x54>)
 8001120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001124:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <MX_I2C1_Init+0x58>)
 8001126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001136:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800113a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001156:	f002 fac1 	bl	80036dc <HAL_I2C_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001160:	f000 fa80 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000c0 	.word	0x200000c0
 800116c:	40005400 	.word	0x40005400
 8001170:	000186a0 	.word	0x000186a0

08001174 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C2_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <MX_I2C2_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C2_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_I2C2_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C2_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_I2C2_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_I2C2_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_I2C2_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_I2C2_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_I2C2_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_I2C2_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_I2C2_Init+0x50>)
 80011b2:	f002 fa93 	bl	80036dc <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 fa52 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000114 	.word	0x20000114
 80011c8:	40005800 	.word	0x40005800
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2224      	movs	r2, #36	@ 0x24
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 fe8c 	bl	8006efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_TIM1_Init+0xa8>)
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <MX_TIM1_Init+0xac>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_TIM1_Init+0xa8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_TIM1_Init+0xa8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_TIM1_Init+0xa8>)
 8001200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001204:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_TIM1_Init+0xa8>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_TIM1_Init+0xa8>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_TIM1_Init+0xa8>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001218:	2303      	movs	r3, #3
 800121a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_TIM1_Init+0xa8>)
 8001244:	f004 f9be 	bl	80055c4 <HAL_TIM_Encoder_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800124e:	f000 fa09 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_TIM1_Init+0xa8>)
 8001260:	f004 fe28 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800126a:	f000 f9fb 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	@ 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000168 	.word	0x20000168
 800127c:	40010000 	.word	0x40010000

08001280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	@ 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2224      	movs	r2, #36	@ 0x24
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fe34 	bl	8006efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_TIM2_Init+0xa4>)
 800129e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_TIM2_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <MX_TIM2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_TIM2_Init+0xa4>)
 80012b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM2_Init+0xa4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <MX_TIM2_Init+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012c4:	2303      	movs	r3, #3
 80012c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012dc:	2301      	movs	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_TIM2_Init+0xa4>)
 80012f0:	f004 f968 	bl	80055c4 <HAL_TIM_Encoder_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012fa:	f000 f9b3 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	@ (8001324 <MX_TIM2_Init+0xa4>)
 800130c:	f004 fdd2 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001316:	f000 f9a5 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3730      	adds	r7, #48	@ 0x30
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001b0 	.word	0x200001b0

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134a:	4b32      	ldr	r3, [pc, #200]	@ (8001414 <MX_TIM3_Init+0xec>)
 800134c:	4a32      	ldr	r2, [pc, #200]	@ (8001418 <MX_TIM3_Init+0xf0>)
 800134e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001350:	4b30      	ldr	r3, [pc, #192]	@ (8001414 <MX_TIM3_Init+0xec>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <MX_TIM3_Init+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <MX_TIM3_Init+0xec>)
 800135e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <MX_TIM3_Init+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <MX_TIM3_Init+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001370:	4828      	ldr	r0, [pc, #160]	@ (8001414 <MX_TIM3_Init+0xec>)
 8001372:	f004 f80f 	bl	8005394 <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800137c:	f000 f972 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4619      	mov	r1, r3
 800138e:	4821      	ldr	r0, [pc, #132]	@ (8001414 <MX_TIM3_Init+0xec>)
 8001390:	f004 fd90 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800139a:	f000 f963 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	2360      	movs	r3, #96	@ 0x60
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4817      	ldr	r0, [pc, #92]	@ (8001414 <MX_TIM3_Init+0xec>)
 80013b6:	f004 fa39 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013c0:	f000 f950 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2204      	movs	r2, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4812      	ldr	r0, [pc, #72]	@ (8001414 <MX_TIM3_Init+0xec>)
 80013cc:	f004 fa2e 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013d6:	f000 f945 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2208      	movs	r2, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <MX_TIM3_Init+0xec>)
 80013e2:	f004 fa23 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80013ec:	f000 f93a 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	220c      	movs	r2, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM3_Init+0xec>)
 80013f8:	f004 fa18 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001402:	f000 f92f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001406:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM3_Init+0xec>)
 8001408:	f000 fdec 	bl	8001fe4 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001f8 	.word	0x200001f8
 8001418:	40000400 	.word	0x40000400

0800141c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <MX_USART2_UART_Init+0x50>)
 8001424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_USART2_UART_Init+0x4c>)
 8001454:	f004 fdaa 	bl	8005fac <HAL_UART_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800145e:	f000 f901 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000240 	.word	0x20000240
 800146c:	40004400 	.word	0x40004400

08001470 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <MX_USART3_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_USART3_UART_Init+0x4c>)
 80014a8:	f004 fd80 	bl	8005fac <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f8d7 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000288 	.word	0x20000288
 80014c0:	40004800 	.word	0x40004800

080014c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <MX_USART6_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_USART6_UART_Init+0x4c>)
 80014fc:	f004 fd56 	bl	8005fac <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f8ad 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002d0 	.word	0x200002d0
 8001514:	40011400 	.word	0x40011400

08001518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_DMA_Init+0x3c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <MX_DMA_Init+0x3c>)
 8001528:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_DMA_Init+0x3c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2039      	movs	r0, #57	@ 0x39
 8001540:	f001 fb6b 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001544:	2039      	movs	r0, #57	@ 0x39
 8001546:	f001 fb84 	bl	8002c52 <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <MX_GPIO_Init+0xfc>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a37      	ldr	r2, [pc, #220]	@ (8001654 <MX_GPIO_Init+0xfc>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <MX_GPIO_Init+0xfc>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <MX_GPIO_Init+0xfc>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a30      	ldr	r2, [pc, #192]	@ (8001654 <MX_GPIO_Init+0xfc>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <MX_GPIO_Init+0xfc>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <MX_GPIO_Init+0xfc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <MX_GPIO_Init+0xfc>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <MX_GPIO_Init+0xfc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <MX_GPIO_Init+0xfc>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a22      	ldr	r2, [pc, #136]	@ (8001654 <MX_GPIO_Init+0xfc>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <MX_GPIO_Init+0xfc>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2120      	movs	r1, #32
 80015e2:	481d      	ldr	r0, [pc, #116]	@ (8001658 <MX_GPIO_Init+0x100>)
 80015e4:	f002 f860 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80015ee:	481b      	ldr	r0, [pc, #108]	@ (800165c <MX_GPIO_Init+0x104>)
 80015f0:	f002 f85a 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4815      	ldr	r0, [pc, #84]	@ (8001660 <MX_GPIO_Init+0x108>)
 800160c:	f001 feb8 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001610:	2320      	movs	r3, #32
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480c      	ldr	r0, [pc, #48]	@ (8001658 <MX_GPIO_Init+0x100>)
 8001628:	f001 feaa 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 800162c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_GPIO_Init+0x104>)
 8001646:	f001 fe9b 	bl	8003380 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	@ 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <Error_Handler+0x8>

08001670 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af04      	add	r7, sp, #16
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	460b      	mov	r3, r1
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	4613      	mov	r3, r2
 8001680:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	b29a      	uxth	r2, r3
 8001686:	230a      	movs	r3, #10
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	2301      	movs	r3, #1
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	f107 030f 	add.w	r3, r7, #15
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2301      	movs	r3, #1
 8001696:	2180      	movs	r1, #128	@ 0x80
 8001698:	4819      	ldr	r0, [pc, #100]	@ (8001700 <PCA9685_SetBit+0x90>)
 800169a:	f002 fa5d 	bl	8003b58 <HAL_I2C_Mem_Read>
  if (Value == 0)
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10d      	bne.n	80016c0 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	2201      	movs	r2, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	b25a      	sxtb	r2, r3
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	4013      	ands	r3, r2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e00a      	b.n	80016d6 <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	2201      	movs	r2, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	230a      	movs	r3, #10
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2301      	movs	r3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	f107 030f 	add.w	r3, r7, #15
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2301      	movs	r3, #1
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	4804      	ldr	r0, [pc, #16]	@ (8001700 <PCA9685_SetBit+0x90>)
 80016ee:	f002 f939 	bl	8003964 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 ff20 	bl	8002538 <HAL_Delay>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000114 	.word	0x20000114

08001704 <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af04      	add	r7, sp, #16
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8001714:	4293      	cmp	r3, r2
 8001716:	d902      	bls.n	800171e <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 8001718:	2303      	movs	r3, #3
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e00c      	b.n	8001738 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	2b18      	cmp	r3, #24
 8001722:	d802      	bhi.n	800172a <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 8001724:	23ff      	movs	r3, #255	@ 0xff
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e006      	b.n	8001738 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	031b      	lsls	r3, r3, #12
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <PCA9685_SetPWMFrequency+0x74>)
 8001730:	fb92 f3f3 	sdiv	r3, r2, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	2104      	movs	r1, #4
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff ff97 	bl	8001670 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8001742:	230a      	movs	r3, #10
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2301      	movs	r3, #1
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	f107 030f 	add.w	r3, r7, #15
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	22fe      	movs	r2, #254	@ 0xfe
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	4809      	ldr	r0, [pc, #36]	@ (800177c <PCA9685_SetPWMFrequency+0x78>)
 8001758:	f002 f904 	bl	8003964 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2104      	movs	r1, #4
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff ff85 	bl	8001670 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8001766:	2201      	movs	r2, #1
 8001768:	2107      	movs	r1, #7
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff ff80 	bl	8001670 <PCA9685_SetBit>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	017d7840 	.word	0x017d7840
 800177c:	20000114 	.word	0x20000114

08001780 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ffb9 	bl	8001704 <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8001792:	2201      	movs	r2, #1
 8001794:	2105      	movs	r1, #5
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff ff6a 	bl	8001670 <PCA9685_SetBit>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	460b      	mov	r3, r1
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	3306      	adds	r3, #6
 80017be:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	230a      	movs	r3, #10
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2304      	movs	r3, #4
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	2180      	movs	r1, #128	@ 0x80
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <PCA9685_SetPWM+0x60>)
 80017f8:	f002 f8b4 	bl	8003964 <HAL_I2C_Mem_Write>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000114 	.word	0x20000114

08001808 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	ed87 0a00 	vstr	s0, [r7]
 8001814:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 8001816:	edd7 7a00 	vldr	s15, [r7]
 800181a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	d502      	bpl.n	800182a <PCA9685_SetServoAngle+0x22>
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 800182a:	edd7 7a00 	vldr	s15, [r7]
 800182e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80018b8 <PCA9685_SetServoAngle+0xb0>
 8001832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	dd01      	ble.n	8001840 <PCA9685_SetServoAngle+0x38>
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <PCA9685_SetServoAngle+0xb4>)
 800183e:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7fe fea9 	bl	8000598 <__aeabi_f2d>
 8001846:	a318      	add	r3, pc, #96	@ (adr r3, 80018a8 <PCA9685_SetServoAngle+0xa0>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fefc 	bl	8000648 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <PCA9685_SetServoAngle+0xb8>)
 800185e:	f7ff f81d 	bl	800089c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a311      	add	r3, pc, #68	@ (adr r3, 80018b0 <PCA9685_SetServoAngle+0xa8>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fd34 	bl	80002dc <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f8f6 	bl	8000a6c <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8001884:	edd7 7a03 	vldr	s15, [r7, #12]
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	ee17 3a90 	vmov	r3, s15
 8001890:	b29a      	uxth	r2, r3
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff84 	bl	80017a4 <PCA9685_SetPWM>
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	f3af 8000 	nop.w
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40799800 	.word	0x40799800
 80018b0:	9999999a 	.word	0x9999999a
 80018b4:	40599999 	.word	0x40599999
 80018b8:	43340000 	.word	0x43340000
 80018bc:	43340000 	.word	0x43340000
 80018c0:	40668000 	.word	0x40668000

080018c4 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 80018ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <Servo_Init+0x3c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d110      	bne.n	80018f8 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff51 	bl	8001780 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 80018de:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80018e2:	2100      	movs	r1, #0
 80018e4:	4807      	ldr	r0, [pc, #28]	@ (8001904 <Servo_Init+0x40>)
 80018e6:	f005 fb09 	bl	8006efc <memset>
    servoCount = 0;
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <Servo_Init+0x44>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <Servo_Init+0x3c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e000      	b.n	80018fa <Servo_Init+0x36>
        return;
 80018f8:	bf00      	nop
}
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200005ed 	.word	0x200005ed
 8001904:	200003ac 	.word	0x200003ac
 8001908:	200005ec 	.word	0x200005ec

0800190c <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	ed87 0a01 	vstr	s0, [r7, #4]
 800191a:	edc7 0a00 	vstr	s1, [r7]
 800191e:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 8001920:	4b6e      	ldr	r3, [pc, #440]	@ (8001adc <Servo_Register+0x1d0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <Servo_Register+0x22>
        return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	e0d1      	b.n	8001ad2 <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 800192e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae0 <Servo_Register+0x1d4>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	d902      	bls.n	800193c <Servo_Register+0x30>
        return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e0ca      	b.n	8001ad2 <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	d902      	bls.n	8001948 <Servo_Register+0x3c>
        return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e0c4      	b.n	8001ad2 <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e01b      	b.n	8001986 <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 800194e:	4965      	ldr	r1, [pc, #404]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3310      	adds	r3, #16
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00d      	beq.n	8001980 <Servo_Register+0x74>
 8001964:	495f      	ldr	r1, [pc, #380]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	429a      	cmp	r2, r3
 8001978:	d102      	bne.n	8001980 <Servo_Register+0x74>
            return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e0a8      	b.n	8001ad2 <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	4b56      	ldr	r3, [pc, #344]	@ (8001ae0 <Servo_Register+0x1d4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4293      	cmp	r3, r2
 8001990:	dbdd      	blt.n	800194e <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8001992:	edd7 7a01 	vldr	s15, [r7, #4]
 8001996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d502      	bpl.n	80019a6 <Servo_Register+0x9a>
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 80019a6:	edd7 7a00 	vldr	s15, [r7]
 80019aa:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001ae8 <Servo_Register+0x1dc>
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	dd01      	ble.n	80019bc <Servo_Register+0xb0>
 80019b8:	4b4c      	ldr	r3, [pc, #304]	@ (8001aec <Servo_Register+0x1e0>)
 80019ba:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 80019bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c0:	edd7 7a00 	vldr	s15, [r7]
 80019c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	db02      	blt.n	80019d4 <Servo_Register+0xc8>
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e07e      	b.n	8001ad2 <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 80019d4:	4b42      	ldr	r3, [pc, #264]	@ (8001ae0 <Servo_Register+0x1d4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 80019da:	4942      	ldr	r1, [pc, #264]	@ (8001ae4 <Servo_Register+0x1d8>)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 80019ec:	493d      	ldr	r1, [pc, #244]	@ (8001ae4 <Servo_Register+0x1d8>)
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3304      	adds	r3, #4
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8001a00:	4938      	ldr	r1, [pc, #224]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3308      	adds	r3, #8
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 8001a14:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a18:	edd7 7a00 	vldr	s15, [r7]
 8001a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a28:	492e      	ldr	r1, [pc, #184]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	330c      	adds	r3, #12
 8001a38:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 8001a3c:	4929      	ldr	r1, [pc, #164]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d018      	beq.n	8001a88 <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	3310      	adds	r3, #16
 8001a62:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001a64:	4413      	add	r3, r2
 8001a66:	3301      	adds	r3, #1
 8001a68:	220f      	movs	r2, #15
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f005 fa4d 	bl	8006f0c <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8001a72:	491c      	ldr	r1, [pc, #112]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3320      	adds	r3, #32
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e00d      	b.n	8001aa4 <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	3310      	adds	r3, #16
 8001a94:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001a96:	4413      	add	r3, r2
 8001a98:	1c58      	adds	r0, r3, #1
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <Servo_Register+0x1e4>)
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	f005 f9f8 	bl	8006e94 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <Servo_Register+0x1d4>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <Servo_Register+0x1d4>)
 8001aae:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8001ab0:	490c      	ldr	r1, [pc, #48]	@ (8001ae4 <Servo_Register+0x1d8>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	330c      	adds	r3, #12
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fe9c 	bl	8001808 <PCA9685_SetServoAngle>

    return servoId;
 8001ad0:	693b      	ldr	r3, [r7, #16]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200005ed 	.word	0x200005ed
 8001ae0:	200005ec 	.word	0x200005ec
 8001ae4:	200003ac 	.word	0x200003ac
 8001ae8:	43340000 	.word	0x43340000
 8001aec:	43340000 	.word	0x43340000
 8001af0:	08007850 	.word	0x08007850

08001af4 <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db10      	blt.n	8001b28 <Servo_SetAngle+0x34>
 8001b06:	4b33      	ldr	r3, [pc, #204]	@ (8001bd4 <Servo_SetAngle+0xe0>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	da0a      	bge.n	8001b28 <Servo_SetAngle+0x34>
 8001b12:	4931      	ldr	r1, [pc, #196]	@ (8001bd8 <Servo_SetAngle+0xe4>)
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	3310      	adds	r3, #16
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <Servo_SetAngle+0x3a>
        return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	e04d      	b.n	8001bca <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8001b2e:	492a      	ldr	r1, [pc, #168]	@ (8001bd8 <Servo_SetAngle+0xe4>)
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ed97 7a00 	vldr	s14, [r7]
 8001b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	d509      	bpl.n	8001b64 <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8001b50:	4921      	ldr	r1, [pc, #132]	@ (8001bd8 <Servo_SetAngle+0xe4>)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8001b64:	491c      	ldr	r1, [pc, #112]	@ (8001bd8 <Servo_SetAngle+0xe4>)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3308      	adds	r3, #8
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ed97 7a00 	vldr	s14, [r7]
 8001b7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	dd09      	ble.n	8001b9a <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 8001b86:	4914      	ldr	r1, [pc, #80]	@ (8001bd8 <Servo_SetAngle+0xe4>)
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3308      	adds	r3, #8
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 8001b9a:	490f      	ldr	r1, [pc, #60]	@ (8001bd8 <Servo_SetAngle+0xe4>)
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	330c      	adds	r3, #12
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8001bae:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <Servo_SetAngle+0xe4>)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	ed97 0a00 	vldr	s0, [r7]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe20 	bl	8001808 <PCA9685_SetServoAngle>

    return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200005ec 	.word	0x200005ec
 8001bd8:	200003ac 	.word	0x200003ac

08001bdc <Servo_SetAngleByName>:
  * @param  name: Name of the servo
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngleByName(const char* name, float angle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	ed87 0a00 	vstr	s0, [r7]
    if (name == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <Servo_SetAngleByName+0x18>
        return -1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e00f      	b.n	8001c14 <Servo_SetAngleByName+0x38>

    int servoId = Servo_GetIdByName(name);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f811 	bl	8001c1c <Servo_GetIdByName>
 8001bfa:	60f8      	str	r0, [r7, #12]

    if (servoId >= 0)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db06      	blt.n	8001c10 <Servo_SetAngleByName+0x34>
        return Servo_SetAngle(servoId, angle);
 8001c02:	ed97 0a00 	vldr	s0, [r7]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff ff74 	bl	8001af4 <Servo_SetAngle>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	e001      	b.n	8001c14 <Servo_SetAngleByName+0x38>
    else
        return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <Servo_GetIdByName>:
  * @brief  Get servo ID by name
  * @param  name: Name of the servo
  * @retval int: Servo ID or -1 if not found
  */
int Servo_GetIdByName(const char* name)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    if (name == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <Servo_GetIdByName+0x14>
        return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e02a      	b.n	8001c86 <Servo_GetIdByName+0x6a>

    // Search for servo with the given name
    for (int i = 0; i < servoCount; i++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e01f      	b.n	8001c76 <Servo_GetIdByName+0x5a>
        if (servos[i].initialized && strcmp(servos[i].name, name) == 0)
 8001c36:	4916      	ldr	r1, [pc, #88]	@ (8001c90 <Servo_GetIdByName+0x74>)
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	3310      	adds	r3, #16
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d011      	beq.n	8001c70 <Servo_GetIdByName+0x54>
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3310      	adds	r3, #16
 8001c58:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <Servo_GetIdByName+0x74>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fad5 	bl	8000210 <strcmp>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <Servo_GetIdByName+0x54>
            return i;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	e00a      	b.n	8001c86 <Servo_GetIdByName+0x6a>
    for (int i = 0; i < servoCount; i++) {
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3301      	adds	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <Servo_GetIdByName+0x78>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	dbd9      	blt.n	8001c36 <Servo_GetIdByName+0x1a>
    }

    return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200003ac 	.word	0x200003ac
 8001c94:	200005ec 	.word	0x200005ec

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f000 ff94 	bl	8002c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_ADC_MspInit+0x7c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d127      	bne.n	8001d5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8001d42:	2301      	movs	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d46:	2303      	movs	r3, #3
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <HAL_ADC_MspInit+0x84>)
 8001d56:	f001 fb13 	bl	8003380 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40012000 	.word	0x40012000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020800 	.word	0x40020800

08001d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	@ (8001e98 <HAL_I2C_MspInit+0x128>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12c      	bne.n	8001dec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a40      	ldr	r2, [pc, #256]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dae:	23c0      	movs	r3, #192	@ 0xc0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db2:	2312      	movs	r3, #18
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4835      	ldr	r0, [pc, #212]	@ (8001ea0 <HAL_I2C_MspInit+0x130>)
 8001dca:	f001 fad9 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	4b32      	ldr	r3, [pc, #200]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a31      	ldr	r2, [pc, #196]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dea:	e050      	b.n	8001e8e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea4 <HAL_I2C_MspInit+0x134>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d14b      	bne.n	8001e8e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a27      	ldr	r2, [pc, #156]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a20      	ldr	r2, [pc, #128]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e34:	2312      	movs	r3, #18
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e40:	2304      	movs	r3, #4
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4815      	ldr	r0, [pc, #84]	@ (8001ea0 <HAL_I2C_MspInit+0x130>)
 8001e4c:	f001 fa98 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e56:	2312      	movs	r3, #18
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e62:	2304      	movs	r3, #4
 8001e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480e      	ldr	r0, [pc, #56]	@ (8001ea8 <HAL_I2C_MspInit+0x138>)
 8001e6e:	f001 fa87 	bl	8003380 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a08      	ldr	r2, [pc, #32]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_I2C_MspInit+0x12c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	3730      	adds	r7, #48	@ 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	40005800 	.word	0x40005800
 8001ea8:	40020800 	.word	0x40020800

08001eac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	@ 0x30
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a32      	ldr	r2, [pc, #200]	@ (8001f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12d      	bne.n	8001f2a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a30      	ldr	r2, [pc, #192]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8001f06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	481e      	ldr	r0, [pc, #120]	@ (8001f9c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f24:	f001 fa2c 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f28:	e030      	b.n	8001f8c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f32:	d12b      	bne.n	8001f8c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	4a16      	ldr	r2, [pc, #88]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f44:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	4a0f      	ldr	r2, [pc, #60]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f60:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f88:	f001 f9fa 	bl	8003380 <HAL_GPIO_Init>
}
 8001f8c:	bf00      	nop
 8001f8e:	3730      	adds	r7, #48	@ 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_TIM_PWM_MspInit+0x3c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10d      	bne.n	8001fce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_TIM_PWM_MspInit+0x40>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <HAL_TIM_PWM_MspInit+0x40>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <HAL_TIM_PWM_MspInit+0x40>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_TIM_MspPostInit+0xa4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d13b      	bne.n	800207e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <HAL_TIM_MspPostInit+0xa8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a1f      	ldr	r2, [pc, #124]	@ (800208c <HAL_TIM_MspPostInit+0xa8>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_TIM_MspPostInit+0xa8>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_TIM_MspPostInit+0xa8>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a18      	ldr	r2, [pc, #96]	@ (800208c <HAL_TIM_MspPostInit+0xa8>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b16      	ldr	r3, [pc, #88]	@ (800208c <HAL_TIM_MspPostInit+0xa8>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203e:	23c0      	movs	r3, #192	@ 0xc0
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800204e:	2302      	movs	r3, #2
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	480d      	ldr	r0, [pc, #52]	@ (8002090 <HAL_TIM_MspPostInit+0xac>)
 800205a:	f001 f991 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205e:	2303      	movs	r3, #3
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206e:	2302      	movs	r3, #2
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4806      	ldr	r0, [pc, #24]	@ (8002094 <HAL_TIM_MspPostInit+0xb0>)
 800207a:	f001 f981 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	@ 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40000400 	.word	0x40000400
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400

08002098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	@ 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a66      	ldr	r2, [pc, #408]	@ (8002250 <HAL_UART_MspInit+0x1b8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d12c      	bne.n	8002114 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a64      	ldr	r2, [pc, #400]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b62      	ldr	r3, [pc, #392]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	4b5e      	ldr	r3, [pc, #376]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a5d      	ldr	r2, [pc, #372]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020f2:	230c      	movs	r3, #12
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002102:	2307      	movs	r3, #7
 8002104:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800210a:	4619      	mov	r1, r3
 800210c:	4852      	ldr	r0, [pc, #328]	@ (8002258 <HAL_UART_MspInit+0x1c0>)
 800210e:	f001 f937 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002112:	e099      	b.n	8002248 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a50      	ldr	r2, [pc, #320]	@ (800225c <HAL_UART_MspInit+0x1c4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d12d      	bne.n	800217a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800212c:	6413      	str	r3, [r2, #64]	@ 0x40
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	4b45      	ldr	r3, [pc, #276]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a44      	ldr	r2, [pc, #272]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b42      	ldr	r3, [pc, #264]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002156:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002168:	2307      	movs	r3, #7
 800216a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	483b      	ldr	r0, [pc, #236]	@ (8002260 <HAL_UART_MspInit+0x1c8>)
 8002174:	f001 f904 	bl	8003380 <HAL_GPIO_Init>
}
 8002178:	e066      	b.n	8002248 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a39      	ldr	r2, [pc, #228]	@ (8002264 <HAL_UART_MspInit+0x1cc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d161      	bne.n	8002248 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 800218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218c:	4a31      	ldr	r2, [pc, #196]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 800218e:	f043 0320 	orr.w	r3, r3, #32
 8002192:	6453      	str	r3, [r2, #68]	@ 0x44
 8002194:	4b2f      	ldr	r3, [pc, #188]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b0:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_UART_MspInit+0x1bc>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021bc:	23c0      	movs	r3, #192	@ 0xc0
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021cc:	2308      	movs	r3, #8
 80021ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	4822      	ldr	r0, [pc, #136]	@ (8002260 <HAL_UART_MspInit+0x1c8>)
 80021d8:	f001 f8d2 	bl	8003380 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80021dc:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 80021de:	4a23      	ldr	r2, [pc, #140]	@ (800226c <HAL_UART_MspInit+0x1d4>)
 80021e0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 80021e4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80021e8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 80021f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021fc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800220a:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002210:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002216:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800221c:	4812      	ldr	r0, [pc, #72]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 800221e:	f000 fd33 	bl	8002c88 <HAL_DMA_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_MspInit+0x194>
      Error_Handler();
 8002228:	f7ff fa1c 	bl	8001664 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002232:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <HAL_UART_MspInit+0x1d0>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2047      	movs	r0, #71	@ 0x47
 800223e:	f000 fcec 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002242:	2047      	movs	r0, #71	@ 0x47
 8002244:	f000 fd05 	bl	8002c52 <HAL_NVIC_EnableIRQ>
}
 8002248:	bf00      	nop
 800224a:	3738      	adds	r7, #56	@ 0x38
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40004400 	.word	0x40004400
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000
 800225c:	40004800 	.word	0x40004800
 8002260:	40020800 	.word	0x40020800
 8002264:	40011400 	.word	0x40011400
 8002268:	20000318 	.word	0x20000318
 800226c:	40026428 	.word	0x40026428

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <NMI_Handler+0x4>

08002278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <MemManage_Handler+0x4>

08002288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <BusFault_Handler+0x4>

08002290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <UsageFault_Handler+0x4>

08002298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c6:	f000 f917 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 80022ca:	f000 f85f 	bl	800238c <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <DMA2_Stream1_IRQHandler+0x10>)
 80022da:	f000 fe15 	bl	8002f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000318 	.word	0x20000318

080022e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <USART6_IRQHandler+0x10>)
 80022ee:	f003 fed3 	bl	8006098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200002d0 	.word	0x200002d0

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	@ (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f004 fe02 	bl	8006f34 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20020000 	.word	0x20020000
 800235c:	00000400 	.word	0x00000400
 8002360:	200005f0 	.word	0x200005f0
 8002364:	20000740 	.word	0x20000740

08002368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <SysTickFunction>:

#include "main.h"
// #include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8002392:	f7fe fd33 	bl	8000dfc <getRightEncoderCounts>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	f647 1318 	movw	r3, #31000	@ 0x7918
 800239e:	429a      	cmp	r2, r3
 80023a0:	dc15      	bgt.n	80023ce <SysTickFunction+0x42>
 80023a2:	f7fe fd37 	bl	8000e14 <getLeftEncoderCounts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	f647 1318 	movw	r3, #31000	@ 0x7918
 80023ae:	429a      	cmp	r2, r3
 80023b0:	dc0d      	bgt.n	80023ce <SysTickFunction+0x42>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80023b2:	f7fe fd23 	bl	8000dfc <getRightEncoderCounts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <SysTickFunction+0x6c>)
 80023bc:	429a      	cmp	r2, r3
 80023be:	db06      	blt.n	80023ce <SysTickFunction+0x42>
 80023c0:	f7fe fd28 	bl	8000e14 <getLeftEncoderCounts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <SysTickFunction+0x6c>)
 80023ca:	429a      	cmp	r2, r3
 80023cc:	da10      	bge.n	80023f0 <SysTickFunction+0x64>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80023ce:	f7fe fd15 	bl	8000dfc <getRightEncoderCounts>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b29c      	uxth	r4, r3
 80023d6:	f7fe fd1d 	bl	8000e14 <getLeftEncoderCounts>
 80023da:	4603      	mov	r3, r0
 80023dc:	b29b      	uxth	r3, r3
 80023de:	1ae3      	subs	r3, r4, r3
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 80023e4:	f7fe fd22 	bl	8000e2c <resetEncoders>
		TIM1->CNT = (int16_t) difference;
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <SysTickFunction+0x70>)
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	ffff86e8 	.word	0xffff86e8
 80023fc:	40010000 	.word	0x40010000

08002400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002438 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002404:	f7ff ffb0 	bl	8002368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002408:	480c      	ldr	r0, [pc, #48]	@ (800243c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800240a:	490d      	ldr	r1, [pc, #52]	@ (8002440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800240c:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002420:	4c0a      	ldr	r4, [pc, #40]	@ (800244c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800242e:	f004 fd87 	bl	8006f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002432:	f7fe fd29 	bl	8000e88 <main>
  bx  lr    
 8002436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002444:	080078bc 	.word	0x080078bc
  ldr r2, =_sbss
 8002448:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800244c:	20000740 	.word	0x20000740

08002450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC_IRQHandler>
	...

08002454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002458:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0d      	ldr	r2, [pc, #52]	@ (8002494 <HAL_Init+0x40>)
 800245e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	@ (8002494 <HAL_Init+0x40>)
 800246a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800246e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	@ (8002494 <HAL_Init+0x40>)
 8002476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f000 fbc1 	bl	8002c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f808 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fc06 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023c00 	.word	0x40023c00

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a0:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_InitTick+0x54>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_InitTick+0x58>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fbd9 	bl	8002c6e <HAL_SYSTICK_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00e      	b.n	80024e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d80a      	bhi.n	80024e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 fba1 	bl	8002c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d8:	4a06      	ldr	r2, [pc, #24]	@ (80024f4 <HAL_InitTick+0x5c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008
 800251c:	200005f4 	.word	0x200005f4

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200005f4 	.word	0x200005f4

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d005      	beq.n	800255e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <HAL_Delay+0x44>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255e:	bf00      	nop
 8002560:	f7ff ffde 	bl	8002520 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8f7      	bhi.n	8002560 <HAL_Delay+0x28>
  {
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e033      	b.n	80025fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fba2 	bl	8001ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025c6:	f023 0302 	bic.w	r3, r3, #2
 80025ca:	f043 0202 	orr.w	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f94a 	bl	800286c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80025ee:	e001      	b.n	80025f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e113      	b.n	800284c <HAL_ADC_ConfigChannel+0x244>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b09      	cmp	r3, #9
 8002632:	d925      	bls.n	8002680 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68d9      	ldr	r1, [r3, #12]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	3b1e      	subs	r3, #30
 800264a:	2207      	movs	r2, #7
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43da      	mvns	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	400a      	ands	r2, r1
 8002658:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	4603      	mov	r3, r0
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4403      	add	r3, r0
 8002672:	3b1e      	subs	r3, #30
 8002674:	409a      	lsls	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	e022      	b.n	80026c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	2207      	movs	r2, #7
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	400a      	ands	r2, r1
 80026a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4618      	mov	r0, r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4403      	add	r3, r0
 80026bc:	409a      	lsls	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d824      	bhi.n	8002718 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b05      	subs	r3, #5
 80026e0:	221f      	movs	r2, #31
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	400a      	ands	r2, r1
 80026ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	3b05      	subs	r3, #5
 800270a:	fa00 f203 	lsl.w	r2, r0, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	635a      	str	r2, [r3, #52]	@ 0x34
 8002716:	e04c      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d824      	bhi.n	800276a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b23      	subs	r3, #35	@ 0x23
 8002732:	221f      	movs	r2, #31
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43da      	mvns	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	400a      	ands	r2, r1
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	4618      	mov	r0, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	3b23      	subs	r3, #35	@ 0x23
 800275c:	fa00 f203 	lsl.w	r2, r0, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
 8002768:	e023      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	3b41      	subs	r3, #65	@ 0x41
 800277c:	221f      	movs	r2, #31
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4618      	mov	r0, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b41      	subs	r3, #65	@ 0x41
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b2:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <HAL_ADC_ConfigChannel+0x250>)
 80027b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a28      	ldr	r2, [pc, #160]	@ (800285c <HAL_ADC_ConfigChannel+0x254>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10f      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1d8>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b12      	cmp	r3, #18
 80027c6:	d10b      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	@ (800285c <HAL_ADC_ConfigChannel+0x254>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12b      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x23a>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002860 <HAL_ADC_ConfigChannel+0x258>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x1f4>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b11      	cmp	r3, #17
 80027fa:	d122      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a11      	ldr	r2, [pc, #68]	@ (8002860 <HAL_ADC_ConfigChannel+0x258>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d111      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_ADC_ConfigChannel+0x25c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <HAL_ADC_ConfigChannel+0x260>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	0c9a      	lsrs	r2, r3, #18
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002834:	e002      	b.n	800283c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3b01      	subs	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f9      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40012300 	.word	0x40012300
 800285c:	40012000 	.word	0x40012000
 8002860:	10000012 	.word	0x10000012
 8002864:	20000000 	.word	0x20000000
 8002868:	431bde83 	.word	0x431bde83

0800286c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002874:	4b79      	ldr	r3, [pc, #484]	@ (8002a5c <ADC_Init+0x1f0>)
 8002876:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	021a      	lsls	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	4a58      	ldr	r2, [pc, #352]	@ (8002a60 <ADC_Init+0x1f4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	e00f      	b.n	800296a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0202 	bic.w	r2, r2, #2
 8002978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e1b      	ldrb	r3, [r3, #24]
 8002984:	005a      	lsls	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	3b01      	subs	r3, #1
 80029c4:	035a      	lsls	r2, r3, #13
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	e007      	b.n	80029e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	051a      	lsls	r2, r3, #20
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a22:	025a      	lsls	r2, r3, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	029a      	lsls	r2, r3, #10
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012300 	.word	0x40012300
 8002a60:	0f000001 	.word	0x0f000001

08002a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a74:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a96:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	60d3      	str	r3, [r2, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab0:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 0307 	and.w	r3, r3, #7
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	db0b      	blt.n	8002af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	4907      	ldr	r1, [pc, #28]	@ (8002b00 <__NVIC_EnableIRQ+0x38>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2001      	movs	r0, #1
 8002aea:	fa00 f202 	lsl.w	r2, r0, r2
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	db0a      	blt.n	8002b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	490c      	ldr	r1, [pc, #48]	@ (8002b50 <__NVIC_SetPriority+0x4c>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	0112      	lsls	r2, r2, #4
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	440b      	add	r3, r1
 8002b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b2c:	e00a      	b.n	8002b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4908      	ldr	r1, [pc, #32]	@ (8002b54 <__NVIC_SetPriority+0x50>)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	3b04      	subs	r3, #4
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	440b      	add	r3, r1
 8002b42:	761a      	strb	r2, [r3, #24]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000e100 	.word	0xe000e100
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	@ 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f1c3 0307 	rsb	r3, r3, #7
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	bf28      	it	cs
 8002b76:	2304      	movcs	r3, #4
 8002b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d902      	bls.n	8002b88 <NVIC_EncodePriority+0x30>
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3b03      	subs	r3, #3
 8002b86:	e000      	b.n	8002b8a <NVIC_EncodePriority+0x32>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43da      	mvns	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43d9      	mvns	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	4313      	orrs	r3, r2
         );
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd0:	d301      	bcc.n	8002bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00f      	b.n	8002bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <SysTick_Config+0x40>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bde:	210f      	movs	r1, #15
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f7ff ff8e 	bl	8002b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <SysTick_Config+0x40>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bee:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <SysTick_Config+0x40>)
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	e000e010 	.word	0xe000e010

08002c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff29 	bl	8002a64 <__NVIC_SetPriorityGrouping>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c2c:	f7ff ff3e 	bl	8002aac <__NVIC_GetPriorityGrouping>
 8002c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f7ff ff8e 	bl	8002b58 <NVIC_EncodePriority>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff5d 	bl	8002b04 <__NVIC_SetPriority>
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff31 	bl	8002ac8 <__NVIC_EnableIRQ>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ffa2 	bl	8002bc0 <SysTick_Config>
 8002c7c:	4603      	mov	r3, r0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff fc44 	bl	8002520 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e099      	b.n	8002dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc4:	e00f      	b.n	8002ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc6:	f7ff fc2b 	bl	8002520 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d908      	bls.n	8002ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e078      	b.n	8002dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e8      	bne.n	8002cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4b38      	ldr	r3, [pc, #224]	@ (8002de0 <HAL_DMA_Init+0x158>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f023 0307 	bic.w	r3, r3, #7
 8002d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d117      	bne.n	8002daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00e      	beq.n	8002daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fa7b 	bl	8003288 <DMA_CheckFifoParam>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2240      	movs	r2, #64	@ 0x40
 8002d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002da6:	2301      	movs	r3, #1
 8002da8:	e016      	b.n	8002dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa32 	bl	800321c <DMA_CalcBaseAndBitshift>
 8002db8:	4603      	mov	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	223f      	movs	r2, #63	@ 0x3f
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	f010803f 	.word	0xf010803f

08002de4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df2:	f7ff fb95 	bl	8002520 <HAL_GetTick>
 8002df6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d008      	beq.n	8002e16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	@ 0x80
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e052      	b.n	8002ebc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0216 	bic.w	r2, r2, #22
 8002e24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_DMA_Abort+0x62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0208 	bic.w	r2, r2, #8
 8002e54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e66:	e013      	b.n	8002e90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e68:	f7ff fb5a 	bl	8002520 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d90c      	bls.n	8002e90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e015      	b.n	8002ebc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e4      	bne.n	8002e68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	223f      	movs	r2, #63	@ 0x3f
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00c      	b.n	8002efc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f14:	4b8e      	ldr	r3, [pc, #568]	@ (8003150 <HAL_DMA_IRQHandler+0x248>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a8e      	ldr	r2, [pc, #568]	@ (8003154 <HAL_DMA_IRQHandler+0x24c>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0a9b      	lsrs	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	2208      	movs	r2, #8
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01a      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	2208      	movs	r2, #8
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	2204      	movs	r2, #4
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fcc:	2204      	movs	r2, #4
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d043      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03c      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003002:	2210      	movs	r2, #16
 8003004:	409a      	lsls	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d024      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
 8003036:	e01f      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e016      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0208 	bic.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2220      	movs	r2, #32
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 808f 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8087 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	2220      	movs	r2, #32
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d136      	bne.n	8003120 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0216 	bic.w	r2, r2, #22
 80030c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x1da>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0208 	bic.w	r2, r2, #8
 80030f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	223f      	movs	r2, #63	@ 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07e      	beq.n	8003214 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
        }
        return;
 800311e:	e079      	b.n	8003214 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01d      	beq.n	800316a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003140:	2b00      	cmp	r3, #0
 8003142:	d031      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e02c      	b.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000
 8003154:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
 8003168:	e01e      	b.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0210 	bic.w	r2, r2, #16
 8003186:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d032      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2205      	movs	r2, #5
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d307      	bcc.n	80031f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f2      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x2cc>
 80031ee:	e000      	b.n	80031f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	e000      	b.n	8003216 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003214:	bf00      	nop
    }
  }
}
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	3b10      	subs	r3, #16
 800322c:	4a14      	ldr	r2, [pc, #80]	@ (8003280 <DMA_CalcBaseAndBitshift+0x64>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003236:	4a13      	ldr	r2, [pc, #76]	@ (8003284 <DMA_CalcBaseAndBitshift+0x68>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d909      	bls.n	800325e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	659a      	str	r2, [r3, #88]	@ 0x58
 800325c:	e007      	b.n	800326e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	aaaaaaab 	.word	0xaaaaaaab
 8003284:	08007870 	.word	0x08007870

08003288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11f      	bne.n	80032e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d856      	bhi.n	8003356 <DMA_CheckFifoParam+0xce>
 80032a8:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <DMA_CheckFifoParam+0x28>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032d3 	.word	0x080032d3
 80032b8:	080032c1 	.word	0x080032c1
 80032bc:	08003357 	.word	0x08003357
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d046      	beq.n	800335a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d0:	e043      	b.n	800335a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032da:	d140      	bne.n	800335e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e03d      	b.n	800335e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ea:	d121      	bne.n	8003330 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d837      	bhi.n	8003362 <DMA_CheckFifoParam+0xda>
 80032f2:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <DMA_CheckFifoParam+0x70>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003309 	.word	0x08003309
 80032fc:	0800330f 	.word	0x0800330f
 8003300:	08003309 	.word	0x08003309
 8003304:	08003321 	.word	0x08003321
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e030      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d025      	beq.n	8003366 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e022      	b.n	8003366 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003328:	d11f      	bne.n	800336a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800332e:	e01c      	b.n	800336a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d903      	bls.n	800333e <DMA_CheckFifoParam+0xb6>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d003      	beq.n	8003344 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800333c:	e018      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      break;
 8003342:	e015      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00e      	beq.n	800336e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e00b      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;
 8003356:	bf00      	nop
 8003358:	e00a      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 800335a:	bf00      	nop
 800335c:	e008      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 800335e:	bf00      	nop
 8003360:	e006      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e004      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e002      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;   
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
    }
  } 
  
  return status; 
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	@ 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e165      	b.n	8003668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f040 8154 	bne.w	8003662 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d005      	beq.n	80033d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d130      	bne.n	8003434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	2203      	movs	r2, #3
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003408:	2201      	movs	r2, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 0201 	and.w	r2, r3, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b03      	cmp	r3, #3
 800343e:	d017      	beq.n	8003470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d123      	bne.n	80034c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	08da      	lsrs	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	69b9      	ldr	r1, [r7, #24]
 80034c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80ae 	beq.w	8003662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4b5d      	ldr	r3, [pc, #372]	@ (8003680 <HAL_GPIO_Init+0x300>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	4a5c      	ldr	r2, [pc, #368]	@ (8003680 <HAL_GPIO_Init+0x300>)
 8003510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003514:	6453      	str	r3, [r2, #68]	@ 0x44
 8003516:	4b5a      	ldr	r3, [pc, #360]	@ (8003680 <HAL_GPIO_Init+0x300>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003522:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <HAL_GPIO_Init+0x304>)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	220f      	movs	r2, #15
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4f      	ldr	r2, [pc, #316]	@ (8003688 <HAL_GPIO_Init+0x308>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d025      	beq.n	800359a <HAL_GPIO_Init+0x21a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4e      	ldr	r2, [pc, #312]	@ (800368c <HAL_GPIO_Init+0x30c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01f      	beq.n	8003596 <HAL_GPIO_Init+0x216>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4d      	ldr	r2, [pc, #308]	@ (8003690 <HAL_GPIO_Init+0x310>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d019      	beq.n	8003592 <HAL_GPIO_Init+0x212>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4c      	ldr	r2, [pc, #304]	@ (8003694 <HAL_GPIO_Init+0x314>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_GPIO_Init+0x20e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4b      	ldr	r2, [pc, #300]	@ (8003698 <HAL_GPIO_Init+0x318>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00d      	beq.n	800358a <HAL_GPIO_Init+0x20a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4a      	ldr	r2, [pc, #296]	@ (800369c <HAL_GPIO_Init+0x31c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x206>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a49      	ldr	r2, [pc, #292]	@ (80036a0 <HAL_GPIO_Init+0x320>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_GPIO_Init+0x202>
 800357e:	2306      	movs	r3, #6
 8003580:	e00c      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003582:	2307      	movs	r3, #7
 8003584:	e00a      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003586:	2305      	movs	r3, #5
 8003588:	e008      	b.n	800359c <HAL_GPIO_Init+0x21c>
 800358a:	2304      	movs	r3, #4
 800358c:	e006      	b.n	800359c <HAL_GPIO_Init+0x21c>
 800358e:	2303      	movs	r3, #3
 8003590:	e004      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003592:	2302      	movs	r3, #2
 8003594:	e002      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_GPIO_Init+0x21c>
 800359a:	2300      	movs	r3, #0
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	f002 0203 	and.w	r2, r2, #3
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	4093      	lsls	r3, r2
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ac:	4935      	ldr	r1, [pc, #212]	@ (8003684 <HAL_GPIO_Init+0x304>)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	3302      	adds	r3, #2
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ba:	4b3a      	ldr	r3, [pc, #232]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035de:	4a31      	ldr	r2, [pc, #196]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e4:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003608:	4a26      	ldr	r2, [pc, #152]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800360e:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003632:	4a1c      	ldr	r2, [pc, #112]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003638:	4b1a      	ldr	r3, [pc, #104]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800365c:	4a11      	ldr	r2, [pc, #68]	@ (80036a4 <HAL_GPIO_Init+0x324>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3301      	adds	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b0f      	cmp	r3, #15
 800366c:	f67f ae96 	bls.w	800339c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3724      	adds	r7, #36	@ 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	40013800 	.word	0x40013800
 8003688:	40020000 	.word	0x40020000
 800368c:	40020400 	.word	0x40020400
 8003690:	40020800 	.word	0x40020800
 8003694:	40020c00 	.word	0x40020c00
 8003698:	40021000 	.word	0x40021000
 800369c:	40021400 	.word	0x40021400
 80036a0:	40021800 	.word	0x40021800
 80036a4:	40013c00 	.word	0x40013c00

080036a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b8:	787b      	ldrb	r3, [r7, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c4:	e003      	b.n	80036ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e12b      	b.n	8003946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe fb34 	bl	8001d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	@ 0x24
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800372e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800373e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003740:	f001 f932 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8003744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a81      	ldr	r2, [pc, #516]	@ (8003950 <HAL_I2C_Init+0x274>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d807      	bhi.n	8003760 <HAL_I2C_Init+0x84>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a80      	ldr	r2, [pc, #512]	@ (8003954 <HAL_I2C_Init+0x278>)
 8003754:	4293      	cmp	r3, r2
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e006      	b.n	800376e <HAL_I2C_Init+0x92>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a7d      	ldr	r2, [pc, #500]	@ (8003958 <HAL_I2C_Init+0x27c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	bf94      	ite	ls
 8003768:	2301      	movls	r3, #1
 800376a:	2300      	movhi	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0e7      	b.n	8003946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a78      	ldr	r2, [pc, #480]	@ (800395c <HAL_I2C_Init+0x280>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0c9b      	lsrs	r3, r3, #18
 8003780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003950 <HAL_I2C_Init+0x274>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d802      	bhi.n	80037b0 <HAL_I2C_Init+0xd4>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3301      	adds	r3, #1
 80037ae:	e009      	b.n	80037c4 <HAL_I2C_Init+0xe8>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	4a69      	ldr	r2, [pc, #420]	@ (8003960 <HAL_I2C_Init+0x284>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	3301      	adds	r3, #1
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	495c      	ldr	r1, [pc, #368]	@ (8003950 <HAL_I2C_Init+0x274>)
 80037e0:	428b      	cmp	r3, r1
 80037e2:	d819      	bhi.n	8003818 <HAL_I2C_Init+0x13c>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e59      	subs	r1, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037f8:	400b      	ands	r3, r1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_I2C_Init+0x138>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1e59      	subs	r1, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fbb1 f3f3 	udiv	r3, r1, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	e051      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003814:	2304      	movs	r3, #4
 8003816:	e04f      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d111      	bne.n	8003844 <HAL_I2C_Init+0x168>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e012      	b.n	800386a <HAL_I2C_Init+0x18e>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e58      	subs	r0, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	0099      	lsls	r1, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	fbb0 f3f3 	udiv	r3, r0, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Init+0x196>
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10e      	bne.n	8003898 <HAL_I2C_Init+0x1bc>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e58      	subs	r0, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	440b      	add	r3, r1
 8003888:	fbb0 f3f3 	udiv	r3, r0, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003896:	e00f      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	0099      	lsls	r1, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	6809      	ldr	r1, [r1, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6911      	ldr	r1, [r2, #16]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68d2      	ldr	r2, [r2, #12]
 80038f2:	4311      	orrs	r1, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	000186a0 	.word	0x000186a0
 8003954:	001e847f 	.word	0x001e847f
 8003958:	003d08ff 	.word	0x003d08ff
 800395c:	431bde83 	.word	0x431bde83
 8003960:	10624dd3 	.word	0x10624dd3

08003964 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	460b      	mov	r3, r1
 8003978:	813b      	strh	r3, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800397e:	f7fe fdcf 	bl	8002520 <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b20      	cmp	r3, #32
 800398e:	f040 80d9 	bne.w	8003b44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2319      	movs	r3, #25
 8003998:	2201      	movs	r2, #1
 800399a:	496d      	ldr	r1, [pc, #436]	@ (8003b50 <HAL_I2C_Mem_Write+0x1ec>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fc8b 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
 80039aa:	e0cc      	b.n	8003b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_Mem_Write+0x56>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0c5      	b.n	8003b46 <HAL_I2C_Mem_Write+0x1e2>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d007      	beq.n	80039e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2221      	movs	r2, #33	@ 0x21
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2240      	movs	r2, #64	@ 0x40
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8003b54 <HAL_I2C_Mem_Write+0x1f0>)
 8003a20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a22:	88f8      	ldrh	r0, [r7, #6]
 8003a24:	893a      	ldrh	r2, [r7, #8]
 8003a26:	8979      	ldrh	r1, [r7, #10]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	4603      	mov	r3, r0
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fac2 	bl	8003fbc <I2C_RequestMemoryWrite>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d052      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e081      	b.n	8003b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fd50 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d107      	bne.n	8003a6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06b      	b.n	8003b46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_I2C_Mem_Write+0x180>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d017      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1aa      	bne.n	8003a42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fd43 	bl	800457c <I2C_WaitOnBTFFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d107      	bne.n	8003b14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e016      	b.n	8003b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	00100002 	.word	0x00100002
 8003b54:	ffff0000 	.word	0xffff0000

08003b58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	@ 0x30
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	817b      	strh	r3, [r7, #10]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	813b      	strh	r3, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b72:	f7fe fcd5 	bl	8002520 <HAL_GetTick>
 8003b76:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	f040 8214 	bne.w	8003fae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2319      	movs	r3, #25
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	497b      	ldr	r1, [pc, #492]	@ (8003d7c <HAL_I2C_Mem_Read+0x224>)
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fb91 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e207      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_I2C_Mem_Read+0x56>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e200      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d007      	beq.n	8003bd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003be2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2222      	movs	r2, #34	@ 0x22
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2240      	movs	r2, #64	@ 0x40
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a5b      	ldr	r2, [pc, #364]	@ (8003d80 <HAL_I2C_Mem_Read+0x228>)
 8003c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c16:	88f8      	ldrh	r0, [r7, #6]
 8003c18:	893a      	ldrh	r2, [r7, #8]
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	4603      	mov	r3, r0
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fa5e 	bl	80040e8 <I2C_RequestMemoryRead>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e1bc      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d113      	bne.n	8003c66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e190      	b.n	8003f88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d11b      	bne.n	8003ca6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e170      	b.n	8003f88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d11b      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	e150      	b.n	8003f88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cfc:	e144      	b.n	8003f88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	f200 80f1 	bhi.w	8003eea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d123      	bne.n	8003d58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fc79 	bl	800460c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e145      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d56:	e117      	b.n	8003f88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d14e      	bne.n	8003dfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d66:	2200      	movs	r2, #0
 8003d68:	4906      	ldr	r1, [pc, #24]	@ (8003d84 <HAL_I2C_Mem_Read+0x22c>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 faa4 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e11a      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
 8003d7a:	bf00      	nop
 8003d7c:	00100002 	.word	0x00100002
 8003d80:	ffff0000 	.word	0xffff0000
 8003d84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dfc:	e0c4      	b.n	8003f88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	2200      	movs	r2, #0
 8003e06:	496c      	ldr	r1, [pc, #432]	@ (8003fb8 <HAL_I2C_Mem_Read+0x460>)
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fa55 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0cb      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e60:	2200      	movs	r2, #0
 8003e62:	4955      	ldr	r1, [pc, #340]	@ (8003fb8 <HAL_I2C_Mem_Read+0x460>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fa27 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e09d      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ee8:	e04e      	b.n	8003f88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fb8c 	bl	800460c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e058      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d124      	bne.n	8003f88 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d107      	bne.n	8003f56 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f47f aeb6 	bne.w	8003cfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3728      	adds	r7, #40	@ 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	00010004 	.word	0x00010004

08003fbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	817b      	strh	r3, [r7, #10]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	813b      	strh	r3, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f960 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800400c:	d103      	bne.n	8004016 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004014:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e05f      	b.n	80040da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	492d      	ldr	r1, [pc, #180]	@ (80040e4 <I2C_RequestMemoryWrite+0x128>)
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f9bb 	bl	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e04c      	b.n	80040da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	6a39      	ldr	r1, [r7, #32]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fa46 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2b04      	cmp	r3, #4
 800406c:	d107      	bne.n	800407e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e02b      	b.n	80040da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004088:	893b      	ldrh	r3, [r7, #8]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	611a      	str	r2, [r3, #16]
 8004092:	e021      	b.n	80040d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004094:	893b      	ldrh	r3, [r7, #8]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	b29b      	uxth	r3, r3
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a4:	6a39      	ldr	r1, [r7, #32]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fa20 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d107      	bne.n	80040ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e005      	b.n	80040da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ce:	893b      	ldrh	r3, [r7, #8]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	00010002 	.word	0x00010002

080040e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	817b      	strh	r3, [r7, #10]
 80040fa:	460b      	mov	r3, r1
 80040fc:	813b      	strh	r3, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	2200      	movs	r2, #0
 800412a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f8c2 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004148:	d103      	bne.n	8004152 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0aa      	b.n	80042ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004156:	897b      	ldrh	r3, [r7, #10]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	4952      	ldr	r1, [pc, #328]	@ (80042b4 <I2C_RequestMemoryRead+0x1cc>)
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f91d 	bl	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e097      	b.n	80042ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004194:	6a39      	ldr	r1, [r7, #32]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f9a8 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d107      	bne.n	80041ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e076      	b.n	80042ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d105      	bne.n	80041d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]
 80041ce:	e021      	b.n	8004214 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041d0:	893b      	ldrh	r3, [r7, #8]
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	6a39      	ldr	r1, [r7, #32]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f982 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d107      	bne.n	8004206 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e050      	b.n	80042ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800420a:	893b      	ldrh	r3, [r7, #8]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004216:	6a39      	ldr	r1, [r7, #32]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f967 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00d      	beq.n	8004240 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	2b04      	cmp	r3, #4
 800422a:	d107      	bne.n	800423c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e035      	b.n	80042ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2200      	movs	r2, #0
 8004258:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f82b 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00d      	beq.n	8004284 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004276:	d103      	bne.n	8004280 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800427e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e013      	b.n	80042ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004284:	897b      	ldrh	r3, [r7, #10]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	6a3a      	ldr	r2, [r7, #32]
 8004298:	4906      	ldr	r1, [pc, #24]	@ (80042b4 <I2C_RequestMemoryRead+0x1cc>)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f886 	bl	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	00010002 	.word	0x00010002

080042b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c8:	e048      	b.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d044      	beq.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fe f925 	bl	8002520 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d139      	bne.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10d      	bne.n	800430e <I2C_WaitOnFlagUntilTimeout+0x56>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	e00c      	b.n	8004328 <I2C_WaitOnFlagUntilTimeout+0x70>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	429a      	cmp	r2, r3
 800432c:	d116      	bne.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e023      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10d      	bne.n	8004382 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	43da      	mvns	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	e00c      	b.n	800439c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	43da      	mvns	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d093      	beq.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ba:	e071      	b.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d123      	bne.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e067      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d041      	beq.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fe f880 	bl	8002520 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d136      	bne.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10c      	bne.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	e00b      	b.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e021      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10c      	bne.n	80044c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	43da      	mvns	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e00b      	b.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	43da      	mvns	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af6d 	bne.w	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f8:	e034      	b.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f8e3 	bl	80046c6 <I2C_IsAcknowledgeFailed>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e034      	b.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d028      	beq.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fe f805 	bl	8002520 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11d      	bne.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d016      	beq.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e007      	b.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456e:	2b80      	cmp	r3, #128	@ 0x80
 8004570:	d1c3      	bne.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004588:	e034      	b.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f89b 	bl	80046c6 <I2C_IsAcknowledgeFailed>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e034      	b.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d028      	beq.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fd ffbd 	bl	8002520 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11d      	bne.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d016      	beq.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d1c3      	bne.n	800458a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004618:	e049      	b.n	80046ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b10      	cmp	r3, #16
 8004626:	d119      	bne.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0210 	mvn.w	r2, #16
 8004630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e030      	b.n	80046be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465c:	f7fd ff60 	bl	8002520 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11d      	bne.n	80046ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d016      	beq.n	80046ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f043 0220 	orr.w	r2, r3, #32
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e007      	b.n	80046be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b40      	cmp	r3, #64	@ 0x40
 80046ba:	d1ae      	bne.n	800461a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046dc:	d11b      	bne.n	8004716 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	f043 0204 	orr.w	r2, r3, #4
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	4a1f      	ldr	r2, [pc, #124]	@ (80047b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	@ 0x40
 800473e:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800474a:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004750:	f7fd fee6 	bl	8002520 <HAL_GetTick>
 8004754:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004756:	e009      	b.n	800476c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004758:	f7fd fee2 	bl	8002520 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004766:	d901      	bls.n	800476c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e01f      	b.n	80047ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800476c:	4b13      	ldr	r3, [pc, #76]	@ (80047bc <HAL_PWREx_EnableOverDrive+0x98>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004778:	d1ee      	bne.n	8004758 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800477a:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004780:	f7fd fece 	bl	8002520 <HAL_GetTick>
 8004784:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004786:	e009      	b.n	800479c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004788:	f7fd feca 	bl	8002520 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004796:	d901      	bls.n	800479c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e007      	b.n	80047ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800479c:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <HAL_PWREx_EnableOverDrive+0x98>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047a8:	d1ee      	bne.n	8004788 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	420e0040 	.word	0x420e0040
 80047bc:	40007000 	.word	0x40007000
 80047c0:	420e0044 	.word	0x420e0044

080047c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0cc      	b.n	8004972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d8:	4b68      	ldr	r3, [pc, #416]	@ (800497c <HAL_RCC_ClockConfig+0x1b8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d90c      	bls.n	8004800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b65      	ldr	r3, [pc, #404]	@ (800497c <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b63      	ldr	r3, [pc, #396]	@ (800497c <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0b8      	b.n	8004972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004818:	4b59      	ldr	r3, [pc, #356]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a58      	ldr	r2, [pc, #352]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004830:	4b53      	ldr	r3, [pc, #332]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	4a52      	ldr	r2, [pc, #328]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800483a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483c:	4b50      	ldr	r3, [pc, #320]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	494d      	ldr	r1, [pc, #308]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d044      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d119      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e07f      	b.n	8004972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d003      	beq.n	8004882 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487e:	2b03      	cmp	r3, #3
 8004880:	d107      	bne.n	8004892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004882:	4b3f      	ldr	r3, [pc, #252]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e06f      	b.n	8004972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004892:	4b3b      	ldr	r3, [pc, #236]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e067      	b.n	8004972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048a2:	4b37      	ldr	r3, [pc, #220]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f023 0203 	bic.w	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4934      	ldr	r1, [pc, #208]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b4:	f7fd fe34 	bl	8002520 <HAL_GetTick>
 80048b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048bc:	f7fd fe30 	bl	8002520 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e04f      	b.n	8004972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 020c 	and.w	r2, r3, #12
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d1eb      	bne.n	80048bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e4:	4b25      	ldr	r3, [pc, #148]	@ (800497c <HAL_RCC_ClockConfig+0x1b8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d20c      	bcs.n	800490c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b22      	ldr	r3, [pc, #136]	@ (800497c <HAL_RCC_ClockConfig+0x1b8>)
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b20      	ldr	r3, [pc, #128]	@ (800497c <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e032      	b.n	8004972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004918:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4916      	ldr	r1, [pc, #88]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004936:	4b12      	ldr	r3, [pc, #72]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	490e      	ldr	r1, [pc, #56]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800494a:	f000 f855 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 800494e:	4602      	mov	r2, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	490a      	ldr	r1, [pc, #40]	@ (8004984 <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	5ccb      	ldrb	r3, [r1, r3]
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	4a09      	ldr	r2, [pc, #36]	@ (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004966:	4b09      	ldr	r3, [pc, #36]	@ (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fd94 	bl	8002498 <HAL_InitTick>

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40023c00 	.word	0x40023c00
 8004980:	40023800 	.word	0x40023800
 8004984:	08007858 	.word	0x08007858
 8004988:	20000000 	.word	0x20000000
 800498c:	20000004 	.word	0x20000004

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b03      	ldr	r3, [pc, #12]	@ (80049a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000000 	.word	0x20000000

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049ac:	f7ff fff0 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0a9b      	lsrs	r3, r3, #10
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	@ (80049cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40023800 	.word	0x40023800
 80049cc:	08007868 	.word	0x08007868

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d4:	f7ff ffdc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0b5b      	lsrs	r3, r3, #13
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	@ (80049f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800
 80049f4:	08007868 	.word	0x08007868

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b0ae      	sub	sp, #184	@ 0xb8
 80049fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a1e:	4bcb      	ldr	r3, [pc, #812]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	f200 8206 	bhi.w	8004e38 <HAL_RCC_GetSysClockFreq+0x440>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004e39 	.word	0x08004e39
 8004a3c:	08004e39 	.word	0x08004e39
 8004a40:	08004e39 	.word	0x08004e39
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004e39 	.word	0x08004e39
 8004a4c:	08004e39 	.word	0x08004e39
 8004a50:	08004e39 	.word	0x08004e39
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004e39 	.word	0x08004e39
 8004a5c:	08004e39 	.word	0x08004e39
 8004a60:	08004e39 	.word	0x08004e39
 8004a64:	08004c69 	.word	0x08004c69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a68:	4bb9      	ldr	r3, [pc, #740]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a6e:	e1e7      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a70:	4bb8      	ldr	r3, [pc, #736]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a76:	e1e3      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4bb4      	ldr	r3, [pc, #720]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a84:	4bb1      	ldr	r3, [pc, #708]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d071      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a90:	4bae      	ldr	r3, [pc, #696]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	462b      	mov	r3, r5
 8004aba:	f04f 0000 	mov.w	r0, #0
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	0159      	lsls	r1, r3, #5
 8004ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac8:	0150      	lsls	r0, r2, #5
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4621      	mov	r1, r4
 8004ad0:	1a51      	subs	r1, r2, r1
 8004ad2:	6439      	str	r1, [r7, #64]	@ 0x40
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8004ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ae8:	4649      	mov	r1, r9
 8004aea:	018b      	lsls	r3, r1, #6
 8004aec:	4641      	mov	r1, r8
 8004aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004af2:	4641      	mov	r1, r8
 8004af4:	018a      	lsls	r2, r1, #6
 8004af6:	4641      	mov	r1, r8
 8004af8:	1a51      	subs	r1, r2, r1
 8004afa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004afc:	4649      	mov	r1, r9
 8004afe:	eb63 0301 	sbc.w	r3, r3, r1
 8004b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b10:	4649      	mov	r1, r9
 8004b12:	00cb      	lsls	r3, r1, #3
 8004b14:	4641      	mov	r1, r8
 8004b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	00ca      	lsls	r2, r1, #3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4622      	mov	r2, r4
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b40:	4629      	mov	r1, r5
 8004b42:	024b      	lsls	r3, r1, #9
 8004b44:	4621      	mov	r1, r4
 8004b46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	024a      	lsls	r2, r1, #9
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b64:	f7fb ffd2 	bl	8000b0c <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b72:	e067      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b74:	4b75      	ldr	r3, [pc, #468]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b80:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b8e:	2300      	movs	r3, #0
 8004b90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	0159      	lsls	r1, r3, #5
 8004ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba8:	0150      	lsls	r0, r2, #5
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4621      	mov	r1, r4
 8004bb0:	1a51      	subs	r1, r2, r1
 8004bb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004bc8:	4649      	mov	r1, r9
 8004bca:	018b      	lsls	r3, r1, #6
 8004bcc:	4641      	mov	r1, r8
 8004bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	018a      	lsls	r2, r1, #6
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bdc:	4649      	mov	r1, r9
 8004bde:	eb63 0b01 	sbc.w	fp, r3, r1
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bf6:	4692      	mov	sl, r2
 8004bf8:	469b      	mov	fp, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	eb1a 0303 	adds.w	r3, sl, r3
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	462b      	mov	r3, r5
 8004c04:	eb4b 0303 	adc.w	r3, fp, r3
 8004c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c16:	4629      	mov	r1, r5
 8004c18:	028b      	lsls	r3, r1, #10
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c20:	4621      	mov	r1, r4
 8004c22:	028a      	lsls	r2, r1, #10
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c30:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c36:	f7fb ff69 	bl	8000b0c <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4613      	mov	r3, r2
 8004c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c44:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c66:	e0eb      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c68:	4b38      	ldr	r3, [pc, #224]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c74:	4b35      	ldr	r3, [pc, #212]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d06b      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c80:	4b32      	ldr	r3, [pc, #200]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	2200      	movs	r2, #0
 8004c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c94:	2300      	movs	r3, #0
 8004c96:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	f04f 0000 	mov.w	r0, #0
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	0159      	lsls	r1, r3, #5
 8004caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cae:	0150      	lsls	r0, r2, #5
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	1a51      	subs	r1, r2, r1
 8004cb8:	61b9      	str	r1, [r7, #24]
 8004cba:	4629      	mov	r1, r5
 8004cbc:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004cce:	4659      	mov	r1, fp
 8004cd0:	018b      	lsls	r3, r1, #6
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cd8:	4651      	mov	r1, sl
 8004cda:	018a      	lsls	r2, r1, #6
 8004cdc:	4651      	mov	r1, sl
 8004cde:	ebb2 0801 	subs.w	r8, r2, r1
 8004ce2:	4659      	mov	r1, fp
 8004ce4:	eb63 0901 	sbc.w	r9, r3, r1
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfc:	4690      	mov	r8, r2
 8004cfe:	4699      	mov	r9, r3
 8004d00:	4623      	mov	r3, r4
 8004d02:	eb18 0303 	adds.w	r3, r8, r3
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	462b      	mov	r3, r5
 8004d0a:	eb49 0303 	adc.w	r3, r9, r3
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	024b      	lsls	r3, r1, #9
 8004d20:	4621      	mov	r1, r4
 8004d22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d26:	4621      	mov	r1, r4
 8004d28:	024a      	lsls	r2, r1, #9
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d32:	2200      	movs	r2, #0
 8004d34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d3c:	f7fb fee6 	bl	8000b0c <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d4a:	e065      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x420>
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d58:	4b3d      	ldr	r3, [pc, #244]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	099b      	lsrs	r3, r3, #6
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	4611      	mov	r1, r2
 8004d64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d68:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d72:	4642      	mov	r2, r8
 8004d74:	464b      	mov	r3, r9
 8004d76:	f04f 0000 	mov.w	r0, #0
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	0159      	lsls	r1, r3, #5
 8004d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d84:	0150      	lsls	r0, r2, #5
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	1a51      	subs	r1, r2, r1
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	4649      	mov	r1, r9
 8004d92:	eb63 0301 	sbc.w	r3, r3, r1
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004da4:	4659      	mov	r1, fp
 8004da6:	018b      	lsls	r3, r1, #6
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dae:	4651      	mov	r1, sl
 8004db0:	018a      	lsls	r2, r1, #6
 8004db2:	4651      	mov	r1, sl
 8004db4:	1a54      	subs	r4, r2, r1
 8004db6:	4659      	mov	r1, fp
 8004db8:	eb63 0501 	sbc.w	r5, r3, r1
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	00eb      	lsls	r3, r5, #3
 8004dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dca:	00e2      	lsls	r2, r4, #3
 8004dcc:	4614      	mov	r4, r2
 8004dce:	461d      	mov	r5, r3
 8004dd0:	4643      	mov	r3, r8
 8004dd2:	18e3      	adds	r3, r4, r3
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	eb45 0303 	adc.w	r3, r5, r3
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dea:	4629      	mov	r1, r5
 8004dec:	028b      	lsls	r3, r1, #10
 8004dee:	4621      	mov	r1, r4
 8004df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004df4:	4621      	mov	r1, r4
 8004df6:	028a      	lsls	r2, r1, #10
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e00:	2200      	movs	r2, #0
 8004e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e04:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e0a:	f7fb fe7f 	bl	8000b0c <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4613      	mov	r3, r2
 8004e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e18:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	0f1b      	lsrs	r3, r3, #28
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e36:	e003      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	37b8      	adds	r7, #184	@ 0xb8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	00f42400 	.word	0x00f42400

08004e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e28d      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8083 	beq.w	8004f7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e78:	4b94      	ldr	r3, [pc, #592]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d019      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e84:	4b91      	ldr	r3, [pc, #580]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e90:	4b8e      	ldr	r3, [pc, #568]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d112      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eaa:	4b88      	ldr	r3, [pc, #544]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb6:	d10b      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb8:	4b84      	ldr	r3, [pc, #528]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05b      	beq.n	8004f7c <HAL_RCC_OscConfig+0x124>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d157      	bne.n	8004f7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e25a      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x90>
 8004eda:	4b7c      	ldr	r3, [pc, #496]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7b      	ldr	r2, [pc, #492]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e01d      	b.n	8004f24 <HAL_RCC_OscConfig+0xcc>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0xb4>
 8004ef2:	4b76      	ldr	r3, [pc, #472]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a75      	ldr	r2, [pc, #468]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b73      	ldr	r3, [pc, #460]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a72      	ldr	r2, [pc, #456]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCC_OscConfig+0xcc>
 8004f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6e      	ldr	r2, [pc, #440]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	4b6c      	ldr	r3, [pc, #432]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d013      	beq.n	8004f54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd faf8 	bl	8002520 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fd faf4 	bl	8002520 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	@ 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e21f      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	4b61      	ldr	r3, [pc, #388]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0xdc>
 8004f52:	e014      	b.n	8004f7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fd fae4 	bl	8002520 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f5c:	f7fd fae0 	bl	8002520 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b64      	cmp	r3, #100	@ 0x64
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e20b      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	4b57      	ldr	r3, [pc, #348]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x104>
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d06f      	beq.n	800506a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f8a:	4b50      	ldr	r3, [pc, #320]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d017      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f96:	4b4d      	ldr	r3, [pc, #308]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d105      	bne.n	8004fae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fae:	4b47      	ldr	r3, [pc, #284]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d11c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b44      	ldr	r3, [pc, #272]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d116      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	4b41      	ldr	r3, [pc, #260]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_RCC_OscConfig+0x186>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e1d3      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4937      	ldr	r1, [pc, #220]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff2:	e03a      	b.n	800506a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ffc:	4b34      	ldr	r3, [pc, #208]	@ (80050d0 <HAL_RCC_OscConfig+0x278>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005002:	f7fd fa8d 	bl	8002520 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500a:	f7fd fa89 	bl	8002520 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e1b4      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501c:	4b2b      	ldr	r3, [pc, #172]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b28      	ldr	r3, [pc, #160]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4925      	ldr	r1, [pc, #148]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
 800503c:	e015      	b.n	800506a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503e:	4b24      	ldr	r3, [pc, #144]	@ (80050d0 <HAL_RCC_OscConfig+0x278>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd fa6c 	bl	8002520 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504c:	f7fd fa68 	bl	8002520 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e193      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d036      	beq.n	80050e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507e:	4b15      	ldr	r3, [pc, #84]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd fa4c 	bl	8002520 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508c:	f7fd fa48 	bl	8002520 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e173      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <HAL_RCC_OscConfig+0x274>)
 80050a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x234>
 80050aa:	e01b      	b.n	80050e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ac:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b2:	f7fd fa35 	bl	8002520 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	e00e      	b.n	80050d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ba:	f7fd fa31 	bl	8002520 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d907      	bls.n	80050d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e15c      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	42470000 	.word	0x42470000
 80050d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ea      	bne.n	80050ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8097 	beq.w	8005220 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f6:	4b83      	ldr	r3, [pc, #524]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	4b7f      	ldr	r3, [pc, #508]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	4a7e      	ldr	r2, [pc, #504]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005110:	6413      	str	r3, [r2, #64]	@ 0x40
 8005112:	4b7c      	ldr	r3, [pc, #496]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b79      	ldr	r3, [pc, #484]	@ (8005308 <HAL_RCC_OscConfig+0x4b0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b76      	ldr	r3, [pc, #472]	@ (8005308 <HAL_RCC_OscConfig+0x4b0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a75      	ldr	r2, [pc, #468]	@ (8005308 <HAL_RCC_OscConfig+0x4b0>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fd f9f1 	bl	8002520 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fd f9ed 	bl	8002520 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e118      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	4b6c      	ldr	r3, [pc, #432]	@ (8005308 <HAL_RCC_OscConfig+0x4b0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x31e>
 8005168:	4b66      	ldr	r3, [pc, #408]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516c:	4a65      	ldr	r2, [pc, #404]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	@ 0x70
 8005174:	e01c      	b.n	80051b0 <HAL_RCC_OscConfig+0x358>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b05      	cmp	r3, #5
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x340>
 800517e:	4b61      	ldr	r3, [pc, #388]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	4a60      	ldr	r2, [pc, #384]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005184:	f043 0304 	orr.w	r3, r3, #4
 8005188:	6713      	str	r3, [r2, #112]	@ 0x70
 800518a:	4b5e      	ldr	r3, [pc, #376]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	4a5d      	ldr	r2, [pc, #372]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	@ 0x70
 8005196:	e00b      	b.n	80051b0 <HAL_RCC_OscConfig+0x358>
 8005198:	4b5a      	ldr	r3, [pc, #360]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	4a59      	ldr	r2, [pc, #356]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a4:	4b57      	ldr	r3, [pc, #348]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a56      	ldr	r2, [pc, #344]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fd f9b2 	bl	8002520 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c0:	f7fd f9ae 	bl	8002520 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0d7      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0ee      	beq.n	80051c0 <HAL_RCC_OscConfig+0x368>
 80051e2:	e014      	b.n	800520e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e4:	f7fd f99c 	bl	8002520 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fd f998 	bl	8002520 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0c1      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005202:	4b40      	ldr	r3, [pc, #256]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ee      	bne.n	80051ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005214:	4b3b      	ldr	r3, [pc, #236]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	4a3a      	ldr	r2, [pc, #232]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800521a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80ad 	beq.w	8005384 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522a:	4b36      	ldr	r3, [pc, #216]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b08      	cmp	r3, #8
 8005234:	d060      	beq.n	80052f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d145      	bne.n	80052ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b33      	ldr	r3, [pc, #204]	@ (800530c <HAL_RCC_OscConfig+0x4b4>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd f96c 	bl	8002520 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fd f968 	bl	8002520 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e093      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	4b29      	ldr	r3, [pc, #164]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005294:	071b      	lsls	r3, r3, #28
 8005296:	491b      	ldr	r1, [pc, #108]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800529c:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <HAL_RCC_OscConfig+0x4b4>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fd f93d 	bl	8002520 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fd f939 	bl	8002520 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e064      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052bc:	4b11      	ldr	r3, [pc, #68]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x452>
 80052c8:	e05c      	b.n	8005384 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ca:	4b10      	ldr	r3, [pc, #64]	@ (800530c <HAL_RCC_OscConfig+0x4b4>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fd f926 	bl	8002520 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fd f922 	bl	8002520 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e04d      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ea:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <HAL_RCC_OscConfig+0x4ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x480>
 80052f6:	e045      	b.n	8005384 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e040      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
 8005304:	40023800 	.word	0x40023800
 8005308:	40007000 	.word	0x40007000
 800530c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005310:	4b1f      	ldr	r3, [pc, #124]	@ (8005390 <HAL_RCC_OscConfig+0x538>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d030      	beq.n	8005380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d129      	bne.n	8005380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d122      	bne.n	8005380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005340:	4013      	ands	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005348:	4293      	cmp	r3, r2
 800534a:	d119      	bne.n	8005380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	3b01      	subs	r3, #1
 800535a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d10f      	bne.n	8005380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d107      	bne.n	8005380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800

08005394 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e041      	b.n	800542a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fc fdf0 	bl	8001fa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 faec 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <HAL_TIM_PWM_Start+0x24>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e022      	b.n	800549e <HAL_TIM_PWM_Start+0x6a>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b04      	cmp	r3, #4
 800545c:	d109      	bne.n	8005472 <HAL_TIM_PWM_Start+0x3e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	bf14      	ite	ne
 800546a:	2301      	movne	r3, #1
 800546c:	2300      	moveq	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e015      	b.n	800549e <HAL_TIM_PWM_Start+0x6a>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d109      	bne.n	800548c <HAL_TIM_PWM_Start+0x58>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e008      	b.n	800549e <HAL_TIM_PWM_Start+0x6a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07c      	b.n	80055a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x82>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054b4:	e013      	b.n	80054de <HAL_TIM_PWM_Start+0xaa>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_PWM_Start+0x92>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054c4:	e00b      	b.n	80054de <HAL_TIM_PWM_Start+0xaa>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_PWM_Start+0xa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054d4:	e003      	b.n	80054de <HAL_TIM_PWM_Start+0xaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fcbe 	bl	8005e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2d      	ldr	r2, [pc, #180]	@ (80055a8 <HAL_TIM_PWM_Start+0x174>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_PWM_Start+0xcc>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2c      	ldr	r2, [pc, #176]	@ (80055ac <HAL_TIM_PWM_Start+0x178>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_PWM_Start+0xd0>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Start+0xd2>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005518:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a22      	ldr	r2, [pc, #136]	@ (80055a8 <HAL_TIM_PWM_Start+0x174>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d022      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552c:	d01d      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <HAL_TIM_PWM_Start+0x17c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1d      	ldr	r2, [pc, #116]	@ (80055b4 <HAL_TIM_PWM_Start+0x180>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <HAL_TIM_PWM_Start+0x184>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a16      	ldr	r2, [pc, #88]	@ (80055ac <HAL_TIM_PWM_Start+0x178>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <HAL_TIM_PWM_Start+0x188>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <HAL_TIM_PWM_Start+0x18c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d111      	bne.n	800558e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d010      	beq.n	800559e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558c:	e007      	b.n	800559e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40001800 	.word	0x40001800

080055c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e097      	b.n	8005708 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fc fc5d 	bl	8001eac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005608:	f023 0307 	bic.w	r3, r3, #7
 800560c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3304      	adds	r3, #4
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 f9c9 	bl	80059b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	4313      	orrs	r3, r2
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005664:	f023 030c 	bic.w	r3, r3, #12
 8005668:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	4313      	orrs	r3, r2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	011a      	lsls	r2, r3, #4
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	031b      	lsls	r3, r3, #12
 8005694:	4313      	orrs	r3, r2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	4313      	orrs	r3, r2
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005720:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005728:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005730:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005738:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d110      	bne.n	8005762 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d102      	bne.n	800574c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005746:	7b7b      	ldrb	r3, [r7, #13]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d001      	beq.n	8005750 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e069      	b.n	8005824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005760:	e031      	b.n	80057c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d110      	bne.n	800578a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d102      	bne.n	8005774 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800576e:	7b3b      	ldrb	r3, [r7, #12]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d001      	beq.n	8005778 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e055      	b.n	8005824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005788:	e01d      	b.n	80057c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d108      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d105      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005796:	7b7b      	ldrb	r3, [r7, #13]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d102      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800579c:	7b3b      	ldrb	r3, [r7, #12]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d001      	beq.n	80057a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e03e      	b.n	8005824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_TIM_Encoder_Start+0xc4>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d008      	beq.n	80057e4 <HAL_TIM_Encoder_Start+0xd4>
 80057d2:	e00f      	b.n	80057f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fb43 	bl	8005e68 <TIM_CCxChannelCmd>
      break;
 80057e2:	e016      	b.n	8005812 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2201      	movs	r2, #1
 80057ea:	2104      	movs	r1, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fb3b 	bl	8005e68 <TIM_CCxChannelCmd>
      break;
 80057f2:	e00e      	b.n	8005812 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2201      	movs	r2, #1
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fb33 	bl	8005e68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	2104      	movs	r1, #4
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fb2c 	bl	8005e68 <TIM_CCxChannelCmd>
      break;
 8005810:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e0ae      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b0c      	cmp	r3, #12
 8005856:	f200 809f 	bhi.w	8005998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005895 	.word	0x08005895
 8005864:	08005999 	.word	0x08005999
 8005868:	08005999 	.word	0x08005999
 800586c:	08005999 	.word	0x08005999
 8005870:	080058d5 	.word	0x080058d5
 8005874:	08005999 	.word	0x08005999
 8005878:	08005999 	.word	0x08005999
 800587c:	08005999 	.word	0x08005999
 8005880:	08005917 	.word	0x08005917
 8005884:	08005999 	.word	0x08005999
 8005888:	08005999 	.word	0x08005999
 800588c:	08005999 	.word	0x08005999
 8005890:	08005957 	.word	0x08005957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f934 	bl	8005b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0208 	orr.w	r2, r2, #8
 80058ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0204 	bic.w	r2, r2, #4
 80058be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6999      	ldr	r1, [r3, #24]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	619a      	str	r2, [r3, #24]
      break;
 80058d2:	e064      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f984 	bl	8005be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	619a      	str	r2, [r3, #24]
      break;
 8005914:	e043      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f9d9 	bl	8005cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0208 	orr.w	r2, r2, #8
 8005930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0204 	bic.w	r2, r2, #4
 8005940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69d9      	ldr	r1, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	61da      	str	r2, [r3, #28]
      break;
 8005954:	e023      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fa2d 	bl	8005dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	021a      	lsls	r2, r3, #8
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	61da      	str	r2, [r3, #28]
      break;
 8005996:	e002      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a46      	ldr	r2, [pc, #280]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a43      	ldr	r2, [pc, #268]	@ (8005ae0 <TIM_Base_SetConfig+0x130>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a42      	ldr	r2, [pc, #264]	@ (8005ae4 <TIM_Base_SetConfig+0x134>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a41      	ldr	r2, [pc, #260]	@ (8005ae8 <TIM_Base_SetConfig+0x138>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a40      	ldr	r2, [pc, #256]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a35      	ldr	r2, [pc, #212]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d02b      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a10:	d027      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a32      	ldr	r2, [pc, #200]	@ (8005ae0 <TIM_Base_SetConfig+0x130>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d023      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ae4 <TIM_Base_SetConfig+0x134>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01f      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a30      	ldr	r2, [pc, #192]	@ (8005ae8 <TIM_Base_SetConfig+0x138>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01b      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d017      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2e      	ldr	r2, [pc, #184]	@ (8005af0 <TIM_Base_SetConfig+0x140>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005af4 <TIM_Base_SetConfig+0x144>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2c      	ldr	r2, [pc, #176]	@ (8005af8 <TIM_Base_SetConfig+0x148>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8005afc <TIM_Base_SetConfig+0x14c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2a      	ldr	r2, [pc, #168]	@ (8005b00 <TIM_Base_SetConfig+0x150>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a29      	ldr	r2, [pc, #164]	@ (8005b04 <TIM_Base_SetConfig+0x154>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d108      	bne.n	8005a74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a10      	ldr	r2, [pc, #64]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a12      	ldr	r2, [pc, #72]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d103      	bne.n	8005ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d105      	bne.n	8005ace <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40010400 	.word	0x40010400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800
 8005afc:	40001800 	.word	0x40001800
 8005b00:	40001c00 	.word	0x40001c00
 8005b04:	40002000 	.word	0x40002000

08005b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f023 0201 	bic.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 0302 	bic.w	r3, r3, #2
 8005b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a20      	ldr	r2, [pc, #128]	@ (8005be0 <TIM_OC1_SetConfig+0xd8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC1_SetConfig+0x64>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a1f      	ldr	r2, [pc, #124]	@ (8005be4 <TIM_OC1_SetConfig+0xdc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d10c      	bne.n	8005b86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0308 	bic.w	r3, r3, #8
 8005b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f023 0304 	bic.w	r3, r3, #4
 8005b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a15      	ldr	r2, [pc, #84]	@ (8005be0 <TIM_OC1_SetConfig+0xd8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_OC1_SetConfig+0x8e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a14      	ldr	r2, [pc, #80]	@ (8005be4 <TIM_OC1_SetConfig+0xdc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d111      	bne.n	8005bba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	621a      	str	r2, [r3, #32]
}
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40010400 	.word	0x40010400

08005be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f023 0210 	bic.w	r2, r3, #16
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0320 	bic.w	r3, r3, #32
 8005c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a22      	ldr	r2, [pc, #136]	@ (8005ccc <TIM_OC2_SetConfig+0xe4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC2_SetConfig+0x68>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a21      	ldr	r2, [pc, #132]	@ (8005cd0 <TIM_OC2_SetConfig+0xe8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d10d      	bne.n	8005c6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ccc <TIM_OC2_SetConfig+0xe4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_OC2_SetConfig+0x94>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a16      	ldr	r2, [pc, #88]	@ (8005cd0 <TIM_OC2_SetConfig+0xe8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d113      	bne.n	8005ca4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a21      	ldr	r2, [pc, #132]	@ (8005db4 <TIM_OC3_SetConfig+0xe0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_OC3_SetConfig+0x66>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a20      	ldr	r2, [pc, #128]	@ (8005db8 <TIM_OC3_SetConfig+0xe4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d10d      	bne.n	8005d56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a16      	ldr	r2, [pc, #88]	@ (8005db4 <TIM_OC3_SetConfig+0xe0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC3_SetConfig+0x92>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a15      	ldr	r2, [pc, #84]	@ (8005db8 <TIM_OC3_SetConfig+0xe4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d113      	bne.n	8005d8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40010000 	.word	0x40010000
 8005db8:	40010400 	.word	0x40010400

08005dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	031b      	lsls	r3, r3, #12
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a12      	ldr	r2, [pc, #72]	@ (8005e60 <TIM_OC4_SetConfig+0xa4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_OC4_SetConfig+0x68>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <TIM_OC4_SetConfig+0xa8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d109      	bne.n	8005e38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	019b      	lsls	r3, r3, #6
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400

08005e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e05a      	b.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a21      	ldr	r2, [pc, #132]	@ (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d022      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f18:	d01d      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d018      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00e      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a18      	ldr	r2, [pc, #96]	@ (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a17      	ldr	r2, [pc, #92]	@ (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d10c      	bne.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40010400 	.word	0x40010400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40001800 	.word	0x40001800

08005fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e042      	b.n	8006044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc f860 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	@ 0x24
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fcdb 	bl	80069ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b20      	cmp	r3, #32
 8006064:	d112      	bne.n	800608c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_UART_Receive_IT+0x26>
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e00b      	b.n	800608e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	461a      	mov	r2, r3
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 faba 	bl	80065fc <UART_Start_Receive_IT>
 8006088:	4603      	mov	r3, r0
 800608a:	e000      	b.n	800608e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b0ba      	sub	sp, #232	@ 0xe8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80060d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10f      	bne.n	80060fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d009      	beq.n	80060fe <HAL_UART_IRQHandler+0x66>
 80060ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb99 	bl	800682e <UART_Receive_IT>
      return;
 80060fc:	e25b      	b.n	80065b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80de 	beq.w	80062c4 <HAL_UART_IRQHandler+0x22c>
 8006108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006118:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80d1 	beq.w	80062c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <HAL_UART_IRQHandler+0xae>
 800612e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613e:	f043 0201 	orr.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <HAL_UART_IRQHandler+0xd2>
 8006152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d005      	beq.n	800616a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006162:	f043 0202 	orr.w	r2, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <HAL_UART_IRQHandler+0xf6>
 8006176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800618e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d011      	beq.n	80061be <HAL_UART_IRQHandler+0x126>
 800619a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d105      	bne.n	80061b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b6:	f043 0208 	orr.w	r2, r3, #8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 81f2 	beq.w	80065ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_UART_IRQHandler+0x14e>
 80061d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fb24 	bl	800682e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b40      	cmp	r3, #64	@ 0x40
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <HAL_UART_IRQHandler+0x17a>
 800620a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d04f      	beq.n	80062b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa2c 	bl	8006670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006222:	2b40      	cmp	r3, #64	@ 0x40
 8006224:	d141      	bne.n	80062aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3314      	adds	r3, #20
 800622c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800623c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006252:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800625e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800626a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1d9      	bne.n	8006226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d013      	beq.n	80062a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627e:	4a7e      	ldr	r2, [pc, #504]	@ (8006478 <HAL_UART_IRQHandler+0x3e0>)
 8006280:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006286:	4618      	mov	r0, r3
 8006288:	f7fc fe1c 	bl	8002ec4 <HAL_DMA_Abort_IT>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a0:	e00e      	b.n	80062c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f994 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a8:	e00a      	b.n	80062c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f990 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	e006      	b.n	80062c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f98c 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80062be:	e175      	b.n	80065ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	bf00      	nop
    return;
 80062c2:	e173      	b.n	80065ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	f040 814f 	bne.w	800656c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8148 	beq.w	800656c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8141 	beq.w	800656c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	60bb      	str	r3, [r7, #8]
 80062fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630a:	2b40      	cmp	r3, #64	@ 0x40
 800630c:	f040 80b6 	bne.w	800647c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800631c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8145 	beq.w	80065b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800632a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800632e:	429a      	cmp	r2, r3
 8006330:	f080 813e 	bcs.w	80065b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800633a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006346:	f000 8088 	beq.w	800645a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006376:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800637a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006382:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800638e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1d9      	bne.n	800634a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3314      	adds	r3, #20
 800639c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3314      	adds	r3, #20
 80063b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e1      	bne.n	8006396 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3314      	adds	r3, #20
 80063d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3314      	adds	r3, #20
 80063f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e3      	bne.n	80063d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800642a:	f023 0310 	bic.w	r3, r3, #16
 800642e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	330c      	adds	r3, #12
 8006438:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800643c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800643e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800644a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e3      	bne.n	8006418 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006454:	4618      	mov	r0, r3
 8006456:	f7fc fcc5 	bl	8002de4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006468:	b29b      	uxth	r3, r3
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	b29b      	uxth	r3, r3
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8b7 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006476:	e09b      	b.n	80065b0 <HAL_UART_IRQHandler+0x518>
 8006478:	08006737 	.word	0x08006737
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006484:	b29b      	uxth	r3, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 808e 	beq.w	80065b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8089 	beq.w	80065b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80064c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80064c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e3      	bne.n	80064a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3314      	adds	r3, #20
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	623b      	str	r3, [r7, #32]
   return(result);
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3314      	adds	r3, #20
 80064fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e3      	bne.n	80064da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0310 	bic.w	r3, r3, #16
 8006536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006544:	61fa      	str	r2, [r7, #28]
 8006546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	69b9      	ldr	r1, [r7, #24]
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	617b      	str	r3, [r7, #20]
   return(result);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e3      	bne.n	8006520 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800655e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f83d 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800656a:	e023      	b.n	80065b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800656c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <HAL_UART_IRQHandler+0x4f4>
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800657c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f8ea 	bl	800675e <UART_Transmit_IT>
    return;
 800658a:	e014      	b.n	80065b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <HAL_UART_IRQHandler+0x51e>
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f92a 	bl	80067fe <UART_EndTransmit_IT>
    return;
 80065aa:	e004      	b.n	80065b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80065ac:	bf00      	nop
 80065ae:	e002      	b.n	80065b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065b0:	bf00      	nop
 80065b2:	e000      	b.n	80065b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065b4:	bf00      	nop
  }
}
 80065b6:	37e8      	adds	r7, #232	@ 0xe8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2222      	movs	r2, #34	@ 0x22
 8006626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006640:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0220 	orr.w	r2, r2, #32
 8006660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b095      	sub	sp, #84	@ 0x54
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006698:	643a      	str	r2, [r7, #64]	@ 0x40
 800669a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800669e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e5      	bne.n	8006678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3314      	adds	r3, #20
 80066ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d119      	bne.n	800671c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0310 	bic.w	r3, r3, #16
 80066fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006708:	61ba      	str	r2, [r7, #24]
 800670a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	613b      	str	r3, [r7, #16]
   return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e5      	bne.n	80066e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800672a:	bf00      	nop
 800672c:	3754      	adds	r7, #84	@ 0x54
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff ff3d 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b21      	cmp	r3, #33	@ 0x21
 8006770:	d13e      	bne.n	80067f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677a:	d114      	bne.n	80067a6 <UART_Transmit_IT+0x48>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d110      	bne.n	80067a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006798:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	1c9a      	adds	r2, r3, #2
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	621a      	str	r2, [r3, #32]
 80067a4:	e008      	b.n	80067b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6211      	str	r1, [r2, #32]
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4619      	mov	r1, r3
 80067c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10f      	bne.n	80067ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e000      	b.n	80067f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fecc 	bl	80065bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b08c      	sub	sp, #48	@ 0x30
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b22      	cmp	r3, #34	@ 0x22
 8006840:	f040 80ae 	bne.w	80069a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800684c:	d117      	bne.n	800687e <UART_Receive_IT+0x50>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d113      	bne.n	800687e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006856:	2300      	movs	r3, #0
 8006858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	b29a      	uxth	r2, r3
 800686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	1c9a      	adds	r2, r3, #2
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	@ 0x28
 800687c:	e026      	b.n	80068cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006882:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006884:	2300      	movs	r3, #0
 8006886:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006890:	d007      	beq.n	80068a2 <UART_Receive_IT+0x74>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <UART_Receive_IT+0x82>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e008      	b.n	80068c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4619      	mov	r1, r3
 80068da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d15d      	bne.n	800699c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0220 	bic.w	r2, r2, #32
 80068ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006922:	2b01      	cmp	r3, #1
 8006924:	d135      	bne.n	8006992 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	613b      	str	r3, [r7, #16]
   return(result);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f023 0310 	bic.w	r3, r3, #16
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694c:	623a      	str	r2, [r7, #32]
 800694e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	69f9      	ldr	r1, [r7, #28]
 8006952:	6a3a      	ldr	r2, [r7, #32]
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	61bb      	str	r3, [r7, #24]
   return(result);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e5      	bne.n	800692c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b10      	cmp	r3, #16
 800696c:	d10a      	bne.n	8006984 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff fe2a 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
 8006990:	e002      	b.n	8006998 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fa fa5a 	bl	8000e4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	e002      	b.n	80069a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	e000      	b.n	80069a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3730      	adds	r7, #48	@ 0x30
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b0:	b0c0      	sub	sp, #256	@ 0x100
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	68d9      	ldr	r1, [r3, #12]
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	ea40 0301 	orr.w	r3, r0, r1
 80069d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a04:	f021 010c 	bic.w	r1, r1, #12
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a12:	430b      	orrs	r3, r1
 8006a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a26:	6999      	ldr	r1, [r3, #24]
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	ea40 0301 	orr.w	r3, r0, r1
 8006a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8006c78 <UART_SetConfig+0x2cc>)
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d005      	beq.n	8006a4c <UART_SetConfig+0xa0>
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b8d      	ldr	r3, [pc, #564]	@ (8006c7c <UART_SetConfig+0x2d0>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d104      	bne.n	8006a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a4c:	f7fd ffc0 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8006a50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a54:	e003      	b.n	8006a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a56:	f7fd ffa7 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8006a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a68:	f040 810c 	bne.w	8006c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	1891      	adds	r1, r2, r2
 8006a84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a86:	415b      	adcs	r3, r3
 8006a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a8e:	4621      	mov	r1, r4
 8006a90:	eb12 0801 	adds.w	r8, r2, r1
 8006a94:	4629      	mov	r1, r5
 8006a96:	eb43 0901 	adc.w	r9, r3, r1
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aae:	4690      	mov	r8, r2
 8006ab0:	4699      	mov	r9, r3
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	eb18 0303 	adds.w	r3, r8, r3
 8006ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006abc:	462b      	mov	r3, r5
 8006abe:	eb49 0303 	adc.w	r3, r9, r3
 8006ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ada:	460b      	mov	r3, r1
 8006adc:	18db      	adds	r3, r3, r3
 8006ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	eb42 0303 	adc.w	r3, r2, r3
 8006ae6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006af0:	f7fa f80c 	bl	8000b0c <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4b61      	ldr	r3, [pc, #388]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006afa:	fba3 2302 	umull	r2, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	011c      	lsls	r4, r3, #4
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b24:	4641      	mov	r1, r8
 8006b26:	eb12 0a01 	adds.w	sl, r2, r1
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b44:	4692      	mov	sl, r2
 8006b46:	469b      	mov	fp, r3
 8006b48:	4643      	mov	r3, r8
 8006b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b52:	464b      	mov	r3, r9
 8006b54:	eb4b 0303 	adc.w	r3, fp, r3
 8006b58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b70:	460b      	mov	r3, r1
 8006b72:	18db      	adds	r3, r3, r3
 8006b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b76:	4613      	mov	r3, r2
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b86:	f7f9 ffc1 	bl	8000b0c <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4b3b      	ldr	r3, [pc, #236]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006b92:	fba3 2301 	umull	r2, r3, r3, r1
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	2264      	movs	r2, #100	@ 0x64
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	1acb      	subs	r3, r1, r3
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ba6:	4b36      	ldr	r3, [pc, #216]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bb4:	441c      	add	r4, r3
 8006bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	1891      	adds	r1, r2, r2
 8006bce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bd8:	4641      	mov	r1, r8
 8006bda:	1851      	adds	r1, r2, r1
 8006bdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bde:	4649      	mov	r1, r9
 8006be0:	414b      	adcs	r3, r1
 8006be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	00cb      	lsls	r3, r1, #3
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	00ca      	lsls	r2, r1, #3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	4642      	mov	r2, r8
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	460a      	mov	r2, r1
 8006c10:	eb42 0303 	adc.w	r3, r2, r3
 8006c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	18db      	adds	r3, r3, r3
 8006c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c32:	4613      	mov	r3, r2
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c42:	f7f9 ff63 	bl	8000b0c <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	2164      	movs	r1, #100	@ 0x64
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	3332      	adds	r3, #50	@ 0x32
 8006c5e:	4a08      	ldr	r2, [pc, #32]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f003 0207 	and.w	r2, r3, #7
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4422      	add	r2, r4
 8006c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c74:	e106      	b.n	8006e84 <UART_SetConfig+0x4d8>
 8006c76:	bf00      	nop
 8006c78:	40011000 	.word	0x40011000
 8006c7c:	40011400 	.word	0x40011400
 8006c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c96:	4642      	mov	r2, r8
 8006c98:	464b      	mov	r3, r9
 8006c9a:	1891      	adds	r1, r2, r2
 8006c9c:	6239      	str	r1, [r7, #32]
 8006c9e:	415b      	adcs	r3, r3
 8006ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	1854      	adds	r4, r2, r1
 8006caa:	4649      	mov	r1, r9
 8006cac:	eb43 0501 	adc.w	r5, r3, r1
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	00eb      	lsls	r3, r5, #3
 8006cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cbe:	00e2      	lsls	r2, r4, #3
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	4643      	mov	r3, r8
 8006cc6:	18e3      	adds	r3, r4, r3
 8006cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ccc:	464b      	mov	r3, r9
 8006cce:	eb45 0303 	adc.w	r3, r5, r3
 8006cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ce2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	008b      	lsls	r3, r1, #2
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	008a      	lsls	r2, r1, #2
 8006d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d04:	f7f9 ff02 	bl	8000b0c <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4b60      	ldr	r3, [pc, #384]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	011c      	lsls	r4, r3, #4
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	1891      	adds	r1, r2, r2
 8006d2e:	61b9      	str	r1, [r7, #24]
 8006d30:	415b      	adcs	r3, r3
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d38:	4641      	mov	r1, r8
 8006d3a:	1851      	adds	r1, r2, r1
 8006d3c:	6139      	str	r1, [r7, #16]
 8006d3e:	4649      	mov	r1, r9
 8006d40:	414b      	adcs	r3, r1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d50:	4659      	mov	r1, fp
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4642      	mov	r2, r8
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d90:	4649      	mov	r1, r9
 8006d92:	008b      	lsls	r3, r1, #2
 8006d94:	4641      	mov	r1, r8
 8006d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	008a      	lsls	r2, r1, #2
 8006d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006da2:	f7f9 feb3 	bl	8000b0c <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	4b38      	ldr	r3, [pc, #224]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006dae:	fba3 2301 	umull	r2, r3, r3, r1
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2264      	movs	r2, #100	@ 0x64
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	1acb      	subs	r3, r1, r3
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	3332      	adds	r3, #50	@ 0x32
 8006dc0:	4a33      	ldr	r2, [pc, #204]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dcc:	441c      	add	r4, r3
 8006dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ddc:	4642      	mov	r2, r8
 8006dde:	464b      	mov	r3, r9
 8006de0:	1891      	adds	r1, r2, r2
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	415b      	adcs	r3, r3
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dec:	4641      	mov	r1, r8
 8006dee:	1851      	adds	r1, r2, r1
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	4649      	mov	r1, r9
 8006df4:	414b      	adcs	r3, r1
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e04:	4659      	mov	r1, fp
 8006e06:	00cb      	lsls	r3, r1, #3
 8006e08:	4651      	mov	r1, sl
 8006e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e0e:	4651      	mov	r1, sl
 8006e10:	00ca      	lsls	r2, r1, #3
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	4642      	mov	r2, r8
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e1e:	464b      	mov	r3, r9
 8006e20:	460a      	mov	r2, r1
 8006e22:	eb42 0303 	adc.w	r3, r2, r3
 8006e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e32:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e40:	4649      	mov	r1, r9
 8006e42:	008b      	lsls	r3, r1, #2
 8006e44:	4641      	mov	r1, r8
 8006e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	008a      	lsls	r2, r1, #2
 8006e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e52:	f7f9 fe5b 	bl	8000b0c <__aeabi_uldivmod>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2164      	movs	r1, #100	@ 0x64
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	3332      	adds	r3, #50	@ 0x32
 8006e6e:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4422      	add	r2, r4
 8006e82:	609a      	str	r2, [r3, #8]
}
 8006e84:	bf00      	nop
 8006e86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e90:	51eb851f 	.word	0x51eb851f

08006e94 <sniprintf>:
 8006e94:	b40c      	push	{r2, r3}
 8006e96:	b530      	push	{r4, r5, lr}
 8006e98:	4b17      	ldr	r3, [pc, #92]	@ (8006ef8 <sniprintf+0x64>)
 8006e9a:	1e0c      	subs	r4, r1, #0
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	b09d      	sub	sp, #116	@ 0x74
 8006ea0:	da08      	bge.n	8006eb4 <sniprintf+0x20>
 8006ea2:	238b      	movs	r3, #139	@ 0x8b
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b01d      	add	sp, #116	@ 0x74
 8006eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eb0:	b002      	add	sp, #8
 8006eb2:	4770      	bx	lr
 8006eb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006eb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ebc:	bf14      	ite	ne
 8006ebe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ec2:	4623      	moveq	r3, r4
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ecc:	9002      	str	r0, [sp, #8]
 8006ece:	9006      	str	r0, [sp, #24]
 8006ed0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ed4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ed6:	ab21      	add	r3, sp, #132	@ 0x84
 8006ed8:	a902      	add	r1, sp, #8
 8006eda:	4628      	mov	r0, r5
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	f000 f9a9 	bl	8007234 <_svfiprintf_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	bfbc      	itt	lt
 8006ee6:	238b      	movlt	r3, #139	@ 0x8b
 8006ee8:	602b      	strlt	r3, [r5, #0]
 8006eea:	2c00      	cmp	r4, #0
 8006eec:	d0dd      	beq.n	8006eaa <sniprintf+0x16>
 8006eee:	9b02      	ldr	r3, [sp, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e7d9      	b.n	8006eaa <sniprintf+0x16>
 8006ef6:	bf00      	nop
 8006ef8:	2000000c 	.word	0x2000000c

08006efc <memset>:
 8006efc:	4402      	add	r2, r0
 8006efe:	4603      	mov	r3, r0
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d100      	bne.n	8006f06 <memset+0xa>
 8006f04:	4770      	bx	lr
 8006f06:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0a:	e7f9      	b.n	8006f00 <memset+0x4>

08006f0c <strncpy>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	3901      	subs	r1, #1
 8006f10:	4603      	mov	r3, r0
 8006f12:	b132      	cbz	r2, 8006f22 <strncpy+0x16>
 8006f14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f18:	f803 4b01 	strb.w	r4, [r3], #1
 8006f1c:	3a01      	subs	r2, #1
 8006f1e:	2c00      	cmp	r4, #0
 8006f20:	d1f7      	bne.n	8006f12 <strncpy+0x6>
 8006f22:	441a      	add	r2, r3
 8006f24:	2100      	movs	r1, #0
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d100      	bne.n	8006f2c <strncpy+0x20>
 8006f2a:	bd10      	pop	{r4, pc}
 8006f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f30:	e7f9      	b.n	8006f26 <strncpy+0x1a>
	...

08006f34 <__errno>:
 8006f34:	4b01      	ldr	r3, [pc, #4]	@ (8006f3c <__errno+0x8>)
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000000c 	.word	0x2000000c

08006f40 <__libc_init_array>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	4d0d      	ldr	r5, [pc, #52]	@ (8006f78 <__libc_init_array+0x38>)
 8006f44:	4c0d      	ldr	r4, [pc, #52]	@ (8006f7c <__libc_init_array+0x3c>)
 8006f46:	1b64      	subs	r4, r4, r5
 8006f48:	10a4      	asrs	r4, r4, #2
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	42a6      	cmp	r6, r4
 8006f4e:	d109      	bne.n	8006f64 <__libc_init_array+0x24>
 8006f50:	4d0b      	ldr	r5, [pc, #44]	@ (8006f80 <__libc_init_array+0x40>)
 8006f52:	4c0c      	ldr	r4, [pc, #48]	@ (8006f84 <__libc_init_array+0x44>)
 8006f54:	f000 fc66 	bl	8007824 <_init>
 8006f58:	1b64      	subs	r4, r4, r5
 8006f5a:	10a4      	asrs	r4, r4, #2
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	42a6      	cmp	r6, r4
 8006f60:	d105      	bne.n	8006f6e <__libc_init_array+0x2e>
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f68:	4798      	blx	r3
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	e7ee      	b.n	8006f4c <__libc_init_array+0xc>
 8006f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f72:	4798      	blx	r3
 8006f74:	3601      	adds	r6, #1
 8006f76:	e7f2      	b.n	8006f5e <__libc_init_array+0x1e>
 8006f78:	080078b4 	.word	0x080078b4
 8006f7c:	080078b4 	.word	0x080078b4
 8006f80:	080078b4 	.word	0x080078b4
 8006f84:	080078b8 	.word	0x080078b8

08006f88 <__retarget_lock_acquire_recursive>:
 8006f88:	4770      	bx	lr

08006f8a <__retarget_lock_release_recursive>:
 8006f8a:	4770      	bx	lr

08006f8c <_free_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4605      	mov	r5, r0
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d041      	beq.n	8007018 <_free_r+0x8c>
 8006f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f98:	1f0c      	subs	r4, r1, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bfb8      	it	lt
 8006f9e:	18e4      	addlt	r4, r4, r3
 8006fa0:	f000 f8e0 	bl	8007164 <__malloc_lock>
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800701c <_free_r+0x90>)
 8006fa6:	6813      	ldr	r3, [r2, #0]
 8006fa8:	b933      	cbnz	r3, 8006fb8 <_free_r+0x2c>
 8006faa:	6063      	str	r3, [r4, #4]
 8006fac:	6014      	str	r4, [r2, #0]
 8006fae:	4628      	mov	r0, r5
 8006fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fb4:	f000 b8dc 	b.w	8007170 <__malloc_unlock>
 8006fb8:	42a3      	cmp	r3, r4
 8006fba:	d908      	bls.n	8006fce <_free_r+0x42>
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	1821      	adds	r1, r4, r0
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	bf01      	itttt	eq
 8006fc4:	6819      	ldreq	r1, [r3, #0]
 8006fc6:	685b      	ldreq	r3, [r3, #4]
 8006fc8:	1809      	addeq	r1, r1, r0
 8006fca:	6021      	streq	r1, [r4, #0]
 8006fcc:	e7ed      	b.n	8006faa <_free_r+0x1e>
 8006fce:	461a      	mov	r2, r3
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	b10b      	cbz	r3, 8006fd8 <_free_r+0x4c>
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	d9fa      	bls.n	8006fce <_free_r+0x42>
 8006fd8:	6811      	ldr	r1, [r2, #0]
 8006fda:	1850      	adds	r0, r2, r1
 8006fdc:	42a0      	cmp	r0, r4
 8006fde:	d10b      	bne.n	8006ff8 <_free_r+0x6c>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	4401      	add	r1, r0
 8006fe4:	1850      	adds	r0, r2, r1
 8006fe6:	4283      	cmp	r3, r0
 8006fe8:	6011      	str	r1, [r2, #0]
 8006fea:	d1e0      	bne.n	8006fae <_free_r+0x22>
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	6053      	str	r3, [r2, #4]
 8006ff2:	4408      	add	r0, r1
 8006ff4:	6010      	str	r0, [r2, #0]
 8006ff6:	e7da      	b.n	8006fae <_free_r+0x22>
 8006ff8:	d902      	bls.n	8007000 <_free_r+0x74>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	e7d6      	b.n	8006fae <_free_r+0x22>
 8007000:	6820      	ldr	r0, [r4, #0]
 8007002:	1821      	adds	r1, r4, r0
 8007004:	428b      	cmp	r3, r1
 8007006:	bf04      	itt	eq
 8007008:	6819      	ldreq	r1, [r3, #0]
 800700a:	685b      	ldreq	r3, [r3, #4]
 800700c:	6063      	str	r3, [r4, #4]
 800700e:	bf04      	itt	eq
 8007010:	1809      	addeq	r1, r1, r0
 8007012:	6021      	streq	r1, [r4, #0]
 8007014:	6054      	str	r4, [r2, #4]
 8007016:	e7ca      	b.n	8006fae <_free_r+0x22>
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	2000073c 	.word	0x2000073c

08007020 <sbrk_aligned>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4e0f      	ldr	r6, [pc, #60]	@ (8007060 <sbrk_aligned+0x40>)
 8007024:	460c      	mov	r4, r1
 8007026:	6831      	ldr	r1, [r6, #0]
 8007028:	4605      	mov	r5, r0
 800702a:	b911      	cbnz	r1, 8007032 <sbrk_aligned+0x12>
 800702c:	f000 fba6 	bl	800777c <_sbrk_r>
 8007030:	6030      	str	r0, [r6, #0]
 8007032:	4621      	mov	r1, r4
 8007034:	4628      	mov	r0, r5
 8007036:	f000 fba1 	bl	800777c <_sbrk_r>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	d103      	bne.n	8007046 <sbrk_aligned+0x26>
 800703e:	f04f 34ff 	mov.w	r4, #4294967295
 8007042:	4620      	mov	r0, r4
 8007044:	bd70      	pop	{r4, r5, r6, pc}
 8007046:	1cc4      	adds	r4, r0, #3
 8007048:	f024 0403 	bic.w	r4, r4, #3
 800704c:	42a0      	cmp	r0, r4
 800704e:	d0f8      	beq.n	8007042 <sbrk_aligned+0x22>
 8007050:	1a21      	subs	r1, r4, r0
 8007052:	4628      	mov	r0, r5
 8007054:	f000 fb92 	bl	800777c <_sbrk_r>
 8007058:	3001      	adds	r0, #1
 800705a:	d1f2      	bne.n	8007042 <sbrk_aligned+0x22>
 800705c:	e7ef      	b.n	800703e <sbrk_aligned+0x1e>
 800705e:	bf00      	nop
 8007060:	20000738 	.word	0x20000738

08007064 <_malloc_r>:
 8007064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007068:	1ccd      	adds	r5, r1, #3
 800706a:	f025 0503 	bic.w	r5, r5, #3
 800706e:	3508      	adds	r5, #8
 8007070:	2d0c      	cmp	r5, #12
 8007072:	bf38      	it	cc
 8007074:	250c      	movcc	r5, #12
 8007076:	2d00      	cmp	r5, #0
 8007078:	4606      	mov	r6, r0
 800707a:	db01      	blt.n	8007080 <_malloc_r+0x1c>
 800707c:	42a9      	cmp	r1, r5
 800707e:	d904      	bls.n	800708a <_malloc_r+0x26>
 8007080:	230c      	movs	r3, #12
 8007082:	6033      	str	r3, [r6, #0]
 8007084:	2000      	movs	r0, #0
 8007086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800708a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007160 <_malloc_r+0xfc>
 800708e:	f000 f869 	bl	8007164 <__malloc_lock>
 8007092:	f8d8 3000 	ldr.w	r3, [r8]
 8007096:	461c      	mov	r4, r3
 8007098:	bb44      	cbnz	r4, 80070ec <_malloc_r+0x88>
 800709a:	4629      	mov	r1, r5
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff ffbf 	bl	8007020 <sbrk_aligned>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	4604      	mov	r4, r0
 80070a6:	d158      	bne.n	800715a <_malloc_r+0xf6>
 80070a8:	f8d8 4000 	ldr.w	r4, [r8]
 80070ac:	4627      	mov	r7, r4
 80070ae:	2f00      	cmp	r7, #0
 80070b0:	d143      	bne.n	800713a <_malloc_r+0xd6>
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	d04b      	beq.n	800714e <_malloc_r+0xea>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	4639      	mov	r1, r7
 80070ba:	4630      	mov	r0, r6
 80070bc:	eb04 0903 	add.w	r9, r4, r3
 80070c0:	f000 fb5c 	bl	800777c <_sbrk_r>
 80070c4:	4581      	cmp	r9, r0
 80070c6:	d142      	bne.n	800714e <_malloc_r+0xea>
 80070c8:	6821      	ldr	r1, [r4, #0]
 80070ca:	1a6d      	subs	r5, r5, r1
 80070cc:	4629      	mov	r1, r5
 80070ce:	4630      	mov	r0, r6
 80070d0:	f7ff ffa6 	bl	8007020 <sbrk_aligned>
 80070d4:	3001      	adds	r0, #1
 80070d6:	d03a      	beq.n	800714e <_malloc_r+0xea>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	442b      	add	r3, r5
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	f8d8 3000 	ldr.w	r3, [r8]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	bb62      	cbnz	r2, 8007140 <_malloc_r+0xdc>
 80070e6:	f8c8 7000 	str.w	r7, [r8]
 80070ea:	e00f      	b.n	800710c <_malloc_r+0xa8>
 80070ec:	6822      	ldr	r2, [r4, #0]
 80070ee:	1b52      	subs	r2, r2, r5
 80070f0:	d420      	bmi.n	8007134 <_malloc_r+0xd0>
 80070f2:	2a0b      	cmp	r2, #11
 80070f4:	d917      	bls.n	8007126 <_malloc_r+0xc2>
 80070f6:	1961      	adds	r1, r4, r5
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	6025      	str	r5, [r4, #0]
 80070fc:	bf18      	it	ne
 80070fe:	6059      	strne	r1, [r3, #4]
 8007100:	6863      	ldr	r3, [r4, #4]
 8007102:	bf08      	it	eq
 8007104:	f8c8 1000 	streq.w	r1, [r8]
 8007108:	5162      	str	r2, [r4, r5]
 800710a:	604b      	str	r3, [r1, #4]
 800710c:	4630      	mov	r0, r6
 800710e:	f000 f82f 	bl	8007170 <__malloc_unlock>
 8007112:	f104 000b 	add.w	r0, r4, #11
 8007116:	1d23      	adds	r3, r4, #4
 8007118:	f020 0007 	bic.w	r0, r0, #7
 800711c:	1ac2      	subs	r2, r0, r3
 800711e:	bf1c      	itt	ne
 8007120:	1a1b      	subne	r3, r3, r0
 8007122:	50a3      	strne	r3, [r4, r2]
 8007124:	e7af      	b.n	8007086 <_malloc_r+0x22>
 8007126:	6862      	ldr	r2, [r4, #4]
 8007128:	42a3      	cmp	r3, r4
 800712a:	bf0c      	ite	eq
 800712c:	f8c8 2000 	streq.w	r2, [r8]
 8007130:	605a      	strne	r2, [r3, #4]
 8007132:	e7eb      	b.n	800710c <_malloc_r+0xa8>
 8007134:	4623      	mov	r3, r4
 8007136:	6864      	ldr	r4, [r4, #4]
 8007138:	e7ae      	b.n	8007098 <_malloc_r+0x34>
 800713a:	463c      	mov	r4, r7
 800713c:	687f      	ldr	r7, [r7, #4]
 800713e:	e7b6      	b.n	80070ae <_malloc_r+0x4a>
 8007140:	461a      	mov	r2, r3
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	42a3      	cmp	r3, r4
 8007146:	d1fb      	bne.n	8007140 <_malloc_r+0xdc>
 8007148:	2300      	movs	r3, #0
 800714a:	6053      	str	r3, [r2, #4]
 800714c:	e7de      	b.n	800710c <_malloc_r+0xa8>
 800714e:	230c      	movs	r3, #12
 8007150:	6033      	str	r3, [r6, #0]
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f80c 	bl	8007170 <__malloc_unlock>
 8007158:	e794      	b.n	8007084 <_malloc_r+0x20>
 800715a:	6005      	str	r5, [r0, #0]
 800715c:	e7d6      	b.n	800710c <_malloc_r+0xa8>
 800715e:	bf00      	nop
 8007160:	2000073c 	.word	0x2000073c

08007164 <__malloc_lock>:
 8007164:	4801      	ldr	r0, [pc, #4]	@ (800716c <__malloc_lock+0x8>)
 8007166:	f7ff bf0f 	b.w	8006f88 <__retarget_lock_acquire_recursive>
 800716a:	bf00      	nop
 800716c:	20000734 	.word	0x20000734

08007170 <__malloc_unlock>:
 8007170:	4801      	ldr	r0, [pc, #4]	@ (8007178 <__malloc_unlock+0x8>)
 8007172:	f7ff bf0a 	b.w	8006f8a <__retarget_lock_release_recursive>
 8007176:	bf00      	nop
 8007178:	20000734 	.word	0x20000734

0800717c <__ssputs_r>:
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	688e      	ldr	r6, [r1, #8]
 8007182:	461f      	mov	r7, r3
 8007184:	42be      	cmp	r6, r7
 8007186:	680b      	ldr	r3, [r1, #0]
 8007188:	4682      	mov	sl, r0
 800718a:	460c      	mov	r4, r1
 800718c:	4690      	mov	r8, r2
 800718e:	d82d      	bhi.n	80071ec <__ssputs_r+0x70>
 8007190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007198:	d026      	beq.n	80071e8 <__ssputs_r+0x6c>
 800719a:	6965      	ldr	r5, [r4, #20]
 800719c:	6909      	ldr	r1, [r1, #16]
 800719e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071a2:	eba3 0901 	sub.w	r9, r3, r1
 80071a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071aa:	1c7b      	adds	r3, r7, #1
 80071ac:	444b      	add	r3, r9
 80071ae:	106d      	asrs	r5, r5, #1
 80071b0:	429d      	cmp	r5, r3
 80071b2:	bf38      	it	cc
 80071b4:	461d      	movcc	r5, r3
 80071b6:	0553      	lsls	r3, r2, #21
 80071b8:	d527      	bpl.n	800720a <__ssputs_r+0x8e>
 80071ba:	4629      	mov	r1, r5
 80071bc:	f7ff ff52 	bl	8007064 <_malloc_r>
 80071c0:	4606      	mov	r6, r0
 80071c2:	b360      	cbz	r0, 800721e <__ssputs_r+0xa2>
 80071c4:	6921      	ldr	r1, [r4, #16]
 80071c6:	464a      	mov	r2, r9
 80071c8:	f000 fae8 	bl	800779c <memcpy>
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	6126      	str	r6, [r4, #16]
 80071da:	6165      	str	r5, [r4, #20]
 80071dc:	444e      	add	r6, r9
 80071de:	eba5 0509 	sub.w	r5, r5, r9
 80071e2:	6026      	str	r6, [r4, #0]
 80071e4:	60a5      	str	r5, [r4, #8]
 80071e6:	463e      	mov	r6, r7
 80071e8:	42be      	cmp	r6, r7
 80071ea:	d900      	bls.n	80071ee <__ssputs_r+0x72>
 80071ec:	463e      	mov	r6, r7
 80071ee:	6820      	ldr	r0, [r4, #0]
 80071f0:	4632      	mov	r2, r6
 80071f2:	4641      	mov	r1, r8
 80071f4:	f000 faa8 	bl	8007748 <memmove>
 80071f8:	68a3      	ldr	r3, [r4, #8]
 80071fa:	1b9b      	subs	r3, r3, r6
 80071fc:	60a3      	str	r3, [r4, #8]
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	4433      	add	r3, r6
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	2000      	movs	r0, #0
 8007206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720a:	462a      	mov	r2, r5
 800720c:	f000 fad4 	bl	80077b8 <_realloc_r>
 8007210:	4606      	mov	r6, r0
 8007212:	2800      	cmp	r0, #0
 8007214:	d1e0      	bne.n	80071d8 <__ssputs_r+0x5c>
 8007216:	6921      	ldr	r1, [r4, #16]
 8007218:	4650      	mov	r0, sl
 800721a:	f7ff feb7 	bl	8006f8c <_free_r>
 800721e:	230c      	movs	r3, #12
 8007220:	f8ca 3000 	str.w	r3, [sl]
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	f04f 30ff 	mov.w	r0, #4294967295
 8007230:	e7e9      	b.n	8007206 <__ssputs_r+0x8a>
	...

08007234 <_svfiprintf_r>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	4698      	mov	r8, r3
 800723a:	898b      	ldrh	r3, [r1, #12]
 800723c:	061b      	lsls	r3, r3, #24
 800723e:	b09d      	sub	sp, #116	@ 0x74
 8007240:	4607      	mov	r7, r0
 8007242:	460d      	mov	r5, r1
 8007244:	4614      	mov	r4, r2
 8007246:	d510      	bpl.n	800726a <_svfiprintf_r+0x36>
 8007248:	690b      	ldr	r3, [r1, #16]
 800724a:	b973      	cbnz	r3, 800726a <_svfiprintf_r+0x36>
 800724c:	2140      	movs	r1, #64	@ 0x40
 800724e:	f7ff ff09 	bl	8007064 <_malloc_r>
 8007252:	6028      	str	r0, [r5, #0]
 8007254:	6128      	str	r0, [r5, #16]
 8007256:	b930      	cbnz	r0, 8007266 <_svfiprintf_r+0x32>
 8007258:	230c      	movs	r3, #12
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	b01d      	add	sp, #116	@ 0x74
 8007262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007266:	2340      	movs	r3, #64	@ 0x40
 8007268:	616b      	str	r3, [r5, #20]
 800726a:	2300      	movs	r3, #0
 800726c:	9309      	str	r3, [sp, #36]	@ 0x24
 800726e:	2320      	movs	r3, #32
 8007270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007274:	f8cd 800c 	str.w	r8, [sp, #12]
 8007278:	2330      	movs	r3, #48	@ 0x30
 800727a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007418 <_svfiprintf_r+0x1e4>
 800727e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007282:	f04f 0901 	mov.w	r9, #1
 8007286:	4623      	mov	r3, r4
 8007288:	469a      	mov	sl, r3
 800728a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800728e:	b10a      	cbz	r2, 8007294 <_svfiprintf_r+0x60>
 8007290:	2a25      	cmp	r2, #37	@ 0x25
 8007292:	d1f9      	bne.n	8007288 <_svfiprintf_r+0x54>
 8007294:	ebba 0b04 	subs.w	fp, sl, r4
 8007298:	d00b      	beq.n	80072b2 <_svfiprintf_r+0x7e>
 800729a:	465b      	mov	r3, fp
 800729c:	4622      	mov	r2, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ff6b 	bl	800717c <__ssputs_r>
 80072a6:	3001      	adds	r0, #1
 80072a8:	f000 80a7 	beq.w	80073fa <_svfiprintf_r+0x1c6>
 80072ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072ae:	445a      	add	r2, fp
 80072b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80072b2:	f89a 3000 	ldrb.w	r3, [sl]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 809f 	beq.w	80073fa <_svfiprintf_r+0x1c6>
 80072bc:	2300      	movs	r3, #0
 80072be:	f04f 32ff 	mov.w	r2, #4294967295
 80072c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c6:	f10a 0a01 	add.w	sl, sl, #1
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	9307      	str	r3, [sp, #28]
 80072ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80072d4:	4654      	mov	r4, sl
 80072d6:	2205      	movs	r2, #5
 80072d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072dc:	484e      	ldr	r0, [pc, #312]	@ (8007418 <_svfiprintf_r+0x1e4>)
 80072de:	f7f8 ffa7 	bl	8000230 <memchr>
 80072e2:	9a04      	ldr	r2, [sp, #16]
 80072e4:	b9d8      	cbnz	r0, 800731e <_svfiprintf_r+0xea>
 80072e6:	06d0      	lsls	r0, r2, #27
 80072e8:	bf44      	itt	mi
 80072ea:	2320      	movmi	r3, #32
 80072ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f0:	0711      	lsls	r1, r2, #28
 80072f2:	bf44      	itt	mi
 80072f4:	232b      	movmi	r3, #43	@ 0x2b
 80072f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072fa:	f89a 3000 	ldrb.w	r3, [sl]
 80072fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007300:	d015      	beq.n	800732e <_svfiprintf_r+0xfa>
 8007302:	9a07      	ldr	r2, [sp, #28]
 8007304:	4654      	mov	r4, sl
 8007306:	2000      	movs	r0, #0
 8007308:	f04f 0c0a 	mov.w	ip, #10
 800730c:	4621      	mov	r1, r4
 800730e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007312:	3b30      	subs	r3, #48	@ 0x30
 8007314:	2b09      	cmp	r3, #9
 8007316:	d94b      	bls.n	80073b0 <_svfiprintf_r+0x17c>
 8007318:	b1b0      	cbz	r0, 8007348 <_svfiprintf_r+0x114>
 800731a:	9207      	str	r2, [sp, #28]
 800731c:	e014      	b.n	8007348 <_svfiprintf_r+0x114>
 800731e:	eba0 0308 	sub.w	r3, r0, r8
 8007322:	fa09 f303 	lsl.w	r3, r9, r3
 8007326:	4313      	orrs	r3, r2
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	46a2      	mov	sl, r4
 800732c:	e7d2      	b.n	80072d4 <_svfiprintf_r+0xa0>
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	1d19      	adds	r1, r3, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	9103      	str	r1, [sp, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	bfbb      	ittet	lt
 800733a:	425b      	neglt	r3, r3
 800733c:	f042 0202 	orrlt.w	r2, r2, #2
 8007340:	9307      	strge	r3, [sp, #28]
 8007342:	9307      	strlt	r3, [sp, #28]
 8007344:	bfb8      	it	lt
 8007346:	9204      	strlt	r2, [sp, #16]
 8007348:	7823      	ldrb	r3, [r4, #0]
 800734a:	2b2e      	cmp	r3, #46	@ 0x2e
 800734c:	d10a      	bne.n	8007364 <_svfiprintf_r+0x130>
 800734e:	7863      	ldrb	r3, [r4, #1]
 8007350:	2b2a      	cmp	r3, #42	@ 0x2a
 8007352:	d132      	bne.n	80073ba <_svfiprintf_r+0x186>
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	1d1a      	adds	r2, r3, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	9203      	str	r2, [sp, #12]
 800735c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007360:	3402      	adds	r4, #2
 8007362:	9305      	str	r3, [sp, #20]
 8007364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007428 <_svfiprintf_r+0x1f4>
 8007368:	7821      	ldrb	r1, [r4, #0]
 800736a:	2203      	movs	r2, #3
 800736c:	4650      	mov	r0, sl
 800736e:	f7f8 ff5f 	bl	8000230 <memchr>
 8007372:	b138      	cbz	r0, 8007384 <_svfiprintf_r+0x150>
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	eba0 000a 	sub.w	r0, r0, sl
 800737a:	2240      	movs	r2, #64	@ 0x40
 800737c:	4082      	lsls	r2, r0
 800737e:	4313      	orrs	r3, r2
 8007380:	3401      	adds	r4, #1
 8007382:	9304      	str	r3, [sp, #16]
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	4824      	ldr	r0, [pc, #144]	@ (800741c <_svfiprintf_r+0x1e8>)
 800738a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800738e:	2206      	movs	r2, #6
 8007390:	f7f8 ff4e 	bl	8000230 <memchr>
 8007394:	2800      	cmp	r0, #0
 8007396:	d036      	beq.n	8007406 <_svfiprintf_r+0x1d2>
 8007398:	4b21      	ldr	r3, [pc, #132]	@ (8007420 <_svfiprintf_r+0x1ec>)
 800739a:	bb1b      	cbnz	r3, 80073e4 <_svfiprintf_r+0x1b0>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	3307      	adds	r3, #7
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	9303      	str	r3, [sp, #12]
 80073a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073aa:	4433      	add	r3, r6
 80073ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ae:	e76a      	b.n	8007286 <_svfiprintf_r+0x52>
 80073b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b4:	460c      	mov	r4, r1
 80073b6:	2001      	movs	r0, #1
 80073b8:	e7a8      	b.n	800730c <_svfiprintf_r+0xd8>
 80073ba:	2300      	movs	r3, #0
 80073bc:	3401      	adds	r4, #1
 80073be:	9305      	str	r3, [sp, #20]
 80073c0:	4619      	mov	r1, r3
 80073c2:	f04f 0c0a 	mov.w	ip, #10
 80073c6:	4620      	mov	r0, r4
 80073c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073cc:	3a30      	subs	r2, #48	@ 0x30
 80073ce:	2a09      	cmp	r2, #9
 80073d0:	d903      	bls.n	80073da <_svfiprintf_r+0x1a6>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0c6      	beq.n	8007364 <_svfiprintf_r+0x130>
 80073d6:	9105      	str	r1, [sp, #20]
 80073d8:	e7c4      	b.n	8007364 <_svfiprintf_r+0x130>
 80073da:	fb0c 2101 	mla	r1, ip, r1, r2
 80073de:	4604      	mov	r4, r0
 80073e0:	2301      	movs	r3, #1
 80073e2:	e7f0      	b.n	80073c6 <_svfiprintf_r+0x192>
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	462a      	mov	r2, r5
 80073ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007424 <_svfiprintf_r+0x1f0>)
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	4638      	mov	r0, r7
 80073f0:	f3af 8000 	nop.w
 80073f4:	1c42      	adds	r2, r0, #1
 80073f6:	4606      	mov	r6, r0
 80073f8:	d1d6      	bne.n	80073a8 <_svfiprintf_r+0x174>
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	065b      	lsls	r3, r3, #25
 80073fe:	f53f af2d 	bmi.w	800725c <_svfiprintf_r+0x28>
 8007402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007404:	e72c      	b.n	8007260 <_svfiprintf_r+0x2c>
 8007406:	ab03      	add	r3, sp, #12
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	462a      	mov	r2, r5
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <_svfiprintf_r+0x1f0>)
 800740e:	a904      	add	r1, sp, #16
 8007410:	4638      	mov	r0, r7
 8007412:	f000 f879 	bl	8007508 <_printf_i>
 8007416:	e7ed      	b.n	80073f4 <_svfiprintf_r+0x1c0>
 8007418:	08007878 	.word	0x08007878
 800741c:	08007882 	.word	0x08007882
 8007420:	00000000 	.word	0x00000000
 8007424:	0800717d 	.word	0x0800717d
 8007428:	0800787e 	.word	0x0800787e

0800742c <_printf_common>:
 800742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	4616      	mov	r6, r2
 8007432:	4698      	mov	r8, r3
 8007434:	688a      	ldr	r2, [r1, #8]
 8007436:	690b      	ldr	r3, [r1, #16]
 8007438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800743c:	4293      	cmp	r3, r2
 800743e:	bfb8      	it	lt
 8007440:	4613      	movlt	r3, r2
 8007442:	6033      	str	r3, [r6, #0]
 8007444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007448:	4607      	mov	r7, r0
 800744a:	460c      	mov	r4, r1
 800744c:	b10a      	cbz	r2, 8007452 <_printf_common+0x26>
 800744e:	3301      	adds	r3, #1
 8007450:	6033      	str	r3, [r6, #0]
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	0699      	lsls	r1, r3, #26
 8007456:	bf42      	ittt	mi
 8007458:	6833      	ldrmi	r3, [r6, #0]
 800745a:	3302      	addmi	r3, #2
 800745c:	6033      	strmi	r3, [r6, #0]
 800745e:	6825      	ldr	r5, [r4, #0]
 8007460:	f015 0506 	ands.w	r5, r5, #6
 8007464:	d106      	bne.n	8007474 <_printf_common+0x48>
 8007466:	f104 0a19 	add.w	sl, r4, #25
 800746a:	68e3      	ldr	r3, [r4, #12]
 800746c:	6832      	ldr	r2, [r6, #0]
 800746e:	1a9b      	subs	r3, r3, r2
 8007470:	42ab      	cmp	r3, r5
 8007472:	dc26      	bgt.n	80074c2 <_printf_common+0x96>
 8007474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007478:	6822      	ldr	r2, [r4, #0]
 800747a:	3b00      	subs	r3, #0
 800747c:	bf18      	it	ne
 800747e:	2301      	movne	r3, #1
 8007480:	0692      	lsls	r2, r2, #26
 8007482:	d42b      	bmi.n	80074dc <_printf_common+0xb0>
 8007484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007488:	4641      	mov	r1, r8
 800748a:	4638      	mov	r0, r7
 800748c:	47c8      	blx	r9
 800748e:	3001      	adds	r0, #1
 8007490:	d01e      	beq.n	80074d0 <_printf_common+0xa4>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	6922      	ldr	r2, [r4, #16]
 8007496:	f003 0306 	and.w	r3, r3, #6
 800749a:	2b04      	cmp	r3, #4
 800749c:	bf02      	ittt	eq
 800749e:	68e5      	ldreq	r5, [r4, #12]
 80074a0:	6833      	ldreq	r3, [r6, #0]
 80074a2:	1aed      	subeq	r5, r5, r3
 80074a4:	68a3      	ldr	r3, [r4, #8]
 80074a6:	bf0c      	ite	eq
 80074a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074ac:	2500      	movne	r5, #0
 80074ae:	4293      	cmp	r3, r2
 80074b0:	bfc4      	itt	gt
 80074b2:	1a9b      	subgt	r3, r3, r2
 80074b4:	18ed      	addgt	r5, r5, r3
 80074b6:	2600      	movs	r6, #0
 80074b8:	341a      	adds	r4, #26
 80074ba:	42b5      	cmp	r5, r6
 80074bc:	d11a      	bne.n	80074f4 <_printf_common+0xc8>
 80074be:	2000      	movs	r0, #0
 80074c0:	e008      	b.n	80074d4 <_printf_common+0xa8>
 80074c2:	2301      	movs	r3, #1
 80074c4:	4652      	mov	r2, sl
 80074c6:	4641      	mov	r1, r8
 80074c8:	4638      	mov	r0, r7
 80074ca:	47c8      	blx	r9
 80074cc:	3001      	adds	r0, #1
 80074ce:	d103      	bne.n	80074d8 <_printf_common+0xac>
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d8:	3501      	adds	r5, #1
 80074da:	e7c6      	b.n	800746a <_printf_common+0x3e>
 80074dc:	18e1      	adds	r1, r4, r3
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	2030      	movs	r0, #48	@ 0x30
 80074e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074e6:	4422      	add	r2, r4
 80074e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074f0:	3302      	adds	r3, #2
 80074f2:	e7c7      	b.n	8007484 <_printf_common+0x58>
 80074f4:	2301      	movs	r3, #1
 80074f6:	4622      	mov	r2, r4
 80074f8:	4641      	mov	r1, r8
 80074fa:	4638      	mov	r0, r7
 80074fc:	47c8      	blx	r9
 80074fe:	3001      	adds	r0, #1
 8007500:	d0e6      	beq.n	80074d0 <_printf_common+0xa4>
 8007502:	3601      	adds	r6, #1
 8007504:	e7d9      	b.n	80074ba <_printf_common+0x8e>
	...

08007508 <_printf_i>:
 8007508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	7e0f      	ldrb	r7, [r1, #24]
 800750e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007510:	2f78      	cmp	r7, #120	@ 0x78
 8007512:	4691      	mov	r9, r2
 8007514:	4680      	mov	r8, r0
 8007516:	460c      	mov	r4, r1
 8007518:	469a      	mov	sl, r3
 800751a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800751e:	d807      	bhi.n	8007530 <_printf_i+0x28>
 8007520:	2f62      	cmp	r7, #98	@ 0x62
 8007522:	d80a      	bhi.n	800753a <_printf_i+0x32>
 8007524:	2f00      	cmp	r7, #0
 8007526:	f000 80d2 	beq.w	80076ce <_printf_i+0x1c6>
 800752a:	2f58      	cmp	r7, #88	@ 0x58
 800752c:	f000 80b9 	beq.w	80076a2 <_printf_i+0x19a>
 8007530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007538:	e03a      	b.n	80075b0 <_printf_i+0xa8>
 800753a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800753e:	2b15      	cmp	r3, #21
 8007540:	d8f6      	bhi.n	8007530 <_printf_i+0x28>
 8007542:	a101      	add	r1, pc, #4	@ (adr r1, 8007548 <_printf_i+0x40>)
 8007544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007548:	080075a1 	.word	0x080075a1
 800754c:	080075b5 	.word	0x080075b5
 8007550:	08007531 	.word	0x08007531
 8007554:	08007531 	.word	0x08007531
 8007558:	08007531 	.word	0x08007531
 800755c:	08007531 	.word	0x08007531
 8007560:	080075b5 	.word	0x080075b5
 8007564:	08007531 	.word	0x08007531
 8007568:	08007531 	.word	0x08007531
 800756c:	08007531 	.word	0x08007531
 8007570:	08007531 	.word	0x08007531
 8007574:	080076b5 	.word	0x080076b5
 8007578:	080075df 	.word	0x080075df
 800757c:	0800766f 	.word	0x0800766f
 8007580:	08007531 	.word	0x08007531
 8007584:	08007531 	.word	0x08007531
 8007588:	080076d7 	.word	0x080076d7
 800758c:	08007531 	.word	0x08007531
 8007590:	080075df 	.word	0x080075df
 8007594:	08007531 	.word	0x08007531
 8007598:	08007531 	.word	0x08007531
 800759c:	08007677 	.word	0x08007677
 80075a0:	6833      	ldr	r3, [r6, #0]
 80075a2:	1d1a      	adds	r2, r3, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6032      	str	r2, [r6, #0]
 80075a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075b0:	2301      	movs	r3, #1
 80075b2:	e09d      	b.n	80076f0 <_printf_i+0x1e8>
 80075b4:	6833      	ldr	r3, [r6, #0]
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	1d19      	adds	r1, r3, #4
 80075ba:	6031      	str	r1, [r6, #0]
 80075bc:	0606      	lsls	r6, r0, #24
 80075be:	d501      	bpl.n	80075c4 <_printf_i+0xbc>
 80075c0:	681d      	ldr	r5, [r3, #0]
 80075c2:	e003      	b.n	80075cc <_printf_i+0xc4>
 80075c4:	0645      	lsls	r5, r0, #25
 80075c6:	d5fb      	bpl.n	80075c0 <_printf_i+0xb8>
 80075c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	da03      	bge.n	80075d8 <_printf_i+0xd0>
 80075d0:	232d      	movs	r3, #45	@ 0x2d
 80075d2:	426d      	negs	r5, r5
 80075d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075d8:	4859      	ldr	r0, [pc, #356]	@ (8007740 <_printf_i+0x238>)
 80075da:	230a      	movs	r3, #10
 80075dc:	e011      	b.n	8007602 <_printf_i+0xfa>
 80075de:	6821      	ldr	r1, [r4, #0]
 80075e0:	6833      	ldr	r3, [r6, #0]
 80075e2:	0608      	lsls	r0, r1, #24
 80075e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80075e8:	d402      	bmi.n	80075f0 <_printf_i+0xe8>
 80075ea:	0649      	lsls	r1, r1, #25
 80075ec:	bf48      	it	mi
 80075ee:	b2ad      	uxthmi	r5, r5
 80075f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80075f2:	4853      	ldr	r0, [pc, #332]	@ (8007740 <_printf_i+0x238>)
 80075f4:	6033      	str	r3, [r6, #0]
 80075f6:	bf14      	ite	ne
 80075f8:	230a      	movne	r3, #10
 80075fa:	2308      	moveq	r3, #8
 80075fc:	2100      	movs	r1, #0
 80075fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007602:	6866      	ldr	r6, [r4, #4]
 8007604:	60a6      	str	r6, [r4, #8]
 8007606:	2e00      	cmp	r6, #0
 8007608:	bfa2      	ittt	ge
 800760a:	6821      	ldrge	r1, [r4, #0]
 800760c:	f021 0104 	bicge.w	r1, r1, #4
 8007610:	6021      	strge	r1, [r4, #0]
 8007612:	b90d      	cbnz	r5, 8007618 <_printf_i+0x110>
 8007614:	2e00      	cmp	r6, #0
 8007616:	d04b      	beq.n	80076b0 <_printf_i+0x1a8>
 8007618:	4616      	mov	r6, r2
 800761a:	fbb5 f1f3 	udiv	r1, r5, r3
 800761e:	fb03 5711 	mls	r7, r3, r1, r5
 8007622:	5dc7      	ldrb	r7, [r0, r7]
 8007624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007628:	462f      	mov	r7, r5
 800762a:	42bb      	cmp	r3, r7
 800762c:	460d      	mov	r5, r1
 800762e:	d9f4      	bls.n	800761a <_printf_i+0x112>
 8007630:	2b08      	cmp	r3, #8
 8007632:	d10b      	bne.n	800764c <_printf_i+0x144>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	07df      	lsls	r7, r3, #31
 8007638:	d508      	bpl.n	800764c <_printf_i+0x144>
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	6861      	ldr	r1, [r4, #4]
 800763e:	4299      	cmp	r1, r3
 8007640:	bfde      	ittt	le
 8007642:	2330      	movle	r3, #48	@ 0x30
 8007644:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007648:	f106 36ff 	addle.w	r6, r6, #4294967295
 800764c:	1b92      	subs	r2, r2, r6
 800764e:	6122      	str	r2, [r4, #16]
 8007650:	f8cd a000 	str.w	sl, [sp]
 8007654:	464b      	mov	r3, r9
 8007656:	aa03      	add	r2, sp, #12
 8007658:	4621      	mov	r1, r4
 800765a:	4640      	mov	r0, r8
 800765c:	f7ff fee6 	bl	800742c <_printf_common>
 8007660:	3001      	adds	r0, #1
 8007662:	d14a      	bne.n	80076fa <_printf_i+0x1f2>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	b004      	add	sp, #16
 800766a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	f043 0320 	orr.w	r3, r3, #32
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	4833      	ldr	r0, [pc, #204]	@ (8007744 <_printf_i+0x23c>)
 8007678:	2778      	movs	r7, #120	@ 0x78
 800767a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	6831      	ldr	r1, [r6, #0]
 8007682:	061f      	lsls	r7, r3, #24
 8007684:	f851 5b04 	ldr.w	r5, [r1], #4
 8007688:	d402      	bmi.n	8007690 <_printf_i+0x188>
 800768a:	065f      	lsls	r7, r3, #25
 800768c:	bf48      	it	mi
 800768e:	b2ad      	uxthmi	r5, r5
 8007690:	6031      	str	r1, [r6, #0]
 8007692:	07d9      	lsls	r1, r3, #31
 8007694:	bf44      	itt	mi
 8007696:	f043 0320 	orrmi.w	r3, r3, #32
 800769a:	6023      	strmi	r3, [r4, #0]
 800769c:	b11d      	cbz	r5, 80076a6 <_printf_i+0x19e>
 800769e:	2310      	movs	r3, #16
 80076a0:	e7ac      	b.n	80075fc <_printf_i+0xf4>
 80076a2:	4827      	ldr	r0, [pc, #156]	@ (8007740 <_printf_i+0x238>)
 80076a4:	e7e9      	b.n	800767a <_printf_i+0x172>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f023 0320 	bic.w	r3, r3, #32
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	e7f6      	b.n	800769e <_printf_i+0x196>
 80076b0:	4616      	mov	r6, r2
 80076b2:	e7bd      	b.n	8007630 <_printf_i+0x128>
 80076b4:	6833      	ldr	r3, [r6, #0]
 80076b6:	6825      	ldr	r5, [r4, #0]
 80076b8:	6961      	ldr	r1, [r4, #20]
 80076ba:	1d18      	adds	r0, r3, #4
 80076bc:	6030      	str	r0, [r6, #0]
 80076be:	062e      	lsls	r6, r5, #24
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	d501      	bpl.n	80076c8 <_printf_i+0x1c0>
 80076c4:	6019      	str	r1, [r3, #0]
 80076c6:	e002      	b.n	80076ce <_printf_i+0x1c6>
 80076c8:	0668      	lsls	r0, r5, #25
 80076ca:	d5fb      	bpl.n	80076c4 <_printf_i+0x1bc>
 80076cc:	8019      	strh	r1, [r3, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	6123      	str	r3, [r4, #16]
 80076d2:	4616      	mov	r6, r2
 80076d4:	e7bc      	b.n	8007650 <_printf_i+0x148>
 80076d6:	6833      	ldr	r3, [r6, #0]
 80076d8:	1d1a      	adds	r2, r3, #4
 80076da:	6032      	str	r2, [r6, #0]
 80076dc:	681e      	ldr	r6, [r3, #0]
 80076de:	6862      	ldr	r2, [r4, #4]
 80076e0:	2100      	movs	r1, #0
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7f8 fda4 	bl	8000230 <memchr>
 80076e8:	b108      	cbz	r0, 80076ee <_printf_i+0x1e6>
 80076ea:	1b80      	subs	r0, r0, r6
 80076ec:	6060      	str	r0, [r4, #4]
 80076ee:	6863      	ldr	r3, [r4, #4]
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	2300      	movs	r3, #0
 80076f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076f8:	e7aa      	b.n	8007650 <_printf_i+0x148>
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	4632      	mov	r2, r6
 80076fe:	4649      	mov	r1, r9
 8007700:	4640      	mov	r0, r8
 8007702:	47d0      	blx	sl
 8007704:	3001      	adds	r0, #1
 8007706:	d0ad      	beq.n	8007664 <_printf_i+0x15c>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	079b      	lsls	r3, r3, #30
 800770c:	d413      	bmi.n	8007736 <_printf_i+0x22e>
 800770e:	68e0      	ldr	r0, [r4, #12]
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	4298      	cmp	r0, r3
 8007714:	bfb8      	it	lt
 8007716:	4618      	movlt	r0, r3
 8007718:	e7a6      	b.n	8007668 <_printf_i+0x160>
 800771a:	2301      	movs	r3, #1
 800771c:	4632      	mov	r2, r6
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d09d      	beq.n	8007664 <_printf_i+0x15c>
 8007728:	3501      	adds	r5, #1
 800772a:	68e3      	ldr	r3, [r4, #12]
 800772c:	9903      	ldr	r1, [sp, #12]
 800772e:	1a5b      	subs	r3, r3, r1
 8007730:	42ab      	cmp	r3, r5
 8007732:	dcf2      	bgt.n	800771a <_printf_i+0x212>
 8007734:	e7eb      	b.n	800770e <_printf_i+0x206>
 8007736:	2500      	movs	r5, #0
 8007738:	f104 0619 	add.w	r6, r4, #25
 800773c:	e7f5      	b.n	800772a <_printf_i+0x222>
 800773e:	bf00      	nop
 8007740:	08007889 	.word	0x08007889
 8007744:	0800789a 	.word	0x0800789a

08007748 <memmove>:
 8007748:	4288      	cmp	r0, r1
 800774a:	b510      	push	{r4, lr}
 800774c:	eb01 0402 	add.w	r4, r1, r2
 8007750:	d902      	bls.n	8007758 <memmove+0x10>
 8007752:	4284      	cmp	r4, r0
 8007754:	4623      	mov	r3, r4
 8007756:	d807      	bhi.n	8007768 <memmove+0x20>
 8007758:	1e43      	subs	r3, r0, #1
 800775a:	42a1      	cmp	r1, r4
 800775c:	d008      	beq.n	8007770 <memmove+0x28>
 800775e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007766:	e7f8      	b.n	800775a <memmove+0x12>
 8007768:	4402      	add	r2, r0
 800776a:	4601      	mov	r1, r0
 800776c:	428a      	cmp	r2, r1
 800776e:	d100      	bne.n	8007772 <memmove+0x2a>
 8007770:	bd10      	pop	{r4, pc}
 8007772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800777a:	e7f7      	b.n	800776c <memmove+0x24>

0800777c <_sbrk_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d06      	ldr	r5, [pc, #24]	@ (8007798 <_sbrk_r+0x1c>)
 8007780:	2300      	movs	r3, #0
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7fa fdb8 	bl	80022fc <_sbrk>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_sbrk_r+0x1a>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_sbrk_r+0x1a>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	20000730 	.word	0x20000730

0800779c <memcpy>:
 800779c:	440a      	add	r2, r1
 800779e:	4291      	cmp	r1, r2
 80077a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077a4:	d100      	bne.n	80077a8 <memcpy+0xc>
 80077a6:	4770      	bx	lr
 80077a8:	b510      	push	{r4, lr}
 80077aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077b2:	4291      	cmp	r1, r2
 80077b4:	d1f9      	bne.n	80077aa <memcpy+0xe>
 80077b6:	bd10      	pop	{r4, pc}

080077b8 <_realloc_r>:
 80077b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077bc:	4680      	mov	r8, r0
 80077be:	4615      	mov	r5, r2
 80077c0:	460c      	mov	r4, r1
 80077c2:	b921      	cbnz	r1, 80077ce <_realloc_r+0x16>
 80077c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c8:	4611      	mov	r1, r2
 80077ca:	f7ff bc4b 	b.w	8007064 <_malloc_r>
 80077ce:	b92a      	cbnz	r2, 80077dc <_realloc_r+0x24>
 80077d0:	f7ff fbdc 	bl	8006f8c <_free_r>
 80077d4:	2400      	movs	r4, #0
 80077d6:	4620      	mov	r0, r4
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077dc:	f000 f81a 	bl	8007814 <_malloc_usable_size_r>
 80077e0:	4285      	cmp	r5, r0
 80077e2:	4606      	mov	r6, r0
 80077e4:	d802      	bhi.n	80077ec <_realloc_r+0x34>
 80077e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077ea:	d8f4      	bhi.n	80077d6 <_realloc_r+0x1e>
 80077ec:	4629      	mov	r1, r5
 80077ee:	4640      	mov	r0, r8
 80077f0:	f7ff fc38 	bl	8007064 <_malloc_r>
 80077f4:	4607      	mov	r7, r0
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d0ec      	beq.n	80077d4 <_realloc_r+0x1c>
 80077fa:	42b5      	cmp	r5, r6
 80077fc:	462a      	mov	r2, r5
 80077fe:	4621      	mov	r1, r4
 8007800:	bf28      	it	cs
 8007802:	4632      	movcs	r2, r6
 8007804:	f7ff ffca 	bl	800779c <memcpy>
 8007808:	4621      	mov	r1, r4
 800780a:	4640      	mov	r0, r8
 800780c:	f7ff fbbe 	bl	8006f8c <_free_r>
 8007810:	463c      	mov	r4, r7
 8007812:	e7e0      	b.n	80077d6 <_realloc_r+0x1e>

08007814 <_malloc_usable_size_r>:
 8007814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007818:	1f18      	subs	r0, r3, #4
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfbc      	itt	lt
 800781e:	580b      	ldrlt	r3, [r1, r0]
 8007820:	18c0      	addlt	r0, r0, r3
 8007822:	4770      	bx	lr

08007824 <_init>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr

08007830 <_fini>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr
