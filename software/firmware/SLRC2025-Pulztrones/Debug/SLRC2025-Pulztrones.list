
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008188  08008188  00009188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f8  080081f8  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  080081f8  080081f8  000091f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008200  08008200  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008200  08008200  00009200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008204  08008204  00009204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008208  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  2000005c  08008264  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08008264  0000a788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141c2  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f54  00000000  00000000  0001e24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000211a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb7  00000000  00000000  00022470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250f9  00000000  00000000  00023327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b5d  00000000  00000000  00048420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1518  00000000  00000000  00061f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f4  00000000  00000000  001434d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  001489cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008170 	.word	0x08008170

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08008170 	.word	0x08008170

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d901      	bls.n	8000e10 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e20:	4823      	ldr	r0, [pc, #140]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e22:	f003 f8e7 	bl	8003ff4 <HAL_GPIO_WritePin>
 8000e26:	e005      	b.n	8000e34 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e2e:	4820      	ldr	r0, [pc, #128]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e30:	f003 f8e0 	bl	8003ff4 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e44:	481a      	ldr	r0, [pc, #104]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e46:	f003 f8d5 	bl	8003ff4 <HAL_GPIO_WritePin>
 8000e4a:	e005      	b.n	8000e58 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e52:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e54:	f003 f8ce 	bl	8003ff4 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e68:	4811      	ldr	r0, [pc, #68]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e6a:	f003 f8c3 	bl	8003ff4 <HAL_GPIO_WritePin>
 8000e6e:	e005      	b.n	8000e7c <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e78:	f003 f8bc 	bl	8003ff4 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e8c:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e8e:	f003 f8b1 	bl	8003ff4 <HAL_GPIO_WritePin>
 8000e92:	e005      	b.n	8000ea0 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <AnalogMux_SelectChannel+0xb4>)
 8000e9c:	f003 f8aa 	bl	8003ff4 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f000 f859 	bl	8000f58 <delayMicroseconds>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8000ebe:	480b      	ldr	r0, [pc, #44]	@ (8000eec <AnalogMux_ReadADC+0x38>)
 8000ec0:	f001 feaa 	bl	8002c18 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000ec4:	2164      	movs	r1, #100	@ 0x64
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <AnalogMux_ReadADC+0x38>)
 8000ec8:	f001 ffab 	bl	8002e22 <HAL_ADC_PollForConversion>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <AnalogMux_ReadADC+0x38>)
 8000ed4:	f002 f830 	bl	8002f38 <HAL_ADC_GetValue>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 8000edc:	4803      	ldr	r0, [pc, #12]	@ (8000eec <AnalogMux_ReadADC+0x38>)
 8000ede:	f001 ff6d 	bl	8002dbc <HAL_ADC_Stop>

    return adcValue;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000078 	.word	0x20000078

08000ef0 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff7d 	bl	8000dfc <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 8000f02:	2005      	movs	r0, #5
 8000f04:	f000 f828 	bl	8000f58 <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8000f08:	f7ff ffd4 	bl	8000eb4 <AnalogMux_ReadADC>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <Delay_Init+0x38>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10e      	bne.n	8000f46 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <Delay_Init+0x38>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <Delay_Init+0x38>)
 8000f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f32:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <Delay_Init+0x3c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <Delay_Init+0x3c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <Delay_Init+0x3c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
    }
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000edf0 	.word	0xe000edf0
 8000f54:	e0001000 	.word	0xe0001000

08000f58 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <delayMicroseconds+0x38>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	22b4      	movs	r2, #180	@ 0xb4
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000f70:	bf00      	nop
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <delayMicroseconds+0x38>)
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f8      	bhi.n	8000f72 <delayMicroseconds+0x1a>
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e0001000 	.word	0xe0001000

08000f94 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9e:	b21b      	sxth	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <getLeftEncoderCounts+0x14>)
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb4:	b21b      	sxth	r3, r3
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <resetEncoders>:

void resetEncoders() {
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <resetEncoders+0x1c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8000fce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <HAL_UART_RxCpltCallback>:
    // Transmit the string over UART
    HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)  // Check if it's UART6
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_UART_RxCpltCallback+0x2c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d107      	bne.n	8001006 <HAL_UART_RxCpltCallback+0x22>
    {
        data_received = 1;  // Set flag to indicate new data
 8000ff6:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <HAL_UART_RxCpltCallback+0x30>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Restart reception
 8000ffc:	2232      	movs	r2, #50	@ 0x32
 8000ffe:	4906      	ldr	r1, [pc, #24]	@ (8001018 <HAL_UART_RxCpltCallback+0x34>)
 8001000:	4806      	ldr	r0, [pc, #24]	@ (800101c <HAL_UART_RxCpltCallback+0x38>)
 8001002:	f005 fcc9 	bl	8006998 <HAL_UART_Receive_IT>
    }
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40011400 	.word	0x40011400
 8001014:	200003ae 	.word	0x200003ae
 8001018:	2000037c 	.word	0x2000037c
 800101c:	200002d0 	.word	0x200002d0

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f001 fd1d 	bl	8002a64 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f8a7 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fb89 	bl	8001744 <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 fb67 	bl	8001704 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001036:	f000 fae7 	bl	8001608 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800103a:	f000 f9bf 	bl	80013bc <MX_TIM1_Init>
  MX_TIM2_Init();
 800103e:	f000 fa15 	bl	800146c <MX_TIM2_Init>
  MX_I2C2_Init();
 8001042:	f000 f98d 	bl	8001360 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001046:	f000 fb09 	bl	800165c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800104a:	f000 fb31 	bl	80016b0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800104e:	f000 f907 	bl	8001260 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001052:	f000 f957 	bl	8001304 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001056:	f000 fa5d 	bl	8001514 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800105a:	213c      	movs	r1, #60	@ 0x3c
 800105c:	4835      	ldr	r0, [pc, #212]	@ (8001134 <main+0x114>)
 800105e:	f004 fffd 	bl	800605c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001062:	213c      	movs	r1, #60	@ 0x3c
 8001064:	4834      	ldr	r0, [pc, #208]	@ (8001138 <main+0x118>)
 8001066:	f004 fff9 	bl	800605c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800106a:	2100      	movs	r1, #0
 800106c:	4833      	ldr	r0, [pc, #204]	@ (800113c <main+0x11c>)
 800106e:	f004 fe87 	bl	8005d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001072:	2104      	movs	r1, #4
 8001074:	4831      	ldr	r0, [pc, #196]	@ (800113c <main+0x11c>)
 8001076:	f004 fe83 	bl	8005d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800107a:	2108      	movs	r1, #8
 800107c:	482f      	ldr	r0, [pc, #188]	@ (800113c <main+0x11c>)
 800107e:	f004 fe7f 	bl	8005d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001082:	210c      	movs	r1, #12
 8001084:	482d      	ldr	r0, [pc, #180]	@ (800113c <main+0x11c>)
 8001086:	f004 fe7b 	bl	8005d80 <HAL_TIM_PWM_Start>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 800108a:	f7ff ff45 	bl	8000f18 <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 800108e:	2032      	movs	r0, #50	@ 0x32
 8001090:	f000 ff20 	bl	8001ed4 <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 8001094:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8001140 <main+0x120>
 8001098:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001144 <main+0x124>
 800109c:	492a      	ldr	r1, [pc, #168]	@ (8001148 <main+0x128>)
 800109e:	200b      	movs	r0, #11
 80010a0:	f000 ff3c 	bl	8001f1c <Servo_Register>
 80010a4:	60f8      	str	r0, [r7, #12]
  int arm = Servo_Register(13, "arm", 0, 180);
 80010a6:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001140 <main+0x120>
 80010aa:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001144 <main+0x124>
 80010ae:	4927      	ldr	r1, [pc, #156]	@ (800114c <main+0x12c>)
 80010b0:	200d      	movs	r0, #13
 80010b2:	f000 ff33 	bl	8001f1c <Servo_Register>
 80010b6:	60b8      	str	r0, [r7, #8]
  int base = Servo_Register(15, "base", 0, 180);
 80010b8:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001140 <main+0x120>
 80010bc:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001144 <main+0x124>
 80010c0:	4923      	ldr	r1, [pc, #140]	@ (8001150 <main+0x130>)
 80010c2:	200f      	movs	r0, #15
 80010c4:	f000 ff2a 	bl	8001f1c <Servo_Register>
 80010c8:	6078      	str	r0, [r7, #4]

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 80010ca:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001154 <main+0x134>
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f001 f818 	bl	8002104 <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 80010d4:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001158 <main+0x138>
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f001 f813 	bl	8002104 <Servo_SetAngle>

  // Or use them by name
  Servo_SetAngleByName("base", 90);  // Set base to 120 degrees
 80010de:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800115c <main+0x13c>
 80010e2:	481b      	ldr	r0, [pc, #108]	@ (8001150 <main+0x130>)
 80010e4:	f001 f882 	bl	80021ec <Servo_SetAngleByName>
  // Reset all servos to center position
  //Servo_ResetAll();


  /*-------------------------------------------------------------------*/
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt
 80010e8:	2232      	movs	r2, #50	@ 0x32
 80010ea:	491d      	ldr	r1, [pc, #116]	@ (8001160 <main+0x140>)
 80010ec:	481d      	ldr	r0, [pc, #116]	@ (8001164 <main+0x144>)
 80010ee:	f005 fc53 	bl	8006998 <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 80010f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010f6:	f001 fd27 	bl	8002b48 <HAL_Delay>
  RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 80010fa:	2101      	movs	r1, #1
 80010fc:	481a      	ldr	r0, [pc, #104]	@ (8001168 <main+0x148>)
 80010fe:	f000 fd05 	bl	8001b0c <RAYKHA_Calibrate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  left_counts = getLeftEncoderCounts();
 8001102:	f7ff ff53 	bl	8000fac <getLeftEncoderCounts>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <main+0x14c>)
 800110c:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 800110e:	f7ff ff41 	bl	8000f94 <getRightEncoderCounts>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <main+0x150>)
 8001118:	801a      	strh	r2, [r3, #0]
//		  HAL_UART_Transmit(&huart6, (uint8_t *)uart_rx_buffer, strlen(uart_rx_buffer), HAL_MAX_DELAY);
//	  }



	  RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 800111a:	4913      	ldr	r1, [pc, #76]	@ (8001168 <main+0x148>)
 800111c:	4815      	ldr	r0, [pc, #84]	@ (8001174 <main+0x154>)
 800111e:	f000 fdd7 	bl	8001cd0 <RAYKHA_ReadCalibrated>

	     /* Get position for PID controller (centered around 0) */
	  line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8001122:	4911      	ldr	r1, [pc, #68]	@ (8001168 <main+0x148>)
 8001124:	4813      	ldr	r0, [pc, #76]	@ (8001174 <main+0x154>)
 8001126:	f000 fe84 	bl	8001e32 <RAYKHA_GetPositionForPID>
 800112a:	4603      	mov	r3, r0
 800112c:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <main+0x158>)
 800112e:	6013      	str	r3, [r2, #0]
	  left_counts = getLeftEncoderCounts();
 8001130:	bf00      	nop
 8001132:	e7e6      	b.n	8001102 <main+0xe2>
 8001134:	20000168 	.word	0x20000168
 8001138:	200001b0 	.word	0x200001b0
 800113c:	200001f8 	.word	0x200001f8
 8001140:	43340000 	.word	0x43340000
 8001144:	00000000 	.word	0x00000000
 8001148:	08008188 	.word	0x08008188
 800114c:	08008190 	.word	0x08008190
 8001150:	08008194 	.word	0x08008194
 8001154:	420c0000 	.word	0x420c0000
 8001158:	42c80000 	.word	0x42c80000
 800115c:	42b40000 	.word	0x42b40000
 8001160:	2000037c 	.word	0x2000037c
 8001164:	200002d0 	.word	0x200002d0
 8001168:	200003b0 	.word	0x200003b0
 800116c:	20000378 	.word	0x20000378
 8001170:	2000037a 	.word	0x2000037a
 8001174:	200003dc 	.word	0x200003dc
 8001178:	200003f0 	.word	0x200003f0

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2234      	movs	r2, #52	@ 0x34
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fb5c 	bl	8007848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <SystemClock_Config+0xdc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <SystemClock_Config+0xdc>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b0:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <SystemClock_Config+0xdc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4b26      	ldr	r3, [pc, #152]	@ (800125c <SystemClock_Config+0xe0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a25      	ldr	r2, [pc, #148]	@ (800125c <SystemClock_Config+0xe0>)
 80011c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <SystemClock_Config+0xe0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2310      	movs	r3, #16
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ec:	2308      	movs	r3, #8
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011f0:	23b4      	movs	r3, #180	@ 0xb4
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4618      	mov	r0, r3
 8001206:	f004 facd 	bl	80057a4 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001210:	f000 fb30 	bl	8001874 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001214:	f003 ff2c 	bl	8005070 <HAL_PWREx_EnableOverDrive>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800121e:	f000 fb29 	bl	8001874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001222:	230f      	movs	r3, #15
 8001224:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001226:	2302      	movs	r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001238:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2105      	movs	r1, #5
 8001240:	4618      	mov	r0, r3
 8001242:	f003 ff65 	bl	8005110 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800124c:	f000 fb12 	bl	8001874 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3750      	adds	r7, #80	@ 0x50
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <MX_ADC1_Init+0x98>)
 8001274:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <MX_ADC1_Init+0x9c>)
 8001276:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <MX_ADC1_Init+0x98>)
 800127a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800127e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_ADC1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_ADC1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_ADC1_Init+0x98>)
 800128e:	2201      	movs	r2, #1
 8001290:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_ADC1_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_ADC1_Init+0x98>)
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <MX_ADC1_Init+0xa0>)
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_ADC1_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_ADC1_Init+0x98>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_ADC1_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_ADC1_Init+0x98>)
 80012bc:	2201      	movs	r2, #1
 80012be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c0:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <MX_ADC1_Init+0x98>)
 80012c2:	f001 fc65 	bl	8002b90 <HAL_ADC_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012cc:	f000 fad2 	bl	8001874 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012d0:	230a      	movs	r3, #10
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_ADC1_Init+0x98>)
 80012e2:	f001 fe37 	bl	8002f54 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012ec:	f000 fac2 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000078 	.word	0x20000078
 80012fc:	40012000 	.word	0x40012000
 8001300:	0f000001 	.word	0x0f000001

08001304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <MX_I2C1_Init+0x50>)
 800130a:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <MX_I2C1_Init+0x54>)
 800130c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_I2C1_Init+0x50>)
 8001310:	4a12      	ldr	r2, [pc, #72]	@ (800135c <MX_I2C1_Init+0x58>)
 8001312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_I2C1_Init+0x50>)
 8001322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	@ (8001354 <MX_I2C1_Init+0x50>)
 8001342:	f002 fe71 	bl	8004028 <HAL_I2C_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800134c:	f000 fa92 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000c0 	.word	0x200000c0
 8001358:	40005400 	.word	0x40005400
 800135c:	000186a0 	.word	0x000186a0

08001360 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <MX_I2C2_Init+0x50>)
 8001366:	4a13      	ldr	r2, [pc, #76]	@ (80013b4 <MX_I2C2_Init+0x54>)
 8001368:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_I2C2_Init+0x50>)
 800136c:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_I2C2_Init+0x58>)
 800136e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_I2C2_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_I2C2_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_I2C2_Init+0x50>)
 800137e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001382:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <MX_I2C2_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_I2C2_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <MX_I2C2_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_I2C2_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_I2C2_Init+0x50>)
 800139e:	f002 fe43 	bl	8004028 <HAL_I2C_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013a8:	f000 fa64 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000114 	.word	0x20000114
 80013b4:	40005800 	.word	0x40005800
 80013b8:	000186a0 	.word	0x000186a0

080013bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	@ 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2224      	movs	r2, #36	@ 0x24
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fa3c 	bl	8007848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d8:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <MX_TIM1_Init+0xa8>)
 80013da:	4a23      	ldr	r2, [pc, #140]	@ (8001468 <MX_TIM1_Init+0xac>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <MX_TIM1_Init+0xa8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <MX_TIM1_Init+0xa8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_TIM1_Init+0xa8>)
 80013ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_TIM1_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_TIM1_Init+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_TIM1_Init+0xa8>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001404:	2303      	movs	r3, #3
 8001406:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800141c:	2301      	movs	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_TIM1_Init+0xa8>)
 8001430:	f004 fd6e 	bl	8005f10 <HAL_TIM_Encoder_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800143a:	f000 fa1b 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	@ (8001464 <MX_TIM1_Init+0xa8>)
 800144c:	f005 f9d8 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001456:	f000 fa0d 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	@ 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000168 	.word	0x20000168
 8001468:	40010000 	.word	0x40010000

0800146c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2224      	movs	r2, #36	@ 0x24
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f006 f9e4 	bl	8007848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_TIM2_Init+0xa4>)
 800148a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <MX_TIM2_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM2_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_TIM2_Init+0xa4>)
 800149e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_TIM2_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_TIM2_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014b0:	2303      	movs	r3, #3
 80014b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_TIM2_Init+0xa4>)
 80014dc:	f004 fd18 	bl	8005f10 <HAL_TIM_Encoder_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014e6:	f000 f9c5 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	@ (8001510 <MX_TIM2_Init+0xa4>)
 80014f8:	f005 f982 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001502:	f000 f9b7 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	@ 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001b0 	.word	0x200001b0

08001514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001536:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <MX_TIM3_Init+0xec>)
 8001538:	4a32      	ldr	r2, [pc, #200]	@ (8001604 <MX_TIM3_Init+0xf0>)
 800153a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <MX_TIM3_Init+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <MX_TIM3_Init+0xec>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <MX_TIM3_Init+0xec>)
 800154a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800154e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_TIM3_Init+0xec>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <MX_TIM3_Init+0xec>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800155c:	4828      	ldr	r0, [pc, #160]	@ (8001600 <MX_TIM3_Init+0xec>)
 800155e:	f004 fbbf 	bl	8005ce0 <HAL_TIM_PWM_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001568:	f000 f984 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4619      	mov	r1, r3
 800157a:	4821      	ldr	r0, [pc, #132]	@ (8001600 <MX_TIM3_Init+0xec>)
 800157c:	f005 f940 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001586:	f000 f975 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158a:	2360      	movs	r3, #96	@ 0x60
 800158c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4817      	ldr	r0, [pc, #92]	@ (8001600 <MX_TIM3_Init+0xec>)
 80015a2:	f004 fde9 	bl	8006178 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015ac:	f000 f962 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2204      	movs	r2, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4812      	ldr	r0, [pc, #72]	@ (8001600 <MX_TIM3_Init+0xec>)
 80015b8:	f004 fdde 	bl	8006178 <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015c2:	f000 f957 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2208      	movs	r2, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <MX_TIM3_Init+0xec>)
 80015ce:	f004 fdd3 	bl	8006178 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80015d8:	f000 f94c 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	220c      	movs	r2, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	@ (8001600 <MX_TIM3_Init+0xec>)
 80015e4:	f004 fdc8 	bl	8006178 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80015ee:	f000 f941 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015f2:	4803      	ldr	r0, [pc, #12]	@ (8001600 <MX_TIM3_Init+0xec>)
 80015f4:	f000 fffe 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200001f8 	.word	0x200001f8
 8001604:	40000400 	.word	0x40000400

08001608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <MX_USART2_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001640:	f005 f95a 	bl	80068f8 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f913 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000240 	.word	0x20000240
 8001658:	40004400 	.word	0x40004400

0800165c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001662:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <MX_USART3_UART_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001694:	f005 f930 	bl	80068f8 <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800169e:	f000 f8e9 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000288 	.word	0x20000288
 80016ac:	40004800 	.word	0x40004800

080016b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <MX_USART6_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_USART6_UART_Init+0x4c>)
 80016e8:	f005 f906 	bl	80068f8 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016f2:	f000 f8bf 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200002d0 	.word	0x200002d0
 8001700:	40011400 	.word	0x40011400

08001704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_DMA_Init+0x3c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <MX_DMA_Init+0x3c>)
 8001714:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_DMA_Init+0x3c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2039      	movs	r0, #57	@ 0x39
 800172c:	f001 ff1b 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001730:	2039      	movs	r0, #57	@ 0x39
 8001732:	f001 ff34 	bl	800359e <HAL_NVIC_EnableIRQ>

}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <MX_GPIO_Init+0x120>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a40      	ldr	r2, [pc, #256]	@ (8001864 <MX_GPIO_Init+0x120>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b3e      	ldr	r3, [pc, #248]	@ (8001864 <MX_GPIO_Init+0x120>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b3a      	ldr	r3, [pc, #232]	@ (8001864 <MX_GPIO_Init+0x120>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a39      	ldr	r2, [pc, #228]	@ (8001864 <MX_GPIO_Init+0x120>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <MX_GPIO_Init+0x120>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <MX_GPIO_Init+0x120>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a32      	ldr	r2, [pc, #200]	@ (8001864 <MX_GPIO_Init+0x120>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b30      	ldr	r3, [pc, #192]	@ (8001864 <MX_GPIO_Init+0x120>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001864 <MX_GPIO_Init+0x120>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001864 <MX_GPIO_Init+0x120>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <MX_GPIO_Init+0x120>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIRPUMP_Pin|WATERPUMP_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2106      	movs	r1, #6
 80017ce:	4826      	ldr	r0, [pc, #152]	@ (8001868 <MX_GPIO_Init+0x124>)
 80017d0:	f002 fc10 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2120      	movs	r1, #32
 80017d8:	4824      	ldr	r0, [pc, #144]	@ (800186c <MX_GPIO_Init+0x128>)
 80017da:	f002 fc0b 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80017e4:	4822      	ldr	r0, [pc, #136]	@ (8001870 <MX_GPIO_Init+0x12c>)
 80017e6:	f002 fc05 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4819      	ldr	r0, [pc, #100]	@ (8001868 <MX_GPIO_Init+0x124>)
 8001802:	f002 fa63 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRPUMP_Pin WATERPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin|WATERPUMP_Pin;
 8001806:	2306      	movs	r3, #6
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180e:	2301      	movs	r3, #1
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4812      	ldr	r0, [pc, #72]	@ (8001868 <MX_GPIO_Init+0x124>)
 800181e:	f002 fa55 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001822:	2320      	movs	r3, #32
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <MX_GPIO_Init+0x128>)
 800183a:	f002 fa47 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 800183e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <MX_GPIO_Init+0x12c>)
 8001858:	f002 fa38 	bl	8003ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	40020800 	.word	0x40020800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <Error_Handler+0x8>

08001880 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af04      	add	r7, sp, #16
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	460b      	mov	r3, r1
 800188c:	71bb      	strb	r3, [r7, #6]
 800188e:	4613      	mov	r3, r2
 8001890:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	b29a      	uxth	r2, r3
 8001896:	230a      	movs	r3, #10
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2301      	movs	r3, #1
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f107 030f 	add.w	r3, r7, #15
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	2180      	movs	r1, #128	@ 0x80
 80018a8:	4819      	ldr	r0, [pc, #100]	@ (8001910 <PCA9685_SetBit+0x90>)
 80018aa:	f002 fdfb 	bl	80044a4 <HAL_I2C_Mem_Read>
  if (Value == 0)
 80018ae:	797b      	ldrb	r3, [r7, #5]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10d      	bne.n	80018d0 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	2201      	movs	r2, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4013      	ands	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e00a      	b.n	80018e6 <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	2201      	movs	r2, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	b25a      	sxtb	r2, r3
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	230a      	movs	r3, #10
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f107 030f 	add.w	r3, r7, #15
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <PCA9685_SetBit+0x90>)
 80018fe:	f002 fcd7 	bl	80042b0 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f001 f920 	bl	8002b48 <HAL_Delay>
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000114 	.word	0x20000114

08001914 <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af04      	add	r7, sp, #16
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8001924:	4293      	cmp	r3, r2
 8001926:	d902      	bls.n	800192e <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 8001928:	2303      	movs	r3, #3
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e00c      	b.n	8001948 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b18      	cmp	r3, #24
 8001932:	d802      	bhi.n	800193a <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 8001934:	23ff      	movs	r3, #255	@ 0xff
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e006      	b.n	8001948 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	031b      	lsls	r3, r3, #12
 800193e:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <PCA9685_SetPWMFrequency+0x74>)
 8001940:	fb92 f3f3 	sdiv	r3, r2, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8001948:	2201      	movs	r2, #1
 800194a:	2104      	movs	r1, #4
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff ff97 	bl	8001880 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8001952:	230a      	movs	r3, #10
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	2301      	movs	r3, #1
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	f107 030f 	add.w	r3, r7, #15
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	22fe      	movs	r2, #254	@ 0xfe
 8001964:	2180      	movs	r1, #128	@ 0x80
 8001966:	4809      	ldr	r0, [pc, #36]	@ (800198c <PCA9685_SetPWMFrequency+0x78>)
 8001968:	f002 fca2 	bl	80042b0 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2104      	movs	r1, #4
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff ff85 	bl	8001880 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8001976:	2201      	movs	r2, #1
 8001978:	2107      	movs	r1, #7
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ff80 	bl	8001880 <PCA9685_SetBit>
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	017d7840 	.word	0x017d7840
 800198c:	20000114 	.word	0x20000114

08001990 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ffb9 	bl	8001914 <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2105      	movs	r1, #5
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff ff6a 	bl	8001880 <PCA9685_SetBit>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af04      	add	r7, sp, #16
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	460b      	mov	r3, r1
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3306      	adds	r3, #6
 80019ce:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 80019d0:	88bb      	ldrh	r3, [r7, #4]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	230a      	movs	r3, #10
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	2304      	movs	r3, #4
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <PCA9685_SetPWM+0x60>)
 8001a08:	f002 fc52 	bl	80042b0 <HAL_I2C_Mem_Write>
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000114 	.word	0x20000114

08001a18 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	ed87 0a00 	vstr	s0, [r7]
 8001a24:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 8001a26:	edd7 7a00 	vldr	s15, [r7]
 8001a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d502      	bpl.n	8001a3a <PCA9685_SetServoAngle+0x22>
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8001a3a:	edd7 7a00 	vldr	s15, [r7]
 8001a3e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ac8 <PCA9685_SetServoAngle+0xb0>
 8001a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dd01      	ble.n	8001a50 <PCA9685_SetServoAngle+0x38>
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <PCA9685_SetServoAngle+0xb4>)
 8001a4e:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f7fe fda1 	bl	8000598 <__aeabi_f2d>
 8001a56:	a318      	add	r3, pc, #96	@ (adr r3, 8001ab8 <PCA9685_SetServoAngle+0xa0>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fdf4 	bl	8000648 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <PCA9685_SetServoAngle+0xb8>)
 8001a6e:	f7fe ff15 	bl	800089c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	a311      	add	r3, pc, #68	@ (adr r3, 8001ac0 <PCA9685_SetServoAngle+0xa8>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fc2c 	bl	80002dc <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7fe ffee 	bl	8000a6c <__aeabi_d2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8001a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9c:	ee17 3a90 	vmov	r3, s15
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff84 	bl	80019b4 <PCA9685_SetPWM>
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40799800 	.word	0x40799800
 8001ac0:	9999999a 	.word	0x9999999a
 8001ac4:	40599999 	.word	0x40599999
 8001ac8:	43340000 	.word	0x43340000
 8001acc:	43340000 	.word	0x43340000
 8001ad0:	40668000 	.word	0x40668000

08001ad4 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e00c      	b.n	8001afc <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	18d4      	adds	r4, r2, r3
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f9ff 	bl	8000ef0 <AnalogMux_ReadChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	3301      	adds	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b09      	cmp	r3, #9
 8001b00:	d9ef      	bls.n	8001ae2 <RAYKHA_ReadRaw+0xe>
    }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd90      	pop	{r4, r7, pc}

08001b0c <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]

		uint16_t sensor_values[RAYKHA_NUM_SENSORS];

		// Initialize calibration data
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b1e:	e013      	b.n	8001b48 <RAYKHA_Calibrate+0x3c>
		{
			calibration->min_values[i] = 0xFFFF;  // Max possible value
 8001b20:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			calibration->max_values[i] = 0;       // Min possible value
 8001b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	3308      	adds	r3, #8
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b42:	3301      	adds	r3, #1
 8001b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d9e7      	bls.n	8001b20 <RAYKHA_Calibrate+0x14>
		}

		calibration->line_type = line_type;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    	for(uint8_t i = 0; i < 100; i++){
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b5e:	e0ad      	b.n	8001cbc <RAYKHA_Calibrate+0x1b0>
    		// Take multiple samples for more accurate calibration
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001b66:	e053      	b.n	8001c10 <RAYKHA_Calibrate+0x104>
			{
				// Read raw sensor values
				RAYKHA_ReadRaw(sensor_values);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ffb1 	bl	8001ad4 <RAYKHA_ReadRaw>

				// Update min and max values
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001b78:	e03e      	b.n	8001bf8 <RAYKHA_Calibrate+0xec>
				{
					if (sensor_values[i] < calibration->min_values[i])
 8001b7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3328      	adds	r3, #40	@ 0x28
 8001b82:	443b      	add	r3, r7
 8001b84:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001b88:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20b      	bcs.n	8001bae <RAYKHA_Calibrate+0xa2>
					{
						calibration->min_values[i] = sensor_values[i];
 8001b96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b9a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	3328      	adds	r3, #40	@ 0x28
 8001ba2:	443b      	add	r3, r7
 8001ba4:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					}
					if (sensor_values[i] > calibration->max_values[i])
 8001bae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	3328      	adds	r3, #40	@ 0x28
 8001bb6:	443b      	add	r3, r7
 8001bb8:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001bbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	889b      	ldrh	r3, [r3, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d90f      	bls.n	8001bee <RAYKHA_Calibrate+0xe2>
					{
						calibration->max_values[i] = sensor_values[i];
 8001bce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bd2:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	3328      	adds	r3, #40	@ 0x28
 8001bda:	443b      	add	r3, r7
 8001bdc:	f833 0c1c 	ldrh.w	r0, [r3, #-28]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	f101 0308 	add.w	r3, r1, #8
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	4602      	mov	r2, r0
 8001bec:	809a      	strh	r2, [r3, #4]
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001bee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001bf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d9bc      	bls.n	8001b7a <RAYKHA_Calibrate+0x6e>
					}
				}

				// Short delay between samples
				HAL_Delay(10);
 8001c00:	200a      	movs	r0, #10
 8001c02:	f000 ffa1 	bl	8002b48 <HAL_Delay>
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8001c06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001c10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d9a7      	bls.n	8001b68 <RAYKHA_Calibrate+0x5c>
			}

			// Add small margins to avoid edge cases
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001c1e:	e044      	b.n	8001caa <RAYKHA_Calibrate+0x19e>
			{
				if (calibration->min_values[i] > 20)
 8001c20:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c2a:	2b14      	cmp	r3, #20
 8001c2c:	d90c      	bls.n	8001c48 <RAYKHA_Calibrate+0x13c>
					calibration->min_values[i] -= 20;
 8001c2e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c38:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c3c:	3b14      	subs	r3, #20
 8001c3e:	b299      	uxth	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001c46:	e005      	b.n	8001c54 <RAYKHA_Calibrate+0x148>
				else
					calibration->min_values[i] = 0;
 8001c48:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if (calibration->max_values[i] < 4075)
 8001c54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	889b      	ldrh	r3, [r3, #4]
 8001c62:	f640 72ea 	movw	r2, #4074	@ 0xfea
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d811      	bhi.n	8001c8e <RAYKHA_Calibrate+0x182>
					calibration->max_values[i] += 20;
 8001c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	3308      	adds	r3, #8
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	889a      	ldrh	r2, [r3, #4]
 8001c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c7c:	3214      	adds	r2, #20
 8001c7e:	b291      	uxth	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	3308      	adds	r3, #8
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	460a      	mov	r2, r1
 8001c8a:	809a      	strh	r2, [r3, #4]
 8001c8c:	e008      	b.n	8001ca0 <RAYKHA_Calibrate+0x194>
				else
					calibration->max_values[i] = 4095;
 8001c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	3308      	adds	r3, #8
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c9e:	809a      	strh	r2, [r3, #4]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001caa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	d9b6      	bls.n	8001c20 <RAYKHA_Calibrate+0x114>
    	for(uint8_t i = 0; i < 100; i++){
 8001cb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001cc0:	2b63      	cmp	r3, #99	@ 0x63
 8001cc2:	f67f af4d 	bls.w	8001b60 <RAYKHA_Calibrate+0x54>
			}
    	}

}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	@ 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fef8 	bl	8001ad4 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
 8001ce8:	e05a      	b.n	8001da0 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	3320      	adds	r3, #32
 8001cf0:	443b      	add	r3, r7
 8001cf2:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8001cf6:	7ff9      	ldrb	r1, [r7, #31]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d206      	bcs.n	8001d10 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
 8001d0e:	e044      	b.n	8001d9a <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	3320      	adds	r3, #32
 8001d16:	443b      	add	r3, r7
 8001d18:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	3308      	adds	r3, #8
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	889b      	ldrh	r3, [r3, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d907      	bls.n	8001d3c <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	e02e      	b.n	8001d9a <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	3320      	adds	r3, #32
 8001d42:	443b      	add	r3, r7
 8001d44:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8001d48:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	3308      	adds	r3, #8
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	18d4      	adds	r4, r2, r3
 8001d64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	462a      	mov	r2, r5
 8001d6e:	f000 f879 	bl	8001e64 <map_range>
 8001d72:	4603      	mov	r3, r0
 8001d74:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d10c      	bne.n	8001d9a <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	881a      	ldrh	r2, [r3, #0]
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	440b      	add	r3, r1
 8001d92:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8001d96:	b292      	uxth	r2, r2
 8001d98:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001d9a:	7ffb      	ldrb	r3, [r7, #31]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d9a1      	bls.n	8001cea <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}

08001db0 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73bb      	strb	r3, [r7, #14]
 8001dca:	e01c      	b.n	8001e06 <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8001dcc:	7bbb      	ldrb	r3, [r7, #14]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8001dd8:	89bb      	ldrh	r3, [r7, #12]
 8001dda:	2bc8      	cmp	r3, #200	@ 0xc8
 8001ddc:	d901      	bls.n	8001de2 <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8001de2:	89bb      	ldrh	r3, [r7, #12]
 8001de4:	7bba      	ldrb	r2, [r7, #14]
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
        sum += value;
 8001df8:	89bb      	ldrh	r3, [r7, #12]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73bb      	strb	r3, [r7, #14]
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d9df      	bls.n	8001dcc <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <RAYKHA_GetLinePosition+0x68>
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b63      	cmp	r3, #99	@ 0x63
 8001e16:	d802      	bhi.n	8001e1e <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	e003      	b.n	8001e26 <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffb6 	bl	8001db0 <RAYKHA_GetLinePosition>
 8001e44:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d102      	bne.n	8001e54 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 8001e4e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001e52:	e003      	b.n	8001e5c <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8001e5a:	3b14      	subs	r3, #20
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8001e64:	b490      	push	{r4, r7}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	80fb      	strh	r3, [r7, #6]
 8001e76:	4603      	mov	r3, r0
 8001e78:	80bb      	strh	r3, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	88bb      	ldrh	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d801      	bhi.n	8001e8e <map_range+0x2a>
 8001e8a:	883b      	ldrh	r3, [r7, #0]
 8001e8c:	e01d      	b.n	8001eca <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e8e:	88fa      	ldrh	r2, [r7, #6]
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	8b39      	ldrh	r1, [r7, #24]
 8001e96:	883a      	ldrh	r2, [r7, #0]
 8001e98:	1a8a      	subs	r2, r1, r2
 8001e9a:	fb03 f202 	mul.w	r2, r3, r2
 8001e9e:	8879      	ldrh	r1, [r7, #2]
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	1acb      	subs	r3, r1, r3
 8001ea4:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ea8:	883b      	ldrh	r3, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 8001eae:	883b      	ldrh	r3, [r7, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	da01      	bge.n	8001eba <map_range+0x56>
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 8001eba:	8b3b      	ldrh	r3, [r7, #24]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dd01      	ble.n	8001ec6 <map_range+0x62>
 8001ec2:	8b3b      	ldrh	r3, [r7, #24]
 8001ec4:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	b29b      	uxth	r3, r3
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc90      	pop	{r4, r7}
 8001ed2:	4770      	bx	lr

08001ed4 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <Servo_Init+0x3c>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d110      	bne.n	8001f08 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fd51 	bl	8001990 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8001eee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <Servo_Init+0x40>)
 8001ef6:	f005 fca7 	bl	8007848 <memset>
    servoCount = 0;
 8001efa:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <Servo_Init+0x44>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <Servo_Init+0x3c>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e000      	b.n	8001f0a <Servo_Init+0x36>
        return;
 8001f08:	bf00      	nop
}
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000635 	.word	0x20000635
 8001f14:	200003f4 	.word	0x200003f4
 8001f18:	20000634 	.word	0x20000634

08001f1c <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f2a:	edc7 0a00 	vstr	s1, [r7]
 8001f2e:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 8001f30:	4b6e      	ldr	r3, [pc, #440]	@ (80020ec <Servo_Register+0x1d0>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <Servo_Register+0x22>
        return -1;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	e0d1      	b.n	80020e2 <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8001f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80020f0 <Servo_Register+0x1d4>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	d902      	bls.n	8001f4c <Servo_Register+0x30>
        return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e0ca      	b.n	80020e2 <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	d902      	bls.n	8001f58 <Servo_Register+0x3c>
        return -1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e0c4      	b.n	80020e2 <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e01b      	b.n	8001f96 <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 8001f5e:	4965      	ldr	r1, [pc, #404]	@ (80020f4 <Servo_Register+0x1d8>)
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3310      	adds	r3, #16
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <Servo_Register+0x74>
 8001f74:	495f      	ldr	r1, [pc, #380]	@ (80020f4 <Servo_Register+0x1d8>)
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d102      	bne.n	8001f90 <Servo_Register+0x74>
            return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e0a8      	b.n	80020e2 <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	4b56      	ldr	r3, [pc, #344]	@ (80020f0 <Servo_Register+0x1d4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	dbdd      	blt.n	8001f5e <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8001fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	d502      	bpl.n	8001fb6 <Servo_Register+0x9a>
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 8001fb6:	edd7 7a00 	vldr	s15, [r7]
 8001fba:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80020f8 <Servo_Register+0x1dc>
 8001fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	dd01      	ble.n	8001fcc <Servo_Register+0xb0>
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	@ (80020fc <Servo_Register+0x1e0>)
 8001fca:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 8001fcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fd0:	edd7 7a00 	vldr	s15, [r7]
 8001fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	db02      	blt.n	8001fe4 <Servo_Register+0xc8>
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e07e      	b.n	80020e2 <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 8001fe4:	4b42      	ldr	r3, [pc, #264]	@ (80020f0 <Servo_Register+0x1d4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 8001fea:	4942      	ldr	r1, [pc, #264]	@ (80020f4 <Servo_Register+0x1d8>)
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8001ffc:	493d      	ldr	r1, [pc, #244]	@ (80020f4 <Servo_Register+0x1d8>)
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3304      	adds	r3, #4
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8002010:	4938      	ldr	r1, [pc, #224]	@ (80020f4 <Servo_Register+0x1d8>)
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3308      	adds	r3, #8
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 8002024:	ed97 7a01 	vldr	s14, [r7, #4]
 8002028:	edd7 7a00 	vldr	s15, [r7]
 800202c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002030:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002038:	492e      	ldr	r1, [pc, #184]	@ (80020f4 <Servo_Register+0x1d8>)
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	330c      	adds	r3, #12
 8002048:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 800204c:	4929      	ldr	r1, [pc, #164]	@ (80020f4 <Servo_Register+0x1d8>)
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	3310      	adds	r3, #16
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d018      	beq.n	8002098 <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	3310      	adds	r3, #16
 8002072:	4a20      	ldr	r2, [pc, #128]	@ (80020f4 <Servo_Register+0x1d8>)
 8002074:	4413      	add	r3, r2
 8002076:	3301      	adds	r3, #1
 8002078:	220f      	movs	r2, #15
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	4618      	mov	r0, r3
 800207e:	f005 fbeb 	bl	8007858 <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8002082:	491c      	ldr	r1, [pc, #112]	@ (80020f4 <Servo_Register+0x1d8>)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3320      	adds	r3, #32
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e00d      	b.n	80020b4 <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3310      	adds	r3, #16
 80020a4:	4a13      	ldr	r2, [pc, #76]	@ (80020f4 <Servo_Register+0x1d8>)
 80020a6:	4413      	add	r3, r2
 80020a8:	1c58      	adds	r0, r3, #1
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <Servo_Register+0x1e4>)
 80020ae:	2110      	movs	r1, #16
 80020b0:	f005 fb96 	bl	80077e0 <sniprintf>
    }

    // Update servo count
    servoCount++;
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <Servo_Register+0x1d4>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <Servo_Register+0x1d4>)
 80020be:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 80020c0:	490c      	ldr	r1, [pc, #48]	@ (80020f4 <Servo_Register+0x1d8>)
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	330c      	adds	r3, #12
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fc9c 	bl	8001a18 <PCA9685_SetServoAngle>

    return servoId;
 80020e0:	693b      	ldr	r3, [r7, #16]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000635 	.word	0x20000635
 80020f0:	20000634 	.word	0x20000634
 80020f4:	200003f4 	.word	0x200003f4
 80020f8:	43340000 	.word	0x43340000
 80020fc:	43340000 	.word	0x43340000
 8002100:	0800819c 	.word	0x0800819c

08002104 <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db10      	blt.n	8002138 <Servo_SetAngle+0x34>
 8002116:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <Servo_SetAngle+0xe0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4293      	cmp	r3, r2
 8002120:	da0a      	bge.n	8002138 <Servo_SetAngle+0x34>
 8002122:	4931      	ldr	r1, [pc, #196]	@ (80021e8 <Servo_SetAngle+0xe4>)
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3310      	adds	r3, #16
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <Servo_SetAngle+0x3a>
        return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	e04d      	b.n	80021da <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 800213e:	492a      	ldr	r1, [pc, #168]	@ (80021e8 <Servo_SetAngle+0xe4>)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3304      	adds	r3, #4
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ed97 7a00 	vldr	s14, [r7]
 8002156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	d509      	bpl.n	8002174 <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8002160:	4921      	ldr	r1, [pc, #132]	@ (80021e8 <Servo_SetAngle+0xe4>)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3304      	adds	r3, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8002174:	491c      	ldr	r1, [pc, #112]	@ (80021e8 <Servo_SetAngle+0xe4>)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3308      	adds	r3, #8
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ed97 7a00 	vldr	s14, [r7]
 800218c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	dd09      	ble.n	80021aa <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 8002196:	4914      	ldr	r1, [pc, #80]	@ (80021e8 <Servo_SetAngle+0xe4>)
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3308      	adds	r3, #8
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 80021aa:	490f      	ldr	r1, [pc, #60]	@ (80021e8 <Servo_SetAngle+0xe4>)
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	330c      	adds	r3, #12
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 80021be:	490a      	ldr	r1, [pc, #40]	@ (80021e8 <Servo_SetAngle+0xe4>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	ed97 0a00 	vldr	s0, [r7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fc20 	bl	8001a18 <PCA9685_SetServoAngle>

    return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000634 	.word	0x20000634
 80021e8:	200003f4 	.word	0x200003f4

080021ec <Servo_SetAngleByName>:
  * @param  name: Name of the servo
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngleByName(const char* name, float angle)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	ed87 0a00 	vstr	s0, [r7]
    if (name == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <Servo_SetAngleByName+0x18>
        return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e00f      	b.n	8002224 <Servo_SetAngleByName+0x38>

    int servoId = Servo_GetIdByName(name);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f811 	bl	800222c <Servo_GetIdByName>
 800220a:	60f8      	str	r0, [r7, #12]

    if (servoId >= 0)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db06      	blt.n	8002220 <Servo_SetAngleByName+0x34>
        return Servo_SetAngle(servoId, angle);
 8002212:	ed97 0a00 	vldr	s0, [r7]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff ff74 	bl	8002104 <Servo_SetAngle>
 800221c:	4603      	mov	r3, r0
 800221e:	e001      	b.n	8002224 <Servo_SetAngleByName+0x38>
    else
        return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <Servo_GetIdByName>:
  * @brief  Get servo ID by name
  * @param  name: Name of the servo
  * @retval int: Servo ID or -1 if not found
  */
int Servo_GetIdByName(const char* name)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    if (name == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <Servo_GetIdByName+0x14>
        return -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e02a      	b.n	8002296 <Servo_GetIdByName+0x6a>

    // Search for servo with the given name
    for (int i = 0; i < servoCount; i++) {
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e01f      	b.n	8002286 <Servo_GetIdByName+0x5a>
        if (servos[i].initialized && strcmp(servos[i].name, name) == 0)
 8002246:	4916      	ldr	r1, [pc, #88]	@ (80022a0 <Servo_GetIdByName+0x74>)
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3310      	adds	r3, #16
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d011      	beq.n	8002280 <Servo_GetIdByName+0x54>
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	3310      	adds	r3, #16
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <Servo_GetIdByName+0x74>)
 800226a:	4413      	add	r3, r2
 800226c:	3301      	adds	r3, #1
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fd ffcd 	bl	8000210 <strcmp>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <Servo_GetIdByName+0x54>
            return i;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	e00a      	b.n	8002296 <Servo_GetIdByName+0x6a>
    for (int i = 0; i < servoCount; i++) {
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <Servo_GetIdByName+0x78>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4293      	cmp	r3, r2
 8002290:	dbd9      	blt.n	8002246 <Servo_GetIdByName+0x1a>
    }

    return -1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200003f4 	.word	0x200003f4
 80022a4:	20000634 	.word	0x20000634

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022e6:	2007      	movs	r0, #7
 80022e8:	f001 f932 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	@ 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	@ (8002374 <HAL_ADC_MspInit+0x7c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d127      	bne.n	800236a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <HAL_ADC_MspInit+0x80>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	4a15      	ldr	r2, [pc, #84]	@ (8002378 <HAL_ADC_MspInit+0x80>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002328:	6453      	str	r3, [r2, #68]	@ 0x44
 800232a:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_ADC_MspInit+0x80>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <HAL_ADC_MspInit+0x80>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <HAL_ADC_MspInit+0x80>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <HAL_ADC_MspInit+0x80>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8002352:	2301      	movs	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002356:	2303      	movs	r3, #3
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_ADC_MspInit+0x84>)
 8002366:	f001 fcb1 	bl	8003ccc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	@ 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40012000 	.word	0x40012000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800

08002380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	@ 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a42      	ldr	r2, [pc, #264]	@ (80024a8 <HAL_I2C_MspInit+0x128>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12c      	bne.n	80023fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	4b41      	ldr	r3, [pc, #260]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a40      	ldr	r2, [pc, #256]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023be:	23c0      	movs	r3, #192	@ 0xc0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c2:	2312      	movs	r3, #18
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ce:	2304      	movs	r3, #4
 80023d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 031c 	add.w	r3, r7, #28
 80023d6:	4619      	mov	r1, r3
 80023d8:	4835      	ldr	r0, [pc, #212]	@ (80024b0 <HAL_I2C_MspInit+0x130>)
 80023da:	f001 fc77 	bl	8003ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	4b32      	ldr	r3, [pc, #200]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	4a31      	ldr	r2, [pc, #196]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 80023e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ee:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023fa:	e050      	b.n	800249e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2c      	ldr	r2, [pc, #176]	@ (80024b4 <HAL_I2C_MspInit+0x134>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d14b      	bne.n	800249e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a27      	ldr	r2, [pc, #156]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a20      	ldr	r2, [pc, #128]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800243e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002444:	2312      	movs	r3, #18
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002450:	2304      	movs	r3, #4
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	4815      	ldr	r0, [pc, #84]	@ (80024b0 <HAL_I2C_MspInit+0x130>)
 800245c:	f001 fc36 	bl	8003ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002466:	2312      	movs	r3, #18
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002472:	2304      	movs	r3, #4
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	4619      	mov	r1, r3
 800247c:	480e      	ldr	r0, [pc, #56]	@ (80024b8 <HAL_I2C_MspInit+0x138>)
 800247e:	f001 fc25 	bl	8003ccc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 800248c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_I2C_MspInit+0x12c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
}
 800249e:	bf00      	nop
 80024a0:	3730      	adds	r7, #48	@ 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40005400 	.word	0x40005400
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40005800 	.word	0x40005800
 80024b8:	40020800 	.word	0x40020800

080024bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	@ 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a32      	ldr	r2, [pc, #200]	@ (80025a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d12d      	bne.n	800253a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	4a30      	ldr	r2, [pc, #192]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ee:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
 80024f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a29      	ldr	r2, [pc, #164]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8002516:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800251a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002528:	2301      	movs	r3, #1
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	481e      	ldr	r0, [pc, #120]	@ (80025ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8002534:	f001 fbca 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002538:	e030      	b.n	800259c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002542:	d12b      	bne.n	800259c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6413      	str	r3, [r2, #64]	@ 0x40
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	4a0f      	ldr	r2, [pc, #60]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002570:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 800257c:	2303      	movs	r3, #3
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258c:	2301      	movs	r3, #1
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	4805      	ldr	r0, [pc, #20]	@ (80025ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8002598:	f001 fb98 	bl	8003ccc <HAL_GPIO_Init>
}
 800259c:	bf00      	nop
 800259e:	3730      	adds	r7, #48	@ 0x30
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020000 	.word	0x40020000

080025b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <HAL_TIM_PWM_MspInit+0x3c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10d      	bne.n	80025de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_TIM_PWM_MspInit+0x40>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_TIM_PWM_MspInit+0x40>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <HAL_TIM_PWM_MspInit+0x40>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a21      	ldr	r2, [pc, #132]	@ (8002698 <HAL_TIM_MspPostInit+0xa4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d13b      	bne.n	800268e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_TIM_MspPostInit+0xa8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a1f      	ldr	r2, [pc, #124]	@ (800269c <HAL_TIM_MspPostInit+0xa8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <HAL_TIM_MspPostInit+0xa8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b19      	ldr	r3, [pc, #100]	@ (800269c <HAL_TIM_MspPostInit+0xa8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <HAL_TIM_MspPostInit+0xa8>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <HAL_TIM_MspPostInit+0xa8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800264e:	23c0      	movs	r3, #192	@ 0xc0
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800265e:	2302      	movs	r3, #2
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <HAL_TIM_MspPostInit+0xac>)
 800266a:	f001 fb2f 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800266e:	2303      	movs	r3, #3
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267e:	2302      	movs	r3, #2
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4806      	ldr	r0, [pc, #24]	@ (80026a4 <HAL_TIM_MspPostInit+0xb0>)
 800268a:	f001 fb1f 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	@ 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40000400 	.word	0x40000400
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40020400 	.word	0x40020400

080026a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08e      	sub	sp, #56	@ 0x38
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a66      	ldr	r2, [pc, #408]	@ (8002860 <HAL_UART_MspInit+0x1b8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d12c      	bne.n	8002724 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	4b65      	ldr	r3, [pc, #404]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	4a64      	ldr	r2, [pc, #400]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026da:	4b62      	ldr	r3, [pc, #392]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	623b      	str	r3, [r7, #32]
 80026e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002702:	230c      	movs	r3, #12
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002712:	2307      	movs	r3, #7
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271a:	4619      	mov	r1, r3
 800271c:	4852      	ldr	r0, [pc, #328]	@ (8002868 <HAL_UART_MspInit+0x1c0>)
 800271e:	f001 fad5 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002722:	e099      	b.n	8002858 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a50      	ldr	r2, [pc, #320]	@ (800286c <HAL_UART_MspInit+0x1c4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d12d      	bne.n	800278a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	4b4c      	ldr	r3, [pc, #304]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a4b      	ldr	r2, [pc, #300]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b49      	ldr	r3, [pc, #292]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	4b45      	ldr	r3, [pc, #276]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a44      	ldr	r2, [pc, #272]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b42      	ldr	r3, [pc, #264]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002766:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002778:	2307      	movs	r3, #7
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002780:	4619      	mov	r1, r3
 8002782:	483b      	ldr	r0, [pc, #236]	@ (8002870 <HAL_UART_MspInit+0x1c8>)
 8002784:	f001 faa2 	bl	8003ccc <HAL_GPIO_Init>
}
 8002788:	e066      	b.n	8002858 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a39      	ldr	r2, [pc, #228]	@ (8002874 <HAL_UART_MspInit+0x1cc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d161      	bne.n	8002858 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	4b32      	ldr	r3, [pc, #200]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	4a31      	ldr	r2, [pc, #196]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 800279e:	f043 0320 	orr.w	r3, r3, #32
 80027a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80027a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c0:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_UART_MspInit+0x1bc>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027cc:	23c0      	movs	r3, #192	@ 0xc0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027dc:	2308      	movs	r3, #8
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	4822      	ldr	r0, [pc, #136]	@ (8002870 <HAL_UART_MspInit+0x1c8>)
 80027e8:	f001 fa70 	bl	8003ccc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80027ec:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 80027ee:	4a23      	ldr	r2, [pc, #140]	@ (800287c <HAL_UART_MspInit+0x1d4>)
 80027f0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80027f2:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 80027f4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80027f8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002800:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002806:	4b1c      	ldr	r3, [pc, #112]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002808:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800280c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800281a:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002820:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002828:	2200      	movs	r2, #0
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800282c:	4812      	ldr	r0, [pc, #72]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 800282e:	f000 fed1 	bl	80035d4 <HAL_DMA_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_UART_MspInit+0x194>
      Error_Handler();
 8002838:	f7ff f81c 	bl	8001874 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a0e      	ldr	r2, [pc, #56]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002840:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002842:	4a0d      	ldr	r2, [pc, #52]	@ (8002878 <HAL_UART_MspInit+0x1d0>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	2047      	movs	r0, #71	@ 0x47
 800284e:	f000 fe8a 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002852:	2047      	movs	r0, #71	@ 0x47
 8002854:	f000 fea3 	bl	800359e <HAL_NVIC_EnableIRQ>
}
 8002858:	bf00      	nop
 800285a:	3738      	adds	r7, #56	@ 0x38
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40004400 	.word	0x40004400
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000
 800286c:	40004800 	.word	0x40004800
 8002870:	40020800 	.word	0x40020800
 8002874:	40011400 	.word	0x40011400
 8002878:	20000318 	.word	0x20000318
 800287c:	40026428 	.word	0x40026428

08002880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <NMI_Handler+0x4>

08002888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <HardFault_Handler+0x4>

08002890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <MemManage_Handler+0x4>

08002898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <BusFault_Handler+0x4>

080028a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <UsageFault_Handler+0x4>

080028a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d6:	f000 f917 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 80028da:	f000 f85f 	bl	800299c <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <DMA2_Stream1_IRQHandler+0x10>)
 80028ea:	f000 ffb3 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000318 	.word	0x20000318

080028f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <USART6_IRQHandler+0x10>)
 80028fe:	f004 f871 	bl	80069e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200002d0 	.word	0x200002d0

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f004 ffa0 	bl	8007880 <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20020000 	.word	0x20020000
 800296c:	00000400 	.word	0x00000400
 8002970:	20000638 	.word	0x20000638
 8002974:	20000788 	.word	0x20000788

08002978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <SystemInit+0x20>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <SystemInit+0x20>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <SysTickFunction>:

#include "main.h"
// #include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80029a2:	f7fe faf7 	bl	8000f94 <getRightEncoderCounts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	f647 1318 	movw	r3, #31000	@ 0x7918
 80029ae:	429a      	cmp	r2, r3
 80029b0:	dc15      	bgt.n	80029de <SysTickFunction+0x42>
 80029b2:	f7fe fafb 	bl	8000fac <getLeftEncoderCounts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	f647 1318 	movw	r3, #31000	@ 0x7918
 80029be:	429a      	cmp	r2, r3
 80029c0:	dc0d      	bgt.n	80029de <SysTickFunction+0x42>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80029c2:	f7fe fae7 	bl	8000f94 <getRightEncoderCounts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <SysTickFunction+0x6c>)
 80029cc:	429a      	cmp	r2, r3
 80029ce:	db06      	blt.n	80029de <SysTickFunction+0x42>
 80029d0:	f7fe faec 	bl	8000fac <getLeftEncoderCounts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <SysTickFunction+0x6c>)
 80029da:	429a      	cmp	r2, r3
 80029dc:	da10      	bge.n	8002a00 <SysTickFunction+0x64>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80029de:	f7fe fad9 	bl	8000f94 <getRightEncoderCounts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	b29c      	uxth	r4, r3
 80029e6:	f7fe fae1 	bl	8000fac <getLeftEncoderCounts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	1ae3      	subs	r3, r4, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 80029f4:	f7fe fae6 	bl	8000fc4 <resetEncoders>
		TIM1->CNT = (int16_t) difference;
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <SysTickFunction+0x70>)
 80029fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fe:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	ffff86e8 	.word	0xffff86e8
 8002a0c:	40010000 	.word	0x40010000

08002a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a14:	f7ff ffb0 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a18:	480c      	ldr	r0, [pc, #48]	@ (8002a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a1a:	490d      	ldr	r1, [pc, #52]	@ (8002a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a30:	4c0a      	ldr	r4, [pc, #40]	@ (8002a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f004 ff25 	bl	800788c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a42:	f7fe faed 	bl	8001020 <main>
  bx  lr    
 8002a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002a54:	08008208 	.word	0x08008208
  ldr r2, =_sbss
 8002a58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002a5c:	20000788 	.word	0x20000788

08002a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <HAL_Init+0x40>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <HAL_Init+0x40>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	@ (8002aa4 <HAL_Init+0x40>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 fd5f 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fc06 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fd77 	bl	80035ba <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f000 fd3f 	bl	8003566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	@ (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000008 	.word	0x20000008
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000008 	.word	0x20000008
 8002b2c:	2000063c 	.word	0x2000063c

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	2000063c 	.word	0x2000063c

08002b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff ffee 	bl	8002b30 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000008 	.word	0x20000008

08002b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e033      	b.n	8002c0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fba2 	bl	80022f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d118      	bne.n	8002c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bd6:	f023 0302 	bic.w	r3, r3, #2
 8002bda:	f043 0202 	orr.w	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fae8 	bl	80031b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bfe:	e001      	b.n	8002c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_Start+0x1a>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0b2      	b.n	8002d98 <HAL_ADC_Start+0x180>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d018      	beq.n	8002c7a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c58:	4b52      	ldr	r3, [pc, #328]	@ (8002da4 <HAL_ADC_Start+0x18c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	@ (8002da8 <HAL_ADC_Start+0x190>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9a      	lsrs	r2, r3, #18
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c6c:	e002      	b.n	8002c74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f9      	bne.n	8002c6e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d17a      	bne.n	8002d7e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cb2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	f023 0206 	bic.w	r2, r3, #6
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_ADC_Start+0x194>)
 8002ce6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d12a      	bne.n	8002d54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2b      	ldr	r2, [pc, #172]	@ (8002db0 <HAL_ADC_Start+0x198>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d015      	beq.n	8002d34 <HAL_ADC_Start+0x11c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	@ (8002db4 <HAL_ADC_Start+0x19c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_Start+0x106>
 8002d12:	4b26      	ldr	r3, [pc, #152]	@ (8002dac <HAL_ADC_Start+0x194>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a25      	ldr	r2, [pc, #148]	@ (8002db8 <HAL_ADC_Start+0x1a0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d136      	bne.n	8002d96 <HAL_ADC_Start+0x17e>
 8002d28:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <HAL_ADC_Start+0x194>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d130      	bne.n	8002d96 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d129      	bne.n	8002d96 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	e020      	b.n	8002d96 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <HAL_ADC_Start+0x198>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d11b      	bne.n	8002d96 <HAL_ADC_Start+0x17e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d114      	bne.n	8002d96 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e00b      	b.n	8002d96 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	20000000 	.word	0x20000000
 8002da8:	431bde83 	.word	0x431bde83
 8002dac:	40012300 	.word	0x40012300
 8002db0:	40012000 	.word	0x40012000
 8002db4:	40012100 	.word	0x40012100
 8002db8:	40012200 	.word	0x40012200

08002dbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_Stop+0x16>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e021      	b.n	8002e16 <HAL_ADC_Stop+0x5a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e3e:	d113      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4e:	d10b      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e063      	b.n	8002f30 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e68:	f7ff fe62 	bl	8002b30 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e6e:	e021      	b.n	8002eb4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d01d      	beq.n	8002eb4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_ADC_PollForConversion+0x6c>
 8002e7e:	f7ff fe57 	bl	8002b30 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d212      	bcs.n	8002eb4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	f043 0204 	orr.w	r2, r3, #4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e03d      	b.n	8002f30 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d1d6      	bne.n	8002e70 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0212 	mvn.w	r2, #18
 8002eca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d123      	bne.n	8002f2e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11f      	bne.n	8002f2e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d111      	bne.n	8002f2e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1c>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e113      	b.n	8003198 <HAL_ADC_ConfigChannel+0x244>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	d925      	bls.n	8002fcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68d9      	ldr	r1, [r3, #12]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	3b1e      	subs	r3, #30
 8002f96:	2207      	movs	r2, #7
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4603      	mov	r3, r0
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4403      	add	r3, r0
 8002fbe:	3b1e      	subs	r3, #30
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	e022      	b.n	8003012 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6919      	ldr	r1, [r3, #16]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	4603      	mov	r3, r0
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4403      	add	r3, r0
 8003008:	409a      	lsls	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d824      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b05      	subs	r3, #5
 800302c:	221f      	movs	r2, #31
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	400a      	ands	r2, r1
 800303a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b05      	subs	r3, #5
 8003056:	fa00 f203 	lsl.w	r2, r0, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	635a      	str	r2, [r3, #52]	@ 0x34
 8003062:	e04c      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d824      	bhi.n	80030b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b23      	subs	r3, #35	@ 0x23
 800307e:	221f      	movs	r2, #31
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43da      	mvns	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	400a      	ands	r2, r1
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	4618      	mov	r0, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b23      	subs	r3, #35	@ 0x23
 80030a8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80030b4:	e023      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b41      	subs	r3, #65	@ 0x41
 80030c8:	221f      	movs	r2, #31
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	400a      	ands	r2, r1
 80030d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b41      	subs	r3, #65	@ 0x41
 80030f2:	fa00 f203 	lsl.w	r2, r0, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fe:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <HAL_ADC_ConfigChannel+0x250>)
 8003100:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a28      	ldr	r2, [pc, #160]	@ (80031a8 <HAL_ADC_ConfigChannel+0x254>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10f      	bne.n	800312c <HAL_ADC_ConfigChannel+0x1d8>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b12      	cmp	r3, #18
 8003112:	d10b      	bne.n	800312c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <HAL_ADC_ConfigChannel+0x254>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d12b      	bne.n	800318e <HAL_ADC_ConfigChannel+0x23a>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1c      	ldr	r2, [pc, #112]	@ (80031ac <HAL_ADC_ConfigChannel+0x258>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x1f4>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b11      	cmp	r3, #17
 8003146:	d122      	bne.n	800318e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_ADC_ConfigChannel+0x258>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d111      	bne.n	800318e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_ADC_ConfigChannel+0x25c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <HAL_ADC_ConfigChannel+0x260>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9a      	lsrs	r2, r3, #18
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003180:	e002      	b.n	8003188 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3b01      	subs	r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f9      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40012300 	.word	0x40012300
 80031a8:	40012000 	.word	0x40012000
 80031ac:	10000012 	.word	0x10000012
 80031b0:	20000000 	.word	0x20000000
 80031b4:	431bde83 	.word	0x431bde83

080031b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c0:	4b79      	ldr	r3, [pc, #484]	@ (80033a8 <ADC_Init+0x1f0>)
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	021a      	lsls	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6899      	ldr	r1, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	4a58      	ldr	r2, [pc, #352]	@ (80033ac <ADC_Init+0x1f4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800325e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6899      	ldr	r1, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6899      	ldr	r1, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	e00f      	b.n	80032b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0202 	bic.w	r2, r2, #2
 80032c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7e1b      	ldrb	r3, [r3, #24]
 80032d0:	005a      	lsls	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01b      	beq.n	800331c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003302:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	3b01      	subs	r3, #1
 8003310:	035a      	lsls	r2, r3, #13
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	e007      	b.n	800332c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	3b01      	subs	r3, #1
 8003348:	051a      	lsls	r2, r3, #20
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800336e:	025a      	lsls	r2, r3, #9
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	029a      	lsls	r2, r3, #10
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40012300 	.word	0x40012300
 80033ac:	0f000001 	.word	0x0f000001

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e2:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60d3      	str	r3, [r2, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	@ (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	@ (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	@ (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	@ 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800351c:	d301      	bcc.n	8003522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351e:	2301      	movs	r3, #1
 8003520:	e00f      	b.n	8003542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003522:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <SysTick_Config+0x40>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352a:	210f      	movs	r1, #15
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f7ff ff8e 	bl	8003450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <SysTick_Config+0x40>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353a:	4b04      	ldr	r3, [pc, #16]	@ (800354c <SysTick_Config+0x40>)
 800353c:	2207      	movs	r2, #7
 800353e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000e010 	.word	0xe000e010

08003550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff29 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003578:	f7ff ff3e 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 800357c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff8e 	bl	80034a4 <NVIC_EncodePriority>
 8003588:	4602      	mov	r2, r0
 800358a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff5d 	bl	8003450 <__NVIC_SetPriority>
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff31 	bl	8003414 <__NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffa2 	bl	800350c <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7ff faa6 	bl	8002b30 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e099      	b.n	8003724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003610:	e00f      	b.n	8003632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003612:	f7ff fa8d 	bl	8002b30 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b05      	cmp	r3, #5
 800361e:	d908      	bls.n	8003632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e078      	b.n	8003724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e8      	bne.n	8003612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4b38      	ldr	r3, [pc, #224]	@ (800372c <HAL_DMA_Init+0x158>)
 800364c:	4013      	ands	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	2b04      	cmp	r3, #4
 800368a:	d107      	bne.n	800369c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	4313      	orrs	r3, r2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d117      	bne.n	80036f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa7b 	bl	8003bd4 <DMA_CheckFifoParam>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2240      	movs	r2, #64	@ 0x40
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036f2:	2301      	movs	r3, #1
 80036f4:	e016      	b.n	8003724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa32 	bl	8003b68 <DMA_CalcBaseAndBitshift>
 8003704:	4603      	mov	r3, r0
 8003706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	223f      	movs	r2, #63	@ 0x3f
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	f010803f 	.word	0xf010803f

08003730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800373e:	f7ff f9f7 	bl	8002b30 <HAL_GetTick>
 8003742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d008      	beq.n	8003762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2280      	movs	r2, #128	@ 0x80
 8003754:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e052      	b.n	8003808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0216 	bic.w	r2, r2, #22
 8003770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <HAL_DMA_Abort+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0208 	bic.w	r2, r2, #8
 80037a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b2:	e013      	b.n	80037dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b4:	f7ff f9bc 	bl	8002b30 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d90c      	bls.n	80037dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2203      	movs	r2, #3
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e015      	b.n	8003808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e4      	bne.n	80037b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	223f      	movs	r2, #63	@ 0x3f
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d004      	beq.n	800382e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2280      	movs	r2, #128	@ 0x80
 8003828:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00c      	b.n	8003848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2205      	movs	r2, #5
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003860:	4b8e      	ldr	r3, [pc, #568]	@ (8003a9c <HAL_DMA_IRQHandler+0x248>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a8e      	ldr	r2, [pc, #568]	@ (8003aa0 <HAL_DMA_IRQHandler+0x24c>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0a9b      	lsrs	r3, r3, #10
 800386c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	2208      	movs	r2, #8
 8003880:	409a      	lsls	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01a      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	2208      	movs	r2, #8
 80038ae:	409a      	lsls	r2, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c4:	2201      	movs	r2, #1
 80038c6:	409a      	lsls	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	2201      	movs	r2, #1
 80038e4:	409a      	lsls	r2, r3
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ee:	f043 0202 	orr.w	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	2204      	movs	r2, #4
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	2204      	movs	r2, #4
 800391a:	409a      	lsls	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	f043 0204 	orr.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	2210      	movs	r2, #16
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d043      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03c      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	2210      	movs	r2, #16
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d018      	beq.n	8003996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d108      	bne.n	8003984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d024      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
 8003982:	e01f      	b.n	80039c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
 8003994:	e016      	b.n	80039c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0208 	bic.w	r2, r2, #8
 80039b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c8:	2220      	movs	r2, #32
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 808f 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8087 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	2220      	movs	r2, #32
 80039ec:	409a      	lsls	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d136      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0216 	bic.w	r2, r2, #22
 8003a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x1da>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0208 	bic.w	r2, r2, #8
 8003a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	223f      	movs	r2, #63	@ 0x3f
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d07e      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
        }
        return;
 8003a6a:	e079      	b.n	8003b60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01d      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d031      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e02c      	b.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
 8003a9a:	bf00      	nop
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d023      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
 8003ab4:	e01e      	b.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0210 	bic.w	r2, r2, #16
 8003ad2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d032      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d307      	bcc.n	8003b3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f2      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x2cc>
 8003b3a:	e000      	b.n	8003b3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
 8003b5e:	e000      	b.n	8003b62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b60:	bf00      	nop
    }
  }
}
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3b10      	subs	r3, #16
 8003b78:	4a14      	ldr	r2, [pc, #80]	@ (8003bcc <DMA_CalcBaseAndBitshift+0x64>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b82:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d909      	bls.n	8003baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ba8:	e007      	b.n	8003bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	aaaaaaab 	.word	0xaaaaaaab
 8003bd0:	080081bc 	.word	0x080081bc

08003bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11f      	bne.n	8003c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d856      	bhi.n	8003ca2 <DMA_CheckFifoParam+0xce>
 8003bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <DMA_CheckFifoParam+0x28>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c1f 	.word	0x08003c1f
 8003c04:	08003c0d 	.word	0x08003c0d
 8003c08:	08003ca3 	.word	0x08003ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d046      	beq.n	8003ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e043      	b.n	8003ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c26:	d140      	bne.n	8003caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2c:	e03d      	b.n	8003caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c36:	d121      	bne.n	8003c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d837      	bhi.n	8003cae <DMA_CheckFifoParam+0xda>
 8003c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <DMA_CheckFifoParam+0x70>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c5b 	.word	0x08003c5b
 8003c4c:	08003c55 	.word	0x08003c55
 8003c50:	08003c6d 	.word	0x08003c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e030      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d025      	beq.n	8003cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6a:	e022      	b.n	8003cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c74:	d11f      	bne.n	8003cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c7a:	e01c      	b.n	8003cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d903      	bls.n	8003c8a <DMA_CheckFifoParam+0xb6>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d003      	beq.n	8003c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c88:	e018      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8e:	e015      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca0:	e00b      	b.n	8003cba <DMA_CheckFifoParam+0xe6>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e00a      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e008      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003caa:	bf00      	nop
 8003cac:	e006      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
    }
  } 
  
  return status; 
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop

08003ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	@ 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e165      	b.n	8003fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 8154 	bne.w	8003fae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d005      	beq.n	8003d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d017      	beq.n	8003dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80ae 	beq.w	8003fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b5d      	ldr	r3, [pc, #372]	@ (8003fcc <HAL_GPIO_Init+0x300>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8003fcc <HAL_GPIO_Init+0x300>)
 8003e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e62:	4b5a      	ldr	r3, [pc, #360]	@ (8003fcc <HAL_GPIO_Init+0x300>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e6e:	4a58      	ldr	r2, [pc, #352]	@ (8003fd0 <HAL_GPIO_Init+0x304>)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd4 <HAL_GPIO_Init+0x308>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d025      	beq.n	8003ee6 <HAL_GPIO_Init+0x21a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4e      	ldr	r2, [pc, #312]	@ (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01f      	beq.n	8003ee2 <HAL_GPIO_Init+0x216>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4d      	ldr	r2, [pc, #308]	@ (8003fdc <HAL_GPIO_Init+0x310>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d019      	beq.n	8003ede <HAL_GPIO_Init+0x212>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe0 <HAL_GPIO_Init+0x314>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_GPIO_Init+0x20e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_GPIO_Init+0x318>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_GPIO_Init+0x20a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe8 <HAL_GPIO_Init+0x31c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <HAL_GPIO_Init+0x206>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a49      	ldr	r2, [pc, #292]	@ (8003fec <HAL_GPIO_Init+0x320>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <HAL_GPIO_Init+0x202>
 8003eca:	2306      	movs	r3, #6
 8003ecc:	e00c      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ece:	2307      	movs	r3, #7
 8003ed0:	e00a      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	e008      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e004      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	f002 0203 	and.w	r2, r2, #3
 8003eee:	0092      	lsls	r2, r2, #2
 8003ef0:	4093      	lsls	r3, r2
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ef8:	4935      	ldr	r1, [pc, #212]	@ (8003fd0 <HAL_GPIO_Init+0x304>)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	3302      	adds	r3, #2
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f06:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f2a:	4a31      	ldr	r2, [pc, #196]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f30:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f54:	4a26      	ldr	r2, [pc, #152]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f5a:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa8:	4a11      	ldr	r2, [pc, #68]	@ (8003ff0 <HAL_GPIO_Init+0x324>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	f67f ae96 	bls.w	8003ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3724      	adds	r7, #36	@ 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	40020c00 	.word	0x40020c00
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40021400 	.word	0x40021400
 8003fec:	40021800 	.word	0x40021800
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004010:	e003      	b.n	800401a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	619a      	str	r2, [r3, #24]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e12b      	b.n	8004292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe f996 	bl	8002380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	@ 0x24
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800407a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800408a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800408c:	f001 f932 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 8004090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a81      	ldr	r2, [pc, #516]	@ (800429c <HAL_I2C_Init+0x274>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d807      	bhi.n	80040ac <HAL_I2C_Init+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a80      	ldr	r2, [pc, #512]	@ (80042a0 <HAL_I2C_Init+0x278>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e006      	b.n	80040ba <HAL_I2C_Init+0x92>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a7d      	ldr	r2, [pc, #500]	@ (80042a4 <HAL_I2C_Init+0x27c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf94      	ite	ls
 80040b4:	2301      	movls	r3, #1
 80040b6:	2300      	movhi	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0e7      	b.n	8004292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a78      	ldr	r2, [pc, #480]	@ (80042a8 <HAL_I2C_Init+0x280>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0c9b      	lsrs	r3, r3, #18
 80040cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a6a      	ldr	r2, [pc, #424]	@ (800429c <HAL_I2C_Init+0x274>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d802      	bhi.n	80040fc <HAL_I2C_Init+0xd4>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3301      	adds	r3, #1
 80040fa:	e009      	b.n	8004110 <HAL_I2C_Init+0xe8>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	4a69      	ldr	r2, [pc, #420]	@ (80042ac <HAL_I2C_Init+0x284>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	3301      	adds	r3, #1
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	430b      	orrs	r3, r1
 8004116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004122:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	495c      	ldr	r1, [pc, #368]	@ (800429c <HAL_I2C_Init+0x274>)
 800412c:	428b      	cmp	r3, r1
 800412e:	d819      	bhi.n	8004164 <HAL_I2C_Init+0x13c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1e59      	subs	r1, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fbb1 f3f3 	udiv	r3, r1, r3
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004144:	400b      	ands	r3, r1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_I2C_Init+0x138>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1e59      	subs	r1, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fbb1 f3f3 	udiv	r3, r1, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415e:	e051      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004160:	2304      	movs	r3, #4
 8004162:	e04f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <HAL_I2C_Init+0x168>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1e58      	subs	r0, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e012      	b.n	80041b6 <HAL_I2C_Init+0x18e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1e58      	subs	r0, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	0099      	lsls	r1, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Init+0x196>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e022      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <HAL_I2C_Init+0x1bc>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1e58      	subs	r0, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	440b      	add	r3, r1
 80041d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e58      	subs	r0, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	0099      	lsls	r1, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fa:	3301      	adds	r3, #1
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	6809      	ldr	r1, [r1, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004232:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6911      	ldr	r1, [r2, #16]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	000186a0 	.word	0x000186a0
 80042a0:	001e847f 	.word	0x001e847f
 80042a4:	003d08ff 	.word	0x003d08ff
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	10624dd3 	.word	0x10624dd3

080042b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7fe fc31 	bl	8002b30 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	f040 80d9 	bne.w	8004490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2319      	movs	r3, #25
 80042e4:	2201      	movs	r2, #1
 80042e6:	496d      	ldr	r1, [pc, #436]	@ (800449c <HAL_I2C_Mem_Write+0x1ec>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fc8b 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0cc      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_I2C_Mem_Write+0x56>
 8004302:	2302      	movs	r3, #2
 8004304:	e0c5      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d007      	beq.n	800432c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2221      	movs	r2, #33	@ 0x21
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	@ 0x40
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800435c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a4d      	ldr	r2, [pc, #308]	@ (80044a0 <HAL_I2C_Mem_Write+0x1f0>)
 800436c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436e:	88f8      	ldrh	r0, [r7, #6]
 8004370:	893a      	ldrh	r2, [r7, #8]
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4603      	mov	r3, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fac2 	bl	8004908 <I2C_RequestMemoryWrite>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d052      	beq.n	8004430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e081      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fd50 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06b      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d11b      	bne.n	8004430 <HAL_I2C_Mem_Write+0x180>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d017      	beq.n	8004430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1aa      	bne.n	800438e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fd43 	bl	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	2b04      	cmp	r3, #4
 800444e:	d107      	bne.n	8004460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800445e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e016      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	00100002 	.word	0x00100002
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	@ 0x30
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044be:	f7fe fb37 	bl	8002b30 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	f040 8214 	bne.w	80048fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2319      	movs	r3, #25
 80044d8:	2201      	movs	r2, #1
 80044da:	497b      	ldr	r1, [pc, #492]	@ (80046c8 <HAL_I2C_Mem_Read+0x224>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fb91 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
 80044ea:	e207      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Mem_Read+0x56>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e200      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d007      	beq.n	8004520 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800452e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	@ 0x22
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2240      	movs	r2, #64	@ 0x40
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a5b      	ldr	r2, [pc, #364]	@ (80046cc <HAL_I2C_Mem_Read+0x228>)
 8004560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004562:	88f8      	ldrh	r0, [r7, #6]
 8004564:	893a      	ldrh	r2, [r7, #8]
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	4603      	mov	r3, r0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fa5e 	bl	8004a34 <I2C_RequestMemoryRead>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1bc      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e190      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d11b      	bne.n	80045f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e170      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d11b      	bne.n	8004632 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004608:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	e150      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004648:	e144      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464e:	2b03      	cmp	r3, #3
 8004650:	f200 80f1 	bhi.w	8004836 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	2b01      	cmp	r3, #1
 800465a:	d123      	bne.n	80046a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fc79 	bl	8004f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e145      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046a2:	e117      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d14e      	bne.n	800474a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	2200      	movs	r2, #0
 80046b4:	4906      	ldr	r1, [pc, #24]	@ (80046d0 <HAL_I2C_Mem_Read+0x22c>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 faa4 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e11a      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
 80046c6:	bf00      	nop
 80046c8:	00100002 	.word	0x00100002
 80046cc:	ffff0000 	.word	0xffff0000
 80046d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004748:	e0c4      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2200      	movs	r2, #0
 8004752:	496c      	ldr	r1, [pc, #432]	@ (8004904 <HAL_I2C_Mem_Read+0x460>)
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fa55 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0cb      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	2200      	movs	r2, #0
 80047ae:	4955      	ldr	r1, [pc, #340]	@ (8004904 <HAL_I2C_Mem_Read+0x460>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fa27 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e09d      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004834:	e04e      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fb8c 	bl	8004f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e058      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d124      	bne.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f47f aeb6 	bne.w	800464a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e000      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048fa:	2302      	movs	r3, #2
  }
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3728      	adds	r7, #40	@ 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	00010004 	.word	0x00010004

08004908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	461a      	mov	r2, r3
 8004916:	4603      	mov	r3, r0
 8004918:	817b      	strh	r3, [r7, #10]
 800491a:	460b      	mov	r3, r1
 800491c:	813b      	strh	r3, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2200      	movs	r2, #0
 800493a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f960 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004958:	d103      	bne.n	8004962 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e05f      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004974:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	492d      	ldr	r1, [pc, #180]	@ (8004a30 <I2C_RequestMemoryWrite+0x128>)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f9bb 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04c      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a4:	6a39      	ldr	r1, [r7, #32]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fa46 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d107      	bne.n	80049ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02b      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	611a      	str	r2, [r3, #16]
 80049de:	e021      	b.n	8004a24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049e0:	893b      	ldrh	r3, [r7, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	6a39      	ldr	r1, [r7, #32]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa20 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e005      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1a:	893b      	ldrh	r3, [r7, #8]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	00010002 	.word	0x00010002

08004a34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f8c2 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a94:	d103      	bne.n	8004a9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0aa      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	4952      	ldr	r1, [pc, #328]	@ (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f91d 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e097      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	6a39      	ldr	r1, [r7, #32]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f9a8 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d107      	bne.n	8004b06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e076      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	e021      	b.n	8004b60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2c:	6a39      	ldr	r1, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f982 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d107      	bne.n	8004b52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e050      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b62:	6a39      	ldr	r1, [r7, #32]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f967 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d107      	bne.n	8004b88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e035      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f82b 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc2:	d103      	bne.n	8004bcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e013      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd0:	897b      	ldrh	r3, [r7, #10]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	4906      	ldr	r1, [pc, #24]	@ (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f886 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c14:	e048      	b.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d044      	beq.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fd ff87 	bl	8002b30 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d139      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10d      	bne.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	e00c      	b.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	43da      	mvns	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d116      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e023      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10d      	bne.n	8004cce <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	e00c      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d093      	beq.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d06:	e071      	b.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d16:	d123      	bne.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e067      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d041      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fd fee2 	bl	8002b30 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d136      	bne.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10c      	bne.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e00b      	b.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4013      	ands	r3, r2
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e021      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10c      	bne.n	8004e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e00b      	b.n	8004e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af6d 	bne.w	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e44:	e034      	b.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f8e3 	bl	8005012 <I2C_IsAcknowledgeFailed>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e034      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d028      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fd fe67 	bl	8002b30 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11d      	bne.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	2b80      	cmp	r3, #128	@ 0x80
 8004e80:	d016      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e007      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b80      	cmp	r3, #128	@ 0x80
 8004ebc:	d1c3      	bne.n	8004e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed4:	e034      	b.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f89b 	bl	8005012 <I2C_IsAcknowledgeFailed>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e034      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d028      	beq.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fd fe1f 	bl	8002b30 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11d      	bne.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d016      	beq.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e007      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d1c3      	bne.n	8004ed6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f64:	e049      	b.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b10      	cmp	r3, #16
 8004f72:	d119      	bne.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0210 	mvn.w	r2, #16
 8004f7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e030      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa8:	f7fd fdc2 	bl	8002b30 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11d      	bne.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d016      	beq.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e007      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d1ae      	bne.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d11b      	bne.n	8005062 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005032:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4b20      	ldr	r3, [pc, #128]	@ (8005100 <HAL_PWREx_EnableOverDrive+0x90>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	4a1f      	ldr	r2, [pc, #124]	@ (8005100 <HAL_PWREx_EnableOverDrive+0x90>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	@ 0x40
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <HAL_PWREx_EnableOverDrive+0x90>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005096:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_PWREx_EnableOverDrive+0x94>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800509c:	f7fd fd48 	bl	8002b30 <HAL_GetTick>
 80050a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050a2:	e009      	b.n	80050b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050a4:	f7fd fd44 	bl	8002b30 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050b2:	d901      	bls.n	80050b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e01f      	b.n	80050f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050b8:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <HAL_PWREx_EnableOverDrive+0x98>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c4:	d1ee      	bne.n	80050a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050c6:	4b11      	ldr	r3, [pc, #68]	@ (800510c <HAL_PWREx_EnableOverDrive+0x9c>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050cc:	f7fd fd30 	bl	8002b30 <HAL_GetTick>
 80050d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050d2:	e009      	b.n	80050e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050d4:	f7fd fd2c 	bl	8002b30 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050e2:	d901      	bls.n	80050e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e007      	b.n	80050f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050e8:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <HAL_PWREx_EnableOverDrive+0x98>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050f4:	d1ee      	bne.n	80050d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	420e0040 	.word	0x420e0040
 8005108:	40007000 	.word	0x40007000
 800510c:	420e0044 	.word	0x420e0044

08005110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0cc      	b.n	80052be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005124:	4b68      	ldr	r3, [pc, #416]	@ (80052c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d90c      	bls.n	800514c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b65      	ldr	r3, [pc, #404]	@ (80052c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b63      	ldr	r3, [pc, #396]	@ (80052c8 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0b8      	b.n	80052be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d020      	beq.n	800519a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005164:	4b59      	ldr	r3, [pc, #356]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4a58      	ldr	r2, [pc, #352]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800516e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800517c:	4b53      	ldr	r3, [pc, #332]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a52      	ldr	r2, [pc, #328]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005188:	4b50      	ldr	r3, [pc, #320]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	494d      	ldr	r1, [pc, #308]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d044      	beq.n	8005230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d107      	bne.n	80051be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ae:	4b47      	ldr	r3, [pc, #284]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d119      	bne.n	80051ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e07f      	b.n	80052be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d003      	beq.n	80051ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d107      	bne.n	80051de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ce:	4b3f      	ldr	r3, [pc, #252]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e06f      	b.n	80052be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051de:	4b3b      	ldr	r3, [pc, #236]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e067      	b.n	80052be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ee:	4b37      	ldr	r3, [pc, #220]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f023 0203 	bic.w	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4934      	ldr	r1, [pc, #208]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005200:	f7fd fc96 	bl	8002b30 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005206:	e00a      	b.n	800521e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005208:	f7fd fc92 	bl	8002b30 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e04f      	b.n	80052be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521e:	4b2b      	ldr	r3, [pc, #172]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 020c 	and.w	r2, r3, #12
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	429a      	cmp	r2, r3
 800522e:	d1eb      	bne.n	8005208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005230:	4b25      	ldr	r3, [pc, #148]	@ (80052c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d20c      	bcs.n	8005258 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523e:	4b22      	ldr	r3, [pc, #136]	@ (80052c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	4b20      	ldr	r3, [pc, #128]	@ (80052c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e032      	b.n	80052be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005264:	4b19      	ldr	r3, [pc, #100]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4916      	ldr	r1, [pc, #88]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	4313      	orrs	r3, r2
 8005274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005282:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	490e      	ldr	r1, [pc, #56]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005296:	f000 f855 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 800529a:	4602      	mov	r2, r0
 800529c:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	490a      	ldr	r1, [pc, #40]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 80052a8:	5ccb      	ldrb	r3, [r1, r3]
 80052aa:	fa22 f303 	lsr.w	r3, r2, r3
 80052ae:	4a09      	ldr	r2, [pc, #36]	@ (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <HAL_RCC_ClockConfig+0x1c8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fd fbf6 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40023c00 	.word	0x40023c00
 80052cc:	40023800 	.word	0x40023800
 80052d0:	080081a4 	.word	0x080081a4
 80052d4:	20000000 	.word	0x20000000
 80052d8:	20000004 	.word	0x20000004

080052dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e0:	4b03      	ldr	r3, [pc, #12]	@ (80052f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000000 	.word	0x20000000

080052f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052f8:	f7ff fff0 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0a9b      	lsrs	r3, r3, #10
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	@ (8005318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	080081b4 	.word	0x080081b4

0800531c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005320:	f7ff ffdc 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b05      	ldr	r3, [pc, #20]	@ (800533c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	0b5b      	lsrs	r3, r3, #13
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4903      	ldr	r1, [pc, #12]	@ (8005340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	080081b4 	.word	0x080081b4

08005344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b0ae      	sub	sp, #184	@ 0xb8
 800534a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800536a:	4bcb      	ldr	r3, [pc, #812]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b0c      	cmp	r3, #12
 8005374:	f200 8206 	bhi.w	8005784 <HAL_RCC_GetSysClockFreq+0x440>
 8005378:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <HAL_RCC_GetSysClockFreq+0x3c>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080053b5 	.word	0x080053b5
 8005384:	08005785 	.word	0x08005785
 8005388:	08005785 	.word	0x08005785
 800538c:	08005785 	.word	0x08005785
 8005390:	080053bd 	.word	0x080053bd
 8005394:	08005785 	.word	0x08005785
 8005398:	08005785 	.word	0x08005785
 800539c:	08005785 	.word	0x08005785
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	08005785 	.word	0x08005785
 80053a8:	08005785 	.word	0x08005785
 80053ac:	08005785 	.word	0x08005785
 80053b0:	080055b5 	.word	0x080055b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4bb9      	ldr	r3, [pc, #740]	@ (800569c <HAL_RCC_GetSysClockFreq+0x358>)
 80053b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80053ba:	e1e7      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053bc:	4bb8      	ldr	r3, [pc, #736]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80053be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80053c2:	e1e3      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053c4:	4bb4      	ldr	r3, [pc, #720]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053d0:	4bb1      	ldr	r3, [pc, #708]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d071      	beq.n	80054c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053dc:	4bae      	ldr	r3, [pc, #696]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	099b      	lsrs	r3, r3, #6
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80053ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005402:	4622      	mov	r2, r4
 8005404:	462b      	mov	r3, r5
 8005406:	f04f 0000 	mov.w	r0, #0
 800540a:	f04f 0100 	mov.w	r1, #0
 800540e:	0159      	lsls	r1, r3, #5
 8005410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005414:	0150      	lsls	r0, r2, #5
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4621      	mov	r1, r4
 800541c:	1a51      	subs	r1, r2, r1
 800541e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005420:	4629      	mov	r1, r5
 8005422:	eb63 0301 	sbc.w	r3, r3, r1
 8005426:	647b      	str	r3, [r7, #68]	@ 0x44
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005434:	4649      	mov	r1, r9
 8005436:	018b      	lsls	r3, r1, #6
 8005438:	4641      	mov	r1, r8
 800543a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800543e:	4641      	mov	r1, r8
 8005440:	018a      	lsls	r2, r1, #6
 8005442:	4641      	mov	r1, r8
 8005444:	1a51      	subs	r1, r2, r1
 8005446:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005448:	4649      	mov	r1, r9
 800544a:	eb63 0301 	sbc.w	r3, r3, r1
 800544e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800545c:	4649      	mov	r1, r9
 800545e:	00cb      	lsls	r3, r1, #3
 8005460:	4641      	mov	r1, r8
 8005462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005466:	4641      	mov	r1, r8
 8005468:	00ca      	lsls	r2, r1, #3
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	4603      	mov	r3, r0
 8005470:	4622      	mov	r2, r4
 8005472:	189b      	adds	r3, r3, r2
 8005474:	633b      	str	r3, [r7, #48]	@ 0x30
 8005476:	462b      	mov	r3, r5
 8005478:	460a      	mov	r2, r1
 800547a:	eb42 0303 	adc.w	r3, r2, r3
 800547e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800548c:	4629      	mov	r1, r5
 800548e:	024b      	lsls	r3, r1, #9
 8005490:	4621      	mov	r1, r4
 8005492:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005496:	4621      	mov	r1, r4
 8005498:	024a      	lsls	r2, r1, #9
 800549a:	4610      	mov	r0, r2
 800549c:	4619      	mov	r1, r3
 800549e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80054b0:	f7fb fb2c 	bl	8000b0c <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4613      	mov	r3, r2
 80054ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054be:	e067      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c0:	4b75      	ldr	r3, [pc, #468]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	099b      	lsrs	r3, r3, #6
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80054d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054da:	2300      	movs	r3, #0
 80054dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	f04f 0000 	mov.w	r0, #0
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f4:	0150      	lsls	r0, r2, #5
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4621      	mov	r1, r4
 80054fc:	1a51      	subs	r1, r2, r1
 80054fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005500:	4629      	mov	r1, r5
 8005502:	eb63 0301 	sbc.w	r3, r3, r1
 8005506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005514:	4649      	mov	r1, r9
 8005516:	018b      	lsls	r3, r1, #6
 8005518:	4641      	mov	r1, r8
 800551a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800551e:	4641      	mov	r1, r8
 8005520:	018a      	lsls	r2, r1, #6
 8005522:	4641      	mov	r1, r8
 8005524:	ebb2 0a01 	subs.w	sl, r2, r1
 8005528:	4649      	mov	r1, r9
 800552a:	eb63 0b01 	sbc.w	fp, r3, r1
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800553a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800553e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005542:	4692      	mov	sl, r2
 8005544:	469b      	mov	fp, r3
 8005546:	4623      	mov	r3, r4
 8005548:	eb1a 0303 	adds.w	r3, sl, r3
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	462b      	mov	r3, r5
 8005550:	eb4b 0303 	adc.w	r3, fp, r3
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005562:	4629      	mov	r1, r5
 8005564:	028b      	lsls	r3, r1, #10
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800556c:	4621      	mov	r1, r4
 800556e:	028a      	lsls	r2, r1, #10
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005578:	2200      	movs	r2, #0
 800557a:	673b      	str	r3, [r7, #112]	@ 0x70
 800557c:	677a      	str	r2, [r7, #116]	@ 0x74
 800557e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005582:	f7fb fac3 	bl	8000b0c <__aeabi_uldivmod>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4613      	mov	r3, r2
 800558c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005590:	4b41      	ldr	r3, [pc, #260]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	3301      	adds	r3, #1
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80055a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055b2:	e0eb      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055b4:	4b38      	ldr	r3, [pc, #224]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055c0:	4b35      	ldr	r3, [pc, #212]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d06b      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055cc:	4b32      	ldr	r3, [pc, #200]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	099b      	lsrs	r3, r3, #6
 80055d2:	2200      	movs	r2, #0
 80055d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e0:	2300      	movs	r3, #0
 80055e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80055e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80055e8:	4622      	mov	r2, r4
 80055ea:	462b      	mov	r3, r5
 80055ec:	f04f 0000 	mov.w	r0, #0
 80055f0:	f04f 0100 	mov.w	r1, #0
 80055f4:	0159      	lsls	r1, r3, #5
 80055f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055fa:	0150      	lsls	r0, r2, #5
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4621      	mov	r1, r4
 8005602:	1a51      	subs	r1, r2, r1
 8005604:	61b9      	str	r1, [r7, #24]
 8005606:	4629      	mov	r1, r5
 8005608:	eb63 0301 	sbc.w	r3, r3, r1
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800561a:	4659      	mov	r1, fp
 800561c:	018b      	lsls	r3, r1, #6
 800561e:	4651      	mov	r1, sl
 8005620:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005624:	4651      	mov	r1, sl
 8005626:	018a      	lsls	r2, r1, #6
 8005628:	4651      	mov	r1, sl
 800562a:	ebb2 0801 	subs.w	r8, r2, r1
 800562e:	4659      	mov	r1, fp
 8005630:	eb63 0901 	sbc.w	r9, r3, r1
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005648:	4690      	mov	r8, r2
 800564a:	4699      	mov	r9, r3
 800564c:	4623      	mov	r3, r4
 800564e:	eb18 0303 	adds.w	r3, r8, r3
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	462b      	mov	r3, r5
 8005656:	eb49 0303 	adc.w	r3, r9, r3
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005668:	4629      	mov	r1, r5
 800566a:	024b      	lsls	r3, r1, #9
 800566c:	4621      	mov	r1, r4
 800566e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005672:	4621      	mov	r1, r4
 8005674:	024a      	lsls	r2, r1, #9
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800567e:	2200      	movs	r2, #0
 8005680:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005682:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005684:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005688:	f7fb fa40 	bl	8000b0c <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4613      	mov	r3, r2
 8005692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005696:	e065      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0x420>
 8005698:	40023800 	.word	0x40023800
 800569c:	00f42400 	.word	0x00f42400
 80056a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a4:	4b3d      	ldr	r3, [pc, #244]	@ (800579c <HAL_RCC_GetSysClockFreq+0x458>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	099b      	lsrs	r3, r3, #6
 80056aa:	2200      	movs	r2, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	4611      	mov	r1, r2
 80056b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b6:	2300      	movs	r3, #0
 80056b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80056be:	4642      	mov	r2, r8
 80056c0:	464b      	mov	r3, r9
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	0159      	lsls	r1, r3, #5
 80056cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d0:	0150      	lsls	r0, r2, #5
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4641      	mov	r1, r8
 80056d8:	1a51      	subs	r1, r2, r1
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	4649      	mov	r1, r9
 80056de:	eb63 0301 	sbc.w	r3, r3, r1
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80056f0:	4659      	mov	r1, fp
 80056f2:	018b      	lsls	r3, r1, #6
 80056f4:	4651      	mov	r1, sl
 80056f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056fa:	4651      	mov	r1, sl
 80056fc:	018a      	lsls	r2, r1, #6
 80056fe:	4651      	mov	r1, sl
 8005700:	1a54      	subs	r4, r2, r1
 8005702:	4659      	mov	r1, fp
 8005704:	eb63 0501 	sbc.w	r5, r3, r1
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	00eb      	lsls	r3, r5, #3
 8005712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005716:	00e2      	lsls	r2, r4, #3
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	4643      	mov	r3, r8
 800571e:	18e3      	adds	r3, r4, r3
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	464b      	mov	r3, r9
 8005724:	eb45 0303 	adc.w	r3, r5, r3
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005736:	4629      	mov	r1, r5
 8005738:	028b      	lsls	r3, r1, #10
 800573a:	4621      	mov	r1, r4
 800573c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005740:	4621      	mov	r1, r4
 8005742:	028a      	lsls	r2, r1, #10
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800574c:	2200      	movs	r2, #0
 800574e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005750:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005752:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005756:	f7fb f9d9 	bl	8000b0c <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4613      	mov	r3, r2
 8005760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005764:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_RCC_GetSysClockFreq+0x458>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	0f1b      	lsrs	r3, r3, #28
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005782:	e003      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005784:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800578a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005790:	4618      	mov	r0, r3
 8005792:	37b8      	adds	r7, #184	@ 0xb8
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	00f42400 	.word	0x00f42400

080057a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e28d      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8083 	beq.w	80058ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057c4:	4b94      	ldr	r3, [pc, #592]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d019      	beq.n	8005804 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80057d0:	4b91      	ldr	r3, [pc, #580]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80057dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057e8:	d00c      	beq.n	8005804 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d112      	bne.n	800581c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f6:	4b88      	ldr	r3, [pc, #544]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005802:	d10b      	bne.n	800581c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	4b84      	ldr	r3, [pc, #528]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d05b      	beq.n	80058c8 <HAL_RCC_OscConfig+0x124>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d157      	bne.n	80058c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e25a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005824:	d106      	bne.n	8005834 <HAL_RCC_OscConfig+0x90>
 8005826:	4b7c      	ldr	r3, [pc, #496]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800582c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e01d      	b.n	8005870 <HAL_RCC_OscConfig+0xcc>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800583c:	d10c      	bne.n	8005858 <HAL_RCC_OscConfig+0xb4>
 800583e:	4b76      	ldr	r3, [pc, #472]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a75      	ldr	r2, [pc, #468]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b73      	ldr	r3, [pc, #460]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a72      	ldr	r2, [pc, #456]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e00b      	b.n	8005870 <HAL_RCC_OscConfig+0xcc>
 8005858:	4b6f      	ldr	r3, [pc, #444]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800585e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4b6c      	ldr	r3, [pc, #432]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a6b      	ldr	r2, [pc, #428]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800586a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800586e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d013      	beq.n	80058a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fd f95a 	bl	8002b30 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005880:	f7fd f956 	bl	8002b30 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	@ 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e21f      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005892:	4b61      	ldr	r3, [pc, #388]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0xdc>
 800589e:	e014      	b.n	80058ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fd f946 	bl	8002b30 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fd f942 	bl	8002b30 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	@ 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e20b      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ba:	4b57      	ldr	r3, [pc, #348]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x104>
 80058c6:	e000      	b.n	80058ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d06f      	beq.n	80059b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058d6:	4b50      	ldr	r3, [pc, #320]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d017      	beq.n	8005912 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80058e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d105      	bne.n	80058fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80058ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058fa:	4b47      	ldr	r3, [pc, #284]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d11c      	bne.n	8005940 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005906:	4b44      	ldr	r3, [pc, #272]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d116      	bne.n	8005940 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005912:	4b41      	ldr	r3, [pc, #260]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_RCC_OscConfig+0x186>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d001      	beq.n	800592a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e1d3      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4937      	ldr	r1, [pc, #220]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593e:	e03a      	b.n	80059b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d020      	beq.n	800598a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005948:	4b34      	ldr	r3, [pc, #208]	@ (8005a1c <HAL_RCC_OscConfig+0x278>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fd f8ef 	bl	8002b30 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005956:	f7fd f8eb 	bl	8002b30 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e1b4      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	4b2b      	ldr	r3, [pc, #172]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005974:	4b28      	ldr	r3, [pc, #160]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4925      	ldr	r1, [pc, #148]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	e015      	b.n	80059b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800598a:	4b24      	ldr	r3, [pc, #144]	@ (8005a1c <HAL_RCC_OscConfig+0x278>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd f8ce 	bl	8002b30 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005998:	f7fd f8ca 	bl	8002b30 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e193      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d036      	beq.n	8005a30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ca:	4b15      	ldr	r3, [pc, #84]	@ (8005a20 <HAL_RCC_OscConfig+0x27c>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fd f8ae 	bl	8002b30 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d8:	f7fd f8aa 	bl	8002b30 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e173      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80059ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x234>
 80059f6:	e01b      	b.n	8005a30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f8:	4b09      	ldr	r3, [pc, #36]	@ (8005a20 <HAL_RCC_OscConfig+0x27c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fe:	f7fd f897 	bl	8002b30 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a04:	e00e      	b.n	8005a24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a06:	f7fd f893 	bl	8002b30 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d907      	bls.n	8005a24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e15c      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	42470000 	.word	0x42470000
 8005a20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a24:	4b8a      	ldr	r3, [pc, #552]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1ea      	bne.n	8005a06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8097 	beq.w	8005b6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a42:	4b83      	ldr	r3, [pc, #524]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	4b7f      	ldr	r3, [pc, #508]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	4a7e      	ldr	r2, [pc, #504]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6e:	4b79      	ldr	r3, [pc, #484]	@ (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d118      	bne.n	8005aac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a7a:	4b76      	ldr	r3, [pc, #472]	@ (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a75      	ldr	r2, [pc, #468]	@ (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a86:	f7fd f853 	bl	8002b30 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8e:	f7fd f84f 	bl	8002b30 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e118      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x31e>
 8005ab4:	4b66      	ldr	r3, [pc, #408]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab8:	4a65      	ldr	r2, [pc, #404]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac0:	e01c      	b.n	8005afc <HAL_RCC_OscConfig+0x358>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x340>
 8005aca:	4b61      	ldr	r3, [pc, #388]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ace:	4a60      	ldr	r2, [pc, #384]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ad0:	f043 0304 	orr.w	r3, r3, #4
 8005ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ada:	4a5d      	ldr	r2, [pc, #372]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae2:	e00b      	b.n	8005afc <HAL_RCC_OscConfig+0x358>
 8005ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae8:	4a59      	ldr	r2, [pc, #356]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af0:	4b57      	ldr	r3, [pc, #348]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af4:	4a56      	ldr	r2, [pc, #344]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005af6:	f023 0304 	bic.w	r3, r3, #4
 8005afa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd f814 	bl	8002b30 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0c:	f7fd f810 	bl	8002b30 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0d7      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b22:	4b4b      	ldr	r3, [pc, #300]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0ee      	beq.n	8005b0c <HAL_RCC_OscConfig+0x368>
 8005b2e:	e014      	b.n	8005b5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7fc fffe 	bl	8002b30 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b36:	e00a      	b.n	8005b4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b38:	f7fc fffa 	bl	8002b30 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0c1      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4e:	4b40      	ldr	r3, [pc, #256]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ee      	bne.n	8005b38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b60:	4b3b      	ldr	r3, [pc, #236]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b64:	4a3a      	ldr	r2, [pc, #232]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80ad 	beq.w	8005cd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b76:	4b36      	ldr	r3, [pc, #216]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d060      	beq.n	8005c44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d145      	bne.n	8005c16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8a:	4b33      	ldr	r3, [pc, #204]	@ (8005c58 <HAL_RCC_OscConfig+0x4b4>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc ffce 	bl	8002b30 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fc ffca 	bl	8002b30 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e093      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	041b      	lsls	r3, r3, #16
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be0:	071b      	lsls	r3, r3, #28
 8005be2:	491b      	ldr	r1, [pc, #108]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <HAL_RCC_OscConfig+0x4b4>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bee:	f7fc ff9f 	bl	8002b30 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fc ff9b 	bl	8002b30 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e064      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c08:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x452>
 8005c14:	e05c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c16:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <HAL_RCC_OscConfig+0x4b4>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fc ff88 	bl	8002b30 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fc ff84 	bl	8002b30 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e04d      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c36:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x480>
 8005c42:	e045      	b.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e040      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40007000 	.word	0x40007000
 8005c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cdc <HAL_RCC_OscConfig+0x538>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d030      	beq.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d129      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d122      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d119      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d10f      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800

08005ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e041      	b.n	8005d76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc fc52 	bl	80025b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f000 faec 	bl	80062fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d109      	bne.n	8005da4 <HAL_TIM_PWM_Start+0x24>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e022      	b.n	8005dea <HAL_TIM_PWM_Start+0x6a>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d109      	bne.n	8005dbe <HAL_TIM_PWM_Start+0x3e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	bf14      	ite	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	2300      	moveq	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	e015      	b.n	8005dea <HAL_TIM_PWM_Start+0x6a>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d109      	bne.n	8005dd8 <HAL_TIM_PWM_Start+0x58>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e008      	b.n	8005dea <HAL_TIM_PWM_Start+0x6a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	bf14      	ite	ne
 8005de4:	2301      	movne	r3, #1
 8005de6:	2300      	moveq	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e07c      	b.n	8005eec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_PWM_Start+0x82>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e00:	e013      	b.n	8005e2a <HAL_TIM_PWM_Start+0xaa>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x92>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e10:	e00b      	b.n	8005e2a <HAL_TIM_PWM_Start+0xaa>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_PWM_Start+0xa2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e20:	e003      	b.n	8005e2a <HAL_TIM_PWM_Start+0xaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fcbe 	bl	80067b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef4 <HAL_TIM_PWM_Start+0x174>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_TIM_PWM_Start+0xcc>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef8 <HAL_TIM_PWM_Start+0x178>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIM_PWM_Start+0xd0>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <HAL_TIM_PWM_Start+0xd2>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a22      	ldr	r2, [pc, #136]	@ (8005ef4 <HAL_TIM_PWM_Start+0x174>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005efc <HAL_TIM_PWM_Start+0x17c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	@ (8005f00 <HAL_TIM_PWM_Start+0x180>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1c      	ldr	r2, [pc, #112]	@ (8005f04 <HAL_TIM_PWM_Start+0x184>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ef8 <HAL_TIM_PWM_Start+0x178>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	@ (8005f08 <HAL_TIM_PWM_Start+0x188>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <HAL_TIM_PWM_Start+0x18c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d111      	bne.n	8005eda <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d010      	beq.n	8005eea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	e007      	b.n	8005eea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40010400 	.word	0x40010400
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40001800 	.word	0x40001800

08005f10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e097      	b.n	8006054 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fc fabf 	bl	80024bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f54:	f023 0307 	bic.w	r3, r3, #7
 8005f58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f000 f9c9 	bl	80062fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005fb0:	f023 030c 	bic.w	r3, r3, #12
 8005fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	011a      	lsls	r2, r3, #4
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	031b      	lsls	r3, r3, #12
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	4313      	orrs	r3, r2
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800606c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006074:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800607c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006084:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d110      	bne.n	80060ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d102      	bne.n	8006098 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006092:	7b7b      	ldrb	r3, [r7, #13]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d001      	beq.n	800609c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e069      	b.n	8006170 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060ac:	e031      	b.n	8006112 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d110      	bne.n	80060d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d102      	bne.n	80060c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ba:	7b3b      	ldrb	r3, [r7, #12]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d001      	beq.n	80060c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e055      	b.n	8006170 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060d4:	e01d      	b.n	8006112 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d108      	bne.n	80060ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060dc:	7bbb      	ldrb	r3, [r7, #14]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d105      	bne.n	80060ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060e2:	7b7b      	ldrb	r3, [r7, #13]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d102      	bne.n	80060ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060e8:	7b3b      	ldrb	r3, [r7, #12]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e03e      	b.n	8006170 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_TIM_Encoder_Start+0xc4>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b04      	cmp	r3, #4
 800611c:	d008      	beq.n	8006130 <HAL_TIM_Encoder_Start+0xd4>
 800611e:	e00f      	b.n	8006140 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2201      	movs	r2, #1
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fb43 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 800612e:	e016      	b.n	800615e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	2104      	movs	r1, #4
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fb3b 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 800613e:	e00e      	b.n	800615e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2201      	movs	r2, #1
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fb33 	bl	80067b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2201      	movs	r2, #1
 8006154:	2104      	movs	r1, #4
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fb2c 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 800615c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006192:	2302      	movs	r3, #2
 8006194:	e0ae      	b.n	80062f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b0c      	cmp	r3, #12
 80061a2:	f200 809f 	bhi.w	80062e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061e1 	.word	0x080061e1
 80061b0:	080062e5 	.word	0x080062e5
 80061b4:	080062e5 	.word	0x080062e5
 80061b8:	080062e5 	.word	0x080062e5
 80061bc:	08006221 	.word	0x08006221
 80061c0:	080062e5 	.word	0x080062e5
 80061c4:	080062e5 	.word	0x080062e5
 80061c8:	080062e5 	.word	0x080062e5
 80061cc:	08006263 	.word	0x08006263
 80061d0:	080062e5 	.word	0x080062e5
 80061d4:	080062e5 	.word	0x080062e5
 80061d8:	080062e5 	.word	0x080062e5
 80061dc:	080062a3 	.word	0x080062a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f934 	bl	8006454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0208 	orr.w	r2, r2, #8
 80061fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0204 	bic.w	r2, r2, #4
 800620a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6999      	ldr	r1, [r3, #24]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	619a      	str	r2, [r3, #24]
      break;
 800621e:	e064      	b.n	80062ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f984 	bl	8006534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800623a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800624a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6999      	ldr	r1, [r3, #24]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	021a      	lsls	r2, r3, #8
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	619a      	str	r2, [r3, #24]
      break;
 8006260:	e043      	b.n	80062ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f9d9 	bl	8006620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0208 	orr.w	r2, r2, #8
 800627c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0204 	bic.w	r2, r2, #4
 800628c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69d9      	ldr	r1, [r3, #28]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	61da      	str	r2, [r3, #28]
      break;
 80062a0:	e023      	b.n	80062ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fa2d 	bl	8006708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69d9      	ldr	r1, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	021a      	lsls	r2, r3, #8
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	61da      	str	r2, [r3, #28]
      break;
 80062e2:	e002      	b.n	80062ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	75fb      	strb	r3, [r7, #23]
      break;
 80062e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a46      	ldr	r2, [pc, #280]	@ (8006428 <TIM_Base_SetConfig+0x12c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631a:	d00f      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a43      	ldr	r2, [pc, #268]	@ (800642c <TIM_Base_SetConfig+0x130>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00b      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a42      	ldr	r2, [pc, #264]	@ (8006430 <TIM_Base_SetConfig+0x134>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d007      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a41      	ldr	r2, [pc, #260]	@ (8006434 <TIM_Base_SetConfig+0x138>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a40      	ldr	r2, [pc, #256]	@ (8006438 <TIM_Base_SetConfig+0x13c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d108      	bne.n	800634e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a35      	ldr	r2, [pc, #212]	@ (8006428 <TIM_Base_SetConfig+0x12c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d02b      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635c:	d027      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a32      	ldr	r2, [pc, #200]	@ (800642c <TIM_Base_SetConfig+0x130>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d023      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a31      	ldr	r2, [pc, #196]	@ (8006430 <TIM_Base_SetConfig+0x134>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01f      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a30      	ldr	r2, [pc, #192]	@ (8006434 <TIM_Base_SetConfig+0x138>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d01b      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2f      	ldr	r2, [pc, #188]	@ (8006438 <TIM_Base_SetConfig+0x13c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d017      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2e      	ldr	r2, [pc, #184]	@ (800643c <TIM_Base_SetConfig+0x140>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2d      	ldr	r2, [pc, #180]	@ (8006440 <TIM_Base_SetConfig+0x144>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00f      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <TIM_Base_SetConfig+0x148>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00b      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2b      	ldr	r2, [pc, #172]	@ (8006448 <TIM_Base_SetConfig+0x14c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d007      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2a      	ldr	r2, [pc, #168]	@ (800644c <TIM_Base_SetConfig+0x150>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a29      	ldr	r2, [pc, #164]	@ (8006450 <TIM_Base_SetConfig+0x154>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d108      	bne.n	80063c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a10      	ldr	r2, [pc, #64]	@ (8006428 <TIM_Base_SetConfig+0x12c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0xf8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a12      	ldr	r2, [pc, #72]	@ (8006438 <TIM_Base_SetConfig+0x13c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d103      	bne.n	80063fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b01      	cmp	r3, #1
 800640c:	d105      	bne.n	800641a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f023 0201 	bic.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	611a      	str	r2, [r3, #16]
  }
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40010000 	.word	0x40010000
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40010400 	.word	0x40010400
 800643c:	40014000 	.word	0x40014000
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800
 8006448:	40001800 	.word	0x40001800
 800644c:	40001c00 	.word	0x40001c00
 8006450:	40002000 	.word	0x40002000

08006454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f023 0201 	bic.w	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0302 	bic.w	r3, r3, #2
 800649c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a20      	ldr	r2, [pc, #128]	@ (800652c <TIM_OC1_SetConfig+0xd8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC1_SetConfig+0x64>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006530 <TIM_OC1_SetConfig+0xdc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0308 	bic.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a15      	ldr	r2, [pc, #84]	@ (800652c <TIM_OC1_SetConfig+0xd8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_OC1_SetConfig+0x8e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a14      	ldr	r2, [pc, #80]	@ (8006530 <TIM_OC1_SetConfig+0xdc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d111      	bne.n	8006506 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40010000 	.word	0x40010000
 8006530:	40010400 	.word	0x40010400

08006534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f023 0210 	bic.w	r2, r3, #16
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800656a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 0320 	bic.w	r3, r3, #32
 800657e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a22      	ldr	r2, [pc, #136]	@ (8006618 <TIM_OC2_SetConfig+0xe4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC2_SetConfig+0x68>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a21      	ldr	r2, [pc, #132]	@ (800661c <TIM_OC2_SetConfig+0xe8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d10d      	bne.n	80065b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a17      	ldr	r2, [pc, #92]	@ (8006618 <TIM_OC2_SetConfig+0xe4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC2_SetConfig+0x94>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a16      	ldr	r2, [pc, #88]	@ (800661c <TIM_OC2_SetConfig+0xe8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d113      	bne.n	80065f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40010400 	.word	0x40010400

08006620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a21      	ldr	r2, [pc, #132]	@ (8006700 <TIM_OC3_SetConfig+0xe0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC3_SetConfig+0x66>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a20      	ldr	r2, [pc, #128]	@ (8006704 <TIM_OC3_SetConfig+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10d      	bne.n	80066a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800668c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a16      	ldr	r2, [pc, #88]	@ (8006700 <TIM_OC3_SetConfig+0xe0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d003      	beq.n	80066b2 <TIM_OC3_SetConfig+0x92>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a15      	ldr	r2, [pc, #84]	@ (8006704 <TIM_OC3_SetConfig+0xe4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d113      	bne.n	80066da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40010000 	.word	0x40010000
 8006704:	40010400 	.word	0x40010400

08006708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800673e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	031b      	lsls	r3, r3, #12
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a12      	ldr	r2, [pc, #72]	@ (80067ac <TIM_OC4_SetConfig+0xa4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC4_SetConfig+0x68>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a11      	ldr	r2, [pc, #68]	@ (80067b0 <TIM_OC4_SetConfig+0xa8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d109      	bne.n	8006784 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000
 80067b0:	40010400 	.word	0x40010400

080067b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2201      	movs	r2, #1
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	43db      	mvns	r3, r3
 80067d6:	401a      	ands	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e05a      	b.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a21      	ldr	r2, [pc, #132]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006864:	d01d      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d018      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1b      	ldr	r2, [pc, #108]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1a      	ldr	r2, [pc, #104]	@ (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00e      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d009      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10c      	bne.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40001800 	.word	0x40001800

080068f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e042      	b.n	8006990 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fb fec2 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2224      	movs	r2, #36	@ 0x24
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800693a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fcdb 	bl	80072f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d112      	bne.n	80069d8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <HAL_UART_Receive_IT+0x26>
 80069b8:	88fb      	ldrh	r3, [r7, #6]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e00b      	b.n	80069da <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	461a      	mov	r2, r3
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 faba 	bl	8006f48 <UART_Start_Receive_IT>
 80069d4:	4603      	mov	r3, r0
 80069d6:	e000      	b.n	80069da <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b0ba      	sub	sp, #232	@ 0xe8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10f      	bne.n	8006a4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_UART_IRQHandler+0x66>
 8006a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb99 	bl	800717a <UART_Receive_IT>
      return;
 8006a48:	e25b      	b.n	8006f02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80de 	beq.w	8006c10 <HAL_UART_IRQHandler+0x22c>
 8006a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d106      	bne.n	8006a6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80d1 	beq.w	8006c10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00b      	beq.n	8006a92 <HAL_UART_IRQHandler+0xae>
 8006a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	f043 0201 	orr.w	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <HAL_UART_IRQHandler+0xd2>
 8006a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aae:	f043 0202 	orr.w	r2, r3, #2
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00b      	beq.n	8006ada <HAL_UART_IRQHandler+0xf6>
 8006ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad2:	f043 0204 	orr.w	r2, r3, #4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d011      	beq.n	8006b0a <HAL_UART_IRQHandler+0x126>
 8006ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b02:	f043 0208 	orr.w	r2, r3, #8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 81f2 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_UART_IRQHandler+0x14e>
 8006b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fb24 	bl	800717a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3c:	2b40      	cmp	r3, #64	@ 0x40
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <HAL_UART_IRQHandler+0x17a>
 8006b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d04f      	beq.n	8006bfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa2c 	bl	8006fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d141      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1d9      	bne.n	8006b72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d013      	beq.n	8006bee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bca:	4a7e      	ldr	r2, [pc, #504]	@ (8006dc4 <HAL_UART_IRQHandler+0x3e0>)
 8006bcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fc fe1c 	bl	8003810 <HAL_DMA_Abort_IT>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006be8:	4610      	mov	r0, r2
 8006bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bec:	e00e      	b.n	8006c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f994 	bl	8006f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf4:	e00a      	b.n	8006c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f990 	bl	8006f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfc:	e006      	b.n	8006c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f98c 	bl	8006f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c0a:	e175      	b.n	8006ef8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	bf00      	nop
    return;
 8006c0e:	e173      	b.n	8006ef8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	f040 814f 	bne.w	8006eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1e:	f003 0310 	and.w	r3, r3, #16
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8148 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8141 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b40      	cmp	r3, #64	@ 0x40
 8006c58:	f040 80b6 	bne.w	8006dc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8145 	beq.w	8006efc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	f080 813e 	bcs.w	8006efc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c92:	f000 8088 	beq.w	8006da6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006cc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1d9      	bne.n	8006c96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cf4:	f023 0301 	bic.w	r3, r3, #1
 8006cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e1      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3314      	adds	r3, #20
 8006d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e3      	bne.n	8006d1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	330c      	adds	r3, #12
 8006d84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e3      	bne.n	8006d64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fc fcc5 	bl	8003730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f8b7 	bl	8006f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dc2:	e09b      	b.n	8006efc <HAL_UART_IRQHandler+0x518>
 8006dc4:	08007083 	.word	0x08007083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 808e 	beq.w	8006f00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8089 	beq.w	8006f00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e3      	bne.n	8006dee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	623b      	str	r3, [r7, #32]
   return(result);
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3314      	adds	r3, #20
 8006e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e3      	bne.n	8006e26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0310 	bic.w	r3, r3, #16
 8006e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006e90:	61fa      	str	r2, [r7, #28]
 8006e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	69b9      	ldr	r1, [r7, #24]
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e3      	bne.n	8006e6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f83d 	bl	8006f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eb6:	e023      	b.n	8006f00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x4f4>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8ea 	bl	80070aa <UART_Transmit_IT>
    return;
 8006ed6:	e014      	b.n	8006f02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <HAL_UART_IRQHandler+0x51e>
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f92a 	bl	800714a <UART_EndTransmit_IT>
    return;
 8006ef6:	e004      	b.n	8006f02 <HAL_UART_IRQHandler+0x51e>
    return;
 8006ef8:	bf00      	nop
 8006efa:	e002      	b.n	8006f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8006efc:	bf00      	nop
 8006efe:	e000      	b.n	8006f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f00:	bf00      	nop
  }
}
 8006f02:	37e8      	adds	r7, #232	@ 0xe8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	88fa      	ldrh	r2, [r7, #6]
 8006f66:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2222      	movs	r2, #34	@ 0x22
 8006f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695a      	ldr	r2, [r3, #20]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0201 	orr.w	r2, r2, #1
 8006f9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0220 	orr.w	r2, r2, #32
 8006fac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b095      	sub	sp, #84	@ 0x54
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fe4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e5      	bne.n	8006fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3314      	adds	r3, #20
 8006ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	61fb      	str	r3, [r7, #28]
   return(result);
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f023 0301 	bic.w	r3, r3, #1
 800700e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3314      	adds	r3, #20
 8007016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800701a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800701e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e5      	bne.n	8006ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007030:	2b01      	cmp	r3, #1
 8007032:	d119      	bne.n	8007068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	60bb      	str	r3, [r7, #8]
   return(result);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f023 0310 	bic.w	r3, r3, #16
 800704a:	647b      	str	r3, [r7, #68]	@ 0x44
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007054:	61ba      	str	r2, [r7, #24]
 8007056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6979      	ldr	r1, [r7, #20]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	613b      	str	r3, [r7, #16]
   return(result);
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007076:	bf00      	nop
 8007078:	3754      	adds	r7, #84	@ 0x54
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff ff3d 	bl	8006f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b21      	cmp	r3, #33	@ 0x21
 80070bc:	d13e      	bne.n	800713c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c6:	d114      	bne.n	80070f2 <UART_Transmit_IT+0x48>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d110      	bne.n	80070f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	1c9a      	adds	r2, r3, #2
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	621a      	str	r2, [r3, #32]
 80070f0:	e008      	b.n	8007104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	1c59      	adds	r1, r3, #1
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6211      	str	r1, [r2, #32]
 80070fc:	781a      	ldrb	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4619      	mov	r1, r3
 8007112:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10f      	bne.n	8007138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e000      	b.n	800713e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff fecc 	bl	8006f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b08c      	sub	sp, #48	@ 0x30
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b22      	cmp	r3, #34	@ 0x22
 800718c:	f040 80ae 	bne.w	80072ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007198:	d117      	bne.n	80071ca <UART_Receive_IT+0x50>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d113      	bne.n	80071ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c2:	1c9a      	adds	r2, r3, #2
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80071c8:	e026      	b.n	8007218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071dc:	d007      	beq.n	80071ee <UART_Receive_IT+0x74>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <UART_Receive_IT+0x82>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e008      	b.n	800720e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007208:	b2da      	uxtb	r2, r3
 800720a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29b      	uxth	r3, r3
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4619      	mov	r1, r3
 8007226:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007228:	2b00      	cmp	r3, #0
 800722a:	d15d      	bne.n	80072e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0220 	bic.w	r2, r2, #32
 800723a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800724a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726e:	2b01      	cmp	r3, #1
 8007270:	d135      	bne.n	80072de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	613b      	str	r3, [r7, #16]
   return(result);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 0310 	bic.w	r3, r3, #16
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007298:	623a      	str	r2, [r7, #32]
 800729a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	6a3a      	ldr	r2, [r7, #32]
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d10a      	bne.n	80072d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fe2a 	bl	8006f30 <HAL_UARTEx_RxEventCallback>
 80072dc:	e002      	b.n	80072e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7f9 fe80 	bl	8000fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	e002      	b.n	80072ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e000      	b.n	80072ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
  }
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3730      	adds	r7, #48	@ 0x30
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072fc:	b0c0      	sub	sp, #256	@ 0x100
 80072fe:	af00      	add	r7, sp, #0
 8007300:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007314:	68d9      	ldr	r1, [r3, #12]
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	ea40 0301 	orr.w	r3, r0, r1
 8007320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	431a      	orrs	r2, r3
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	431a      	orrs	r2, r3
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007350:	f021 010c 	bic.w	r1, r1, #12
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800735e:	430b      	orrs	r3, r1
 8007360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800736e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007372:	6999      	ldr	r1, [r3, #24]
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	ea40 0301 	orr.w	r3, r0, r1
 800737e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b8f      	ldr	r3, [pc, #572]	@ (80075c4 <UART_SetConfig+0x2cc>)
 8007388:	429a      	cmp	r2, r3
 800738a:	d005      	beq.n	8007398 <UART_SetConfig+0xa0>
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b8d      	ldr	r3, [pc, #564]	@ (80075c8 <UART_SetConfig+0x2d0>)
 8007394:	429a      	cmp	r2, r3
 8007396:	d104      	bne.n	80073a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007398:	f7fd ffc0 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 800739c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073a0:	e003      	b.n	80073aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073a2:	f7fd ffa7 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 80073a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073b4:	f040 810c 	bne.w	80075d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073ca:	4622      	mov	r2, r4
 80073cc:	462b      	mov	r3, r5
 80073ce:	1891      	adds	r1, r2, r2
 80073d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073d2:	415b      	adcs	r3, r3
 80073d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073da:	4621      	mov	r1, r4
 80073dc:	eb12 0801 	adds.w	r8, r2, r1
 80073e0:	4629      	mov	r1, r5
 80073e2:	eb43 0901 	adc.w	r9, r3, r1
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073fa:	4690      	mov	r8, r2
 80073fc:	4699      	mov	r9, r3
 80073fe:	4623      	mov	r3, r4
 8007400:	eb18 0303 	adds.w	r3, r8, r3
 8007404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007408:	462b      	mov	r3, r5
 800740a:	eb49 0303 	adc.w	r3, r9, r3
 800740e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800741e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007426:	460b      	mov	r3, r1
 8007428:	18db      	adds	r3, r3, r3
 800742a:	653b      	str	r3, [r7, #80]	@ 0x50
 800742c:	4613      	mov	r3, r2
 800742e:	eb42 0303 	adc.w	r3, r2, r3
 8007432:	657b      	str	r3, [r7, #84]	@ 0x54
 8007434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800743c:	f7f9 fb66 	bl	8000b0c <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4b61      	ldr	r3, [pc, #388]	@ (80075cc <UART_SetConfig+0x2d4>)
 8007446:	fba3 2302 	umull	r2, r3, r3, r2
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	011c      	lsls	r4, r3, #4
 800744e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007452:	2200      	movs	r2, #0
 8007454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007458:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800745c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	1891      	adds	r1, r2, r2
 8007466:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007468:	415b      	adcs	r3, r3
 800746a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800746c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007470:	4641      	mov	r1, r8
 8007472:	eb12 0a01 	adds.w	sl, r2, r1
 8007476:	4649      	mov	r1, r9
 8007478:	eb43 0b01 	adc.w	fp, r3, r1
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800748c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007490:	4692      	mov	sl, r2
 8007492:	469b      	mov	fp, r3
 8007494:	4643      	mov	r3, r8
 8007496:	eb1a 0303 	adds.w	r3, sl, r3
 800749a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800749e:	464b      	mov	r3, r9
 80074a0:	eb4b 0303 	adc.w	r3, fp, r3
 80074a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074bc:	460b      	mov	r3, r1
 80074be:	18db      	adds	r3, r3, r3
 80074c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074c2:	4613      	mov	r3, r2
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074d2:	f7f9 fb1b 	bl	8000b0c <__aeabi_uldivmod>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4611      	mov	r1, r2
 80074dc:	4b3b      	ldr	r3, [pc, #236]	@ (80075cc <UART_SetConfig+0x2d4>)
 80074de:	fba3 2301 	umull	r2, r3, r3, r1
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	2264      	movs	r2, #100	@ 0x64
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	1acb      	subs	r3, r1, r3
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074f2:	4b36      	ldr	r3, [pc, #216]	@ (80075cc <UART_SetConfig+0x2d4>)
 80074f4:	fba3 2302 	umull	r2, r3, r3, r2
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007500:	441c      	add	r4, r3
 8007502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007506:	2200      	movs	r2, #0
 8007508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800750c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007514:	4642      	mov	r2, r8
 8007516:	464b      	mov	r3, r9
 8007518:	1891      	adds	r1, r2, r2
 800751a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800751c:	415b      	adcs	r3, r3
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007524:	4641      	mov	r1, r8
 8007526:	1851      	adds	r1, r2, r1
 8007528:	6339      	str	r1, [r7, #48]	@ 0x30
 800752a:	4649      	mov	r1, r9
 800752c:	414b      	adcs	r3, r1
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800753c:	4659      	mov	r1, fp
 800753e:	00cb      	lsls	r3, r1, #3
 8007540:	4651      	mov	r1, sl
 8007542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007546:	4651      	mov	r1, sl
 8007548:	00ca      	lsls	r2, r1, #3
 800754a:	4610      	mov	r0, r2
 800754c:	4619      	mov	r1, r3
 800754e:	4603      	mov	r3, r0
 8007550:	4642      	mov	r2, r8
 8007552:	189b      	adds	r3, r3, r2
 8007554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007558:	464b      	mov	r3, r9
 800755a:	460a      	mov	r2, r1
 800755c:	eb42 0303 	adc.w	r3, r2, r3
 8007560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007570:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007578:	460b      	mov	r3, r1
 800757a:	18db      	adds	r3, r3, r3
 800757c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800757e:	4613      	mov	r3, r2
 8007580:	eb42 0303 	adc.w	r3, r2, r3
 8007584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800758a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800758e:	f7f9 fabd 	bl	8000b0c <__aeabi_uldivmod>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4b0d      	ldr	r3, [pc, #52]	@ (80075cc <UART_SetConfig+0x2d4>)
 8007598:	fba3 1302 	umull	r1, r3, r3, r2
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	2164      	movs	r1, #100	@ 0x64
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	3332      	adds	r3, #50	@ 0x32
 80075aa:	4a08      	ldr	r2, [pc, #32]	@ (80075cc <UART_SetConfig+0x2d4>)
 80075ac:	fba2 2303 	umull	r2, r3, r2, r3
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	f003 0207 	and.w	r2, r3, #7
 80075b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4422      	add	r2, r4
 80075be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075c0:	e106      	b.n	80077d0 <UART_SetConfig+0x4d8>
 80075c2:	bf00      	nop
 80075c4:	40011000 	.word	0x40011000
 80075c8:	40011400 	.word	0x40011400
 80075cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075e2:	4642      	mov	r2, r8
 80075e4:	464b      	mov	r3, r9
 80075e6:	1891      	adds	r1, r2, r2
 80075e8:	6239      	str	r1, [r7, #32]
 80075ea:	415b      	adcs	r3, r3
 80075ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075f2:	4641      	mov	r1, r8
 80075f4:	1854      	adds	r4, r2, r1
 80075f6:	4649      	mov	r1, r9
 80075f8:	eb43 0501 	adc.w	r5, r3, r1
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	00eb      	lsls	r3, r5, #3
 8007606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800760a:	00e2      	lsls	r2, r4, #3
 800760c:	4614      	mov	r4, r2
 800760e:	461d      	mov	r5, r3
 8007610:	4643      	mov	r3, r8
 8007612:	18e3      	adds	r3, r4, r3
 8007614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007618:	464b      	mov	r3, r9
 800761a:	eb45 0303 	adc.w	r3, r5, r3
 800761e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800762e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800763e:	4629      	mov	r1, r5
 8007640:	008b      	lsls	r3, r1, #2
 8007642:	4621      	mov	r1, r4
 8007644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007648:	4621      	mov	r1, r4
 800764a:	008a      	lsls	r2, r1, #2
 800764c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007650:	f7f9 fa5c 	bl	8000b0c <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4b60      	ldr	r3, [pc, #384]	@ (80077dc <UART_SetConfig+0x4e4>)
 800765a:	fba3 2302 	umull	r2, r3, r3, r2
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	011c      	lsls	r4, r3, #4
 8007662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007666:	2200      	movs	r2, #0
 8007668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800766c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	1891      	adds	r1, r2, r2
 800767a:	61b9      	str	r1, [r7, #24]
 800767c:	415b      	adcs	r3, r3
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007684:	4641      	mov	r1, r8
 8007686:	1851      	adds	r1, r2, r1
 8007688:	6139      	str	r1, [r7, #16]
 800768a:	4649      	mov	r1, r9
 800768c:	414b      	adcs	r3, r1
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800769c:	4659      	mov	r1, fp
 800769e:	00cb      	lsls	r3, r1, #3
 80076a0:	4651      	mov	r1, sl
 80076a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076a6:	4651      	mov	r1, sl
 80076a8:	00ca      	lsls	r2, r1, #3
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	4642      	mov	r2, r8
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076b8:	464b      	mov	r3, r9
 80076ba:	460a      	mov	r2, r1
 80076bc:	eb42 0303 	adc.w	r3, r2, r3
 80076c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076dc:	4649      	mov	r1, r9
 80076de:	008b      	lsls	r3, r1, #2
 80076e0:	4641      	mov	r1, r8
 80076e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076e6:	4641      	mov	r1, r8
 80076e8:	008a      	lsls	r2, r1, #2
 80076ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076ee:	f7f9 fa0d 	bl	8000b0c <__aeabi_uldivmod>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	4b38      	ldr	r3, [pc, #224]	@ (80077dc <UART_SetConfig+0x4e4>)
 80076fa:	fba3 2301 	umull	r2, r3, r3, r1
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	2264      	movs	r2, #100	@ 0x64
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	1acb      	subs	r3, r1, r3
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	3332      	adds	r3, #50	@ 0x32
 800770c:	4a33      	ldr	r2, [pc, #204]	@ (80077dc <UART_SetConfig+0x4e4>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007718:	441c      	add	r4, r3
 800771a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800771e:	2200      	movs	r2, #0
 8007720:	673b      	str	r3, [r7, #112]	@ 0x70
 8007722:	677a      	str	r2, [r7, #116]	@ 0x74
 8007724:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	1891      	adds	r1, r2, r2
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	415b      	adcs	r3, r3
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007738:	4641      	mov	r1, r8
 800773a:	1851      	adds	r1, r2, r1
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	4649      	mov	r1, r9
 8007740:	414b      	adcs	r3, r1
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007750:	4659      	mov	r1, fp
 8007752:	00cb      	lsls	r3, r1, #3
 8007754:	4651      	mov	r1, sl
 8007756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800775a:	4651      	mov	r1, sl
 800775c:	00ca      	lsls	r2, r1, #3
 800775e:	4610      	mov	r0, r2
 8007760:	4619      	mov	r1, r3
 8007762:	4603      	mov	r3, r0
 8007764:	4642      	mov	r2, r8
 8007766:	189b      	adds	r3, r3, r2
 8007768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800776a:	464b      	mov	r3, r9
 800776c:	460a      	mov	r2, r1
 800776e:	eb42 0303 	adc.w	r3, r2, r3
 8007772:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	663b      	str	r3, [r7, #96]	@ 0x60
 800777e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800778c:	4649      	mov	r1, r9
 800778e:	008b      	lsls	r3, r1, #2
 8007790:	4641      	mov	r1, r8
 8007792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007796:	4641      	mov	r1, r8
 8007798:	008a      	lsls	r2, r1, #2
 800779a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800779e:	f7f9 f9b5 	bl	8000b0c <__aeabi_uldivmod>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4b0d      	ldr	r3, [pc, #52]	@ (80077dc <UART_SetConfig+0x4e4>)
 80077a8:	fba3 1302 	umull	r1, r3, r3, r2
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	2164      	movs	r1, #100	@ 0x64
 80077b0:	fb01 f303 	mul.w	r3, r1, r3
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	3332      	adds	r3, #50	@ 0x32
 80077ba:	4a08      	ldr	r2, [pc, #32]	@ (80077dc <UART_SetConfig+0x4e4>)
 80077bc:	fba2 2303 	umull	r2, r3, r2, r3
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	f003 020f 	and.w	r2, r3, #15
 80077c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4422      	add	r2, r4
 80077ce:	609a      	str	r2, [r3, #8]
}
 80077d0:	bf00      	nop
 80077d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077d6:	46bd      	mov	sp, r7
 80077d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077dc:	51eb851f 	.word	0x51eb851f

080077e0 <sniprintf>:
 80077e0:	b40c      	push	{r2, r3}
 80077e2:	b530      	push	{r4, r5, lr}
 80077e4:	4b17      	ldr	r3, [pc, #92]	@ (8007844 <sniprintf+0x64>)
 80077e6:	1e0c      	subs	r4, r1, #0
 80077e8:	681d      	ldr	r5, [r3, #0]
 80077ea:	b09d      	sub	sp, #116	@ 0x74
 80077ec:	da08      	bge.n	8007800 <sniprintf+0x20>
 80077ee:	238b      	movs	r3, #139	@ 0x8b
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	f04f 30ff 	mov.w	r0, #4294967295
 80077f6:	b01d      	add	sp, #116	@ 0x74
 80077f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077fc:	b002      	add	sp, #8
 80077fe:	4770      	bx	lr
 8007800:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007804:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007808:	bf14      	ite	ne
 800780a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800780e:	4623      	moveq	r3, r4
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007818:	9002      	str	r0, [sp, #8]
 800781a:	9006      	str	r0, [sp, #24]
 800781c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007820:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007822:	ab21      	add	r3, sp, #132	@ 0x84
 8007824:	a902      	add	r1, sp, #8
 8007826:	4628      	mov	r0, r5
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	f000 f9a9 	bl	8007b80 <_svfiprintf_r>
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	bfbc      	itt	lt
 8007832:	238b      	movlt	r3, #139	@ 0x8b
 8007834:	602b      	strlt	r3, [r5, #0]
 8007836:	2c00      	cmp	r4, #0
 8007838:	d0dd      	beq.n	80077f6 <sniprintf+0x16>
 800783a:	9b02      	ldr	r3, [sp, #8]
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	e7d9      	b.n	80077f6 <sniprintf+0x16>
 8007842:	bf00      	nop
 8007844:	2000000c 	.word	0x2000000c

08007848 <memset>:
 8007848:	4402      	add	r2, r0
 800784a:	4603      	mov	r3, r0
 800784c:	4293      	cmp	r3, r2
 800784e:	d100      	bne.n	8007852 <memset+0xa>
 8007850:	4770      	bx	lr
 8007852:	f803 1b01 	strb.w	r1, [r3], #1
 8007856:	e7f9      	b.n	800784c <memset+0x4>

08007858 <strncpy>:
 8007858:	b510      	push	{r4, lr}
 800785a:	3901      	subs	r1, #1
 800785c:	4603      	mov	r3, r0
 800785e:	b132      	cbz	r2, 800786e <strncpy+0x16>
 8007860:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007864:	f803 4b01 	strb.w	r4, [r3], #1
 8007868:	3a01      	subs	r2, #1
 800786a:	2c00      	cmp	r4, #0
 800786c:	d1f7      	bne.n	800785e <strncpy+0x6>
 800786e:	441a      	add	r2, r3
 8007870:	2100      	movs	r1, #0
 8007872:	4293      	cmp	r3, r2
 8007874:	d100      	bne.n	8007878 <strncpy+0x20>
 8007876:	bd10      	pop	{r4, pc}
 8007878:	f803 1b01 	strb.w	r1, [r3], #1
 800787c:	e7f9      	b.n	8007872 <strncpy+0x1a>
	...

08007880 <__errno>:
 8007880:	4b01      	ldr	r3, [pc, #4]	@ (8007888 <__errno+0x8>)
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	2000000c 	.word	0x2000000c

0800788c <__libc_init_array>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4d0d      	ldr	r5, [pc, #52]	@ (80078c4 <__libc_init_array+0x38>)
 8007890:	4c0d      	ldr	r4, [pc, #52]	@ (80078c8 <__libc_init_array+0x3c>)
 8007892:	1b64      	subs	r4, r4, r5
 8007894:	10a4      	asrs	r4, r4, #2
 8007896:	2600      	movs	r6, #0
 8007898:	42a6      	cmp	r6, r4
 800789a:	d109      	bne.n	80078b0 <__libc_init_array+0x24>
 800789c:	4d0b      	ldr	r5, [pc, #44]	@ (80078cc <__libc_init_array+0x40>)
 800789e:	4c0c      	ldr	r4, [pc, #48]	@ (80078d0 <__libc_init_array+0x44>)
 80078a0:	f000 fc66 	bl	8008170 <_init>
 80078a4:	1b64      	subs	r4, r4, r5
 80078a6:	10a4      	asrs	r4, r4, #2
 80078a8:	2600      	movs	r6, #0
 80078aa:	42a6      	cmp	r6, r4
 80078ac:	d105      	bne.n	80078ba <__libc_init_array+0x2e>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b4:	4798      	blx	r3
 80078b6:	3601      	adds	r6, #1
 80078b8:	e7ee      	b.n	8007898 <__libc_init_array+0xc>
 80078ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80078be:	4798      	blx	r3
 80078c0:	3601      	adds	r6, #1
 80078c2:	e7f2      	b.n	80078aa <__libc_init_array+0x1e>
 80078c4:	08008200 	.word	0x08008200
 80078c8:	08008200 	.word	0x08008200
 80078cc:	08008200 	.word	0x08008200
 80078d0:	08008204 	.word	0x08008204

080078d4 <__retarget_lock_acquire_recursive>:
 80078d4:	4770      	bx	lr

080078d6 <__retarget_lock_release_recursive>:
 80078d6:	4770      	bx	lr

080078d8 <_free_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4605      	mov	r5, r0
 80078dc:	2900      	cmp	r1, #0
 80078de:	d041      	beq.n	8007964 <_free_r+0x8c>
 80078e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e4:	1f0c      	subs	r4, r1, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bfb8      	it	lt
 80078ea:	18e4      	addlt	r4, r4, r3
 80078ec:	f000 f8e0 	bl	8007ab0 <__malloc_lock>
 80078f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007968 <_free_r+0x90>)
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	b933      	cbnz	r3, 8007904 <_free_r+0x2c>
 80078f6:	6063      	str	r3, [r4, #4]
 80078f8:	6014      	str	r4, [r2, #0]
 80078fa:	4628      	mov	r0, r5
 80078fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007900:	f000 b8dc 	b.w	8007abc <__malloc_unlock>
 8007904:	42a3      	cmp	r3, r4
 8007906:	d908      	bls.n	800791a <_free_r+0x42>
 8007908:	6820      	ldr	r0, [r4, #0]
 800790a:	1821      	adds	r1, r4, r0
 800790c:	428b      	cmp	r3, r1
 800790e:	bf01      	itttt	eq
 8007910:	6819      	ldreq	r1, [r3, #0]
 8007912:	685b      	ldreq	r3, [r3, #4]
 8007914:	1809      	addeq	r1, r1, r0
 8007916:	6021      	streq	r1, [r4, #0]
 8007918:	e7ed      	b.n	80078f6 <_free_r+0x1e>
 800791a:	461a      	mov	r2, r3
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b10b      	cbz	r3, 8007924 <_free_r+0x4c>
 8007920:	42a3      	cmp	r3, r4
 8007922:	d9fa      	bls.n	800791a <_free_r+0x42>
 8007924:	6811      	ldr	r1, [r2, #0]
 8007926:	1850      	adds	r0, r2, r1
 8007928:	42a0      	cmp	r0, r4
 800792a:	d10b      	bne.n	8007944 <_free_r+0x6c>
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	4401      	add	r1, r0
 8007930:	1850      	adds	r0, r2, r1
 8007932:	4283      	cmp	r3, r0
 8007934:	6011      	str	r1, [r2, #0]
 8007936:	d1e0      	bne.n	80078fa <_free_r+0x22>
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	6053      	str	r3, [r2, #4]
 800793e:	4408      	add	r0, r1
 8007940:	6010      	str	r0, [r2, #0]
 8007942:	e7da      	b.n	80078fa <_free_r+0x22>
 8007944:	d902      	bls.n	800794c <_free_r+0x74>
 8007946:	230c      	movs	r3, #12
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	e7d6      	b.n	80078fa <_free_r+0x22>
 800794c:	6820      	ldr	r0, [r4, #0]
 800794e:	1821      	adds	r1, r4, r0
 8007950:	428b      	cmp	r3, r1
 8007952:	bf04      	itt	eq
 8007954:	6819      	ldreq	r1, [r3, #0]
 8007956:	685b      	ldreq	r3, [r3, #4]
 8007958:	6063      	str	r3, [r4, #4]
 800795a:	bf04      	itt	eq
 800795c:	1809      	addeq	r1, r1, r0
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	6054      	str	r4, [r2, #4]
 8007962:	e7ca      	b.n	80078fa <_free_r+0x22>
 8007964:	bd38      	pop	{r3, r4, r5, pc}
 8007966:	bf00      	nop
 8007968:	20000784 	.word	0x20000784

0800796c <sbrk_aligned>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4e0f      	ldr	r6, [pc, #60]	@ (80079ac <sbrk_aligned+0x40>)
 8007970:	460c      	mov	r4, r1
 8007972:	6831      	ldr	r1, [r6, #0]
 8007974:	4605      	mov	r5, r0
 8007976:	b911      	cbnz	r1, 800797e <sbrk_aligned+0x12>
 8007978:	f000 fba6 	bl	80080c8 <_sbrk_r>
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 fba1 	bl	80080c8 <_sbrk_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d103      	bne.n	8007992 <sbrk_aligned+0x26>
 800798a:	f04f 34ff 	mov.w	r4, #4294967295
 800798e:	4620      	mov	r0, r4
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	1cc4      	adds	r4, r0, #3
 8007994:	f024 0403 	bic.w	r4, r4, #3
 8007998:	42a0      	cmp	r0, r4
 800799a:	d0f8      	beq.n	800798e <sbrk_aligned+0x22>
 800799c:	1a21      	subs	r1, r4, r0
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 fb92 	bl	80080c8 <_sbrk_r>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d1f2      	bne.n	800798e <sbrk_aligned+0x22>
 80079a8:	e7ef      	b.n	800798a <sbrk_aligned+0x1e>
 80079aa:	bf00      	nop
 80079ac:	20000780 	.word	0x20000780

080079b0 <_malloc_r>:
 80079b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b4:	1ccd      	adds	r5, r1, #3
 80079b6:	f025 0503 	bic.w	r5, r5, #3
 80079ba:	3508      	adds	r5, #8
 80079bc:	2d0c      	cmp	r5, #12
 80079be:	bf38      	it	cc
 80079c0:	250c      	movcc	r5, #12
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	4606      	mov	r6, r0
 80079c6:	db01      	blt.n	80079cc <_malloc_r+0x1c>
 80079c8:	42a9      	cmp	r1, r5
 80079ca:	d904      	bls.n	80079d6 <_malloc_r+0x26>
 80079cc:	230c      	movs	r3, #12
 80079ce:	6033      	str	r3, [r6, #0]
 80079d0:	2000      	movs	r0, #0
 80079d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007aac <_malloc_r+0xfc>
 80079da:	f000 f869 	bl	8007ab0 <__malloc_lock>
 80079de:	f8d8 3000 	ldr.w	r3, [r8]
 80079e2:	461c      	mov	r4, r3
 80079e4:	bb44      	cbnz	r4, 8007a38 <_malloc_r+0x88>
 80079e6:	4629      	mov	r1, r5
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7ff ffbf 	bl	800796c <sbrk_aligned>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	4604      	mov	r4, r0
 80079f2:	d158      	bne.n	8007aa6 <_malloc_r+0xf6>
 80079f4:	f8d8 4000 	ldr.w	r4, [r8]
 80079f8:	4627      	mov	r7, r4
 80079fa:	2f00      	cmp	r7, #0
 80079fc:	d143      	bne.n	8007a86 <_malloc_r+0xd6>
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	d04b      	beq.n	8007a9a <_malloc_r+0xea>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	4639      	mov	r1, r7
 8007a06:	4630      	mov	r0, r6
 8007a08:	eb04 0903 	add.w	r9, r4, r3
 8007a0c:	f000 fb5c 	bl	80080c8 <_sbrk_r>
 8007a10:	4581      	cmp	r9, r0
 8007a12:	d142      	bne.n	8007a9a <_malloc_r+0xea>
 8007a14:	6821      	ldr	r1, [r4, #0]
 8007a16:	1a6d      	subs	r5, r5, r1
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7ff ffa6 	bl	800796c <sbrk_aligned>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d03a      	beq.n	8007a9a <_malloc_r+0xea>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	442b      	add	r3, r5
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	bb62      	cbnz	r2, 8007a8c <_malloc_r+0xdc>
 8007a32:	f8c8 7000 	str.w	r7, [r8]
 8007a36:	e00f      	b.n	8007a58 <_malloc_r+0xa8>
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	1b52      	subs	r2, r2, r5
 8007a3c:	d420      	bmi.n	8007a80 <_malloc_r+0xd0>
 8007a3e:	2a0b      	cmp	r2, #11
 8007a40:	d917      	bls.n	8007a72 <_malloc_r+0xc2>
 8007a42:	1961      	adds	r1, r4, r5
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	6025      	str	r5, [r4, #0]
 8007a48:	bf18      	it	ne
 8007a4a:	6059      	strne	r1, [r3, #4]
 8007a4c:	6863      	ldr	r3, [r4, #4]
 8007a4e:	bf08      	it	eq
 8007a50:	f8c8 1000 	streq.w	r1, [r8]
 8007a54:	5162      	str	r2, [r4, r5]
 8007a56:	604b      	str	r3, [r1, #4]
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 f82f 	bl	8007abc <__malloc_unlock>
 8007a5e:	f104 000b 	add.w	r0, r4, #11
 8007a62:	1d23      	adds	r3, r4, #4
 8007a64:	f020 0007 	bic.w	r0, r0, #7
 8007a68:	1ac2      	subs	r2, r0, r3
 8007a6a:	bf1c      	itt	ne
 8007a6c:	1a1b      	subne	r3, r3, r0
 8007a6e:	50a3      	strne	r3, [r4, r2]
 8007a70:	e7af      	b.n	80079d2 <_malloc_r+0x22>
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	bf0c      	ite	eq
 8007a78:	f8c8 2000 	streq.w	r2, [r8]
 8007a7c:	605a      	strne	r2, [r3, #4]
 8007a7e:	e7eb      	b.n	8007a58 <_malloc_r+0xa8>
 8007a80:	4623      	mov	r3, r4
 8007a82:	6864      	ldr	r4, [r4, #4]
 8007a84:	e7ae      	b.n	80079e4 <_malloc_r+0x34>
 8007a86:	463c      	mov	r4, r7
 8007a88:	687f      	ldr	r7, [r7, #4]
 8007a8a:	e7b6      	b.n	80079fa <_malloc_r+0x4a>
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d1fb      	bne.n	8007a8c <_malloc_r+0xdc>
 8007a94:	2300      	movs	r3, #0
 8007a96:	6053      	str	r3, [r2, #4]
 8007a98:	e7de      	b.n	8007a58 <_malloc_r+0xa8>
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	6033      	str	r3, [r6, #0]
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 f80c 	bl	8007abc <__malloc_unlock>
 8007aa4:	e794      	b.n	80079d0 <_malloc_r+0x20>
 8007aa6:	6005      	str	r5, [r0, #0]
 8007aa8:	e7d6      	b.n	8007a58 <_malloc_r+0xa8>
 8007aaa:	bf00      	nop
 8007aac:	20000784 	.word	0x20000784

08007ab0 <__malloc_lock>:
 8007ab0:	4801      	ldr	r0, [pc, #4]	@ (8007ab8 <__malloc_lock+0x8>)
 8007ab2:	f7ff bf0f 	b.w	80078d4 <__retarget_lock_acquire_recursive>
 8007ab6:	bf00      	nop
 8007ab8:	2000077c 	.word	0x2000077c

08007abc <__malloc_unlock>:
 8007abc:	4801      	ldr	r0, [pc, #4]	@ (8007ac4 <__malloc_unlock+0x8>)
 8007abe:	f7ff bf0a 	b.w	80078d6 <__retarget_lock_release_recursive>
 8007ac2:	bf00      	nop
 8007ac4:	2000077c 	.word	0x2000077c

08007ac8 <__ssputs_r>:
 8007ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	688e      	ldr	r6, [r1, #8]
 8007ace:	461f      	mov	r7, r3
 8007ad0:	42be      	cmp	r6, r7
 8007ad2:	680b      	ldr	r3, [r1, #0]
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	4690      	mov	r8, r2
 8007ada:	d82d      	bhi.n	8007b38 <__ssputs_r+0x70>
 8007adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ae4:	d026      	beq.n	8007b34 <__ssputs_r+0x6c>
 8007ae6:	6965      	ldr	r5, [r4, #20]
 8007ae8:	6909      	ldr	r1, [r1, #16]
 8007aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aee:	eba3 0901 	sub.w	r9, r3, r1
 8007af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af6:	1c7b      	adds	r3, r7, #1
 8007af8:	444b      	add	r3, r9
 8007afa:	106d      	asrs	r5, r5, #1
 8007afc:	429d      	cmp	r5, r3
 8007afe:	bf38      	it	cc
 8007b00:	461d      	movcc	r5, r3
 8007b02:	0553      	lsls	r3, r2, #21
 8007b04:	d527      	bpl.n	8007b56 <__ssputs_r+0x8e>
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7ff ff52 	bl	80079b0 <_malloc_r>
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	b360      	cbz	r0, 8007b6a <__ssputs_r+0xa2>
 8007b10:	6921      	ldr	r1, [r4, #16]
 8007b12:	464a      	mov	r2, r9
 8007b14:	f000 fae8 	bl	80080e8 <memcpy>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	6126      	str	r6, [r4, #16]
 8007b26:	6165      	str	r5, [r4, #20]
 8007b28:	444e      	add	r6, r9
 8007b2a:	eba5 0509 	sub.w	r5, r5, r9
 8007b2e:	6026      	str	r6, [r4, #0]
 8007b30:	60a5      	str	r5, [r4, #8]
 8007b32:	463e      	mov	r6, r7
 8007b34:	42be      	cmp	r6, r7
 8007b36:	d900      	bls.n	8007b3a <__ssputs_r+0x72>
 8007b38:	463e      	mov	r6, r7
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	4641      	mov	r1, r8
 8007b40:	f000 faa8 	bl	8008094 <memmove>
 8007b44:	68a3      	ldr	r3, [r4, #8]
 8007b46:	1b9b      	subs	r3, r3, r6
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	4433      	add	r3, r6
 8007b4e:	6023      	str	r3, [r4, #0]
 8007b50:	2000      	movs	r0, #0
 8007b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b56:	462a      	mov	r2, r5
 8007b58:	f000 fad4 	bl	8008104 <_realloc_r>
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d1e0      	bne.n	8007b24 <__ssputs_r+0x5c>
 8007b62:	6921      	ldr	r1, [r4, #16]
 8007b64:	4650      	mov	r0, sl
 8007b66:	f7ff feb7 	bl	80078d8 <_free_r>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	f8ca 3000 	str.w	r3, [sl]
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e7e9      	b.n	8007b52 <__ssputs_r+0x8a>
	...

08007b80 <_svfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4698      	mov	r8, r3
 8007b86:	898b      	ldrh	r3, [r1, #12]
 8007b88:	061b      	lsls	r3, r3, #24
 8007b8a:	b09d      	sub	sp, #116	@ 0x74
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	4614      	mov	r4, r2
 8007b92:	d510      	bpl.n	8007bb6 <_svfiprintf_r+0x36>
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	b973      	cbnz	r3, 8007bb6 <_svfiprintf_r+0x36>
 8007b98:	2140      	movs	r1, #64	@ 0x40
 8007b9a:	f7ff ff09 	bl	80079b0 <_malloc_r>
 8007b9e:	6028      	str	r0, [r5, #0]
 8007ba0:	6128      	str	r0, [r5, #16]
 8007ba2:	b930      	cbnz	r0, 8007bb2 <_svfiprintf_r+0x32>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	b01d      	add	sp, #116	@ 0x74
 8007bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb2:	2340      	movs	r3, #64	@ 0x40
 8007bb4:	616b      	str	r3, [r5, #20]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bba:	2320      	movs	r3, #32
 8007bbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc4:	2330      	movs	r3, #48	@ 0x30
 8007bc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d64 <_svfiprintf_r+0x1e4>
 8007bca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bce:	f04f 0901 	mov.w	r9, #1
 8007bd2:	4623      	mov	r3, r4
 8007bd4:	469a      	mov	sl, r3
 8007bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bda:	b10a      	cbz	r2, 8007be0 <_svfiprintf_r+0x60>
 8007bdc:	2a25      	cmp	r2, #37	@ 0x25
 8007bde:	d1f9      	bne.n	8007bd4 <_svfiprintf_r+0x54>
 8007be0:	ebba 0b04 	subs.w	fp, sl, r4
 8007be4:	d00b      	beq.n	8007bfe <_svfiprintf_r+0x7e>
 8007be6:	465b      	mov	r3, fp
 8007be8:	4622      	mov	r2, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7ff ff6b 	bl	8007ac8 <__ssputs_r>
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f000 80a7 	beq.w	8007d46 <_svfiprintf_r+0x1c6>
 8007bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bfa:	445a      	add	r2, fp
 8007bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 809f 	beq.w	8007d46 <_svfiprintf_r+0x1c6>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c12:	f10a 0a01 	add.w	sl, sl, #1
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c20:	4654      	mov	r4, sl
 8007c22:	2205      	movs	r2, #5
 8007c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c28:	484e      	ldr	r0, [pc, #312]	@ (8007d64 <_svfiprintf_r+0x1e4>)
 8007c2a:	f7f8 fb01 	bl	8000230 <memchr>
 8007c2e:	9a04      	ldr	r2, [sp, #16]
 8007c30:	b9d8      	cbnz	r0, 8007c6a <_svfiprintf_r+0xea>
 8007c32:	06d0      	lsls	r0, r2, #27
 8007c34:	bf44      	itt	mi
 8007c36:	2320      	movmi	r3, #32
 8007c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c3c:	0711      	lsls	r1, r2, #28
 8007c3e:	bf44      	itt	mi
 8007c40:	232b      	movmi	r3, #43	@ 0x2b
 8007c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c46:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c4c:	d015      	beq.n	8007c7a <_svfiprintf_r+0xfa>
 8007c4e:	9a07      	ldr	r2, [sp, #28]
 8007c50:	4654      	mov	r4, sl
 8007c52:	2000      	movs	r0, #0
 8007c54:	f04f 0c0a 	mov.w	ip, #10
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5e:	3b30      	subs	r3, #48	@ 0x30
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d94b      	bls.n	8007cfc <_svfiprintf_r+0x17c>
 8007c64:	b1b0      	cbz	r0, 8007c94 <_svfiprintf_r+0x114>
 8007c66:	9207      	str	r2, [sp, #28]
 8007c68:	e014      	b.n	8007c94 <_svfiprintf_r+0x114>
 8007c6a:	eba0 0308 	sub.w	r3, r0, r8
 8007c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c72:	4313      	orrs	r3, r2
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	46a2      	mov	sl, r4
 8007c78:	e7d2      	b.n	8007c20 <_svfiprintf_r+0xa0>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	1d19      	adds	r1, r3, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	9103      	str	r1, [sp, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bfbb      	ittet	lt
 8007c86:	425b      	neglt	r3, r3
 8007c88:	f042 0202 	orrlt.w	r2, r2, #2
 8007c8c:	9307      	strge	r3, [sp, #28]
 8007c8e:	9307      	strlt	r3, [sp, #28]
 8007c90:	bfb8      	it	lt
 8007c92:	9204      	strlt	r2, [sp, #16]
 8007c94:	7823      	ldrb	r3, [r4, #0]
 8007c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c98:	d10a      	bne.n	8007cb0 <_svfiprintf_r+0x130>
 8007c9a:	7863      	ldrb	r3, [r4, #1]
 8007c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9e:	d132      	bne.n	8007d06 <_svfiprintf_r+0x186>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	9203      	str	r2, [sp, #12]
 8007ca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cac:	3402      	adds	r4, #2
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d74 <_svfiprintf_r+0x1f4>
 8007cb4:	7821      	ldrb	r1, [r4, #0]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f7f8 fab9 	bl	8000230 <memchr>
 8007cbe:	b138      	cbz	r0, 8007cd0 <_svfiprintf_r+0x150>
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	eba0 000a 	sub.w	r0, r0, sl
 8007cc6:	2240      	movs	r2, #64	@ 0x40
 8007cc8:	4082      	lsls	r2, r0
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	3401      	adds	r4, #1
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd4:	4824      	ldr	r0, [pc, #144]	@ (8007d68 <_svfiprintf_r+0x1e8>)
 8007cd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cda:	2206      	movs	r2, #6
 8007cdc:	f7f8 faa8 	bl	8000230 <memchr>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d036      	beq.n	8007d52 <_svfiprintf_r+0x1d2>
 8007ce4:	4b21      	ldr	r3, [pc, #132]	@ (8007d6c <_svfiprintf_r+0x1ec>)
 8007ce6:	bb1b      	cbnz	r3, 8007d30 <_svfiprintf_r+0x1b0>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	3307      	adds	r3, #7
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf6:	4433      	add	r3, r6
 8007cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfa:	e76a      	b.n	8007bd2 <_svfiprintf_r+0x52>
 8007cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d00:	460c      	mov	r4, r1
 8007d02:	2001      	movs	r0, #1
 8007d04:	e7a8      	b.n	8007c58 <_svfiprintf_r+0xd8>
 8007d06:	2300      	movs	r3, #0
 8007d08:	3401      	adds	r4, #1
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f04f 0c0a 	mov.w	ip, #10
 8007d12:	4620      	mov	r0, r4
 8007d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d18:	3a30      	subs	r2, #48	@ 0x30
 8007d1a:	2a09      	cmp	r2, #9
 8007d1c:	d903      	bls.n	8007d26 <_svfiprintf_r+0x1a6>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0c6      	beq.n	8007cb0 <_svfiprintf_r+0x130>
 8007d22:	9105      	str	r1, [sp, #20]
 8007d24:	e7c4      	b.n	8007cb0 <_svfiprintf_r+0x130>
 8007d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e7f0      	b.n	8007d12 <_svfiprintf_r+0x192>
 8007d30:	ab03      	add	r3, sp, #12
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	462a      	mov	r2, r5
 8007d36:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <_svfiprintf_r+0x1f0>)
 8007d38:	a904      	add	r1, sp, #16
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f3af 8000 	nop.w
 8007d40:	1c42      	adds	r2, r0, #1
 8007d42:	4606      	mov	r6, r0
 8007d44:	d1d6      	bne.n	8007cf4 <_svfiprintf_r+0x174>
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	065b      	lsls	r3, r3, #25
 8007d4a:	f53f af2d 	bmi.w	8007ba8 <_svfiprintf_r+0x28>
 8007d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d50:	e72c      	b.n	8007bac <_svfiprintf_r+0x2c>
 8007d52:	ab03      	add	r3, sp, #12
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	462a      	mov	r2, r5
 8007d58:	4b05      	ldr	r3, [pc, #20]	@ (8007d70 <_svfiprintf_r+0x1f0>)
 8007d5a:	a904      	add	r1, sp, #16
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f000 f879 	bl	8007e54 <_printf_i>
 8007d62:	e7ed      	b.n	8007d40 <_svfiprintf_r+0x1c0>
 8007d64:	080081c4 	.word	0x080081c4
 8007d68:	080081ce 	.word	0x080081ce
 8007d6c:	00000000 	.word	0x00000000
 8007d70:	08007ac9 	.word	0x08007ac9
 8007d74:	080081ca 	.word	0x080081ca

08007d78 <_printf_common>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	4698      	mov	r8, r3
 8007d80:	688a      	ldr	r2, [r1, #8]
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	bfb8      	it	lt
 8007d8c:	4613      	movlt	r3, r2
 8007d8e:	6033      	str	r3, [r6, #0]
 8007d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d94:	4607      	mov	r7, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	b10a      	cbz	r2, 8007d9e <_printf_common+0x26>
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	0699      	lsls	r1, r3, #26
 8007da2:	bf42      	ittt	mi
 8007da4:	6833      	ldrmi	r3, [r6, #0]
 8007da6:	3302      	addmi	r3, #2
 8007da8:	6033      	strmi	r3, [r6, #0]
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	f015 0506 	ands.w	r5, r5, #6
 8007db0:	d106      	bne.n	8007dc0 <_printf_common+0x48>
 8007db2:	f104 0a19 	add.w	sl, r4, #25
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	6832      	ldr	r2, [r6, #0]
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	42ab      	cmp	r3, r5
 8007dbe:	dc26      	bgt.n	8007e0e <_printf_common+0x96>
 8007dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dc4:	6822      	ldr	r2, [r4, #0]
 8007dc6:	3b00      	subs	r3, #0
 8007dc8:	bf18      	it	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	0692      	lsls	r2, r2, #26
 8007dce:	d42b      	bmi.n	8007e28 <_printf_common+0xb0>
 8007dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	47c8      	blx	r9
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d01e      	beq.n	8007e1c <_printf_common+0xa4>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	f003 0306 	and.w	r3, r3, #6
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	bf02      	ittt	eq
 8007dea:	68e5      	ldreq	r5, [r4, #12]
 8007dec:	6833      	ldreq	r3, [r6, #0]
 8007dee:	1aed      	subeq	r5, r5, r3
 8007df0:	68a3      	ldr	r3, [r4, #8]
 8007df2:	bf0c      	ite	eq
 8007df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df8:	2500      	movne	r5, #0
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	bfc4      	itt	gt
 8007dfe:	1a9b      	subgt	r3, r3, r2
 8007e00:	18ed      	addgt	r5, r5, r3
 8007e02:	2600      	movs	r6, #0
 8007e04:	341a      	adds	r4, #26
 8007e06:	42b5      	cmp	r5, r6
 8007e08:	d11a      	bne.n	8007e40 <_printf_common+0xc8>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e008      	b.n	8007e20 <_printf_common+0xa8>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4652      	mov	r2, sl
 8007e12:	4641      	mov	r1, r8
 8007e14:	4638      	mov	r0, r7
 8007e16:	47c8      	blx	r9
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d103      	bne.n	8007e24 <_printf_common+0xac>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e24:	3501      	adds	r5, #1
 8007e26:	e7c6      	b.n	8007db6 <_printf_common+0x3e>
 8007e28:	18e1      	adds	r1, r4, r3
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	2030      	movs	r0, #48	@ 0x30
 8007e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e32:	4422      	add	r2, r4
 8007e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	e7c7      	b.n	8007dd0 <_printf_common+0x58>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4622      	mov	r2, r4
 8007e44:	4641      	mov	r1, r8
 8007e46:	4638      	mov	r0, r7
 8007e48:	47c8      	blx	r9
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	d0e6      	beq.n	8007e1c <_printf_common+0xa4>
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7d9      	b.n	8007e06 <_printf_common+0x8e>
	...

08007e54 <_printf_i>:
 8007e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	7e0f      	ldrb	r7, [r1, #24]
 8007e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e5c:	2f78      	cmp	r7, #120	@ 0x78
 8007e5e:	4691      	mov	r9, r2
 8007e60:	4680      	mov	r8, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	469a      	mov	sl, r3
 8007e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e6a:	d807      	bhi.n	8007e7c <_printf_i+0x28>
 8007e6c:	2f62      	cmp	r7, #98	@ 0x62
 8007e6e:	d80a      	bhi.n	8007e86 <_printf_i+0x32>
 8007e70:	2f00      	cmp	r7, #0
 8007e72:	f000 80d2 	beq.w	800801a <_printf_i+0x1c6>
 8007e76:	2f58      	cmp	r7, #88	@ 0x58
 8007e78:	f000 80b9 	beq.w	8007fee <_printf_i+0x19a>
 8007e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e84:	e03a      	b.n	8007efc <_printf_i+0xa8>
 8007e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e8a:	2b15      	cmp	r3, #21
 8007e8c:	d8f6      	bhi.n	8007e7c <_printf_i+0x28>
 8007e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e94 <_printf_i+0x40>)
 8007e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007f01 	.word	0x08007f01
 8007e9c:	08007e7d 	.word	0x08007e7d
 8007ea0:	08007e7d 	.word	0x08007e7d
 8007ea4:	08007e7d 	.word	0x08007e7d
 8007ea8:	08007e7d 	.word	0x08007e7d
 8007eac:	08007f01 	.word	0x08007f01
 8007eb0:	08007e7d 	.word	0x08007e7d
 8007eb4:	08007e7d 	.word	0x08007e7d
 8007eb8:	08007e7d 	.word	0x08007e7d
 8007ebc:	08007e7d 	.word	0x08007e7d
 8007ec0:	08008001 	.word	0x08008001
 8007ec4:	08007f2b 	.word	0x08007f2b
 8007ec8:	08007fbb 	.word	0x08007fbb
 8007ecc:	08007e7d 	.word	0x08007e7d
 8007ed0:	08007e7d 	.word	0x08007e7d
 8007ed4:	08008023 	.word	0x08008023
 8007ed8:	08007e7d 	.word	0x08007e7d
 8007edc:	08007f2b 	.word	0x08007f2b
 8007ee0:	08007e7d 	.word	0x08007e7d
 8007ee4:	08007e7d 	.word	0x08007e7d
 8007ee8:	08007fc3 	.word	0x08007fc3
 8007eec:	6833      	ldr	r3, [r6, #0]
 8007eee:	1d1a      	adds	r2, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6032      	str	r2, [r6, #0]
 8007ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007efc:	2301      	movs	r3, #1
 8007efe:	e09d      	b.n	800803c <_printf_i+0x1e8>
 8007f00:	6833      	ldr	r3, [r6, #0]
 8007f02:	6820      	ldr	r0, [r4, #0]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	6031      	str	r1, [r6, #0]
 8007f08:	0606      	lsls	r6, r0, #24
 8007f0a:	d501      	bpl.n	8007f10 <_printf_i+0xbc>
 8007f0c:	681d      	ldr	r5, [r3, #0]
 8007f0e:	e003      	b.n	8007f18 <_printf_i+0xc4>
 8007f10:	0645      	lsls	r5, r0, #25
 8007f12:	d5fb      	bpl.n	8007f0c <_printf_i+0xb8>
 8007f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	da03      	bge.n	8007f24 <_printf_i+0xd0>
 8007f1c:	232d      	movs	r3, #45	@ 0x2d
 8007f1e:	426d      	negs	r5, r5
 8007f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f24:	4859      	ldr	r0, [pc, #356]	@ (800808c <_printf_i+0x238>)
 8007f26:	230a      	movs	r3, #10
 8007f28:	e011      	b.n	8007f4e <_printf_i+0xfa>
 8007f2a:	6821      	ldr	r1, [r4, #0]
 8007f2c:	6833      	ldr	r3, [r6, #0]
 8007f2e:	0608      	lsls	r0, r1, #24
 8007f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f34:	d402      	bmi.n	8007f3c <_printf_i+0xe8>
 8007f36:	0649      	lsls	r1, r1, #25
 8007f38:	bf48      	it	mi
 8007f3a:	b2ad      	uxthmi	r5, r5
 8007f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f3e:	4853      	ldr	r0, [pc, #332]	@ (800808c <_printf_i+0x238>)
 8007f40:	6033      	str	r3, [r6, #0]
 8007f42:	bf14      	ite	ne
 8007f44:	230a      	movne	r3, #10
 8007f46:	2308      	moveq	r3, #8
 8007f48:	2100      	movs	r1, #0
 8007f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f4e:	6866      	ldr	r6, [r4, #4]
 8007f50:	60a6      	str	r6, [r4, #8]
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	bfa2      	ittt	ge
 8007f56:	6821      	ldrge	r1, [r4, #0]
 8007f58:	f021 0104 	bicge.w	r1, r1, #4
 8007f5c:	6021      	strge	r1, [r4, #0]
 8007f5e:	b90d      	cbnz	r5, 8007f64 <_printf_i+0x110>
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	d04b      	beq.n	8007ffc <_printf_i+0x1a8>
 8007f64:	4616      	mov	r6, r2
 8007f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f6e:	5dc7      	ldrb	r7, [r0, r7]
 8007f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f74:	462f      	mov	r7, r5
 8007f76:	42bb      	cmp	r3, r7
 8007f78:	460d      	mov	r5, r1
 8007f7a:	d9f4      	bls.n	8007f66 <_printf_i+0x112>
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d10b      	bne.n	8007f98 <_printf_i+0x144>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	07df      	lsls	r7, r3, #31
 8007f84:	d508      	bpl.n	8007f98 <_printf_i+0x144>
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	6861      	ldr	r1, [r4, #4]
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	bfde      	ittt	le
 8007f8e:	2330      	movle	r3, #48	@ 0x30
 8007f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f98:	1b92      	subs	r2, r2, r6
 8007f9a:	6122      	str	r2, [r4, #16]
 8007f9c:	f8cd a000 	str.w	sl, [sp]
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	aa03      	add	r2, sp, #12
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	f7ff fee6 	bl	8007d78 <_printf_common>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d14a      	bne.n	8008046 <_printf_i+0x1f2>
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	b004      	add	sp, #16
 8007fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f043 0320 	orr.w	r3, r3, #32
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	4833      	ldr	r0, [pc, #204]	@ (8008090 <_printf_i+0x23c>)
 8007fc4:	2778      	movs	r7, #120	@ 0x78
 8007fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	6831      	ldr	r1, [r6, #0]
 8007fce:	061f      	lsls	r7, r3, #24
 8007fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fd4:	d402      	bmi.n	8007fdc <_printf_i+0x188>
 8007fd6:	065f      	lsls	r7, r3, #25
 8007fd8:	bf48      	it	mi
 8007fda:	b2ad      	uxthmi	r5, r5
 8007fdc:	6031      	str	r1, [r6, #0]
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	bf44      	itt	mi
 8007fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fe6:	6023      	strmi	r3, [r4, #0]
 8007fe8:	b11d      	cbz	r5, 8007ff2 <_printf_i+0x19e>
 8007fea:	2310      	movs	r3, #16
 8007fec:	e7ac      	b.n	8007f48 <_printf_i+0xf4>
 8007fee:	4827      	ldr	r0, [pc, #156]	@ (800808c <_printf_i+0x238>)
 8007ff0:	e7e9      	b.n	8007fc6 <_printf_i+0x172>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	f023 0320 	bic.w	r3, r3, #32
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	e7f6      	b.n	8007fea <_printf_i+0x196>
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	e7bd      	b.n	8007f7c <_printf_i+0x128>
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	6825      	ldr	r5, [r4, #0]
 8008004:	6961      	ldr	r1, [r4, #20]
 8008006:	1d18      	adds	r0, r3, #4
 8008008:	6030      	str	r0, [r6, #0]
 800800a:	062e      	lsls	r6, r5, #24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	d501      	bpl.n	8008014 <_printf_i+0x1c0>
 8008010:	6019      	str	r1, [r3, #0]
 8008012:	e002      	b.n	800801a <_printf_i+0x1c6>
 8008014:	0668      	lsls	r0, r5, #25
 8008016:	d5fb      	bpl.n	8008010 <_printf_i+0x1bc>
 8008018:	8019      	strh	r1, [r3, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	4616      	mov	r6, r2
 8008020:	e7bc      	b.n	8007f9c <_printf_i+0x148>
 8008022:	6833      	ldr	r3, [r6, #0]
 8008024:	1d1a      	adds	r2, r3, #4
 8008026:	6032      	str	r2, [r6, #0]
 8008028:	681e      	ldr	r6, [r3, #0]
 800802a:	6862      	ldr	r2, [r4, #4]
 800802c:	2100      	movs	r1, #0
 800802e:	4630      	mov	r0, r6
 8008030:	f7f8 f8fe 	bl	8000230 <memchr>
 8008034:	b108      	cbz	r0, 800803a <_printf_i+0x1e6>
 8008036:	1b80      	subs	r0, r0, r6
 8008038:	6060      	str	r0, [r4, #4]
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	6123      	str	r3, [r4, #16]
 800803e:	2300      	movs	r3, #0
 8008040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008044:	e7aa      	b.n	8007f9c <_printf_i+0x148>
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	4632      	mov	r2, r6
 800804a:	4649      	mov	r1, r9
 800804c:	4640      	mov	r0, r8
 800804e:	47d0      	blx	sl
 8008050:	3001      	adds	r0, #1
 8008052:	d0ad      	beq.n	8007fb0 <_printf_i+0x15c>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	079b      	lsls	r3, r3, #30
 8008058:	d413      	bmi.n	8008082 <_printf_i+0x22e>
 800805a:	68e0      	ldr	r0, [r4, #12]
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	4298      	cmp	r0, r3
 8008060:	bfb8      	it	lt
 8008062:	4618      	movlt	r0, r3
 8008064:	e7a6      	b.n	8007fb4 <_printf_i+0x160>
 8008066:	2301      	movs	r3, #1
 8008068:	4632      	mov	r2, r6
 800806a:	4649      	mov	r1, r9
 800806c:	4640      	mov	r0, r8
 800806e:	47d0      	blx	sl
 8008070:	3001      	adds	r0, #1
 8008072:	d09d      	beq.n	8007fb0 <_printf_i+0x15c>
 8008074:	3501      	adds	r5, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	9903      	ldr	r1, [sp, #12]
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	42ab      	cmp	r3, r5
 800807e:	dcf2      	bgt.n	8008066 <_printf_i+0x212>
 8008080:	e7eb      	b.n	800805a <_printf_i+0x206>
 8008082:	2500      	movs	r5, #0
 8008084:	f104 0619 	add.w	r6, r4, #25
 8008088:	e7f5      	b.n	8008076 <_printf_i+0x222>
 800808a:	bf00      	nop
 800808c:	080081d5 	.word	0x080081d5
 8008090:	080081e6 	.word	0x080081e6

08008094 <memmove>:
 8008094:	4288      	cmp	r0, r1
 8008096:	b510      	push	{r4, lr}
 8008098:	eb01 0402 	add.w	r4, r1, r2
 800809c:	d902      	bls.n	80080a4 <memmove+0x10>
 800809e:	4284      	cmp	r4, r0
 80080a0:	4623      	mov	r3, r4
 80080a2:	d807      	bhi.n	80080b4 <memmove+0x20>
 80080a4:	1e43      	subs	r3, r0, #1
 80080a6:	42a1      	cmp	r1, r4
 80080a8:	d008      	beq.n	80080bc <memmove+0x28>
 80080aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080b2:	e7f8      	b.n	80080a6 <memmove+0x12>
 80080b4:	4402      	add	r2, r0
 80080b6:	4601      	mov	r1, r0
 80080b8:	428a      	cmp	r2, r1
 80080ba:	d100      	bne.n	80080be <memmove+0x2a>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080c6:	e7f7      	b.n	80080b8 <memmove+0x24>

080080c8 <_sbrk_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	@ (80080e4 <_sbrk_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7fa fc1a 	bl	800290c <_sbrk>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_sbrk_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_sbrk_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	20000778 	.word	0x20000778

080080e8 <memcpy>:
 80080e8:	440a      	add	r2, r1
 80080ea:	4291      	cmp	r1, r2
 80080ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f0:	d100      	bne.n	80080f4 <memcpy+0xc>
 80080f2:	4770      	bx	lr
 80080f4:	b510      	push	{r4, lr}
 80080f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fe:	4291      	cmp	r1, r2
 8008100:	d1f9      	bne.n	80080f6 <memcpy+0xe>
 8008102:	bd10      	pop	{r4, pc}

08008104 <_realloc_r>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	4680      	mov	r8, r0
 800810a:	4615      	mov	r5, r2
 800810c:	460c      	mov	r4, r1
 800810e:	b921      	cbnz	r1, 800811a <_realloc_r+0x16>
 8008110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	4611      	mov	r1, r2
 8008116:	f7ff bc4b 	b.w	80079b0 <_malloc_r>
 800811a:	b92a      	cbnz	r2, 8008128 <_realloc_r+0x24>
 800811c:	f7ff fbdc 	bl	80078d8 <_free_r>
 8008120:	2400      	movs	r4, #0
 8008122:	4620      	mov	r0, r4
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	f000 f81a 	bl	8008160 <_malloc_usable_size_r>
 800812c:	4285      	cmp	r5, r0
 800812e:	4606      	mov	r6, r0
 8008130:	d802      	bhi.n	8008138 <_realloc_r+0x34>
 8008132:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008136:	d8f4      	bhi.n	8008122 <_realloc_r+0x1e>
 8008138:	4629      	mov	r1, r5
 800813a:	4640      	mov	r0, r8
 800813c:	f7ff fc38 	bl	80079b0 <_malloc_r>
 8008140:	4607      	mov	r7, r0
 8008142:	2800      	cmp	r0, #0
 8008144:	d0ec      	beq.n	8008120 <_realloc_r+0x1c>
 8008146:	42b5      	cmp	r5, r6
 8008148:	462a      	mov	r2, r5
 800814a:	4621      	mov	r1, r4
 800814c:	bf28      	it	cs
 800814e:	4632      	movcs	r2, r6
 8008150:	f7ff ffca 	bl	80080e8 <memcpy>
 8008154:	4621      	mov	r1, r4
 8008156:	4640      	mov	r0, r8
 8008158:	f7ff fbbe 	bl	80078d8 <_free_r>
 800815c:	463c      	mov	r4, r7
 800815e:	e7e0      	b.n	8008122 <_realloc_r+0x1e>

08008160 <_malloc_usable_size_r>:
 8008160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008164:	1f18      	subs	r0, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfbc      	itt	lt
 800816a:	580b      	ldrlt	r3, [r1, r0]
 800816c:	18c0      	addlt	r0, r0, r3
 800816e:	4770      	bx	lr

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
