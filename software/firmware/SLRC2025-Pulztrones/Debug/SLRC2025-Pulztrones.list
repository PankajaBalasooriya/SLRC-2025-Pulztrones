
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080071cc  080071cc  000081cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800733c  0800733c  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  0800733c  0800733c  0000833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007344  08007344  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007344  08007344  00008344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007348  08007348  00008348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800734c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000070  080073bc  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080073bc  00009478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012899  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bc  00000000  00000000  0001b939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcf  00000000  00000000  0001f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d31  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016725  00000000  00000000  00043e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d638f  00000000  00000000  0005a5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013093c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005318  00000000  00000000  00130980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00135c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080071b4 	.word	0x080071b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080071b4 	.word	0x080071b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 80005b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ba:	b21b      	sxth	r3, r3
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 80005cc:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <getLeftEncoderCounts+0x14>)
 80005ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d0:	b21b      	sxth	r3, r3
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40010000 	.word	0x40010000

080005e0 <resetEncoders>:

void resetEncoders() {
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <resetEncoders+0x1c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 80005ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40010000 	.word	0x40010000

08000600 <HAL_UART_RxCpltCallback>:
    // Transmit the string over UART
    HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)  // Check if it's UART6
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a07      	ldr	r2, [pc, #28]	@ (800062c <HAL_UART_RxCpltCallback+0x2c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d107      	bne.n	8000622 <HAL_UART_RxCpltCallback+0x22>
    {
        data_received = 1;  // Set flag to indicate new data
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <HAL_UART_RxCpltCallback+0x30>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Restart reception
 8000618:	2232      	movs	r2, #50	@ 0x32
 800061a:	4906      	ldr	r1, [pc, #24]	@ (8000634 <HAL_UART_RxCpltCallback+0x34>)
 800061c:	4806      	ldr	r0, [pc, #24]	@ (8000638 <HAL_UART_RxCpltCallback+0x38>)
 800061e:	f004 fe84 	bl	800532a <HAL_UART_Receive_IT>
    }
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40011400 	.word	0x40011400
 8000630:	20000322 	.word	0x20000322
 8000634:	200002f0 	.word	0x200002f0
 8000638:	20000248 	.word	0x20000248

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f001 f952 	bl	80018e8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f85c 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 fabe 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 800064c:	f000 fa9c 	bl	8000b88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000650:	f000 fa1c 	bl	8000a8c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000654:	f000 f8f4 	bl	8000840 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000658:	f000 f94a 	bl	80008f0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800065c:	f000 f99c 	bl	8000998 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000660:	f000 f8c0 	bl	80007e4 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000664:	f000 fa3c 	bl	8000ae0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000668:	f000 fa64 	bl	8000b34 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800066c:	213c      	movs	r1, #60	@ 0x3c
 800066e:	481c      	ldr	r0, [pc, #112]	@ (80006e0 <main+0xa4>)
 8000670:	f003 fffc 	bl	800466c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000674:	213c      	movs	r1, #60	@ 0x3c
 8000676:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <main+0xa8>)
 8000678:	f003 fff8 	bl	800466c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800067c:	2100      	movs	r1, #0
 800067e:	481a      	ldr	r0, [pc, #104]	@ (80006e8 <main+0xac>)
 8000680:	f003 fe86 	bl	8004390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000684:	2104      	movs	r1, #4
 8000686:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <main+0xac>)
 8000688:	f003 fe82 	bl	8004390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800068c:	2108      	movs	r1, #8
 800068e:	4816      	ldr	r0, [pc, #88]	@ (80006e8 <main+0xac>)
 8000690:	f003 fe7e 	bl	8004390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000694:	210c      	movs	r1, #12
 8000696:	4814      	ldr	r0, [pc, #80]	@ (80006e8 <main+0xac>)
 8000698:	f003 fe7a 	bl	8004390 <HAL_TIM_PWM_Start>


  /*---------------------PCA9685 init--------------------------------*/
  // Initialise driver (performs basic setup).
  pca9685_init(&handle);
 800069c:	4813      	ldr	r0, [pc, #76]	@ (80006ec <main+0xb0>)
 800069e:	f000 fb85 	bl	8000dac <pca9685_init>

  // Set PWM frequency.
  // The frequency must be between 24Hz and 1526Hz.
  // Todo: Set the frequency according to the servo
  pca9685_set_pwm_frequency(&handle, 50.0f);
 80006a2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80006f0 <main+0xb4>
 80006a6:	4811      	ldr	r0, [pc, #68]	@ (80006ec <main+0xb0>)
 80006a8:	f000 fca4 	bl	8000ff4 <pca9685_set_pwm_frequency>

  /*-------------------------------------------------------------------*/
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt
 80006ac:	2232      	movs	r2, #50	@ 0x32
 80006ae:	4911      	ldr	r1, [pc, #68]	@ (80006f4 <main+0xb8>)
 80006b0:	4811      	ldr	r0, [pc, #68]	@ (80006f8 <main+0xbc>)
 80006b2:	f004 fe3a 	bl	800532a <HAL_UART_Receive_IT>
//		  UART_Transmit(&huart6, buffer);
//
//		  // Wait for 1 second
//		  HAL_Delay(50);

	  if (data_received)  // Check if new data is received
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <main+0xc0>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0fa      	beq.n	80006b6 <main+0x7a>
	  {
		  data_received = 0;  // Reset flag
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <main+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]

		  // Print received data back (optional, for debugging)
		  HAL_UART_Transmit(&huart6, (uint8_t *)uart_rx_buffer, strlen(uart_rx_buffer), HAL_MAX_DELAY);
 80006c6:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <main+0xb8>)
 80006c8:	f7ff fda2 	bl	8000210 <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <main+0xb8>)
 80006d6:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <main+0xbc>)
 80006d8:	f004 fd9c 	bl	8005214 <HAL_UART_Transmit>
	  if (data_received)  // Check if new data is received
 80006dc:	e7eb      	b.n	80006b6 <main+0x7a>
 80006de:	bf00      	nop
 80006e0:	200000e0 	.word	0x200000e0
 80006e4:	20000128 	.word	0x20000128
 80006e8:	20000170 	.word	0x20000170
 80006ec:	20000000 	.word	0x20000000
 80006f0:	42480000 	.word	0x42480000
 80006f4:	200002f0 	.word	0x200002f0
 80006f8:	20000248 	.word	0x20000248
 80006fc:	20000322 	.word	0x20000322

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	@ 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f005 febb 	bl	800648a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <SystemClock_Config+0xdc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a2b      	ldr	r2, [pc, #172]	@ (80007dc <SystemClock_Config+0xdc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <SystemClock_Config+0xdc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemClock_Config+0xe0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a25      	ldr	r2, [pc, #148]	@ (80007e0 <SystemClock_Config+0xe0>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemClock_Config+0xe0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000774:	23b4      	movs	r3, #180	@ 0xb4
 8000776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fb13 	bl	8003db4 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000794:	f000 fa86 	bl	8000ca4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000798:	f002 ff72 	bl	8003680 <HAL_PWREx_EnableOverDrive>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007a2:	f000 fa7f 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2105      	movs	r1, #5
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 ffab 	bl	8003720 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007d0:	f000 fa68 	bl	8000ca4 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	@ 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C2_Init+0x50>)
 80007ea:	4a13      	ldr	r2, [pc, #76]	@ (8000838 <MX_I2C2_Init+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_I2C2_Init+0x50>)
 80007f0:	4a12      	ldr	r2, [pc, #72]	@ (800083c <MX_I2C2_Init+0x58>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C2_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_I2C2_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_I2C2_Init+0x50>)
 8000802:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000806:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <MX_I2C2_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_I2C2_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <MX_I2C2_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_I2C2_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_I2C2_Init+0x50>)
 8000822:	f001 ff33 	bl	800268c <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 fa3a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000008c 	.word	0x2000008c
 8000838:	40005800 	.word	0x40005800
 800083c:	00061a80 	.word	0x00061a80

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	@ 0x30
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2224      	movs	r2, #36	@ 0x24
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f005 fe1b 	bl	800648a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 800085e:	4a23      	ldr	r2, [pc, #140]	@ (80008ec <MX_TIM1_Init+0xac>)
 8000860:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800086e:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 8000870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000888:	2303      	movs	r3, #3
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000890:	2301      	movs	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008a0:	2301      	movs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 80008b4:	f003 fe34 	bl	8004520 <HAL_TIM_Encoder_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80008be:	f000 f9f1 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <MX_TIM1_Init+0xa8>)
 80008d0:	f004 fbc0 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80008da:	f000 f9e3 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	@ 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000e0 	.word	0x200000e0
 80008ec:	40010000 	.word	0x40010000

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2224      	movs	r2, #36	@ 0x24
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 fdc3 	bl	800648a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <MX_TIM2_Init+0xa4>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_TIM2_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_TIM2_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000920:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_TIM2_Init+0xa4>)
 8000922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_TIM2_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <MX_TIM2_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000934:	2303      	movs	r3, #3
 8000936:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800093c:	2301      	movs	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800094c:	2301      	movs	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	480d      	ldr	r0, [pc, #52]	@ (8000994 <MX_TIM2_Init+0xa4>)
 8000960:	f003 fdde 	bl	8004520 <HAL_TIM_Encoder_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800096a:	f000 f99b 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	@ (8000994 <MX_TIM2_Init+0xa4>)
 800097c:	f004 fb6a 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000986:	f000 f98d 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000128 	.word	0x20000128

08000998 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ba:	4b32      	ldr	r3, [pc, #200]	@ (8000a84 <MX_TIM4_Init+0xec>)
 80009bc:	4a32      	ldr	r2, [pc, #200]	@ (8000a88 <MX_TIM4_Init+0xf0>)
 80009be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009c0:	4b30      	ldr	r3, [pc, #192]	@ (8000a84 <MX_TIM4_Init+0xec>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a84 <MX_TIM4_Init+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 80009cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <MX_TIM4_Init+0xec>)
 80009ce:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80009d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a84 <MX_TIM4_Init+0xec>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <MX_TIM4_Init+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009e0:	4828      	ldr	r0, [pc, #160]	@ (8000a84 <MX_TIM4_Init+0xec>)
 80009e2:	f003 fc85 	bl	80042f0 <HAL_TIM_PWM_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f95a 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4619      	mov	r1, r3
 80009fe:	4821      	ldr	r0, [pc, #132]	@ (8000a84 <MX_TIM4_Init+0xec>)
 8000a00:	f004 fb28 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a0a:	f000 f94b 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0e:	2360      	movs	r3, #96	@ 0x60
 8000a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4817      	ldr	r0, [pc, #92]	@ (8000a84 <MX_TIM4_Init+0xec>)
 8000a26:	f003 ff9f 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a30:	f000 f938 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2204      	movs	r2, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <MX_TIM4_Init+0xec>)
 8000a3c:	f003 ff94 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a46:	f000 f92d 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <MX_TIM4_Init+0xec>)
 8000a52:	f003 ff89 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000a5c:	f000 f922 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	220c      	movs	r2, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <MX_TIM4_Init+0xec>)
 8000a68:	f003 ff7e 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000a72:	f000 f917 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a76:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <MX_TIM4_Init+0xec>)
 8000a78:	f000 fc84 	bl	8001384 <HAL_TIM_MspPostInit>

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	@ 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000170 	.word	0x20000170
 8000a88:	40000800 	.word	0x40000800

08000a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <MX_USART2_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f004 fb56 	bl	8005174 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f8e9 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001b8 	.word	0x200001b8
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <MX_USART3_UART_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b18:	f004 fb2c 	bl	8005174 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b22:	f000 f8bf 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000200 	.word	0x20000200
 8000b30:	40004800 	.word	0x40004800

08000b34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_USART6_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b6c:	f004 fb02 	bl	8005174 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f895 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000248 	.word	0x20000248
 8000b84:	40011400 	.word	0x40011400

08000b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_DMA_Init+0x3c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <MX_DMA_Init+0x3c>)
 8000b98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_DMA_Init+0x3c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2039      	movs	r0, #57	@ 0x39
 8000bb0:	f001 f80b 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bb4:	2039      	movs	r0, #57	@ 0x39
 8000bb6:	f001 f824 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a25      	ldr	r2, [pc, #148]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_GPIO_Init+0xd0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2120      	movs	r1, #32
 8000c52:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c54:	f001 fd00 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_GPIO_Init+0xd8>)
 8000c70:	f001 fb5e 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c74:	2320      	movs	r3, #32
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c8c:	f001 fb50 	bl	8002330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	@ 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <pca9685_write_u8>:
		3248, 3284, 3320, 3356, 3393, 3430, 3467, 3504, 3542, 3579, 3617, 3656, 3694, 3733, 3773, 3812, 3852, 3892,
		3932, 3973, 4013, 4055, 4095
};

static bool pca9685_write_u8(pca9685_handle_t *handle, uint8_t address, uint8_t value)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	70bb      	strb	r3, [r7, #2]
	uint8_t data[] = {address, value};
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	733b      	strb	r3, [r7, #12]
 8000cc4:	78bb      	ldrb	r3, [r7, #2]
 8000cc6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	8899      	ldrh	r1, [r3, #4]
 8000cd0:	f107 020c 	add.w	r2, r7, #12
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f001 fe1b 	bl	8002914 <HAL_I2C_Master_Transmit>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf0c      	ite	eq
 8000ce4:	2301      	moveq	r3, #1
 8000ce6:	2300      	movne	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <pca9685_write_data>:

static bool pca9685_write_data(pca9685_handle_t *handle, uint8_t address, uint8_t *data, size_t length)
{
 8000cf2:	b590      	push	{r4, r7, lr}
 8000cf4:	b089      	sub	sp, #36	@ 0x24
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	72fb      	strb	r3, [r7, #11]
    if (length == 0 || length > 4) {
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d002      	beq.n	8000d0e <pca9685_write_data+0x1c>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d901      	bls.n	8000d12 <pca9685_write_data+0x20>
        return false;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e01d      	b.n	8000d4e <pca9685_write_data+0x5c>
    }

    uint8_t transfer[5];
    transfer[0] = address;
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	743b      	strb	r3, [r7, #16]

    memcpy(&transfer[1], data, length);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f005 fc2e 	bl	8006582 <memcpy>

    return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer, length + 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	8899      	ldrh	r1, [r3, #4]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	3301      	adds	r3, #1
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f107 0210 	add.w	r2, r7, #16
 8000d3a:	2401      	movs	r4, #1
 8000d3c:	9400      	str	r4, [sp, #0]
 8000d3e:	f001 fde9 	bl	8002914 <HAL_I2C_Master_Transmit>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf0c      	ite	eq
 8000d48:	2301      	moveq	r3, #1
 8000d4a:	2300      	movne	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}

08000d56 <pca9685_read_u8>:

static bool pca9685_read_u8(pca9685_handle_t *handle, uint8_t address, uint8_t *dest)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af02      	add	r7, sp, #8
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	72fb      	strb	r3, [r7, #11]
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &address, 1, PCA9685_I2C_TIMEOUT) != HAL_OK) {
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	8899      	ldrh	r1, [r3, #4]
 8000d6c:	f107 020b 	add.w	r2, r7, #11
 8000d70:	2301      	movs	r3, #1
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	f001 fdcd 	bl	8002914 <HAL_I2C_Master_Transmit>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <pca9685_read_u8+0x2e>
		return false;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e00f      	b.n	8000da4 <pca9685_read_u8+0x4e>
	}

	return HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, dest, 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	8899      	ldrh	r1, [r3, #4]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	f001 febc 	bl	8002b10 <HAL_I2C_Master_Receive>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <pca9685_init>:

bool pca9685_init(pca9685_handle_t *handle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle != NULL);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d105      	bne.n	8000dc8 <pca9685_init+0x1c>
 8000dbc:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <pca9685_init+0xd8>)
 8000dbe:	4a32      	ldr	r2, [pc, #200]	@ (8000e88 <pca9685_init+0xdc>)
 8000dc0:	2155      	movs	r1, #85	@ 0x55
 8000dc2:	4832      	ldr	r0, [pc, #200]	@ (8000e8c <pca9685_init+0xe0>)
 8000dc4:	f005 fa2c 	bl	8006220 <__assert_func>

	bool success = true;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73bb      	strb	r3, [r7, #14]

	// Set mode registers to default values (Auto-Increment, Sleep, Open-Drain).
	uint8_t mode1_reg_default_value = 0b00110000u;
 8000dcc:	2330      	movs	r3, #48	@ 0x30
 8000dce:	737b      	strb	r3, [r7, #13]
	uint8_t mode2_reg_default_value = 0b00000000u;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

	if (handle->inverted) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	799b      	ldrb	r3, [r3, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <pca9685_init+0x38>
		mode2_reg_default_value |= 0b00010000u;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	73fb      	strb	r3, [r7, #15]
	}

	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg_default_value);
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	461a      	mov	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff60 	bl	8000cb0 <pca9685_write_u8>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE2, mode2_reg_default_value);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	461a      	mov	r2, r3
 8000e06:	2101      	movs	r1, #1
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff51 	bl	8000cb0 <pca9685_write_u8>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	73bb      	strb	r3, [r7, #14]

    // Turn all channels off to begin with.
    uint8_t data[4] = { 0x00, 0x00, 0x00, 0x10 };
 8000e20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
    success &= pca9685_write_data(handle, PCA9685_REGISTER_ALL_LED_ON_L, data, 4);
 8000e26:	f107 0208 	add.w	r2, r7, #8
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	21fa      	movs	r1, #250	@ 0xfa
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff5f 	bl	8000cf2 <pca9685_write_data>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf14      	ite	ne
 8000e40:	2301      	movne	r3, #1
 8000e42:	2300      	moveq	r3, #0
 8000e44:	73bb      	strb	r3, [r7, #14]

	success &= pca9685_set_pwm_frequency(handle, 1000);
 8000e46:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000e90 <pca9685_init+0xe4>
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f8d2 	bl	8000ff4 <pca9685_set_pwm_frequency>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf14      	ite	ne
 8000e5c:	2301      	movne	r3, #1
 8000e5e:	2300      	moveq	r3, #0
 8000e60:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_wakeup(handle);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f870 	bl	8000f48 <pca9685_wakeup>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf14      	ite	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	2300      	moveq	r3, #0
 8000e78:	73bb      	strb	r3, [r7, #14]

	return success;
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	080071cc 	.word	0x080071cc
 8000e88:	08007280 	.word	0x08007280
 8000e8c:	080071e8 	.word	0x080071e8
 8000e90:	447a0000 	.word	0x447a0000

08000e94 <pca9685_is_sleeping>:

bool pca9685_is_sleeping(pca9685_handle_t *handle, bool *sleeping)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	bool success = true;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000ea2:	f107 030e 	add.w	r3, r7, #14
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff53 	bl	8000d56 <pca9685_read_u8>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]

	// Check if the sleeping bit is set.
	*sleeping = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2301      	movne	r3, #1
 8000ece:	2300      	moveq	r3, #0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	701a      	strb	r2, [r3, #0]

	return success;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <pca9685_sleep>:

bool pca9685_sleep(pca9685_handle_t *handle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	bool success = true;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000eec:	f107 030e 	add.w	r3, r7, #14
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff2e 	bl	8000d56 <pca9685_read_u8>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bf14      	ite	ne
 8000f06:	2301      	movne	r3, #1
 8000f08:	2300      	moveq	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

	// Don't write the restart bit back and set the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	73bb      	strb	r3, [r7, #14]
	PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	461a      	mov	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fec2 	bl	8000cb0 <pca9685_write_u8>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]

	return success;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <pca9685_wakeup>:

bool pca9685_wakeup(pca9685_handle_t *handle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	bool success = true;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000f54:	f107 030d 	add.w	r3, r7, #13
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fefa 	bl	8000d56 <pca9685_read_u8>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

	bool restart_required = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000f74:	7b7b      	ldrb	r3, [r7, #13]
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf14      	ite	ne
 8000f7e:	2301      	movne	r3, #1
 8000f80:	2300      	moveq	r3, #0
 8000f82:	73bb      	strb	r3, [r7, #14]

	// Clear the restart bit for now and clear the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	737b      	strb	r3, [r7, #13]
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	f023 0310 	bic.w	r3, r3, #16
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	737b      	strb	r3, [r7, #13]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000f98:	7b7b      	ldrb	r3, [r7, #13]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fe86 	bl	8000cb0 <pca9685_write_u8>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]

	if (restart_required) {
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d016      	beq.n	8000fea <pca9685_wakeup+0xa2>

		// Oscillator requires at least 500us to stabilise, so wait 1ms.
		HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fd05 	bl	80019cc <HAL_Delay>

		PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000fc2:	7b7b      	ldrb	r3, [r7, #13]
 8000fc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	737b      	strb	r3, [r7, #13]
		success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fe6c 	bl	8000cb0 <pca9685_write_u8>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	}

	return success;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <pca9685_set_pwm_frequency>:

bool pca9685_set_pwm_frequency(pca9685_handle_t *handle, float frequency)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	ed87 0a02 	vstr	s0, [r7, #8]
	assert(frequency >= 24);
 8001000:	edd7 7a02 	vldr	s15, [r7, #8]
 8001004:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	da05      	bge.n	800101e <pca9685_set_pwm_frequency+0x2a>
 8001012:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <pca9685_set_pwm_frequency+0x10c>)
 8001014:	4a3b      	ldr	r2, [pc, #236]	@ (8001104 <pca9685_set_pwm_frequency+0x110>)
 8001016:	21a9      	movs	r1, #169	@ 0xa9
 8001018:	483b      	ldr	r0, [pc, #236]	@ (8001108 <pca9685_set_pwm_frequency+0x114>)
 800101a:	f005 f901 	bl	8006220 <__assert_func>
	assert(frequency <= 1526);
 800101e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001022:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800110c <pca9685_set_pwm_frequency+0x118>
 8001026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	d905      	bls.n	800103c <pca9685_set_pwm_frequency+0x48>
 8001030:	4b37      	ldr	r3, [pc, #220]	@ (8001110 <pca9685_set_pwm_frequency+0x11c>)
 8001032:	4a34      	ldr	r2, [pc, #208]	@ (8001104 <pca9685_set_pwm_frequency+0x110>)
 8001034:	21aa      	movs	r1, #170	@ 0xaa
 8001036:	4834      	ldr	r0, [pc, #208]	@ (8001108 <pca9685_set_pwm_frequency+0x114>)
 8001038:	f005 f8f2 	bl	8006220 <__assert_func>

	bool success = true;
 800103c:	2301      	movs	r3, #1
 800103e:	75fb      	strb	r3, [r7, #23]

	// Calculate the prescaler value (see datasheet page 25)
	uint8_t prescaler = (uint8_t)roundf(25000000.0f / (4096 * frequency)) - 1;
 8001040:	edd7 7a02 	vldr	s15, [r7, #8]
 8001044:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001114 <pca9685_set_pwm_frequency+0x120>
 8001048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104c:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001118 <pca9685_set_pwm_frequency+0x124>
 8001050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001054:	eeb0 0a47 	vmov.f32	s0, s14
 8001058:	f006 f888 	bl	800716c <roundf>
 800105c:	eef0 7a40 	vmov.f32	s15, s0
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	edc7 7a01 	vstr	s15, [r7, #4]
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3b01      	subs	r3, #1
 800106e:	75bb      	strb	r3, [r7, #22]

	bool already_sleeping;
	success &= pca9685_is_sleeping(handle, &already_sleeping);
 8001070:	f107 0315 	add.w	r3, r7, #21
 8001074:	4619      	mov	r1, r3
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff ff0c 	bl	8000e94 <pca9685_is_sleeping>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf14      	ite	ne
 8001088:	2301      	movne	r3, #1
 800108a:	2300      	moveq	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]

	// The prescaler can only be changed in sleep mode.
	if (!already_sleeping) {
 800108e:	7d7b      	ldrb	r3, [r7, #21]
 8001090:	f083 0301 	eor.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <pca9685_set_pwm_frequency+0xbe>
		success &= pca9685_sleep(handle);
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff ff20 	bl	8000ee0 <pca9685_sleep>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	75fb      	strb	r3, [r7, #23]
	}

	// Write the new prescaler value.
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_PRESCALER, prescaler);
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	461a      	mov	r2, r3
 80010b6:	21fe      	movs	r1, #254	@ 0xfe
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff fdf9 	bl	8000cb0 <pca9685_write_u8>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf14      	ite	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	2300      	moveq	r3, #0
 80010ce:	75fb      	strb	r3, [r7, #23]

	// If the device wasn't sleeping, return from sleep mode.
	if (!already_sleeping) {
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <pca9685_set_pwm_frequency+0x100>
		success &= pca9685_wakeup(handle);
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff ff33 	bl	8000f48 <pca9685_wakeup>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
	}

	return success;
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08007200 	.word	0x08007200
 8001104:	08007290 	.word	0x08007290
 8001108:	080071e8 	.word	0x080071e8
 800110c:	44bec000 	.word	0x44bec000
 8001110:	08007210 	.word	0x08007210
 8001114:	45800000 	.word	0x45800000
 8001118:	4bbebc20 	.word	0x4bbebc20

0800111c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <HAL_MspInit+0x4c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	@ 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800115a:	2007      	movs	r0, #7
 800115c:	f000 fd2a 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a29      	ldr	r2, [pc, #164]	@ (8001230 <HAL_I2C_MspInit+0xc4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d14b      	bne.n	8001226 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a20      	ldr	r2, [pc, #128]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	2312      	movs	r3, #18
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011d8:	2304      	movs	r3, #4
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4815      	ldr	r0, [pc, #84]	@ (8001238 <HAL_I2C_MspInit+0xcc>)
 80011e4:	f001 f8a4 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ee:	2312      	movs	r3, #18
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011fa:	2304      	movs	r3, #4
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <HAL_I2C_MspInit+0xd0>)
 8001206:	f001 f893 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_I2C_MspInit+0xc8>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40005800 	.word	0x40005800
 8001234:	40023800 	.word	0x40023800
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800

08001240 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	@ 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a32      	ldr	r2, [pc, #200]	@ (8001328 <HAL_TIM_Encoder_MspInit+0xe8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12d      	bne.n	80012be <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a30      	ldr	r2, [pc, #192]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	4b2a      	ldr	r3, [pc, #168]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a29      	ldr	r2, [pc, #164]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b27      	ldr	r3, [pc, #156]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 800129a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481e      	ldr	r0, [pc, #120]	@ (8001330 <HAL_TIM_Encoder_MspInit+0xf0>)
 80012b8:	f001 f83a 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012bc:	e030      	b.n	8001320 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c6:	d12b      	bne.n	8001320 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	4a16      	ldr	r2, [pc, #88]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4b10      	ldr	r3, [pc, #64]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	4a0f      	ldr	r2, [pc, #60]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f4:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <HAL_TIM_Encoder_MspInit+0xec>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8001300:	2303      	movs	r3, #3
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001310:	2301      	movs	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <HAL_TIM_Encoder_MspInit+0xf0>)
 800131c:	f001 f808 	bl	8002330 <HAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	3730      	adds	r7, #48	@ 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40010000 	.word	0x40010000
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000

08001334 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0e      	ldr	r2, [pc, #56]	@ (800137c <HAL_TIM_PWM_MspInit+0x48>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d115      	bne.n	8001372 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <HAL_TIM_PWM_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <HAL_TIM_PWM_MspInit+0x4c>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_TIM_PWM_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	201e      	movs	r0, #30
 8001368:	f000 fc2f 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800136c:	201e      	movs	r0, #30
 800136e:	f000 fc48 	bl	8001c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40000800 	.word	0x40000800
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <HAL_TIM_MspPostInit+0x68>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d11e      	bne.n	80013e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_TIM_MspPostInit+0x6c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <HAL_TIM_MspPostInit+0x6c>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_TIM_MspPostInit+0x6c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013c2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80013c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <HAL_TIM_MspPostInit+0x70>)
 80013e0:	f000 ffa6 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40000800 	.word	0x40000800
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a66      	ldr	r2, [pc, #408]	@ (80015b0 <HAL_UART_MspInit+0x1b8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12c      	bne.n	8001474 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
 800141e:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a64      	ldr	r2, [pc, #400]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b62      	ldr	r3, [pc, #392]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	623b      	str	r3, [r7, #32]
 8001434:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	4b5e      	ldr	r3, [pc, #376]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a5d      	ldr	r2, [pc, #372]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001452:	230c      	movs	r3, #12
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4852      	ldr	r0, [pc, #328]	@ (80015b8 <HAL_UART_MspInit+0x1c0>)
 800146e:	f000 ff5f 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001472:	e099      	b.n	80015a8 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a50      	ldr	r2, [pc, #320]	@ (80015bc <HAL_UART_MspInit+0x1c4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12d      	bne.n	80014da <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b4c      	ldr	r3, [pc, #304]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a4b      	ldr	r2, [pc, #300]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b49      	ldr	r3, [pc, #292]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b45      	ldr	r3, [pc, #276]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a44      	ldr	r2, [pc, #272]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b42      	ldr	r3, [pc, #264]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80014b6:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c8:	2307      	movs	r3, #7
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	483b      	ldr	r0, [pc, #236]	@ (80015c0 <HAL_UART_MspInit+0x1c8>)
 80014d4:	f000 ff2c 	bl	8002330 <HAL_GPIO_Init>
}
 80014d8:	e066      	b.n	80015a8 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a39      	ldr	r2, [pc, #228]	@ (80015c4 <HAL_UART_MspInit+0x1cc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d161      	bne.n	80015a8 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	4a31      	ldr	r2, [pc, #196]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 80014ee:	f043 0320 	orr.w	r3, r3, #32
 80014f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	4a2a      	ldr	r2, [pc, #168]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001510:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c0      	movs	r3, #192	@ 0xc0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800152c:	2308      	movs	r3, #8
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4822      	ldr	r0, [pc, #136]	@ (80015c0 <HAL_UART_MspInit+0x1c8>)
 8001538:	f000 fefa 	bl	8002330 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 800153e:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <HAL_UART_MspInit+0x1d4>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001542:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001544:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001548:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154a:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001558:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800157c:	4812      	ldr	r0, [pc, #72]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 800157e:	f000 fb5b 	bl	8001c38 <HAL_DMA_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x194>
      Error_Handler();
 8001588:	f7ff fb8c 	bl	8000ca4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001592:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_UART_MspInit+0x1d0>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2047      	movs	r0, #71	@ 0x47
 800159e:	f000 fb14 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015a2:	2047      	movs	r0, #71	@ 0x47
 80015a4:	f000 fb2d 	bl	8001c02 <HAL_NVIC_EnableIRQ>
}
 80015a8:	bf00      	nop
 80015aa:	3738      	adds	r7, #56	@ 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40004400 	.word	0x40004400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40004800 	.word	0x40004800
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40011400 	.word	0x40011400
 80015c8:	20000290 	.word	0x20000290
 80015cc:	40026428 	.word	0x40026428

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001626:	f000 f9b1 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 800162a:	f000 f8f9 	bl	8001820 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <TIM4_IRQHandler+0x10>)
 800163a:	f003 f8a5 	bl	8004788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000170 	.word	0x20000170

08001648 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <DMA2_Stream1_IRQHandler+0x10>)
 800164e:	f000 fc33 	bl	8001eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000290 	.word	0x20000290

0800165c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <USART6_IRQHandler+0x10>)
 8001662:	f003 fe87 	bl	8005374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000248 	.word	0x20000248

08001670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return 1;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_kill>:

int _kill(int pid, int sig)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800168a:	f004 ff4d 	bl	8006528 <__errno>
 800168e:	4603      	mov	r3, r0
 8001690:	2216      	movs	r2, #22
 8001692:	601a      	str	r2, [r3, #0]
  return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_exit>:

void _exit (int status)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ffe7 	bl	8001680 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016b2:	bf00      	nop
 80016b4:	e7fd      	b.n	80016b2 <_exit+0x12>

080016b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e00a      	b.n	80016de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c8:	f3af 8000 	nop.w
 80016cc:	4601      	mov	r1, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	60ba      	str	r2, [r7, #8]
 80016d4:	b2ca      	uxtb	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbf0      	blt.n	80016c8 <_read+0x12>
  }

  return len;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e009      	b.n	8001716 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	60ba      	str	r2, [r7, #8]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbf1      	blt.n	8001702 <_write+0x12>
  }
  return len;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_close>:

int _close(int file)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001750:	605a      	str	r2, [r3, #4]
  return 0;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_isatty>:

int _isatty(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001768:	2301      	movs	r3, #1
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f004 feb2 	bl	8006528 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20020000 	.word	0x20020000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	20000324 	.word	0x20000324
 80017f8:	20000478 	.word	0x20000478

080017fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <SysTickFunction>:

#include "main.h"
// #include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8001826:	f7fe fec3 	bl	80005b0 <getRightEncoderCounts>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	f647 1318 	movw	r3, #31000	@ 0x7918
 8001832:	429a      	cmp	r2, r3
 8001834:	dc15      	bgt.n	8001862 <SysTickFunction+0x42>
 8001836:	f7fe fec7 	bl	80005c8 <getLeftEncoderCounts>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	f647 1318 	movw	r3, #31000	@ 0x7918
 8001842:	429a      	cmp	r2, r3
 8001844:	dc0d      	bgt.n	8001862 <SysTickFunction+0x42>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8001846:	f7fe feb3 	bl	80005b0 <getRightEncoderCounts>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <SysTickFunction+0x6c>)
 8001850:	429a      	cmp	r2, r3
 8001852:	db06      	blt.n	8001862 <SysTickFunction+0x42>
 8001854:	f7fe feb8 	bl	80005c8 <getLeftEncoderCounts>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <SysTickFunction+0x6c>)
 800185e:	429a      	cmp	r2, r3
 8001860:	da10      	bge.n	8001884 <SysTickFunction+0x64>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8001862:	f7fe fea5 	bl	80005b0 <getRightEncoderCounts>
 8001866:	4603      	mov	r3, r0
 8001868:	b29c      	uxth	r4, r3
 800186a:	f7fe fead 	bl	80005c8 <getLeftEncoderCounts>
 800186e:	4603      	mov	r3, r0
 8001870:	b29b      	uxth	r3, r3
 8001872:	1ae3      	subs	r3, r4, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8001878:	f7fe feb2 	bl	80005e0 <resetEncoders>
		TIM1->CNT = (int16_t) difference;
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <SysTickFunction+0x70>)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	ffff86e8 	.word	0xffff86e8
 8001890:	40010000 	.word	0x40010000

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001898:	f7ff ffb0 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	@ (80018e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f004 fe37 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7fe feb9 	bl	800063c <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018d8:	0800734c 	.word	0x0800734c
  ldr r2, =_sbss
 80018dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018e0:	20000478 	.word	0x20000478

080018e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_Init+0x40>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_Init+0x40>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <HAL_Init+0x40>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f94f 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fbfe 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f967 	bl	8001c1e <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f92f 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	@ (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000008 	.word	0x20000008
 8001984:	20000010 	.word	0x20000010
 8001988:	2000000c 	.word	0x2000000c

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000010 	.word	0x20000010
 80019b0:	20000328 	.word	0x20000328

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000328 	.word	0x20000328

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000010 	.word	0x20000010

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	@ (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	@ (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff feb6 	bl	80019b4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e099      	b.n	8001d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c74:	e00f      	b.n	8001c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c76:	f7ff fe9d 	bl	80019b4 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d908      	bls.n	8001c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e078      	b.n	8001d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e8      	bne.n	8001c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4b38      	ldr	r3, [pc, #224]	@ (8001d90 <HAL_DMA_Init+0x158>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f023 0307 	bic.w	r3, r3, #7
 8001d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d117      	bne.n	8001d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fa7b 	bl	8002238 <DMA_CheckFifoParam>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	@ 0x40
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d56:	2301      	movs	r3, #1
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa32 	bl	80021cc <DMA_CalcBaseAndBitshift>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d70:	223f      	movs	r2, #63	@ 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	f010803f 	.word	0xf010803f

08001d94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da2:	f7ff fe07 	bl	80019b4 <HAL_GetTick>
 8001da6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d008      	beq.n	8001dc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e052      	b.n	8001e6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0216 	bic.w	r2, r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_DMA_Abort+0x62>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0208 	bic.w	r2, r2, #8
 8001e04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e16:	e013      	b.n	8001e40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e18:	f7ff fdcc 	bl	80019b4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d90c      	bls.n	8001e40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e015      	b.n	8001e6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e4      	bne.n	8001e18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	223f      	movs	r2, #63	@ 0x3f
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d004      	beq.n	8001e92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2280      	movs	r2, #128	@ 0x80
 8001e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00c      	b.n	8001eac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2205      	movs	r2, #5
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec4:	4b8e      	ldr	r3, [pc, #568]	@ (8002100 <HAL_DMA_IRQHandler+0x248>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8002104 <HAL_DMA_IRQHandler+0x24c>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01a      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0204 	bic.w	r2, r2, #4
 8001f0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f10:	2208      	movs	r2, #8
 8001f12:	409a      	lsls	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	2201      	movs	r2, #1
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d012      	beq.n	8001f5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	2201      	movs	r2, #1
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f52:	f043 0202 	orr.w	r2, r3, #2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5e:	2204      	movs	r2, #4
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d012      	beq.n	8001f90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	f043 0204 	orr.w	r2, r3, #4
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	2210      	movs	r2, #16
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d043      	beq.n	8002028 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d03c      	beq.n	8002028 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d018      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d108      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d024      	beq.n	8002028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
 8001fe6:	e01f      	b.n	8002028 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01b      	beq.n	8002028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e016      	b.n	8002028 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0208 	bic.w	r2, r2, #8
 8002016:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202c:	2220      	movs	r2, #32
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 808f 	beq.w	8002158 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8087 	beq.w	8002158 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	2220      	movs	r2, #32
 8002050:	409a      	lsls	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b05      	cmp	r3, #5
 8002060:	d136      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0216 	bic.w	r2, r2, #22
 8002070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002080:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <HAL_DMA_IRQHandler+0x1da>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0208 	bic.w	r2, r2, #8
 80020a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	223f      	movs	r2, #63	@ 0x3f
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d07e      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
        }
        return;
 80020ce:	e079      	b.n	80021c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01d      	beq.n	800211a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10d      	bne.n	8002108 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
 80020fc:	e02c      	b.n	8002158 <HAL_DMA_IRQHandler+0x2a0>
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008
 8002104:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d023      	beq.n	8002158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
 8002118:	e01e      	b.n	8002158 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10f      	bne.n	8002148 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0210 	bic.w	r2, r2, #16
 8002136:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215c:	2b00      	cmp	r3, #0
 800215e:	d032      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d022      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2205      	movs	r2, #5
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3301      	adds	r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	d307      	bcc.n	80021a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f2      	bne.n	8002184 <HAL_DMA_IRQHandler+0x2cc>
 800219e:	e000      	b.n	80021a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
 80021c2:	e000      	b.n	80021c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c4:	bf00      	nop
    }
  }
}
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	3b10      	subs	r3, #16
 80021dc:	4a14      	ldr	r2, [pc, #80]	@ (8002230 <DMA_CalcBaseAndBitshift+0x64>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021e6:	4a13      	ldr	r2, [pc, #76]	@ (8002234 <DMA_CalcBaseAndBitshift+0x68>)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d909      	bls.n	800220e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	1d1a      	adds	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	659a      	str	r2, [r3, #88]	@ 0x58
 800220c:	e007      	b.n	800221e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	aaaaaaab 	.word	0xaaaaaaab
 8002234:	080072c4 	.word	0x080072c4

08002238 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11f      	bne.n	8002292 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d856      	bhi.n	8002306 <DMA_CheckFifoParam+0xce>
 8002258:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <DMA_CheckFifoParam+0x28>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002271 	.word	0x08002271
 8002264:	08002283 	.word	0x08002283
 8002268:	08002271 	.word	0x08002271
 800226c:	08002307 	.word	0x08002307
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d046      	beq.n	800230a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002280:	e043      	b.n	800230a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800228a:	d140      	bne.n	800230e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002290:	e03d      	b.n	800230e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800229a:	d121      	bne.n	80022e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d837      	bhi.n	8002312 <DMA_CheckFifoParam+0xda>
 80022a2:	a201      	add	r2, pc, #4	@ (adr r2, 80022a8 <DMA_CheckFifoParam+0x70>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	080022bf 	.word	0x080022bf
 80022b0:	080022b9 	.word	0x080022b9
 80022b4:	080022d1 	.word	0x080022d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      break;
 80022bc:	e030      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d025      	beq.n	8002316 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ce:	e022      	b.n	8002316 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022d8:	d11f      	bne.n	800231a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022de:	e01c      	b.n	800231a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d903      	bls.n	80022ee <DMA_CheckFifoParam+0xb6>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d003      	beq.n	80022f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022ec:	e018      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
      break;
 80022f2:	e015      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
      break;
 8002304:	e00b      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      break;
 8002306:	bf00      	nop
 8002308:	e00a      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      break;
 800230a:	bf00      	nop
 800230c:	e008      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      break;
 800230e:	bf00      	nop
 8002310:	e006      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      break;
 8002312:	bf00      	nop
 8002314:	e004      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      break;
 8002316:	bf00      	nop
 8002318:	e002      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      break;   
 800231a:	bf00      	nop
 800231c:	e000      	b.n	8002320 <DMA_CheckFifoParam+0xe8>
      break;
 800231e:	bf00      	nop
    }
  } 
  
  return status; 
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e165      	b.n	8002618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 8154 	bne.w	8002612 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d005      	beq.n	8002382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	2b02      	cmp	r3, #2
 8002380:	d130      	bne.n	80023e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0201 	and.w	r2, r3, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d017      	beq.n	8002420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d123      	bne.n	8002474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80ae 	beq.w	8002612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002630 <HAL_GPIO_Init+0x300>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	4a5c      	ldr	r2, [pc, #368]	@ (8002630 <HAL_GPIO_Init+0x300>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002630 <HAL_GPIO_Init+0x300>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d2:	4a58      	ldr	r2, [pc, #352]	@ (8002634 <HAL_GPIO_Init+0x304>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002638 <HAL_GPIO_Init+0x308>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d025      	beq.n	800254a <HAL_GPIO_Init+0x21a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4e      	ldr	r2, [pc, #312]	@ (800263c <HAL_GPIO_Init+0x30c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01f      	beq.n	8002546 <HAL_GPIO_Init+0x216>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4d      	ldr	r2, [pc, #308]	@ (8002640 <HAL_GPIO_Init+0x310>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x212>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4c      	ldr	r2, [pc, #304]	@ (8002644 <HAL_GPIO_Init+0x314>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x20e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4b      	ldr	r2, [pc, #300]	@ (8002648 <HAL_GPIO_Init+0x318>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x20a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4a      	ldr	r2, [pc, #296]	@ (800264c <HAL_GPIO_Init+0x31c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x206>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a49      	ldr	r2, [pc, #292]	@ (8002650 <HAL_GPIO_Init+0x320>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x202>
 800252e:	2306      	movs	r3, #6
 8002530:	e00c      	b.n	800254c <HAL_GPIO_Init+0x21c>
 8002532:	2307      	movs	r3, #7
 8002534:	e00a      	b.n	800254c <HAL_GPIO_Init+0x21c>
 8002536:	2305      	movs	r3, #5
 8002538:	e008      	b.n	800254c <HAL_GPIO_Init+0x21c>
 800253a:	2304      	movs	r3, #4
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x21c>
 800253e:	2303      	movs	r3, #3
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x21c>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x21c>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x21c>
 800254a:	2300      	movs	r3, #0
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	f002 0203 	and.w	r2, r2, #3
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4093      	lsls	r3, r2
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255c:	4935      	ldr	r1, [pc, #212]	@ (8002634 <HAL_GPIO_Init+0x304>)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256a:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_GPIO_Init+0x324>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800258e:	4a31      	ldr	r2, [pc, #196]	@ (8002654 <HAL_GPIO_Init+0x324>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <HAL_GPIO_Init+0x324>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b8:	4a26      	ldr	r2, [pc, #152]	@ (8002654 <HAL_GPIO_Init+0x324>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025be:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <HAL_GPIO_Init+0x324>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <HAL_GPIO_Init+0x324>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <HAL_GPIO_Init+0x324>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800260c:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <HAL_GPIO_Init+0x324>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	f67f ae96 	bls.w	800234c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3724      	adds	r7, #36	@ 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40013800 	.word	0x40013800
 8002638:	40020000 	.word	0x40020000
 800263c:	40020400 	.word	0x40020400
 8002640:	40020800 	.word	0x40020800
 8002644:	40020c00 	.word	0x40020c00
 8002648:	40021000 	.word	0x40021000
 800264c:	40021400 	.word	0x40021400
 8002650:	40021800 	.word	0x40021800
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e12b      	b.n	80028f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fd5a 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f0:	f001 f908 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 80026f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4a81      	ldr	r2, [pc, #516]	@ (8002900 <HAL_I2C_Init+0x274>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d807      	bhi.n	8002710 <HAL_I2C_Init+0x84>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a80      	ldr	r2, [pc, #512]	@ (8002904 <HAL_I2C_Init+0x278>)
 8002704:	4293      	cmp	r3, r2
 8002706:	bf94      	ite	ls
 8002708:	2301      	movls	r3, #1
 800270a:	2300      	movhi	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e006      	b.n	800271e <HAL_I2C_Init+0x92>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a7d      	ldr	r2, [pc, #500]	@ (8002908 <HAL_I2C_Init+0x27c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0e7      	b.n	80028f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a78      	ldr	r2, [pc, #480]	@ (800290c <HAL_I2C_Init+0x280>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9b      	lsrs	r3, r3, #18
 8002730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a6a      	ldr	r2, [pc, #424]	@ (8002900 <HAL_I2C_Init+0x274>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d802      	bhi.n	8002760 <HAL_I2C_Init+0xd4>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3301      	adds	r3, #1
 800275e:	e009      	b.n	8002774 <HAL_I2C_Init+0xe8>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4a69      	ldr	r2, [pc, #420]	@ (8002910 <HAL_I2C_Init+0x284>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	3301      	adds	r3, #1
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002786:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	495c      	ldr	r1, [pc, #368]	@ (8002900 <HAL_I2C_Init+0x274>)
 8002790:	428b      	cmp	r3, r1
 8002792:	d819      	bhi.n	80027c8 <HAL_I2C_Init+0x13c>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e59      	subs	r1, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a2:	1c59      	adds	r1, r3, #1
 80027a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027a8:	400b      	ands	r3, r1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_I2C_Init+0x138>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e59      	subs	r1, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c2:	e051      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 80027c4:	2304      	movs	r3, #4
 80027c6:	e04f      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d111      	bne.n	80027f4 <HAL_I2C_Init+0x168>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1e58      	subs	r0, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	440b      	add	r3, r1
 80027de:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e012      	b.n	800281a <HAL_I2C_Init+0x18e>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	0099      	lsls	r1, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Init+0x196>
 800281e:	2301      	movs	r3, #1
 8002820:	e022      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10e      	bne.n	8002848 <HAL_I2C_Init+0x1bc>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e58      	subs	r0, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	440b      	add	r3, r1
 8002838:	fbb0 f3f3 	udiv	r3, r0, r3
 800283c:	3301      	adds	r3, #1
 800283e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002846:	e00f      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e58      	subs	r0, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	0099      	lsls	r1, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	6809      	ldr	r1, [r1, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69da      	ldr	r2, [r3, #28]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6911      	ldr	r1, [r2, #16]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68d2      	ldr	r2, [r2, #12]
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	000186a0 	.word	0x000186a0
 8002904:	001e847f 	.word	0x001e847f
 8002908:	003d08ff 	.word	0x003d08ff
 800290c:	431bde83 	.word	0x431bde83
 8002910:	10624dd3 	.word	0x10624dd3

08002914 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	461a      	mov	r2, r3
 8002920:	460b      	mov	r3, r1
 8002922:	817b      	strh	r3, [r7, #10]
 8002924:	4613      	mov	r3, r2
 8002926:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff f844 	bl	80019b4 <HAL_GetTick>
 800292c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b20      	cmp	r3, #32
 8002938:	f040 80e0 	bne.w	8002afc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2319      	movs	r3, #25
 8002942:	2201      	movs	r2, #1
 8002944:	4970      	ldr	r1, [pc, #448]	@ (8002b08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fc64 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
 8002954:	e0d3      	b.n	8002afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_I2C_Master_Transmit+0x50>
 8002960:	2302      	movs	r3, #2
 8002962:	e0cc      	b.n	8002afe <HAL_I2C_Master_Transmit+0x1ea>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d007      	beq.n	800298a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002998:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2221      	movs	r2, #33	@ 0x21
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2210      	movs	r2, #16
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	893a      	ldrh	r2, [r7, #8]
 80029ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a50      	ldr	r2, [pc, #320]	@ (8002b0c <HAL_I2C_Master_Transmit+0x1f8>)
 80029ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 face 	bl	8002f74 <I2C_MasterRequestWrite>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e08d      	b.n	8002afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029f8:	e066      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fd22 	bl	8003448 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d107      	bne.n	8002a22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06b      	b.n	8002afe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d11b      	bne.n	8002a9c <HAL_I2C_Master_Transmit+0x188>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d017      	beq.n	8002a9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	6a39      	ldr	r1, [r7, #32]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fd19 	bl	80034d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d107      	bne.n	8002ac4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e01a      	b.n	8002afe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d194      	bne.n	80029fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	00100002 	.word	0x00100002
 8002b0c:	ffff0000 	.word	0xffff0000

08002b10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	817b      	strh	r3, [r7, #10]
 8002b20:	4613      	mov	r3, r2
 8002b22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7fe ff46 	bl	80019b4 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	f040 8217 	bne.w	8002f66 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2319      	movs	r3, #25
 8002b3e:	2201      	movs	r2, #1
 8002b40:	497c      	ldr	r1, [pc, #496]	@ (8002d34 <HAL_I2C_Master_Receive+0x224>)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fb66 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e20a      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2C_Master_Receive+0x50>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e203      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d007      	beq.n	8002b86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2222      	movs	r2, #34	@ 0x22
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	893a      	ldrh	r2, [r7, #8]
 8002bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d38 <HAL_I2C_Master_Receive+0x228>)
 8002bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bc8:	8979      	ldrh	r1, [r7, #10]
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa52 	bl	8003078 <I2C_MasterRequestRead>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1c4      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d113      	bne.n	8002c0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e198      	b.n	8002f40 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d11b      	bne.n	8002c4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e178      	b.n	8002f40 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d11b      	bne.n	8002c8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	e158      	b.n	8002f40 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cb4:	e144      	b.n	8002f40 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	f200 80f1 	bhi.w	8002ea2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d123      	bne.n	8002d10 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fc4b 	bl	8003568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e145      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d0e:	e117      	b.n	8002f40 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d14e      	bne.n	8002db6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	2200      	movs	r2, #0
 8002d20:	4906      	ldr	r1, [pc, #24]	@ (8002d3c <HAL_I2C_Master_Receive+0x22c>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fa76 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e11a      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
 8002d32:	bf00      	nop
 8002d34:	00100002 	.word	0x00100002
 8002d38:	ffff0000 	.word	0xffff0000
 8002d3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002db4:	e0c4      	b.n	8002f40 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	496c      	ldr	r1, [pc, #432]	@ (8002f70 <HAL_I2C_Master_Receive+0x460>)
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fa27 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0cb      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4955      	ldr	r1, [pc, #340]	@ (8002f70 <HAL_I2C_Master_Receive+0x460>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f9f9 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e09d      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ea0:	e04e      	b.n	8002f40 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fb5e 	bl	8003568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e058      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d124      	bne.n	8002f40 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d107      	bne.n	8002f0e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f0c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f aeb6 	bne.w	8002cb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3728      	adds	r7, #40	@ 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	00010004 	.word	0x00010004

08002f74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	460b      	mov	r3, r1
 8002f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d006      	beq.n	8002f9e <I2C_MasterRequestWrite+0x2a>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d003      	beq.n	8002f9e <I2C_MasterRequestWrite+0x2a>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f9c:	d108      	bne.n	8002fb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e00b      	b.n	8002fc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	2b12      	cmp	r3, #18
 8002fb6:	d107      	bne.n	8002fc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f91d 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fee:	d103      	bne.n	8002ff8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e035      	b.n	8003068 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003004:	d108      	bne.n	8003018 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e01b      	b.n	8003050 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	11db      	asrs	r3, r3, #7
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f003 0306 	and.w	r3, r3, #6
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f063 030f 	orn	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	490e      	ldr	r1, [pc, #56]	@ (8003070 <I2C_MasterRequestWrite+0xfc>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f966 	bl	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e010      	b.n	8003068 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <I2C_MasterRequestWrite+0x100>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f956 	bl	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	00010008 	.word	0x00010008
 8003074:	00010002 	.word	0x00010002

08003078 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	460b      	mov	r3, r1
 8003086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800309c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d006      	beq.n	80030b2 <I2C_MasterRequestRead+0x3a>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d003      	beq.n	80030b2 <I2C_MasterRequestRead+0x3a>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030b0:	d108      	bne.n	80030c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e00b      	b.n	80030dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	2b11      	cmp	r3, #17
 80030ca:	d107      	bne.n	80030dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f893 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003102:	d103      	bne.n	800310c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e079      	b.n	8003204 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003118:	d108      	bne.n	800312c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800311a:	897b      	ldrh	r3, [r7, #10]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]
 800312a:	e05f      	b.n	80031ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800312c:	897b      	ldrh	r3, [r7, #10]
 800312e:	11db      	asrs	r3, r3, #7
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 0306 	and.w	r3, r3, #6
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f063 030f 	orn	r3, r3, #15
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4930      	ldr	r1, [pc, #192]	@ (800320c <I2C_MasterRequestRead+0x194>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f8dc 	bl	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e054      	b.n	8003204 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4929      	ldr	r1, [pc, #164]	@ (8003210 <I2C_MasterRequestRead+0x198>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f8cc 	bl	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e044      	b.n	8003204 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800319e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f831 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c6:	d103      	bne.n	80031d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e017      	b.n	8003204 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031d4:	897b      	ldrh	r3, [r7, #10]
 80031d6:	11db      	asrs	r3, r3, #7
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 0306 	and.w	r3, r3, #6
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f063 030e 	orn	r3, r3, #14
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4907      	ldr	r1, [pc, #28]	@ (8003210 <I2C_MasterRequestRead+0x198>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f888 	bl	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00010008 	.word	0x00010008
 8003210:	00010002 	.word	0x00010002

08003214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	e048      	b.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d044      	beq.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322e:	f7fe fbc1 	bl	80019b4 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d139      	bne.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10d      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x56>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	43da      	mvns	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	e00c      	b.n	8003284 <I2C_WaitOnFlagUntilTimeout+0x70>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	43da      	mvns	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4013      	ands	r3, r2
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	429a      	cmp	r2, r3
 8003288:	d116      	bne.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e023      	b.n	8003300 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10d      	bne.n	80032de <I2C_WaitOnFlagUntilTimeout+0xca>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	e00c      	b.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d093      	beq.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003316:	e071      	b.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003326:	d123      	bne.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003336:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e067      	b.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d041      	beq.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003378:	f7fe fb1c 	bl	80019b4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d136      	bne.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d10c      	bne.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf14      	ite	ne
 80033aa:	2301      	movne	r3, #1
 80033ac:	2300      	moveq	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	e00b      	b.n	80033ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	43da      	mvns	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4013      	ands	r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d016      	beq.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e021      	b.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10c      	bne.n	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	43da      	mvns	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e00b      	b.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f af6d 	bne.w	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003454:	e034      	b.n	80034c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8e3 	bl	8003622 <I2C_IsAcknowledgeFailed>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e034      	b.n	80034d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d028      	beq.n	80034c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fe faa1 	bl	80019b4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11d      	bne.n	80034c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348e:	2b80      	cmp	r3, #128	@ 0x80
 8003490:	d016      	beq.n	80034c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e007      	b.n	80034d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ca:	2b80      	cmp	r3, #128	@ 0x80
 80034cc:	d1c3      	bne.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034e4:	e034      	b.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f89b 	bl	8003622 <I2C_IsAcknowledgeFailed>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e034      	b.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d028      	beq.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7fe fa59 	bl	80019b4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d11d      	bne.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d016      	beq.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e007      	b.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d1c3      	bne.n	80034e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003574:	e049      	b.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b10      	cmp	r3, #16
 8003582:	d119      	bne.n	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e030      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe f9fc 	bl	80019b4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11d      	bne.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
 80035da:	d016      	beq.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d1ae      	bne.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003638:	d11b      	bne.n	8003672 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003642:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f043 0204 	orr.w	r2, r3, #4
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <HAL_PWREx_EnableOverDrive+0x90>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a1f      	ldr	r2, [pc, #124]	@ (8003710 <HAL_PWREx_EnableOverDrive+0x90>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <HAL_PWREx_EnableOverDrive+0x90>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_PWREx_EnableOverDrive+0x94>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ac:	f7fe f982 	bl	80019b4 <HAL_GetTick>
 80036b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b2:	e009      	b.n	80036c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b4:	f7fe f97e 	bl	80019b4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c2:	d901      	bls.n	80036c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e01f      	b.n	8003708 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036c8:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d1ee      	bne.n	80036b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036dc:	f7fe f96a 	bl	80019b4 <HAL_GetTick>
 80036e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036e2:	e009      	b.n	80036f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036e4:	f7fe f966 	bl	80019b4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036f2:	d901      	bls.n	80036f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e007      	b.n	8003708 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036f8:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003704:	d1ee      	bne.n	80036e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	420e0040 	.word	0x420e0040
 8003718:	40007000 	.word	0x40007000
 800371c:	420e0044 	.word	0x420e0044

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cc      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b68      	ldr	r3, [pc, #416]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d90c      	bls.n	800375c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b65      	ldr	r3, [pc, #404]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d044      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e067      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4934      	ldr	r1, [pc, #208]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7fe f8d0 	bl	80019b4 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fe f8cc 	bl	80019b4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e04f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2b      	ldr	r3, [pc, #172]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b25      	ldr	r3, [pc, #148]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d20c      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b22      	ldr	r3, [pc, #136]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 f855 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe f830 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	080072ac 	.word	0x080072ac
 80038e4:	20000008 	.word	0x20000008
 80038e8:	2000000c 	.word	0x2000000c

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000008 	.word	0x20000008

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	080072bc 	.word	0x080072bc

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	080072bc 	.word	0x080072bc

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003958:	b0ae      	sub	sp, #184	@ 0xb8
 800395a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800397a:	4bcb      	ldr	r3, [pc, #812]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b0c      	cmp	r3, #12
 8003984:	f200 8206 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x440>
 8003988:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <HAL_RCC_GetSysClockFreq+0x3c>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039c5 	.word	0x080039c5
 8003994:	08003d95 	.word	0x08003d95
 8003998:	08003d95 	.word	0x08003d95
 800399c:	08003d95 	.word	0x08003d95
 80039a0:	080039cd 	.word	0x080039cd
 80039a4:	08003d95 	.word	0x08003d95
 80039a8:	08003d95 	.word	0x08003d95
 80039ac:	08003d95 	.word	0x08003d95
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	08003d95 	.word	0x08003d95
 80039b8:	08003d95 	.word	0x08003d95
 80039bc:	08003d95 	.word	0x08003d95
 80039c0:	08003bc5 	.word	0x08003bc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4bb9      	ldr	r3, [pc, #740]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x358>)
 80039c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039ca:	e1e7      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039cc:	4bb8      	ldr	r3, [pc, #736]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039d2:	e1e3      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d4:	4bb4      	ldr	r3, [pc, #720]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039e0:	4bb1      	ldr	r3, [pc, #708]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d071      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ec:	4bae      	ldr	r3, [pc, #696]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	099b      	lsrs	r3, r3, #6
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80039fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	0159      	lsls	r1, r3, #5
 8003a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a24:	0150      	lsls	r0, r2, #5
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	1a51      	subs	r1, r2, r1
 8003a2e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb63 0301 	sbc.w	r3, r3, r1
 8003a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003a44:	4649      	mov	r1, r9
 8003a46:	018b      	lsls	r3, r1, #6
 8003a48:	4641      	mov	r1, r8
 8003a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4e:	4641      	mov	r1, r8
 8003a50:	018a      	lsls	r2, r1, #6
 8003a52:	4641      	mov	r1, r8
 8003a54:	1a51      	subs	r1, r2, r1
 8003a56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a58:	4649      	mov	r1, r9
 8003a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	00cb      	lsls	r3, r1, #3
 8003a70:	4641      	mov	r1, r8
 8003a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a76:	4641      	mov	r1, r8
 8003a78:	00ca      	lsls	r2, r1, #3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4622      	mov	r2, r4
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a86:	462b      	mov	r3, r5
 8003a88:	460a      	mov	r2, r1
 8003a8a:	eb42 0303 	adc.w	r3, r2, r3
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	024b      	lsls	r3, r1, #9
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	024a      	lsls	r2, r1, #9
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ab8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003abc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ac0:	f7fc fbfe 	bl	80002c0 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ace:	e067      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad0:	4b75      	ldr	r3, [pc, #468]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003adc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003aea:	2300      	movs	r3, #0
 8003aec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003aee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003af2:	4622      	mov	r2, r4
 8003af4:	462b      	mov	r3, r5
 8003af6:	f04f 0000 	mov.w	r0, #0
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	0159      	lsls	r1, r3, #5
 8003b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b04:	0150      	lsls	r0, r2, #5
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	1a51      	subs	r1, r2, r1
 8003b0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b10:	4629      	mov	r1, r5
 8003b12:	eb63 0301 	sbc.w	r3, r3, r1
 8003b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b24:	4649      	mov	r1, r9
 8003b26:	018b      	lsls	r3, r1, #6
 8003b28:	4641      	mov	r1, r8
 8003b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b2e:	4641      	mov	r1, r8
 8003b30:	018a      	lsls	r2, r1, #6
 8003b32:	4641      	mov	r1, r8
 8003b34:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b38:	4649      	mov	r1, r9
 8003b3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b52:	4692      	mov	sl, r2
 8003b54:	469b      	mov	fp, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	eb1a 0303 	adds.w	r3, sl, r3
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	462b      	mov	r3, r5
 8003b60:	eb4b 0303 	adc.w	r3, fp, r3
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b72:	4629      	mov	r1, r5
 8003b74:	028b      	lsls	r3, r1, #10
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	028a      	lsls	r2, r1, #10
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b88:	2200      	movs	r2, #0
 8003b8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b8c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b92:	f7fc fb95 	bl	80002c0 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ba0:	4b41      	ldr	r3, [pc, #260]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bc2:	e0eb      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc4:	4b38      	ldr	r3, [pc, #224]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd0:	4b35      	ldr	r3, [pc, #212]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d06b      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bdc:	4b32      	ldr	r3, [pc, #200]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	2200      	movs	r2, #0
 8003be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003be6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003be8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bee:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bf4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	462b      	mov	r3, r5
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	0159      	lsls	r1, r3, #5
 8003c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c0a:	0150      	lsls	r0, r2, #5
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4621      	mov	r1, r4
 8003c12:	1a51      	subs	r1, r2, r1
 8003c14:	61b9      	str	r1, [r7, #24]
 8003c16:	4629      	mov	r1, r5
 8003c18:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c2a:	4659      	mov	r1, fp
 8003c2c:	018b      	lsls	r3, r1, #6
 8003c2e:	4651      	mov	r1, sl
 8003c30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c34:	4651      	mov	r1, sl
 8003c36:	018a      	lsls	r2, r1, #6
 8003c38:	4651      	mov	r1, sl
 8003c3a:	ebb2 0801 	subs.w	r8, r2, r1
 8003c3e:	4659      	mov	r1, fp
 8003c40:	eb63 0901 	sbc.w	r9, r3, r1
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c58:	4690      	mov	r8, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	eb18 0303 	adds.w	r3, r8, r3
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	462b      	mov	r3, r5
 8003c66:	eb49 0303 	adc.w	r3, r9, r3
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c78:	4629      	mov	r1, r5
 8003c7a:	024b      	lsls	r3, r1, #9
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c82:	4621      	mov	r1, r4
 8003c84:	024a      	lsls	r2, r1, #9
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c8e:	2200      	movs	r2, #0
 8003c90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c92:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c98:	f7fc fb12 	bl	80002c0 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ca6:	e065      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x420>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x458>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	099b      	lsrs	r3, r3, #6
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003cce:	4642      	mov	r2, r8
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	0159      	lsls	r1, r3, #5
 8003cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce0:	0150      	lsls	r0, r2, #5
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	1a51      	subs	r1, r2, r1
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	4649      	mov	r1, r9
 8003cee:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d00:	4659      	mov	r1, fp
 8003d02:	018b      	lsls	r3, r1, #6
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	018a      	lsls	r2, r1, #6
 8003d0e:	4651      	mov	r1, sl
 8003d10:	1a54      	subs	r4, r2, r1
 8003d12:	4659      	mov	r1, fp
 8003d14:	eb63 0501 	sbc.w	r5, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	464b      	mov	r3, r9
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d66:	f7fc faab 	bl	80002c0 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d74:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x458>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0f1b      	lsrs	r3, r3, #28
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	37b8      	adds	r7, #184	@ 0xb8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400

08003db4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e28d      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8083 	beq.w	8003eda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003dd4:	4b94      	ldr	r3, [pc, #592]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d019      	beq.n	8003e14 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003de0:	4b91      	ldr	r3, [pc, #580]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003dec:	4b8e      	ldr	r3, [pc, #568]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b88      	ldr	r3, [pc, #544]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b84      	ldr	r3, [pc, #528]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x124>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e25a      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x90>
 8003e36:	4b7c      	ldr	r3, [pc, #496]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7b      	ldr	r2, [pc, #492]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xcc>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0xb4>
 8003e4e:	4b76      	ldr	r3, [pc, #472]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a75      	ldr	r2, [pc, #468]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a72      	ldr	r2, [pc, #456]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xcc>
 8003e68:	4b6f      	ldr	r3, [pc, #444]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b6c      	ldr	r3, [pc, #432]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6b      	ldr	r2, [pc, #428]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fd94 	bl	80019b4 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd fd90 	bl	80019b4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e21f      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b61      	ldr	r3, [pc, #388]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xdc>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fd80 	bl	80019b4 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fd7c 	bl	80019b4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	@ 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e20b      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b57      	ldr	r3, [pc, #348]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x104>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d06f      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ee6:	4b50      	ldr	r3, [pc, #320]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d017      	beq.n	8003f22 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d105      	bne.n	8003f0a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003efe:	4b4a      	ldr	r3, [pc, #296]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b47      	ldr	r3, [pc, #284]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f12:	2b0c      	cmp	r3, #12
 8003f14:	d11c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f16:	4b44      	ldr	r3, [pc, #272]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d116      	bne.n	8003f50 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f22:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_RCC_OscConfig+0x186>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e1d3      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4937      	ldr	r1, [pc, #220]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4e:	e03a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f58:	4b34      	ldr	r3, [pc, #208]	@ (800402c <HAL_RCC_OscConfig+0x278>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fd fd29 	bl	80019b4 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fd fd25 	bl	80019b4 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e1b4      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	4b2b      	ldr	r3, [pc, #172]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b28      	ldr	r3, [pc, #160]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4925      	ldr	r1, [pc, #148]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
 8003f98:	e015      	b.n	8003fc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b24      	ldr	r3, [pc, #144]	@ (800402c <HAL_RCC_OscConfig+0x278>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fd08 	bl	80019b4 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fd fd04 	bl	80019b4 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e193      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d036      	beq.n	8004040 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fda:	4b15      	ldr	r3, [pc, #84]	@ (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fd fce8 	bl	80019b4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe8:	f7fd fce4 	bl	80019b4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e173      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x234>
 8004006:	e01b      	b.n	8004040 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004008:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_RCC_OscConfig+0x27c>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7fd fcd1 	bl	80019b4 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	e00e      	b.n	8004034 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004016:	f7fd fccd 	bl	80019b4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d907      	bls.n	8004034 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e15c      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
 8004028:	40023800 	.word	0x40023800
 800402c:	42470000 	.word	0x42470000
 8004030:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	4b8a      	ldr	r3, [pc, #552]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ea      	bne.n	8004016 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8097 	beq.w	800417c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b83      	ldr	r3, [pc, #524]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	4b7f      	ldr	r3, [pc, #508]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	4a7e      	ldr	r2, [pc, #504]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	@ 0x40
 800406e:	4b7c      	ldr	r3, [pc, #496]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b79      	ldr	r3, [pc, #484]	@ (8004264 <HAL_RCC_OscConfig+0x4b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d118      	bne.n	80040bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b76      	ldr	r3, [pc, #472]	@ (8004264 <HAL_RCC_OscConfig+0x4b0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a75      	ldr	r2, [pc, #468]	@ (8004264 <HAL_RCC_OscConfig+0x4b0>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fd fc8d 	bl	80019b4 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fd fc89 	bl	80019b4 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e118      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004264 <HAL_RCC_OscConfig+0x4b0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x31e>
 80040c4:	4b66      	ldr	r3, [pc, #408]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	4a65      	ldr	r2, [pc, #404]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d0:	e01c      	b.n	800410c <HAL_RCC_OscConfig+0x358>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x340>
 80040da:	4b61      	ldr	r3, [pc, #388]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a60      	ldr	r2, [pc, #384]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0x358>
 80040f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a59      	ldr	r2, [pc, #356]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004100:	4b57      	ldr	r3, [pc, #348]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	4a56      	ldr	r2, [pc, #344]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004106:	f023 0304 	bic.w	r3, r3, #4
 800410a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fd fc4e 	bl	80019b4 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd fc4a 	bl	80019b4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0d7      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	4b4b      	ldr	r3, [pc, #300]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCC_OscConfig+0x368>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fd fc38 	bl	80019b4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fd fc34 	bl	80019b4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0c1      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415e:	4b40      	ldr	r3, [pc, #256]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ee      	bne.n	8004148 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4b3b      	ldr	r3, [pc, #236]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	4a3a      	ldr	r2, [pc, #232]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80ad 	beq.w	80042e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004186:	4b36      	ldr	r3, [pc, #216]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b08      	cmp	r3, #8
 8004190:	d060      	beq.n	8004254 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d145      	bne.n	8004226 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b33      	ldr	r3, [pc, #204]	@ (8004268 <HAL_RCC_OscConfig+0x4b4>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fd fc08 	bl	80019b4 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd fc04 	bl	80019b4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e093      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	4b29      	ldr	r3, [pc, #164]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	3b01      	subs	r3, #1
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	071b      	lsls	r3, r3, #28
 80041f2:	491b      	ldr	r1, [pc, #108]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <HAL_RCC_OscConfig+0x4b4>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fd fbd9 	bl	80019b4 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004206:	f7fd fbd5 	bl	80019b4 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e064      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004218:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x452>
 8004224:	e05c      	b.n	80042e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004226:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <HAL_RCC_OscConfig+0x4b4>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fbc2 	bl	80019b4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd fbbe 	bl	80019b4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e04d      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x480>
 8004252:	e045      	b.n	80042e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e040      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
 8004260:	40023800 	.word	0x40023800
 8004264:	40007000 	.word	0x40007000
 8004268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800426c:	4b1f      	ldr	r3, [pc, #124]	@ (80042ec <HAL_RCC_OscConfig+0x538>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d030      	beq.n	80042dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d129      	bne.n	80042dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d122      	bne.n	80042dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d119      	bne.n	80042dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	3b01      	subs	r3, #1
 80042b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d10f      	bne.n	80042dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800

080042f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e041      	b.n	8004386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fd f80c 	bl	8001334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 fc0e 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_TIM_PWM_Start+0x24>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e022      	b.n	80043fa <HAL_TIM_PWM_Start+0x6a>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d109      	bne.n	80043ce <HAL_TIM_PWM_Start+0x3e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	bf14      	ite	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	2300      	moveq	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	e015      	b.n	80043fa <HAL_TIM_PWM_Start+0x6a>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d109      	bne.n	80043e8 <HAL_TIM_PWM_Start+0x58>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e008      	b.n	80043fa <HAL_TIM_PWM_Start+0x6a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e07c      	b.n	80044fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_TIM_PWM_Start+0x82>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004410:	e013      	b.n	800443a <HAL_TIM_PWM_Start+0xaa>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d104      	bne.n	8004422 <HAL_TIM_PWM_Start+0x92>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004420:	e00b      	b.n	800443a <HAL_TIM_PWM_Start+0xaa>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d104      	bne.n	8004432 <HAL_TIM_PWM_Start+0xa2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004430:	e003      	b.n	800443a <HAL_TIM_PWM_Start+0xaa>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2201      	movs	r2, #1
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fde0 	bl	8005008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2d      	ldr	r2, [pc, #180]	@ (8004504 <HAL_TIM_PWM_Start+0x174>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIM_PWM_Start+0xcc>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2c      	ldr	r2, [pc, #176]	@ (8004508 <HAL_TIM_PWM_Start+0x178>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d101      	bne.n	8004460 <HAL_TIM_PWM_Start+0xd0>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_TIM_PWM_Start+0xd2>
 8004460:	2300      	movs	r3, #0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a22      	ldr	r2, [pc, #136]	@ (8004504 <HAL_TIM_PWM_Start+0x174>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x136>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004488:	d01d      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x136>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1f      	ldr	r2, [pc, #124]	@ (800450c <HAL_TIM_PWM_Start+0x17c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x136>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1d      	ldr	r2, [pc, #116]	@ (8004510 <HAL_TIM_PWM_Start+0x180>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x136>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <HAL_TIM_PWM_Start+0x184>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x136>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a16      	ldr	r2, [pc, #88]	@ (8004508 <HAL_TIM_PWM_Start+0x178>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x136>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	@ (8004518 <HAL_TIM_PWM_Start+0x188>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x136>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a16      	ldr	r2, [pc, #88]	@ (800451c <HAL_TIM_PWM_Start+0x18c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d111      	bne.n	80044ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d010      	beq.n	80044fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	e007      	b.n	80044fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010000 	.word	0x40010000
 8004508:	40010400 	.word	0x40010400
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40014000 	.word	0x40014000
 800451c:	40001800 	.word	0x40001800

08004520 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e097      	b.n	8004664 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc fe79 	bl	8001240 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f000 faeb 	bl	8004b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	4313      	orrs	r3, r2
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045c0:	f023 030c 	bic.w	r3, r3, #12
 80045c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	4313      	orrs	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	011a      	lsls	r2, r3, #4
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	031b      	lsls	r3, r3, #12
 80045f0:	4313      	orrs	r3, r2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4313      	orrs	r3, r2
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800467c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004684:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800468c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004694:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a2:	7b7b      	ldrb	r3, [r7, #13]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e069      	b.n	8004780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046bc:	e031      	b.n	8004722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d110      	bne.n	80046e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c4:	7bbb      	ldrb	r3, [r7, #14]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d102      	bne.n	80046d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ca:	7b3b      	ldrb	r3, [r7, #12]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e055      	b.n	8004780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046e4:	e01d      	b.n	8004722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d108      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f2:	7b7b      	ldrb	r3, [r7, #13]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f8:	7b3b      	ldrb	r3, [r7, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e03e      	b.n	8004780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_TIM_Encoder_Start+0xc4>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b04      	cmp	r3, #4
 800472c:	d008      	beq.n	8004740 <HAL_TIM_Encoder_Start+0xd4>
 800472e:	e00f      	b.n	8004750 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fc65 	bl	8005008 <TIM_CCxChannelCmd>
      break;
 800473e:	e016      	b.n	800476e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2201      	movs	r2, #1
 8004746:	2104      	movs	r1, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fc5d 	bl	8005008 <TIM_CCxChannelCmd>
      break;
 800474e:	e00e      	b.n	800476e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fc55 	bl	8005008 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	2104      	movs	r1, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fc4e 	bl	8005008 <TIM_CCxChannelCmd>
      break;
 800476c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0202 	mvn.w	r2, #2
 80047bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f99e 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f990 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f9a1 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d020      	beq.n	8004838 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0204 	mvn.w	r2, #4
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f978 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f96a 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f97b 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0208 	mvn.w	r2, #8
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2204      	movs	r2, #4
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f952 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f944 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f955 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0210 	mvn.w	r2, #16
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2208      	movs	r2, #8
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f92c 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f91e 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f92f 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00c      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0201 	mvn.w	r2, #1
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8fc 	bl	8004aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00c      	beq.n	8004918 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fc24 	bl	8005160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00c      	beq.n	800493c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f900 	bl	8004b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0220 	mvn.w	r2, #32
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fbf6 	bl	800514c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e0ae      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	f200 809f 	bhi.w	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049d1 	.word	0x080049d1
 80049a0:	08004ad5 	.word	0x08004ad5
 80049a4:	08004ad5 	.word	0x08004ad5
 80049a8:	08004ad5 	.word	0x08004ad5
 80049ac:	08004a11 	.word	0x08004a11
 80049b0:	08004ad5 	.word	0x08004ad5
 80049b4:	08004ad5 	.word	0x08004ad5
 80049b8:	08004ad5 	.word	0x08004ad5
 80049bc:	08004a53 	.word	0x08004a53
 80049c0:	08004ad5 	.word	0x08004ad5
 80049c4:	08004ad5 	.word	0x08004ad5
 80049c8:	08004ad5 	.word	0x08004ad5
 80049cc:	08004a93 	.word	0x08004a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f966 	bl	8004ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0208 	orr.w	r2, r2, #8
 80049ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6999      	ldr	r1, [r3, #24]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	619a      	str	r2, [r3, #24]
      break;
 8004a0e:	e064      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f9b6 	bl	8004d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	619a      	str	r2, [r3, #24]
      break;
 8004a50:	e043      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fa0b 	bl	8004e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0208 	orr.w	r2, r2, #8
 8004a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0204 	bic.w	r2, r2, #4
 8004a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69d9      	ldr	r1, [r3, #28]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
      break;
 8004a90:	e023      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fa5f 	bl	8004f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	021a      	lsls	r2, r3, #8
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	61da      	str	r2, [r3, #28]
      break;
 8004ad2:	e002      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a46      	ldr	r2, [pc, #280]	@ (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a43      	ldr	r2, [pc, #268]	@ (8004c80 <TIM_Base_SetConfig+0x130>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a42      	ldr	r2, [pc, #264]	@ (8004c84 <TIM_Base_SetConfig+0x134>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a41      	ldr	r2, [pc, #260]	@ (8004c88 <TIM_Base_SetConfig+0x138>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a40      	ldr	r2, [pc, #256]	@ (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a35      	ldr	r2, [pc, #212]	@ (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb0:	d027      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a32      	ldr	r2, [pc, #200]	@ (8004c80 <TIM_Base_SetConfig+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d023      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a31      	ldr	r2, [pc, #196]	@ (8004c84 <TIM_Base_SetConfig+0x134>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <TIM_Base_SetConfig+0x138>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d017      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004c90 <TIM_Base_SetConfig+0x140>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <TIM_Base_SetConfig+0x144>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c98 <TIM_Base_SetConfig+0x148>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2b      	ldr	r2, [pc, #172]	@ (8004c9c <TIM_Base_SetConfig+0x14c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <TIM_Base_SetConfig+0x150>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <TIM_Base_SetConfig+0x154>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a10      	ldr	r2, [pc, #64]	@ (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0xf8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a12      	ldr	r2, [pc, #72]	@ (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800
 8004c9c:	40001800 	.word	0x40001800
 8004ca0:	40001c00 	.word	0x40001c00
 8004ca4:	40002000 	.word	0x40002000

08004ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0201 	bic.w	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 0302 	bic.w	r3, r3, #2
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a20      	ldr	r2, [pc, #128]	@ (8004d80 <TIM_OC1_SetConfig+0xd8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC1_SetConfig+0x64>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <TIM_OC1_SetConfig+0xdc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10c      	bne.n	8004d26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0308 	bic.w	r3, r3, #8
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0304 	bic.w	r3, r3, #4
 8004d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a15      	ldr	r2, [pc, #84]	@ (8004d80 <TIM_OC1_SetConfig+0xd8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_OC1_SetConfig+0x8e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a14      	ldr	r2, [pc, #80]	@ (8004d84 <TIM_OC1_SetConfig+0xdc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d111      	bne.n	8004d5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40010400 	.word	0x40010400

08004d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f023 0210 	bic.w	r2, r3, #16
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0320 	bic.w	r3, r3, #32
 8004dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <TIM_OC2_SetConfig+0xe4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_OC2_SetConfig+0x68>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <TIM_OC2_SetConfig+0xe8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10d      	bne.n	8004e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a17      	ldr	r2, [pc, #92]	@ (8004e6c <TIM_OC2_SetConfig+0xe4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC2_SetConfig+0x94>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a16      	ldr	r2, [pc, #88]	@ (8004e70 <TIM_OC2_SetConfig+0xe8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d113      	bne.n	8004e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400

08004e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a21      	ldr	r2, [pc, #132]	@ (8004f54 <TIM_OC3_SetConfig+0xe0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_OC3_SetConfig+0x66>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a20      	ldr	r2, [pc, #128]	@ (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10d      	bne.n	8004ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a16      	ldr	r2, [pc, #88]	@ (8004f54 <TIM_OC3_SetConfig+0xe0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC3_SetConfig+0x92>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a15      	ldr	r2, [pc, #84]	@ (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d113      	bne.n	8004f2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	@ (8005000 <TIM_OC4_SetConfig+0xa4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC4_SetConfig+0x68>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a11      	ldr	r2, [pc, #68]	@ (8005004 <TIM_OC4_SetConfig+0xa8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d109      	bne.n	8004fd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40010400 	.word	0x40010400

08005008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	2201      	movs	r2, #1
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	43db      	mvns	r3, r3
 800502a:	401a      	ands	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1a      	ldr	r2, [r3, #32]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	fa01 f303 	lsl.w	r3, r1, r3
 8005040:	431a      	orrs	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005068:	2302      	movs	r3, #2
 800506a:	e05a      	b.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a21      	ldr	r2, [pc, #132]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b8:	d01d      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1a      	ldr	r2, [pc, #104]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	40014000 	.word	0x40014000
 8005148:	40001800 	.word	0x40001800

0800514c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e042      	b.n	800520c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fc f92c 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	@ 0x24
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fdbd 	bl	8005d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	@ 0x28
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b20      	cmp	r3, #32
 8005232:	d175      	bne.n	8005320 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_UART_Transmit+0x2c>
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e06e      	b.n	8005322 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2221      	movs	r2, #33	@ 0x21
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005252:	f7fc fbaf 	bl	80019b4 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	88fa      	ldrh	r2, [r7, #6]
 8005262:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526c:	d108      	bne.n	8005280 <HAL_UART_Transmit+0x6c>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	e003      	b.n	8005288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005288:	e02e      	b.n	80052e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	2180      	movs	r1, #128	@ 0x80
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fb1f 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e03a      	b.n	8005322 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	3302      	adds	r3, #2
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e007      	b.n	80052da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	3301      	adds	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1cb      	bne.n	800528a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2200      	movs	r2, #0
 80052fa:	2140      	movs	r1, #64	@ 0x40
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 faeb 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e006      	b.n	8005322 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	e000      	b.n	8005322 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	4613      	mov	r3, r2
 8005336:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	d112      	bne.n	800536a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_UART_Receive_IT+0x26>
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e00b      	b.n	800536c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	461a      	mov	r2, r3
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fb12 	bl	800598a <UART_Start_Receive_IT>
 8005366:	4603      	mov	r3, r0
 8005368:	e000      	b.n	800536c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800536a:	2302      	movs	r3, #2
  }
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b0ba      	sub	sp, #232	@ 0xe8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800539a:	2300      	movs	r3, #0
 800539c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <HAL_UART_IRQHandler+0x66>
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fbf2 	bl	8005bbc <UART_Receive_IT>
      return;
 80053d8:	e25b      	b.n	8005892 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 80de 	beq.w	80055a0 <HAL_UART_IRQHandler+0x22c>
 80053e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80d1 	beq.w	80055a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_UART_IRQHandler+0xae>
 800540a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	f043 0201 	orr.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_UART_IRQHandler+0xd2>
 800542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f043 0202 	orr.w	r2, r3, #2
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HAL_UART_IRQHandler+0xf6>
 8005452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800546a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d011      	beq.n	800549a <HAL_UART_IRQHandler+0x126>
 8005476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f043 0208 	orr.w	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 81f2 	beq.w	8005888 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_UART_IRQHandler+0x14e>
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb7d 	bl	8005bbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b40      	cmp	r3, #64	@ 0x40
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <HAL_UART_IRQHandler+0x17a>
 80054e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d04f      	beq.n	800558e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa85 	bl	80059fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fe:	2b40      	cmp	r3, #64	@ 0x40
 8005500:	d141      	bne.n	8005586 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3314      	adds	r3, #20
 8005508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800551c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3314      	adds	r3, #20
 800552a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800552e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800553a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1d9      	bne.n	8005502 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d013      	beq.n	800557e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	4a7e      	ldr	r2, [pc, #504]	@ (8005754 <HAL_UART_IRQHandler+0x3e0>)
 800555c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	4618      	mov	r0, r3
 8005564:	f7fc fc86 	bl	8001e74 <HAL_DMA_Abort_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d016      	beq.n	800559c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	e00e      	b.n	800559c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f994 	bl	80058ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00a      	b.n	800559c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f990 	bl	80058ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e006      	b.n	800559c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f98c 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800559a:	e175      	b.n	8005888 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	bf00      	nop
    return;
 800559e:	e173      	b.n	8005888 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	f040 814f 	bne.w	8005848 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8148 	beq.w	8005848 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8141 	beq.w	8005848 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055c6:	2300      	movs	r3, #0
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e6:	2b40      	cmp	r3, #64	@ 0x40
 80055e8:	f040 80b6 	bne.w	8005758 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8145 	beq.w	800588c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800560a:	429a      	cmp	r2, r3
 800560c:	f080 813e 	bcs.w	800588c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005616:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005622:	f000 8088 	beq.w	8005736 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800563c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	330c      	adds	r3, #12
 800564e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005652:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800565e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800566a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1d9      	bne.n	8005626 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3314      	adds	r3, #20
 8005692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005696:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800569a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800569e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e1      	bne.n	8005672 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3314      	adds	r3, #20
 80056b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e3      	bne.n	80056ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005706:	f023 0310 	bic.w	r3, r3, #16
 800570a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005718:	65ba      	str	r2, [r7, #88]	@ 0x58
 800571a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800571e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e3      	bne.n	80056f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	4618      	mov	r0, r3
 8005732:	f7fc fb2f 	bl	8001d94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005744:	b29b      	uxth	r3, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	b29b      	uxth	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f8b7 	bl	80058c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005752:	e09b      	b.n	800588c <HAL_UART_IRQHandler+0x518>
 8005754:	08005ac5 	.word	0x08005ac5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005760:	b29b      	uxth	r3, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 808e 	beq.w	8005890 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8089 	beq.w	8005890 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005794:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80057a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e3      	bne.n	800577e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	623b      	str	r3, [r7, #32]
   return(result);
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3314      	adds	r3, #20
 80057d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057da:	633a      	str	r2, [r7, #48]	@ 0x30
 80057dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e3      	bne.n	80057b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	60fb      	str	r3, [r7, #12]
   return(result);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0310 	bic.w	r3, r3, #16
 8005812:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005820:	61fa      	str	r2, [r7, #28]
 8005822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	617b      	str	r3, [r7, #20]
   return(result);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e3      	bne.n	80057fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800583a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f83d 	bl	80058c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005846:	e023      	b.n	8005890 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_UART_IRQHandler+0x4f4>
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f943 	bl	8005aec <UART_Transmit_IT>
    return;
 8005866:	e014      	b.n	8005892 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <HAL_UART_IRQHandler+0x51e>
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f983 	bl	8005b8c <UART_EndTransmit_IT>
    return;
 8005886:	e004      	b.n	8005892 <HAL_UART_IRQHandler+0x51e>
    return;
 8005888:	bf00      	nop
 800588a:	e002      	b.n	8005892 <HAL_UART_IRQHandler+0x51e>
      return;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <HAL_UART_IRQHandler+0x51e>
      return;
 8005890:	bf00      	nop
  }
}
 8005892:	37e8      	adds	r7, #232	@ 0xe8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e8:	e03b      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d037      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f2:	f7fc f85f 	bl	80019b4 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <UART_WaitOnFlagUntilTimeout+0x30>
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e03a      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d023      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b80      	cmp	r3, #128	@ 0x80
 800591e:	d020      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b40      	cmp	r3, #64	@ 0x40
 8005924:	d01d      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b08      	cmp	r3, #8
 8005932:	d116      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f857 	bl	80059fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2208      	movs	r2, #8
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e00f      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	429a      	cmp	r2, r3
 800597e:	d0b4      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	4613      	mov	r3, r2
 8005996:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2222      	movs	r2, #34	@ 0x22
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d007      	beq.n	80059d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0220 	orr.w	r2, r2, #32
 80059ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b095      	sub	sp, #84	@ 0x54
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a26:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e5      	bne.n	8005a06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3314      	adds	r3, #20
 8005a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e5      	bne.n	8005a3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d119      	bne.n	8005aaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 0310 	bic.w	r3, r3, #16
 8005a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a96:	61ba      	str	r2, [r7, #24]
 8005a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ab8:	bf00      	nop
 8005aba:	3754      	adds	r7, #84	@ 0x54
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fee4 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b21      	cmp	r3, #33	@ 0x21
 8005afe:	d13e      	bne.n	8005b7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b08:	d114      	bne.n	8005b34 <UART_Transmit_IT+0x48>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d110      	bne.n	8005b34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]
 8005b32:	e008      	b.n	8005b46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6211      	str	r1, [r2, #32]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4619      	mov	r1, r3
 8005b54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10f      	bne.n	8005b7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fe73 	bl	8005898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08c      	sub	sp, #48	@ 0x30
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b22      	cmp	r3, #34	@ 0x22
 8005bce:	f040 80ae 	bne.w	8005d2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bda:	d117      	bne.n	8005c0c <UART_Receive_IT+0x50>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d113      	bne.n	8005c0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c0a:	e026      	b.n	8005c5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1e:	d007      	beq.n	8005c30 <UART_Receive_IT+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <UART_Receive_IT+0x82>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e008      	b.n	8005c50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4619      	mov	r1, r3
 8005c68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d15d      	bne.n	8005d2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0220 	bic.w	r2, r2, #32
 8005c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d135      	bne.n	8005d20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f023 0310 	bic.w	r3, r3, #16
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cda:	623a      	str	r2, [r7, #32]
 8005cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	69f9      	ldr	r1, [r7, #28]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d10a      	bne.n	8005d12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fdd1 	bl	80058c0 <HAL_UARTEx_RxEventCallback>
 8005d1e:	e002      	b.n	8005d26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fa fc6d 	bl	8000600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e002      	b.n	8005d30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
  }
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	@ 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d3c:	b0c0      	sub	sp, #256	@ 0x100
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	68d9      	ldr	r1, [r3, #12]
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	ea40 0301 	orr.w	r3, r0, r1
 8005d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d90:	f021 010c 	bic.w	r1, r1, #12
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	6999      	ldr	r1, [r3, #24]
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	ea40 0301 	orr.w	r3, r0, r1
 8005dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d005      	beq.n	8005dd8 <UART_SetConfig+0xa0>
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8006008 <UART_SetConfig+0x2d0>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d104      	bne.n	8005de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd8:	f7fd fda8 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8005ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005de0:	e003      	b.n	8005dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005de2:	f7fd fd8f 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df4:	f040 810c 	bne.w	8006010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	1891      	adds	r1, r2, r2
 8005e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e12:	415b      	adcs	r3, r3
 8005e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	eb12 0801 	adds.w	r8, r2, r1
 8005e20:	4629      	mov	r1, r5
 8005e22:	eb43 0901 	adc.w	r9, r3, r1
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3a:	4690      	mov	r8, r2
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	4623      	mov	r3, r4
 8005e40:	eb18 0303 	adds.w	r3, r8, r3
 8005e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e48:	462b      	mov	r3, r5
 8005e4a:	eb49 0303 	adc.w	r3, r9, r3
 8005e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e66:	460b      	mov	r3, r1
 8005e68:	18db      	adds	r3, r3, r3
 8005e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	eb42 0303 	adc.w	r3, r2, r3
 8005e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e7c:	f7fa fa20 	bl	80002c0 <__aeabi_uldivmod>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4b61      	ldr	r3, [pc, #388]	@ (800600c <UART_SetConfig+0x2d4>)
 8005e86:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	011c      	lsls	r4, r3, #4
 8005e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	1891      	adds	r1, r2, r2
 8005ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ea8:	415b      	adcs	r3, r3
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed0:	4692      	mov	sl, r2
 8005ed2:	469b      	mov	fp, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ede:	464b      	mov	r3, r9
 8005ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005efc:	460b      	mov	r3, r1
 8005efe:	18db      	adds	r3, r3, r3
 8005f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f02:	4613      	mov	r3, r2
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f12:	f7fa f9d5 	bl	80002c0 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800600c <UART_SetConfig+0x2d4>)
 8005f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2264      	movs	r2, #100	@ 0x64
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	1acb      	subs	r3, r1, r3
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f32:	4b36      	ldr	r3, [pc, #216]	@ (800600c <UART_SetConfig+0x2d4>)
 8005f34:	fba3 2302 	umull	r2, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f40:	441c      	add	r4, r3
 8005f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f54:	4642      	mov	r2, r8
 8005f56:	464b      	mov	r3, r9
 8005f58:	1891      	adds	r1, r2, r2
 8005f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f5c:	415b      	adcs	r3, r3
 8005f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f64:	4641      	mov	r1, r8
 8005f66:	1851      	adds	r1, r2, r1
 8005f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	414b      	adcs	r3, r1
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	00cb      	lsls	r3, r1, #3
 8005f80:	4651      	mov	r1, sl
 8005f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f86:	4651      	mov	r1, sl
 8005f88:	00ca      	lsls	r2, r1, #3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4642      	mov	r2, r8
 8005f92:	189b      	adds	r3, r3, r2
 8005f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f98:	464b      	mov	r3, r9
 8005f9a:	460a      	mov	r2, r1
 8005f9c:	eb42 0303 	adc.w	r3, r2, r3
 8005fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fb8:	460b      	mov	r3, r1
 8005fba:	18db      	adds	r3, r3, r3
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fce:	f7fa f977 	bl	80002c0 <__aeabi_uldivmod>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <UART_SetConfig+0x2d4>)
 8005fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	2164      	movs	r1, #100	@ 0x64
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	3332      	adds	r3, #50	@ 0x32
 8005fea:	4a08      	ldr	r2, [pc, #32]	@ (800600c <UART_SetConfig+0x2d4>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f003 0207 	and.w	r2, r3, #7
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4422      	add	r2, r4
 8005ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006000:	e106      	b.n	8006210 <UART_SetConfig+0x4d8>
 8006002:	bf00      	nop
 8006004:	40011000 	.word	0x40011000
 8006008:	40011400 	.word	0x40011400
 800600c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006014:	2200      	movs	r2, #0
 8006016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800601a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800601e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006022:	4642      	mov	r2, r8
 8006024:	464b      	mov	r3, r9
 8006026:	1891      	adds	r1, r2, r2
 8006028:	6239      	str	r1, [r7, #32]
 800602a:	415b      	adcs	r3, r3
 800602c:	627b      	str	r3, [r7, #36]	@ 0x24
 800602e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006032:	4641      	mov	r1, r8
 8006034:	1854      	adds	r4, r2, r1
 8006036:	4649      	mov	r1, r9
 8006038:	eb43 0501 	adc.w	r5, r3, r1
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	00eb      	lsls	r3, r5, #3
 8006046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800604a:	00e2      	lsls	r2, r4, #3
 800604c:	4614      	mov	r4, r2
 800604e:	461d      	mov	r5, r3
 8006050:	4643      	mov	r3, r8
 8006052:	18e3      	adds	r3, r4, r3
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006058:	464b      	mov	r3, r9
 800605a:	eb45 0303 	adc.w	r3, r5, r3
 800605e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800606e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800607e:	4629      	mov	r1, r5
 8006080:	008b      	lsls	r3, r1, #2
 8006082:	4621      	mov	r1, r4
 8006084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006088:	4621      	mov	r1, r4
 800608a:	008a      	lsls	r2, r1, #2
 800608c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006090:	f7fa f916 	bl	80002c0 <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4b60      	ldr	r3, [pc, #384]	@ (800621c <UART_SetConfig+0x4e4>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	011c      	lsls	r4, r3, #4
 80060a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	1891      	adds	r1, r2, r2
 80060ba:	61b9      	str	r1, [r7, #24]
 80060bc:	415b      	adcs	r3, r3
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c4:	4641      	mov	r1, r8
 80060c6:	1851      	adds	r1, r2, r1
 80060c8:	6139      	str	r1, [r7, #16]
 80060ca:	4649      	mov	r1, r9
 80060cc:	414b      	adcs	r3, r1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060dc:	4659      	mov	r1, fp
 80060de:	00cb      	lsls	r3, r1, #3
 80060e0:	4651      	mov	r1, sl
 80060e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e6:	4651      	mov	r1, sl
 80060e8:	00ca      	lsls	r2, r1, #3
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	4642      	mov	r2, r8
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060f8:	464b      	mov	r3, r9
 80060fa:	460a      	mov	r2, r1
 80060fc:	eb42 0303 	adc.w	r3, r2, r3
 8006100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800610e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800611c:	4649      	mov	r1, r9
 800611e:	008b      	lsls	r3, r1, #2
 8006120:	4641      	mov	r1, r8
 8006122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006126:	4641      	mov	r1, r8
 8006128:	008a      	lsls	r2, r1, #2
 800612a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800612e:	f7fa f8c7 	bl	80002c0 <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4611      	mov	r1, r2
 8006138:	4b38      	ldr	r3, [pc, #224]	@ (800621c <UART_SetConfig+0x4e4>)
 800613a:	fba3 2301 	umull	r2, r3, r3, r1
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	2264      	movs	r2, #100	@ 0x64
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	1acb      	subs	r3, r1, r3
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	3332      	adds	r3, #50	@ 0x32
 800614c:	4a33      	ldr	r2, [pc, #204]	@ (800621c <UART_SetConfig+0x4e4>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006158:	441c      	add	r4, r3
 800615a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615e:	2200      	movs	r2, #0
 8006160:	673b      	str	r3, [r7, #112]	@ 0x70
 8006162:	677a      	str	r2, [r7, #116]	@ 0x74
 8006164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	1891      	adds	r1, r2, r2
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	415b      	adcs	r3, r3
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006178:	4641      	mov	r1, r8
 800617a:	1851      	adds	r1, r2, r1
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	4649      	mov	r1, r9
 8006180:	414b      	adcs	r3, r1
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006190:	4659      	mov	r1, fp
 8006192:	00cb      	lsls	r3, r1, #3
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619a:	4651      	mov	r1, sl
 800619c:	00ca      	lsls	r2, r1, #3
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	4642      	mov	r2, r8
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061aa:	464b      	mov	r3, r9
 80061ac:	460a      	mov	r2, r1
 80061ae:	eb42 0303 	adc.w	r3, r2, r3
 80061b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80061be:	667a      	str	r2, [r7, #100]	@ 0x64
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061cc:	4649      	mov	r1, r9
 80061ce:	008b      	lsls	r3, r1, #2
 80061d0:	4641      	mov	r1, r8
 80061d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d6:	4641      	mov	r1, r8
 80061d8:	008a      	lsls	r2, r1, #2
 80061da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061de:	f7fa f86f 	bl	80002c0 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <UART_SetConfig+0x4e4>)
 80061e8:	fba3 1302 	umull	r1, r3, r3, r2
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	2164      	movs	r1, #100	@ 0x64
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	3332      	adds	r3, #50	@ 0x32
 80061fa:	4a08      	ldr	r2, [pc, #32]	@ (800621c <UART_SetConfig+0x4e4>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f003 020f 	and.w	r2, r3, #15
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4422      	add	r2, r4
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006216:	46bd      	mov	sp, r7
 8006218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621c:	51eb851f 	.word	0x51eb851f

08006220 <__assert_func>:
 8006220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006222:	4614      	mov	r4, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4b09      	ldr	r3, [pc, #36]	@ (800624c <__assert_func+0x2c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4605      	mov	r5, r0
 800622c:	68d8      	ldr	r0, [r3, #12]
 800622e:	b954      	cbnz	r4, 8006246 <__assert_func+0x26>
 8006230:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <__assert_func+0x30>)
 8006232:	461c      	mov	r4, r3
 8006234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006238:	9100      	str	r1, [sp, #0]
 800623a:	462b      	mov	r3, r5
 800623c:	4905      	ldr	r1, [pc, #20]	@ (8006254 <__assert_func+0x34>)
 800623e:	f000 f8b1 	bl	80063a4 <fiprintf>
 8006242:	f000 f9ac 	bl	800659e <abort>
 8006246:	4b04      	ldr	r3, [pc, #16]	@ (8006258 <__assert_func+0x38>)
 8006248:	e7f4      	b.n	8006234 <__assert_func+0x14>
 800624a:	bf00      	nop
 800624c:	20000020 	.word	0x20000020
 8006250:	08007307 	.word	0x08007307
 8006254:	080072d9 	.word	0x080072d9
 8006258:	080072cc 	.word	0x080072cc

0800625c <std>:
 800625c:	2300      	movs	r3, #0
 800625e:	b510      	push	{r4, lr}
 8006260:	4604      	mov	r4, r0
 8006262:	e9c0 3300 	strd	r3, r3, [r0]
 8006266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800626a:	6083      	str	r3, [r0, #8]
 800626c:	8181      	strh	r1, [r0, #12]
 800626e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006270:	81c2      	strh	r2, [r0, #14]
 8006272:	6183      	str	r3, [r0, #24]
 8006274:	4619      	mov	r1, r3
 8006276:	2208      	movs	r2, #8
 8006278:	305c      	adds	r0, #92	@ 0x5c
 800627a:	f000 f906 	bl	800648a <memset>
 800627e:	4b0d      	ldr	r3, [pc, #52]	@ (80062b4 <std+0x58>)
 8006280:	6263      	str	r3, [r4, #36]	@ 0x24
 8006282:	4b0d      	ldr	r3, [pc, #52]	@ (80062b8 <std+0x5c>)
 8006284:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006286:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <std+0x60>)
 8006288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <std+0x64>)
 800628c:	6323      	str	r3, [r4, #48]	@ 0x30
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <std+0x68>)
 8006290:	6224      	str	r4, [r4, #32]
 8006292:	429c      	cmp	r4, r3
 8006294:	d006      	beq.n	80062a4 <std+0x48>
 8006296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800629a:	4294      	cmp	r4, r2
 800629c:	d002      	beq.n	80062a4 <std+0x48>
 800629e:	33d0      	adds	r3, #208	@ 0xd0
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d105      	bne.n	80062b0 <std+0x54>
 80062a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ac:	f000 b966 	b.w	800657c <__retarget_lock_init_recursive>
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	bf00      	nop
 80062b4:	08006405 	.word	0x08006405
 80062b8:	08006427 	.word	0x08006427
 80062bc:	0800645f 	.word	0x0800645f
 80062c0:	08006483 	.word	0x08006483
 80062c4:	2000032c 	.word	0x2000032c

080062c8 <stdio_exit_handler>:
 80062c8:	4a02      	ldr	r2, [pc, #8]	@ (80062d4 <stdio_exit_handler+0xc>)
 80062ca:	4903      	ldr	r1, [pc, #12]	@ (80062d8 <stdio_exit_handler+0x10>)
 80062cc:	4803      	ldr	r0, [pc, #12]	@ (80062dc <stdio_exit_handler+0x14>)
 80062ce:	f000 b87b 	b.w	80063c8 <_fwalk_sglue>
 80062d2:	bf00      	nop
 80062d4:	20000014 	.word	0x20000014
 80062d8:	08006e45 	.word	0x08006e45
 80062dc:	20000024 	.word	0x20000024

080062e0 <cleanup_stdio>:
 80062e0:	6841      	ldr	r1, [r0, #4]
 80062e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006314 <cleanup_stdio+0x34>)
 80062e4:	4299      	cmp	r1, r3
 80062e6:	b510      	push	{r4, lr}
 80062e8:	4604      	mov	r4, r0
 80062ea:	d001      	beq.n	80062f0 <cleanup_stdio+0x10>
 80062ec:	f000 fdaa 	bl	8006e44 <_fflush_r>
 80062f0:	68a1      	ldr	r1, [r4, #8]
 80062f2:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <cleanup_stdio+0x38>)
 80062f4:	4299      	cmp	r1, r3
 80062f6:	d002      	beq.n	80062fe <cleanup_stdio+0x1e>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 fda3 	bl	8006e44 <_fflush_r>
 80062fe:	68e1      	ldr	r1, [r4, #12]
 8006300:	4b06      	ldr	r3, [pc, #24]	@ (800631c <cleanup_stdio+0x3c>)
 8006302:	4299      	cmp	r1, r3
 8006304:	d004      	beq.n	8006310 <cleanup_stdio+0x30>
 8006306:	4620      	mov	r0, r4
 8006308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800630c:	f000 bd9a 	b.w	8006e44 <_fflush_r>
 8006310:	bd10      	pop	{r4, pc}
 8006312:	bf00      	nop
 8006314:	2000032c 	.word	0x2000032c
 8006318:	20000394 	.word	0x20000394
 800631c:	200003fc 	.word	0x200003fc

08006320 <global_stdio_init.part.0>:
 8006320:	b510      	push	{r4, lr}
 8006322:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <global_stdio_init.part.0+0x30>)
 8006324:	4c0b      	ldr	r4, [pc, #44]	@ (8006354 <global_stdio_init.part.0+0x34>)
 8006326:	4a0c      	ldr	r2, [pc, #48]	@ (8006358 <global_stdio_init.part.0+0x38>)
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	4620      	mov	r0, r4
 800632c:	2200      	movs	r2, #0
 800632e:	2104      	movs	r1, #4
 8006330:	f7ff ff94 	bl	800625c <std>
 8006334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006338:	2201      	movs	r2, #1
 800633a:	2109      	movs	r1, #9
 800633c:	f7ff ff8e 	bl	800625c <std>
 8006340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006344:	2202      	movs	r2, #2
 8006346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800634a:	2112      	movs	r1, #18
 800634c:	f7ff bf86 	b.w	800625c <std>
 8006350:	20000464 	.word	0x20000464
 8006354:	2000032c 	.word	0x2000032c
 8006358:	080062c9 	.word	0x080062c9

0800635c <__sfp_lock_acquire>:
 800635c:	4801      	ldr	r0, [pc, #4]	@ (8006364 <__sfp_lock_acquire+0x8>)
 800635e:	f000 b90e 	b.w	800657e <__retarget_lock_acquire_recursive>
 8006362:	bf00      	nop
 8006364:	2000046d 	.word	0x2000046d

08006368 <__sfp_lock_release>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__sfp_lock_release+0x8>)
 800636a:	f000 b909 	b.w	8006580 <__retarget_lock_release_recursive>
 800636e:	bf00      	nop
 8006370:	2000046d 	.word	0x2000046d

08006374 <__sinit>:
 8006374:	b510      	push	{r4, lr}
 8006376:	4604      	mov	r4, r0
 8006378:	f7ff fff0 	bl	800635c <__sfp_lock_acquire>
 800637c:	6a23      	ldr	r3, [r4, #32]
 800637e:	b11b      	cbz	r3, 8006388 <__sinit+0x14>
 8006380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006384:	f7ff bff0 	b.w	8006368 <__sfp_lock_release>
 8006388:	4b04      	ldr	r3, [pc, #16]	@ (800639c <__sinit+0x28>)
 800638a:	6223      	str	r3, [r4, #32]
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <__sinit+0x2c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f5      	bne.n	8006380 <__sinit+0xc>
 8006394:	f7ff ffc4 	bl	8006320 <global_stdio_init.part.0>
 8006398:	e7f2      	b.n	8006380 <__sinit+0xc>
 800639a:	bf00      	nop
 800639c:	080062e1 	.word	0x080062e1
 80063a0:	20000464 	.word	0x20000464

080063a4 <fiprintf>:
 80063a4:	b40e      	push	{r1, r2, r3}
 80063a6:	b503      	push	{r0, r1, lr}
 80063a8:	4601      	mov	r1, r0
 80063aa:	ab03      	add	r3, sp, #12
 80063ac:	4805      	ldr	r0, [pc, #20]	@ (80063c4 <fiprintf+0x20>)
 80063ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	f000 fa1b 	bl	80067f0 <_vfiprintf_r>
 80063ba:	b002      	add	sp, #8
 80063bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c0:	b003      	add	sp, #12
 80063c2:	4770      	bx	lr
 80063c4:	20000020 	.word	0x20000020

080063c8 <_fwalk_sglue>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	4607      	mov	r7, r0
 80063ce:	4688      	mov	r8, r1
 80063d0:	4614      	mov	r4, r2
 80063d2:	2600      	movs	r6, #0
 80063d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063d8:	f1b9 0901 	subs.w	r9, r9, #1
 80063dc:	d505      	bpl.n	80063ea <_fwalk_sglue+0x22>
 80063de:	6824      	ldr	r4, [r4, #0]
 80063e0:	2c00      	cmp	r4, #0
 80063e2:	d1f7      	bne.n	80063d4 <_fwalk_sglue+0xc>
 80063e4:	4630      	mov	r0, r6
 80063e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d907      	bls.n	8006400 <_fwalk_sglue+0x38>
 80063f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063f4:	3301      	adds	r3, #1
 80063f6:	d003      	beq.n	8006400 <_fwalk_sglue+0x38>
 80063f8:	4629      	mov	r1, r5
 80063fa:	4638      	mov	r0, r7
 80063fc:	47c0      	blx	r8
 80063fe:	4306      	orrs	r6, r0
 8006400:	3568      	adds	r5, #104	@ 0x68
 8006402:	e7e9      	b.n	80063d8 <_fwalk_sglue+0x10>

08006404 <__sread>:
 8006404:	b510      	push	{r4, lr}
 8006406:	460c      	mov	r4, r1
 8006408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640c:	f000 f868 	bl	80064e0 <_read_r>
 8006410:	2800      	cmp	r0, #0
 8006412:	bfab      	itete	ge
 8006414:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006416:	89a3      	ldrhlt	r3, [r4, #12]
 8006418:	181b      	addge	r3, r3, r0
 800641a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800641e:	bfac      	ite	ge
 8006420:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006422:	81a3      	strhlt	r3, [r4, #12]
 8006424:	bd10      	pop	{r4, pc}

08006426 <__swrite>:
 8006426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642a:	461f      	mov	r7, r3
 800642c:	898b      	ldrh	r3, [r1, #12]
 800642e:	05db      	lsls	r3, r3, #23
 8006430:	4605      	mov	r5, r0
 8006432:	460c      	mov	r4, r1
 8006434:	4616      	mov	r6, r2
 8006436:	d505      	bpl.n	8006444 <__swrite+0x1e>
 8006438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643c:	2302      	movs	r3, #2
 800643e:	2200      	movs	r2, #0
 8006440:	f000 f83c 	bl	80064bc <_lseek_r>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800644a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	4632      	mov	r2, r6
 8006452:	463b      	mov	r3, r7
 8006454:	4628      	mov	r0, r5
 8006456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800645a:	f000 b853 	b.w	8006504 <_write_r>

0800645e <__sseek>:
 800645e:	b510      	push	{r4, lr}
 8006460:	460c      	mov	r4, r1
 8006462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006466:	f000 f829 	bl	80064bc <_lseek_r>
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	bf15      	itete	ne
 8006470:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006472:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006476:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800647a:	81a3      	strheq	r3, [r4, #12]
 800647c:	bf18      	it	ne
 800647e:	81a3      	strhne	r3, [r4, #12]
 8006480:	bd10      	pop	{r4, pc}

08006482 <__sclose>:
 8006482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006486:	f000 b809 	b.w	800649c <_close_r>

0800648a <memset>:
 800648a:	4402      	add	r2, r0
 800648c:	4603      	mov	r3, r0
 800648e:	4293      	cmp	r3, r2
 8006490:	d100      	bne.n	8006494 <memset+0xa>
 8006492:	4770      	bx	lr
 8006494:	f803 1b01 	strb.w	r1, [r3], #1
 8006498:	e7f9      	b.n	800648e <memset+0x4>
	...

0800649c <_close_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d06      	ldr	r5, [pc, #24]	@ (80064b8 <_close_r+0x1c>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	f7fb f93e 	bl	8001728 <_close>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_close_r+0x1a>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_close_r+0x1a>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20000468 	.word	0x20000468

080064bc <_lseek_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d07      	ldr	r5, [pc, #28]	@ (80064dc <_lseek_r+0x20>)
 80064c0:	4604      	mov	r4, r0
 80064c2:	4608      	mov	r0, r1
 80064c4:	4611      	mov	r1, r2
 80064c6:	2200      	movs	r2, #0
 80064c8:	602a      	str	r2, [r5, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f7fb f953 	bl	8001776 <_lseek>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d102      	bne.n	80064da <_lseek_r+0x1e>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	b103      	cbz	r3, 80064da <_lseek_r+0x1e>
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	20000468 	.word	0x20000468

080064e0 <_read_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d07      	ldr	r5, [pc, #28]	@ (8006500 <_read_r+0x20>)
 80064e4:	4604      	mov	r4, r0
 80064e6:	4608      	mov	r0, r1
 80064e8:	4611      	mov	r1, r2
 80064ea:	2200      	movs	r2, #0
 80064ec:	602a      	str	r2, [r5, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f7fb f8e1 	bl	80016b6 <_read>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_read_r+0x1e>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_read_r+0x1e>
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	20000468 	.word	0x20000468

08006504 <_write_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4d07      	ldr	r5, [pc, #28]	@ (8006524 <_write_r+0x20>)
 8006508:	4604      	mov	r4, r0
 800650a:	4608      	mov	r0, r1
 800650c:	4611      	mov	r1, r2
 800650e:	2200      	movs	r2, #0
 8006510:	602a      	str	r2, [r5, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	f7fb f8ec 	bl	80016f0 <_write>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_write_r+0x1e>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_write_r+0x1e>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	20000468 	.word	0x20000468

08006528 <__errno>:
 8006528:	4b01      	ldr	r3, [pc, #4]	@ (8006530 <__errno+0x8>)
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000020 	.word	0x20000020

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4d0d      	ldr	r5, [pc, #52]	@ (800656c <__libc_init_array+0x38>)
 8006538:	4c0d      	ldr	r4, [pc, #52]	@ (8006570 <__libc_init_array+0x3c>)
 800653a:	1b64      	subs	r4, r4, r5
 800653c:	10a4      	asrs	r4, r4, #2
 800653e:	2600      	movs	r6, #0
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	4d0b      	ldr	r5, [pc, #44]	@ (8006574 <__libc_init_array+0x40>)
 8006546:	4c0c      	ldr	r4, [pc, #48]	@ (8006578 <__libc_init_array+0x44>)
 8006548:	f000 fe34 	bl	80071b4 <_init>
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	2600      	movs	r6, #0
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	f855 3b04 	ldr.w	r3, [r5], #4
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	f855 3b04 	ldr.w	r3, [r5], #4
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	08007344 	.word	0x08007344
 8006570:	08007344 	.word	0x08007344
 8006574:	08007344 	.word	0x08007344
 8006578:	08007348 	.word	0x08007348

0800657c <__retarget_lock_init_recursive>:
 800657c:	4770      	bx	lr

0800657e <__retarget_lock_acquire_recursive>:
 800657e:	4770      	bx	lr

08006580 <__retarget_lock_release_recursive>:
 8006580:	4770      	bx	lr

08006582 <memcpy>:
 8006582:	440a      	add	r2, r1
 8006584:	4291      	cmp	r1, r2
 8006586:	f100 33ff 	add.w	r3, r0, #4294967295
 800658a:	d100      	bne.n	800658e <memcpy+0xc>
 800658c:	4770      	bx	lr
 800658e:	b510      	push	{r4, lr}
 8006590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006598:	4291      	cmp	r1, r2
 800659a:	d1f9      	bne.n	8006590 <memcpy+0xe>
 800659c:	bd10      	pop	{r4, pc}

0800659e <abort>:
 800659e:	b508      	push	{r3, lr}
 80065a0:	2006      	movs	r0, #6
 80065a2:	f000 fd33 	bl	800700c <raise>
 80065a6:	2001      	movs	r0, #1
 80065a8:	f7fb f87a 	bl	80016a0 <_exit>

080065ac <_free_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4605      	mov	r5, r0
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d041      	beq.n	8006638 <_free_r+0x8c>
 80065b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b8:	1f0c      	subs	r4, r1, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bfb8      	it	lt
 80065be:	18e4      	addlt	r4, r4, r3
 80065c0:	f000 f8e0 	bl	8006784 <__malloc_lock>
 80065c4:	4a1d      	ldr	r2, [pc, #116]	@ (800663c <_free_r+0x90>)
 80065c6:	6813      	ldr	r3, [r2, #0]
 80065c8:	b933      	cbnz	r3, 80065d8 <_free_r+0x2c>
 80065ca:	6063      	str	r3, [r4, #4]
 80065cc:	6014      	str	r4, [r2, #0]
 80065ce:	4628      	mov	r0, r5
 80065d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065d4:	f000 b8dc 	b.w	8006790 <__malloc_unlock>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d908      	bls.n	80065ee <_free_r+0x42>
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	1821      	adds	r1, r4, r0
 80065e0:	428b      	cmp	r3, r1
 80065e2:	bf01      	itttt	eq
 80065e4:	6819      	ldreq	r1, [r3, #0]
 80065e6:	685b      	ldreq	r3, [r3, #4]
 80065e8:	1809      	addeq	r1, r1, r0
 80065ea:	6021      	streq	r1, [r4, #0]
 80065ec:	e7ed      	b.n	80065ca <_free_r+0x1e>
 80065ee:	461a      	mov	r2, r3
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	b10b      	cbz	r3, 80065f8 <_free_r+0x4c>
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	d9fa      	bls.n	80065ee <_free_r+0x42>
 80065f8:	6811      	ldr	r1, [r2, #0]
 80065fa:	1850      	adds	r0, r2, r1
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d10b      	bne.n	8006618 <_free_r+0x6c>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	4401      	add	r1, r0
 8006604:	1850      	adds	r0, r2, r1
 8006606:	4283      	cmp	r3, r0
 8006608:	6011      	str	r1, [r2, #0]
 800660a:	d1e0      	bne.n	80065ce <_free_r+0x22>
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	6053      	str	r3, [r2, #4]
 8006612:	4408      	add	r0, r1
 8006614:	6010      	str	r0, [r2, #0]
 8006616:	e7da      	b.n	80065ce <_free_r+0x22>
 8006618:	d902      	bls.n	8006620 <_free_r+0x74>
 800661a:	230c      	movs	r3, #12
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	e7d6      	b.n	80065ce <_free_r+0x22>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	1821      	adds	r1, r4, r0
 8006624:	428b      	cmp	r3, r1
 8006626:	bf04      	itt	eq
 8006628:	6819      	ldreq	r1, [r3, #0]
 800662a:	685b      	ldreq	r3, [r3, #4]
 800662c:	6063      	str	r3, [r4, #4]
 800662e:	bf04      	itt	eq
 8006630:	1809      	addeq	r1, r1, r0
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	6054      	str	r4, [r2, #4]
 8006636:	e7ca      	b.n	80065ce <_free_r+0x22>
 8006638:	bd38      	pop	{r3, r4, r5, pc}
 800663a:	bf00      	nop
 800663c:	20000474 	.word	0x20000474

08006640 <sbrk_aligned>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4e0f      	ldr	r6, [pc, #60]	@ (8006680 <sbrk_aligned+0x40>)
 8006644:	460c      	mov	r4, r1
 8006646:	6831      	ldr	r1, [r6, #0]
 8006648:	4605      	mov	r5, r0
 800664a:	b911      	cbnz	r1, 8006652 <sbrk_aligned+0x12>
 800664c:	f000 fcfa 	bl	8007044 <_sbrk_r>
 8006650:	6030      	str	r0, [r6, #0]
 8006652:	4621      	mov	r1, r4
 8006654:	4628      	mov	r0, r5
 8006656:	f000 fcf5 	bl	8007044 <_sbrk_r>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d103      	bne.n	8006666 <sbrk_aligned+0x26>
 800665e:	f04f 34ff 	mov.w	r4, #4294967295
 8006662:	4620      	mov	r0, r4
 8006664:	bd70      	pop	{r4, r5, r6, pc}
 8006666:	1cc4      	adds	r4, r0, #3
 8006668:	f024 0403 	bic.w	r4, r4, #3
 800666c:	42a0      	cmp	r0, r4
 800666e:	d0f8      	beq.n	8006662 <sbrk_aligned+0x22>
 8006670:	1a21      	subs	r1, r4, r0
 8006672:	4628      	mov	r0, r5
 8006674:	f000 fce6 	bl	8007044 <_sbrk_r>
 8006678:	3001      	adds	r0, #1
 800667a:	d1f2      	bne.n	8006662 <sbrk_aligned+0x22>
 800667c:	e7ef      	b.n	800665e <sbrk_aligned+0x1e>
 800667e:	bf00      	nop
 8006680:	20000470 	.word	0x20000470

08006684 <_malloc_r>:
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	1ccd      	adds	r5, r1, #3
 800668a:	f025 0503 	bic.w	r5, r5, #3
 800668e:	3508      	adds	r5, #8
 8006690:	2d0c      	cmp	r5, #12
 8006692:	bf38      	it	cc
 8006694:	250c      	movcc	r5, #12
 8006696:	2d00      	cmp	r5, #0
 8006698:	4606      	mov	r6, r0
 800669a:	db01      	blt.n	80066a0 <_malloc_r+0x1c>
 800669c:	42a9      	cmp	r1, r5
 800669e:	d904      	bls.n	80066aa <_malloc_r+0x26>
 80066a0:	230c      	movs	r3, #12
 80066a2:	6033      	str	r3, [r6, #0]
 80066a4:	2000      	movs	r0, #0
 80066a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006780 <_malloc_r+0xfc>
 80066ae:	f000 f869 	bl	8006784 <__malloc_lock>
 80066b2:	f8d8 3000 	ldr.w	r3, [r8]
 80066b6:	461c      	mov	r4, r3
 80066b8:	bb44      	cbnz	r4, 800670c <_malloc_r+0x88>
 80066ba:	4629      	mov	r1, r5
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff ffbf 	bl	8006640 <sbrk_aligned>
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	4604      	mov	r4, r0
 80066c6:	d158      	bne.n	800677a <_malloc_r+0xf6>
 80066c8:	f8d8 4000 	ldr.w	r4, [r8]
 80066cc:	4627      	mov	r7, r4
 80066ce:	2f00      	cmp	r7, #0
 80066d0:	d143      	bne.n	800675a <_malloc_r+0xd6>
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	d04b      	beq.n	800676e <_malloc_r+0xea>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	4639      	mov	r1, r7
 80066da:	4630      	mov	r0, r6
 80066dc:	eb04 0903 	add.w	r9, r4, r3
 80066e0:	f000 fcb0 	bl	8007044 <_sbrk_r>
 80066e4:	4581      	cmp	r9, r0
 80066e6:	d142      	bne.n	800676e <_malloc_r+0xea>
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	1a6d      	subs	r5, r5, r1
 80066ec:	4629      	mov	r1, r5
 80066ee:	4630      	mov	r0, r6
 80066f0:	f7ff ffa6 	bl	8006640 <sbrk_aligned>
 80066f4:	3001      	adds	r0, #1
 80066f6:	d03a      	beq.n	800676e <_malloc_r+0xea>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	442b      	add	r3, r5
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	bb62      	cbnz	r2, 8006760 <_malloc_r+0xdc>
 8006706:	f8c8 7000 	str.w	r7, [r8]
 800670a:	e00f      	b.n	800672c <_malloc_r+0xa8>
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	1b52      	subs	r2, r2, r5
 8006710:	d420      	bmi.n	8006754 <_malloc_r+0xd0>
 8006712:	2a0b      	cmp	r2, #11
 8006714:	d917      	bls.n	8006746 <_malloc_r+0xc2>
 8006716:	1961      	adds	r1, r4, r5
 8006718:	42a3      	cmp	r3, r4
 800671a:	6025      	str	r5, [r4, #0]
 800671c:	bf18      	it	ne
 800671e:	6059      	strne	r1, [r3, #4]
 8006720:	6863      	ldr	r3, [r4, #4]
 8006722:	bf08      	it	eq
 8006724:	f8c8 1000 	streq.w	r1, [r8]
 8006728:	5162      	str	r2, [r4, r5]
 800672a:	604b      	str	r3, [r1, #4]
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f82f 	bl	8006790 <__malloc_unlock>
 8006732:	f104 000b 	add.w	r0, r4, #11
 8006736:	1d23      	adds	r3, r4, #4
 8006738:	f020 0007 	bic.w	r0, r0, #7
 800673c:	1ac2      	subs	r2, r0, r3
 800673e:	bf1c      	itt	ne
 8006740:	1a1b      	subne	r3, r3, r0
 8006742:	50a3      	strne	r3, [r4, r2]
 8006744:	e7af      	b.n	80066a6 <_malloc_r+0x22>
 8006746:	6862      	ldr	r2, [r4, #4]
 8006748:	42a3      	cmp	r3, r4
 800674a:	bf0c      	ite	eq
 800674c:	f8c8 2000 	streq.w	r2, [r8]
 8006750:	605a      	strne	r2, [r3, #4]
 8006752:	e7eb      	b.n	800672c <_malloc_r+0xa8>
 8006754:	4623      	mov	r3, r4
 8006756:	6864      	ldr	r4, [r4, #4]
 8006758:	e7ae      	b.n	80066b8 <_malloc_r+0x34>
 800675a:	463c      	mov	r4, r7
 800675c:	687f      	ldr	r7, [r7, #4]
 800675e:	e7b6      	b.n	80066ce <_malloc_r+0x4a>
 8006760:	461a      	mov	r2, r3
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	42a3      	cmp	r3, r4
 8006766:	d1fb      	bne.n	8006760 <_malloc_r+0xdc>
 8006768:	2300      	movs	r3, #0
 800676a:	6053      	str	r3, [r2, #4]
 800676c:	e7de      	b.n	800672c <_malloc_r+0xa8>
 800676e:	230c      	movs	r3, #12
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	4630      	mov	r0, r6
 8006774:	f000 f80c 	bl	8006790 <__malloc_unlock>
 8006778:	e794      	b.n	80066a4 <_malloc_r+0x20>
 800677a:	6005      	str	r5, [r0, #0]
 800677c:	e7d6      	b.n	800672c <_malloc_r+0xa8>
 800677e:	bf00      	nop
 8006780:	20000474 	.word	0x20000474

08006784 <__malloc_lock>:
 8006784:	4801      	ldr	r0, [pc, #4]	@ (800678c <__malloc_lock+0x8>)
 8006786:	f7ff befa 	b.w	800657e <__retarget_lock_acquire_recursive>
 800678a:	bf00      	nop
 800678c:	2000046c 	.word	0x2000046c

08006790 <__malloc_unlock>:
 8006790:	4801      	ldr	r0, [pc, #4]	@ (8006798 <__malloc_unlock+0x8>)
 8006792:	f7ff bef5 	b.w	8006580 <__retarget_lock_release_recursive>
 8006796:	bf00      	nop
 8006798:	2000046c 	.word	0x2000046c

0800679c <__sfputc_r>:
 800679c:	6893      	ldr	r3, [r2, #8]
 800679e:	3b01      	subs	r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	b410      	push	{r4}
 80067a4:	6093      	str	r3, [r2, #8]
 80067a6:	da08      	bge.n	80067ba <__sfputc_r+0x1e>
 80067a8:	6994      	ldr	r4, [r2, #24]
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	db01      	blt.n	80067b2 <__sfputc_r+0x16>
 80067ae:	290a      	cmp	r1, #10
 80067b0:	d103      	bne.n	80067ba <__sfputc_r+0x1e>
 80067b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b6:	f000 bb6d 	b.w	8006e94 <__swbuf_r>
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	1c58      	adds	r0, r3, #1
 80067be:	6010      	str	r0, [r2, #0]
 80067c0:	7019      	strb	r1, [r3, #0]
 80067c2:	4608      	mov	r0, r1
 80067c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <__sfputs_r>:
 80067ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	18d5      	adds	r5, r2, r3
 80067d4:	42ac      	cmp	r4, r5
 80067d6:	d101      	bne.n	80067dc <__sfputs_r+0x12>
 80067d8:	2000      	movs	r0, #0
 80067da:	e007      	b.n	80067ec <__sfputs_r+0x22>
 80067dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e0:	463a      	mov	r2, r7
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ffda 	bl	800679c <__sfputc_r>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d1f3      	bne.n	80067d4 <__sfputs_r+0xa>
 80067ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067f0 <_vfiprintf_r>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	460d      	mov	r5, r1
 80067f6:	b09d      	sub	sp, #116	@ 0x74
 80067f8:	4614      	mov	r4, r2
 80067fa:	4698      	mov	r8, r3
 80067fc:	4606      	mov	r6, r0
 80067fe:	b118      	cbz	r0, 8006808 <_vfiprintf_r+0x18>
 8006800:	6a03      	ldr	r3, [r0, #32]
 8006802:	b90b      	cbnz	r3, 8006808 <_vfiprintf_r+0x18>
 8006804:	f7ff fdb6 	bl	8006374 <__sinit>
 8006808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800680a:	07d9      	lsls	r1, r3, #31
 800680c:	d405      	bmi.n	800681a <_vfiprintf_r+0x2a>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	059a      	lsls	r2, r3, #22
 8006812:	d402      	bmi.n	800681a <_vfiprintf_r+0x2a>
 8006814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006816:	f7ff feb2 	bl	800657e <__retarget_lock_acquire_recursive>
 800681a:	89ab      	ldrh	r3, [r5, #12]
 800681c:	071b      	lsls	r3, r3, #28
 800681e:	d501      	bpl.n	8006824 <_vfiprintf_r+0x34>
 8006820:	692b      	ldr	r3, [r5, #16]
 8006822:	b99b      	cbnz	r3, 800684c <_vfiprintf_r+0x5c>
 8006824:	4629      	mov	r1, r5
 8006826:	4630      	mov	r0, r6
 8006828:	f000 fb72 	bl	8006f10 <__swsetup_r>
 800682c:	b170      	cbz	r0, 800684c <_vfiprintf_r+0x5c>
 800682e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006830:	07dc      	lsls	r4, r3, #31
 8006832:	d504      	bpl.n	800683e <_vfiprintf_r+0x4e>
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	b01d      	add	sp, #116	@ 0x74
 800683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683e:	89ab      	ldrh	r3, [r5, #12]
 8006840:	0598      	lsls	r0, r3, #22
 8006842:	d4f7      	bmi.n	8006834 <_vfiprintf_r+0x44>
 8006844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006846:	f7ff fe9b 	bl	8006580 <__retarget_lock_release_recursive>
 800684a:	e7f3      	b.n	8006834 <_vfiprintf_r+0x44>
 800684c:	2300      	movs	r3, #0
 800684e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006850:	2320      	movs	r3, #32
 8006852:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006856:	f8cd 800c 	str.w	r8, [sp, #12]
 800685a:	2330      	movs	r3, #48	@ 0x30
 800685c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a0c <_vfiprintf_r+0x21c>
 8006860:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006864:	f04f 0901 	mov.w	r9, #1
 8006868:	4623      	mov	r3, r4
 800686a:	469a      	mov	sl, r3
 800686c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006870:	b10a      	cbz	r2, 8006876 <_vfiprintf_r+0x86>
 8006872:	2a25      	cmp	r2, #37	@ 0x25
 8006874:	d1f9      	bne.n	800686a <_vfiprintf_r+0x7a>
 8006876:	ebba 0b04 	subs.w	fp, sl, r4
 800687a:	d00b      	beq.n	8006894 <_vfiprintf_r+0xa4>
 800687c:	465b      	mov	r3, fp
 800687e:	4622      	mov	r2, r4
 8006880:	4629      	mov	r1, r5
 8006882:	4630      	mov	r0, r6
 8006884:	f7ff ffa1 	bl	80067ca <__sfputs_r>
 8006888:	3001      	adds	r0, #1
 800688a:	f000 80a7 	beq.w	80069dc <_vfiprintf_r+0x1ec>
 800688e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006890:	445a      	add	r2, fp
 8006892:	9209      	str	r2, [sp, #36]	@ 0x24
 8006894:	f89a 3000 	ldrb.w	r3, [sl]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 809f 	beq.w	80069dc <_vfiprintf_r+0x1ec>
 800689e:	2300      	movs	r3, #0
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a8:	f10a 0a01 	add.w	sl, sl, #1
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80068b6:	4654      	mov	r4, sl
 80068b8:	2205      	movs	r2, #5
 80068ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068be:	4853      	ldr	r0, [pc, #332]	@ (8006a0c <_vfiprintf_r+0x21c>)
 80068c0:	f7f9 fcae 	bl	8000220 <memchr>
 80068c4:	9a04      	ldr	r2, [sp, #16]
 80068c6:	b9d8      	cbnz	r0, 8006900 <_vfiprintf_r+0x110>
 80068c8:	06d1      	lsls	r1, r2, #27
 80068ca:	bf44      	itt	mi
 80068cc:	2320      	movmi	r3, #32
 80068ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d2:	0713      	lsls	r3, r2, #28
 80068d4:	bf44      	itt	mi
 80068d6:	232b      	movmi	r3, #43	@ 0x2b
 80068d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068dc:	f89a 3000 	ldrb.w	r3, [sl]
 80068e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80068e2:	d015      	beq.n	8006910 <_vfiprintf_r+0x120>
 80068e4:	9a07      	ldr	r2, [sp, #28]
 80068e6:	4654      	mov	r4, sl
 80068e8:	2000      	movs	r0, #0
 80068ea:	f04f 0c0a 	mov.w	ip, #10
 80068ee:	4621      	mov	r1, r4
 80068f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f4:	3b30      	subs	r3, #48	@ 0x30
 80068f6:	2b09      	cmp	r3, #9
 80068f8:	d94b      	bls.n	8006992 <_vfiprintf_r+0x1a2>
 80068fa:	b1b0      	cbz	r0, 800692a <_vfiprintf_r+0x13a>
 80068fc:	9207      	str	r2, [sp, #28]
 80068fe:	e014      	b.n	800692a <_vfiprintf_r+0x13a>
 8006900:	eba0 0308 	sub.w	r3, r0, r8
 8006904:	fa09 f303 	lsl.w	r3, r9, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	46a2      	mov	sl, r4
 800690e:	e7d2      	b.n	80068b6 <_vfiprintf_r+0xc6>
 8006910:	9b03      	ldr	r3, [sp, #12]
 8006912:	1d19      	adds	r1, r3, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	9103      	str	r1, [sp, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	bfbb      	ittet	lt
 800691c:	425b      	neglt	r3, r3
 800691e:	f042 0202 	orrlt.w	r2, r2, #2
 8006922:	9307      	strge	r3, [sp, #28]
 8006924:	9307      	strlt	r3, [sp, #28]
 8006926:	bfb8      	it	lt
 8006928:	9204      	strlt	r2, [sp, #16]
 800692a:	7823      	ldrb	r3, [r4, #0]
 800692c:	2b2e      	cmp	r3, #46	@ 0x2e
 800692e:	d10a      	bne.n	8006946 <_vfiprintf_r+0x156>
 8006930:	7863      	ldrb	r3, [r4, #1]
 8006932:	2b2a      	cmp	r3, #42	@ 0x2a
 8006934:	d132      	bne.n	800699c <_vfiprintf_r+0x1ac>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	9203      	str	r2, [sp, #12]
 800693e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006942:	3402      	adds	r4, #2
 8006944:	9305      	str	r3, [sp, #20]
 8006946:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a1c <_vfiprintf_r+0x22c>
 800694a:	7821      	ldrb	r1, [r4, #0]
 800694c:	2203      	movs	r2, #3
 800694e:	4650      	mov	r0, sl
 8006950:	f7f9 fc66 	bl	8000220 <memchr>
 8006954:	b138      	cbz	r0, 8006966 <_vfiprintf_r+0x176>
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	eba0 000a 	sub.w	r0, r0, sl
 800695c:	2240      	movs	r2, #64	@ 0x40
 800695e:	4082      	lsls	r2, r0
 8006960:	4313      	orrs	r3, r2
 8006962:	3401      	adds	r4, #1
 8006964:	9304      	str	r3, [sp, #16]
 8006966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800696a:	4829      	ldr	r0, [pc, #164]	@ (8006a10 <_vfiprintf_r+0x220>)
 800696c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006970:	2206      	movs	r2, #6
 8006972:	f7f9 fc55 	bl	8000220 <memchr>
 8006976:	2800      	cmp	r0, #0
 8006978:	d03f      	beq.n	80069fa <_vfiprintf_r+0x20a>
 800697a:	4b26      	ldr	r3, [pc, #152]	@ (8006a14 <_vfiprintf_r+0x224>)
 800697c:	bb1b      	cbnz	r3, 80069c6 <_vfiprintf_r+0x1d6>
 800697e:	9b03      	ldr	r3, [sp, #12]
 8006980:	3307      	adds	r3, #7
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	3308      	adds	r3, #8
 8006988:	9303      	str	r3, [sp, #12]
 800698a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698c:	443b      	add	r3, r7
 800698e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006990:	e76a      	b.n	8006868 <_vfiprintf_r+0x78>
 8006992:	fb0c 3202 	mla	r2, ip, r2, r3
 8006996:	460c      	mov	r4, r1
 8006998:	2001      	movs	r0, #1
 800699a:	e7a8      	b.n	80068ee <_vfiprintf_r+0xfe>
 800699c:	2300      	movs	r3, #0
 800699e:	3401      	adds	r4, #1
 80069a0:	9305      	str	r3, [sp, #20]
 80069a2:	4619      	mov	r1, r3
 80069a4:	f04f 0c0a 	mov.w	ip, #10
 80069a8:	4620      	mov	r0, r4
 80069aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ae:	3a30      	subs	r2, #48	@ 0x30
 80069b0:	2a09      	cmp	r2, #9
 80069b2:	d903      	bls.n	80069bc <_vfiprintf_r+0x1cc>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0c6      	beq.n	8006946 <_vfiprintf_r+0x156>
 80069b8:	9105      	str	r1, [sp, #20]
 80069ba:	e7c4      	b.n	8006946 <_vfiprintf_r+0x156>
 80069bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c0:	4604      	mov	r4, r0
 80069c2:	2301      	movs	r3, #1
 80069c4:	e7f0      	b.n	80069a8 <_vfiprintf_r+0x1b8>
 80069c6:	ab03      	add	r3, sp, #12
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	462a      	mov	r2, r5
 80069cc:	4b12      	ldr	r3, [pc, #72]	@ (8006a18 <_vfiprintf_r+0x228>)
 80069ce:	a904      	add	r1, sp, #16
 80069d0:	4630      	mov	r0, r6
 80069d2:	f3af 8000 	nop.w
 80069d6:	4607      	mov	r7, r0
 80069d8:	1c78      	adds	r0, r7, #1
 80069da:	d1d6      	bne.n	800698a <_vfiprintf_r+0x19a>
 80069dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069de:	07d9      	lsls	r1, r3, #31
 80069e0:	d405      	bmi.n	80069ee <_vfiprintf_r+0x1fe>
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	059a      	lsls	r2, r3, #22
 80069e6:	d402      	bmi.n	80069ee <_vfiprintf_r+0x1fe>
 80069e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ea:	f7ff fdc9 	bl	8006580 <__retarget_lock_release_recursive>
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	065b      	lsls	r3, r3, #25
 80069f2:	f53f af1f 	bmi.w	8006834 <_vfiprintf_r+0x44>
 80069f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f8:	e71e      	b.n	8006838 <_vfiprintf_r+0x48>
 80069fa:	ab03      	add	r3, sp, #12
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	462a      	mov	r2, r5
 8006a00:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <_vfiprintf_r+0x228>)
 8006a02:	a904      	add	r1, sp, #16
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 f879 	bl	8006afc <_printf_i>
 8006a0a:	e7e4      	b.n	80069d6 <_vfiprintf_r+0x1e6>
 8006a0c:	08007308 	.word	0x08007308
 8006a10:	08007312 	.word	0x08007312
 8006a14:	00000000 	.word	0x00000000
 8006a18:	080067cb 	.word	0x080067cb
 8006a1c:	0800730e 	.word	0x0800730e

08006a20 <_printf_common>:
 8006a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a24:	4616      	mov	r6, r2
 8006a26:	4698      	mov	r8, r3
 8006a28:	688a      	ldr	r2, [r1, #8]
 8006a2a:	690b      	ldr	r3, [r1, #16]
 8006a2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	bfb8      	it	lt
 8006a34:	4613      	movlt	r3, r2
 8006a36:	6033      	str	r3, [r6, #0]
 8006a38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b10a      	cbz	r2, 8006a46 <_printf_common+0x26>
 8006a42:	3301      	adds	r3, #1
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	0699      	lsls	r1, r3, #26
 8006a4a:	bf42      	ittt	mi
 8006a4c:	6833      	ldrmi	r3, [r6, #0]
 8006a4e:	3302      	addmi	r3, #2
 8006a50:	6033      	strmi	r3, [r6, #0]
 8006a52:	6825      	ldr	r5, [r4, #0]
 8006a54:	f015 0506 	ands.w	r5, r5, #6
 8006a58:	d106      	bne.n	8006a68 <_printf_common+0x48>
 8006a5a:	f104 0a19 	add.w	sl, r4, #25
 8006a5e:	68e3      	ldr	r3, [r4, #12]
 8006a60:	6832      	ldr	r2, [r6, #0]
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	42ab      	cmp	r3, r5
 8006a66:	dc26      	bgt.n	8006ab6 <_printf_common+0x96>
 8006a68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	3b00      	subs	r3, #0
 8006a70:	bf18      	it	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	0692      	lsls	r2, r2, #26
 8006a76:	d42b      	bmi.n	8006ad0 <_printf_common+0xb0>
 8006a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	4638      	mov	r0, r7
 8006a80:	47c8      	blx	r9
 8006a82:	3001      	adds	r0, #1
 8006a84:	d01e      	beq.n	8006ac4 <_printf_common+0xa4>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	6922      	ldr	r2, [r4, #16]
 8006a8a:	f003 0306 	and.w	r3, r3, #6
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	bf02      	ittt	eq
 8006a92:	68e5      	ldreq	r5, [r4, #12]
 8006a94:	6833      	ldreq	r3, [r6, #0]
 8006a96:	1aed      	subeq	r5, r5, r3
 8006a98:	68a3      	ldr	r3, [r4, #8]
 8006a9a:	bf0c      	ite	eq
 8006a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa0:	2500      	movne	r5, #0
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	bfc4      	itt	gt
 8006aa6:	1a9b      	subgt	r3, r3, r2
 8006aa8:	18ed      	addgt	r5, r5, r3
 8006aaa:	2600      	movs	r6, #0
 8006aac:	341a      	adds	r4, #26
 8006aae:	42b5      	cmp	r5, r6
 8006ab0:	d11a      	bne.n	8006ae8 <_printf_common+0xc8>
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	e008      	b.n	8006ac8 <_printf_common+0xa8>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4652      	mov	r2, sl
 8006aba:	4641      	mov	r1, r8
 8006abc:	4638      	mov	r0, r7
 8006abe:	47c8      	blx	r9
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d103      	bne.n	8006acc <_printf_common+0xac>
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006acc:	3501      	adds	r5, #1
 8006ace:	e7c6      	b.n	8006a5e <_printf_common+0x3e>
 8006ad0:	18e1      	adds	r1, r4, r3
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	2030      	movs	r0, #48	@ 0x30
 8006ad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ada:	4422      	add	r2, r4
 8006adc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	e7c7      	b.n	8006a78 <_printf_common+0x58>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4622      	mov	r2, r4
 8006aec:	4641      	mov	r1, r8
 8006aee:	4638      	mov	r0, r7
 8006af0:	47c8      	blx	r9
 8006af2:	3001      	adds	r0, #1
 8006af4:	d0e6      	beq.n	8006ac4 <_printf_common+0xa4>
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7d9      	b.n	8006aae <_printf_common+0x8e>
	...

08006afc <_printf_i>:
 8006afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	7e0f      	ldrb	r7, [r1, #24]
 8006b02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b04:	2f78      	cmp	r7, #120	@ 0x78
 8006b06:	4691      	mov	r9, r2
 8006b08:	4680      	mov	r8, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	469a      	mov	sl, r3
 8006b0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b12:	d807      	bhi.n	8006b24 <_printf_i+0x28>
 8006b14:	2f62      	cmp	r7, #98	@ 0x62
 8006b16:	d80a      	bhi.n	8006b2e <_printf_i+0x32>
 8006b18:	2f00      	cmp	r7, #0
 8006b1a:	f000 80d2 	beq.w	8006cc2 <_printf_i+0x1c6>
 8006b1e:	2f58      	cmp	r7, #88	@ 0x58
 8006b20:	f000 80b9 	beq.w	8006c96 <_printf_i+0x19a>
 8006b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b2c:	e03a      	b.n	8006ba4 <_printf_i+0xa8>
 8006b2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b32:	2b15      	cmp	r3, #21
 8006b34:	d8f6      	bhi.n	8006b24 <_printf_i+0x28>
 8006b36:	a101      	add	r1, pc, #4	@ (adr r1, 8006b3c <_printf_i+0x40>)
 8006b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b3c:	08006b95 	.word	0x08006b95
 8006b40:	08006ba9 	.word	0x08006ba9
 8006b44:	08006b25 	.word	0x08006b25
 8006b48:	08006b25 	.word	0x08006b25
 8006b4c:	08006b25 	.word	0x08006b25
 8006b50:	08006b25 	.word	0x08006b25
 8006b54:	08006ba9 	.word	0x08006ba9
 8006b58:	08006b25 	.word	0x08006b25
 8006b5c:	08006b25 	.word	0x08006b25
 8006b60:	08006b25 	.word	0x08006b25
 8006b64:	08006b25 	.word	0x08006b25
 8006b68:	08006ca9 	.word	0x08006ca9
 8006b6c:	08006bd3 	.word	0x08006bd3
 8006b70:	08006c63 	.word	0x08006c63
 8006b74:	08006b25 	.word	0x08006b25
 8006b78:	08006b25 	.word	0x08006b25
 8006b7c:	08006ccb 	.word	0x08006ccb
 8006b80:	08006b25 	.word	0x08006b25
 8006b84:	08006bd3 	.word	0x08006bd3
 8006b88:	08006b25 	.word	0x08006b25
 8006b8c:	08006b25 	.word	0x08006b25
 8006b90:	08006c6b 	.word	0x08006c6b
 8006b94:	6833      	ldr	r3, [r6, #0]
 8006b96:	1d1a      	adds	r2, r3, #4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6032      	str	r2, [r6, #0]
 8006b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e09d      	b.n	8006ce4 <_printf_i+0x1e8>
 8006ba8:	6833      	ldr	r3, [r6, #0]
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	1d19      	adds	r1, r3, #4
 8006bae:	6031      	str	r1, [r6, #0]
 8006bb0:	0606      	lsls	r6, r0, #24
 8006bb2:	d501      	bpl.n	8006bb8 <_printf_i+0xbc>
 8006bb4:	681d      	ldr	r5, [r3, #0]
 8006bb6:	e003      	b.n	8006bc0 <_printf_i+0xc4>
 8006bb8:	0645      	lsls	r5, r0, #25
 8006bba:	d5fb      	bpl.n	8006bb4 <_printf_i+0xb8>
 8006bbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	da03      	bge.n	8006bcc <_printf_i+0xd0>
 8006bc4:	232d      	movs	r3, #45	@ 0x2d
 8006bc6:	426d      	negs	r5, r5
 8006bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bcc:	4859      	ldr	r0, [pc, #356]	@ (8006d34 <_printf_i+0x238>)
 8006bce:	230a      	movs	r3, #10
 8006bd0:	e011      	b.n	8006bf6 <_printf_i+0xfa>
 8006bd2:	6821      	ldr	r1, [r4, #0]
 8006bd4:	6833      	ldr	r3, [r6, #0]
 8006bd6:	0608      	lsls	r0, r1, #24
 8006bd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bdc:	d402      	bmi.n	8006be4 <_printf_i+0xe8>
 8006bde:	0649      	lsls	r1, r1, #25
 8006be0:	bf48      	it	mi
 8006be2:	b2ad      	uxthmi	r5, r5
 8006be4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006be6:	4853      	ldr	r0, [pc, #332]	@ (8006d34 <_printf_i+0x238>)
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	bf14      	ite	ne
 8006bec:	230a      	movne	r3, #10
 8006bee:	2308      	moveq	r3, #8
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bf6:	6866      	ldr	r6, [r4, #4]
 8006bf8:	60a6      	str	r6, [r4, #8]
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	bfa2      	ittt	ge
 8006bfe:	6821      	ldrge	r1, [r4, #0]
 8006c00:	f021 0104 	bicge.w	r1, r1, #4
 8006c04:	6021      	strge	r1, [r4, #0]
 8006c06:	b90d      	cbnz	r5, 8006c0c <_printf_i+0x110>
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	d04b      	beq.n	8006ca4 <_printf_i+0x1a8>
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c12:	fb03 5711 	mls	r7, r3, r1, r5
 8006c16:	5dc7      	ldrb	r7, [r0, r7]
 8006c18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c1c:	462f      	mov	r7, r5
 8006c1e:	42bb      	cmp	r3, r7
 8006c20:	460d      	mov	r5, r1
 8006c22:	d9f4      	bls.n	8006c0e <_printf_i+0x112>
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d10b      	bne.n	8006c40 <_printf_i+0x144>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	07df      	lsls	r7, r3, #31
 8006c2c:	d508      	bpl.n	8006c40 <_printf_i+0x144>
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	6861      	ldr	r1, [r4, #4]
 8006c32:	4299      	cmp	r1, r3
 8006c34:	bfde      	ittt	le
 8006c36:	2330      	movle	r3, #48	@ 0x30
 8006c38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c40:	1b92      	subs	r2, r2, r6
 8006c42:	6122      	str	r2, [r4, #16]
 8006c44:	f8cd a000 	str.w	sl, [sp]
 8006c48:	464b      	mov	r3, r9
 8006c4a:	aa03      	add	r2, sp, #12
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	4640      	mov	r0, r8
 8006c50:	f7ff fee6 	bl	8006a20 <_printf_common>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d14a      	bne.n	8006cee <_printf_i+0x1f2>
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	b004      	add	sp, #16
 8006c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	f043 0320 	orr.w	r3, r3, #32
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	4833      	ldr	r0, [pc, #204]	@ (8006d38 <_printf_i+0x23c>)
 8006c6c:	2778      	movs	r7, #120	@ 0x78
 8006c6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	6831      	ldr	r1, [r6, #0]
 8006c76:	061f      	lsls	r7, r3, #24
 8006c78:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c7c:	d402      	bmi.n	8006c84 <_printf_i+0x188>
 8006c7e:	065f      	lsls	r7, r3, #25
 8006c80:	bf48      	it	mi
 8006c82:	b2ad      	uxthmi	r5, r5
 8006c84:	6031      	str	r1, [r6, #0]
 8006c86:	07d9      	lsls	r1, r3, #31
 8006c88:	bf44      	itt	mi
 8006c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c8e:	6023      	strmi	r3, [r4, #0]
 8006c90:	b11d      	cbz	r5, 8006c9a <_printf_i+0x19e>
 8006c92:	2310      	movs	r3, #16
 8006c94:	e7ac      	b.n	8006bf0 <_printf_i+0xf4>
 8006c96:	4827      	ldr	r0, [pc, #156]	@ (8006d34 <_printf_i+0x238>)
 8006c98:	e7e9      	b.n	8006c6e <_printf_i+0x172>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f023 0320 	bic.w	r3, r3, #32
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	e7f6      	b.n	8006c92 <_printf_i+0x196>
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	e7bd      	b.n	8006c24 <_printf_i+0x128>
 8006ca8:	6833      	ldr	r3, [r6, #0]
 8006caa:	6825      	ldr	r5, [r4, #0]
 8006cac:	6961      	ldr	r1, [r4, #20]
 8006cae:	1d18      	adds	r0, r3, #4
 8006cb0:	6030      	str	r0, [r6, #0]
 8006cb2:	062e      	lsls	r6, r5, #24
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	d501      	bpl.n	8006cbc <_printf_i+0x1c0>
 8006cb8:	6019      	str	r1, [r3, #0]
 8006cba:	e002      	b.n	8006cc2 <_printf_i+0x1c6>
 8006cbc:	0668      	lsls	r0, r5, #25
 8006cbe:	d5fb      	bpl.n	8006cb8 <_printf_i+0x1bc>
 8006cc0:	8019      	strh	r1, [r3, #0]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	4616      	mov	r6, r2
 8006cc8:	e7bc      	b.n	8006c44 <_printf_i+0x148>
 8006cca:	6833      	ldr	r3, [r6, #0]
 8006ccc:	1d1a      	adds	r2, r3, #4
 8006cce:	6032      	str	r2, [r6, #0]
 8006cd0:	681e      	ldr	r6, [r3, #0]
 8006cd2:	6862      	ldr	r2, [r4, #4]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f7f9 faa2 	bl	8000220 <memchr>
 8006cdc:	b108      	cbz	r0, 8006ce2 <_printf_i+0x1e6>
 8006cde:	1b80      	subs	r0, r0, r6
 8006ce0:	6060      	str	r0, [r4, #4]
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cec:	e7aa      	b.n	8006c44 <_printf_i+0x148>
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	47d0      	blx	sl
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d0ad      	beq.n	8006c58 <_printf_i+0x15c>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	079b      	lsls	r3, r3, #30
 8006d00:	d413      	bmi.n	8006d2a <_printf_i+0x22e>
 8006d02:	68e0      	ldr	r0, [r4, #12]
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	4298      	cmp	r0, r3
 8006d08:	bfb8      	it	lt
 8006d0a:	4618      	movlt	r0, r3
 8006d0c:	e7a6      	b.n	8006c5c <_printf_i+0x160>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4632      	mov	r2, r6
 8006d12:	4649      	mov	r1, r9
 8006d14:	4640      	mov	r0, r8
 8006d16:	47d0      	blx	sl
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d09d      	beq.n	8006c58 <_printf_i+0x15c>
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	68e3      	ldr	r3, [r4, #12]
 8006d20:	9903      	ldr	r1, [sp, #12]
 8006d22:	1a5b      	subs	r3, r3, r1
 8006d24:	42ab      	cmp	r3, r5
 8006d26:	dcf2      	bgt.n	8006d0e <_printf_i+0x212>
 8006d28:	e7eb      	b.n	8006d02 <_printf_i+0x206>
 8006d2a:	2500      	movs	r5, #0
 8006d2c:	f104 0619 	add.w	r6, r4, #25
 8006d30:	e7f5      	b.n	8006d1e <_printf_i+0x222>
 8006d32:	bf00      	nop
 8006d34:	08007319 	.word	0x08007319
 8006d38:	0800732a 	.word	0x0800732a

08006d3c <__sflush_r>:
 8006d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d44:	0716      	lsls	r6, r2, #28
 8006d46:	4605      	mov	r5, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	d454      	bmi.n	8006df6 <__sflush_r+0xba>
 8006d4c:	684b      	ldr	r3, [r1, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dc02      	bgt.n	8006d58 <__sflush_r+0x1c>
 8006d52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dd48      	ble.n	8006dea <__sflush_r+0xae>
 8006d58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	d045      	beq.n	8006dea <__sflush_r+0xae>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d64:	682f      	ldr	r7, [r5, #0]
 8006d66:	6a21      	ldr	r1, [r4, #32]
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	d030      	beq.n	8006dce <__sflush_r+0x92>
 8006d6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	0759      	lsls	r1, r3, #29
 8006d72:	d505      	bpl.n	8006d80 <__sflush_r+0x44>
 8006d74:	6863      	ldr	r3, [r4, #4]
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d7a:	b10b      	cbz	r3, 8006d80 <__sflush_r+0x44>
 8006d7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d84:	6a21      	ldr	r1, [r4, #32]
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b0      	blx	r6
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	d106      	bne.n	8006d9e <__sflush_r+0x62>
 8006d90:	6829      	ldr	r1, [r5, #0]
 8006d92:	291d      	cmp	r1, #29
 8006d94:	d82b      	bhi.n	8006dee <__sflush_r+0xb2>
 8006d96:	4a2a      	ldr	r2, [pc, #168]	@ (8006e40 <__sflush_r+0x104>)
 8006d98:	410a      	asrs	r2, r1
 8006d9a:	07d6      	lsls	r6, r2, #31
 8006d9c:	d427      	bmi.n	8006dee <__sflush_r+0xb2>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	6062      	str	r2, [r4, #4]
 8006da2:	04d9      	lsls	r1, r3, #19
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	6022      	str	r2, [r4, #0]
 8006da8:	d504      	bpl.n	8006db4 <__sflush_r+0x78>
 8006daa:	1c42      	adds	r2, r0, #1
 8006dac:	d101      	bne.n	8006db2 <__sflush_r+0x76>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	b903      	cbnz	r3, 8006db4 <__sflush_r+0x78>
 8006db2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006db6:	602f      	str	r7, [r5, #0]
 8006db8:	b1b9      	cbz	r1, 8006dea <__sflush_r+0xae>
 8006dba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	d002      	beq.n	8006dc8 <__sflush_r+0x8c>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f7ff fbf2 	bl	80065ac <_free_r>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dcc:	e00d      	b.n	8006dea <__sflush_r+0xae>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b0      	blx	r6
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	1c50      	adds	r0, r2, #1
 8006dd8:	d1c9      	bne.n	8006d6e <__sflush_r+0x32>
 8006dda:	682b      	ldr	r3, [r5, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0c6      	beq.n	8006d6e <__sflush_r+0x32>
 8006de0:	2b1d      	cmp	r3, #29
 8006de2:	d001      	beq.n	8006de8 <__sflush_r+0xac>
 8006de4:	2b16      	cmp	r3, #22
 8006de6:	d11e      	bne.n	8006e26 <__sflush_r+0xea>
 8006de8:	602f      	str	r7, [r5, #0]
 8006dea:	2000      	movs	r0, #0
 8006dec:	e022      	b.n	8006e34 <__sflush_r+0xf8>
 8006dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	e01b      	b.n	8006e2e <__sflush_r+0xf2>
 8006df6:	690f      	ldr	r7, [r1, #16]
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	d0f6      	beq.n	8006dea <__sflush_r+0xae>
 8006dfc:	0793      	lsls	r3, r2, #30
 8006dfe:	680e      	ldr	r6, [r1, #0]
 8006e00:	bf08      	it	eq
 8006e02:	694b      	ldreq	r3, [r1, #20]
 8006e04:	600f      	str	r7, [r1, #0]
 8006e06:	bf18      	it	ne
 8006e08:	2300      	movne	r3, #0
 8006e0a:	eba6 0807 	sub.w	r8, r6, r7
 8006e0e:	608b      	str	r3, [r1, #8]
 8006e10:	f1b8 0f00 	cmp.w	r8, #0
 8006e14:	dde9      	ble.n	8006dea <__sflush_r+0xae>
 8006e16:	6a21      	ldr	r1, [r4, #32]
 8006e18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e1a:	4643      	mov	r3, r8
 8006e1c:	463a      	mov	r2, r7
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b0      	blx	r6
 8006e22:	2800      	cmp	r0, #0
 8006e24:	dc08      	bgt.n	8006e38 <__sflush_r+0xfc>
 8006e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	4407      	add	r7, r0
 8006e3a:	eba8 0800 	sub.w	r8, r8, r0
 8006e3e:	e7e7      	b.n	8006e10 <__sflush_r+0xd4>
 8006e40:	dfbffffe 	.word	0xdfbffffe

08006e44 <_fflush_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	4605      	mov	r5, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	b913      	cbnz	r3, 8006e54 <_fflush_r+0x10>
 8006e4e:	2500      	movs	r5, #0
 8006e50:	4628      	mov	r0, r5
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	b118      	cbz	r0, 8006e5e <_fflush_r+0x1a>
 8006e56:	6a03      	ldr	r3, [r0, #32]
 8006e58:	b90b      	cbnz	r3, 8006e5e <_fflush_r+0x1a>
 8006e5a:	f7ff fa8b 	bl	8006374 <__sinit>
 8006e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f3      	beq.n	8006e4e <_fflush_r+0xa>
 8006e66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e68:	07d0      	lsls	r0, r2, #31
 8006e6a:	d404      	bmi.n	8006e76 <_fflush_r+0x32>
 8006e6c:	0599      	lsls	r1, r3, #22
 8006e6e:	d402      	bmi.n	8006e76 <_fflush_r+0x32>
 8006e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e72:	f7ff fb84 	bl	800657e <__retarget_lock_acquire_recursive>
 8006e76:	4628      	mov	r0, r5
 8006e78:	4621      	mov	r1, r4
 8006e7a:	f7ff ff5f 	bl	8006d3c <__sflush_r>
 8006e7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e80:	07da      	lsls	r2, r3, #31
 8006e82:	4605      	mov	r5, r0
 8006e84:	d4e4      	bmi.n	8006e50 <_fflush_r+0xc>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	059b      	lsls	r3, r3, #22
 8006e8a:	d4e1      	bmi.n	8006e50 <_fflush_r+0xc>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e8e:	f7ff fb77 	bl	8006580 <__retarget_lock_release_recursive>
 8006e92:	e7dd      	b.n	8006e50 <_fflush_r+0xc>

08006e94 <__swbuf_r>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	460e      	mov	r6, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	b118      	cbz	r0, 8006ea6 <__swbuf_r+0x12>
 8006e9e:	6a03      	ldr	r3, [r0, #32]
 8006ea0:	b90b      	cbnz	r3, 8006ea6 <__swbuf_r+0x12>
 8006ea2:	f7ff fa67 	bl	8006374 <__sinit>
 8006ea6:	69a3      	ldr	r3, [r4, #24]
 8006ea8:	60a3      	str	r3, [r4, #8]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	071a      	lsls	r2, r3, #28
 8006eae:	d501      	bpl.n	8006eb4 <__swbuf_r+0x20>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	b943      	cbnz	r3, 8006ec6 <__swbuf_r+0x32>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 f82a 	bl	8006f10 <__swsetup_r>
 8006ebc:	b118      	cbz	r0, 8006ec6 <__swbuf_r+0x32>
 8006ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	6922      	ldr	r2, [r4, #16]
 8006eca:	1a98      	subs	r0, r3, r2
 8006ecc:	6963      	ldr	r3, [r4, #20]
 8006ece:	b2f6      	uxtb	r6, r6
 8006ed0:	4283      	cmp	r3, r0
 8006ed2:	4637      	mov	r7, r6
 8006ed4:	dc05      	bgt.n	8006ee2 <__swbuf_r+0x4e>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f7ff ffb3 	bl	8006e44 <_fflush_r>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d1ed      	bne.n	8006ebe <__swbuf_r+0x2a>
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	60a3      	str	r3, [r4, #8]
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	701e      	strb	r6, [r3, #0]
 8006ef0:	6962      	ldr	r2, [r4, #20]
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d004      	beq.n	8006f02 <__swbuf_r+0x6e>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d5e1      	bpl.n	8006ec2 <__swbuf_r+0x2e>
 8006efe:	2e0a      	cmp	r6, #10
 8006f00:	d1df      	bne.n	8006ec2 <__swbuf_r+0x2e>
 8006f02:	4621      	mov	r1, r4
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff ff9d 	bl	8006e44 <_fflush_r>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0d9      	beq.n	8006ec2 <__swbuf_r+0x2e>
 8006f0e:	e7d6      	b.n	8006ebe <__swbuf_r+0x2a>

08006f10 <__swsetup_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4b29      	ldr	r3, [pc, #164]	@ (8006fb8 <__swsetup_r+0xa8>)
 8006f14:	4605      	mov	r5, r0
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	460c      	mov	r4, r1
 8006f1a:	b118      	cbz	r0, 8006f24 <__swsetup_r+0x14>
 8006f1c:	6a03      	ldr	r3, [r0, #32]
 8006f1e:	b90b      	cbnz	r3, 8006f24 <__swsetup_r+0x14>
 8006f20:	f7ff fa28 	bl	8006374 <__sinit>
 8006f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f28:	0719      	lsls	r1, r3, #28
 8006f2a:	d422      	bmi.n	8006f72 <__swsetup_r+0x62>
 8006f2c:	06da      	lsls	r2, r3, #27
 8006f2e:	d407      	bmi.n	8006f40 <__swsetup_r+0x30>
 8006f30:	2209      	movs	r2, #9
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	e033      	b.n	8006fa8 <__swsetup_r+0x98>
 8006f40:	0758      	lsls	r0, r3, #29
 8006f42:	d512      	bpl.n	8006f6a <__swsetup_r+0x5a>
 8006f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f46:	b141      	cbz	r1, 8006f5a <__swsetup_r+0x4a>
 8006f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d002      	beq.n	8006f56 <__swsetup_r+0x46>
 8006f50:	4628      	mov	r0, r5
 8006f52:	f7ff fb2b 	bl	80065ac <_free_r>
 8006f56:	2300      	movs	r3, #0
 8006f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f043 0308 	orr.w	r3, r3, #8
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	b94b      	cbnz	r3, 8006f8a <__swsetup_r+0x7a>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f80:	d003      	beq.n	8006f8a <__swsetup_r+0x7a>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f893 	bl	80070b0 <__smakebuf_r>
 8006f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8e:	f013 0201 	ands.w	r2, r3, #1
 8006f92:	d00a      	beq.n	8006faa <__swsetup_r+0x9a>
 8006f94:	2200      	movs	r2, #0
 8006f96:	60a2      	str	r2, [r4, #8]
 8006f98:	6962      	ldr	r2, [r4, #20]
 8006f9a:	4252      	negs	r2, r2
 8006f9c:	61a2      	str	r2, [r4, #24]
 8006f9e:	6922      	ldr	r2, [r4, #16]
 8006fa0:	b942      	cbnz	r2, 8006fb4 <__swsetup_r+0xa4>
 8006fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fa6:	d1c5      	bne.n	8006f34 <__swsetup_r+0x24>
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	0799      	lsls	r1, r3, #30
 8006fac:	bf58      	it	pl
 8006fae:	6962      	ldrpl	r2, [r4, #20]
 8006fb0:	60a2      	str	r2, [r4, #8]
 8006fb2:	e7f4      	b.n	8006f9e <__swsetup_r+0x8e>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e7f7      	b.n	8006fa8 <__swsetup_r+0x98>
 8006fb8:	20000020 	.word	0x20000020

08006fbc <_raise_r>:
 8006fbc:	291f      	cmp	r1, #31
 8006fbe:	b538      	push	{r3, r4, r5, lr}
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	d904      	bls.n	8006fd0 <_raise_r+0x14>
 8006fc6:	2316      	movs	r3, #22
 8006fc8:	6003      	str	r3, [r0, #0]
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006fd2:	b112      	cbz	r2, 8006fda <_raise_r+0x1e>
 8006fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fd8:	b94b      	cbnz	r3, 8006fee <_raise_r+0x32>
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f000 f830 	bl	8007040 <_getpid_r>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fea:	f000 b817 	b.w	800701c <_kill_r>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d00a      	beq.n	8007008 <_raise_r+0x4c>
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	d103      	bne.n	8006ffe <_raise_r+0x42>
 8006ff6:	2316      	movs	r3, #22
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	e7e7      	b.n	8006fce <_raise_r+0x12>
 8006ffe:	2100      	movs	r1, #0
 8007000:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007004:	4620      	mov	r0, r4
 8007006:	4798      	blx	r3
 8007008:	2000      	movs	r0, #0
 800700a:	e7e0      	b.n	8006fce <_raise_r+0x12>

0800700c <raise>:
 800700c:	4b02      	ldr	r3, [pc, #8]	@ (8007018 <raise+0xc>)
 800700e:	4601      	mov	r1, r0
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f7ff bfd3 	b.w	8006fbc <_raise_r>
 8007016:	bf00      	nop
 8007018:	20000020 	.word	0x20000020

0800701c <_kill_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d07      	ldr	r5, [pc, #28]	@ (800703c <_kill_r+0x20>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	f7fa fb29 	bl	8001680 <_kill>
 800702e:	1c43      	adds	r3, r0, #1
 8007030:	d102      	bne.n	8007038 <_kill_r+0x1c>
 8007032:	682b      	ldr	r3, [r5, #0]
 8007034:	b103      	cbz	r3, 8007038 <_kill_r+0x1c>
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	bd38      	pop	{r3, r4, r5, pc}
 800703a:	bf00      	nop
 800703c:	20000468 	.word	0x20000468

08007040 <_getpid_r>:
 8007040:	f7fa bb16 	b.w	8001670 <_getpid>

08007044 <_sbrk_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d06      	ldr	r5, [pc, #24]	@ (8007060 <_sbrk_r+0x1c>)
 8007048:	2300      	movs	r3, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	f7fa fb9e 	bl	8001790 <_sbrk>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_sbrk_r+0x1a>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_sbrk_r+0x1a>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000468 	.word	0x20000468

08007064 <__swhatbuf_r>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	460c      	mov	r4, r1
 8007068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706c:	2900      	cmp	r1, #0
 800706e:	b096      	sub	sp, #88	@ 0x58
 8007070:	4615      	mov	r5, r2
 8007072:	461e      	mov	r6, r3
 8007074:	da0d      	bge.n	8007092 <__swhatbuf_r+0x2e>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800707c:	f04f 0100 	mov.w	r1, #0
 8007080:	bf14      	ite	ne
 8007082:	2340      	movne	r3, #64	@ 0x40
 8007084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007088:	2000      	movs	r0, #0
 800708a:	6031      	str	r1, [r6, #0]
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	b016      	add	sp, #88	@ 0x58
 8007090:	bd70      	pop	{r4, r5, r6, pc}
 8007092:	466a      	mov	r2, sp
 8007094:	f000 f848 	bl	8007128 <_fstat_r>
 8007098:	2800      	cmp	r0, #0
 800709a:	dbec      	blt.n	8007076 <__swhatbuf_r+0x12>
 800709c:	9901      	ldr	r1, [sp, #4]
 800709e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070a6:	4259      	negs	r1, r3
 80070a8:	4159      	adcs	r1, r3
 80070aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070ae:	e7eb      	b.n	8007088 <__swhatbuf_r+0x24>

080070b0 <__smakebuf_r>:
 80070b0:	898b      	ldrh	r3, [r1, #12]
 80070b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b4:	079d      	lsls	r5, r3, #30
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	d507      	bpl.n	80070cc <__smakebuf_r+0x1c>
 80070bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	2301      	movs	r3, #1
 80070c6:	6163      	str	r3, [r4, #20]
 80070c8:	b003      	add	sp, #12
 80070ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070cc:	ab01      	add	r3, sp, #4
 80070ce:	466a      	mov	r2, sp
 80070d0:	f7ff ffc8 	bl	8007064 <__swhatbuf_r>
 80070d4:	9f00      	ldr	r7, [sp, #0]
 80070d6:	4605      	mov	r5, r0
 80070d8:	4639      	mov	r1, r7
 80070da:	4630      	mov	r0, r6
 80070dc:	f7ff fad2 	bl	8006684 <_malloc_r>
 80070e0:	b948      	cbnz	r0, 80070f6 <__smakebuf_r+0x46>
 80070e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e6:	059a      	lsls	r2, r3, #22
 80070e8:	d4ee      	bmi.n	80070c8 <__smakebuf_r+0x18>
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	f043 0302 	orr.w	r3, r3, #2
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	e7e2      	b.n	80070bc <__smakebuf_r+0xc>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	6020      	str	r0, [r4, #0]
 80070fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007106:	b15b      	cbz	r3, 8007120 <__smakebuf_r+0x70>
 8007108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800710c:	4630      	mov	r0, r6
 800710e:	f000 f81d 	bl	800714c <_isatty_r>
 8007112:	b128      	cbz	r0, 8007120 <__smakebuf_r+0x70>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	431d      	orrs	r5, r3
 8007124:	81a5      	strh	r5, [r4, #12]
 8007126:	e7cf      	b.n	80070c8 <__smakebuf_r+0x18>

08007128 <_fstat_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d07      	ldr	r5, [pc, #28]	@ (8007148 <_fstat_r+0x20>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	f7fa fb03 	bl	8001740 <_fstat>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d102      	bne.n	8007144 <_fstat_r+0x1c>
 800713e:	682b      	ldr	r3, [r5, #0]
 8007140:	b103      	cbz	r3, 8007144 <_fstat_r+0x1c>
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	bf00      	nop
 8007148:	20000468 	.word	0x20000468

0800714c <_isatty_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d06      	ldr	r5, [pc, #24]	@ (8007168 <_isatty_r+0x1c>)
 8007150:	2300      	movs	r3, #0
 8007152:	4604      	mov	r4, r0
 8007154:	4608      	mov	r0, r1
 8007156:	602b      	str	r3, [r5, #0]
 8007158:	f7fa fb02 	bl	8001760 <_isatty>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_isatty_r+0x1a>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_isatty_r+0x1a>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	20000468 	.word	0x20000468

0800716c <roundf>:
 800716c:	ee10 0a10 	vmov	r0, s0
 8007170:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007174:	3a7f      	subs	r2, #127	@ 0x7f
 8007176:	2a16      	cmp	r2, #22
 8007178:	dc15      	bgt.n	80071a6 <roundf+0x3a>
 800717a:	2a00      	cmp	r2, #0
 800717c:	da08      	bge.n	8007190 <roundf+0x24>
 800717e:	3201      	adds	r2, #1
 8007180:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8007184:	d101      	bne.n	800718a <roundf+0x1e>
 8007186:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800718a:	ee00 3a10 	vmov	s0, r3
 800718e:	4770      	bx	lr
 8007190:	4907      	ldr	r1, [pc, #28]	@ (80071b0 <roundf+0x44>)
 8007192:	4111      	asrs	r1, r2
 8007194:	4201      	tst	r1, r0
 8007196:	d0fa      	beq.n	800718e <roundf+0x22>
 8007198:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800719c:	4113      	asrs	r3, r2
 800719e:	4403      	add	r3, r0
 80071a0:	ea23 0301 	bic.w	r3, r3, r1
 80071a4:	e7f1      	b.n	800718a <roundf+0x1e>
 80071a6:	2a80      	cmp	r2, #128	@ 0x80
 80071a8:	d1f1      	bne.n	800718e <roundf+0x22>
 80071aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80071ae:	4770      	bx	lr
 80071b0:	007fffff 	.word	0x007fffff

080071b4 <_init>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr

080071c0 <_fini>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr
