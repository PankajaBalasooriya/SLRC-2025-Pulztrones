
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b054  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800b228  0800b228  0000c228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba14  0800ba14  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ba14  0800ba14  0000ca14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba1c  0800ba1c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba1c  0800ba1c  0000ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba20  0800ba20  0000ca20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ba24  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  200001d4  0800bbf8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc0  0800bbf8  0000dcc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161b0  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003699  00000000  00000000  000233b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00026a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103c  00000000  00000000  00027f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fdf  00000000  00000000  00028f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5be  00000000  00000000  0004ff5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7199  00000000  00000000  0006c519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001536b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006880  00000000  00000000  001536f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00159f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b20c 	.word	0x0800b20c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800b20c 	.word	0x0800b20c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d901      	bls.n	8000fe8 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff8:	4823      	ldr	r0, [pc, #140]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 8000ffa:	f003 fb41 	bl	8004680 <HAL_GPIO_WritePin>
 8000ffe:	e005      	b.n	800100c <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001006:	4820      	ldr	r0, [pc, #128]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 8001008:	f003 fb3a 	bl	8004680 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101c:	481a      	ldr	r0, [pc, #104]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 800101e:	f003 fb2f 	bl	8004680 <HAL_GPIO_WritePin>
 8001022:	e005      	b.n	8001030 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102a:	4817      	ldr	r0, [pc, #92]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 800102c:	f003 fb28 	bl	8004680 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001040:	4811      	ldr	r0, [pc, #68]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 8001042:	f003 fb1d 	bl	8004680 <HAL_GPIO_WritePin>
 8001046:	e005      	b.n	8001054 <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 8001050:	f003 fb16 	bl	8004680 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001064:	4808      	ldr	r0, [pc, #32]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 8001066:	f003 fb0b 	bl	8004680 <HAL_GPIO_WritePin>
 800106a:	e005      	b.n	8001078 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <AnalogMux_SelectChannel+0xb4>)
 8001074:	f003 fb04 	bl	8004680 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 f8b7 	bl	80011ec <delayMicroseconds>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40020400 	.word	0x40020400

0800108c <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <AnalogMux_ReadADC+0x38>)
 8001098:	f002 f904 	bl	80032a4 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800109c:	2164      	movs	r1, #100	@ 0x64
 800109e:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <AnalogMux_ReadADC+0x38>)
 80010a0:	f002 fa05 	bl	80034ae <HAL_ADC_PollForConversion>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <AnalogMux_ReadADC+0x38>)
 80010ac:	f002 fa8a 	bl	80035c4 <HAL_ADC_GetValue>
 80010b0:	4603      	mov	r3, r0
 80010b2:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <AnalogMux_ReadADC+0x38>)
 80010b6:	f002 f9c7 	bl	8003448 <HAL_ADC_Stop>

    return adcValue;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001f0 	.word	0x200001f0

080010c8 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff7d 	bl	8000fd4 <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 80010da:	2005      	movs	r0, #5
 80010dc:	f000 f886 	bl	80011ec <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 80010e0:	f7ff ffd4 	bl	800108c <AnalogMux_ReadADC>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <Buzzer_On+0x14>)
 80010fa:	f003 fac1 	bl	8004680 <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <Buzzer_Off+0x14>)
 8001112:	f003 fab5 	bl	8004680 <HAL_GPIO_WritePin>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020000 	.word	0x40020000

08001120 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8001128:	f7ff ffe2 	bl	80010f0 <Buzzer_On>
    HAL_Delay(delay);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f002 f851 	bl	80031d4 <HAL_Delay>
    Buzzer_Off();
 8001132:	f7ff ffe9 	bl	8001108 <Buzzer_Off>
    HAL_Delay(delay);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f002 f84c 	bl	80031d4 <HAL_Delay>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 8001148:	f7ff ffd2 	bl	80010f0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800114c:	2064      	movs	r0, #100	@ 0x64
 800114e:	f002 f841 	bl	80031d4 <HAL_Delay>
    Buzzer_Off();
 8001152:	f7ff ffd9 	bl	8001108 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001156:	2064      	movs	r0, #100	@ 0x64
 8001158:	f002 f83c 	bl	80031d4 <HAL_Delay>

    Buzzer_On();
 800115c:	f7ff ffc8 	bl	80010f0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001160:	2064      	movs	r0, #100	@ 0x64
 8001162:	f002 f837 	bl	80031d4 <HAL_Delay>
    Buzzer_Off();
 8001166:	f7ff ffcf 	bl	8001108 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800116a:	2064      	movs	r0, #100	@ 0x64
 800116c:	f002 f832 	bl	80031d4 <HAL_Delay>

    Buzzer_On();
 8001170:	f7ff ffbe 	bl	80010f0 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001174:	20c8      	movs	r0, #200	@ 0xc8
 8001176:	f002 f82d 	bl	80031d4 <HAL_Delay>
    Buzzer_Off();
 800117a:	f7ff ffc5 	bl	8001108 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800117e:	2064      	movs	r0, #100	@ 0x64
 8001180:	f002 f828 	bl	80031d4 <HAL_Delay>

    Buzzer_On();
 8001184:	f7ff ffb4 	bl	80010f0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001188:	2064      	movs	r0, #100	@ 0x64
 800118a:	f002 f823 	bl	80031d4 <HAL_Delay>
    Buzzer_Off();
 800118e:	f7ff ffbb 	bl	8001108 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001192:	2064      	movs	r0, #100	@ 0x64
 8001194:	f002 f81e 	bl	80031d4 <HAL_Delay>

    Buzzer_On();
 8001198:	f7ff ffaa 	bl	80010f0 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 800119c:	20c8      	movs	r0, #200	@ 0xc8
 800119e:	f002 f819 	bl	80031d4 <HAL_Delay>
    Buzzer_Off();
 80011a2:	f7ff ffb1 	bl	8001108 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <Delay_Init+0x38>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10e      	bne.n	80011da <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <Delay_Init+0x38>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <Delay_Init+0x38>)
 80011c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011c6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <Delay_Init+0x3c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <Delay_Init+0x3c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <Delay_Init+0x3c>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6013      	str	r3, [r2, #0]
    }
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000edf0 	.word	0xe000edf0
 80011e8:	e0001000 	.word	0xe0001000

080011ec <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <delayMicroseconds+0x38>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	22b4      	movs	r2, #180	@ 0xb4
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001204:	bf00      	nop
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <delayMicroseconds+0x38>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f8      	bhi.n	8001206 <delayMicroseconds+0x1a>
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e0001000 	.word	0xe0001000

08001228 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 800122c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001232:	b21b      	sxth	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <getLeftEncoderCounts+0x14>)
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	b21b      	sxth	r3, r3
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40010000 	.word	0x40010000

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f001 ff47 	bl	80030f0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f8b9 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f000 fb9b 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800126a:	f000 fb79 	bl	8001960 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800126e:	f000 faf9 	bl	8001864 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001272:	f000 f9d1 	bl	8001618 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001276:	f000 fa27 	bl	80016c8 <MX_TIM2_Init>
  MX_I2C2_Init();
 800127a:	f000 f99f 	bl	80015bc <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800127e:	f000 fb1b 	bl	80018b8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001282:	f000 fb43 	bl	800190c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001286:	f000 f919 	bl	80014bc <MX_ADC1_Init>
  MX_I2C1_Init();
 800128a:	f000 f969 	bl	8001560 <MX_I2C1_Init>
  MX_TIM3_Init();
 800128e:	f000 fa6f 	bl	8001770 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001292:	213c      	movs	r1, #60	@ 0x3c
 8001294:	4840      	ldr	r0, [pc, #256]	@ (8001398 <main+0x140>)
 8001296:	f005 fcd5 	bl	8006c44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800129a:	213c      	movs	r1, #60	@ 0x3c
 800129c:	483f      	ldr	r0, [pc, #252]	@ (800139c <main+0x144>)
 800129e:	f005 fcd1 	bl	8006c44 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	483e      	ldr	r0, [pc, #248]	@ (80013a0 <main+0x148>)
 80012a6:	f005 fb5f 	bl	8006968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012aa:	2104      	movs	r1, #4
 80012ac:	483c      	ldr	r0, [pc, #240]	@ (80013a0 <main+0x148>)
 80012ae:	f005 fb5b 	bl	8006968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012b2:	2108      	movs	r1, #8
 80012b4:	483a      	ldr	r0, [pc, #232]	@ (80013a0 <main+0x148>)
 80012b6:	f005 fb57 	bl	8006968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012ba:	210c      	movs	r1, #12
 80012bc:	4838      	ldr	r0, [pc, #224]	@ (80013a0 <main+0x148>)
 80012be:	f005 fb53 	bl	8006968 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 80012c2:	f001 fca9 	bl	8002c18 <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 80012c6:	2301      	movs	r3, #1
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2340      	movs	r3, #64	@ 0x40
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2380      	movs	r3, #128	@ 0x80
 80012d0:	4a34      	ldr	r2, [pc, #208]	@ (80013a4 <main+0x14c>)
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f001 fe09 	bl	8002eec <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 80012da:	f001 fd61 	bl	8002da0 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 80012de:	f7ff ff31 	bl	8001144 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 80012e2:	f7ff ff63 	bl	80011ac <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();

  UART_Init(&huart6);
 80012e6:	4830      	ldr	r0, [pc, #192]	@ (80013a8 <main+0x150>)
 80012e8:	f001 fc29 	bl	8002b3e <UART_Init>

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 80012ec:	2032      	movs	r0, #50	@ 0x32
 80012ee:	f000 fe2b 	bl	8001f48 <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 80012f2:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80013ac <main+0x154>
 80012f6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80013b0 <main+0x158>
 80012fa:	492e      	ldr	r1, [pc, #184]	@ (80013b4 <main+0x15c>)
 80012fc:	200b      	movs	r0, #11
 80012fe:	f000 fe47 	bl	8001f90 <Servo_Register>
 8001302:	60f8      	str	r0, [r7, #12]
  int arm = Servo_Register(13, "arm", 0, 180);
 8001304:	eddf 0a29 	vldr	s1, [pc, #164]	@ 80013ac <main+0x154>
 8001308:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80013b0 <main+0x158>
 800130c:	492a      	ldr	r1, [pc, #168]	@ (80013b8 <main+0x160>)
 800130e:	200d      	movs	r0, #13
 8001310:	f000 fe3e 	bl	8001f90 <Servo_Register>
 8001314:	60b8      	str	r0, [r7, #8]
  int base = Servo_Register(15, "base", 0, 180);
 8001316:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80013ac <main+0x154>
 800131a:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80013b0 <main+0x158>
 800131e:	4927      	ldr	r1, [pc, #156]	@ (80013bc <main+0x164>)
 8001320:	200f      	movs	r0, #15
 8001322:	f000 fe35 	bl	8001f90 <Servo_Register>
 8001326:	6078      	str	r0, [r7, #4]

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 8001328:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80013c0 <main+0x168>
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 ff23 	bl	8002178 <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 8001332:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80013c4 <main+0x16c>
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f000 ff1e 	bl	8002178 <Servo_SetAngle>

  // Or use them by name
  Servo_SetAngleByName("base", 90);  // Set base to 120 degrees
 800133c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80013c8 <main+0x170>
 8001340:	481e      	ldr	r0, [pc, #120]	@ (80013bc <main+0x164>)
 8001342:	f000 ff8d 	bl	8002260 <Servo_SetAngleByName>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f7ff feea 	bl	8001120 <Buzzer_Toggle>

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

  HAL_Delay(2000);
 800134c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001350:	f001 ff40 	bl	80031d4 <HAL_Delay>
  RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 8001354:	2101      	movs	r1, #1
 8001356:	481d      	ldr	r0, [pc, #116]	@ (80013cc <main+0x174>)
 8001358:	f000 fd14 	bl	8001d84 <RAYKHA_Calibrate>

  Buzzer_Toggle(100);
 800135c:	2064      	movs	r0, #100	@ 0x64
 800135e:	f7ff fedf 	bl	8001120 <Buzzer_Toggle>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  left_counts = getLeftEncoderCounts();
 8001362:	f7ff ff6d 	bl	8001240 <getLeftEncoderCounts>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <main+0x178>)
 800136c:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 800136e:	f7ff ff5b 	bl	8001228 <getRightEncoderCounts>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <main+0x17c>)
 8001378:	801a      	strh	r2, [r3, #0]

	  UART_Transmit_IR(&huart6, left_counts, right_counts);
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <main+0x178>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <main+0x17c>)
 8001384:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001388:	b292      	uxth	r2, r2
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <main+0x150>)
 800138e:	f001 fbe1 	bl	8002b54 <UART_Transmit_IR>
	  left_counts = getLeftEncoderCounts();
 8001392:	bf00      	nop
 8001394:	e7e5      	b.n	8001362 <main+0x10a>
 8001396:	bf00      	nop
 8001398:	200002e0 	.word	0x200002e0
 800139c:	20000328 	.word	0x20000328
 80013a0:	20000370 	.word	0x20000370
 80013a4:	0800b298 	.word	0x0800b298
 80013a8:	20000448 	.word	0x20000448
 80013ac:	43340000 	.word	0x43340000
 80013b0:	00000000 	.word	0x00000000
 80013b4:	0800b228 	.word	0x0800b228
 80013b8:	0800b230 	.word	0x0800b230
 80013bc:	0800b234 	.word	0x0800b234
 80013c0:	420c0000 	.word	0x420c0000
 80013c4:	42c80000 	.word	0x42c80000
 80013c8:	42b40000 	.word	0x42b40000
 80013cc:	200004f4 	.word	0x200004f4
 80013d0:	200004f0 	.word	0x200004f0
 80013d4:	200004f2 	.word	0x200004f2

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	@ 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2234      	movs	r2, #52	@ 0x34
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 fe2f 	bl	800904a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <SystemClock_Config+0xdc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a2b      	ldr	r2, [pc, #172]	@ (80014b4 <SystemClock_Config+0xdc>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <SystemClock_Config+0xdc>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <SystemClock_Config+0xe0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a25      	ldr	r2, [pc, #148]	@ (80014b8 <SystemClock_Config+0xe0>)
 8001422:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <SystemClock_Config+0xe0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001448:	2308      	movs	r3, #8
 800144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800144c:	23b4      	movs	r3, #180	@ 0xb4
 800144e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001454:	2302      	movs	r3, #2
 8001456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4618      	mov	r0, r3
 8001462:	f004 ff93 	bl	800638c <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800146c:	f000 fb3e 	bl	8001aec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001470:	f004 fbf2 	bl	8005c58 <HAL_PWREx_EnableOverDrive>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800147a:	f000 fb37 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800148e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	2105      	movs	r1, #5
 800149c:	4618      	mov	r0, r3
 800149e:	f004 fc2b 	bl	8005cf8 <HAL_RCC_ClockConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014a8:	f000 fb20 	bl	8001aec <Error_Handler>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3750      	adds	r7, #80	@ 0x50
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000

080014bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <MX_ADC1_Init+0x9c>)
 80014d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fc:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <MX_ADC1_Init+0xa0>)
 8001500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_ADC1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <MX_ADC1_Init+0x98>)
 800150a:	2201      	movs	r2, #1
 800150c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_ADC1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_ADC1_Init+0x98>)
 8001518:	2201      	movs	r2, #1
 800151a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151c:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_ADC1_Init+0x98>)
 800151e:	f001 fe7d 	bl	800321c <HAL_ADC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001528:	f000 fae0 	bl	8001aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800152c:	230a      	movs	r3, #10
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_ADC1_Init+0x98>)
 800153e:	f002 f84f 	bl	80035e0 <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001548:	f000 fad0 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200001f0 	.word	0x200001f0
 8001558:	40012000 	.word	0x40012000
 800155c:	0f000001 	.word	0x0f000001

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <MX_I2C1_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800159e:	f003 f889 	bl	80046b4 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f000 faa0 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000238 	.word	0x20000238
 80015b4:	40005400 	.word	0x40005400
 80015b8:	00061a80 	.word	0x00061a80

080015bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_I2C2_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_I2C2_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_I2C2_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_I2C2_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_I2C2_Init+0x50>)
 80015fa:	f003 f85b 	bl	80046b4 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 fa72 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000028c 	.word	0x2000028c
 8001610:	40005800 	.word	0x40005800
 8001614:	000186a0 	.word	0x000186a0

08001618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2224      	movs	r2, #36	@ 0x24
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f007 fd0f 	bl	800904a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 8001636:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <MX_TIM1_Init+0xac>)
 8001638:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001646:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 8001648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800164c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001660:	2303      	movs	r3, #3
 8001662:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001668:	2301      	movs	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001678:	2301      	movs	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 800168c:	f005 fa34 	bl	8006af8 <HAL_TIM_Encoder_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001696:	f000 fa29 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	@ (80016c0 <MX_TIM1_Init+0xa8>)
 80016a8:	f005 fe9e 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016b2:	f000 fa1b 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3730      	adds	r7, #48	@ 0x30
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002e0 	.word	0x200002e0
 80016c4:	40010000 	.word	0x40010000

080016c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2224      	movs	r2, #36	@ 0x24
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f007 fcb7 	bl	800904a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <MX_TIM2_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <MX_TIM2_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800170c:	2303      	movs	r3, #3
 800170e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001724:	2301      	movs	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	@ (800176c <MX_TIM2_Init+0xa4>)
 8001738:	f005 f9de 	bl	8006af8 <HAL_TIM_Encoder_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001742:	f000 f9d3 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	@ (800176c <MX_TIM2_Init+0xa4>)
 8001754:	f005 fe48 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800175e:	f000 f9c5 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3730      	adds	r7, #48	@ 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000328 	.word	0x20000328

08001770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001792:	4b32      	ldr	r3, [pc, #200]	@ (800185c <MX_TIM3_Init+0xec>)
 8001794:	4a32      	ldr	r2, [pc, #200]	@ (8001860 <MX_TIM3_Init+0xf0>)
 8001796:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001798:	4b30      	ldr	r3, [pc, #192]	@ (800185c <MX_TIM3_Init+0xec>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <MX_TIM3_Init+0xec>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80017a4:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <MX_TIM3_Init+0xec>)
 80017a6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80017aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <MX_TIM3_Init+0xec>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <MX_TIM3_Init+0xec>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017b8:	4828      	ldr	r0, [pc, #160]	@ (800185c <MX_TIM3_Init+0xec>)
 80017ba:	f005 f885 	bl	80068c8 <HAL_TIM_PWM_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017c4:	f000 f992 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4619      	mov	r1, r3
 80017d6:	4821      	ldr	r0, [pc, #132]	@ (800185c <MX_TIM3_Init+0xec>)
 80017d8:	f005 fe06 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017e2:	f000 f983 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e6:	2360      	movs	r3, #96	@ 0x60
 80017e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4817      	ldr	r0, [pc, #92]	@ (800185c <MX_TIM3_Init+0xec>)
 80017fe:	f005 faaf 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001808:	f000 f970 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2204      	movs	r2, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4812      	ldr	r0, [pc, #72]	@ (800185c <MX_TIM3_Init+0xec>)
 8001814:	f005 faa4 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800181e:	f000 f965 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2208      	movs	r2, #8
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <MX_TIM3_Init+0xec>)
 800182a:	f005 fa99 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001834:	f000 f95a 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	220c      	movs	r2, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	@ (800185c <MX_TIM3_Init+0xec>)
 8001840:	f005 fa8e 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800184a:	f000 f94f 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800184e:	4803      	ldr	r0, [pc, #12]	@ (800185c <MX_TIM3_Init+0xec>)
 8001850:	f000 ff0a 	bl	8002668 <HAL_TIM_MspPostInit>

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	@ 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000370 	.word	0x20000370
 8001860:	40000400 	.word	0x40000400

08001864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <MX_USART2_UART_Init+0x50>)
 800186c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800189c:	f005 fe20 	bl	80074e0 <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018a6:	f000 f921 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200003b8 	.word	0x200003b8
 80018b4:	40004400 	.word	0x40004400

080018b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <MX_USART3_UART_Init+0x50>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_USART3_UART_Init+0x4c>)
 80018f0:	f005 fdf6 	bl	80074e0 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018fa:	f000 f8f7 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000400 	.word	0x20000400
 8001908:	40004800 	.word	0x40004800

0800190c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <MX_USART6_UART_Init+0x50>)
 8001914:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 8001918:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800191c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_USART6_UART_Init+0x4c>)
 8001944:	f005 fdcc 	bl	80074e0 <HAL_UART_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800194e:	f000 f8cd 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000448 	.word	0x20000448
 800195c:	40011400 	.word	0x40011400

08001960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_DMA_Init+0x3c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a0b      	ldr	r2, [pc, #44]	@ (800199c <MX_DMA_Init+0x3c>)
 8001970:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_DMA_Init+0x3c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2039      	movs	r0, #57	@ 0x39
 8001988:	f002 f933 	bl	8003bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800198c:	2039      	movs	r0, #57	@ 0x39
 800198e:	f002 f94c 	bl	8003c2a <HAL_NVIC_EnableIRQ>

}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b48      	ldr	r3, [pc, #288]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a47      	ldr	r2, [pc, #284]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b45      	ldr	r3, [pc, #276]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a40      	ldr	r2, [pc, #256]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b3e      	ldr	r3, [pc, #248]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a39      	ldr	r2, [pc, #228]	@ (8001adc <MX_GPIO_Init+0x13c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <MX_GPIO_Init+0x13c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b33      	ldr	r3, [pc, #204]	@ (8001adc <MX_GPIO_Init+0x13c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a32      	ldr	r2, [pc, #200]	@ (8001adc <MX_GPIO_Init+0x13c>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <MX_GPIO_Init+0x13c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIRPUMP_Pin|WATERPUMP_Pin, GPIO_PIN_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	2106      	movs	r1, #6
 8001a2a:	482d      	ldr	r0, [pc, #180]	@ (8001ae0 <MX_GPIO_Init+0x140>)
 8001a2c:	f002 fe28 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2120      	movs	r1, #32
 8001a34:	482b      	ldr	r0, [pc, #172]	@ (8001ae4 <MX_GPIO_Init+0x144>)
 8001a36:	f002 fe23 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001a40:	4829      	ldr	r0, [pc, #164]	@ (8001ae8 <MX_GPIO_Init+0x148>)
 8001a42:	f002 fe1d 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a4c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4820      	ldr	r0, [pc, #128]	@ (8001ae0 <MX_GPIO_Init+0x140>)
 8001a5e:	f002 fc7b 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRPUMP_Pin WATERPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin|WATERPUMP_Pin;
 8001a62:	2306      	movs	r3, #6
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4819      	ldr	r0, [pc, #100]	@ (8001ae0 <MX_GPIO_Init+0x140>)
 8001a7a:	f002 fc6d 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4813      	ldr	r0, [pc, #76]	@ (8001ae4 <MX_GPIO_Init+0x144>)
 8001a96:	f002 fc5f 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8001a9a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <MX_GPIO_Init+0x148>)
 8001ab4:	f002 fc50 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ab8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <MX_GPIO_Init+0x140>)
 8001ace:	f002 fc43 	bl	8004358 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <Error_Handler+0x8>

08001af8 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	460b      	mov	r3, r1
 8001b04:	71bb      	strb	r3, [r7, #6]
 8001b06:	4613      	mov	r3, r2
 8001b08:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	230a      	movs	r3, #10
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f107 030f 	add.w	r3, r7, #15
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	2180      	movs	r1, #128	@ 0x80
 8001b20:	4819      	ldr	r0, [pc, #100]	@ (8001b88 <PCA9685_SetBit+0x90>)
 8001b22:	f003 f903 	bl	8004d2c <HAL_I2C_Mem_Read>
  if (Value == 0)
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10d      	bne.n	8001b48 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e00a      	b.n	8001b5e <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	b25a      	sxtb	r2, r3
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	230a      	movs	r3, #10
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	f107 030f 	add.w	r3, r7, #15
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	2180      	movs	r1, #128	@ 0x80
 8001b74:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <PCA9685_SetBit+0x90>)
 8001b76:	f002 ffdf 	bl	8004b38 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f001 fb2a 	bl	80031d4 <HAL_Delay>
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000028c 	.word	0x2000028c

08001b8c <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d902      	bls.n	8001ba6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e00c      	b.n	8001bc0 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2b18      	cmp	r3, #24
 8001baa:	d802      	bhi.n	8001bb2 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 8001bac:	23ff      	movs	r3, #255	@ 0xff
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e006      	b.n	8001bc0 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	031b      	lsls	r3, r3, #12
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <PCA9685_SetPWMFrequency+0x74>)
 8001bb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff ff97 	bl	8001af8 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8001bca:	230a      	movs	r3, #10
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	f107 030f 	add.w	r3, r7, #15
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	22fe      	movs	r2, #254	@ 0xfe
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	4809      	ldr	r0, [pc, #36]	@ (8001c04 <PCA9685_SetPWMFrequency+0x78>)
 8001be0:	f002 ffaa 	bl	8004b38 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2104      	movs	r1, #4
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff ff85 	bl	8001af8 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2107      	movs	r1, #7
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff ff80 	bl	8001af8 <PCA9685_SetBit>
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	017d7840 	.word	0x017d7840
 8001c04:	2000028c 	.word	0x2000028c

08001c08 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ffb9 	bl	8001b8c <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff ff6a 	bl	8001af8 <PCA9685_SetBit>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af04      	add	r7, sp, #16
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	460b      	mov	r3, r1
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3306      	adds	r3, #6
 8001c46:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8001c48:	88bb      	ldrh	r3, [r7, #4]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2304      	movs	r3, #4
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <PCA9685_SetPWM+0x60>)
 8001c80:	f002 ff5a 	bl	8004b38 <HAL_I2C_Mem_Write>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000028c 	.word	0x2000028c

08001c90 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	ed87 0a00 	vstr	s0, [r7]
 8001c9c:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 8001c9e:	edd7 7a00 	vldr	s15, [r7]
 8001ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	d502      	bpl.n	8001cb2 <PCA9685_SetServoAngle+0x22>
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8001cb2:	edd7 7a00 	vldr	s15, [r7]
 8001cb6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001d40 <PCA9685_SetServoAngle+0xb0>
 8001cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	dd01      	ble.n	8001cc8 <PCA9685_SetServoAngle+0x38>
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <PCA9685_SetServoAngle+0xb4>)
 8001cc6:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8001cc8:	6838      	ldr	r0, [r7, #0]
 8001cca:	f7fe fc6d 	bl	80005a8 <__aeabi_f2d>
 8001cce:	a318      	add	r3, pc, #96	@ (adr r3, 8001d30 <PCA9685_SetServoAngle+0xa0>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fcc0 	bl	8000658 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <PCA9685_SetServoAngle+0xb8>)
 8001ce6:	f7fe fde1 	bl	80008ac <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	a311      	add	r3, pc, #68	@ (adr r3, 8001d38 <PCA9685_SetServoAngle+0xa8>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe faf8 	bl	80002ec <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff80 	bl	8000c08 <__aeabi_d2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8001d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d14:	ee17 3a90 	vmov	r3, s15
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff84 	bl	8001c2c <PCA9685_SetPWM>
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	f3af 8000 	nop.w
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40799800 	.word	0x40799800
 8001d38:	9999999a 	.word	0x9999999a
 8001d3c:	40599999 	.word	0x40599999
 8001d40:	43340000 	.word	0x43340000
 8001d44:	43340000 	.word	0x43340000
 8001d48:	40668000 	.word	0x40668000

08001d4c <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e00c      	b.n	8001d74 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	18d4      	adds	r4, r2, r3
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f9af 	bl	80010c8 <AnalogMux_ReadChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	3301      	adds	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d9ef      	bls.n	8001d5a <RAYKHA_ReadRaw+0xe>
    }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}

08001d84 <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]

		uint16_t sensor_values[RAYKHA_NUM_SENSORS];

		// Initialize calibration data
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d96:	e013      	b.n	8001dc0 <RAYKHA_Calibrate+0x3c>
		{
			calibration->min_values[i] = 0xFFFF;  // Max possible value
 8001d98:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001da2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			calibration->max_values[i] = 0;       // Min possible value
 8001da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	3308      	adds	r3, #8
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	2200      	movs	r2, #0
 8001db4:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001db6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d9e7      	bls.n	8001d98 <RAYKHA_Calibrate+0x14>
		}

		calibration->line_type = line_type;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    	for(uint8_t i = 0; i < 100; i++){
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001dd6:	e0ad      	b.n	8001f34 <RAYKHA_Calibrate+0x1b0>
    		// Take multiple samples for more accurate calibration
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001dde:	e053      	b.n	8001e88 <RAYKHA_Calibrate+0x104>
			{
				// Read raw sensor values
				RAYKHA_ReadRaw(sensor_values);
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ffb1 	bl	8001d4c <RAYKHA_ReadRaw>

				// Update min and max values
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001df0:	e03e      	b.n	8001e70 <RAYKHA_Calibrate+0xec>
				{
					if (sensor_values[i] < calibration->min_values[i])
 8001df2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	3328      	adds	r3, #40	@ 0x28
 8001dfa:	443b      	add	r3, r7
 8001dfc:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001e00:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d20b      	bcs.n	8001e26 <RAYKHA_Calibrate+0xa2>
					{
						calibration->min_values[i] = sensor_values[i];
 8001e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e12:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	3328      	adds	r3, #40	@ 0x28
 8001e1a:	443b      	add	r3, r7
 8001e1c:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					}
					if (sensor_values[i] > calibration->max_values[i])
 8001e26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	3328      	adds	r3, #40	@ 0x28
 8001e2e:	443b      	add	r3, r7
 8001e30:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001e34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	440b      	add	r3, r1
 8001e40:	889b      	ldrh	r3, [r3, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d90f      	bls.n	8001e66 <RAYKHA_Calibrate+0xe2>
					{
						calibration->max_values[i] = sensor_values[i];
 8001e46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e4a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	3328      	adds	r3, #40	@ 0x28
 8001e52:	443b      	add	r3, r7
 8001e54:	f833 0c1c 	ldrh.w	r0, [r3, #-28]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	f101 0308 	add.w	r3, r1, #8
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	4602      	mov	r2, r0
 8001e64:	809a      	strh	r2, [r3, #4]
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001e66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001e70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	d9bc      	bls.n	8001df2 <RAYKHA_Calibrate+0x6e>
					}
				}

				// Short delay between samples
				HAL_Delay(10);
 8001e78:	200a      	movs	r0, #10
 8001e7a:	f001 f9ab 	bl	80031d4 <HAL_Delay>
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8001e7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e82:	3301      	adds	r3, #1
 8001e84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001e88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d9a7      	bls.n	8001de0 <RAYKHA_Calibrate+0x5c>
			}

			// Add small margins to avoid edge cases
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e96:	e044      	b.n	8001f22 <RAYKHA_Calibrate+0x19e>
			{
				if (calibration->min_values[i] > 20)
 8001e98:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ea2:	2b14      	cmp	r3, #20
 8001ea4:	d90c      	bls.n	8001ec0 <RAYKHA_Calibrate+0x13c>
					calibration->min_values[i] -= 20;
 8001ea6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eb0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001eb4:	3b14      	subs	r3, #20
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001ebe:	e005      	b.n	8001ecc <RAYKHA_Calibrate+0x148>
				else
					calibration->min_values[i] = 0;
 8001ec0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if (calibration->max_values[i] < 4075)
 8001ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	f640 72ea 	movw	r2, #4074	@ 0xfea
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d811      	bhi.n	8001f06 <RAYKHA_Calibrate+0x182>
					calibration->max_values[i] += 20;
 8001ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	3308      	adds	r3, #8
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	889a      	ldrh	r2, [r3, #4]
 8001ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ef4:	3214      	adds	r2, #20
 8001ef6:	b291      	uxth	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	3308      	adds	r3, #8
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	460a      	mov	r2, r1
 8001f02:	809a      	strh	r2, [r3, #4]
 8001f04:	e008      	b.n	8001f18 <RAYKHA_Calibrate+0x194>
				else
					calibration->max_values[i] = 4095;
 8001f06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	3308      	adds	r3, #8
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001f16:	809a      	strh	r2, [r3, #4]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001f18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f26:	2b09      	cmp	r3, #9
 8001f28:	d9b6      	bls.n	8001e98 <RAYKHA_Calibrate+0x114>
    	for(uint8_t i = 0; i < 100; i++){
 8001f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f38:	2b63      	cmp	r3, #99	@ 0x63
 8001f3a:	f67f af4d 	bls.w	8001dd8 <RAYKHA_Calibrate+0x54>
			}
    	}

}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <Servo_Init+0x3c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d110      	bne.n	8001f7c <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fe53 	bl	8001c08 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8001f62:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8001f66:	2100      	movs	r1, #0
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <Servo_Init+0x40>)
 8001f6a:	f007 f86e 	bl	800904a <memset>
    servoCount = 0;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <Servo_Init+0x44>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <Servo_Init+0x3c>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e000      	b.n	8001f7e <Servo_Init+0x36>
        return;
 8001f7c:	bf00      	nop
}
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000761 	.word	0x20000761
 8001f88:	20000520 	.word	0x20000520
 8001f8c:	20000760 	.word	0x20000760

08001f90 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f9e:	edc7 0a00 	vstr	s1, [r7]
 8001fa2:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 8001fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8002160 <Servo_Register+0x1d0>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <Servo_Register+0x22>
        return -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	e0d1      	b.n	8002156 <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002164 <Servo_Register+0x1d4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	d902      	bls.n	8001fc0 <Servo_Register+0x30>
        return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e0ca      	b.n	8002156 <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	d902      	bls.n	8001fcc <Servo_Register+0x3c>
        return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e0c4      	b.n	8002156 <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e01b      	b.n	800200a <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 8001fd2:	4965      	ldr	r1, [pc, #404]	@ (8002168 <Servo_Register+0x1d8>)
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3310      	adds	r3, #16
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <Servo_Register+0x74>
 8001fe8:	495f      	ldr	r1, [pc, #380]	@ (8002168 <Servo_Register+0x1d8>)
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d102      	bne.n	8002004 <Servo_Register+0x74>
            return -1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e0a8      	b.n	8002156 <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <Servo_Register+0x1d4>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	4293      	cmp	r3, r2
 8002014:	dbdd      	blt.n	8001fd2 <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8002016:	edd7 7a01 	vldr	s15, [r7, #4]
 800201a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002022:	d502      	bpl.n	800202a <Servo_Register+0x9a>
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 800202a:	edd7 7a00 	vldr	s15, [r7]
 800202e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800216c <Servo_Register+0x1dc>
 8002032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	dd01      	ble.n	8002040 <Servo_Register+0xb0>
 800203c:	4b4c      	ldr	r3, [pc, #304]	@ (8002170 <Servo_Register+0x1e0>)
 800203e:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 8002040:	ed97 7a01 	vldr	s14, [r7, #4]
 8002044:	edd7 7a00 	vldr	s15, [r7]
 8002048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	db02      	blt.n	8002058 <Servo_Register+0xc8>
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e07e      	b.n	8002156 <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 8002058:	4b42      	ldr	r3, [pc, #264]	@ (8002164 <Servo_Register+0x1d4>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 800205e:	4942      	ldr	r1, [pc, #264]	@ (8002168 <Servo_Register+0x1d8>)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8002070:	493d      	ldr	r1, [pc, #244]	@ (8002168 <Servo_Register+0x1d8>)
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3304      	adds	r3, #4
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8002084:	4938      	ldr	r1, [pc, #224]	@ (8002168 <Servo_Register+0x1d8>)
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	3308      	adds	r3, #8
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 8002098:	ed97 7a01 	vldr	s14, [r7, #4]
 800209c:	edd7 7a00 	vldr	s15, [r7]
 80020a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ac:	492e      	ldr	r1, [pc, #184]	@ (8002168 <Servo_Register+0x1d8>)
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	330c      	adds	r3, #12
 80020bc:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 80020c0:	4929      	ldr	r1, [pc, #164]	@ (8002168 <Servo_Register+0x1d8>)
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3310      	adds	r3, #16
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d018      	beq.n	800210c <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3310      	adds	r3, #16
 80020e6:	4a20      	ldr	r2, [pc, #128]	@ (8002168 <Servo_Register+0x1d8>)
 80020e8:	4413      	add	r3, r2
 80020ea:	3301      	adds	r3, #1
 80020ec:	220f      	movs	r2, #15
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f006 ffb2 	bl	800905a <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 80020f6:	491c      	ldr	r1, [pc, #112]	@ (8002168 <Servo_Register+0x1d8>)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3320      	adds	r3, #32
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e00d      	b.n	8002128 <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	3310      	adds	r3, #16
 8002118:	4a13      	ldr	r2, [pc, #76]	@ (8002168 <Servo_Register+0x1d8>)
 800211a:	4413      	add	r3, r2
 800211c:	1c58      	adds	r0, r3, #1
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4a14      	ldr	r2, [pc, #80]	@ (8002174 <Servo_Register+0x1e4>)
 8002122:	2110      	movs	r1, #16
 8002124:	f006 fef6 	bl	8008f14 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <Servo_Register+0x1d4>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <Servo_Register+0x1d4>)
 8002132:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <Servo_Register+0x1d8>)
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	330c      	adds	r3, #12
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	eeb0 0a67 	vmov.f32	s0, s15
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fd9e 	bl	8001c90 <PCA9685_SetServoAngle>

    return servoId;
 8002154:	693b      	ldr	r3, [r7, #16]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000761 	.word	0x20000761
 8002164:	20000760 	.word	0x20000760
 8002168:	20000520 	.word	0x20000520
 800216c:	43340000 	.word	0x43340000
 8002170:	43340000 	.word	0x43340000
 8002174:	0800b23c 	.word	0x0800b23c

08002178 <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db10      	blt.n	80021ac <Servo_SetAngle+0x34>
 800218a:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <Servo_SetAngle+0xe0>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4293      	cmp	r3, r2
 8002194:	da0a      	bge.n	80021ac <Servo_SetAngle+0x34>
 8002196:	4931      	ldr	r1, [pc, #196]	@ (800225c <Servo_SetAngle+0xe4>)
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3310      	adds	r3, #16
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <Servo_SetAngle+0x3a>
        return -1;
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	e04d      	b.n	800224e <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 80021b2:	492a      	ldr	r1, [pc, #168]	@ (800225c <Servo_SetAngle+0xe4>)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3304      	adds	r3, #4
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ed97 7a00 	vldr	s14, [r7]
 80021ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	d509      	bpl.n	80021e8 <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 80021d4:	4921      	ldr	r1, [pc, #132]	@ (800225c <Servo_SetAngle+0xe4>)
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3304      	adds	r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 80021e8:	491c      	ldr	r1, [pc, #112]	@ (800225c <Servo_SetAngle+0xe4>)
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3308      	adds	r3, #8
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ed97 7a00 	vldr	s14, [r7]
 8002200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	dd09      	ble.n	800221e <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 800220a:	4914      	ldr	r1, [pc, #80]	@ (800225c <Servo_SetAngle+0xe4>)
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3308      	adds	r3, #8
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 800221e:	490f      	ldr	r1, [pc, #60]	@ (800225c <Servo_SetAngle+0xe4>)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	330c      	adds	r3, #12
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8002232:	490a      	ldr	r1, [pc, #40]	@ (800225c <Servo_SetAngle+0xe4>)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	ed97 0a00 	vldr	s0, [r7]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fd22 	bl	8001c90 <PCA9685_SetServoAngle>

    return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000760 	.word	0x20000760
 800225c:	20000520 	.word	0x20000520

08002260 <Servo_SetAngleByName>:
  * @param  name: Name of the servo
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngleByName(const char* name, float angle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	ed87 0a00 	vstr	s0, [r7]
    if (name == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <Servo_SetAngleByName+0x18>
        return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e00f      	b.n	8002298 <Servo_SetAngleByName+0x38>

    int servoId = Servo_GetIdByName(name);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f811 	bl	80022a0 <Servo_GetIdByName>
 800227e:	60f8      	str	r0, [r7, #12]

    if (servoId >= 0)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db06      	blt.n	8002294 <Servo_SetAngleByName+0x34>
        return Servo_SetAngle(servoId, angle);
 8002286:	ed97 0a00 	vldr	s0, [r7]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7ff ff74 	bl	8002178 <Servo_SetAngle>
 8002290:	4603      	mov	r3, r0
 8002292:	e001      	b.n	8002298 <Servo_SetAngleByName+0x38>
    else
        return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <Servo_GetIdByName>:
  * @brief  Get servo ID by name
  * @param  name: Name of the servo
  * @retval int: Servo ID or -1 if not found
  */
int Servo_GetIdByName(const char* name)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    if (name == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <Servo_GetIdByName+0x14>
        return -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e02a      	b.n	800230a <Servo_GetIdByName+0x6a>

    // Search for servo with the given name
    for (int i = 0; i < servoCount; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e01f      	b.n	80022fa <Servo_GetIdByName+0x5a>
        if (servos[i].initialized && strcmp(servos[i].name, name) == 0)
 80022ba:	4916      	ldr	r1, [pc, #88]	@ (8002314 <Servo_GetIdByName+0x74>)
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3310      	adds	r3, #16
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d011      	beq.n	80022f4 <Servo_GetIdByName+0x54>
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	3310      	adds	r3, #16
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <Servo_GetIdByName+0x74>)
 80022de:	4413      	add	r3, r2
 80022e0:	3301      	adds	r3, #1
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fd ff93 	bl	8000210 <strcmp>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <Servo_GetIdByName+0x54>
            return i;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	e00a      	b.n	800230a <Servo_GetIdByName+0x6a>
    for (int i = 0; i < servoCount; i++) {
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <Servo_GetIdByName+0x78>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4293      	cmp	r3, r2
 8002304:	dbd9      	blt.n	80022ba <Servo_GetIdByName+0x1a>
    }

    return -1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000520 	.word	0x20000520
 8002318:	20000760 	.word	0x20000760

0800231c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_MspInit+0x4c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4a0f      	ldr	r2, [pc, #60]	@ (8002368 <HAL_MspInit+0x4c>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	6453      	str	r3, [r2, #68]	@ 0x44
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <HAL_MspInit+0x4c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_MspInit+0x4c>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	4a08      	ldr	r2, [pc, #32]	@ (8002368 <HAL_MspInit+0x4c>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	@ 0x40
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_MspInit+0x4c>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800235a:	2007      	movs	r0, #7
 800235c:	f001 fc3e 	bl	8003bdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <HAL_ADC_MspInit+0x7c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d127      	bne.n	80023de <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <HAL_ADC_MspInit+0x80>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <HAL_ADC_MspInit+0x80>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <HAL_ADC_MspInit+0x80>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <HAL_ADC_MspInit+0x80>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <HAL_ADC_MspInit+0x80>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <HAL_ADC_MspInit+0x80>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 80023c6:	2301      	movs	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ca:	2303      	movs	r3, #3
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <HAL_ADC_MspInit+0x84>)
 80023da:	f001 ffbd 	bl	8004358 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	@ 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40012000 	.word	0x40012000
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020800 	.word	0x40020800

080023f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a42      	ldr	r2, [pc, #264]	@ (800251c <HAL_I2C_MspInit+0x128>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12c      	bne.n	8002470 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	4b41      	ldr	r3, [pc, #260]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a40      	ldr	r2, [pc, #256]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002432:	23c0      	movs	r3, #192	@ 0xc0
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002436:	2312      	movs	r3, #18
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002442:	2304      	movs	r3, #4
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	4835      	ldr	r0, [pc, #212]	@ (8002524 <HAL_I2C_MspInit+0x130>)
 800244e:	f001 ff83 	bl	8004358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	4b32      	ldr	r3, [pc, #200]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4a31      	ldr	r2, [pc, #196]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 800245c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002460:	6413      	str	r3, [r2, #64]	@ 0x40
 8002462:	4b2f      	ldr	r3, [pc, #188]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800246e:	e050      	b.n	8002512 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2c      	ldr	r2, [pc, #176]	@ (8002528 <HAL_I2C_MspInit+0x134>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d14b      	bne.n	8002512 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6313      	str	r3, [r2, #48]	@ 0x30
 800248a:	4b25      	ldr	r3, [pc, #148]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	4a20      	ldr	r2, [pc, #128]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b8:	2312      	movs	r3, #18
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024c4:	2304      	movs	r3, #4
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4815      	ldr	r0, [pc, #84]	@ (8002524 <HAL_I2C_MspInit+0x130>)
 80024d0:	f001 ff42 	bl	8004358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024da:	2312      	movs	r3, #18
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024e6:	2304      	movs	r3, #4
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	480e      	ldr	r0, [pc, #56]	@ (800252c <HAL_I2C_MspInit+0x138>)
 80024f2:	f001 ff31 	bl	8004358 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	4a08      	ldr	r2, [pc, #32]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002500:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002504:	6413      	str	r3, [r2, #64]	@ 0x40
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_I2C_MspInit+0x12c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
}
 8002512:	bf00      	nop
 8002514:	3730      	adds	r7, #48	@ 0x30
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40005400 	.word	0x40005400
 8002520:	40023800 	.word	0x40023800
 8002524:	40020400 	.word	0x40020400
 8002528:	40005800 	.word	0x40005800
 800252c:	40020800 	.word	0x40020800

08002530 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	@ 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a32      	ldr	r2, [pc, #200]	@ (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12d      	bne.n	80025ae <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	4b31      	ldr	r3, [pc, #196]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	4a30      	ldr	r2, [pc, #192]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44
 8002562:	4b2e      	ldr	r3, [pc, #184]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a29      	ldr	r2, [pc, #164]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 800258a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800259c:	2301      	movs	r3, #1
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	481e      	ldr	r0, [pc, #120]	@ (8002620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80025a8:	f001 fed6 	bl	8004358 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025ac:	e030      	b.n	8002610 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b6:	d12b      	bne.n	8002610 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	4a16      	ldr	r2, [pc, #88]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c8:	4b14      	ldr	r3, [pc, #80]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b10      	ldr	r3, [pc, #64]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	4a0f      	ldr	r2, [pc, #60]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e4:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 80025f0:	2303      	movs	r3, #3
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002600:	2301      	movs	r3, #1
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 031c 	add.w	r3, r7, #28
 8002608:	4619      	mov	r1, r3
 800260a:	4805      	ldr	r0, [pc, #20]	@ (8002620 <HAL_TIM_Encoder_MspInit+0xf0>)
 800260c:	f001 fea4 	bl	8004358 <HAL_GPIO_Init>
}
 8002610:	bf00      	nop
 8002612:	3730      	adds	r7, #48	@ 0x30
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40010000 	.word	0x40010000
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000

08002624 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0b      	ldr	r2, [pc, #44]	@ (8002660 <HAL_TIM_PWM_MspInit+0x3c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10d      	bne.n	8002652 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_TIM_PWM_MspInit+0x40>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	4a09      	ldr	r2, [pc, #36]	@ (8002664 <HAL_TIM_PWM_MspInit+0x40>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	6413      	str	r3, [r2, #64]	@ 0x40
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <HAL_TIM_PWM_MspInit+0x40>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40000400 	.word	0x40000400
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a21      	ldr	r2, [pc, #132]	@ (800270c <HAL_TIM_MspPostInit+0xa4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d13b      	bne.n	8002702 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_TIM_MspPostInit+0xa8>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_TIM_MspPostInit+0xa8>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_TIM_MspPostInit+0xa8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <HAL_TIM_MspPostInit+0xa8>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <HAL_TIM_MspPostInit+0xa8>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <HAL_TIM_MspPostInit+0xa8>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026c2:	23c0      	movs	r3, #192	@ 0xc0
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d2:	2302      	movs	r3, #2
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	480d      	ldr	r0, [pc, #52]	@ (8002714 <HAL_TIM_MspPostInit+0xac>)
 80026de:	f001 fe3b 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026e2:	2303      	movs	r3, #3
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026f2:	2302      	movs	r3, #2
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4806      	ldr	r0, [pc, #24]	@ (8002718 <HAL_TIM_MspPostInit+0xb0>)
 80026fe:	f001 fe2b 	bl	8004358 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	@ 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40000400 	.word	0x40000400
 8002710:	40023800 	.word	0x40023800
 8002714:	40020000 	.word	0x40020000
 8002718:	40020400 	.word	0x40020400

0800271c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	@ 0x38
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a66      	ldr	r2, [pc, #408]	@ (80028d4 <HAL_UART_MspInit+0x1b8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d12c      	bne.n	8002798 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	4b65      	ldr	r3, [pc, #404]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	4a64      	ldr	r2, [pc, #400]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 8002748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274c:	6413      	str	r3, [r2, #64]	@ 0x40
 800274e:	4b62      	ldr	r3, [pc, #392]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	4b5e      	ldr	r3, [pc, #376]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a5d      	ldr	r2, [pc, #372]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b5b      	ldr	r3, [pc, #364]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002776:	230c      	movs	r3, #12
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002786:	2307      	movs	r3, #7
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278e:	4619      	mov	r1, r3
 8002790:	4852      	ldr	r0, [pc, #328]	@ (80028dc <HAL_UART_MspInit+0x1c0>)
 8002792:	f001 fde1 	bl	8004358 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002796:	e099      	b.n	80028cc <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a50      	ldr	r2, [pc, #320]	@ (80028e0 <HAL_UART_MspInit+0x1c4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d12d      	bne.n	80027fe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	4b4c      	ldr	r3, [pc, #304]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	4a4b      	ldr	r2, [pc, #300]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b2:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	4b45      	ldr	r3, [pc, #276]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a44      	ldr	r2, [pc, #272]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b42      	ldr	r3, [pc, #264]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80027da:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027ec:	2307      	movs	r3, #7
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	483b      	ldr	r0, [pc, #236]	@ (80028e4 <HAL_UART_MspInit+0x1c8>)
 80027f8:	f001 fdae 	bl	8004358 <HAL_GPIO_Init>
}
 80027fc:	e066      	b.n	80028cc <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a39      	ldr	r2, [pc, #228]	@ (80028e8 <HAL_UART_MspInit+0x1cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d161      	bne.n	80028cc <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	4a31      	ldr	r2, [pc, #196]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 8002812:	f043 0320 	orr.w	r3, r3, #32
 8002816:	6453      	str	r3, [r2, #68]	@ 0x44
 8002818:	4b2f      	ldr	r3, [pc, #188]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	4a2a      	ldr	r2, [pc, #168]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6313      	str	r3, [r2, #48]	@ 0x30
 8002834:	4b28      	ldr	r3, [pc, #160]	@ (80028d8 <HAL_UART_MspInit+0x1bc>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002840:	23c0      	movs	r3, #192	@ 0xc0
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002850:	2308      	movs	r3, #8
 8002852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002858:	4619      	mov	r1, r3
 800285a:	4822      	ldr	r0, [pc, #136]	@ (80028e4 <HAL_UART_MspInit+0x1c8>)
 800285c:	f001 fd7c 	bl	8004358 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002860:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 8002862:	4a23      	ldr	r2, [pc, #140]	@ (80028f0 <HAL_UART_MspInit+0x1d4>)
 8002864:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 8002868:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800286c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800286e:	4b1f      	ldr	r3, [pc, #124]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002874:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 800287c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002880:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 8002884:	2200      	movs	r2, #0
 8002886:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800288e:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002894:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289a:	4b14      	ldr	r3, [pc, #80]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80028a0:	4812      	ldr	r0, [pc, #72]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 80028a2:	f001 f9dd 	bl	8003c60 <HAL_DMA_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_UART_MspInit+0x194>
      Error_Handler();
 80028ac:	f7ff f91e 	bl	8001aec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a0e      	ldr	r2, [pc, #56]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 80028b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028b6:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <HAL_UART_MspInit+0x1d0>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2047      	movs	r0, #71	@ 0x47
 80028c2:	f001 f996 	bl	8003bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028c6:	2047      	movs	r0, #71	@ 0x47
 80028c8:	f001 f9af 	bl	8003c2a <HAL_NVIC_EnableIRQ>
}
 80028cc:	bf00      	nop
 80028ce:	3738      	adds	r7, #56	@ 0x38
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40004800 	.word	0x40004800
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40011400 	.word	0x40011400
 80028ec:	20000490 	.word	0x20000490
 80028f0:	40026428 	.word	0x40026428

080028f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <NMI_Handler+0x4>

080028fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <HardFault_Handler+0x4>

08002904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <MemManage_Handler+0x4>

0800290c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <BusFault_Handler+0x4>

08002914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <UsageFault_Handler+0x4>

0800291c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294a:	f000 fc23 	bl	8003194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 800294e:	f000 f8ef 	bl	8002b30 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <DMA2_Stream1_IRQHandler+0x10>)
 800295e:	f001 fabf 	bl	8003ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000490 	.word	0x20000490

0800296c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002970:	4802      	ldr	r0, [pc, #8]	@ (800297c <USART6_IRQHandler+0x10>)
 8002972:	f004 fe91 	bl	8007698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000448 	.word	0x20000448

08002980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return 1;
 8002984:	2301      	movs	r3, #1
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_kill>:

int _kill(int pid, int sig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800299a:	f006 fbbb 	bl	8009114 <__errno>
 800299e:	4603      	mov	r3, r0
 80029a0:	2216      	movs	r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
  return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_exit>:

void _exit (int status)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffe7 	bl	8002990 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029c2:	bf00      	nop
 80029c4:	e7fd      	b.n	80029c2 <_exit+0x12>

080029c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e00a      	b.n	80029ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d8:	f3af 8000 	nop.w
 80029dc:	4601      	mov	r1, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	60ba      	str	r2, [r7, #8]
 80029e4:	b2ca      	uxtb	r2, r1
 80029e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	dbf0      	blt.n	80029d8 <_read+0x12>
  }

  return len;
 80029f6:	687b      	ldr	r3, [r7, #4]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e009      	b.n	8002a26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3301      	adds	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	dbf1      	blt.n	8002a12 <_write+0x12>
  }
  return len;
 8002a2e:	687b      	ldr	r3, [r7, #4]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_close>:

int _close(int file)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a60:	605a      	str	r2, [r3, #4]
  return 0;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_isatty>:

int _isatty(int file)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a78:	2301      	movs	r3, #1
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	@ (8002afc <_sbrk+0x5c>)
 8002aaa:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <_sbrk+0x60>)
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002abc:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <_sbrk+0x64>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <_sbrk+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d207      	bcs.n	8002ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad0:	f006 fb20 	bl	8009114 <__errno>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	e009      	b.n	8002af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <_sbrk+0x64>)
 8002af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20020000 	.word	0x20020000
 8002b00:	00000400 	.word	0x00000400
 8002b04:	20000764 	.word	0x20000764
 8002b08:	20000cc0 	.word	0x20000cc0

08002b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <SystemInit+0x20>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <SystemInit+0x20>)
 8002b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <SysTickFunction>:

#include "main.h"
// #include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
//			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
//		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
//		resetEncoders();
//		TIM1->CNT = (int16_t) difference;
//	}
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <UART_Init>:
#include "stdio.h"
#include "string.h"

// UART Initialization function
void UART_Init(UART_HandleTypeDef *huart)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
    // You can customize this function depending on your UART configuration
    // Initialize UART with the desired configuration (baud rate, parity, stop bits, etc.)
    HAL_UART_Init(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f004 fcca 	bl	80074e0 <HAL_UART_Init>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <UART_Transmit_IR>:
    // Transmit the formatted string via UART
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void UART_Transmit_IR(UART_HandleTypeDef *huart, uint16_t IRL, uint16_t IRR)
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b092      	sub	sp, #72	@ 0x48
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	803b      	strh	r3, [r7, #0]
    char buffer[50];  // Buffer to hold the formatted string

    // Format the float value into the buffer with the specified decimal points
    // You can change %.2f to another precision, such as %.3f, %.4f, etc.
    //sprintf(buffer, ">L:%d,R:%d\r\n", IRL, IRR);  // Use header string as prefix
    sprintf(buffer, "%.2f\t%d\t%d\n", HAL_GetTick() / 1000.0, IRL, IRR);  // Use header string as prefix
 8002b64:	f000 fb2a 	bl	80031bc <HAL_GetTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fcfa 	bl	8000564 <__aeabi_ui2d>
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <UART_Transmit_IR+0x68>)
 8002b76:	f7fd fe99 	bl	80008ac <__aeabi_ddiv>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4614      	mov	r4, r2
 8002b80:	461d      	mov	r5, r3
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	883a      	ldrh	r2, [r7, #0]
 8002b86:	f107 000c 	add.w	r0, r7, #12
 8002b8a:	9201      	str	r2, [sp, #4]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4622      	mov	r2, r4
 8002b90:	462b      	mov	r3, r5
 8002b92:	490b      	ldr	r1, [pc, #44]	@ (8002bc0 <UART_Transmit_IR+0x6c>)
 8002b94:	f006 f9f4 	bl	8008f80 <siprintf>

    // Transmit the formatted string via UART
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fb97 	bl	80002d0 <strlen>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	f107 010c 	add.w	r1, r7, #12
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f004 fce6 	bl	8007580 <HAL_UART_Transmit>
}
 8002bb4:	bf00      	nop
 8002bb6:	3740      	adds	r7, #64	@ 0x40
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbc:	408f4000 	.word	0x408f4000
 8002bc0:	0800b258 	.word	0x0800b258

08002bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bc8:	f7ff ffa0 	bl	8002b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bcc:	480c      	ldr	r0, [pc, #48]	@ (8002c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bce:	490d      	ldr	r1, [pc, #52]	@ (8002c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002be4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f006 fa95 	bl	8009120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf6:	f7fe fb2f 	bl	8001258 <main>
  bx  lr    
 8002bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c04:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c08:	0800ba24 	.word	0x0800ba24
  ldr r2, =_sbss
 8002c0c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c10:	20000cc0 	.word	0x20000cc0

08002c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <ADC_IRQHandler>
	...

08002c18 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002c1e:	f000 f9cd 	bl	8002fbc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002c22:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002c26:	2201      	movs	r2, #1
 8002c28:	2178      	movs	r1, #120	@ 0x78
 8002c2a:	485b      	ldr	r0, [pc, #364]	@ (8002d98 <SSD1306_Init+0x180>)
 8002c2c:	f002 fab0 	bl	8005190 <HAL_I2C_IsDeviceReady>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e0a9      	b.n	8002d8e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002c3a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002c3e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002c40:	e002      	b.n	8002c48 <SSD1306_Init+0x30>
		p--;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002c4e:	22ae      	movs	r2, #174	@ 0xae
 8002c50:	2100      	movs	r1, #0
 8002c52:	2078      	movs	r0, #120	@ 0x78
 8002c54:	f000 fa2e 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002c58:	2220      	movs	r2, #32
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2078      	movs	r0, #120	@ 0x78
 8002c5e:	f000 fa29 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002c62:	2210      	movs	r2, #16
 8002c64:	2100      	movs	r1, #0
 8002c66:	2078      	movs	r0, #120	@ 0x78
 8002c68:	f000 fa24 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002c6c:	22b0      	movs	r2, #176	@ 0xb0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2078      	movs	r0, #120	@ 0x78
 8002c72:	f000 fa1f 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002c76:	22c8      	movs	r2, #200	@ 0xc8
 8002c78:	2100      	movs	r1, #0
 8002c7a:	2078      	movs	r0, #120	@ 0x78
 8002c7c:	f000 fa1a 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002c80:	2200      	movs	r2, #0
 8002c82:	2100      	movs	r1, #0
 8002c84:	2078      	movs	r0, #120	@ 0x78
 8002c86:	f000 fa15 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2078      	movs	r0, #120	@ 0x78
 8002c90:	f000 fa10 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002c94:	2240      	movs	r2, #64	@ 0x40
 8002c96:	2100      	movs	r1, #0
 8002c98:	2078      	movs	r0, #120	@ 0x78
 8002c9a:	f000 fa0b 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002c9e:	2281      	movs	r2, #129	@ 0x81
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2078      	movs	r0, #120	@ 0x78
 8002ca4:	f000 fa06 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002ca8:	22ff      	movs	r2, #255	@ 0xff
 8002caa:	2100      	movs	r1, #0
 8002cac:	2078      	movs	r0, #120	@ 0x78
 8002cae:	f000 fa01 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002cb2:	22a1      	movs	r2, #161	@ 0xa1
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2078      	movs	r0, #120	@ 0x78
 8002cb8:	f000 f9fc 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002cbc:	22a6      	movs	r2, #166	@ 0xa6
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2078      	movs	r0, #120	@ 0x78
 8002cc2:	f000 f9f7 	bl	80030b4 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002cc6:	22a8      	movs	r2, #168	@ 0xa8
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2078      	movs	r0, #120	@ 0x78
 8002ccc:	f000 f9f2 	bl	80030b4 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8002cd0:	223f      	movs	r2, #63	@ 0x3f
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2078      	movs	r0, #120	@ 0x78
 8002cd6:	f000 f9ed 	bl	80030b4 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002cda:	22a4      	movs	r2, #164	@ 0xa4
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2078      	movs	r0, #120	@ 0x78
 8002ce0:	f000 f9e8 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002ce4:	22d3      	movs	r2, #211	@ 0xd3
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2078      	movs	r0, #120	@ 0x78
 8002cea:	f000 f9e3 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2078      	movs	r0, #120	@ 0x78
 8002cf4:	f000 f9de 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002cf8:	22d5      	movs	r2, #213	@ 0xd5
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2078      	movs	r0, #120	@ 0x78
 8002cfe:	f000 f9d9 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002d02:	22f0      	movs	r2, #240	@ 0xf0
 8002d04:	2100      	movs	r1, #0
 8002d06:	2078      	movs	r0, #120	@ 0x78
 8002d08:	f000 f9d4 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002d0c:	22d9      	movs	r2, #217	@ 0xd9
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2078      	movs	r0, #120	@ 0x78
 8002d12:	f000 f9cf 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002d16:	2222      	movs	r2, #34	@ 0x22
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2078      	movs	r0, #120	@ 0x78
 8002d1c:	f000 f9ca 	bl	80030b4 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002d20:	22da      	movs	r2, #218	@ 0xda
 8002d22:	2100      	movs	r1, #0
 8002d24:	2078      	movs	r0, #120	@ 0x78
 8002d26:	f000 f9c5 	bl	80030b4 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8002d2a:	2212      	movs	r2, #18
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2078      	movs	r0, #120	@ 0x78
 8002d30:	f000 f9c0 	bl	80030b4 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002d34:	22db      	movs	r2, #219	@ 0xdb
 8002d36:	2100      	movs	r1, #0
 8002d38:	2078      	movs	r0, #120	@ 0x78
 8002d3a:	f000 f9bb 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002d3e:	2220      	movs	r2, #32
 8002d40:	2100      	movs	r1, #0
 8002d42:	2078      	movs	r0, #120	@ 0x78
 8002d44:	f000 f9b6 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002d48:	228d      	movs	r2, #141	@ 0x8d
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	2078      	movs	r0, #120	@ 0x78
 8002d4e:	f000 f9b1 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002d52:	2214      	movs	r2, #20
 8002d54:	2100      	movs	r1, #0
 8002d56:	2078      	movs	r0, #120	@ 0x78
 8002d58:	f000 f9ac 	bl	80030b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002d5c:	22af      	movs	r2, #175	@ 0xaf
 8002d5e:	2100      	movs	r1, #0
 8002d60:	2078      	movs	r0, #120	@ 0x78
 8002d62:	f000 f9a7 	bl	80030b4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002d66:	222e      	movs	r2, #46	@ 0x2e
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2078      	movs	r0, #120	@ 0x78
 8002d6c:	f000 f9a2 	bl	80030b4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f000 f843 	bl	8002dfc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002d76:	f000 f813 	bl	8002da0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <SSD1306_Init+0x184>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <SSD1306_Init+0x184>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <SSD1306_Init+0x184>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002d8c:	2301      	movs	r3, #1
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000238 	.word	0x20000238
 8002d9c:	20000b68 	.word	0x20000b68

08002da0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002da6:	2300      	movs	r3, #0
 8002da8:	71fb      	strb	r3, [r7, #7]
 8002daa:	e01d      	b.n	8002de8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	3b50      	subs	r3, #80	@ 0x50
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	2100      	movs	r1, #0
 8002db6:	2078      	movs	r0, #120	@ 0x78
 8002db8:	f000 f97c 	bl	80030b4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2078      	movs	r0, #120	@ 0x78
 8002dc2:	f000 f977 	bl	80030b4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2078      	movs	r0, #120	@ 0x78
 8002dcc:	f000 f972 	bl	80030b4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	01db      	lsls	r3, r3, #7
 8002dd4:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <SSD1306_UpdateScreen+0x58>)
 8002dd6:	441a      	add	r2, r3
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	2140      	movs	r1, #64	@ 0x40
 8002ddc:	2078      	movs	r0, #120	@ 0x78
 8002dde:	f000 f903 	bl	8002fe8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	3301      	adds	r3, #1
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	2b07      	cmp	r3, #7
 8002dec:	d9de      	bls.n	8002dac <SSD1306_UpdateScreen+0xc>
	}
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000768 	.word	0x20000768

08002dfc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <SSD1306_Fill+0x14>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <SSD1306_Fill+0x16>
 8002e10:	23ff      	movs	r3, #255	@ 0xff
 8002e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e16:	4619      	mov	r1, r3
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <SSD1306_Fill+0x2c>)
 8002e1a:	f006 f916 	bl	800904a <memset>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000768 	.word	0x20000768

08002e2c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
 8002e36:	460b      	mov	r3, r1
 8002e38:	80bb      	strh	r3, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	70fb      	strb	r3, [r7, #3]
	if (
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e42:	d848      	bhi.n	8002ed6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002e44:	88bb      	ldrh	r3, [r7, #4]
 8002e46:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e48:	d845      	bhi.n	8002ed6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002e4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <SSD1306_DrawPixel+0xb8>)
 8002e4c:	791b      	ldrb	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d11a      	bne.n	8002e9c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	88bb      	ldrh	r3, [r7, #4]
 8002e6a:	08db      	lsrs	r3, r3, #3
 8002e6c:	b298      	uxth	r0, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	01db      	lsls	r3, r3, #7
 8002e72:	4413      	add	r3, r2
 8002e74:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <SSD1306_DrawPixel+0xbc>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	b25a      	sxtb	r2, r3
 8002e7a:	88bb      	ldrh	r3, [r7, #4]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b259      	sxtb	r1, r3
 8002e8c:	88fa      	ldrh	r2, [r7, #6]
 8002e8e:	4603      	mov	r3, r0
 8002e90:	01db      	lsls	r3, r3, #7
 8002e92:	4413      	add	r3, r2
 8002e94:	b2c9      	uxtb	r1, r1
 8002e96:	4a14      	ldr	r2, [pc, #80]	@ (8002ee8 <SSD1306_DrawPixel+0xbc>)
 8002e98:	54d1      	strb	r1, [r2, r3]
 8002e9a:	e01d      	b.n	8002ed8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	88bb      	ldrh	r3, [r7, #4]
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	b298      	uxth	r0, r3
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	01db      	lsls	r3, r3, #7
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee8 <SSD1306_DrawPixel+0xbc>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	b25a      	sxtb	r2, r3
 8002eb0:	88bb      	ldrh	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b259      	sxtb	r1, r3
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	4603      	mov	r3, r0
 8002eca:	01db      	lsls	r3, r3, #7
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2c9      	uxtb	r1, r1
 8002ed0:	4a05      	ldr	r2, [pc, #20]	@ (8002ee8 <SSD1306_DrawPixel+0xbc>)
 8002ed2:	54d1      	strb	r1, [r2, r3]
 8002ed4:	e000      	b.n	8002ed8 <SSD1306_DrawPixel+0xac>
		return;
 8002ed6:	bf00      	nop
	}
}
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000b68 	.word	0x20000b68
 8002ee8:	20000768 	.word	0x20000768

08002eec <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60ba      	str	r2, [r7, #8]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	81fb      	strh	r3, [r7, #14]
 8002efa:	460b      	mov	r3, r1
 8002efc:	81bb      	strh	r3, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f06:	3307      	adds	r3, #7
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da00      	bge.n	8002f0e <SSD1306_DrawBitmap+0x22>
 8002f0c:	3307      	adds	r3, #7
 8002f0e:	10db      	asrs	r3, r3, #3
 8002f10:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	82bb      	strh	r3, [r7, #20]
 8002f1a:	e044      	b.n	8002fa6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	827b      	strh	r3, [r7, #18]
 8002f20:	e02f      	b.n	8002f82 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002f22:	8a7b      	ldrh	r3, [r7, #18]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
 8002f32:	e012      	b.n	8002f5a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002f34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f38:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f3c:	fb03 f202 	mul.w	r2, r3, r2
 8002f40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da00      	bge.n	8002f4a <SSD1306_DrawBitmap+0x5e>
 8002f48:	3307      	adds	r3, #7
 8002f4a:	10db      	asrs	r3, r3, #3
 8002f4c:	b21b      	sxth	r3, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da09      	bge.n	8002f76 <SSD1306_DrawBitmap+0x8a>
 8002f62:	89fa      	ldrh	r2, [r7, #14]
 8002f64:	8a7b      	ldrh	r3, [r7, #18]
 8002f66:	4413      	add	r3, r2
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	89b9      	ldrh	r1, [r7, #12]
 8002f6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff5b 	bl	8002e2c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002f76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	827b      	strh	r3, [r7, #18]
 8002f82:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	dbc9      	blt.n	8002f22 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002f8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	82bb      	strh	r3, [r7, #20]
 8002f9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	81bb      	strh	r3, [r7, #12]
 8002fa6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002faa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	dbb4      	blt.n	8002f1c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <ssd1306_I2C_Init+0x28>)
 8002fc4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fc6:	e002      	b.n	8002fce <ssd1306_I2C_Init+0x12>
		p--;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f9      	bne.n	8002fc8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	0003d090 	.word	0x0003d090

08002fe8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b0c7      	sub	sp, #284	@ 0x11c
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002ff6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002ffa:	600a      	str	r2, [r1, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003002:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003006:	4622      	mov	r2, r4
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800300e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003012:	4602      	mov	r2, r0
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800301a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800301e:	460a      	mov	r2, r1
 8003020:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800302a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800302e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800303c:	e015      	b.n	800306a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800303e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003042:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003046:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	441a      	add	r2, r3
 800304e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003052:	3301      	adds	r3, #1
 8003054:	7811      	ldrb	r1, [r2, #0]
 8003056:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800305a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800305e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003060:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003064:	3301      	adds	r3, #1
 8003066:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800306a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800306e:	b29b      	uxth	r3, r3
 8003070:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003074:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d8df      	bhi.n	800303e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800307e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003082:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b299      	uxth	r1, r3
 800308a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800308e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	f107 020c 	add.w	r2, r7, #12
 800309c:	200a      	movs	r0, #10
 800309e:	9000      	str	r0, [sp, #0]
 80030a0:	4803      	ldr	r0, [pc, #12]	@ (80030b0 <ssd1306_I2C_WriteMulti+0xc8>)
 80030a2:	f001 fc4b 	bl	800493c <HAL_I2C_Master_Transmit>
}
 80030a6:	bf00      	nop
 80030a8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd90      	pop	{r4, r7, pc}
 80030b0:	20000238 	.word	0x20000238

080030b4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
 80030be:	460b      	mov	r3, r1
 80030c0:	71bb      	strb	r3, [r7, #6]
 80030c2:	4613      	mov	r3, r2
 80030c4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80030ca:	797b      	ldrb	r3, [r7, #5]
 80030cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	b299      	uxth	r1, r3
 80030d2:	f107 020c 	add.w	r2, r7, #12
 80030d6:	230a      	movs	r3, #10
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2302      	movs	r3, #2
 80030dc:	4803      	ldr	r0, [pc, #12]	@ (80030ec <ssd1306_I2C_Write+0x38>)
 80030de:	f001 fc2d 	bl	800493c <HAL_I2C_Master_Transmit>
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000238 	.word	0x20000238

080030f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003130 <HAL_Init+0x40>)
 80030fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_Init+0x40>)
 8003106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800310a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800310c:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <HAL_Init+0x40>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003118:	2003      	movs	r0, #3
 800311a:	f000 fd5f 	bl	8003bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800311e:	2000      	movs	r0, #0
 8003120:	f000 f808 	bl	8003134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003124:	f7ff f8fa 	bl	800231c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023c00 	.word	0x40023c00

08003134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800313c:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <HAL_InitTick+0x54>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b12      	ldr	r3, [pc, #72]	@ (800318c <HAL_InitTick+0x58>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800314a:	fbb3 f3f1 	udiv	r3, r3, r1
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fd77 	bl	8003c46 <HAL_SYSTICK_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e00e      	b.n	8003180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d80a      	bhi.n	800317e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003168:	2200      	movs	r2, #0
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f000 fd3f 	bl	8003bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003174:	4a06      	ldr	r2, [pc, #24]	@ (8003190 <HAL_InitTick+0x5c>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000000 	.word	0x20000000
 800318c:	20000008 	.word	0x20000008
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_IncTick+0x20>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_IncTick+0x24>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <HAL_IncTick+0x24>)
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000008 	.word	0x20000008
 80031b8:	20000b70 	.word	0x20000b70

080031bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return uwTick;
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <HAL_GetTick+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000b70 	.word	0x20000b70

080031d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff ffee 	bl	80031bc <HAL_GetTick>
 80031e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d005      	beq.n	80031fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <HAL_Delay+0x44>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031fa:	bf00      	nop
 80031fc:	f7ff ffde 	bl	80031bc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d8f7      	bhi.n	80031fc <HAL_Delay+0x28>
  {
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000008 	.word	0x20000008

0800321c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e033      	b.n	800329a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff f896 	bl	800236c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	d118      	bne.n	800328c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003262:	f023 0302 	bic.w	r3, r3, #2
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fae8 	bl	8003844 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
 800328a:	e001      	b.n	8003290 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_ADC_Start+0x1a>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e0b2      	b.n	8003424 <HAL_ADC_Start+0x180>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d018      	beq.n	8003306 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032e4:	4b52      	ldr	r3, [pc, #328]	@ (8003430 <HAL_ADC_Start+0x18c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a52      	ldr	r2, [pc, #328]	@ (8003434 <HAL_ADC_Start+0x190>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9a      	lsrs	r2, r3, #18
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80032f8:	e002      	b.n	8003300 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f9      	bne.n	80032fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d17a      	bne.n	800340a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800333e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003352:	d106      	bne.n	8003362 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	f023 0206 	bic.w	r2, r3, #6
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003360:	e002      	b.n	8003368 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003370:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <HAL_ADC_Start+0x194>)
 8003372:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800337c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2b00      	cmp	r3, #0
 8003388:	d12a      	bne.n	80033e0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2b      	ldr	r2, [pc, #172]	@ (800343c <HAL_ADC_Start+0x198>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d015      	beq.n	80033c0 <HAL_ADC_Start+0x11c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a29      	ldr	r2, [pc, #164]	@ (8003440 <HAL_ADC_Start+0x19c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d105      	bne.n	80033aa <HAL_ADC_Start+0x106>
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_ADC_Start+0x194>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a25      	ldr	r2, [pc, #148]	@ (8003444 <HAL_ADC_Start+0x1a0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d136      	bne.n	8003422 <HAL_ADC_Start+0x17e>
 80033b4:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_ADC_Start+0x194>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d130      	bne.n	8003422 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d129      	bne.n	8003422 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	e020      	b.n	8003422 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a15      	ldr	r2, [pc, #84]	@ (800343c <HAL_ADC_Start+0x198>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d11b      	bne.n	8003422 <HAL_ADC_Start+0x17e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d114      	bne.n	8003422 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e00b      	b.n	8003422 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f043 0210 	orr.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000000 	.word	0x20000000
 8003434:	431bde83 	.word	0x431bde83
 8003438:	40012300 	.word	0x40012300
 800343c:	40012000 	.word	0x40012000
 8003440:	40012100 	.word	0x40012100
 8003444:	40012200 	.word	0x40012200

08003448 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_ADC_Stop+0x16>
 800345a:	2302      	movs	r3, #2
 800345c:	e021      	b.n	80034a2 <HAL_ADC_Stop+0x5a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d113      	bne.n	80034f4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034da:	d10b      	bne.n	80034f4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e063      	b.n	80035bc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f4:	f7ff fe62 	bl	80031bc <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034fa:	e021      	b.n	8003540 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d01d      	beq.n	8003540 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_PollForConversion+0x6c>
 800350a:	f7ff fe57 	bl	80031bc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d212      	bcs.n	8003540 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d00b      	beq.n	8003540 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e03d      	b.n	80035bc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d1d6      	bne.n	80034fc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f06f 0212 	mvn.w	r2, #18
 8003556:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d123      	bne.n	80035ba <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d11f      	bne.n	80035ba <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	d006      	beq.n	8003596 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003592:	2b00      	cmp	r3, #0
 8003594:	d111      	bne.n	80035ba <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x1c>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e113      	b.n	8003824 <HAL_ADC_ConfigChannel+0x244>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b09      	cmp	r3, #9
 800360a:	d925      	bls.n	8003658 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68d9      	ldr	r1, [r3, #12]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	3b1e      	subs	r3, #30
 8003622:	2207      	movs	r2, #7
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43da      	mvns	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	400a      	ands	r2, r1
 8003630:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68d9      	ldr	r1, [r3, #12]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	4618      	mov	r0, r3
 8003644:	4603      	mov	r3, r0
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4403      	add	r3, r0
 800364a:	3b1e      	subs	r3, #30
 800364c:	409a      	lsls	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	e022      	b.n	800369e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6919      	ldr	r1, [r3, #16]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	2207      	movs	r2, #7
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	400a      	ands	r2, r1
 800367a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6919      	ldr	r1, [r3, #16]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	4618      	mov	r0, r3
 800368e:	4603      	mov	r3, r0
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4403      	add	r3, r0
 8003694:	409a      	lsls	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d824      	bhi.n	80036f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	3b05      	subs	r3, #5
 80036b8:	221f      	movs	r2, #31
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43da      	mvns	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	400a      	ands	r2, r1
 80036c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	3b05      	subs	r3, #5
 80036e2:	fa00 f203 	lsl.w	r2, r0, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80036ee:	e04c      	b.n	800378a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d824      	bhi.n	8003742 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	3b23      	subs	r3, #35	@ 0x23
 800370a:	221f      	movs	r2, #31
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43da      	mvns	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	400a      	ands	r2, r1
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	4618      	mov	r0, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	3b23      	subs	r3, #35	@ 0x23
 8003734:	fa00 f203 	lsl.w	r2, r0, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003740:	e023      	b.n	800378a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	3b41      	subs	r3, #65	@ 0x41
 8003754:	221f      	movs	r2, #31
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	3b41      	subs	r3, #65	@ 0x41
 800377e:	fa00 f203 	lsl.w	r2, r0, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800378a:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <HAL_ADC_ConfigChannel+0x250>)
 800378c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a28      	ldr	r2, [pc, #160]	@ (8003834 <HAL_ADC_ConfigChannel+0x254>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10f      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x1d8>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b12      	cmp	r3, #18
 800379e:	d10b      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_ADC_ConfigChannel+0x254>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d12b      	bne.n	800381a <HAL_ADC_ConfigChannel+0x23a>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <HAL_ADC_ConfigChannel+0x258>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <HAL_ADC_ConfigChannel+0x1f4>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b11      	cmp	r3, #17
 80037d2:	d122      	bne.n	800381a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a11      	ldr	r2, [pc, #68]	@ (8003838 <HAL_ADC_ConfigChannel+0x258>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d111      	bne.n	800381a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037f6:	4b11      	ldr	r3, [pc, #68]	@ (800383c <HAL_ADC_ConfigChannel+0x25c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a11      	ldr	r2, [pc, #68]	@ (8003840 <HAL_ADC_ConfigChannel+0x260>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	0c9a      	lsrs	r2, r3, #18
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800380c:	e002      	b.n	8003814 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3b01      	subs	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f9      	bne.n	800380e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40012300 	.word	0x40012300
 8003834:	40012000 	.word	0x40012000
 8003838:	10000012 	.word	0x10000012
 800383c:	20000000 	.word	0x20000000
 8003840:	431bde83 	.word	0x431bde83

08003844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800384c:	4b79      	ldr	r3, [pc, #484]	@ (8003a34 <ADC_Init+0x1f0>)
 800384e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	021a      	lsls	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800389c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6899      	ldr	r1, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <ADC_Init+0x1f4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6899      	ldr	r1, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800390c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	e00f      	b.n	8003942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003940:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0202 	bic.w	r2, r2, #2
 8003950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7e1b      	ldrb	r3, [r3, #24]
 800395c:	005a      	lsls	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800397e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800398e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	3b01      	subs	r3, #1
 800399c:	035a      	lsls	r2, r3, #13
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	e007      	b.n	80039b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80039c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	051a      	lsls	r2, r3, #20
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039fa:	025a      	lsls	r2, r3, #9
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6899      	ldr	r1, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	029a      	lsls	r2, r3, #10
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40012300 	.word	0x40012300
 8003a38:	0f000001 	.word	0x0f000001

08003a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <__NVIC_SetPriorityGrouping+0x44>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <__NVIC_SetPriorityGrouping+0x44>)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	60d3      	str	r3, [r2, #12]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a88:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <__NVIC_GetPriorityGrouping+0x18>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	f003 0307 	and.w	r3, r3, #7
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	db0b      	blt.n	8003aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	4907      	ldr	r1, [pc, #28]	@ (8003ad8 <__NVIC_EnableIRQ+0x38>)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000e100 	.word	0xe000e100

08003adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	db0a      	blt.n	8003b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	490c      	ldr	r1, [pc, #48]	@ (8003b28 <__NVIC_SetPriority+0x4c>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	440b      	add	r3, r1
 8003b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b04:	e00a      	b.n	8003b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4908      	ldr	r1, [pc, #32]	@ (8003b2c <__NVIC_SetPriority+0x50>)
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	3b04      	subs	r3, #4
 8003b14:	0112      	lsls	r2, r2, #4
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	440b      	add	r3, r1
 8003b1a:	761a      	strb	r2, [r3, #24]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000e100 	.word	0xe000e100
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	@ 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f1c3 0307 	rsb	r3, r3, #7
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	bf28      	it	cs
 8003b4e:	2304      	movcs	r3, #4
 8003b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3304      	adds	r3, #4
 8003b56:	2b06      	cmp	r3, #6
 8003b58:	d902      	bls.n	8003b60 <NVIC_EncodePriority+0x30>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3b03      	subs	r3, #3
 8003b5e:	e000      	b.n	8003b62 <NVIC_EncodePriority+0x32>
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	401a      	ands	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b78:	f04f 31ff 	mov.w	r1, #4294967295
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	43d9      	mvns	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b88:	4313      	orrs	r3, r2
         );
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3724      	adds	r7, #36	@ 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ba8:	d301      	bcc.n	8003bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00f      	b.n	8003bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bae:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd8 <SysTick_Config+0x40>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bb6:	210f      	movs	r1, #15
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f7ff ff8e 	bl	8003adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc0:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <SysTick_Config+0x40>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc6:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <SysTick_Config+0x40>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000e010 	.word	0xe000e010

08003bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff29 	bl	8003a3c <__NVIC_SetPriorityGrouping>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c04:	f7ff ff3e 	bl	8003a84 <__NVIC_GetPriorityGrouping>
 8003c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	6978      	ldr	r0, [r7, #20]
 8003c10:	f7ff ff8e 	bl	8003b30 <NVIC_EncodePriority>
 8003c14:	4602      	mov	r2, r0
 8003c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff5d 	bl	8003adc <__NVIC_SetPriority>
}
 8003c22:	bf00      	nop
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4603      	mov	r3, r0
 8003c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff31 	bl	8003aa0 <__NVIC_EnableIRQ>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ffa2 	bl	8003b98 <SysTick_Config>
 8003c54:	4603      	mov	r3, r0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff faa6 	bl	80031bc <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e099      	b.n	8003db0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9c:	e00f      	b.n	8003cbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c9e:	f7ff fa8d 	bl	80031bc <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d908      	bls.n	8003cbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e078      	b.n	8003db0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e8      	bne.n	8003c9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4b38      	ldr	r3, [pc, #224]	@ (8003db8 <HAL_DMA_Init+0x158>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d107      	bne.n	8003d28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	4313      	orrs	r3, r2
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0307 	bic.w	r3, r3, #7
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d117      	bne.n	8003d82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00e      	beq.n	8003d82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa7b 	bl	8004260 <DMA_CheckFifoParam>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2240      	movs	r2, #64	@ 0x40
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e016      	b.n	8003db0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa32 	bl	80041f4 <DMA_CalcBaseAndBitshift>
 8003d90:	4603      	mov	r3, r0
 8003d92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	223f      	movs	r2, #63	@ 0x3f
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	f010803f 	.word	0xf010803f

08003dbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dca:	f7ff f9f7 	bl	80031bc <HAL_GetTick>
 8003dce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d008      	beq.n	8003dee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2280      	movs	r2, #128	@ 0x80
 8003de0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e052      	b.n	8003e94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0216 	bic.w	r2, r2, #22
 8003dfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <HAL_DMA_Abort+0x62>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0208 	bic.w	r2, r2, #8
 8003e2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e3e:	e013      	b.n	8003e68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e40:	f7ff f9bc 	bl	80031bc <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d90c      	bls.n	8003e68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2203      	movs	r2, #3
 8003e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e015      	b.n	8003e94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e4      	bne.n	8003e40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7a:	223f      	movs	r2, #63	@ 0x3f
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d004      	beq.n	8003eba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2280      	movs	r2, #128	@ 0x80
 8003eb4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00c      	b.n	8003ed4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2205      	movs	r2, #5
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eec:	4b8e      	ldr	r3, [pc, #568]	@ (8004128 <HAL_DMA_IRQHandler+0x248>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a8e      	ldr	r2, [pc, #568]	@ (800412c <HAL_DMA_IRQHandler+0x24c>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01a      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0204 	bic.w	r2, r2, #4
 8003f32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f38:	2208      	movs	r2, #8
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f44:	f043 0201 	orr.w	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	2201      	movs	r2, #1
 8003f52:	409a      	lsls	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d012      	beq.n	8003f82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	2201      	movs	r2, #1
 8003f70:	409a      	lsls	r2, r3
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7a:	f043 0202 	orr.w	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	2204      	movs	r2, #4
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d012      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	f043 0204 	orr.w	r2, r3, #4
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d043      	beq.n	8004050 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d03c      	beq.n	8004050 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fda:	2210      	movs	r2, #16
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d018      	beq.n	8004022 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d024      	beq.n	8004050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
 800400e:	e01f      	b.n	8004050 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01b      	beq.n	8004050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
 8004020:	e016      	b.n	8004050 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d107      	bne.n	8004040 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0208 	bic.w	r2, r2, #8
 800403e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	2220      	movs	r2, #32
 8004056:	409a      	lsls	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 808f 	beq.w	8004180 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8087 	beq.w	8004180 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	2220      	movs	r2, #32
 8004078:	409a      	lsls	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b05      	cmp	r3, #5
 8004088:	d136      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0216 	bic.w	r2, r2, #22
 8004098:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_DMA_IRQHandler+0x1da>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0208 	bic.w	r2, r2, #8
 80040c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	223f      	movs	r2, #63	@ 0x3f
 80040d0:	409a      	lsls	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d07e      	beq.n	80041ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4798      	blx	r3
        }
        return;
 80040f6:	e079      	b.n	80041ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01d      	beq.n	8004142 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	2b00      	cmp	r3, #0
 800411a:	d031      	beq.n	8004180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
 8004124:	e02c      	b.n	8004180 <HAL_DMA_IRQHandler+0x2a0>
 8004126:	bf00      	nop
 8004128:	20000000 	.word	0x20000000
 800412c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d023      	beq.n	8004180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
 8004140:	e01e      	b.n	8004180 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10f      	bne.n	8004170 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0210 	bic.w	r2, r2, #16
 800415e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004184:	2b00      	cmp	r3, #0
 8004186:	d032      	beq.n	80041ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d022      	beq.n	80041da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2205      	movs	r2, #5
 8004198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d307      	bcc.n	80041c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f2      	bne.n	80041ac <HAL_DMA_IRQHandler+0x2cc>
 80041c6:	e000      	b.n	80041ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
 80041ea:	e000      	b.n	80041ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80041ec:	bf00      	nop
    }
  }
}
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	3b10      	subs	r3, #16
 8004204:	4a14      	ldr	r2, [pc, #80]	@ (8004258 <DMA_CalcBaseAndBitshift+0x64>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800420e:	4a13      	ldr	r2, [pc, #76]	@ (800425c <DMA_CalcBaseAndBitshift+0x68>)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d909      	bls.n	8004236 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	659a      	str	r2, [r3, #88]	@ 0x58
 8004234:	e007      	b.n	8004246 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	aaaaaaab 	.word	0xaaaaaaab
 800425c:	0800b698 	.word	0x0800b698

08004260 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11f      	bne.n	80042ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d856      	bhi.n	800432e <DMA_CheckFifoParam+0xce>
 8004280:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <DMA_CheckFifoParam+0x28>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	08004299 	.word	0x08004299
 800428c:	080042ab 	.word	0x080042ab
 8004290:	08004299 	.word	0x08004299
 8004294:	0800432f 	.word	0x0800432f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d046      	beq.n	8004332 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a8:	e043      	b.n	8004332 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042b2:	d140      	bne.n	8004336 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b8:	e03d      	b.n	8004336 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c2:	d121      	bne.n	8004308 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d837      	bhi.n	800433a <DMA_CheckFifoParam+0xda>
 80042ca:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <DMA_CheckFifoParam+0x70>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042e7 	.word	0x080042e7
 80042d8:	080042e1 	.word	0x080042e1
 80042dc:	080042f9 	.word	0x080042f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e030      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d025      	beq.n	800433e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f6:	e022      	b.n	800433e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004300:	d11f      	bne.n	8004342 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004306:	e01c      	b.n	8004342 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d903      	bls.n	8004316 <DMA_CheckFifoParam+0xb6>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d003      	beq.n	800431c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004314:	e018      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
      break;
 800431a:	e015      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00e      	beq.n	8004346 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e00b      	b.n	8004346 <DMA_CheckFifoParam+0xe6>
      break;
 800432e:	bf00      	nop
 8004330:	e00a      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      break;
 8004332:	bf00      	nop
 8004334:	e008      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      break;
 8004336:	bf00      	nop
 8004338:	e006      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      break;
 800433a:	bf00      	nop
 800433c:	e004      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      break;
 800433e:	bf00      	nop
 8004340:	e002      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      break;   
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
    }
  } 
  
  return status; 
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop

08004358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e165      	b.n	8004640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	f040 8154 	bne.w	800463a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d005      	beq.n	80043aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d130      	bne.n	800440c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e0:	2201      	movs	r2, #1
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 0201 	and.w	r2, r3, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b03      	cmp	r3, #3
 8004416:	d017      	beq.n	8004448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d123      	bne.n	800449c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	08da      	lsrs	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3208      	adds	r2, #8
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	08da      	lsrs	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3208      	adds	r2, #8
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	2203      	movs	r2, #3
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80ae 	beq.w	800463a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004658 <HAL_GPIO_Init+0x300>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004658 <HAL_GPIO_Init+0x300>)
 80044e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004658 <HAL_GPIO_Init+0x300>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044fa:	4a58      	ldr	r2, [pc, #352]	@ (800465c <HAL_GPIO_Init+0x304>)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4f      	ldr	r2, [pc, #316]	@ (8004660 <HAL_GPIO_Init+0x308>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d025      	beq.n	8004572 <HAL_GPIO_Init+0x21a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4e      	ldr	r2, [pc, #312]	@ (8004664 <HAL_GPIO_Init+0x30c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01f      	beq.n	800456e <HAL_GPIO_Init+0x216>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4d      	ldr	r2, [pc, #308]	@ (8004668 <HAL_GPIO_Init+0x310>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d019      	beq.n	800456a <HAL_GPIO_Init+0x212>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4c      	ldr	r2, [pc, #304]	@ (800466c <HAL_GPIO_Init+0x314>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_GPIO_Init+0x20e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4b      	ldr	r2, [pc, #300]	@ (8004670 <HAL_GPIO_Init+0x318>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00d      	beq.n	8004562 <HAL_GPIO_Init+0x20a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4a      	ldr	r2, [pc, #296]	@ (8004674 <HAL_GPIO_Init+0x31c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x206>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a49      	ldr	r2, [pc, #292]	@ (8004678 <HAL_GPIO_Init+0x320>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_GPIO_Init+0x202>
 8004556:	2306      	movs	r3, #6
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x21c>
 800455a:	2307      	movs	r3, #7
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x21c>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x21c>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x21c>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x21c>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x21c>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x21c>
 8004572:	2300      	movs	r3, #0
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004584:	4935      	ldr	r1, [pc, #212]	@ (800465c <HAL_GPIO_Init+0x304>)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004592:	4b3a      	ldr	r3, [pc, #232]	@ (800467c <HAL_GPIO_Init+0x324>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045b6:	4a31      	ldr	r2, [pc, #196]	@ (800467c <HAL_GPIO_Init+0x324>)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045bc:	4b2f      	ldr	r3, [pc, #188]	@ (800467c <HAL_GPIO_Init+0x324>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e0:	4a26      	ldr	r2, [pc, #152]	@ (800467c <HAL_GPIO_Init+0x324>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045e6:	4b25      	ldr	r3, [pc, #148]	@ (800467c <HAL_GPIO_Init+0x324>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800460a:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <HAL_GPIO_Init+0x324>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004610:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <HAL_GPIO_Init+0x324>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004634:	4a11      	ldr	r2, [pc, #68]	@ (800467c <HAL_GPIO_Init+0x324>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	f67f ae96 	bls.w	8004374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	40013800 	.word	0x40013800
 8004660:	40020000 	.word	0x40020000
 8004664:	40020400 	.word	0x40020400
 8004668:	40020800 	.word	0x40020800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40021000 	.word	0x40021000
 8004674:	40021400 	.word	0x40021400
 8004678:	40021800 	.word	0x40021800
 800467c:	40013c00 	.word	0x40013c00

08004680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
 800468c:	4613      	mov	r3, r2
 800468e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004690:	787b      	ldrb	r3, [r7, #1]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800469c:	e003      	b.n	80046a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800469e:	887b      	ldrh	r3, [r7, #2]
 80046a0:	041a      	lsls	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	619a      	str	r2, [r3, #24]
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e12b      	b.n	800491e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fd fe8a 	bl	80023f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	@ 0x24
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004718:	f001 fbe0 	bl	8005edc <HAL_RCC_GetPCLK1Freq>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4a81      	ldr	r2, [pc, #516]	@ (8004928 <HAL_I2C_Init+0x274>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d807      	bhi.n	8004738 <HAL_I2C_Init+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a80      	ldr	r2, [pc, #512]	@ (800492c <HAL_I2C_Init+0x278>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e006      	b.n	8004746 <HAL_I2C_Init+0x92>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a7d      	ldr	r2, [pc, #500]	@ (8004930 <HAL_I2C_Init+0x27c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	bf94      	ite	ls
 8004740:	2301      	movls	r3, #1
 8004742:	2300      	movhi	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0e7      	b.n	800491e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a78      	ldr	r2, [pc, #480]	@ (8004934 <HAL_I2C_Init+0x280>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	0c9b      	lsrs	r3, r3, #18
 8004758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a6a      	ldr	r2, [pc, #424]	@ (8004928 <HAL_I2C_Init+0x274>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d802      	bhi.n	8004788 <HAL_I2C_Init+0xd4>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3301      	adds	r3, #1
 8004786:	e009      	b.n	800479c <HAL_I2C_Init+0xe8>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a69      	ldr	r2, [pc, #420]	@ (8004938 <HAL_I2C_Init+0x284>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	3301      	adds	r3, #1
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	495c      	ldr	r1, [pc, #368]	@ (8004928 <HAL_I2C_Init+0x274>)
 80047b8:	428b      	cmp	r3, r1
 80047ba:	d819      	bhi.n	80047f0 <HAL_I2C_Init+0x13c>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e59      	subs	r1, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047d0:	400b      	ands	r3, r1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_I2C_Init+0x138>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1e59      	subs	r1, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e4:	3301      	adds	r3, #1
 80047e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ea:	e051      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 80047ec:	2304      	movs	r3, #4
 80047ee:	e04f      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d111      	bne.n	800481c <HAL_I2C_Init+0x168>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1e58      	subs	r0, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	440b      	add	r3, r1
 8004806:	fbb0 f3f3 	udiv	r3, r0, r3
 800480a:	3301      	adds	r3, #1
 800480c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e012      	b.n	8004842 <HAL_I2C_Init+0x18e>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1e58      	subs	r0, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	0099      	lsls	r1, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004832:	3301      	adds	r3, #1
 8004834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Init+0x196>
 8004846:	2301      	movs	r3, #1
 8004848:	e022      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10e      	bne.n	8004870 <HAL_I2C_Init+0x1bc>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1e58      	subs	r0, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	460b      	mov	r3, r1
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	440b      	add	r3, r1
 8004860:	fbb0 f3f3 	udiv	r3, r0, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800486e:	e00f      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1e58      	subs	r0, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	0099      	lsls	r1, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	fbb0 f3f3 	udiv	r3, r0, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	6809      	ldr	r1, [r1, #0]
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6911      	ldr	r1, [r2, #16]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68d2      	ldr	r2, [r2, #12]
 80048ca:	4311      	orrs	r1, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	000186a0 	.word	0x000186a0
 800492c:	001e847f 	.word	0x001e847f
 8004930:	003d08ff 	.word	0x003d08ff
 8004934:	431bde83 	.word	0x431bde83
 8004938:	10624dd3 	.word	0x10624dd3

0800493c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	460b      	mov	r3, r1
 800494a:	817b      	strh	r3, [r7, #10]
 800494c:	4613      	mov	r3, r2
 800494e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004950:	f7fe fc34 	bl	80031bc <HAL_GetTick>
 8004954:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b20      	cmp	r3, #32
 8004960:	f040 80e0 	bne.w	8004b24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2319      	movs	r3, #25
 800496a:	2201      	movs	r2, #1
 800496c:	4970      	ldr	r1, [pc, #448]	@ (8004b30 <HAL_I2C_Master_Transmit+0x1f4>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 ff3c 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
 800497c:	e0d3      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_I2C_Master_Transmit+0x50>
 8004988:	2302      	movs	r3, #2
 800498a:	e0cc      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d007      	beq.n	80049b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2221      	movs	r2, #33	@ 0x21
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2210      	movs	r2, #16
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	893a      	ldrh	r2, [r7, #8]
 80049e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4a50      	ldr	r2, [pc, #320]	@ (8004b34 <HAL_I2C_Master_Transmit+0x1f8>)
 80049f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049f4:	8979      	ldrh	r1, [r7, #10]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fcf6 	bl	80053ec <I2C_MasterRequestWrite>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e08d      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a20:	e066      	b.n	8004af0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	6a39      	ldr	r1, [r7, #32]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fffa 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d107      	bne.n	8004a4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e06b      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_I2C_Master_Transmit+0x188>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	6a39      	ldr	r1, [r7, #32]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fff1 	bl	8005ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d107      	bne.n	8004aec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e01a      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d194      	bne.n	8004a22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e000      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
  }
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	00100002 	.word	0x00100002
 8004b34:	ffff0000 	.word	0xffff0000

08004b38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	4608      	mov	r0, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	461a      	mov	r2, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	817b      	strh	r3, [r7, #10]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	813b      	strh	r3, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b52:	f7fe fb33 	bl	80031bc <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	f040 80d9 	bne.w	8004d18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	2319      	movs	r3, #25
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	496d      	ldr	r1, [pc, #436]	@ (8004d24 <HAL_I2C_Mem_Write+0x1ec>)
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fe3b 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0cc      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Mem_Write+0x56>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0c5      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d007      	beq.n	8004bb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2221      	movs	r2, #33	@ 0x21
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2240      	movs	r2, #64	@ 0x40
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8004d28 <HAL_I2C_Mem_Write+0x1f0>)
 8004bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bf6:	88f8      	ldrh	r0, [r7, #6]
 8004bf8:	893a      	ldrh	r2, [r7, #8]
 8004bfa:	8979      	ldrh	r1, [r7, #10]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	4603      	mov	r3, r0
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fc72 	bl	80054f0 <I2C_RequestMemoryWrite>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d052      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e081      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 ff00 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d107      	bne.n	8004c3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e06b      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_I2C_Mem_Write+0x180>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d017      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1aa      	bne.n	8004c16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fef3 	bl	8005ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d107      	bne.n	8004ce8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e016      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	00100002 	.word	0x00100002
 8004d28:	ffff0000 	.word	0xffff0000

08004d2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08c      	sub	sp, #48	@ 0x30
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	817b      	strh	r3, [r7, #10]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	813b      	strh	r3, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d46:	f7fe fa39 	bl	80031bc <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	f040 8214 	bne.w	8005182 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2319      	movs	r3, #25
 8004d60:	2201      	movs	r2, #1
 8004d62:	497b      	ldr	r1, [pc, #492]	@ (8004f50 <HAL_I2C_Mem_Read+0x224>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fd41 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
 8004d72:	e207      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2C_Mem_Read+0x56>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e200      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d007      	beq.n	8004da8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2222      	movs	r2, #34	@ 0x22
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2240      	movs	r2, #64	@ 0x40
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f54 <HAL_I2C_Mem_Read+0x228>)
 8004de8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dea:	88f8      	ldrh	r0, [r7, #6]
 8004dec:	893a      	ldrh	r2, [r7, #8]
 8004dee:	8979      	ldrh	r1, [r7, #10]
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4603      	mov	r3, r0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fc0e 	bl	800561c <I2C_RequestMemoryRead>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e1bc      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d113      	bne.n	8004e3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e12:	2300      	movs	r3, #0
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e190      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d11b      	bne.n	8004e7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e170      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d11b      	bne.n	8004eba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	e150      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ed0:	e144      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	f200 80f1 	bhi.w	80050be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d123      	bne.n	8004f2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fe29 	bl	8005b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e145      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f2a:	e117      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d14e      	bne.n	8004fd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4906      	ldr	r1, [pc, #24]	@ (8004f58 <HAL_I2C_Mem_Read+0x22c>)
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fc54 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e11a      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
 8004f4e:	bf00      	nop
 8004f50:	00100002 	.word	0x00100002
 8004f54:	ffff0000 	.word	0xffff0000
 8004f58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fd0:	e0c4      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd8:	2200      	movs	r2, #0
 8004fda:	496c      	ldr	r1, [pc, #432]	@ (800518c <HAL_I2C_Mem_Read+0x460>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fc05 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0cb      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005034:	2200      	movs	r2, #0
 8005036:	4955      	ldr	r1, [pc, #340]	@ (800518c <HAL_I2C_Mem_Read+0x460>)
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fbd7 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e09d      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050bc:	e04e      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fd3c 	bl	8005b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e058      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b04      	cmp	r3, #4
 8005110:	d124      	bne.n	800515c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005116:	2b03      	cmp	r3, #3
 8005118:	d107      	bne.n	800512a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005128:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	f47f aeb6 	bne.w	8004ed2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3728      	adds	r7, #40	@ 0x28
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	00010004 	.word	0x00010004

08005190 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	@ 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	460b      	mov	r3, r1
 800519e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80051a0:	f7fe f80c 	bl	80031bc <HAL_GetTick>
 80051a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	f040 8111 	bne.w	80053da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2319      	movs	r3, #25
 80051be:	2201      	movs	r2, #1
 80051c0:	4988      	ldr	r1, [pc, #544]	@ (80053e4 <HAL_I2C_IsDeviceReady+0x254>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fb12 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
 80051d0:	e104      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_I2C_IsDeviceReady+0x50>
 80051dc:	2302      	movs	r3, #2
 80051de:	e0fd      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d007      	beq.n	8005206 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005214:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2224      	movs	r2, #36	@ 0x24
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a70      	ldr	r2, [pc, #448]	@ (80053e8 <HAL_I2C_IsDeviceReady+0x258>)
 8005228:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005238:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2200      	movs	r2, #0
 8005242:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fad0 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005260:	d103      	bne.n	800526a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005268:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e0b6      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800527c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800527e:	f7fd ff9d 	bl	80031bc <HAL_GetTick>
 8005282:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052b2:	e025      	b.n	8005300 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052b4:	f7fd ff82 	bl	80031bc <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <HAL_I2C_IsDeviceReady+0x13a>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	22a0      	movs	r2, #160	@ 0xa0
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2ba0      	cmp	r3, #160	@ 0xa0
 800530a:	d005      	beq.n	8005318 <HAL_I2C_IsDeviceReady+0x188>
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <HAL_I2C_IsDeviceReady+0x188>
 8005312:	7dbb      	ldrb	r3, [r7, #22]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0cd      	beq.n	80052b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d129      	bne.n	8005382 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800533c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2319      	movs	r3, #25
 800535a:	2201      	movs	r2, #1
 800535c:	4921      	ldr	r1, [pc, #132]	@ (80053e4 <HAL_I2C_IsDeviceReady+0x254>)
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fa44 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e036      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e02c      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005390:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800539a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	2319      	movs	r3, #25
 80053a2:	2201      	movs	r2, #1
 80053a4:	490f      	ldr	r1, [pc, #60]	@ (80053e4 <HAL_I2C_IsDeviceReady+0x254>)
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fa20 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e012      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	f4ff af32 	bcc.w	800522a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	00100002 	.word	0x00100002
 80053e8:	ffff0000 	.word	0xffff0000

080053ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	460b      	mov	r3, r1
 80053fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d006      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d003      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005414:	d108      	bne.n	8005428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e00b      	b.n	8005440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	2b12      	cmp	r3, #18
 800542e:	d107      	bne.n	8005440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800543e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f9cd 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005466:	d103      	bne.n	8005470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800546e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e035      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800547c:	d108      	bne.n	8005490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800548c:	611a      	str	r2, [r3, #16]
 800548e:	e01b      	b.n	80054c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005490:	897b      	ldrh	r3, [r7, #10]
 8005492:	11db      	asrs	r3, r3, #7
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0306 	and.w	r3, r3, #6
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f063 030f 	orn	r3, r3, #15
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	490e      	ldr	r1, [pc, #56]	@ (80054e8 <I2C_MasterRequestWrite+0xfc>)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa16 	bl	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e010      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4907      	ldr	r1, [pc, #28]	@ (80054ec <I2C_MasterRequestWrite+0x100>)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fa06 	bl	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	00010008 	.word	0x00010008
 80054ec:	00010002 	.word	0x00010002

080054f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	4608      	mov	r0, r1
 80054fa:	4611      	mov	r1, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	817b      	strh	r3, [r7, #10]
 8005502:	460b      	mov	r3, r1
 8005504:	813b      	strh	r3, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005518:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	2200      	movs	r2, #0
 8005522:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f960 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00d      	beq.n	800554e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005540:	d103      	bne.n	800554a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005548:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e05f      	b.n	800560e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800554e:	897b      	ldrh	r3, [r7, #10]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800555c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	492d      	ldr	r1, [pc, #180]	@ (8005618 <I2C_RequestMemoryWrite+0x128>)
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f9bb 	bl	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e04c      	b.n	800560e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558c:	6a39      	ldr	r1, [r7, #32]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fa46 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d107      	bne.n	80055b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e02b      	b.n	800560e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d105      	bne.n	80055c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055bc:	893b      	ldrh	r3, [r7, #8]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	611a      	str	r2, [r3, #16]
 80055c6:	e021      	b.n	800560c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055c8:	893b      	ldrh	r3, [r7, #8]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d8:	6a39      	ldr	r1, [r7, #32]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fa20 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d107      	bne.n	80055fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e005      	b.n	800560e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005602:	893b      	ldrh	r3, [r7, #8]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	00010002 	.word	0x00010002

0800561c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	461a      	mov	r2, r3
 800562a:	4603      	mov	r3, r0
 800562c:	817b      	strh	r3, [r7, #10]
 800562e:	460b      	mov	r3, r1
 8005630:	813b      	strh	r3, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005644:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	2200      	movs	r2, #0
 800565e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f8c2 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00d      	beq.n	800568a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567c:	d103      	bne.n	8005686 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005684:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e0aa      	b.n	80057e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800568a:	897b      	ldrh	r3, [r7, #10]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	4952      	ldr	r1, [pc, #328]	@ (80057e8 <I2C_RequestMemoryRead+0x1cc>)
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f91d 	bl	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e097      	b.n	80057e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c8:	6a39      	ldr	r1, [r7, #32]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f9a8 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d107      	bne.n	80056ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e076      	b.n	80057e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f8:	893b      	ldrh	r3, [r7, #8]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	611a      	str	r2, [r3, #16]
 8005702:	e021      	b.n	8005748 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005704:	893b      	ldrh	r3, [r7, #8]
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	b29b      	uxth	r3, r3
 800570a:	b2da      	uxtb	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005714:	6a39      	ldr	r1, [r7, #32]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f982 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00d      	beq.n	800573e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	2b04      	cmp	r3, #4
 8005728:	d107      	bne.n	800573a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e050      	b.n	80057e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800573e:	893b      	ldrh	r3, [r7, #8]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574a:	6a39      	ldr	r1, [r7, #32]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f967 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00d      	beq.n	8005774 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575c:	2b04      	cmp	r3, #4
 800575e:	d107      	bne.n	8005770 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800576e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e035      	b.n	80057e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005782:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2200      	movs	r2, #0
 800578c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f82b 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00d      	beq.n	80057b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057aa:	d103      	bne.n	80057b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e013      	b.n	80057e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057b8:	897b      	ldrh	r3, [r7, #10]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	6a3a      	ldr	r2, [r7, #32]
 80057cc:	4906      	ldr	r1, [pc, #24]	@ (80057e8 <I2C_RequestMemoryRead+0x1cc>)
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f886 	bl	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	00010002 	.word	0x00010002

080057ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057fc:	e048      	b.n	8005890 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d044      	beq.n	8005890 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005806:	f7fd fcd9 	bl	80031bc <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d139      	bne.n	8005890 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	d10d      	bne.n	8005842 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	43da      	mvns	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	e00c      	b.n	800585c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	43da      	mvns	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4013      	ands	r3, r2
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	429a      	cmp	r2, r3
 8005860:	d116      	bne.n	8005890 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e023      	b.n	80058d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	0c1b      	lsrs	r3, r3, #16
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d10d      	bne.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	43da      	mvns	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4013      	ands	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	e00c      	b.n	80058d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	43da      	mvns	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4013      	ands	r3, r2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d093      	beq.n	80057fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ee:	e071      	b.n	80059d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fe:	d123      	bne.n	8005948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800590e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e067      	b.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d041      	beq.n	80059d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005950:	f7fd fc34 	bl	80031bc <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d302      	bcc.n	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d136      	bne.n	80059d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10c      	bne.n	800598a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	43da      	mvns	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4013      	ands	r3, r2
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e00b      	b.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	43da      	mvns	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e021      	b.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d10c      	bne.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	43da      	mvns	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e00b      	b.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	43da      	mvns	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bf14      	ite	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2300      	moveq	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f47f af6d 	bne.w	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a2c:	e034      	b.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f8e3 	bl	8005bfa <I2C_IsAcknowledgeFailed>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e034      	b.n	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d028      	beq.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fd fbb9 	bl	80031bc <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11d      	bne.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b80      	cmp	r3, #128	@ 0x80
 8005a68:	d016      	beq.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e007      	b.n	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	2b80      	cmp	r3, #128	@ 0x80
 8005aa4:	d1c3      	bne.n	8005a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005abc:	e034      	b.n	8005b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f89b 	bl	8005bfa <I2C_IsAcknowledgeFailed>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e034      	b.n	8005b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d028      	beq.n	8005b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fd fb71 	bl	80031bc <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11d      	bne.n	8005b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d016      	beq.n	8005b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b14:	f043 0220 	orr.w	r2, r3, #32
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e007      	b.n	8005b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d1c3      	bne.n	8005abe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b4c:	e049      	b.n	8005be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d119      	bne.n	8005b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0210 	mvn.w	r2, #16
 8005b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e030      	b.n	8005bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b90:	f7fd fb14 	bl	80031bc <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d302      	bcc.n	8005ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11d      	bne.n	8005be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d016      	beq.n	8005be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e007      	b.n	8005bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b40      	cmp	r3, #64	@ 0x40
 8005bee:	d1ae      	bne.n	8005b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c10:	d11b      	bne.n	8005c4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	f043 0204 	orr.w	r2, r3, #4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c62:	2300      	movs	r3, #0
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	4b20      	ldr	r3, [pc, #128]	@ (8005ce8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cec <HAL_PWREx_EnableOverDrive+0x94>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c84:	f7fd fa9a 	bl	80031bc <HAL_GetTick>
 8005c88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c8a:	e009      	b.n	8005ca0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c8c:	f7fd fa96 	bl	80031bc <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c9a:	d901      	bls.n	8005ca0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e01f      	b.n	8005ce0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ca0:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cac:	d1ee      	bne.n	8005c8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005cae:	4b11      	ldr	r3, [pc, #68]	@ (8005cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cb4:	f7fd fa82 	bl	80031bc <HAL_GetTick>
 8005cb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cba:	e009      	b.n	8005cd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cbc:	f7fd fa7e 	bl	80031bc <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cca:	d901      	bls.n	8005cd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e007      	b.n	8005ce0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cd0:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cdc:	d1ee      	bne.n	8005cbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	420e0040 	.word	0x420e0040
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	420e0044 	.word	0x420e0044

08005cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0cc      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b68      	ldr	r3, [pc, #416]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d90c      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b65      	ldr	r3, [pc, #404]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d22:	4b63      	ldr	r3, [pc, #396]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0b8      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d020      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d4c:	4b59      	ldr	r3, [pc, #356]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4a58      	ldr	r2, [pc, #352]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d64:	4b53      	ldr	r3, [pc, #332]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4a52      	ldr	r2, [pc, #328]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4b50      	ldr	r3, [pc, #320]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	494d      	ldr	r1, [pc, #308]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d044      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d96:	4b47      	ldr	r3, [pc, #284]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d119      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e07f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d003      	beq.n	8005db6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d107      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db6:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e067      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dd6:	4b37      	ldr	r3, [pc, #220]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 0203 	bic.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4934      	ldr	r1, [pc, #208]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005de8:	f7fd f9e8 	bl	80031bc <HAL_GetTick>
 8005dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dee:	e00a      	b.n	8005e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df0:	f7fd f9e4 	bl	80031bc <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e04f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e06:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 020c 	and.w	r2, r3, #12
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d1eb      	bne.n	8005df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e18:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d20c      	bcs.n	8005e40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b22      	ldr	r3, [pc, #136]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b20      	ldr	r3, [pc, #128]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e032      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e4c:	4b19      	ldr	r3, [pc, #100]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4916      	ldr	r1, [pc, #88]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e6a:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	490e      	ldr	r1, [pc, #56]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e7e:	f000 f855 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	490a      	ldr	r1, [pc, #40]	@ (8005eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e90:	5ccb      	ldrb	r3, [r1, r3]
 8005e92:	fa22 f303 	lsr.w	r3, r2, r3
 8005e96:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e9a:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fd f948 	bl	8003134 <HAL_InitTick>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40023c00 	.word	0x40023c00
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	0800b280 	.word	0x0800b280
 8005ebc:	20000000 	.word	0x20000000
 8005ec0:	20000004 	.word	0x20000004

08005ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ec8:	4b03      	ldr	r3, [pc, #12]	@ (8005ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eca:	681b      	ldr	r3, [r3, #0]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20000000 	.word	0x20000000

08005edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ee0:	f7ff fff0 	bl	8005ec4 <HAL_RCC_GetHCLKFreq>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	0a9b      	lsrs	r3, r3, #10
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	4903      	ldr	r1, [pc, #12]	@ (8005f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ef2:	5ccb      	ldrb	r3, [r1, r3]
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40023800 	.word	0x40023800
 8005f00:	0800b290 	.word	0x0800b290

08005f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f08:	f7ff ffdc 	bl	8005ec4 <HAL_RCC_GetHCLKFreq>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0b5b      	lsrs	r3, r3, #13
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4903      	ldr	r1, [pc, #12]	@ (8005f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f1a:	5ccb      	ldrb	r3, [r1, r3]
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	0800b290 	.word	0x0800b290

08005f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f30:	b0ae      	sub	sp, #184	@ 0xb8
 8005f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f52:	4bcb      	ldr	r3, [pc, #812]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
 8005f5a:	2b0c      	cmp	r3, #12
 8005f5c:	f200 8206 	bhi.w	800636c <HAL_RCC_GetSysClockFreq+0x440>
 8005f60:	a201      	add	r2, pc, #4	@ (adr r2, 8005f68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f9d 	.word	0x08005f9d
 8005f6c:	0800636d 	.word	0x0800636d
 8005f70:	0800636d 	.word	0x0800636d
 8005f74:	0800636d 	.word	0x0800636d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	0800636d 	.word	0x0800636d
 8005f80:	0800636d 	.word	0x0800636d
 8005f84:	0800636d 	.word	0x0800636d
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	0800636d 	.word	0x0800636d
 8005f90:	0800636d 	.word	0x0800636d
 8005f94:	0800636d 	.word	0x0800636d
 8005f98:	0800619d 	.word	0x0800619d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f9c:	4bb9      	ldr	r3, [pc, #740]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005fa2:	e1e7      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fa4:	4bb8      	ldr	r3, [pc, #736]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005faa:	e1e3      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fac:	4bb4      	ldr	r3, [pc, #720]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fb8:	4bb1      	ldr	r3, [pc, #708]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d071      	beq.n	80060a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc4:	4bae      	ldr	r3, [pc, #696]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	099b      	lsrs	r3, r3, #6
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fd0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	f04f 0000 	mov.w	r0, #0
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	0159      	lsls	r1, r3, #5
 8005ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ffc:	0150      	lsls	r0, r2, #5
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4621      	mov	r1, r4
 8006004:	1a51      	subs	r1, r2, r1
 8006006:	6439      	str	r1, [r7, #64]	@ 0x40
 8006008:	4629      	mov	r1, r5
 800600a:	eb63 0301 	sbc.w	r3, r3, r1
 800600e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800601c:	4649      	mov	r1, r9
 800601e:	018b      	lsls	r3, r1, #6
 8006020:	4641      	mov	r1, r8
 8006022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006026:	4641      	mov	r1, r8
 8006028:	018a      	lsls	r2, r1, #6
 800602a:	4641      	mov	r1, r8
 800602c:	1a51      	subs	r1, r2, r1
 800602e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006030:	4649      	mov	r1, r9
 8006032:	eb63 0301 	sbc.w	r3, r3, r1
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006044:	4649      	mov	r1, r9
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4641      	mov	r1, r8
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4641      	mov	r1, r8
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4622      	mov	r2, r4
 800605a:	189b      	adds	r3, r3, r2
 800605c:	633b      	str	r3, [r7, #48]	@ 0x30
 800605e:	462b      	mov	r3, r5
 8006060:	460a      	mov	r2, r1
 8006062:	eb42 0303 	adc.w	r3, r2, r3
 8006066:	637b      	str	r3, [r7, #52]	@ 0x34
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006074:	4629      	mov	r1, r5
 8006076:	024b      	lsls	r3, r1, #9
 8006078:	4621      	mov	r1, r4
 800607a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800607e:	4621      	mov	r1, r4
 8006080:	024a      	lsls	r2, r1, #9
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800608a:	2200      	movs	r2, #0
 800608c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006090:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006094:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006098:	f7fa fe06 	bl	8000ca8 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4613      	mov	r3, r2
 80060a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060a6:	e067      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a8:	4b75      	ldr	r3, [pc, #468]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80060b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060c2:	2300      	movs	r3, #0
 80060c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80060ca:	4622      	mov	r2, r4
 80060cc:	462b      	mov	r3, r5
 80060ce:	f04f 0000 	mov.w	r0, #0
 80060d2:	f04f 0100 	mov.w	r1, #0
 80060d6:	0159      	lsls	r1, r3, #5
 80060d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060dc:	0150      	lsls	r0, r2, #5
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4621      	mov	r1, r4
 80060e4:	1a51      	subs	r1, r2, r1
 80060e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80060e8:	4629      	mov	r1, r5
 80060ea:	eb63 0301 	sbc.w	r3, r3, r1
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80060fc:	4649      	mov	r1, r9
 80060fe:	018b      	lsls	r3, r1, #6
 8006100:	4641      	mov	r1, r8
 8006102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006106:	4641      	mov	r1, r8
 8006108:	018a      	lsls	r2, r1, #6
 800610a:	4641      	mov	r1, r8
 800610c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006110:	4649      	mov	r1, r9
 8006112:	eb63 0b01 	sbc.w	fp, r3, r1
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006122:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800612a:	4692      	mov	sl, r2
 800612c:	469b      	mov	fp, r3
 800612e:	4623      	mov	r3, r4
 8006130:	eb1a 0303 	adds.w	r3, sl, r3
 8006134:	623b      	str	r3, [r7, #32]
 8006136:	462b      	mov	r3, r5
 8006138:	eb4b 0303 	adc.w	r3, fp, r3
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800614a:	4629      	mov	r1, r5
 800614c:	028b      	lsls	r3, r1, #10
 800614e:	4621      	mov	r1, r4
 8006150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006154:	4621      	mov	r1, r4
 8006156:	028a      	lsls	r2, r1, #10
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006160:	2200      	movs	r2, #0
 8006162:	673b      	str	r3, [r7, #112]	@ 0x70
 8006164:	677a      	str	r2, [r7, #116]	@ 0x74
 8006166:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800616a:	f7fa fd9d 	bl	8000ca8 <__aeabi_uldivmod>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4613      	mov	r3, r2
 8006174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006178:	4b41      	ldr	r3, [pc, #260]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	3301      	adds	r3, #1
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800618a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800618e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006192:	fbb2 f3f3 	udiv	r3, r2, r3
 8006196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800619a:	e0eb      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800619c:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061a8:	4b35      	ldr	r3, [pc, #212]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d06b      	beq.n	800628c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061b4:	4b32      	ldr	r3, [pc, #200]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x354>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	099b      	lsrs	r3, r3, #6
 80061ba:	2200      	movs	r2, #0
 80061bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061c8:	2300      	movs	r3, #0
 80061ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80061cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80061d0:	4622      	mov	r2, r4
 80061d2:	462b      	mov	r3, r5
 80061d4:	f04f 0000 	mov.w	r0, #0
 80061d8:	f04f 0100 	mov.w	r1, #0
 80061dc:	0159      	lsls	r1, r3, #5
 80061de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061e2:	0150      	lsls	r0, r2, #5
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4621      	mov	r1, r4
 80061ea:	1a51      	subs	r1, r2, r1
 80061ec:	61b9      	str	r1, [r7, #24]
 80061ee:	4629      	mov	r1, r5
 80061f0:	eb63 0301 	sbc.w	r3, r3, r1
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006202:	4659      	mov	r1, fp
 8006204:	018b      	lsls	r3, r1, #6
 8006206:	4651      	mov	r1, sl
 8006208:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800620c:	4651      	mov	r1, sl
 800620e:	018a      	lsls	r2, r1, #6
 8006210:	4651      	mov	r1, sl
 8006212:	ebb2 0801 	subs.w	r8, r2, r1
 8006216:	4659      	mov	r1, fp
 8006218:	eb63 0901 	sbc.w	r9, r3, r1
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006228:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800622c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006230:	4690      	mov	r8, r2
 8006232:	4699      	mov	r9, r3
 8006234:	4623      	mov	r3, r4
 8006236:	eb18 0303 	adds.w	r3, r8, r3
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	462b      	mov	r3, r5
 800623e:	eb49 0303 	adc.w	r3, r9, r3
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006250:	4629      	mov	r1, r5
 8006252:	024b      	lsls	r3, r1, #9
 8006254:	4621      	mov	r1, r4
 8006256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800625a:	4621      	mov	r1, r4
 800625c:	024a      	lsls	r2, r1, #9
 800625e:	4610      	mov	r0, r2
 8006260:	4619      	mov	r1, r3
 8006262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006266:	2200      	movs	r2, #0
 8006268:	65bb      	str	r3, [r7, #88]	@ 0x58
 800626a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800626c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006270:	f7fa fd1a 	bl	8000ca8 <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4613      	mov	r3, r2
 800627a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800627e:	e065      	b.n	800634c <HAL_RCC_GetSysClockFreq+0x420>
 8006280:	40023800 	.word	0x40023800
 8006284:	00f42400 	.word	0x00f42400
 8006288:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800628c:	4b3d      	ldr	r3, [pc, #244]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x458>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	099b      	lsrs	r3, r3, #6
 8006292:	2200      	movs	r2, #0
 8006294:	4618      	mov	r0, r3
 8006296:	4611      	mov	r1, r2
 8006298:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800629c:	653b      	str	r3, [r7, #80]	@ 0x50
 800629e:	2300      	movs	r3, #0
 80062a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80062a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80062a6:	4642      	mov	r2, r8
 80062a8:	464b      	mov	r3, r9
 80062aa:	f04f 0000 	mov.w	r0, #0
 80062ae:	f04f 0100 	mov.w	r1, #0
 80062b2:	0159      	lsls	r1, r3, #5
 80062b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b8:	0150      	lsls	r0, r2, #5
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4641      	mov	r1, r8
 80062c0:	1a51      	subs	r1, r2, r1
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	4649      	mov	r1, r9
 80062c6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80062d8:	4659      	mov	r1, fp
 80062da:	018b      	lsls	r3, r1, #6
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062e2:	4651      	mov	r1, sl
 80062e4:	018a      	lsls	r2, r1, #6
 80062e6:	4651      	mov	r1, sl
 80062e8:	1a54      	subs	r4, r2, r1
 80062ea:	4659      	mov	r1, fp
 80062ec:	eb63 0501 	sbc.w	r5, r3, r1
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	00eb      	lsls	r3, r5, #3
 80062fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062fe:	00e2      	lsls	r2, r4, #3
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	4643      	mov	r3, r8
 8006306:	18e3      	adds	r3, r4, r3
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	464b      	mov	r3, r9
 800630c:	eb45 0303 	adc.w	r3, r5, r3
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800631e:	4629      	mov	r1, r5
 8006320:	028b      	lsls	r3, r1, #10
 8006322:	4621      	mov	r1, r4
 8006324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006328:	4621      	mov	r1, r4
 800632a:	028a      	lsls	r2, r1, #10
 800632c:	4610      	mov	r0, r2
 800632e:	4619      	mov	r1, r3
 8006330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006334:	2200      	movs	r2, #0
 8006336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006338:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800633a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800633e:	f7fa fcb3 	bl	8000ca8 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4613      	mov	r3, r2
 8006348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800634c:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x458>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	0f1b      	lsrs	r3, r3, #28
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800635a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800635e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006362:	fbb2 f3f3 	udiv	r3, r2, r3
 8006366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800636a:	e003      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800636c:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x45c>)
 800636e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006378:	4618      	mov	r0, r3
 800637a:	37b8      	adds	r7, #184	@ 0xb8
 800637c:	46bd      	mov	sp, r7
 800637e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006382:	bf00      	nop
 8006384:	40023800 	.word	0x40023800
 8006388:	00f42400 	.word	0x00f42400

0800638c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e28d      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8083 	beq.w	80064b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80063ac:	4b94      	ldr	r3, [pc, #592]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 030c 	and.w	r3, r3, #12
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d019      	beq.n	80063ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80063b8:	4b91      	ldr	r3, [pc, #580]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d106      	bne.n	80063d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80063c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063d0:	d00c      	beq.n	80063ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d2:	4b8b      	ldr	r3, [pc, #556]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80063da:	2b0c      	cmp	r3, #12
 80063dc:	d112      	bne.n	8006404 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063de:	4b88      	ldr	r3, [pc, #544]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063ea:	d10b      	bne.n	8006404 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ec:	4b84      	ldr	r3, [pc, #528]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d05b      	beq.n	80064b0 <HAL_RCC_OscConfig+0x124>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d157      	bne.n	80064b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e25a      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800640c:	d106      	bne.n	800641c <HAL_RCC_OscConfig+0x90>
 800640e:	4b7c      	ldr	r3, [pc, #496]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a7b      	ldr	r2, [pc, #492]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e01d      	b.n	8006458 <HAL_RCC_OscConfig+0xcc>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0xb4>
 8006426:	4b76      	ldr	r3, [pc, #472]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a75      	ldr	r2, [pc, #468]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 800642c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	4b73      	ldr	r3, [pc, #460]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a72      	ldr	r2, [pc, #456]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e00b      	b.n	8006458 <HAL_RCC_OscConfig+0xcc>
 8006440:	4b6f      	ldr	r3, [pc, #444]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6e      	ldr	r2, [pc, #440]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	4b6c      	ldr	r3, [pc, #432]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a6b      	ldr	r2, [pc, #428]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d013      	beq.n	8006488 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006460:	f7fc feac 	bl	80031bc <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006468:	f7fc fea8 	bl	80031bc <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	@ 0x64
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e21f      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647a:	4b61      	ldr	r3, [pc, #388]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0xdc>
 8006486:	e014      	b.n	80064b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006488:	f7fc fe98 	bl	80031bc <HAL_GetTick>
 800648c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006490:	f7fc fe94 	bl	80031bc <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b64      	cmp	r3, #100	@ 0x64
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e20b      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a2:	4b57      	ldr	r3, [pc, #348]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0x104>
 80064ae:	e000      	b.n	80064b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d06f      	beq.n	800659e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064be:	4b50      	ldr	r3, [pc, #320]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 030c 	and.w	r3, r3, #12
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d017      	beq.n	80064fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80064ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d105      	bne.n	80064e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80064d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064e2:	4b47      	ldr	r3, [pc, #284]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d11c      	bne.n	8006528 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ee:	4b44      	ldr	r3, [pc, #272]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d116      	bne.n	8006528 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064fa:	4b41      	ldr	r3, [pc, #260]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <HAL_RCC_OscConfig+0x186>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d001      	beq.n	8006512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e1d3      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006512:	4b3b      	ldr	r3, [pc, #236]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4937      	ldr	r1, [pc, #220]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006522:	4313      	orrs	r3, r2
 8006524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006526:	e03a      	b.n	800659e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d020      	beq.n	8006572 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006530:	4b34      	ldr	r3, [pc, #208]	@ (8006604 <HAL_RCC_OscConfig+0x278>)
 8006532:	2201      	movs	r2, #1
 8006534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006536:	f7fc fe41 	bl	80031bc <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800653c:	e008      	b.n	8006550 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800653e:	f7fc fe3d 	bl	80031bc <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e1b4      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006550:	4b2b      	ldr	r3, [pc, #172]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0f0      	beq.n	800653e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655c:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4925      	ldr	r1, [pc, #148]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 800656c:	4313      	orrs	r3, r2
 800656e:	600b      	str	r3, [r1, #0]
 8006570:	e015      	b.n	800659e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006572:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <HAL_RCC_OscConfig+0x278>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fc fe20 	bl	80031bc <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006580:	f7fc fe1c 	bl	80031bc <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e193      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006592:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d036      	beq.n	8006618 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d016      	beq.n	80065e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065b2:	4b15      	ldr	r3, [pc, #84]	@ (8006608 <HAL_RCC_OscConfig+0x27c>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fc fe00 	bl	80031bc <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c0:	f7fc fdfc 	bl	80031bc <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e173      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <HAL_RCC_OscConfig+0x274>)
 80065d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0x234>
 80065de:	e01b      	b.n	8006618 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <HAL_RCC_OscConfig+0x27c>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e6:	f7fc fde9 	bl	80031bc <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ec:	e00e      	b.n	800660c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065ee:	f7fc fde5 	bl	80031bc <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d907      	bls.n	800660c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e15c      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
 8006600:	40023800 	.word	0x40023800
 8006604:	42470000 	.word	0x42470000
 8006608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800660c:	4b8a      	ldr	r3, [pc, #552]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 800660e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1ea      	bne.n	80065ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8097 	beq.w	8006754 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006626:	2300      	movs	r3, #0
 8006628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800662a:	4b83      	ldr	r3, [pc, #524]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10f      	bne.n	8006656 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006636:	2300      	movs	r3, #0
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	4b7f      	ldr	r3, [pc, #508]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663e:	4a7e      	ldr	r2, [pc, #504]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006644:	6413      	str	r3, [r2, #64]	@ 0x40
 8006646:	4b7c      	ldr	r3, [pc, #496]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006652:	2301      	movs	r3, #1
 8006654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006656:	4b79      	ldr	r3, [pc, #484]	@ (800683c <HAL_RCC_OscConfig+0x4b0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665e:	2b00      	cmp	r3, #0
 8006660:	d118      	bne.n	8006694 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006662:	4b76      	ldr	r3, [pc, #472]	@ (800683c <HAL_RCC_OscConfig+0x4b0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a75      	ldr	r2, [pc, #468]	@ (800683c <HAL_RCC_OscConfig+0x4b0>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800666e:	f7fc fda5 	bl	80031bc <HAL_GetTick>
 8006672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006674:	e008      	b.n	8006688 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006676:	f7fc fda1 	bl	80031bc <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e118      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006688:	4b6c      	ldr	r3, [pc, #432]	@ (800683c <HAL_RCC_OscConfig+0x4b0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d106      	bne.n	80066aa <HAL_RCC_OscConfig+0x31e>
 800669c:	4b66      	ldr	r3, [pc, #408]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a0:	4a65      	ldr	r2, [pc, #404]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a8:	e01c      	b.n	80066e4 <HAL_RCC_OscConfig+0x358>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b05      	cmp	r3, #5
 80066b0:	d10c      	bne.n	80066cc <HAL_RCC_OscConfig+0x340>
 80066b2:	4b61      	ldr	r3, [pc, #388]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	4a60      	ldr	r2, [pc, #384]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066b8:	f043 0304 	orr.w	r3, r3, #4
 80066bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80066be:	4b5e      	ldr	r3, [pc, #376]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c2:	4a5d      	ldr	r2, [pc, #372]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ca:	e00b      	b.n	80066e4 <HAL_RCC_OscConfig+0x358>
 80066cc:	4b5a      	ldr	r3, [pc, #360]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d0:	4a59      	ldr	r2, [pc, #356]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d8:	4b57      	ldr	r3, [pc, #348]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066dc:	4a56      	ldr	r2, [pc, #344]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80066de:	f023 0304 	bic.w	r3, r3, #4
 80066e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d015      	beq.n	8006718 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ec:	f7fc fd66 	bl	80031bc <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f2:	e00a      	b.n	800670a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066f4:	f7fc fd62 	bl	80031bc <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006702:	4293      	cmp	r3, r2
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e0d7      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670a:	4b4b      	ldr	r3, [pc, #300]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ee      	beq.n	80066f4 <HAL_RCC_OscConfig+0x368>
 8006716:	e014      	b.n	8006742 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006718:	f7fc fd50 	bl	80031bc <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671e:	e00a      	b.n	8006736 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006720:	f7fc fd4c 	bl	80031bc <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672e:	4293      	cmp	r3, r2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e0c1      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006736:	4b40      	ldr	r3, [pc, #256]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1ee      	bne.n	8006720 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d105      	bne.n	8006754 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006748:	4b3b      	ldr	r3, [pc, #236]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 800674a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674c:	4a3a      	ldr	r2, [pc, #232]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 800674e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80ad 	beq.w	80068b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800675e:	4b36      	ldr	r3, [pc, #216]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 030c 	and.w	r3, r3, #12
 8006766:	2b08      	cmp	r3, #8
 8006768:	d060      	beq.n	800682c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d145      	bne.n	80067fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006772:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <HAL_RCC_OscConfig+0x4b4>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fc fd20 	bl	80031bc <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006780:	f7fc fd1c 	bl	80031bc <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e093      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006792:	4b29      	ldr	r3, [pc, #164]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	019b      	lsls	r3, r3, #6
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	3b01      	subs	r3, #1
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c0:	061b      	lsls	r3, r3, #24
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c8:	071b      	lsls	r3, r3, #28
 80067ca:	491b      	ldr	r1, [pc, #108]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006840 <HAL_RCC_OscConfig+0x4b4>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d6:	f7fc fcf1 	bl	80031bc <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067de:	f7fc fced 	bl	80031bc <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e064      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f0:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x452>
 80067fc:	e05c      	b.n	80068b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <HAL_RCC_OscConfig+0x4b4>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fc fcda 	bl	80031bc <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800680c:	f7fc fcd6 	bl	80031bc <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e04d      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x480>
 800682a:	e045      	b.n	80068b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d107      	bne.n	8006844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e040      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
 8006838:	40023800 	.word	0x40023800
 800683c:	40007000 	.word	0x40007000
 8006840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006844:	4b1f      	ldr	r3, [pc, #124]	@ (80068c4 <HAL_RCC_OscConfig+0x538>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d030      	beq.n	80068b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685c:	429a      	cmp	r2, r3
 800685e:	d129      	bne.n	80068b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686a:	429a      	cmp	r2, r3
 800686c:	d122      	bne.n	80068b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006874:	4013      	ands	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800687a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800687c:	4293      	cmp	r3, r2
 800687e:	d119      	bne.n	80068b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	3b01      	subs	r3, #1
 800688e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006890:	429a      	cmp	r2, r3
 8006892:	d10f      	bne.n	80068b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d107      	bne.n	80068b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023800 	.word	0x40023800

080068c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e041      	b.n	800695e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fb fe98 	bl	8002624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f000 faec 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d109      	bne.n	800698c <HAL_TIM_PWM_Start+0x24>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e022      	b.n	80069d2 <HAL_TIM_PWM_Start+0x6a>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d109      	bne.n	80069a6 <HAL_TIM_PWM_Start+0x3e>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	bf14      	ite	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	2300      	moveq	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	e015      	b.n	80069d2 <HAL_TIM_PWM_Start+0x6a>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d109      	bne.n	80069c0 <HAL_TIM_PWM_Start+0x58>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	e008      	b.n	80069d2 <HAL_TIM_PWM_Start+0x6a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e07c      	b.n	8006ad4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Start+0x82>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069e8:	e013      	b.n	8006a12 <HAL_TIM_PWM_Start+0xaa>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Start+0x92>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069f8:	e00b      	b.n	8006a12 <HAL_TIM_PWM_Start+0xaa>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Start+0xa2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a08:	e003      	b.n	8006a12 <HAL_TIM_PWM_Start+0xaa>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2201      	movs	r2, #1
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fcbe 	bl	800739c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2d      	ldr	r2, [pc, #180]	@ (8006adc <HAL_TIM_PWM_Start+0x174>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <HAL_TIM_PWM_Start+0xcc>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae0 <HAL_TIM_PWM_Start+0x178>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d101      	bne.n	8006a38 <HAL_TIM_PWM_Start+0xd0>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <HAL_TIM_PWM_Start+0xd2>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a22      	ldr	r2, [pc, #136]	@ (8006adc <HAL_TIM_PWM_Start+0x174>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d022      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x136>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a60:	d01d      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x136>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <HAL_TIM_PWM_Start+0x17c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d018      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x136>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <HAL_TIM_PWM_Start+0x180>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x136>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006aec <HAL_TIM_PWM_Start+0x184>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x136>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a16      	ldr	r2, [pc, #88]	@ (8006ae0 <HAL_TIM_PWM_Start+0x178>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x136>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <HAL_TIM_PWM_Start+0x188>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x136>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a16      	ldr	r2, [pc, #88]	@ (8006af4 <HAL_TIM_PWM_Start+0x18c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d111      	bne.n	8006ac2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b06      	cmp	r3, #6
 8006aae:	d010      	beq.n	8006ad2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac0:	e007      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0201 	orr.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40010000 	.word	0x40010000
 8006ae0:	40010400 	.word	0x40010400
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40001800 	.word	0x40001800

08006af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e097      	b.n	8006c3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fb fd05 	bl	8002530 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f000 f9c9 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b98:	f023 030c 	bic.w	r3, r3, #12
 8006b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ba4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	011a      	lsls	r2, r3, #4
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	031b      	lsls	r3, r3, #12
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	4313      	orrs	r3, r2
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d110      	bne.n	8006c96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d102      	bne.n	8006c80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c7a:	7b7b      	ldrb	r3, [r7, #13]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d001      	beq.n	8006c84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e069      	b.n	8006d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c94:	e031      	b.n	8006cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d110      	bne.n	8006cbe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d102      	bne.n	8006ca8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ca2:	7b3b      	ldrb	r3, [r7, #12]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d001      	beq.n	8006cac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e055      	b.n	8006d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cbc:	e01d      	b.n	8006cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d108      	bne.n	8006cd6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d105      	bne.n	8006cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cca:	7b7b      	ldrb	r3, [r7, #13]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d102      	bne.n	8006cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cd0:	7b3b      	ldrb	r3, [r7, #12]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d001      	beq.n	8006cda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e03e      	b.n	8006d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_TIM_Encoder_Start+0xc4>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d008      	beq.n	8006d18 <HAL_TIM_Encoder_Start+0xd4>
 8006d06:	e00f      	b.n	8006d28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fb43 	bl	800739c <TIM_CCxChannelCmd>
      break;
 8006d16:	e016      	b.n	8006d46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	2104      	movs	r1, #4
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fb3b 	bl	800739c <TIM_CCxChannelCmd>
      break;
 8006d26:	e00e      	b.n	8006d46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb33 	bl	800739c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	2104      	movs	r1, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fb2c 	bl	800739c <TIM_CCxChannelCmd>
      break;
 8006d44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e0ae      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	f200 809f 	bhi.w	8006ecc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006dc9 	.word	0x08006dc9
 8006d98:	08006ecd 	.word	0x08006ecd
 8006d9c:	08006ecd 	.word	0x08006ecd
 8006da0:	08006ecd 	.word	0x08006ecd
 8006da4:	08006e09 	.word	0x08006e09
 8006da8:	08006ecd 	.word	0x08006ecd
 8006dac:	08006ecd 	.word	0x08006ecd
 8006db0:	08006ecd 	.word	0x08006ecd
 8006db4:	08006e4b 	.word	0x08006e4b
 8006db8:	08006ecd 	.word	0x08006ecd
 8006dbc:	08006ecd 	.word	0x08006ecd
 8006dc0:	08006ecd 	.word	0x08006ecd
 8006dc4:	08006e8b 	.word	0x08006e8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f934 	bl	800703c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0208 	orr.w	r2, r2, #8
 8006de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0204 	bic.w	r2, r2, #4
 8006df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6999      	ldr	r1, [r3, #24]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	619a      	str	r2, [r3, #24]
      break;
 8006e06:	e064      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f984 	bl	800711c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6999      	ldr	r1, [r3, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	021a      	lsls	r2, r3, #8
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	619a      	str	r2, [r3, #24]
      break;
 8006e48:	e043      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 f9d9 	bl	8007208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0208 	orr.w	r2, r2, #8
 8006e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0204 	bic.w	r2, r2, #4
 8006e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69d9      	ldr	r1, [r3, #28]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	61da      	str	r2, [r3, #28]
      break;
 8006e88:	e023      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fa2d 	bl	80072f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	021a      	lsls	r2, r3, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	61da      	str	r2, [r3, #28]
      break;
 8006eca:	e002      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a46      	ldr	r2, [pc, #280]	@ (8007010 <TIM_Base_SetConfig+0x12c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f02:	d00f      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a43      	ldr	r2, [pc, #268]	@ (8007014 <TIM_Base_SetConfig+0x130>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00b      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a42      	ldr	r2, [pc, #264]	@ (8007018 <TIM_Base_SetConfig+0x134>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a41      	ldr	r2, [pc, #260]	@ (800701c <TIM_Base_SetConfig+0x138>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a40      	ldr	r2, [pc, #256]	@ (8007020 <TIM_Base_SetConfig+0x13c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a35      	ldr	r2, [pc, #212]	@ (8007010 <TIM_Base_SetConfig+0x12c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d02b      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f44:	d027      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a32      	ldr	r2, [pc, #200]	@ (8007014 <TIM_Base_SetConfig+0x130>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d023      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a31      	ldr	r2, [pc, #196]	@ (8007018 <TIM_Base_SetConfig+0x134>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d01f      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a30      	ldr	r2, [pc, #192]	@ (800701c <TIM_Base_SetConfig+0x138>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01b      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2f      	ldr	r2, [pc, #188]	@ (8007020 <TIM_Base_SetConfig+0x13c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d017      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a2e      	ldr	r2, [pc, #184]	@ (8007024 <TIM_Base_SetConfig+0x140>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a2d      	ldr	r2, [pc, #180]	@ (8007028 <TIM_Base_SetConfig+0x144>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a2c      	ldr	r2, [pc, #176]	@ (800702c <TIM_Base_SetConfig+0x148>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a2b      	ldr	r2, [pc, #172]	@ (8007030 <TIM_Base_SetConfig+0x14c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a2a      	ldr	r2, [pc, #168]	@ (8007034 <TIM_Base_SetConfig+0x150>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a29      	ldr	r2, [pc, #164]	@ (8007038 <TIM_Base_SetConfig+0x154>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a10      	ldr	r2, [pc, #64]	@ (8007010 <TIM_Base_SetConfig+0x12c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_Base_SetConfig+0xf8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a12      	ldr	r2, [pc, #72]	@ (8007020 <TIM_Base_SetConfig+0x13c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d103      	bne.n	8006fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d105      	bne.n	8007002 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f023 0201 	bic.w	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	611a      	str	r2, [r3, #16]
  }
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40010000 	.word	0x40010000
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	40010400 	.word	0x40010400
 8007024:	40014000 	.word	0x40014000
 8007028:	40014400 	.word	0x40014400
 800702c:	40014800 	.word	0x40014800
 8007030:	40001800 	.word	0x40001800
 8007034:	40001c00 	.word	0x40001c00
 8007038:	40002000 	.word	0x40002000

0800703c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f023 0201 	bic.w	r2, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f023 0302 	bic.w	r3, r3, #2
 8007084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a20      	ldr	r2, [pc, #128]	@ (8007114 <TIM_OC1_SetConfig+0xd8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d003      	beq.n	80070a0 <TIM_OC1_SetConfig+0x64>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1f      	ldr	r2, [pc, #124]	@ (8007118 <TIM_OC1_SetConfig+0xdc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d10c      	bne.n	80070ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f023 0308 	bic.w	r3, r3, #8
 80070a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 0304 	bic.w	r3, r3, #4
 80070b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a15      	ldr	r2, [pc, #84]	@ (8007114 <TIM_OC1_SetConfig+0xd8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_OC1_SetConfig+0x8e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a14      	ldr	r2, [pc, #80]	@ (8007118 <TIM_OC1_SetConfig+0xdc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d111      	bne.n	80070ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	621a      	str	r2, [r3, #32]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40010000 	.word	0x40010000
 8007118:	40010400 	.word	0x40010400

0800711c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f023 0210 	bic.w	r2, r3, #16
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0320 	bic.w	r3, r3, #32
 8007166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a22      	ldr	r2, [pc, #136]	@ (8007200 <TIM_OC2_SetConfig+0xe4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <TIM_OC2_SetConfig+0x68>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a21      	ldr	r2, [pc, #132]	@ (8007204 <TIM_OC2_SetConfig+0xe8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10d      	bne.n	80071a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800719e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a17      	ldr	r2, [pc, #92]	@ (8007200 <TIM_OC2_SetConfig+0xe4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_OC2_SetConfig+0x94>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a16      	ldr	r2, [pc, #88]	@ (8007204 <TIM_OC2_SetConfig+0xe8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d113      	bne.n	80071d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40010000 	.word	0x40010000
 8007204:	40010400 	.word	0x40010400

08007208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a21      	ldr	r2, [pc, #132]	@ (80072e8 <TIM_OC3_SetConfig+0xe0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d003      	beq.n	800726e <TIM_OC3_SetConfig+0x66>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a20      	ldr	r2, [pc, #128]	@ (80072ec <TIM_OC3_SetConfig+0xe4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d10d      	bne.n	800728a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a16      	ldr	r2, [pc, #88]	@ (80072e8 <TIM_OC3_SetConfig+0xe0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_OC3_SetConfig+0x92>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a15      	ldr	r2, [pc, #84]	@ (80072ec <TIM_OC3_SetConfig+0xe4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d113      	bne.n	80072c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	621a      	str	r2, [r3, #32]
}
 80072dc:	bf00      	nop
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40010400 	.word	0x40010400

080072f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800731e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800733a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	031b      	lsls	r3, r3, #12
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a12      	ldr	r2, [pc, #72]	@ (8007394 <TIM_OC4_SetConfig+0xa4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC4_SetConfig+0x68>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a11      	ldr	r2, [pc, #68]	@ (8007398 <TIM_OC4_SetConfig+0xa8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d109      	bne.n	800736c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800735e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	019b      	lsls	r3, r3, #6
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40010000 	.word	0x40010000
 8007398:	40010400 	.word	0x40010400

0800739c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 031f 	and.w	r3, r3, #31
 80073ae:	2201      	movs	r2, #1
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a1a      	ldr	r2, [r3, #32]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	43db      	mvns	r3, r3
 80073be:	401a      	ands	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1a      	ldr	r2, [r3, #32]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	fa01 f303 	lsl.w	r3, r1, r3
 80073d4:	431a      	orrs	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e05a      	b.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a21      	ldr	r2, [pc, #132]	@ (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744c:	d01d      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1d      	ldr	r2, [pc, #116]	@ (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1b      	ldr	r2, [pc, #108]	@ (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1a      	ldr	r2, [pc, #104]	@ (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a18      	ldr	r2, [pc, #96]	@ (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a17      	ldr	r2, [pc, #92]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a15      	ldr	r2, [pc, #84]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d10c      	bne.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	4313      	orrs	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40010000 	.word	0x40010000
 80074c8:	40000400 	.word	0x40000400
 80074cc:	40000800 	.word	0x40000800
 80074d0:	40000c00 	.word	0x40000c00
 80074d4:	40010400 	.word	0x40010400
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40001800 	.word	0x40001800

080074e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e042      	b.n	8007578 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fb f908 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2224      	movs	r2, #36	@ 0x24
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fd69 	bl	8007ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08a      	sub	sp, #40	@ 0x28
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	4613      	mov	r3, r2
 800758e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b20      	cmp	r3, #32
 800759e:	d175      	bne.n	800768c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_UART_Transmit+0x2c>
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e06e      	b.n	800768e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2221      	movs	r2, #33	@ 0x21
 80075ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075be:	f7fb fdfd 	bl	80031bc <HAL_GetTick>
 80075c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	88fa      	ldrh	r2, [r7, #6]
 80075c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	88fa      	ldrh	r2, [r7, #6]
 80075ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d8:	d108      	bne.n	80075ec <HAL_UART_Transmit+0x6c>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d104      	bne.n	80075ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	e003      	b.n	80075f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075f4:	e02e      	b.n	8007654 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2180      	movs	r1, #128	@ 0x80
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fb05 	bl	8007c10 <UART_WaitOnFlagUntilTimeout>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e03a      	b.n	800768e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800762c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	3302      	adds	r3, #2
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	e007      	b.n	8007646 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	781a      	ldrb	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	3301      	adds	r3, #1
 8007644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1cb      	bne.n	80075f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2200      	movs	r2, #0
 8007666:	2140      	movs	r1, #64	@ 0x40
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fad1 	bl	8007c10 <UART_WaitOnFlagUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e006      	b.n	800768e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	e000      	b.n	800768e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800768c:	2302      	movs	r3, #2
  }
}
 800768e:	4618      	mov	r0, r3
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b0ba      	sub	sp, #232	@ 0xe8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80076be:	2300      	movs	r3, #0
 80076c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80076d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <HAL_UART_IRQHandler+0x66>
 80076ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fbc2 	bl	8007e80 <UART_Receive_IT>
      return;
 80076fc:	e25b      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80de 	beq.w	80078c4 <HAL_UART_IRQHandler+0x22c>
 8007708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007718:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80d1 	beq.w	80078c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <HAL_UART_IRQHandler+0xae>
 800772e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773e:	f043 0201 	orr.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <HAL_UART_IRQHandler+0xd2>
 8007752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007762:	f043 0202 	orr.w	r2, r3, #2
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800776a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_UART_IRQHandler+0xf6>
 8007776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d011      	beq.n	80077be <HAL_UART_IRQHandler+0x126>
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	f043 0208 	orr.w	r2, r3, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 81f2 	beq.w	8007bac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_UART_IRQHandler+0x14e>
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fb4d 	bl	8007e80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f0:	2b40      	cmp	r3, #64	@ 0x40
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <HAL_UART_IRQHandler+0x17a>
 800780a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04f      	beq.n	80078b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa55 	bl	8007cc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007822:	2b40      	cmp	r3, #64	@ 0x40
 8007824:	d141      	bne.n	80078aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3314      	adds	r3, #20
 800782c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800783c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800785e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800786a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1d9      	bne.n	8007826 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a78 <HAL_UART_IRQHandler+0x3e0>)
 8007880:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007886:	4618      	mov	r0, r3
 8007888:	f7fc fb08 	bl	8003e9c <HAL_DMA_Abort_IT>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	e00e      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f99e 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a8:	e00a      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f99a 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	e006      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f996 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80078be:	e175      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c0:	bf00      	nop
    return;
 80078c2:	e173      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f040 814f 	bne.w	8007b6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 8148 	beq.w	8007b6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8141 	beq.w	8007b6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790a:	2b40      	cmp	r3, #64	@ 0x40
 800790c:	f040 80b6 	bne.w	8007a7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800791c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8145 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800792a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800792e:	429a      	cmp	r2, r3
 8007930:	f080 813e 	bcs.w	8007bb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800793a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007946:	f000 8088 	beq.w	8007a5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007960:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007976:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800797a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007982:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800798e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1d9      	bne.n	800794a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3314      	adds	r3, #20
 800799c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3314      	adds	r3, #20
 80079b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e1      	bne.n	8007996 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3314      	adds	r3, #20
 80079d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a2a:	f023 0310 	bic.w	r3, r3, #16
 8007a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fc f9b1 	bl	8003dbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8c1 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a76:	e09b      	b.n	8007bb0 <HAL_UART_IRQHandler+0x518>
 8007a78:	08007d89 	.word	0x08007d89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 808e 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8089 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ac6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ac8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007acc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e3      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3314      	adds	r3, #20
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3314      	adds	r3, #20
 8007afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007afe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e3      	bne.n	8007ada <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	330c      	adds	r3, #12
 8007b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b44:	61fa      	str	r2, [r7, #28]
 8007b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	69b9      	ldr	r1, [r7, #24]
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	617b      	str	r3, [r7, #20]
   return(result);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e3      	bne.n	8007b20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f847 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b6a:	e023      	b.n	8007bb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <HAL_UART_IRQHandler+0x4f4>
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f913 	bl	8007db0 <UART_Transmit_IT>
    return;
 8007b8a:	e014      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00e      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
 8007b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f953 	bl	8007e50 <UART_EndTransmit_IT>
    return;
 8007baa:	e004      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007bac:	bf00      	nop
 8007bae:	e002      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bb0:	bf00      	nop
 8007bb2:	e000      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bb4:	bf00      	nop
  }
}
 8007bb6:	37e8      	adds	r7, #232	@ 0xe8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c20:	e03b      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c28:	d037      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2a:	f7fb fac7 	bl	80031bc <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d302      	bcc.n	8007c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e03a      	b.n	8007cba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d023      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b80      	cmp	r3, #128	@ 0x80
 8007c56:	d020      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b40      	cmp	r3, #64	@ 0x40
 8007c5c:	d01d      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d116      	bne.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f81d 	bl	8007cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e00f      	b.n	8007cba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d0b4      	beq.n	8007c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b095      	sub	sp, #84	@ 0x54
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cea:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e5      	bne.n	8007cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3314      	adds	r3, #20
 8007d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e5      	bne.n	8007cfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d119      	bne.n	8007d6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f023 0310 	bic.w	r3, r3, #16
 8007d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d5a:	61ba      	str	r2, [r7, #24]
 8007d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6979      	ldr	r1, [r7, #20]
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	613b      	str	r3, [r7, #16]
   return(result);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e5      	bne.n	8007d3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d7c:	bf00      	nop
 8007d7e:	3754      	adds	r7, #84	@ 0x54
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff ff1e 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b21      	cmp	r3, #33	@ 0x21
 8007dc2:	d13e      	bne.n	8007e42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dcc:	d114      	bne.n	8007df8 <UART_Transmit_IT+0x48>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d110      	bne.n	8007df8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	1c9a      	adds	r2, r3, #2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]
 8007df6:	e008      	b.n	8007e0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	1c59      	adds	r1, r3, #1
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6211      	str	r1, [r2, #32]
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	4619      	mov	r1, r3
 8007e18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10f      	bne.n	8007e3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e000      	b.n	8007e44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e42:	2302      	movs	r3, #2
  }
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff fea3 	bl	8007bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08c      	sub	sp, #48	@ 0x30
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b22      	cmp	r3, #34	@ 0x22
 8007e92:	f040 80ae 	bne.w	8007ff2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e9e:	d117      	bne.n	8007ed0 <UART_Receive_IT+0x50>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d113      	bne.n	8007ed0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	1c9a      	adds	r2, r3, #2
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ece:	e026      	b.n	8007f1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee2:	d007      	beq.n	8007ef4 <UART_Receive_IT+0x74>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <UART_Receive_IT+0x82>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	e008      	b.n	8007f14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d15d      	bne.n	8007fee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0220 	bic.w	r2, r2, #32
 8007f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695a      	ldr	r2, [r3, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0201 	bic.w	r2, r2, #1
 8007f60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d135      	bne.n	8007fe4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	330c      	adds	r3, #12
 8007f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f023 0310 	bic.w	r3, r3, #16
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f9e:	623a      	str	r2, [r7, #32]
 8007fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	69f9      	ldr	r1, [r7, #28]
 8007fa4:	6a3a      	ldr	r2, [r7, #32]
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e5      	bne.n	8007f7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b10      	cmp	r3, #16
 8007fbe:	d10a      	bne.n	8007fd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff fe0b 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
 8007fe2:	e002      	b.n	8007fea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff fdf3 	bl	8007bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e002      	b.n	8007ff4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e000      	b.n	8007ff4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ff2:	2302      	movs	r3, #2
  }
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3730      	adds	r7, #48	@ 0x30
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008000:	b0c0      	sub	sp, #256	@ 0x100
 8008002:	af00      	add	r7, sp, #0
 8008004:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008018:	68d9      	ldr	r1, [r3, #12]
 800801a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	ea40 0301 	orr.w	r3, r0, r1
 8008024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	431a      	orrs	r2, r3
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	431a      	orrs	r2, r3
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008054:	f021 010c 	bic.w	r1, r1, #12
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008062:	430b      	orrs	r3, r1
 8008064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008076:	6999      	ldr	r1, [r3, #24]
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	ea40 0301 	orr.w	r3, r0, r1
 8008082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	4b8f      	ldr	r3, [pc, #572]	@ (80082c8 <UART_SetConfig+0x2cc>)
 800808c:	429a      	cmp	r2, r3
 800808e:	d005      	beq.n	800809c <UART_SetConfig+0xa0>
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4b8d      	ldr	r3, [pc, #564]	@ (80082cc <UART_SetConfig+0x2d0>)
 8008098:	429a      	cmp	r2, r3
 800809a:	d104      	bne.n	80080a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800809c:	f7fd ff32 	bl	8005f04 <HAL_RCC_GetPCLK2Freq>
 80080a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80080a4:	e003      	b.n	80080ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080a6:	f7fd ff19 	bl	8005edc <HAL_RCC_GetPCLK1Freq>
 80080aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080b8:	f040 810c 	bne.w	80082d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80080ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80080ce:	4622      	mov	r2, r4
 80080d0:	462b      	mov	r3, r5
 80080d2:	1891      	adds	r1, r2, r2
 80080d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80080d6:	415b      	adcs	r3, r3
 80080d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80080de:	4621      	mov	r1, r4
 80080e0:	eb12 0801 	adds.w	r8, r2, r1
 80080e4:	4629      	mov	r1, r5
 80080e6:	eb43 0901 	adc.w	r9, r3, r1
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080fe:	4690      	mov	r8, r2
 8008100:	4699      	mov	r9, r3
 8008102:	4623      	mov	r3, r4
 8008104:	eb18 0303 	adds.w	r3, r8, r3
 8008108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800810c:	462b      	mov	r3, r5
 800810e:	eb49 0303 	adc.w	r3, r9, r3
 8008112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008122:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800812a:	460b      	mov	r3, r1
 800812c:	18db      	adds	r3, r3, r3
 800812e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008130:	4613      	mov	r3, r2
 8008132:	eb42 0303 	adc.w	r3, r2, r3
 8008136:	657b      	str	r3, [r7, #84]	@ 0x54
 8008138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800813c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008140:	f7f8 fdb2 	bl	8000ca8 <__aeabi_uldivmod>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4b61      	ldr	r3, [pc, #388]	@ (80082d0 <UART_SetConfig+0x2d4>)
 800814a:	fba3 2302 	umull	r2, r3, r3, r2
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	011c      	lsls	r4, r3, #4
 8008152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800815c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	1891      	adds	r1, r2, r2
 800816a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800816c:	415b      	adcs	r3, r3
 800816e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008174:	4641      	mov	r1, r8
 8008176:	eb12 0a01 	adds.w	sl, r2, r1
 800817a:	4649      	mov	r1, r9
 800817c:	eb43 0b01 	adc.w	fp, r3, r1
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800818c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008194:	4692      	mov	sl, r2
 8008196:	469b      	mov	fp, r3
 8008198:	4643      	mov	r3, r8
 800819a:	eb1a 0303 	adds.w	r3, sl, r3
 800819e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081a2:	464b      	mov	r3, r9
 80081a4:	eb4b 0303 	adc.w	r3, fp, r3
 80081a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80081bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081c0:	460b      	mov	r3, r1
 80081c2:	18db      	adds	r3, r3, r3
 80081c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081c6:	4613      	mov	r3, r2
 80081c8:	eb42 0303 	adc.w	r3, r2, r3
 80081cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80081d6:	f7f8 fd67 	bl	8000ca8 <__aeabi_uldivmod>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	4b3b      	ldr	r3, [pc, #236]	@ (80082d0 <UART_SetConfig+0x2d4>)
 80081e2:	fba3 2301 	umull	r2, r3, r3, r1
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	2264      	movs	r2, #100	@ 0x64
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	1acb      	subs	r3, r1, r3
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80081f6:	4b36      	ldr	r3, [pc, #216]	@ (80082d0 <UART_SetConfig+0x2d4>)
 80081f8:	fba3 2302 	umull	r2, r3, r3, r2
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008204:	441c      	add	r4, r3
 8008206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800820a:	2200      	movs	r2, #0
 800820c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008210:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	1891      	adds	r1, r2, r2
 800821e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008220:	415b      	adcs	r3, r3
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008228:	4641      	mov	r1, r8
 800822a:	1851      	adds	r1, r2, r1
 800822c:	6339      	str	r1, [r7, #48]	@ 0x30
 800822e:	4649      	mov	r1, r9
 8008230:	414b      	adcs	r3, r1
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008240:	4659      	mov	r1, fp
 8008242:	00cb      	lsls	r3, r1, #3
 8008244:	4651      	mov	r1, sl
 8008246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800824a:	4651      	mov	r1, sl
 800824c:	00ca      	lsls	r2, r1, #3
 800824e:	4610      	mov	r0, r2
 8008250:	4619      	mov	r1, r3
 8008252:	4603      	mov	r3, r0
 8008254:	4642      	mov	r2, r8
 8008256:	189b      	adds	r3, r3, r2
 8008258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800825c:	464b      	mov	r3, r9
 800825e:	460a      	mov	r2, r1
 8008260:	eb42 0303 	adc.w	r3, r2, r3
 8008264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008274:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800827c:	460b      	mov	r3, r1
 800827e:	18db      	adds	r3, r3, r3
 8008280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008282:	4613      	mov	r3, r2
 8008284:	eb42 0303 	adc.w	r3, r2, r3
 8008288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800828a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800828e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008292:	f7f8 fd09 	bl	8000ca8 <__aeabi_uldivmod>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <UART_SetConfig+0x2d4>)
 800829c:	fba3 1302 	umull	r1, r3, r3, r2
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	2164      	movs	r1, #100	@ 0x64
 80082a4:	fb01 f303 	mul.w	r3, r1, r3
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	3332      	adds	r3, #50	@ 0x32
 80082ae:	4a08      	ldr	r2, [pc, #32]	@ (80082d0 <UART_SetConfig+0x2d4>)
 80082b0:	fba2 2303 	umull	r2, r3, r2, r3
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	f003 0207 	and.w	r2, r3, #7
 80082ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4422      	add	r2, r4
 80082c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082c4:	e106      	b.n	80084d4 <UART_SetConfig+0x4d8>
 80082c6:	bf00      	nop
 80082c8:	40011000 	.word	0x40011000
 80082cc:	40011400 	.word	0x40011400
 80082d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80082e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80082e6:	4642      	mov	r2, r8
 80082e8:	464b      	mov	r3, r9
 80082ea:	1891      	adds	r1, r2, r2
 80082ec:	6239      	str	r1, [r7, #32]
 80082ee:	415b      	adcs	r3, r3
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082f6:	4641      	mov	r1, r8
 80082f8:	1854      	adds	r4, r2, r1
 80082fa:	4649      	mov	r1, r9
 80082fc:	eb43 0501 	adc.w	r5, r3, r1
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	00eb      	lsls	r3, r5, #3
 800830a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800830e:	00e2      	lsls	r2, r4, #3
 8008310:	4614      	mov	r4, r2
 8008312:	461d      	mov	r5, r3
 8008314:	4643      	mov	r3, r8
 8008316:	18e3      	adds	r3, r4, r3
 8008318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800831c:	464b      	mov	r3, r9
 800831e:	eb45 0303 	adc.w	r3, r5, r3
 8008322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008332:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008342:	4629      	mov	r1, r5
 8008344:	008b      	lsls	r3, r1, #2
 8008346:	4621      	mov	r1, r4
 8008348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800834c:	4621      	mov	r1, r4
 800834e:	008a      	lsls	r2, r1, #2
 8008350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008354:	f7f8 fca8 	bl	8000ca8 <__aeabi_uldivmod>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4b60      	ldr	r3, [pc, #384]	@ (80084e0 <UART_SetConfig+0x4e4>)
 800835e:	fba3 2302 	umull	r2, r3, r3, r2
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	011c      	lsls	r4, r3, #4
 8008366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800836a:	2200      	movs	r2, #0
 800836c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008370:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008378:	4642      	mov	r2, r8
 800837a:	464b      	mov	r3, r9
 800837c:	1891      	adds	r1, r2, r2
 800837e:	61b9      	str	r1, [r7, #24]
 8008380:	415b      	adcs	r3, r3
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008388:	4641      	mov	r1, r8
 800838a:	1851      	adds	r1, r2, r1
 800838c:	6139      	str	r1, [r7, #16]
 800838e:	4649      	mov	r1, r9
 8008390:	414b      	adcs	r3, r1
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083a0:	4659      	mov	r1, fp
 80083a2:	00cb      	lsls	r3, r1, #3
 80083a4:	4651      	mov	r1, sl
 80083a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083aa:	4651      	mov	r1, sl
 80083ac:	00ca      	lsls	r2, r1, #3
 80083ae:	4610      	mov	r0, r2
 80083b0:	4619      	mov	r1, r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	4642      	mov	r2, r8
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083bc:	464b      	mov	r3, r9
 80083be:	460a      	mov	r2, r1
 80083c0:	eb42 0303 	adc.w	r3, r2, r3
 80083c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80083e0:	4649      	mov	r1, r9
 80083e2:	008b      	lsls	r3, r1, #2
 80083e4:	4641      	mov	r1, r8
 80083e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ea:	4641      	mov	r1, r8
 80083ec:	008a      	lsls	r2, r1, #2
 80083ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80083f2:	f7f8 fc59 	bl	8000ca8 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	4b38      	ldr	r3, [pc, #224]	@ (80084e0 <UART_SetConfig+0x4e4>)
 80083fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	2264      	movs	r2, #100	@ 0x64
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	1acb      	subs	r3, r1, r3
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	3332      	adds	r3, #50	@ 0x32
 8008410:	4a33      	ldr	r2, [pc, #204]	@ (80084e0 <UART_SetConfig+0x4e4>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800841c:	441c      	add	r4, r3
 800841e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008422:	2200      	movs	r2, #0
 8008424:	673b      	str	r3, [r7, #112]	@ 0x70
 8008426:	677a      	str	r2, [r7, #116]	@ 0x74
 8008428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	1891      	adds	r1, r2, r2
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	415b      	adcs	r3, r3
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800843c:	4641      	mov	r1, r8
 800843e:	1851      	adds	r1, r2, r1
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	4649      	mov	r1, r9
 8008444:	414b      	adcs	r3, r1
 8008446:	607b      	str	r3, [r7, #4]
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	f04f 0300 	mov.w	r3, #0
 8008450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008454:	4659      	mov	r1, fp
 8008456:	00cb      	lsls	r3, r1, #3
 8008458:	4651      	mov	r1, sl
 800845a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800845e:	4651      	mov	r1, sl
 8008460:	00ca      	lsls	r2, r1, #3
 8008462:	4610      	mov	r0, r2
 8008464:	4619      	mov	r1, r3
 8008466:	4603      	mov	r3, r0
 8008468:	4642      	mov	r2, r8
 800846a:	189b      	adds	r3, r3, r2
 800846c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800846e:	464b      	mov	r3, r9
 8008470:	460a      	mov	r2, r1
 8008472:	eb42 0303 	adc.w	r3, r2, r3
 8008476:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	663b      	str	r3, [r7, #96]	@ 0x60
 8008482:	667a      	str	r2, [r7, #100]	@ 0x64
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008490:	4649      	mov	r1, r9
 8008492:	008b      	lsls	r3, r1, #2
 8008494:	4641      	mov	r1, r8
 8008496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800849a:	4641      	mov	r1, r8
 800849c:	008a      	lsls	r2, r1, #2
 800849e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80084a2:	f7f8 fc01 	bl	8000ca8 <__aeabi_uldivmod>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4b0d      	ldr	r3, [pc, #52]	@ (80084e0 <UART_SetConfig+0x4e4>)
 80084ac:	fba3 1302 	umull	r1, r3, r3, r2
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	2164      	movs	r1, #100	@ 0x64
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	3332      	adds	r3, #50	@ 0x32
 80084be:	4a08      	ldr	r2, [pc, #32]	@ (80084e0 <UART_SetConfig+0x4e4>)
 80084c0:	fba2 2303 	umull	r2, r3, r2, r3
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	f003 020f 	and.w	r2, r3, #15
 80084ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4422      	add	r2, r4
 80084d2:	609a      	str	r2, [r3, #8]
}
 80084d4:	bf00      	nop
 80084d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80084da:	46bd      	mov	sp, r7
 80084dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e0:	51eb851f 	.word	0x51eb851f

080084e4 <__cvt>:
 80084e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	ec57 6b10 	vmov	r6, r7, d0
 80084ec:	2f00      	cmp	r7, #0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4619      	mov	r1, r3
 80084f2:	463b      	mov	r3, r7
 80084f4:	bfbb      	ittet	lt
 80084f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80084fa:	461f      	movlt	r7, r3
 80084fc:	2300      	movge	r3, #0
 80084fe:	232d      	movlt	r3, #45	@ 0x2d
 8008500:	700b      	strb	r3, [r1, #0]
 8008502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008504:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008508:	4691      	mov	r9, r2
 800850a:	f023 0820 	bic.w	r8, r3, #32
 800850e:	bfbc      	itt	lt
 8008510:	4632      	movlt	r2, r6
 8008512:	4616      	movlt	r6, r2
 8008514:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008518:	d005      	beq.n	8008526 <__cvt+0x42>
 800851a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800851e:	d100      	bne.n	8008522 <__cvt+0x3e>
 8008520:	3401      	adds	r4, #1
 8008522:	2102      	movs	r1, #2
 8008524:	e000      	b.n	8008528 <__cvt+0x44>
 8008526:	2103      	movs	r1, #3
 8008528:	ab03      	add	r3, sp, #12
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	ab02      	add	r3, sp, #8
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	ec47 6b10 	vmov	d0, r6, r7
 8008534:	4653      	mov	r3, sl
 8008536:	4622      	mov	r2, r4
 8008538:	f000 feb2 	bl	80092a0 <_dtoa_r>
 800853c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008540:	4605      	mov	r5, r0
 8008542:	d119      	bne.n	8008578 <__cvt+0x94>
 8008544:	f019 0f01 	tst.w	r9, #1
 8008548:	d00e      	beq.n	8008568 <__cvt+0x84>
 800854a:	eb00 0904 	add.w	r9, r0, r4
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	f7f8 fae7 	bl	8000b28 <__aeabi_dcmpeq>
 800855a:	b108      	cbz	r0, 8008560 <__cvt+0x7c>
 800855c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008560:	2230      	movs	r2, #48	@ 0x30
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	454b      	cmp	r3, r9
 8008566:	d31e      	bcc.n	80085a6 <__cvt+0xc2>
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800856c:	1b5b      	subs	r3, r3, r5
 800856e:	4628      	mov	r0, r5
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	b004      	add	sp, #16
 8008574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008578:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800857c:	eb00 0904 	add.w	r9, r0, r4
 8008580:	d1e5      	bne.n	800854e <__cvt+0x6a>
 8008582:	7803      	ldrb	r3, [r0, #0]
 8008584:	2b30      	cmp	r3, #48	@ 0x30
 8008586:	d10a      	bne.n	800859e <__cvt+0xba>
 8008588:	2200      	movs	r2, #0
 800858a:	2300      	movs	r3, #0
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f8 faca 	bl	8000b28 <__aeabi_dcmpeq>
 8008594:	b918      	cbnz	r0, 800859e <__cvt+0xba>
 8008596:	f1c4 0401 	rsb	r4, r4, #1
 800859a:	f8ca 4000 	str.w	r4, [sl]
 800859e:	f8da 3000 	ldr.w	r3, [sl]
 80085a2:	4499      	add	r9, r3
 80085a4:	e7d3      	b.n	800854e <__cvt+0x6a>
 80085a6:	1c59      	adds	r1, r3, #1
 80085a8:	9103      	str	r1, [sp, #12]
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	e7d9      	b.n	8008562 <__cvt+0x7e>

080085ae <__exponent>:
 80085ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b0:	2900      	cmp	r1, #0
 80085b2:	bfba      	itte	lt
 80085b4:	4249      	neglt	r1, r1
 80085b6:	232d      	movlt	r3, #45	@ 0x2d
 80085b8:	232b      	movge	r3, #43	@ 0x2b
 80085ba:	2909      	cmp	r1, #9
 80085bc:	7002      	strb	r2, [r0, #0]
 80085be:	7043      	strb	r3, [r0, #1]
 80085c0:	dd29      	ble.n	8008616 <__exponent+0x68>
 80085c2:	f10d 0307 	add.w	r3, sp, #7
 80085c6:	461d      	mov	r5, r3
 80085c8:	270a      	movs	r7, #10
 80085ca:	461a      	mov	r2, r3
 80085cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80085d0:	fb07 1416 	mls	r4, r7, r6, r1
 80085d4:	3430      	adds	r4, #48	@ 0x30
 80085d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085da:	460c      	mov	r4, r1
 80085dc:	2c63      	cmp	r4, #99	@ 0x63
 80085de:	f103 33ff 	add.w	r3, r3, #4294967295
 80085e2:	4631      	mov	r1, r6
 80085e4:	dcf1      	bgt.n	80085ca <__exponent+0x1c>
 80085e6:	3130      	adds	r1, #48	@ 0x30
 80085e8:	1e94      	subs	r4, r2, #2
 80085ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085ee:	1c41      	adds	r1, r0, #1
 80085f0:	4623      	mov	r3, r4
 80085f2:	42ab      	cmp	r3, r5
 80085f4:	d30a      	bcc.n	800860c <__exponent+0x5e>
 80085f6:	f10d 0309 	add.w	r3, sp, #9
 80085fa:	1a9b      	subs	r3, r3, r2
 80085fc:	42ac      	cmp	r4, r5
 80085fe:	bf88      	it	hi
 8008600:	2300      	movhi	r3, #0
 8008602:	3302      	adds	r3, #2
 8008604:	4403      	add	r3, r0
 8008606:	1a18      	subs	r0, r3, r0
 8008608:	b003      	add	sp, #12
 800860a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008610:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008614:	e7ed      	b.n	80085f2 <__exponent+0x44>
 8008616:	2330      	movs	r3, #48	@ 0x30
 8008618:	3130      	adds	r1, #48	@ 0x30
 800861a:	7083      	strb	r3, [r0, #2]
 800861c:	70c1      	strb	r1, [r0, #3]
 800861e:	1d03      	adds	r3, r0, #4
 8008620:	e7f1      	b.n	8008606 <__exponent+0x58>
	...

08008624 <_printf_float>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	b08d      	sub	sp, #52	@ 0x34
 800862a:	460c      	mov	r4, r1
 800862c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008630:	4616      	mov	r6, r2
 8008632:	461f      	mov	r7, r3
 8008634:	4605      	mov	r5, r0
 8008636:	f000 fd23 	bl	8009080 <_localeconv_r>
 800863a:	6803      	ldr	r3, [r0, #0]
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	4618      	mov	r0, r3
 8008640:	f7f7 fe46 	bl	80002d0 <strlen>
 8008644:	2300      	movs	r3, #0
 8008646:	930a      	str	r3, [sp, #40]	@ 0x28
 8008648:	f8d8 3000 	ldr.w	r3, [r8]
 800864c:	9005      	str	r0, [sp, #20]
 800864e:	3307      	adds	r3, #7
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	f103 0208 	add.w	r2, r3, #8
 8008658:	f894 a018 	ldrb.w	sl, [r4, #24]
 800865c:	f8d4 b000 	ldr.w	fp, [r4]
 8008660:	f8c8 2000 	str.w	r2, [r8]
 8008664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008668:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800866c:	9307      	str	r3, [sp, #28]
 800866e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008672:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800867a:	4b9c      	ldr	r3, [pc, #624]	@ (80088ec <_printf_float+0x2c8>)
 800867c:	f04f 32ff 	mov.w	r2, #4294967295
 8008680:	f7f8 fa84 	bl	8000b8c <__aeabi_dcmpun>
 8008684:	bb70      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800868a:	4b98      	ldr	r3, [pc, #608]	@ (80088ec <_printf_float+0x2c8>)
 800868c:	f04f 32ff 	mov.w	r2, #4294967295
 8008690:	f7f8 fa5e 	bl	8000b50 <__aeabi_dcmple>
 8008694:	bb30      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f8 fa4d 	bl	8000b3c <__aeabi_dcmplt>
 80086a2:	b110      	cbz	r0, 80086aa <_printf_float+0x86>
 80086a4:	232d      	movs	r3, #45	@ 0x2d
 80086a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086aa:	4a91      	ldr	r2, [pc, #580]	@ (80088f0 <_printf_float+0x2cc>)
 80086ac:	4b91      	ldr	r3, [pc, #580]	@ (80088f4 <_printf_float+0x2d0>)
 80086ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086b2:	bf8c      	ite	hi
 80086b4:	4690      	movhi	r8, r2
 80086b6:	4698      	movls	r8, r3
 80086b8:	2303      	movs	r3, #3
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	f02b 0304 	bic.w	r3, fp, #4
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	9700      	str	r7, [sp, #0]
 80086c8:	4633      	mov	r3, r6
 80086ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f9d2 	bl	8008a78 <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f040 808d 	bne.w	80087f4 <_printf_float+0x1d0>
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	b00d      	add	sp, #52	@ 0x34
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	4642      	mov	r2, r8
 80086e6:	464b      	mov	r3, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f8 fa4e 	bl	8000b8c <__aeabi_dcmpun>
 80086f0:	b140      	cbz	r0, 8008704 <_printf_float+0xe0>
 80086f2:	464b      	mov	r3, r9
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfbc      	itt	lt
 80086f8:	232d      	movlt	r3, #45	@ 0x2d
 80086fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80086fe:	4a7e      	ldr	r2, [pc, #504]	@ (80088f8 <_printf_float+0x2d4>)
 8008700:	4b7e      	ldr	r3, [pc, #504]	@ (80088fc <_printf_float+0x2d8>)
 8008702:	e7d4      	b.n	80086ae <_printf_float+0x8a>
 8008704:	6863      	ldr	r3, [r4, #4]
 8008706:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800870a:	9206      	str	r2, [sp, #24]
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	d13b      	bne.n	8008788 <_printf_float+0x164>
 8008710:	2306      	movs	r3, #6
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008718:	2300      	movs	r3, #0
 800871a:	6022      	str	r2, [r4, #0]
 800871c:	9303      	str	r3, [sp, #12]
 800871e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008720:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008724:	ab09      	add	r3, sp, #36	@ 0x24
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	6861      	ldr	r1, [r4, #4]
 800872a:	ec49 8b10 	vmov	d0, r8, r9
 800872e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008732:	4628      	mov	r0, r5
 8008734:	f7ff fed6 	bl	80084e4 <__cvt>
 8008738:	9b06      	ldr	r3, [sp, #24]
 800873a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800873c:	2b47      	cmp	r3, #71	@ 0x47
 800873e:	4680      	mov	r8, r0
 8008740:	d129      	bne.n	8008796 <_printf_float+0x172>
 8008742:	1cc8      	adds	r0, r1, #3
 8008744:	db02      	blt.n	800874c <_printf_float+0x128>
 8008746:	6863      	ldr	r3, [r4, #4]
 8008748:	4299      	cmp	r1, r3
 800874a:	dd41      	ble.n	80087d0 <_printf_float+0x1ac>
 800874c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008750:	fa5f fa8a 	uxtb.w	sl, sl
 8008754:	3901      	subs	r1, #1
 8008756:	4652      	mov	r2, sl
 8008758:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800875c:	9109      	str	r1, [sp, #36]	@ 0x24
 800875e:	f7ff ff26 	bl	80085ae <__exponent>
 8008762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008764:	1813      	adds	r3, r2, r0
 8008766:	2a01      	cmp	r2, #1
 8008768:	4681      	mov	r9, r0
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	dc02      	bgt.n	8008774 <_printf_float+0x150>
 800876e:	6822      	ldr	r2, [r4, #0]
 8008770:	07d2      	lsls	r2, r2, #31
 8008772:	d501      	bpl.n	8008778 <_printf_float+0x154>
 8008774:	3301      	adds	r3, #1
 8008776:	6123      	str	r3, [r4, #16]
 8008778:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0a2      	beq.n	80086c6 <_printf_float+0xa2>
 8008780:	232d      	movs	r3, #45	@ 0x2d
 8008782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008786:	e79e      	b.n	80086c6 <_printf_float+0xa2>
 8008788:	9a06      	ldr	r2, [sp, #24]
 800878a:	2a47      	cmp	r2, #71	@ 0x47
 800878c:	d1c2      	bne.n	8008714 <_printf_float+0xf0>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1c0      	bne.n	8008714 <_printf_float+0xf0>
 8008792:	2301      	movs	r3, #1
 8008794:	e7bd      	b.n	8008712 <_printf_float+0xee>
 8008796:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800879a:	d9db      	bls.n	8008754 <_printf_float+0x130>
 800879c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087a0:	d118      	bne.n	80087d4 <_printf_float+0x1b0>
 80087a2:	2900      	cmp	r1, #0
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	dd0b      	ble.n	80087c0 <_printf_float+0x19c>
 80087a8:	6121      	str	r1, [r4, #16]
 80087aa:	b913      	cbnz	r3, 80087b2 <_printf_float+0x18e>
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	07d0      	lsls	r0, r2, #31
 80087b0:	d502      	bpl.n	80087b8 <_printf_float+0x194>
 80087b2:	3301      	adds	r3, #1
 80087b4:	440b      	add	r3, r1
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087ba:	f04f 0900 	mov.w	r9, #0
 80087be:	e7db      	b.n	8008778 <_printf_float+0x154>
 80087c0:	b913      	cbnz	r3, 80087c8 <_printf_float+0x1a4>
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	07d2      	lsls	r2, r2, #31
 80087c6:	d501      	bpl.n	80087cc <_printf_float+0x1a8>
 80087c8:	3302      	adds	r3, #2
 80087ca:	e7f4      	b.n	80087b6 <_printf_float+0x192>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e7f2      	b.n	80087b6 <_printf_float+0x192>
 80087d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087d6:	4299      	cmp	r1, r3
 80087d8:	db05      	blt.n	80087e6 <_printf_float+0x1c2>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	6121      	str	r1, [r4, #16]
 80087de:	07d8      	lsls	r0, r3, #31
 80087e0:	d5ea      	bpl.n	80087b8 <_printf_float+0x194>
 80087e2:	1c4b      	adds	r3, r1, #1
 80087e4:	e7e7      	b.n	80087b6 <_printf_float+0x192>
 80087e6:	2900      	cmp	r1, #0
 80087e8:	bfd4      	ite	le
 80087ea:	f1c1 0202 	rsble	r2, r1, #2
 80087ee:	2201      	movgt	r2, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	e7e0      	b.n	80087b6 <_printf_float+0x192>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	055a      	lsls	r2, r3, #21
 80087f8:	d407      	bmi.n	800880a <_printf_float+0x1e6>
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	4642      	mov	r2, r8
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	d12b      	bne.n	8008860 <_printf_float+0x23c>
 8008808:	e767      	b.n	80086da <_printf_float+0xb6>
 800880a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800880e:	f240 80dd 	bls.w	80089cc <_printf_float+0x3a8>
 8008812:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008816:	2200      	movs	r2, #0
 8008818:	2300      	movs	r3, #0
 800881a:	f7f8 f985 	bl	8000b28 <__aeabi_dcmpeq>
 800881e:	2800      	cmp	r0, #0
 8008820:	d033      	beq.n	800888a <_printf_float+0x266>
 8008822:	4a37      	ldr	r2, [pc, #220]	@ (8008900 <_printf_float+0x2dc>)
 8008824:	2301      	movs	r3, #1
 8008826:	4631      	mov	r1, r6
 8008828:	4628      	mov	r0, r5
 800882a:	47b8      	blx	r7
 800882c:	3001      	adds	r0, #1
 800882e:	f43f af54 	beq.w	80086da <_printf_float+0xb6>
 8008832:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008836:	4543      	cmp	r3, r8
 8008838:	db02      	blt.n	8008840 <_printf_float+0x21c>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	07d8      	lsls	r0, r3, #31
 800883e:	d50f      	bpl.n	8008860 <_printf_float+0x23c>
 8008840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	f43f af45 	beq.w	80086da <_printf_float+0xb6>
 8008850:	f04f 0900 	mov.w	r9, #0
 8008854:	f108 38ff 	add.w	r8, r8, #4294967295
 8008858:	f104 0a1a 	add.w	sl, r4, #26
 800885c:	45c8      	cmp	r8, r9
 800885e:	dc09      	bgt.n	8008874 <_printf_float+0x250>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	079b      	lsls	r3, r3, #30
 8008864:	f100 8103 	bmi.w	8008a6e <_printf_float+0x44a>
 8008868:	68e0      	ldr	r0, [r4, #12]
 800886a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800886c:	4298      	cmp	r0, r3
 800886e:	bfb8      	it	lt
 8008870:	4618      	movlt	r0, r3
 8008872:	e734      	b.n	80086de <_printf_float+0xba>
 8008874:	2301      	movs	r3, #1
 8008876:	4652      	mov	r2, sl
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	f43f af2b 	beq.w	80086da <_printf_float+0xb6>
 8008884:	f109 0901 	add.w	r9, r9, #1
 8008888:	e7e8      	b.n	800885c <_printf_float+0x238>
 800888a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	dc39      	bgt.n	8008904 <_printf_float+0x2e0>
 8008890:	4a1b      	ldr	r2, [pc, #108]	@ (8008900 <_printf_float+0x2dc>)
 8008892:	2301      	movs	r3, #1
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f af1d 	beq.w	80086da <_printf_float+0xb6>
 80088a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088a4:	ea59 0303 	orrs.w	r3, r9, r3
 80088a8:	d102      	bne.n	80088b0 <_printf_float+0x28c>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	07d9      	lsls	r1, r3, #31
 80088ae:	d5d7      	bpl.n	8008860 <_printf_float+0x23c>
 80088b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f af0d 	beq.w	80086da <_printf_float+0xb6>
 80088c0:	f04f 0a00 	mov.w	sl, #0
 80088c4:	f104 0b1a 	add.w	fp, r4, #26
 80088c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ca:	425b      	negs	r3, r3
 80088cc:	4553      	cmp	r3, sl
 80088ce:	dc01      	bgt.n	80088d4 <_printf_float+0x2b0>
 80088d0:	464b      	mov	r3, r9
 80088d2:	e793      	b.n	80087fc <_printf_float+0x1d8>
 80088d4:	2301      	movs	r3, #1
 80088d6:	465a      	mov	r2, fp
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f aefb 	beq.w	80086da <_printf_float+0xb6>
 80088e4:	f10a 0a01 	add.w	sl, sl, #1
 80088e8:	e7ee      	b.n	80088c8 <_printf_float+0x2a4>
 80088ea:	bf00      	nop
 80088ec:	7fefffff 	.word	0x7fefffff
 80088f0:	0800b6a4 	.word	0x0800b6a4
 80088f4:	0800b6a0 	.word	0x0800b6a0
 80088f8:	0800b6ac 	.word	0x0800b6ac
 80088fc:	0800b6a8 	.word	0x0800b6a8
 8008900:	0800b6b0 	.word	0x0800b6b0
 8008904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008906:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800890a:	4553      	cmp	r3, sl
 800890c:	bfa8      	it	ge
 800890e:	4653      	movge	r3, sl
 8008910:	2b00      	cmp	r3, #0
 8008912:	4699      	mov	r9, r3
 8008914:	dc36      	bgt.n	8008984 <_printf_float+0x360>
 8008916:	f04f 0b00 	mov.w	fp, #0
 800891a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800891e:	f104 021a 	add.w	r2, r4, #26
 8008922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008924:	9306      	str	r3, [sp, #24]
 8008926:	eba3 0309 	sub.w	r3, r3, r9
 800892a:	455b      	cmp	r3, fp
 800892c:	dc31      	bgt.n	8008992 <_printf_float+0x36e>
 800892e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008930:	459a      	cmp	sl, r3
 8008932:	dc3a      	bgt.n	80089aa <_printf_float+0x386>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	07da      	lsls	r2, r3, #31
 8008938:	d437      	bmi.n	80089aa <_printf_float+0x386>
 800893a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893c:	ebaa 0903 	sub.w	r9, sl, r3
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	ebaa 0303 	sub.w	r3, sl, r3
 8008946:	4599      	cmp	r9, r3
 8008948:	bfa8      	it	ge
 800894a:	4699      	movge	r9, r3
 800894c:	f1b9 0f00 	cmp.w	r9, #0
 8008950:	dc33      	bgt.n	80089ba <_printf_float+0x396>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895a:	f104 0b1a 	add.w	fp, r4, #26
 800895e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008960:	ebaa 0303 	sub.w	r3, sl, r3
 8008964:	eba3 0309 	sub.w	r3, r3, r9
 8008968:	4543      	cmp	r3, r8
 800896a:	f77f af79 	ble.w	8008860 <_printf_float+0x23c>
 800896e:	2301      	movs	r3, #1
 8008970:	465a      	mov	r2, fp
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f aeae 	beq.w	80086da <_printf_float+0xb6>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	e7ec      	b.n	800895e <_printf_float+0x33a>
 8008984:	4642      	mov	r2, r8
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	d1c2      	bne.n	8008916 <_printf_float+0x2f2>
 8008990:	e6a3      	b.n	80086da <_printf_float+0xb6>
 8008992:	2301      	movs	r3, #1
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	9206      	str	r2, [sp, #24]
 800899a:	47b8      	blx	r7
 800899c:	3001      	adds	r0, #1
 800899e:	f43f ae9c 	beq.w	80086da <_printf_float+0xb6>
 80089a2:	9a06      	ldr	r2, [sp, #24]
 80089a4:	f10b 0b01 	add.w	fp, fp, #1
 80089a8:	e7bb      	b.n	8008922 <_printf_float+0x2fe>
 80089aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	d1c0      	bne.n	800893a <_printf_float+0x316>
 80089b8:	e68f      	b.n	80086da <_printf_float+0xb6>
 80089ba:	9a06      	ldr	r2, [sp, #24]
 80089bc:	464b      	mov	r3, r9
 80089be:	4442      	add	r2, r8
 80089c0:	4631      	mov	r1, r6
 80089c2:	4628      	mov	r0, r5
 80089c4:	47b8      	blx	r7
 80089c6:	3001      	adds	r0, #1
 80089c8:	d1c3      	bne.n	8008952 <_printf_float+0x32e>
 80089ca:	e686      	b.n	80086da <_printf_float+0xb6>
 80089cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089d0:	f1ba 0f01 	cmp.w	sl, #1
 80089d4:	dc01      	bgt.n	80089da <_printf_float+0x3b6>
 80089d6:	07db      	lsls	r3, r3, #31
 80089d8:	d536      	bpl.n	8008a48 <_printf_float+0x424>
 80089da:	2301      	movs	r3, #1
 80089dc:	4642      	mov	r2, r8
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f ae78 	beq.w	80086da <_printf_float+0xb6>
 80089ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f ae70 	beq.w	80086da <_printf_float+0xb6>
 80089fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089fe:	2200      	movs	r2, #0
 8008a00:	2300      	movs	r3, #0
 8008a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a06:	f7f8 f88f 	bl	8000b28 <__aeabi_dcmpeq>
 8008a0a:	b9c0      	cbnz	r0, 8008a3e <_printf_float+0x41a>
 8008a0c:	4653      	mov	r3, sl
 8008a0e:	f108 0201 	add.w	r2, r8, #1
 8008a12:	4631      	mov	r1, r6
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b8      	blx	r7
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d10c      	bne.n	8008a36 <_printf_float+0x412>
 8008a1c:	e65d      	b.n	80086da <_printf_float+0xb6>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	465a      	mov	r2, fp
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f ae56 	beq.w	80086da <_printf_float+0xb6>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	45d0      	cmp	r8, sl
 8008a34:	dbf3      	blt.n	8008a1e <_printf_float+0x3fa>
 8008a36:	464b      	mov	r3, r9
 8008a38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a3c:	e6df      	b.n	80087fe <_printf_float+0x1da>
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	f104 0b1a 	add.w	fp, r4, #26
 8008a46:	e7f4      	b.n	8008a32 <_printf_float+0x40e>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	4642      	mov	r2, r8
 8008a4c:	e7e1      	b.n	8008a12 <_printf_float+0x3ee>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	464a      	mov	r2, r9
 8008a52:	4631      	mov	r1, r6
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b8      	blx	r7
 8008a58:	3001      	adds	r0, #1
 8008a5a:	f43f ae3e 	beq.w	80086da <_printf_float+0xb6>
 8008a5e:	f108 0801 	add.w	r8, r8, #1
 8008a62:	68e3      	ldr	r3, [r4, #12]
 8008a64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a66:	1a5b      	subs	r3, r3, r1
 8008a68:	4543      	cmp	r3, r8
 8008a6a:	dcf0      	bgt.n	8008a4e <_printf_float+0x42a>
 8008a6c:	e6fc      	b.n	8008868 <_printf_float+0x244>
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	f104 0919 	add.w	r9, r4, #25
 8008a76:	e7f4      	b.n	8008a62 <_printf_float+0x43e>

08008a78 <_printf_common>:
 8008a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	4616      	mov	r6, r2
 8008a7e:	4698      	mov	r8, r3
 8008a80:	688a      	ldr	r2, [r1, #8]
 8008a82:	690b      	ldr	r3, [r1, #16]
 8008a84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	bfb8      	it	lt
 8008a8c:	4613      	movlt	r3, r2
 8008a8e:	6033      	str	r3, [r6, #0]
 8008a90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a94:	4607      	mov	r7, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	b10a      	cbz	r2, 8008a9e <_printf_common+0x26>
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	0699      	lsls	r1, r3, #26
 8008aa2:	bf42      	ittt	mi
 8008aa4:	6833      	ldrmi	r3, [r6, #0]
 8008aa6:	3302      	addmi	r3, #2
 8008aa8:	6033      	strmi	r3, [r6, #0]
 8008aaa:	6825      	ldr	r5, [r4, #0]
 8008aac:	f015 0506 	ands.w	r5, r5, #6
 8008ab0:	d106      	bne.n	8008ac0 <_printf_common+0x48>
 8008ab2:	f104 0a19 	add.w	sl, r4, #25
 8008ab6:	68e3      	ldr	r3, [r4, #12]
 8008ab8:	6832      	ldr	r2, [r6, #0]
 8008aba:	1a9b      	subs	r3, r3, r2
 8008abc:	42ab      	cmp	r3, r5
 8008abe:	dc26      	bgt.n	8008b0e <_printf_common+0x96>
 8008ac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	3b00      	subs	r3, #0
 8008ac8:	bf18      	it	ne
 8008aca:	2301      	movne	r3, #1
 8008acc:	0692      	lsls	r2, r2, #26
 8008ace:	d42b      	bmi.n	8008b28 <_printf_common+0xb0>
 8008ad0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	47c8      	blx	r9
 8008ada:	3001      	adds	r0, #1
 8008adc:	d01e      	beq.n	8008b1c <_printf_common+0xa4>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	6922      	ldr	r2, [r4, #16]
 8008ae2:	f003 0306 	and.w	r3, r3, #6
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	bf02      	ittt	eq
 8008aea:	68e5      	ldreq	r5, [r4, #12]
 8008aec:	6833      	ldreq	r3, [r6, #0]
 8008aee:	1aed      	subeq	r5, r5, r3
 8008af0:	68a3      	ldr	r3, [r4, #8]
 8008af2:	bf0c      	ite	eq
 8008af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008af8:	2500      	movne	r5, #0
 8008afa:	4293      	cmp	r3, r2
 8008afc:	bfc4      	itt	gt
 8008afe:	1a9b      	subgt	r3, r3, r2
 8008b00:	18ed      	addgt	r5, r5, r3
 8008b02:	2600      	movs	r6, #0
 8008b04:	341a      	adds	r4, #26
 8008b06:	42b5      	cmp	r5, r6
 8008b08:	d11a      	bne.n	8008b40 <_printf_common+0xc8>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e008      	b.n	8008b20 <_printf_common+0xa8>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4652      	mov	r2, sl
 8008b12:	4641      	mov	r1, r8
 8008b14:	4638      	mov	r0, r7
 8008b16:	47c8      	blx	r9
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d103      	bne.n	8008b24 <_printf_common+0xac>
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b24:	3501      	adds	r5, #1
 8008b26:	e7c6      	b.n	8008ab6 <_printf_common+0x3e>
 8008b28:	18e1      	adds	r1, r4, r3
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	2030      	movs	r0, #48	@ 0x30
 8008b2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b32:	4422      	add	r2, r4
 8008b34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	e7c7      	b.n	8008ad0 <_printf_common+0x58>
 8008b40:	2301      	movs	r3, #1
 8008b42:	4622      	mov	r2, r4
 8008b44:	4641      	mov	r1, r8
 8008b46:	4638      	mov	r0, r7
 8008b48:	47c8      	blx	r9
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d0e6      	beq.n	8008b1c <_printf_common+0xa4>
 8008b4e:	3601      	adds	r6, #1
 8008b50:	e7d9      	b.n	8008b06 <_printf_common+0x8e>
	...

08008b54 <_printf_i>:
 8008b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	7e0f      	ldrb	r7, [r1, #24]
 8008b5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b5c:	2f78      	cmp	r7, #120	@ 0x78
 8008b5e:	4691      	mov	r9, r2
 8008b60:	4680      	mov	r8, r0
 8008b62:	460c      	mov	r4, r1
 8008b64:	469a      	mov	sl, r3
 8008b66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b6a:	d807      	bhi.n	8008b7c <_printf_i+0x28>
 8008b6c:	2f62      	cmp	r7, #98	@ 0x62
 8008b6e:	d80a      	bhi.n	8008b86 <_printf_i+0x32>
 8008b70:	2f00      	cmp	r7, #0
 8008b72:	f000 80d1 	beq.w	8008d18 <_printf_i+0x1c4>
 8008b76:	2f58      	cmp	r7, #88	@ 0x58
 8008b78:	f000 80b8 	beq.w	8008cec <_printf_i+0x198>
 8008b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b84:	e03a      	b.n	8008bfc <_printf_i+0xa8>
 8008b86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b8a:	2b15      	cmp	r3, #21
 8008b8c:	d8f6      	bhi.n	8008b7c <_printf_i+0x28>
 8008b8e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b94 <_printf_i+0x40>)
 8008b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b94:	08008bed 	.word	0x08008bed
 8008b98:	08008c01 	.word	0x08008c01
 8008b9c:	08008b7d 	.word	0x08008b7d
 8008ba0:	08008b7d 	.word	0x08008b7d
 8008ba4:	08008b7d 	.word	0x08008b7d
 8008ba8:	08008b7d 	.word	0x08008b7d
 8008bac:	08008c01 	.word	0x08008c01
 8008bb0:	08008b7d 	.word	0x08008b7d
 8008bb4:	08008b7d 	.word	0x08008b7d
 8008bb8:	08008b7d 	.word	0x08008b7d
 8008bbc:	08008b7d 	.word	0x08008b7d
 8008bc0:	08008cff 	.word	0x08008cff
 8008bc4:	08008c2b 	.word	0x08008c2b
 8008bc8:	08008cb9 	.word	0x08008cb9
 8008bcc:	08008b7d 	.word	0x08008b7d
 8008bd0:	08008b7d 	.word	0x08008b7d
 8008bd4:	08008d21 	.word	0x08008d21
 8008bd8:	08008b7d 	.word	0x08008b7d
 8008bdc:	08008c2b 	.word	0x08008c2b
 8008be0:	08008b7d 	.word	0x08008b7d
 8008be4:	08008b7d 	.word	0x08008b7d
 8008be8:	08008cc1 	.word	0x08008cc1
 8008bec:	6833      	ldr	r3, [r6, #0]
 8008bee:	1d1a      	adds	r2, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6032      	str	r2, [r6, #0]
 8008bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e09c      	b.n	8008d3a <_printf_i+0x1e6>
 8008c00:	6833      	ldr	r3, [r6, #0]
 8008c02:	6820      	ldr	r0, [r4, #0]
 8008c04:	1d19      	adds	r1, r3, #4
 8008c06:	6031      	str	r1, [r6, #0]
 8008c08:	0606      	lsls	r6, r0, #24
 8008c0a:	d501      	bpl.n	8008c10 <_printf_i+0xbc>
 8008c0c:	681d      	ldr	r5, [r3, #0]
 8008c0e:	e003      	b.n	8008c18 <_printf_i+0xc4>
 8008c10:	0645      	lsls	r5, r0, #25
 8008c12:	d5fb      	bpl.n	8008c0c <_printf_i+0xb8>
 8008c14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	da03      	bge.n	8008c24 <_printf_i+0xd0>
 8008c1c:	232d      	movs	r3, #45	@ 0x2d
 8008c1e:	426d      	negs	r5, r5
 8008c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c24:	4858      	ldr	r0, [pc, #352]	@ (8008d88 <_printf_i+0x234>)
 8008c26:	230a      	movs	r3, #10
 8008c28:	e011      	b.n	8008c4e <_printf_i+0xfa>
 8008c2a:	6821      	ldr	r1, [r4, #0]
 8008c2c:	6833      	ldr	r3, [r6, #0]
 8008c2e:	0608      	lsls	r0, r1, #24
 8008c30:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c34:	d402      	bmi.n	8008c3c <_printf_i+0xe8>
 8008c36:	0649      	lsls	r1, r1, #25
 8008c38:	bf48      	it	mi
 8008c3a:	b2ad      	uxthmi	r5, r5
 8008c3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c3e:	4852      	ldr	r0, [pc, #328]	@ (8008d88 <_printf_i+0x234>)
 8008c40:	6033      	str	r3, [r6, #0]
 8008c42:	bf14      	ite	ne
 8008c44:	230a      	movne	r3, #10
 8008c46:	2308      	moveq	r3, #8
 8008c48:	2100      	movs	r1, #0
 8008c4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c4e:	6866      	ldr	r6, [r4, #4]
 8008c50:	60a6      	str	r6, [r4, #8]
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	db05      	blt.n	8008c62 <_printf_i+0x10e>
 8008c56:	6821      	ldr	r1, [r4, #0]
 8008c58:	432e      	orrs	r6, r5
 8008c5a:	f021 0104 	bic.w	r1, r1, #4
 8008c5e:	6021      	str	r1, [r4, #0]
 8008c60:	d04b      	beq.n	8008cfa <_printf_i+0x1a6>
 8008c62:	4616      	mov	r6, r2
 8008c64:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c68:	fb03 5711 	mls	r7, r3, r1, r5
 8008c6c:	5dc7      	ldrb	r7, [r0, r7]
 8008c6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c72:	462f      	mov	r7, r5
 8008c74:	42bb      	cmp	r3, r7
 8008c76:	460d      	mov	r5, r1
 8008c78:	d9f4      	bls.n	8008c64 <_printf_i+0x110>
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d10b      	bne.n	8008c96 <_printf_i+0x142>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	07df      	lsls	r7, r3, #31
 8008c82:	d508      	bpl.n	8008c96 <_printf_i+0x142>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	6861      	ldr	r1, [r4, #4]
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	bfde      	ittt	le
 8008c8c:	2330      	movle	r3, #48	@ 0x30
 8008c8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c96:	1b92      	subs	r2, r2, r6
 8008c98:	6122      	str	r2, [r4, #16]
 8008c9a:	f8cd a000 	str.w	sl, [sp]
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	aa03      	add	r2, sp, #12
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	f7ff fee7 	bl	8008a78 <_printf_common>
 8008caa:	3001      	adds	r0, #1
 8008cac:	d14a      	bne.n	8008d44 <_printf_i+0x1f0>
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	b004      	add	sp, #16
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	f043 0320 	orr.w	r3, r3, #32
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	4832      	ldr	r0, [pc, #200]	@ (8008d8c <_printf_i+0x238>)
 8008cc2:	2778      	movs	r7, #120	@ 0x78
 8008cc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	6831      	ldr	r1, [r6, #0]
 8008ccc:	061f      	lsls	r7, r3, #24
 8008cce:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cd2:	d402      	bmi.n	8008cda <_printf_i+0x186>
 8008cd4:	065f      	lsls	r7, r3, #25
 8008cd6:	bf48      	it	mi
 8008cd8:	b2ad      	uxthmi	r5, r5
 8008cda:	6031      	str	r1, [r6, #0]
 8008cdc:	07d9      	lsls	r1, r3, #31
 8008cde:	bf44      	itt	mi
 8008ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce4:	6023      	strmi	r3, [r4, #0]
 8008ce6:	b11d      	cbz	r5, 8008cf0 <_printf_i+0x19c>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	e7ad      	b.n	8008c48 <_printf_i+0xf4>
 8008cec:	4826      	ldr	r0, [pc, #152]	@ (8008d88 <_printf_i+0x234>)
 8008cee:	e7e9      	b.n	8008cc4 <_printf_i+0x170>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	f023 0320 	bic.w	r3, r3, #32
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	e7f6      	b.n	8008ce8 <_printf_i+0x194>
 8008cfa:	4616      	mov	r6, r2
 8008cfc:	e7bd      	b.n	8008c7a <_printf_i+0x126>
 8008cfe:	6833      	ldr	r3, [r6, #0]
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	6961      	ldr	r1, [r4, #20]
 8008d04:	1d18      	adds	r0, r3, #4
 8008d06:	6030      	str	r0, [r6, #0]
 8008d08:	062e      	lsls	r6, r5, #24
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	d501      	bpl.n	8008d12 <_printf_i+0x1be>
 8008d0e:	6019      	str	r1, [r3, #0]
 8008d10:	e002      	b.n	8008d18 <_printf_i+0x1c4>
 8008d12:	0668      	lsls	r0, r5, #25
 8008d14:	d5fb      	bpl.n	8008d0e <_printf_i+0x1ba>
 8008d16:	8019      	strh	r1, [r3, #0]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	e7bc      	b.n	8008c9a <_printf_i+0x146>
 8008d20:	6833      	ldr	r3, [r6, #0]
 8008d22:	1d1a      	adds	r2, r3, #4
 8008d24:	6032      	str	r2, [r6, #0]
 8008d26:	681e      	ldr	r6, [r3, #0]
 8008d28:	6862      	ldr	r2, [r4, #4]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f7f7 fa7f 	bl	8000230 <memchr>
 8008d32:	b108      	cbz	r0, 8008d38 <_printf_i+0x1e4>
 8008d34:	1b80      	subs	r0, r0, r6
 8008d36:	6060      	str	r0, [r4, #4]
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d42:	e7aa      	b.n	8008c9a <_printf_i+0x146>
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	4632      	mov	r2, r6
 8008d48:	4649      	mov	r1, r9
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	47d0      	blx	sl
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d0ad      	beq.n	8008cae <_printf_i+0x15a>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	079b      	lsls	r3, r3, #30
 8008d56:	d413      	bmi.n	8008d80 <_printf_i+0x22c>
 8008d58:	68e0      	ldr	r0, [r4, #12]
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	4298      	cmp	r0, r3
 8008d5e:	bfb8      	it	lt
 8008d60:	4618      	movlt	r0, r3
 8008d62:	e7a6      	b.n	8008cb2 <_printf_i+0x15e>
 8008d64:	2301      	movs	r3, #1
 8008d66:	4632      	mov	r2, r6
 8008d68:	4649      	mov	r1, r9
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	47d0      	blx	sl
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d09d      	beq.n	8008cae <_printf_i+0x15a>
 8008d72:	3501      	adds	r5, #1
 8008d74:	68e3      	ldr	r3, [r4, #12]
 8008d76:	9903      	ldr	r1, [sp, #12]
 8008d78:	1a5b      	subs	r3, r3, r1
 8008d7a:	42ab      	cmp	r3, r5
 8008d7c:	dcf2      	bgt.n	8008d64 <_printf_i+0x210>
 8008d7e:	e7eb      	b.n	8008d58 <_printf_i+0x204>
 8008d80:	2500      	movs	r5, #0
 8008d82:	f104 0619 	add.w	r6, r4, #25
 8008d86:	e7f5      	b.n	8008d74 <_printf_i+0x220>
 8008d88:	0800b6b2 	.word	0x0800b6b2
 8008d8c:	0800b6c3 	.word	0x0800b6c3

08008d90 <std>:
 8008d90:	2300      	movs	r3, #0
 8008d92:	b510      	push	{r4, lr}
 8008d94:	4604      	mov	r4, r0
 8008d96:	e9c0 3300 	strd	r3, r3, [r0]
 8008d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d9e:	6083      	str	r3, [r0, #8]
 8008da0:	8181      	strh	r1, [r0, #12]
 8008da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008da4:	81c2      	strh	r2, [r0, #14]
 8008da6:	6183      	str	r3, [r0, #24]
 8008da8:	4619      	mov	r1, r3
 8008daa:	2208      	movs	r2, #8
 8008dac:	305c      	adds	r0, #92	@ 0x5c
 8008dae:	f000 f94c 	bl	800904a <memset>
 8008db2:	4b0d      	ldr	r3, [pc, #52]	@ (8008de8 <std+0x58>)
 8008db4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008db6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dec <std+0x5c>)
 8008db8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dba:	4b0d      	ldr	r3, [pc, #52]	@ (8008df0 <std+0x60>)
 8008dbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008df4 <std+0x64>)
 8008dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008df8 <std+0x68>)
 8008dc4:	6224      	str	r4, [r4, #32]
 8008dc6:	429c      	cmp	r4, r3
 8008dc8:	d006      	beq.n	8008dd8 <std+0x48>
 8008dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dce:	4294      	cmp	r4, r2
 8008dd0:	d002      	beq.n	8008dd8 <std+0x48>
 8008dd2:	33d0      	adds	r3, #208	@ 0xd0
 8008dd4:	429c      	cmp	r4, r3
 8008dd6:	d105      	bne.n	8008de4 <std+0x54>
 8008dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de0:	f000 b9c2 	b.w	8009168 <__retarget_lock_init_recursive>
 8008de4:	bd10      	pop	{r4, pc}
 8008de6:	bf00      	nop
 8008de8:	08008fc5 	.word	0x08008fc5
 8008dec:	08008fe7 	.word	0x08008fe7
 8008df0:	0800901f 	.word	0x0800901f
 8008df4:	08009043 	.word	0x08009043
 8008df8:	20000b74 	.word	0x20000b74

08008dfc <stdio_exit_handler>:
 8008dfc:	4a02      	ldr	r2, [pc, #8]	@ (8008e08 <stdio_exit_handler+0xc>)
 8008dfe:	4903      	ldr	r1, [pc, #12]	@ (8008e0c <stdio_exit_handler+0x10>)
 8008e00:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <stdio_exit_handler+0x14>)
 8008e02:	f000 b869 	b.w	8008ed8 <_fwalk_sglue>
 8008e06:	bf00      	nop
 8008e08:	2000000c 	.word	0x2000000c
 8008e0c:	0800aaed 	.word	0x0800aaed
 8008e10:	2000001c 	.word	0x2000001c

08008e14 <cleanup_stdio>:
 8008e14:	6841      	ldr	r1, [r0, #4]
 8008e16:	4b0c      	ldr	r3, [pc, #48]	@ (8008e48 <cleanup_stdio+0x34>)
 8008e18:	4299      	cmp	r1, r3
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	d001      	beq.n	8008e24 <cleanup_stdio+0x10>
 8008e20:	f001 fe64 	bl	800aaec <_fflush_r>
 8008e24:	68a1      	ldr	r1, [r4, #8]
 8008e26:	4b09      	ldr	r3, [pc, #36]	@ (8008e4c <cleanup_stdio+0x38>)
 8008e28:	4299      	cmp	r1, r3
 8008e2a:	d002      	beq.n	8008e32 <cleanup_stdio+0x1e>
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f001 fe5d 	bl	800aaec <_fflush_r>
 8008e32:	68e1      	ldr	r1, [r4, #12]
 8008e34:	4b06      	ldr	r3, [pc, #24]	@ (8008e50 <cleanup_stdio+0x3c>)
 8008e36:	4299      	cmp	r1, r3
 8008e38:	d004      	beq.n	8008e44 <cleanup_stdio+0x30>
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e40:	f001 be54 	b.w	800aaec <_fflush_r>
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	bf00      	nop
 8008e48:	20000b74 	.word	0x20000b74
 8008e4c:	20000bdc 	.word	0x20000bdc
 8008e50:	20000c44 	.word	0x20000c44

08008e54 <global_stdio_init.part.0>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	4b0b      	ldr	r3, [pc, #44]	@ (8008e84 <global_stdio_init.part.0+0x30>)
 8008e58:	4c0b      	ldr	r4, [pc, #44]	@ (8008e88 <global_stdio_init.part.0+0x34>)
 8008e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e8c <global_stdio_init.part.0+0x38>)
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	4620      	mov	r0, r4
 8008e60:	2200      	movs	r2, #0
 8008e62:	2104      	movs	r1, #4
 8008e64:	f7ff ff94 	bl	8008d90 <std>
 8008e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	2109      	movs	r1, #9
 8008e70:	f7ff ff8e 	bl	8008d90 <std>
 8008e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e78:	2202      	movs	r2, #2
 8008e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7e:	2112      	movs	r1, #18
 8008e80:	f7ff bf86 	b.w	8008d90 <std>
 8008e84:	20000cac 	.word	0x20000cac
 8008e88:	20000b74 	.word	0x20000b74
 8008e8c:	08008dfd 	.word	0x08008dfd

08008e90 <__sfp_lock_acquire>:
 8008e90:	4801      	ldr	r0, [pc, #4]	@ (8008e98 <__sfp_lock_acquire+0x8>)
 8008e92:	f000 b96a 	b.w	800916a <__retarget_lock_acquire_recursive>
 8008e96:	bf00      	nop
 8008e98:	20000cb5 	.word	0x20000cb5

08008e9c <__sfp_lock_release>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	@ (8008ea4 <__sfp_lock_release+0x8>)
 8008e9e:	f000 b965 	b.w	800916c <__retarget_lock_release_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	20000cb5 	.word	0x20000cb5

08008ea8 <__sinit>:
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	4604      	mov	r4, r0
 8008eac:	f7ff fff0 	bl	8008e90 <__sfp_lock_acquire>
 8008eb0:	6a23      	ldr	r3, [r4, #32]
 8008eb2:	b11b      	cbz	r3, 8008ebc <__sinit+0x14>
 8008eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb8:	f7ff bff0 	b.w	8008e9c <__sfp_lock_release>
 8008ebc:	4b04      	ldr	r3, [pc, #16]	@ (8008ed0 <__sinit+0x28>)
 8008ebe:	6223      	str	r3, [r4, #32]
 8008ec0:	4b04      	ldr	r3, [pc, #16]	@ (8008ed4 <__sinit+0x2c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1f5      	bne.n	8008eb4 <__sinit+0xc>
 8008ec8:	f7ff ffc4 	bl	8008e54 <global_stdio_init.part.0>
 8008ecc:	e7f2      	b.n	8008eb4 <__sinit+0xc>
 8008ece:	bf00      	nop
 8008ed0:	08008e15 	.word	0x08008e15
 8008ed4:	20000cac 	.word	0x20000cac

08008ed8 <_fwalk_sglue>:
 8008ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	4607      	mov	r7, r0
 8008ede:	4688      	mov	r8, r1
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8008eec:	d505      	bpl.n	8008efa <_fwalk_sglue+0x22>
 8008eee:	6824      	ldr	r4, [r4, #0]
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	d1f7      	bne.n	8008ee4 <_fwalk_sglue+0xc>
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efa:	89ab      	ldrh	r3, [r5, #12]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d907      	bls.n	8008f10 <_fwalk_sglue+0x38>
 8008f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f04:	3301      	adds	r3, #1
 8008f06:	d003      	beq.n	8008f10 <_fwalk_sglue+0x38>
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c0      	blx	r8
 8008f0e:	4306      	orrs	r6, r0
 8008f10:	3568      	adds	r5, #104	@ 0x68
 8008f12:	e7e9      	b.n	8008ee8 <_fwalk_sglue+0x10>

08008f14 <sniprintf>:
 8008f14:	b40c      	push	{r2, r3}
 8008f16:	b530      	push	{r4, r5, lr}
 8008f18:	4b18      	ldr	r3, [pc, #96]	@ (8008f7c <sniprintf+0x68>)
 8008f1a:	1e0c      	subs	r4, r1, #0
 8008f1c:	681d      	ldr	r5, [r3, #0]
 8008f1e:	b09d      	sub	sp, #116	@ 0x74
 8008f20:	da08      	bge.n	8008f34 <sniprintf+0x20>
 8008f22:	238b      	movs	r3, #139	@ 0x8b
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	b01d      	add	sp, #116	@ 0x74
 8008f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f30:	b002      	add	sp, #8
 8008f32:	4770      	bx	lr
 8008f34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008f38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f3c:	f04f 0300 	mov.w	r3, #0
 8008f40:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008f42:	bf14      	ite	ne
 8008f44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f48:	4623      	moveq	r3, r4
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	9307      	str	r3, [sp, #28]
 8008f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f52:	9002      	str	r0, [sp, #8]
 8008f54:	9006      	str	r0, [sp, #24]
 8008f56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f5c:	ab21      	add	r3, sp, #132	@ 0x84
 8008f5e:	a902      	add	r1, sp, #8
 8008f60:	4628      	mov	r0, r5
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	f001 fc42 	bl	800a7ec <_svfiprintf_r>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	bfbc      	itt	lt
 8008f6c:	238b      	movlt	r3, #139	@ 0x8b
 8008f6e:	602b      	strlt	r3, [r5, #0]
 8008f70:	2c00      	cmp	r4, #0
 8008f72:	d0da      	beq.n	8008f2a <sniprintf+0x16>
 8008f74:	9b02      	ldr	r3, [sp, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	e7d6      	b.n	8008f2a <sniprintf+0x16>
 8008f7c:	20000018 	.word	0x20000018

08008f80 <siprintf>:
 8008f80:	b40e      	push	{r1, r2, r3}
 8008f82:	b510      	push	{r4, lr}
 8008f84:	b09d      	sub	sp, #116	@ 0x74
 8008f86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008f88:	9002      	str	r0, [sp, #8]
 8008f8a:	9006      	str	r0, [sp, #24]
 8008f8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f90:	480a      	ldr	r0, [pc, #40]	@ (8008fbc <siprintf+0x3c>)
 8008f92:	9107      	str	r1, [sp, #28]
 8008f94:	9104      	str	r1, [sp, #16]
 8008f96:	490a      	ldr	r1, [pc, #40]	@ (8008fc0 <siprintf+0x40>)
 8008f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9c:	9105      	str	r1, [sp, #20]
 8008f9e:	2400      	movs	r4, #0
 8008fa0:	a902      	add	r1, sp, #8
 8008fa2:	6800      	ldr	r0, [r0, #0]
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008fa8:	f001 fc20 	bl	800a7ec <_svfiprintf_r>
 8008fac:	9b02      	ldr	r3, [sp, #8]
 8008fae:	701c      	strb	r4, [r3, #0]
 8008fb0:	b01d      	add	sp, #116	@ 0x74
 8008fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb6:	b003      	add	sp, #12
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	20000018 	.word	0x20000018
 8008fc0:	ffff0208 	.word	0xffff0208

08008fc4 <__sread>:
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fcc:	f000 f87e 	bl	80090cc <_read_r>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	bfab      	itete	ge
 8008fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fd8:	181b      	addge	r3, r3, r0
 8008fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fde:	bfac      	ite	ge
 8008fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fe2:	81a3      	strhlt	r3, [r4, #12]
 8008fe4:	bd10      	pop	{r4, pc}

08008fe6 <__swrite>:
 8008fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	461f      	mov	r7, r3
 8008fec:	898b      	ldrh	r3, [r1, #12]
 8008fee:	05db      	lsls	r3, r3, #23
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	4616      	mov	r6, r2
 8008ff6:	d505      	bpl.n	8009004 <__swrite+0x1e>
 8008ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	2200      	movs	r2, #0
 8009000:	f000 f852 	bl	80090a8 <_lseek_r>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800900a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	4632      	mov	r2, r6
 8009012:	463b      	mov	r3, r7
 8009014:	4628      	mov	r0, r5
 8009016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901a:	f000 b869 	b.w	80090f0 <_write_r>

0800901e <__sseek>:
 800901e:	b510      	push	{r4, lr}
 8009020:	460c      	mov	r4, r1
 8009022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009026:	f000 f83f 	bl	80090a8 <_lseek_r>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	bf15      	itete	ne
 8009030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800903a:	81a3      	strheq	r3, [r4, #12]
 800903c:	bf18      	it	ne
 800903e:	81a3      	strhne	r3, [r4, #12]
 8009040:	bd10      	pop	{r4, pc}

08009042 <__sclose>:
 8009042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009046:	f000 b81f 	b.w	8009088 <_close_r>

0800904a <memset>:
 800904a:	4402      	add	r2, r0
 800904c:	4603      	mov	r3, r0
 800904e:	4293      	cmp	r3, r2
 8009050:	d100      	bne.n	8009054 <memset+0xa>
 8009052:	4770      	bx	lr
 8009054:	f803 1b01 	strb.w	r1, [r3], #1
 8009058:	e7f9      	b.n	800904e <memset+0x4>

0800905a <strncpy>:
 800905a:	b510      	push	{r4, lr}
 800905c:	3901      	subs	r1, #1
 800905e:	4603      	mov	r3, r0
 8009060:	b132      	cbz	r2, 8009070 <strncpy+0x16>
 8009062:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009066:	f803 4b01 	strb.w	r4, [r3], #1
 800906a:	3a01      	subs	r2, #1
 800906c:	2c00      	cmp	r4, #0
 800906e:	d1f7      	bne.n	8009060 <strncpy+0x6>
 8009070:	441a      	add	r2, r3
 8009072:	2100      	movs	r1, #0
 8009074:	4293      	cmp	r3, r2
 8009076:	d100      	bne.n	800907a <strncpy+0x20>
 8009078:	bd10      	pop	{r4, pc}
 800907a:	f803 1b01 	strb.w	r1, [r3], #1
 800907e:	e7f9      	b.n	8009074 <strncpy+0x1a>

08009080 <_localeconv_r>:
 8009080:	4800      	ldr	r0, [pc, #0]	@ (8009084 <_localeconv_r+0x4>)
 8009082:	4770      	bx	lr
 8009084:	20000158 	.word	0x20000158

08009088 <_close_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d06      	ldr	r5, [pc, #24]	@ (80090a4 <_close_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f9 fcd0 	bl	8002a38 <_close>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_close_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_close_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20000cb0 	.word	0x20000cb0

080090a8 <_lseek_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d07      	ldr	r5, [pc, #28]	@ (80090c8 <_lseek_r+0x20>)
 80090ac:	4604      	mov	r4, r0
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7f9 fce5 	bl	8002a86 <_lseek>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_lseek_r+0x1e>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_lseek_r+0x1e>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20000cb0 	.word	0x20000cb0

080090cc <_read_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d07      	ldr	r5, [pc, #28]	@ (80090ec <_read_r+0x20>)
 80090d0:	4604      	mov	r4, r0
 80090d2:	4608      	mov	r0, r1
 80090d4:	4611      	mov	r1, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	602a      	str	r2, [r5, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	f7f9 fc73 	bl	80029c6 <_read>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_read_r+0x1e>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_read_r+0x1e>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	20000cb0 	.word	0x20000cb0

080090f0 <_write_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d07      	ldr	r5, [pc, #28]	@ (8009110 <_write_r+0x20>)
 80090f4:	4604      	mov	r4, r0
 80090f6:	4608      	mov	r0, r1
 80090f8:	4611      	mov	r1, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	602a      	str	r2, [r5, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	f7f9 fc7e 	bl	8002a00 <_write>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_write_r+0x1e>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	b103      	cbz	r3, 800910e <_write_r+0x1e>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	20000cb0 	.word	0x20000cb0

08009114 <__errno>:
 8009114:	4b01      	ldr	r3, [pc, #4]	@ (800911c <__errno+0x8>)
 8009116:	6818      	ldr	r0, [r3, #0]
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	20000018 	.word	0x20000018

08009120 <__libc_init_array>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	4d0d      	ldr	r5, [pc, #52]	@ (8009158 <__libc_init_array+0x38>)
 8009124:	4c0d      	ldr	r4, [pc, #52]	@ (800915c <__libc_init_array+0x3c>)
 8009126:	1b64      	subs	r4, r4, r5
 8009128:	10a4      	asrs	r4, r4, #2
 800912a:	2600      	movs	r6, #0
 800912c:	42a6      	cmp	r6, r4
 800912e:	d109      	bne.n	8009144 <__libc_init_array+0x24>
 8009130:	4d0b      	ldr	r5, [pc, #44]	@ (8009160 <__libc_init_array+0x40>)
 8009132:	4c0c      	ldr	r4, [pc, #48]	@ (8009164 <__libc_init_array+0x44>)
 8009134:	f002 f86a 	bl	800b20c <_init>
 8009138:	1b64      	subs	r4, r4, r5
 800913a:	10a4      	asrs	r4, r4, #2
 800913c:	2600      	movs	r6, #0
 800913e:	42a6      	cmp	r6, r4
 8009140:	d105      	bne.n	800914e <__libc_init_array+0x2e>
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	f855 3b04 	ldr.w	r3, [r5], #4
 8009148:	4798      	blx	r3
 800914a:	3601      	adds	r6, #1
 800914c:	e7ee      	b.n	800912c <__libc_init_array+0xc>
 800914e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009152:	4798      	blx	r3
 8009154:	3601      	adds	r6, #1
 8009156:	e7f2      	b.n	800913e <__libc_init_array+0x1e>
 8009158:	0800ba1c 	.word	0x0800ba1c
 800915c:	0800ba1c 	.word	0x0800ba1c
 8009160:	0800ba1c 	.word	0x0800ba1c
 8009164:	0800ba20 	.word	0x0800ba20

08009168 <__retarget_lock_init_recursive>:
 8009168:	4770      	bx	lr

0800916a <__retarget_lock_acquire_recursive>:
 800916a:	4770      	bx	lr

0800916c <__retarget_lock_release_recursive>:
 800916c:	4770      	bx	lr

0800916e <memcpy>:
 800916e:	440a      	add	r2, r1
 8009170:	4291      	cmp	r1, r2
 8009172:	f100 33ff 	add.w	r3, r0, #4294967295
 8009176:	d100      	bne.n	800917a <memcpy+0xc>
 8009178:	4770      	bx	lr
 800917a:	b510      	push	{r4, lr}
 800917c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009184:	4291      	cmp	r1, r2
 8009186:	d1f9      	bne.n	800917c <memcpy+0xe>
 8009188:	bd10      	pop	{r4, pc}

0800918a <quorem>:
 800918a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918e:	6903      	ldr	r3, [r0, #16]
 8009190:	690c      	ldr	r4, [r1, #16]
 8009192:	42a3      	cmp	r3, r4
 8009194:	4607      	mov	r7, r0
 8009196:	db7e      	blt.n	8009296 <quorem+0x10c>
 8009198:	3c01      	subs	r4, #1
 800919a:	f101 0814 	add.w	r8, r1, #20
 800919e:	00a3      	lsls	r3, r4, #2
 80091a0:	f100 0514 	add.w	r5, r0, #20
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091b4:	3301      	adds	r3, #1
 80091b6:	429a      	cmp	r2, r3
 80091b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80091c0:	d32e      	bcc.n	8009220 <quorem+0x96>
 80091c2:	f04f 0a00 	mov.w	sl, #0
 80091c6:	46c4      	mov	ip, r8
 80091c8:	46ae      	mov	lr, r5
 80091ca:	46d3      	mov	fp, sl
 80091cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091d0:	b298      	uxth	r0, r3
 80091d2:	fb06 a000 	mla	r0, r6, r0, sl
 80091d6:	0c02      	lsrs	r2, r0, #16
 80091d8:	0c1b      	lsrs	r3, r3, #16
 80091da:	fb06 2303 	mla	r3, r6, r3, r2
 80091de:	f8de 2000 	ldr.w	r2, [lr]
 80091e2:	b280      	uxth	r0, r0
 80091e4:	b292      	uxth	r2, r2
 80091e6:	1a12      	subs	r2, r2, r0
 80091e8:	445a      	add	r2, fp
 80091ea:	f8de 0000 	ldr.w	r0, [lr]
 80091ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80091f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80091fc:	b292      	uxth	r2, r2
 80091fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009202:	45e1      	cmp	r9, ip
 8009204:	f84e 2b04 	str.w	r2, [lr], #4
 8009208:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800920c:	d2de      	bcs.n	80091cc <quorem+0x42>
 800920e:	9b00      	ldr	r3, [sp, #0]
 8009210:	58eb      	ldr	r3, [r5, r3]
 8009212:	b92b      	cbnz	r3, 8009220 <quorem+0x96>
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	3b04      	subs	r3, #4
 8009218:	429d      	cmp	r5, r3
 800921a:	461a      	mov	r2, r3
 800921c:	d32f      	bcc.n	800927e <quorem+0xf4>
 800921e:	613c      	str	r4, [r7, #16]
 8009220:	4638      	mov	r0, r7
 8009222:	f001 f97f 	bl	800a524 <__mcmp>
 8009226:	2800      	cmp	r0, #0
 8009228:	db25      	blt.n	8009276 <quorem+0xec>
 800922a:	4629      	mov	r1, r5
 800922c:	2000      	movs	r0, #0
 800922e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009232:	f8d1 c000 	ldr.w	ip, [r1]
 8009236:	fa1f fe82 	uxth.w	lr, r2
 800923a:	fa1f f38c 	uxth.w	r3, ip
 800923e:	eba3 030e 	sub.w	r3, r3, lr
 8009242:	4403      	add	r3, r0
 8009244:	0c12      	lsrs	r2, r2, #16
 8009246:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800924a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800924e:	b29b      	uxth	r3, r3
 8009250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009254:	45c1      	cmp	r9, r8
 8009256:	f841 3b04 	str.w	r3, [r1], #4
 800925a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800925e:	d2e6      	bcs.n	800922e <quorem+0xa4>
 8009260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009264:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009268:	b922      	cbnz	r2, 8009274 <quorem+0xea>
 800926a:	3b04      	subs	r3, #4
 800926c:	429d      	cmp	r5, r3
 800926e:	461a      	mov	r2, r3
 8009270:	d30b      	bcc.n	800928a <quorem+0x100>
 8009272:	613c      	str	r4, [r7, #16]
 8009274:	3601      	adds	r6, #1
 8009276:	4630      	mov	r0, r6
 8009278:	b003      	add	sp, #12
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	6812      	ldr	r2, [r2, #0]
 8009280:	3b04      	subs	r3, #4
 8009282:	2a00      	cmp	r2, #0
 8009284:	d1cb      	bne.n	800921e <quorem+0x94>
 8009286:	3c01      	subs	r4, #1
 8009288:	e7c6      	b.n	8009218 <quorem+0x8e>
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	3b04      	subs	r3, #4
 800928e:	2a00      	cmp	r2, #0
 8009290:	d1ef      	bne.n	8009272 <quorem+0xe8>
 8009292:	3c01      	subs	r4, #1
 8009294:	e7ea      	b.n	800926c <quorem+0xe2>
 8009296:	2000      	movs	r0, #0
 8009298:	e7ee      	b.n	8009278 <quorem+0xee>
 800929a:	0000      	movs	r0, r0
 800929c:	0000      	movs	r0, r0
	...

080092a0 <_dtoa_r>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	69c7      	ldr	r7, [r0, #28]
 80092a6:	b097      	sub	sp, #92	@ 0x5c
 80092a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80092ac:	ec55 4b10 	vmov	r4, r5, d0
 80092b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80092b2:	9107      	str	r1, [sp, #28]
 80092b4:	4681      	mov	r9, r0
 80092b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80092b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80092ba:	b97f      	cbnz	r7, 80092dc <_dtoa_r+0x3c>
 80092bc:	2010      	movs	r0, #16
 80092be:	f000 fe09 	bl	8009ed4 <malloc>
 80092c2:	4602      	mov	r2, r0
 80092c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80092c8:	b920      	cbnz	r0, 80092d4 <_dtoa_r+0x34>
 80092ca:	4ba9      	ldr	r3, [pc, #676]	@ (8009570 <_dtoa_r+0x2d0>)
 80092cc:	21ef      	movs	r1, #239	@ 0xef
 80092ce:	48a9      	ldr	r0, [pc, #676]	@ (8009574 <_dtoa_r+0x2d4>)
 80092d0:	f001 fc5e 	bl	800ab90 <__assert_func>
 80092d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80092d8:	6007      	str	r7, [r0, #0]
 80092da:	60c7      	str	r7, [r0, #12]
 80092dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80092e0:	6819      	ldr	r1, [r3, #0]
 80092e2:	b159      	cbz	r1, 80092fc <_dtoa_r+0x5c>
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	604a      	str	r2, [r1, #4]
 80092e8:	2301      	movs	r3, #1
 80092ea:	4093      	lsls	r3, r2
 80092ec:	608b      	str	r3, [r1, #8]
 80092ee:	4648      	mov	r0, r9
 80092f0:	f000 fee6 	bl	800a0c0 <_Bfree>
 80092f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	1e2b      	subs	r3, r5, #0
 80092fe:	bfb9      	ittee	lt
 8009300:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009304:	9305      	strlt	r3, [sp, #20]
 8009306:	2300      	movge	r3, #0
 8009308:	6033      	strge	r3, [r6, #0]
 800930a:	9f05      	ldr	r7, [sp, #20]
 800930c:	4b9a      	ldr	r3, [pc, #616]	@ (8009578 <_dtoa_r+0x2d8>)
 800930e:	bfbc      	itt	lt
 8009310:	2201      	movlt	r2, #1
 8009312:	6032      	strlt	r2, [r6, #0]
 8009314:	43bb      	bics	r3, r7
 8009316:	d112      	bne.n	800933e <_dtoa_r+0x9e>
 8009318:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800931a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009324:	4323      	orrs	r3, r4
 8009326:	f000 855a 	beq.w	8009dde <_dtoa_r+0xb3e>
 800932a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800932c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800958c <_dtoa_r+0x2ec>
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 855c 	beq.w	8009dee <_dtoa_r+0xb4e>
 8009336:	f10a 0303 	add.w	r3, sl, #3
 800933a:	f000 bd56 	b.w	8009dea <_dtoa_r+0xb4a>
 800933e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009342:	2200      	movs	r2, #0
 8009344:	ec51 0b17 	vmov	r0, r1, d7
 8009348:	2300      	movs	r3, #0
 800934a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800934e:	f7f7 fbeb 	bl	8000b28 <__aeabi_dcmpeq>
 8009352:	4680      	mov	r8, r0
 8009354:	b158      	cbz	r0, 800936e <_dtoa_r+0xce>
 8009356:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009358:	2301      	movs	r3, #1
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800935e:	b113      	cbz	r3, 8009366 <_dtoa_r+0xc6>
 8009360:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009362:	4b86      	ldr	r3, [pc, #536]	@ (800957c <_dtoa_r+0x2dc>)
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009590 <_dtoa_r+0x2f0>
 800936a:	f000 bd40 	b.w	8009dee <_dtoa_r+0xb4e>
 800936e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009372:	aa14      	add	r2, sp, #80	@ 0x50
 8009374:	a915      	add	r1, sp, #84	@ 0x54
 8009376:	4648      	mov	r0, r9
 8009378:	f001 f984 	bl	800a684 <__d2b>
 800937c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009380:	9002      	str	r0, [sp, #8]
 8009382:	2e00      	cmp	r6, #0
 8009384:	d078      	beq.n	8009478 <_dtoa_r+0x1d8>
 8009386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009388:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800938c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009394:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009398:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800939c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80093a0:	4619      	mov	r1, r3
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b76      	ldr	r3, [pc, #472]	@ (8009580 <_dtoa_r+0x2e0>)
 80093a6:	f7f6 ff9f 	bl	80002e8 <__aeabi_dsub>
 80093aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8009558 <_dtoa_r+0x2b8>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f7 f952 	bl	8000658 <__aeabi_dmul>
 80093b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009560 <_dtoa_r+0x2c0>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	f7f6 ff97 	bl	80002ec <__adddf3>
 80093be:	4604      	mov	r4, r0
 80093c0:	4630      	mov	r0, r6
 80093c2:	460d      	mov	r5, r1
 80093c4:	f7f7 f8de 	bl	8000584 <__aeabi_i2d>
 80093c8:	a367      	add	r3, pc, #412	@ (adr r3, 8009568 <_dtoa_r+0x2c8>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f7 f943 	bl	8000658 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f6 ff87 	bl	80002ec <__adddf3>
 80093de:	4604      	mov	r4, r0
 80093e0:	460d      	mov	r5, r1
 80093e2:	f7f7 fbe9 	bl	8000bb8 <__aeabi_d2iz>
 80093e6:	2200      	movs	r2, #0
 80093e8:	4607      	mov	r7, r0
 80093ea:	2300      	movs	r3, #0
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f7 fba4 	bl	8000b3c <__aeabi_dcmplt>
 80093f4:	b140      	cbz	r0, 8009408 <_dtoa_r+0x168>
 80093f6:	4638      	mov	r0, r7
 80093f8:	f7f7 f8c4 	bl	8000584 <__aeabi_i2d>
 80093fc:	4622      	mov	r2, r4
 80093fe:	462b      	mov	r3, r5
 8009400:	f7f7 fb92 	bl	8000b28 <__aeabi_dcmpeq>
 8009404:	b900      	cbnz	r0, 8009408 <_dtoa_r+0x168>
 8009406:	3f01      	subs	r7, #1
 8009408:	2f16      	cmp	r7, #22
 800940a:	d852      	bhi.n	80094b2 <_dtoa_r+0x212>
 800940c:	4b5d      	ldr	r3, [pc, #372]	@ (8009584 <_dtoa_r+0x2e4>)
 800940e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800941a:	f7f7 fb8f 	bl	8000b3c <__aeabi_dcmplt>
 800941e:	2800      	cmp	r0, #0
 8009420:	d049      	beq.n	80094b6 <_dtoa_r+0x216>
 8009422:	3f01      	subs	r7, #1
 8009424:	2300      	movs	r3, #0
 8009426:	9310      	str	r3, [sp, #64]	@ 0x40
 8009428:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800942a:	1b9b      	subs	r3, r3, r6
 800942c:	1e5a      	subs	r2, r3, #1
 800942e:	bf45      	ittet	mi
 8009430:	f1c3 0301 	rsbmi	r3, r3, #1
 8009434:	9300      	strmi	r3, [sp, #0]
 8009436:	2300      	movpl	r3, #0
 8009438:	2300      	movmi	r3, #0
 800943a:	9206      	str	r2, [sp, #24]
 800943c:	bf54      	ite	pl
 800943e:	9300      	strpl	r3, [sp, #0]
 8009440:	9306      	strmi	r3, [sp, #24]
 8009442:	2f00      	cmp	r7, #0
 8009444:	db39      	blt.n	80094ba <_dtoa_r+0x21a>
 8009446:	9b06      	ldr	r3, [sp, #24]
 8009448:	970d      	str	r7, [sp, #52]	@ 0x34
 800944a:	443b      	add	r3, r7
 800944c:	9306      	str	r3, [sp, #24]
 800944e:	2300      	movs	r3, #0
 8009450:	9308      	str	r3, [sp, #32]
 8009452:	9b07      	ldr	r3, [sp, #28]
 8009454:	2b09      	cmp	r3, #9
 8009456:	d863      	bhi.n	8009520 <_dtoa_r+0x280>
 8009458:	2b05      	cmp	r3, #5
 800945a:	bfc4      	itt	gt
 800945c:	3b04      	subgt	r3, #4
 800945e:	9307      	strgt	r3, [sp, #28]
 8009460:	9b07      	ldr	r3, [sp, #28]
 8009462:	f1a3 0302 	sub.w	r3, r3, #2
 8009466:	bfcc      	ite	gt
 8009468:	2400      	movgt	r4, #0
 800946a:	2401      	movle	r4, #1
 800946c:	2b03      	cmp	r3, #3
 800946e:	d863      	bhi.n	8009538 <_dtoa_r+0x298>
 8009470:	e8df f003 	tbb	[pc, r3]
 8009474:	2b375452 	.word	0x2b375452
 8009478:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800947c:	441e      	add	r6, r3
 800947e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009482:	2b20      	cmp	r3, #32
 8009484:	bfc1      	itttt	gt
 8009486:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800948a:	409f      	lslgt	r7, r3
 800948c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009490:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009494:	bfd6      	itet	le
 8009496:	f1c3 0320 	rsble	r3, r3, #32
 800949a:	ea47 0003 	orrgt.w	r0, r7, r3
 800949e:	fa04 f003 	lslle.w	r0, r4, r3
 80094a2:	f7f7 f85f 	bl	8000564 <__aeabi_ui2d>
 80094a6:	2201      	movs	r2, #1
 80094a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80094ac:	3e01      	subs	r6, #1
 80094ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80094b0:	e776      	b.n	80093a0 <_dtoa_r+0x100>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e7b7      	b.n	8009426 <_dtoa_r+0x186>
 80094b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80094b8:	e7b6      	b.n	8009428 <_dtoa_r+0x188>
 80094ba:	9b00      	ldr	r3, [sp, #0]
 80094bc:	1bdb      	subs	r3, r3, r7
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	427b      	negs	r3, r7
 80094c2:	9308      	str	r3, [sp, #32]
 80094c4:	2300      	movs	r3, #0
 80094c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80094c8:	e7c3      	b.n	8009452 <_dtoa_r+0x1b2>
 80094ca:	2301      	movs	r3, #1
 80094cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094d0:	eb07 0b03 	add.w	fp, r7, r3
 80094d4:	f10b 0301 	add.w	r3, fp, #1
 80094d8:	2b01      	cmp	r3, #1
 80094da:	9303      	str	r3, [sp, #12]
 80094dc:	bfb8      	it	lt
 80094de:	2301      	movlt	r3, #1
 80094e0:	e006      	b.n	80094f0 <_dtoa_r+0x250>
 80094e2:	2301      	movs	r3, #1
 80094e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	dd28      	ble.n	800953e <_dtoa_r+0x29e>
 80094ec:	469b      	mov	fp, r3
 80094ee:	9303      	str	r3, [sp, #12]
 80094f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80094f4:	2100      	movs	r1, #0
 80094f6:	2204      	movs	r2, #4
 80094f8:	f102 0514 	add.w	r5, r2, #20
 80094fc:	429d      	cmp	r5, r3
 80094fe:	d926      	bls.n	800954e <_dtoa_r+0x2ae>
 8009500:	6041      	str	r1, [r0, #4]
 8009502:	4648      	mov	r0, r9
 8009504:	f000 fd9c 	bl	800a040 <_Balloc>
 8009508:	4682      	mov	sl, r0
 800950a:	2800      	cmp	r0, #0
 800950c:	d142      	bne.n	8009594 <_dtoa_r+0x2f4>
 800950e:	4b1e      	ldr	r3, [pc, #120]	@ (8009588 <_dtoa_r+0x2e8>)
 8009510:	4602      	mov	r2, r0
 8009512:	f240 11af 	movw	r1, #431	@ 0x1af
 8009516:	e6da      	b.n	80092ce <_dtoa_r+0x2e>
 8009518:	2300      	movs	r3, #0
 800951a:	e7e3      	b.n	80094e4 <_dtoa_r+0x244>
 800951c:	2300      	movs	r3, #0
 800951e:	e7d5      	b.n	80094cc <_dtoa_r+0x22c>
 8009520:	2401      	movs	r4, #1
 8009522:	2300      	movs	r3, #0
 8009524:	9307      	str	r3, [sp, #28]
 8009526:	9409      	str	r4, [sp, #36]	@ 0x24
 8009528:	f04f 3bff 	mov.w	fp, #4294967295
 800952c:	2200      	movs	r2, #0
 800952e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009532:	2312      	movs	r3, #18
 8009534:	920c      	str	r2, [sp, #48]	@ 0x30
 8009536:	e7db      	b.n	80094f0 <_dtoa_r+0x250>
 8009538:	2301      	movs	r3, #1
 800953a:	9309      	str	r3, [sp, #36]	@ 0x24
 800953c:	e7f4      	b.n	8009528 <_dtoa_r+0x288>
 800953e:	f04f 0b01 	mov.w	fp, #1
 8009542:	f8cd b00c 	str.w	fp, [sp, #12]
 8009546:	465b      	mov	r3, fp
 8009548:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800954c:	e7d0      	b.n	80094f0 <_dtoa_r+0x250>
 800954e:	3101      	adds	r1, #1
 8009550:	0052      	lsls	r2, r2, #1
 8009552:	e7d1      	b.n	80094f8 <_dtoa_r+0x258>
 8009554:	f3af 8000 	nop.w
 8009558:	636f4361 	.word	0x636f4361
 800955c:	3fd287a7 	.word	0x3fd287a7
 8009560:	8b60c8b3 	.word	0x8b60c8b3
 8009564:	3fc68a28 	.word	0x3fc68a28
 8009568:	509f79fb 	.word	0x509f79fb
 800956c:	3fd34413 	.word	0x3fd34413
 8009570:	0800b6e1 	.word	0x0800b6e1
 8009574:	0800b6f8 	.word	0x0800b6f8
 8009578:	7ff00000 	.word	0x7ff00000
 800957c:	0800b6b1 	.word	0x0800b6b1
 8009580:	3ff80000 	.word	0x3ff80000
 8009584:	0800b848 	.word	0x0800b848
 8009588:	0800b750 	.word	0x0800b750
 800958c:	0800b6dd 	.word	0x0800b6dd
 8009590:	0800b6b0 	.word	0x0800b6b0
 8009594:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009598:	6018      	str	r0, [r3, #0]
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	2b0e      	cmp	r3, #14
 800959e:	f200 80a1 	bhi.w	80096e4 <_dtoa_r+0x444>
 80095a2:	2c00      	cmp	r4, #0
 80095a4:	f000 809e 	beq.w	80096e4 <_dtoa_r+0x444>
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	dd33      	ble.n	8009614 <_dtoa_r+0x374>
 80095ac:	4b9c      	ldr	r3, [pc, #624]	@ (8009820 <_dtoa_r+0x580>)
 80095ae:	f007 020f 	and.w	r2, r7, #15
 80095b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095b6:	ed93 7b00 	vldr	d7, [r3]
 80095ba:	05f8      	lsls	r0, r7, #23
 80095bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80095c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80095c4:	d516      	bpl.n	80095f4 <_dtoa_r+0x354>
 80095c6:	4b97      	ldr	r3, [pc, #604]	@ (8009824 <_dtoa_r+0x584>)
 80095c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095d0:	f7f7 f96c 	bl	80008ac <__aeabi_ddiv>
 80095d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095d8:	f004 040f 	and.w	r4, r4, #15
 80095dc:	2603      	movs	r6, #3
 80095de:	4d91      	ldr	r5, [pc, #580]	@ (8009824 <_dtoa_r+0x584>)
 80095e0:	b954      	cbnz	r4, 80095f8 <_dtoa_r+0x358>
 80095e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80095e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095ea:	f7f7 f95f 	bl	80008ac <__aeabi_ddiv>
 80095ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095f2:	e028      	b.n	8009646 <_dtoa_r+0x3a6>
 80095f4:	2602      	movs	r6, #2
 80095f6:	e7f2      	b.n	80095de <_dtoa_r+0x33e>
 80095f8:	07e1      	lsls	r1, r4, #31
 80095fa:	d508      	bpl.n	800960e <_dtoa_r+0x36e>
 80095fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009600:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009604:	f7f7 f828 	bl	8000658 <__aeabi_dmul>
 8009608:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800960c:	3601      	adds	r6, #1
 800960e:	1064      	asrs	r4, r4, #1
 8009610:	3508      	adds	r5, #8
 8009612:	e7e5      	b.n	80095e0 <_dtoa_r+0x340>
 8009614:	f000 80af 	beq.w	8009776 <_dtoa_r+0x4d6>
 8009618:	427c      	negs	r4, r7
 800961a:	4b81      	ldr	r3, [pc, #516]	@ (8009820 <_dtoa_r+0x580>)
 800961c:	4d81      	ldr	r5, [pc, #516]	@ (8009824 <_dtoa_r+0x584>)
 800961e:	f004 020f 	and.w	r2, r4, #15
 8009622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800962e:	f7f7 f813 	bl	8000658 <__aeabi_dmul>
 8009632:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009636:	1124      	asrs	r4, r4, #4
 8009638:	2300      	movs	r3, #0
 800963a:	2602      	movs	r6, #2
 800963c:	2c00      	cmp	r4, #0
 800963e:	f040 808f 	bne.w	8009760 <_dtoa_r+0x4c0>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1d3      	bne.n	80095ee <_dtoa_r+0x34e>
 8009646:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009648:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 8094 	beq.w	800977a <_dtoa_r+0x4da>
 8009652:	4b75      	ldr	r3, [pc, #468]	@ (8009828 <_dtoa_r+0x588>)
 8009654:	2200      	movs	r2, #0
 8009656:	4620      	mov	r0, r4
 8009658:	4629      	mov	r1, r5
 800965a:	f7f7 fa6f 	bl	8000b3c <__aeabi_dcmplt>
 800965e:	2800      	cmp	r0, #0
 8009660:	f000 808b 	beq.w	800977a <_dtoa_r+0x4da>
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 8087 	beq.w	800977a <_dtoa_r+0x4da>
 800966c:	f1bb 0f00 	cmp.w	fp, #0
 8009670:	dd34      	ble.n	80096dc <_dtoa_r+0x43c>
 8009672:	4620      	mov	r0, r4
 8009674:	4b6d      	ldr	r3, [pc, #436]	@ (800982c <_dtoa_r+0x58c>)
 8009676:	2200      	movs	r2, #0
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 ffed 	bl	8000658 <__aeabi_dmul>
 800967e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009682:	f107 38ff 	add.w	r8, r7, #4294967295
 8009686:	3601      	adds	r6, #1
 8009688:	465c      	mov	r4, fp
 800968a:	4630      	mov	r0, r6
 800968c:	f7f6 ff7a 	bl	8000584 <__aeabi_i2d>
 8009690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009694:	f7f6 ffe0 	bl	8000658 <__aeabi_dmul>
 8009698:	4b65      	ldr	r3, [pc, #404]	@ (8009830 <_dtoa_r+0x590>)
 800969a:	2200      	movs	r2, #0
 800969c:	f7f6 fe26 	bl	80002ec <__adddf3>
 80096a0:	4605      	mov	r5, r0
 80096a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80096a6:	2c00      	cmp	r4, #0
 80096a8:	d16a      	bne.n	8009780 <_dtoa_r+0x4e0>
 80096aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096ae:	4b61      	ldr	r3, [pc, #388]	@ (8009834 <_dtoa_r+0x594>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	f7f6 fe19 	bl	80002e8 <__aeabi_dsub>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096be:	462a      	mov	r2, r5
 80096c0:	4633      	mov	r3, r6
 80096c2:	f7f7 fa59 	bl	8000b78 <__aeabi_dcmpgt>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f040 8298 	bne.w	8009bfc <_dtoa_r+0x95c>
 80096cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096d0:	462a      	mov	r2, r5
 80096d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80096d6:	f7f7 fa31 	bl	8000b3c <__aeabi_dcmplt>
 80096da:	bb38      	cbnz	r0, 800972c <_dtoa_r+0x48c>
 80096dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80096e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80096e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f2c0 8157 	blt.w	800999a <_dtoa_r+0x6fa>
 80096ec:	2f0e      	cmp	r7, #14
 80096ee:	f300 8154 	bgt.w	800999a <_dtoa_r+0x6fa>
 80096f2:	4b4b      	ldr	r3, [pc, #300]	@ (8009820 <_dtoa_r+0x580>)
 80096f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096f8:	ed93 7b00 	vldr	d7, [r3]
 80096fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096fe:	2b00      	cmp	r3, #0
 8009700:	ed8d 7b00 	vstr	d7, [sp]
 8009704:	f280 80e5 	bge.w	80098d2 <_dtoa_r+0x632>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f300 80e1 	bgt.w	80098d2 <_dtoa_r+0x632>
 8009710:	d10c      	bne.n	800972c <_dtoa_r+0x48c>
 8009712:	4b48      	ldr	r3, [pc, #288]	@ (8009834 <_dtoa_r+0x594>)
 8009714:	2200      	movs	r2, #0
 8009716:	ec51 0b17 	vmov	r0, r1, d7
 800971a:	f7f6 ff9d 	bl	8000658 <__aeabi_dmul>
 800971e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009722:	f7f7 fa1f 	bl	8000b64 <__aeabi_dcmpge>
 8009726:	2800      	cmp	r0, #0
 8009728:	f000 8266 	beq.w	8009bf8 <_dtoa_r+0x958>
 800972c:	2400      	movs	r4, #0
 800972e:	4625      	mov	r5, r4
 8009730:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009732:	4656      	mov	r6, sl
 8009734:	ea6f 0803 	mvn.w	r8, r3
 8009738:	2700      	movs	r7, #0
 800973a:	4621      	mov	r1, r4
 800973c:	4648      	mov	r0, r9
 800973e:	f000 fcbf 	bl	800a0c0 <_Bfree>
 8009742:	2d00      	cmp	r5, #0
 8009744:	f000 80bd 	beq.w	80098c2 <_dtoa_r+0x622>
 8009748:	b12f      	cbz	r7, 8009756 <_dtoa_r+0x4b6>
 800974a:	42af      	cmp	r7, r5
 800974c:	d003      	beq.n	8009756 <_dtoa_r+0x4b6>
 800974e:	4639      	mov	r1, r7
 8009750:	4648      	mov	r0, r9
 8009752:	f000 fcb5 	bl	800a0c0 <_Bfree>
 8009756:	4629      	mov	r1, r5
 8009758:	4648      	mov	r0, r9
 800975a:	f000 fcb1 	bl	800a0c0 <_Bfree>
 800975e:	e0b0      	b.n	80098c2 <_dtoa_r+0x622>
 8009760:	07e2      	lsls	r2, r4, #31
 8009762:	d505      	bpl.n	8009770 <_dtoa_r+0x4d0>
 8009764:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009768:	f7f6 ff76 	bl	8000658 <__aeabi_dmul>
 800976c:	3601      	adds	r6, #1
 800976e:	2301      	movs	r3, #1
 8009770:	1064      	asrs	r4, r4, #1
 8009772:	3508      	adds	r5, #8
 8009774:	e762      	b.n	800963c <_dtoa_r+0x39c>
 8009776:	2602      	movs	r6, #2
 8009778:	e765      	b.n	8009646 <_dtoa_r+0x3a6>
 800977a:	9c03      	ldr	r4, [sp, #12]
 800977c:	46b8      	mov	r8, r7
 800977e:	e784      	b.n	800968a <_dtoa_r+0x3ea>
 8009780:	4b27      	ldr	r3, [pc, #156]	@ (8009820 <_dtoa_r+0x580>)
 8009782:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009784:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800978c:	4454      	add	r4, sl
 800978e:	2900      	cmp	r1, #0
 8009790:	d054      	beq.n	800983c <_dtoa_r+0x59c>
 8009792:	4929      	ldr	r1, [pc, #164]	@ (8009838 <_dtoa_r+0x598>)
 8009794:	2000      	movs	r0, #0
 8009796:	f7f7 f889 	bl	80008ac <__aeabi_ddiv>
 800979a:	4633      	mov	r3, r6
 800979c:	462a      	mov	r2, r5
 800979e:	f7f6 fda3 	bl	80002e8 <__aeabi_dsub>
 80097a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097a6:	4656      	mov	r6, sl
 80097a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ac:	f7f7 fa04 	bl	8000bb8 <__aeabi_d2iz>
 80097b0:	4605      	mov	r5, r0
 80097b2:	f7f6 fee7 	bl	8000584 <__aeabi_i2d>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097be:	f7f6 fd93 	bl	80002e8 <__aeabi_dsub>
 80097c2:	3530      	adds	r5, #48	@ 0x30
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097cc:	f806 5b01 	strb.w	r5, [r6], #1
 80097d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097d4:	f7f7 f9b2 	bl	8000b3c <__aeabi_dcmplt>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d172      	bne.n	80098c2 <_dtoa_r+0x622>
 80097dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e0:	4911      	ldr	r1, [pc, #68]	@ (8009828 <_dtoa_r+0x588>)
 80097e2:	2000      	movs	r0, #0
 80097e4:	f7f6 fd80 	bl	80002e8 <__aeabi_dsub>
 80097e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097ec:	f7f7 f9a6 	bl	8000b3c <__aeabi_dcmplt>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f040 80b4 	bne.w	800995e <_dtoa_r+0x6be>
 80097f6:	42a6      	cmp	r6, r4
 80097f8:	f43f af70 	beq.w	80096dc <_dtoa_r+0x43c>
 80097fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009800:	4b0a      	ldr	r3, [pc, #40]	@ (800982c <_dtoa_r+0x58c>)
 8009802:	2200      	movs	r2, #0
 8009804:	f7f6 ff28 	bl	8000658 <__aeabi_dmul>
 8009808:	4b08      	ldr	r3, [pc, #32]	@ (800982c <_dtoa_r+0x58c>)
 800980a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800980e:	2200      	movs	r2, #0
 8009810:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009814:	f7f6 ff20 	bl	8000658 <__aeabi_dmul>
 8009818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800981c:	e7c4      	b.n	80097a8 <_dtoa_r+0x508>
 800981e:	bf00      	nop
 8009820:	0800b848 	.word	0x0800b848
 8009824:	0800b820 	.word	0x0800b820
 8009828:	3ff00000 	.word	0x3ff00000
 800982c:	40240000 	.word	0x40240000
 8009830:	401c0000 	.word	0x401c0000
 8009834:	40140000 	.word	0x40140000
 8009838:	3fe00000 	.word	0x3fe00000
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	f7f6 ff0a 	bl	8000658 <__aeabi_dmul>
 8009844:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009848:	9413      	str	r4, [sp, #76]	@ 0x4c
 800984a:	4656      	mov	r6, sl
 800984c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009850:	f7f7 f9b2 	bl	8000bb8 <__aeabi_d2iz>
 8009854:	4605      	mov	r5, r0
 8009856:	f7f6 fe95 	bl	8000584 <__aeabi_i2d>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009862:	f7f6 fd41 	bl	80002e8 <__aeabi_dsub>
 8009866:	3530      	adds	r5, #48	@ 0x30
 8009868:	f806 5b01 	strb.w	r5, [r6], #1
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	42a6      	cmp	r6, r4
 8009872:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	d124      	bne.n	80098c6 <_dtoa_r+0x626>
 800987c:	4baf      	ldr	r3, [pc, #700]	@ (8009b3c <_dtoa_r+0x89c>)
 800987e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009882:	f7f6 fd33 	bl	80002ec <__adddf3>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800988e:	f7f7 f973 	bl	8000b78 <__aeabi_dcmpgt>
 8009892:	2800      	cmp	r0, #0
 8009894:	d163      	bne.n	800995e <_dtoa_r+0x6be>
 8009896:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800989a:	49a8      	ldr	r1, [pc, #672]	@ (8009b3c <_dtoa_r+0x89c>)
 800989c:	2000      	movs	r0, #0
 800989e:	f7f6 fd23 	bl	80002e8 <__aeabi_dsub>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098aa:	f7f7 f947 	bl	8000b3c <__aeabi_dcmplt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f af14 	beq.w	80096dc <_dtoa_r+0x43c>
 80098b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80098b6:	1e73      	subs	r3, r6, #1
 80098b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098be:	2b30      	cmp	r3, #48	@ 0x30
 80098c0:	d0f8      	beq.n	80098b4 <_dtoa_r+0x614>
 80098c2:	4647      	mov	r7, r8
 80098c4:	e03b      	b.n	800993e <_dtoa_r+0x69e>
 80098c6:	4b9e      	ldr	r3, [pc, #632]	@ (8009b40 <_dtoa_r+0x8a0>)
 80098c8:	f7f6 fec6 	bl	8000658 <__aeabi_dmul>
 80098cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098d0:	e7bc      	b.n	800984c <_dtoa_r+0x5ac>
 80098d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80098d6:	4656      	mov	r6, sl
 80098d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098dc:	4620      	mov	r0, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	f7f6 ffe4 	bl	80008ac <__aeabi_ddiv>
 80098e4:	f7f7 f968 	bl	8000bb8 <__aeabi_d2iz>
 80098e8:	4680      	mov	r8, r0
 80098ea:	f7f6 fe4b 	bl	8000584 <__aeabi_i2d>
 80098ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098f2:	f7f6 feb1 	bl	8000658 <__aeabi_dmul>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4620      	mov	r0, r4
 80098fc:	4629      	mov	r1, r5
 80098fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009902:	f7f6 fcf1 	bl	80002e8 <__aeabi_dsub>
 8009906:	f806 4b01 	strb.w	r4, [r6], #1
 800990a:	9d03      	ldr	r5, [sp, #12]
 800990c:	eba6 040a 	sub.w	r4, r6, sl
 8009910:	42a5      	cmp	r5, r4
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	d133      	bne.n	8009980 <_dtoa_r+0x6e0>
 8009918:	f7f6 fce8 	bl	80002ec <__adddf3>
 800991c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009920:	4604      	mov	r4, r0
 8009922:	460d      	mov	r5, r1
 8009924:	f7f7 f928 	bl	8000b78 <__aeabi_dcmpgt>
 8009928:	b9c0      	cbnz	r0, 800995c <_dtoa_r+0x6bc>
 800992a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f7 f8f9 	bl	8000b28 <__aeabi_dcmpeq>
 8009936:	b110      	cbz	r0, 800993e <_dtoa_r+0x69e>
 8009938:	f018 0f01 	tst.w	r8, #1
 800993c:	d10e      	bne.n	800995c <_dtoa_r+0x6bc>
 800993e:	9902      	ldr	r1, [sp, #8]
 8009940:	4648      	mov	r0, r9
 8009942:	f000 fbbd 	bl	800a0c0 <_Bfree>
 8009946:	2300      	movs	r3, #0
 8009948:	7033      	strb	r3, [r6, #0]
 800994a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800994c:	3701      	adds	r7, #1
 800994e:	601f      	str	r7, [r3, #0]
 8009950:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 824b 	beq.w	8009dee <_dtoa_r+0xb4e>
 8009958:	601e      	str	r6, [r3, #0]
 800995a:	e248      	b.n	8009dee <_dtoa_r+0xb4e>
 800995c:	46b8      	mov	r8, r7
 800995e:	4633      	mov	r3, r6
 8009960:	461e      	mov	r6, r3
 8009962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009966:	2a39      	cmp	r2, #57	@ 0x39
 8009968:	d106      	bne.n	8009978 <_dtoa_r+0x6d8>
 800996a:	459a      	cmp	sl, r3
 800996c:	d1f8      	bne.n	8009960 <_dtoa_r+0x6c0>
 800996e:	2230      	movs	r2, #48	@ 0x30
 8009970:	f108 0801 	add.w	r8, r8, #1
 8009974:	f88a 2000 	strb.w	r2, [sl]
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	3201      	adds	r2, #1
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e7a0      	b.n	80098c2 <_dtoa_r+0x622>
 8009980:	4b6f      	ldr	r3, [pc, #444]	@ (8009b40 <_dtoa_r+0x8a0>)
 8009982:	2200      	movs	r2, #0
 8009984:	f7f6 fe68 	bl	8000658 <__aeabi_dmul>
 8009988:	2200      	movs	r2, #0
 800998a:	2300      	movs	r3, #0
 800998c:	4604      	mov	r4, r0
 800998e:	460d      	mov	r5, r1
 8009990:	f7f7 f8ca 	bl	8000b28 <__aeabi_dcmpeq>
 8009994:	2800      	cmp	r0, #0
 8009996:	d09f      	beq.n	80098d8 <_dtoa_r+0x638>
 8009998:	e7d1      	b.n	800993e <_dtoa_r+0x69e>
 800999a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800999c:	2a00      	cmp	r2, #0
 800999e:	f000 80ea 	beq.w	8009b76 <_dtoa_r+0x8d6>
 80099a2:	9a07      	ldr	r2, [sp, #28]
 80099a4:	2a01      	cmp	r2, #1
 80099a6:	f300 80cd 	bgt.w	8009b44 <_dtoa_r+0x8a4>
 80099aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099ac:	2a00      	cmp	r2, #0
 80099ae:	f000 80c1 	beq.w	8009b34 <_dtoa_r+0x894>
 80099b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80099b6:	9c08      	ldr	r4, [sp, #32]
 80099b8:	9e00      	ldr	r6, [sp, #0]
 80099ba:	9a00      	ldr	r2, [sp, #0]
 80099bc:	441a      	add	r2, r3
 80099be:	9200      	str	r2, [sp, #0]
 80099c0:	9a06      	ldr	r2, [sp, #24]
 80099c2:	2101      	movs	r1, #1
 80099c4:	441a      	add	r2, r3
 80099c6:	4648      	mov	r0, r9
 80099c8:	9206      	str	r2, [sp, #24]
 80099ca:	f000 fc2d 	bl	800a228 <__i2b>
 80099ce:	4605      	mov	r5, r0
 80099d0:	b166      	cbz	r6, 80099ec <_dtoa_r+0x74c>
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dd09      	ble.n	80099ec <_dtoa_r+0x74c>
 80099d8:	42b3      	cmp	r3, r6
 80099da:	9a00      	ldr	r2, [sp, #0]
 80099dc:	bfa8      	it	ge
 80099de:	4633      	movge	r3, r6
 80099e0:	1ad2      	subs	r2, r2, r3
 80099e2:	9200      	str	r2, [sp, #0]
 80099e4:	9a06      	ldr	r2, [sp, #24]
 80099e6:	1af6      	subs	r6, r6, r3
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	9306      	str	r3, [sp, #24]
 80099ec:	9b08      	ldr	r3, [sp, #32]
 80099ee:	b30b      	cbz	r3, 8009a34 <_dtoa_r+0x794>
 80099f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80c6 	beq.w	8009b84 <_dtoa_r+0x8e4>
 80099f8:	2c00      	cmp	r4, #0
 80099fa:	f000 80c0 	beq.w	8009b7e <_dtoa_r+0x8de>
 80099fe:	4629      	mov	r1, r5
 8009a00:	4622      	mov	r2, r4
 8009a02:	4648      	mov	r0, r9
 8009a04:	f000 fcc8 	bl	800a398 <__pow5mult>
 8009a08:	9a02      	ldr	r2, [sp, #8]
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	4648      	mov	r0, r9
 8009a10:	f000 fc20 	bl	800a254 <__multiply>
 8009a14:	9902      	ldr	r1, [sp, #8]
 8009a16:	4680      	mov	r8, r0
 8009a18:	4648      	mov	r0, r9
 8009a1a:	f000 fb51 	bl	800a0c0 <_Bfree>
 8009a1e:	9b08      	ldr	r3, [sp, #32]
 8009a20:	1b1b      	subs	r3, r3, r4
 8009a22:	9308      	str	r3, [sp, #32]
 8009a24:	f000 80b1 	beq.w	8009b8a <_dtoa_r+0x8ea>
 8009a28:	9a08      	ldr	r2, [sp, #32]
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	4648      	mov	r0, r9
 8009a2e:	f000 fcb3 	bl	800a398 <__pow5mult>
 8009a32:	9002      	str	r0, [sp, #8]
 8009a34:	2101      	movs	r1, #1
 8009a36:	4648      	mov	r0, r9
 8009a38:	f000 fbf6 	bl	800a228 <__i2b>
 8009a3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a3e:	4604      	mov	r4, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 81d8 	beq.w	8009df6 <_dtoa_r+0xb56>
 8009a46:	461a      	mov	r2, r3
 8009a48:	4601      	mov	r1, r0
 8009a4a:	4648      	mov	r0, r9
 8009a4c:	f000 fca4 	bl	800a398 <__pow5mult>
 8009a50:	9b07      	ldr	r3, [sp, #28]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	4604      	mov	r4, r0
 8009a56:	f300 809f 	bgt.w	8009b98 <_dtoa_r+0x8f8>
 8009a5a:	9b04      	ldr	r3, [sp, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 8097 	bne.w	8009b90 <_dtoa_r+0x8f0>
 8009a62:	9b05      	ldr	r3, [sp, #20]
 8009a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f040 8093 	bne.w	8009b94 <_dtoa_r+0x8f4>
 8009a6e:	9b05      	ldr	r3, [sp, #20]
 8009a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a74:	0d1b      	lsrs	r3, r3, #20
 8009a76:	051b      	lsls	r3, r3, #20
 8009a78:	b133      	cbz	r3, 8009a88 <_dtoa_r+0x7e8>
 8009a7a:	9b00      	ldr	r3, [sp, #0]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	9b06      	ldr	r3, [sp, #24]
 8009a82:	3301      	adds	r3, #1
 8009a84:	9306      	str	r3, [sp, #24]
 8009a86:	2301      	movs	r3, #1
 8009a88:	9308      	str	r3, [sp, #32]
 8009a8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 81b8 	beq.w	8009e02 <_dtoa_r+0xb62>
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a98:	6918      	ldr	r0, [r3, #16]
 8009a9a:	f000 fb79 	bl	800a190 <__hi0bits>
 8009a9e:	f1c0 0020 	rsb	r0, r0, #32
 8009aa2:	9b06      	ldr	r3, [sp, #24]
 8009aa4:	4418      	add	r0, r3
 8009aa6:	f010 001f 	ands.w	r0, r0, #31
 8009aaa:	f000 8082 	beq.w	8009bb2 <_dtoa_r+0x912>
 8009aae:	f1c0 0320 	rsb	r3, r0, #32
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	dd73      	ble.n	8009b9e <_dtoa_r+0x8fe>
 8009ab6:	9b00      	ldr	r3, [sp, #0]
 8009ab8:	f1c0 001c 	rsb	r0, r0, #28
 8009abc:	4403      	add	r3, r0
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	9b06      	ldr	r3, [sp, #24]
 8009ac2:	4403      	add	r3, r0
 8009ac4:	4406      	add	r6, r0
 8009ac6:	9306      	str	r3, [sp, #24]
 8009ac8:	9b00      	ldr	r3, [sp, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	dd05      	ble.n	8009ada <_dtoa_r+0x83a>
 8009ace:	9902      	ldr	r1, [sp, #8]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4648      	mov	r0, r9
 8009ad4:	f000 fcba 	bl	800a44c <__lshift>
 8009ad8:	9002      	str	r0, [sp, #8]
 8009ada:	9b06      	ldr	r3, [sp, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dd05      	ble.n	8009aec <_dtoa_r+0x84c>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f000 fcb1 	bl	800a44c <__lshift>
 8009aea:	4604      	mov	r4, r0
 8009aec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d061      	beq.n	8009bb6 <_dtoa_r+0x916>
 8009af2:	9802      	ldr	r0, [sp, #8]
 8009af4:	4621      	mov	r1, r4
 8009af6:	f000 fd15 	bl	800a524 <__mcmp>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	da5b      	bge.n	8009bb6 <_dtoa_r+0x916>
 8009afe:	2300      	movs	r3, #0
 8009b00:	9902      	ldr	r1, [sp, #8]
 8009b02:	220a      	movs	r2, #10
 8009b04:	4648      	mov	r0, r9
 8009b06:	f000 fafd 	bl	800a104 <__multadd>
 8009b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0c:	9002      	str	r0, [sp, #8]
 8009b0e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 8177 	beq.w	8009e06 <_dtoa_r+0xb66>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	220a      	movs	r2, #10
 8009b1e:	4648      	mov	r0, r9
 8009b20:	f000 faf0 	bl	800a104 <__multadd>
 8009b24:	f1bb 0f00 	cmp.w	fp, #0
 8009b28:	4605      	mov	r5, r0
 8009b2a:	dc6f      	bgt.n	8009c0c <_dtoa_r+0x96c>
 8009b2c:	9b07      	ldr	r3, [sp, #28]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	dc49      	bgt.n	8009bc6 <_dtoa_r+0x926>
 8009b32:	e06b      	b.n	8009c0c <_dtoa_r+0x96c>
 8009b34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b3a:	e73c      	b.n	80099b6 <_dtoa_r+0x716>
 8009b3c:	3fe00000 	.word	0x3fe00000
 8009b40:	40240000 	.word	0x40240000
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	1e5c      	subs	r4, r3, #1
 8009b48:	9b08      	ldr	r3, [sp, #32]
 8009b4a:	42a3      	cmp	r3, r4
 8009b4c:	db09      	blt.n	8009b62 <_dtoa_r+0x8c2>
 8009b4e:	1b1c      	subs	r4, r3, r4
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f6bf af30 	bge.w	80099b8 <_dtoa_r+0x718>
 8009b58:	9b00      	ldr	r3, [sp, #0]
 8009b5a:	9a03      	ldr	r2, [sp, #12]
 8009b5c:	1a9e      	subs	r6, r3, r2
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e72b      	b.n	80099ba <_dtoa_r+0x71a>
 8009b62:	9b08      	ldr	r3, [sp, #32]
 8009b64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b66:	9408      	str	r4, [sp, #32]
 8009b68:	1ae3      	subs	r3, r4, r3
 8009b6a:	441a      	add	r2, r3
 8009b6c:	9e00      	ldr	r6, [sp, #0]
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	920d      	str	r2, [sp, #52]	@ 0x34
 8009b72:	2400      	movs	r4, #0
 8009b74:	e721      	b.n	80099ba <_dtoa_r+0x71a>
 8009b76:	9c08      	ldr	r4, [sp, #32]
 8009b78:	9e00      	ldr	r6, [sp, #0]
 8009b7a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009b7c:	e728      	b.n	80099d0 <_dtoa_r+0x730>
 8009b7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009b82:	e751      	b.n	8009a28 <_dtoa_r+0x788>
 8009b84:	9a08      	ldr	r2, [sp, #32]
 8009b86:	9902      	ldr	r1, [sp, #8]
 8009b88:	e750      	b.n	8009a2c <_dtoa_r+0x78c>
 8009b8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009b8e:	e751      	b.n	8009a34 <_dtoa_r+0x794>
 8009b90:	2300      	movs	r3, #0
 8009b92:	e779      	b.n	8009a88 <_dtoa_r+0x7e8>
 8009b94:	9b04      	ldr	r3, [sp, #16]
 8009b96:	e777      	b.n	8009a88 <_dtoa_r+0x7e8>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9308      	str	r3, [sp, #32]
 8009b9c:	e779      	b.n	8009a92 <_dtoa_r+0x7f2>
 8009b9e:	d093      	beq.n	8009ac8 <_dtoa_r+0x828>
 8009ba0:	9a00      	ldr	r2, [sp, #0]
 8009ba2:	331c      	adds	r3, #28
 8009ba4:	441a      	add	r2, r3
 8009ba6:	9200      	str	r2, [sp, #0]
 8009ba8:	9a06      	ldr	r2, [sp, #24]
 8009baa:	441a      	add	r2, r3
 8009bac:	441e      	add	r6, r3
 8009bae:	9206      	str	r2, [sp, #24]
 8009bb0:	e78a      	b.n	8009ac8 <_dtoa_r+0x828>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	e7f4      	b.n	8009ba0 <_dtoa_r+0x900>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	46b8      	mov	r8, r7
 8009bbc:	dc20      	bgt.n	8009c00 <_dtoa_r+0x960>
 8009bbe:	469b      	mov	fp, r3
 8009bc0:	9b07      	ldr	r3, [sp, #28]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	dd1e      	ble.n	8009c04 <_dtoa_r+0x964>
 8009bc6:	f1bb 0f00 	cmp.w	fp, #0
 8009bca:	f47f adb1 	bne.w	8009730 <_dtoa_r+0x490>
 8009bce:	4621      	mov	r1, r4
 8009bd0:	465b      	mov	r3, fp
 8009bd2:	2205      	movs	r2, #5
 8009bd4:	4648      	mov	r0, r9
 8009bd6:	f000 fa95 	bl	800a104 <__multadd>
 8009bda:	4601      	mov	r1, r0
 8009bdc:	4604      	mov	r4, r0
 8009bde:	9802      	ldr	r0, [sp, #8]
 8009be0:	f000 fca0 	bl	800a524 <__mcmp>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f77f ada3 	ble.w	8009730 <_dtoa_r+0x490>
 8009bea:	4656      	mov	r6, sl
 8009bec:	2331      	movs	r3, #49	@ 0x31
 8009bee:	f806 3b01 	strb.w	r3, [r6], #1
 8009bf2:	f108 0801 	add.w	r8, r8, #1
 8009bf6:	e59f      	b.n	8009738 <_dtoa_r+0x498>
 8009bf8:	9c03      	ldr	r4, [sp, #12]
 8009bfa:	46b8      	mov	r8, r7
 8009bfc:	4625      	mov	r5, r4
 8009bfe:	e7f4      	b.n	8009bea <_dtoa_r+0x94a>
 8009c00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 8101 	beq.w	8009e0e <_dtoa_r+0xb6e>
 8009c0c:	2e00      	cmp	r6, #0
 8009c0e:	dd05      	ble.n	8009c1c <_dtoa_r+0x97c>
 8009c10:	4629      	mov	r1, r5
 8009c12:	4632      	mov	r2, r6
 8009c14:	4648      	mov	r0, r9
 8009c16:	f000 fc19 	bl	800a44c <__lshift>
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	9b08      	ldr	r3, [sp, #32]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d05c      	beq.n	8009cdc <_dtoa_r+0xa3c>
 8009c22:	6869      	ldr	r1, [r5, #4]
 8009c24:	4648      	mov	r0, r9
 8009c26:	f000 fa0b 	bl	800a040 <_Balloc>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	b928      	cbnz	r0, 8009c3a <_dtoa_r+0x99a>
 8009c2e:	4b82      	ldr	r3, [pc, #520]	@ (8009e38 <_dtoa_r+0xb98>)
 8009c30:	4602      	mov	r2, r0
 8009c32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c36:	f7ff bb4a 	b.w	80092ce <_dtoa_r+0x2e>
 8009c3a:	692a      	ldr	r2, [r5, #16]
 8009c3c:	3202      	adds	r2, #2
 8009c3e:	0092      	lsls	r2, r2, #2
 8009c40:	f105 010c 	add.w	r1, r5, #12
 8009c44:	300c      	adds	r0, #12
 8009c46:	f7ff fa92 	bl	800916e <memcpy>
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4648      	mov	r0, r9
 8009c50:	f000 fbfc 	bl	800a44c <__lshift>
 8009c54:	f10a 0301 	add.w	r3, sl, #1
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	eb0a 030b 	add.w	r3, sl, fp
 8009c5e:	9308      	str	r3, [sp, #32]
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	462f      	mov	r7, r5
 8009c68:	9306      	str	r3, [sp, #24]
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	9b00      	ldr	r3, [sp, #0]
 8009c6e:	9802      	ldr	r0, [sp, #8]
 8009c70:	4621      	mov	r1, r4
 8009c72:	f103 3bff 	add.w	fp, r3, #4294967295
 8009c76:	f7ff fa88 	bl	800918a <quorem>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	3330      	adds	r3, #48	@ 0x30
 8009c7e:	9003      	str	r0, [sp, #12]
 8009c80:	4639      	mov	r1, r7
 8009c82:	9802      	ldr	r0, [sp, #8]
 8009c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c86:	f000 fc4d 	bl	800a524 <__mcmp>
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	9004      	str	r0, [sp, #16]
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4648      	mov	r0, r9
 8009c92:	f000 fc63 	bl	800a55c <__mdiff>
 8009c96:	68c2      	ldr	r2, [r0, #12]
 8009c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	bb02      	cbnz	r2, 8009ce0 <_dtoa_r+0xa40>
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	9802      	ldr	r0, [sp, #8]
 8009ca2:	f000 fc3f 	bl	800a524 <__mcmp>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca8:	4602      	mov	r2, r0
 8009caa:	4631      	mov	r1, r6
 8009cac:	4648      	mov	r0, r9
 8009cae:	920c      	str	r2, [sp, #48]	@ 0x30
 8009cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb2:	f000 fa05 	bl	800a0c0 <_Bfree>
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009cba:	9e00      	ldr	r6, [sp, #0]
 8009cbc:	ea42 0103 	orr.w	r1, r2, r3
 8009cc0:	9b06      	ldr	r3, [sp, #24]
 8009cc2:	4319      	orrs	r1, r3
 8009cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc6:	d10d      	bne.n	8009ce4 <_dtoa_r+0xa44>
 8009cc8:	2b39      	cmp	r3, #57	@ 0x39
 8009cca:	d027      	beq.n	8009d1c <_dtoa_r+0xa7c>
 8009ccc:	9a04      	ldr	r2, [sp, #16]
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	dd01      	ble.n	8009cd6 <_dtoa_r+0xa36>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	3331      	adds	r3, #49	@ 0x31
 8009cd6:	f88b 3000 	strb.w	r3, [fp]
 8009cda:	e52e      	b.n	800973a <_dtoa_r+0x49a>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	e7b9      	b.n	8009c54 <_dtoa_r+0x9b4>
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	e7e2      	b.n	8009caa <_dtoa_r+0xa0a>
 8009ce4:	9904      	ldr	r1, [sp, #16]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	db04      	blt.n	8009cf4 <_dtoa_r+0xa54>
 8009cea:	9807      	ldr	r0, [sp, #28]
 8009cec:	4301      	orrs	r1, r0
 8009cee:	9806      	ldr	r0, [sp, #24]
 8009cf0:	4301      	orrs	r1, r0
 8009cf2:	d120      	bne.n	8009d36 <_dtoa_r+0xa96>
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	ddee      	ble.n	8009cd6 <_dtoa_r+0xa36>
 8009cf8:	9902      	ldr	r1, [sp, #8]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	4648      	mov	r0, r9
 8009d00:	f000 fba4 	bl	800a44c <__lshift>
 8009d04:	4621      	mov	r1, r4
 8009d06:	9002      	str	r0, [sp, #8]
 8009d08:	f000 fc0c 	bl	800a524 <__mcmp>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	9b00      	ldr	r3, [sp, #0]
 8009d10:	dc02      	bgt.n	8009d18 <_dtoa_r+0xa78>
 8009d12:	d1e0      	bne.n	8009cd6 <_dtoa_r+0xa36>
 8009d14:	07da      	lsls	r2, r3, #31
 8009d16:	d5de      	bpl.n	8009cd6 <_dtoa_r+0xa36>
 8009d18:	2b39      	cmp	r3, #57	@ 0x39
 8009d1a:	d1da      	bne.n	8009cd2 <_dtoa_r+0xa32>
 8009d1c:	2339      	movs	r3, #57	@ 0x39
 8009d1e:	f88b 3000 	strb.w	r3, [fp]
 8009d22:	4633      	mov	r3, r6
 8009d24:	461e      	mov	r6, r3
 8009d26:	3b01      	subs	r3, #1
 8009d28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d2c:	2a39      	cmp	r2, #57	@ 0x39
 8009d2e:	d04e      	beq.n	8009dce <_dtoa_r+0xb2e>
 8009d30:	3201      	adds	r2, #1
 8009d32:	701a      	strb	r2, [r3, #0]
 8009d34:	e501      	b.n	800973a <_dtoa_r+0x49a>
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	dd03      	ble.n	8009d42 <_dtoa_r+0xaa2>
 8009d3a:	2b39      	cmp	r3, #57	@ 0x39
 8009d3c:	d0ee      	beq.n	8009d1c <_dtoa_r+0xa7c>
 8009d3e:	3301      	adds	r3, #1
 8009d40:	e7c9      	b.n	8009cd6 <_dtoa_r+0xa36>
 8009d42:	9a00      	ldr	r2, [sp, #0]
 8009d44:	9908      	ldr	r1, [sp, #32]
 8009d46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d4a:	428a      	cmp	r2, r1
 8009d4c:	d028      	beq.n	8009da0 <_dtoa_r+0xb00>
 8009d4e:	9902      	ldr	r1, [sp, #8]
 8009d50:	2300      	movs	r3, #0
 8009d52:	220a      	movs	r2, #10
 8009d54:	4648      	mov	r0, r9
 8009d56:	f000 f9d5 	bl	800a104 <__multadd>
 8009d5a:	42af      	cmp	r7, r5
 8009d5c:	9002      	str	r0, [sp, #8]
 8009d5e:	f04f 0300 	mov.w	r3, #0
 8009d62:	f04f 020a 	mov.w	r2, #10
 8009d66:	4639      	mov	r1, r7
 8009d68:	4648      	mov	r0, r9
 8009d6a:	d107      	bne.n	8009d7c <_dtoa_r+0xadc>
 8009d6c:	f000 f9ca 	bl	800a104 <__multadd>
 8009d70:	4607      	mov	r7, r0
 8009d72:	4605      	mov	r5, r0
 8009d74:	9b00      	ldr	r3, [sp, #0]
 8009d76:	3301      	adds	r3, #1
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	e777      	b.n	8009c6c <_dtoa_r+0x9cc>
 8009d7c:	f000 f9c2 	bl	800a104 <__multadd>
 8009d80:	4629      	mov	r1, r5
 8009d82:	4607      	mov	r7, r0
 8009d84:	2300      	movs	r3, #0
 8009d86:	220a      	movs	r2, #10
 8009d88:	4648      	mov	r0, r9
 8009d8a:	f000 f9bb 	bl	800a104 <__multadd>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	e7f0      	b.n	8009d74 <_dtoa_r+0xad4>
 8009d92:	f1bb 0f00 	cmp.w	fp, #0
 8009d96:	bfcc      	ite	gt
 8009d98:	465e      	movgt	r6, fp
 8009d9a:	2601      	movle	r6, #1
 8009d9c:	4456      	add	r6, sl
 8009d9e:	2700      	movs	r7, #0
 8009da0:	9902      	ldr	r1, [sp, #8]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2201      	movs	r2, #1
 8009da6:	4648      	mov	r0, r9
 8009da8:	f000 fb50 	bl	800a44c <__lshift>
 8009dac:	4621      	mov	r1, r4
 8009dae:	9002      	str	r0, [sp, #8]
 8009db0:	f000 fbb8 	bl	800a524 <__mcmp>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	dcb4      	bgt.n	8009d22 <_dtoa_r+0xa82>
 8009db8:	d102      	bne.n	8009dc0 <_dtoa_r+0xb20>
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	07db      	lsls	r3, r3, #31
 8009dbe:	d4b0      	bmi.n	8009d22 <_dtoa_r+0xa82>
 8009dc0:	4633      	mov	r3, r6
 8009dc2:	461e      	mov	r6, r3
 8009dc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dc8:	2a30      	cmp	r2, #48	@ 0x30
 8009dca:	d0fa      	beq.n	8009dc2 <_dtoa_r+0xb22>
 8009dcc:	e4b5      	b.n	800973a <_dtoa_r+0x49a>
 8009dce:	459a      	cmp	sl, r3
 8009dd0:	d1a8      	bne.n	8009d24 <_dtoa_r+0xa84>
 8009dd2:	2331      	movs	r3, #49	@ 0x31
 8009dd4:	f108 0801 	add.w	r8, r8, #1
 8009dd8:	f88a 3000 	strb.w	r3, [sl]
 8009ddc:	e4ad      	b.n	800973a <_dtoa_r+0x49a>
 8009dde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009de0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009e3c <_dtoa_r+0xb9c>
 8009de4:	b11b      	cbz	r3, 8009dee <_dtoa_r+0xb4e>
 8009de6:	f10a 0308 	add.w	r3, sl, #8
 8009dea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	4650      	mov	r0, sl
 8009df0:	b017      	add	sp, #92	@ 0x5c
 8009df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df6:	9b07      	ldr	r3, [sp, #28]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	f77f ae2e 	ble.w	8009a5a <_dtoa_r+0x7ba>
 8009dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e00:	9308      	str	r3, [sp, #32]
 8009e02:	2001      	movs	r0, #1
 8009e04:	e64d      	b.n	8009aa2 <_dtoa_r+0x802>
 8009e06:	f1bb 0f00 	cmp.w	fp, #0
 8009e0a:	f77f aed9 	ble.w	8009bc0 <_dtoa_r+0x920>
 8009e0e:	4656      	mov	r6, sl
 8009e10:	9802      	ldr	r0, [sp, #8]
 8009e12:	4621      	mov	r1, r4
 8009e14:	f7ff f9b9 	bl	800918a <quorem>
 8009e18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009e1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e20:	eba6 020a 	sub.w	r2, r6, sl
 8009e24:	4593      	cmp	fp, r2
 8009e26:	ddb4      	ble.n	8009d92 <_dtoa_r+0xaf2>
 8009e28:	9902      	ldr	r1, [sp, #8]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	220a      	movs	r2, #10
 8009e2e:	4648      	mov	r0, r9
 8009e30:	f000 f968 	bl	800a104 <__multadd>
 8009e34:	9002      	str	r0, [sp, #8]
 8009e36:	e7eb      	b.n	8009e10 <_dtoa_r+0xb70>
 8009e38:	0800b750 	.word	0x0800b750
 8009e3c:	0800b6d4 	.word	0x0800b6d4

08009e40 <_free_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4605      	mov	r5, r0
 8009e44:	2900      	cmp	r1, #0
 8009e46:	d041      	beq.n	8009ecc <_free_r+0x8c>
 8009e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4c:	1f0c      	subs	r4, r1, #4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bfb8      	it	lt
 8009e52:	18e4      	addlt	r4, r4, r3
 8009e54:	f000 f8e8 	bl	800a028 <__malloc_lock>
 8009e58:	4a1d      	ldr	r2, [pc, #116]	@ (8009ed0 <_free_r+0x90>)
 8009e5a:	6813      	ldr	r3, [r2, #0]
 8009e5c:	b933      	cbnz	r3, 8009e6c <_free_r+0x2c>
 8009e5e:	6063      	str	r3, [r4, #4]
 8009e60:	6014      	str	r4, [r2, #0]
 8009e62:	4628      	mov	r0, r5
 8009e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e68:	f000 b8e4 	b.w	800a034 <__malloc_unlock>
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	d908      	bls.n	8009e82 <_free_r+0x42>
 8009e70:	6820      	ldr	r0, [r4, #0]
 8009e72:	1821      	adds	r1, r4, r0
 8009e74:	428b      	cmp	r3, r1
 8009e76:	bf01      	itttt	eq
 8009e78:	6819      	ldreq	r1, [r3, #0]
 8009e7a:	685b      	ldreq	r3, [r3, #4]
 8009e7c:	1809      	addeq	r1, r1, r0
 8009e7e:	6021      	streq	r1, [r4, #0]
 8009e80:	e7ed      	b.n	8009e5e <_free_r+0x1e>
 8009e82:	461a      	mov	r2, r3
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	b10b      	cbz	r3, 8009e8c <_free_r+0x4c>
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	d9fa      	bls.n	8009e82 <_free_r+0x42>
 8009e8c:	6811      	ldr	r1, [r2, #0]
 8009e8e:	1850      	adds	r0, r2, r1
 8009e90:	42a0      	cmp	r0, r4
 8009e92:	d10b      	bne.n	8009eac <_free_r+0x6c>
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	4401      	add	r1, r0
 8009e98:	1850      	adds	r0, r2, r1
 8009e9a:	4283      	cmp	r3, r0
 8009e9c:	6011      	str	r1, [r2, #0]
 8009e9e:	d1e0      	bne.n	8009e62 <_free_r+0x22>
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	6053      	str	r3, [r2, #4]
 8009ea6:	4408      	add	r0, r1
 8009ea8:	6010      	str	r0, [r2, #0]
 8009eaa:	e7da      	b.n	8009e62 <_free_r+0x22>
 8009eac:	d902      	bls.n	8009eb4 <_free_r+0x74>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	602b      	str	r3, [r5, #0]
 8009eb2:	e7d6      	b.n	8009e62 <_free_r+0x22>
 8009eb4:	6820      	ldr	r0, [r4, #0]
 8009eb6:	1821      	adds	r1, r4, r0
 8009eb8:	428b      	cmp	r3, r1
 8009eba:	bf04      	itt	eq
 8009ebc:	6819      	ldreq	r1, [r3, #0]
 8009ebe:	685b      	ldreq	r3, [r3, #4]
 8009ec0:	6063      	str	r3, [r4, #4]
 8009ec2:	bf04      	itt	eq
 8009ec4:	1809      	addeq	r1, r1, r0
 8009ec6:	6021      	streq	r1, [r4, #0]
 8009ec8:	6054      	str	r4, [r2, #4]
 8009eca:	e7ca      	b.n	8009e62 <_free_r+0x22>
 8009ecc:	bd38      	pop	{r3, r4, r5, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000cbc 	.word	0x20000cbc

08009ed4 <malloc>:
 8009ed4:	4b02      	ldr	r3, [pc, #8]	@ (8009ee0 <malloc+0xc>)
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	f000 b825 	b.w	8009f28 <_malloc_r>
 8009ede:	bf00      	nop
 8009ee0:	20000018 	.word	0x20000018

08009ee4 <sbrk_aligned>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	4e0f      	ldr	r6, [pc, #60]	@ (8009f24 <sbrk_aligned+0x40>)
 8009ee8:	460c      	mov	r4, r1
 8009eea:	6831      	ldr	r1, [r6, #0]
 8009eec:	4605      	mov	r5, r0
 8009eee:	b911      	cbnz	r1, 8009ef6 <sbrk_aligned+0x12>
 8009ef0:	f000 fe3e 	bl	800ab70 <_sbrk_r>
 8009ef4:	6030      	str	r0, [r6, #0]
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f000 fe39 	bl	800ab70 <_sbrk_r>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	d103      	bne.n	8009f0a <sbrk_aligned+0x26>
 8009f02:	f04f 34ff 	mov.w	r4, #4294967295
 8009f06:	4620      	mov	r0, r4
 8009f08:	bd70      	pop	{r4, r5, r6, pc}
 8009f0a:	1cc4      	adds	r4, r0, #3
 8009f0c:	f024 0403 	bic.w	r4, r4, #3
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d0f8      	beq.n	8009f06 <sbrk_aligned+0x22>
 8009f14:	1a21      	subs	r1, r4, r0
 8009f16:	4628      	mov	r0, r5
 8009f18:	f000 fe2a 	bl	800ab70 <_sbrk_r>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d1f2      	bne.n	8009f06 <sbrk_aligned+0x22>
 8009f20:	e7ef      	b.n	8009f02 <sbrk_aligned+0x1e>
 8009f22:	bf00      	nop
 8009f24:	20000cb8 	.word	0x20000cb8

08009f28 <_malloc_r>:
 8009f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f2c:	1ccd      	adds	r5, r1, #3
 8009f2e:	f025 0503 	bic.w	r5, r5, #3
 8009f32:	3508      	adds	r5, #8
 8009f34:	2d0c      	cmp	r5, #12
 8009f36:	bf38      	it	cc
 8009f38:	250c      	movcc	r5, #12
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	db01      	blt.n	8009f44 <_malloc_r+0x1c>
 8009f40:	42a9      	cmp	r1, r5
 8009f42:	d904      	bls.n	8009f4e <_malloc_r+0x26>
 8009f44:	230c      	movs	r3, #12
 8009f46:	6033      	str	r3, [r6, #0]
 8009f48:	2000      	movs	r0, #0
 8009f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a024 <_malloc_r+0xfc>
 8009f52:	f000 f869 	bl	800a028 <__malloc_lock>
 8009f56:	f8d8 3000 	ldr.w	r3, [r8]
 8009f5a:	461c      	mov	r4, r3
 8009f5c:	bb44      	cbnz	r4, 8009fb0 <_malloc_r+0x88>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7ff ffbf 	bl	8009ee4 <sbrk_aligned>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	4604      	mov	r4, r0
 8009f6a:	d158      	bne.n	800a01e <_malloc_r+0xf6>
 8009f6c:	f8d8 4000 	ldr.w	r4, [r8]
 8009f70:	4627      	mov	r7, r4
 8009f72:	2f00      	cmp	r7, #0
 8009f74:	d143      	bne.n	8009ffe <_malloc_r+0xd6>
 8009f76:	2c00      	cmp	r4, #0
 8009f78:	d04b      	beq.n	800a012 <_malloc_r+0xea>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	4630      	mov	r0, r6
 8009f80:	eb04 0903 	add.w	r9, r4, r3
 8009f84:	f000 fdf4 	bl	800ab70 <_sbrk_r>
 8009f88:	4581      	cmp	r9, r0
 8009f8a:	d142      	bne.n	800a012 <_malloc_r+0xea>
 8009f8c:	6821      	ldr	r1, [r4, #0]
 8009f8e:	1a6d      	subs	r5, r5, r1
 8009f90:	4629      	mov	r1, r5
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff ffa6 	bl	8009ee4 <sbrk_aligned>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d03a      	beq.n	800a012 <_malloc_r+0xea>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	442b      	add	r3, r5
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	bb62      	cbnz	r2, 800a004 <_malloc_r+0xdc>
 8009faa:	f8c8 7000 	str.w	r7, [r8]
 8009fae:	e00f      	b.n	8009fd0 <_malloc_r+0xa8>
 8009fb0:	6822      	ldr	r2, [r4, #0]
 8009fb2:	1b52      	subs	r2, r2, r5
 8009fb4:	d420      	bmi.n	8009ff8 <_malloc_r+0xd0>
 8009fb6:	2a0b      	cmp	r2, #11
 8009fb8:	d917      	bls.n	8009fea <_malloc_r+0xc2>
 8009fba:	1961      	adds	r1, r4, r5
 8009fbc:	42a3      	cmp	r3, r4
 8009fbe:	6025      	str	r5, [r4, #0]
 8009fc0:	bf18      	it	ne
 8009fc2:	6059      	strne	r1, [r3, #4]
 8009fc4:	6863      	ldr	r3, [r4, #4]
 8009fc6:	bf08      	it	eq
 8009fc8:	f8c8 1000 	streq.w	r1, [r8]
 8009fcc:	5162      	str	r2, [r4, r5]
 8009fce:	604b      	str	r3, [r1, #4]
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f82f 	bl	800a034 <__malloc_unlock>
 8009fd6:	f104 000b 	add.w	r0, r4, #11
 8009fda:	1d23      	adds	r3, r4, #4
 8009fdc:	f020 0007 	bic.w	r0, r0, #7
 8009fe0:	1ac2      	subs	r2, r0, r3
 8009fe2:	bf1c      	itt	ne
 8009fe4:	1a1b      	subne	r3, r3, r0
 8009fe6:	50a3      	strne	r3, [r4, r2]
 8009fe8:	e7af      	b.n	8009f4a <_malloc_r+0x22>
 8009fea:	6862      	ldr	r2, [r4, #4]
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	bf0c      	ite	eq
 8009ff0:	f8c8 2000 	streq.w	r2, [r8]
 8009ff4:	605a      	strne	r2, [r3, #4]
 8009ff6:	e7eb      	b.n	8009fd0 <_malloc_r+0xa8>
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	6864      	ldr	r4, [r4, #4]
 8009ffc:	e7ae      	b.n	8009f5c <_malloc_r+0x34>
 8009ffe:	463c      	mov	r4, r7
 800a000:	687f      	ldr	r7, [r7, #4]
 800a002:	e7b6      	b.n	8009f72 <_malloc_r+0x4a>
 800a004:	461a      	mov	r2, r3
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	42a3      	cmp	r3, r4
 800a00a:	d1fb      	bne.n	800a004 <_malloc_r+0xdc>
 800a00c:	2300      	movs	r3, #0
 800a00e:	6053      	str	r3, [r2, #4]
 800a010:	e7de      	b.n	8009fd0 <_malloc_r+0xa8>
 800a012:	230c      	movs	r3, #12
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	4630      	mov	r0, r6
 800a018:	f000 f80c 	bl	800a034 <__malloc_unlock>
 800a01c:	e794      	b.n	8009f48 <_malloc_r+0x20>
 800a01e:	6005      	str	r5, [r0, #0]
 800a020:	e7d6      	b.n	8009fd0 <_malloc_r+0xa8>
 800a022:	bf00      	nop
 800a024:	20000cbc 	.word	0x20000cbc

0800a028 <__malloc_lock>:
 800a028:	4801      	ldr	r0, [pc, #4]	@ (800a030 <__malloc_lock+0x8>)
 800a02a:	f7ff b89e 	b.w	800916a <__retarget_lock_acquire_recursive>
 800a02e:	bf00      	nop
 800a030:	20000cb4 	.word	0x20000cb4

0800a034 <__malloc_unlock>:
 800a034:	4801      	ldr	r0, [pc, #4]	@ (800a03c <__malloc_unlock+0x8>)
 800a036:	f7ff b899 	b.w	800916c <__retarget_lock_release_recursive>
 800a03a:	bf00      	nop
 800a03c:	20000cb4 	.word	0x20000cb4

0800a040 <_Balloc>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	69c6      	ldr	r6, [r0, #28]
 800a044:	4604      	mov	r4, r0
 800a046:	460d      	mov	r5, r1
 800a048:	b976      	cbnz	r6, 800a068 <_Balloc+0x28>
 800a04a:	2010      	movs	r0, #16
 800a04c:	f7ff ff42 	bl	8009ed4 <malloc>
 800a050:	4602      	mov	r2, r0
 800a052:	61e0      	str	r0, [r4, #28]
 800a054:	b920      	cbnz	r0, 800a060 <_Balloc+0x20>
 800a056:	4b18      	ldr	r3, [pc, #96]	@ (800a0b8 <_Balloc+0x78>)
 800a058:	4818      	ldr	r0, [pc, #96]	@ (800a0bc <_Balloc+0x7c>)
 800a05a:	216b      	movs	r1, #107	@ 0x6b
 800a05c:	f000 fd98 	bl	800ab90 <__assert_func>
 800a060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a064:	6006      	str	r6, [r0, #0]
 800a066:	60c6      	str	r6, [r0, #12]
 800a068:	69e6      	ldr	r6, [r4, #28]
 800a06a:	68f3      	ldr	r3, [r6, #12]
 800a06c:	b183      	cbz	r3, 800a090 <_Balloc+0x50>
 800a06e:	69e3      	ldr	r3, [r4, #28]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a076:	b9b8      	cbnz	r0, 800a0a8 <_Balloc+0x68>
 800a078:	2101      	movs	r1, #1
 800a07a:	fa01 f605 	lsl.w	r6, r1, r5
 800a07e:	1d72      	adds	r2, r6, #5
 800a080:	0092      	lsls	r2, r2, #2
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fda2 	bl	800abcc <_calloc_r>
 800a088:	b160      	cbz	r0, 800a0a4 <_Balloc+0x64>
 800a08a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a08e:	e00e      	b.n	800a0ae <_Balloc+0x6e>
 800a090:	2221      	movs	r2, #33	@ 0x21
 800a092:	2104      	movs	r1, #4
 800a094:	4620      	mov	r0, r4
 800a096:	f000 fd99 	bl	800abcc <_calloc_r>
 800a09a:	69e3      	ldr	r3, [r4, #28]
 800a09c:	60f0      	str	r0, [r6, #12]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e4      	bne.n	800a06e <_Balloc+0x2e>
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	6802      	ldr	r2, [r0, #0]
 800a0aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0b4:	e7f7      	b.n	800a0a6 <_Balloc+0x66>
 800a0b6:	bf00      	nop
 800a0b8:	0800b6e1 	.word	0x0800b6e1
 800a0bc:	0800b761 	.word	0x0800b761

0800a0c0 <_Bfree>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	69c6      	ldr	r6, [r0, #28]
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	b976      	cbnz	r6, 800a0e8 <_Bfree+0x28>
 800a0ca:	2010      	movs	r0, #16
 800a0cc:	f7ff ff02 	bl	8009ed4 <malloc>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	61e8      	str	r0, [r5, #28]
 800a0d4:	b920      	cbnz	r0, 800a0e0 <_Bfree+0x20>
 800a0d6:	4b09      	ldr	r3, [pc, #36]	@ (800a0fc <_Bfree+0x3c>)
 800a0d8:	4809      	ldr	r0, [pc, #36]	@ (800a100 <_Bfree+0x40>)
 800a0da:	218f      	movs	r1, #143	@ 0x8f
 800a0dc:	f000 fd58 	bl	800ab90 <__assert_func>
 800a0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0e4:	6006      	str	r6, [r0, #0]
 800a0e6:	60c6      	str	r6, [r0, #12]
 800a0e8:	b13c      	cbz	r4, 800a0fa <_Bfree+0x3a>
 800a0ea:	69eb      	ldr	r3, [r5, #28]
 800a0ec:	6862      	ldr	r2, [r4, #4]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0f4:	6021      	str	r1, [r4, #0]
 800a0f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	0800b6e1 	.word	0x0800b6e1
 800a100:	0800b761 	.word	0x0800b761

0800a104 <__multadd>:
 800a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a108:	690d      	ldr	r5, [r1, #16]
 800a10a:	4607      	mov	r7, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	461e      	mov	r6, r3
 800a110:	f101 0c14 	add.w	ip, r1, #20
 800a114:	2000      	movs	r0, #0
 800a116:	f8dc 3000 	ldr.w	r3, [ip]
 800a11a:	b299      	uxth	r1, r3
 800a11c:	fb02 6101 	mla	r1, r2, r1, r6
 800a120:	0c1e      	lsrs	r6, r3, #16
 800a122:	0c0b      	lsrs	r3, r1, #16
 800a124:	fb02 3306 	mla	r3, r2, r6, r3
 800a128:	b289      	uxth	r1, r1
 800a12a:	3001      	adds	r0, #1
 800a12c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a130:	4285      	cmp	r5, r0
 800a132:	f84c 1b04 	str.w	r1, [ip], #4
 800a136:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a13a:	dcec      	bgt.n	800a116 <__multadd+0x12>
 800a13c:	b30e      	cbz	r6, 800a182 <__multadd+0x7e>
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	42ab      	cmp	r3, r5
 800a142:	dc19      	bgt.n	800a178 <__multadd+0x74>
 800a144:	6861      	ldr	r1, [r4, #4]
 800a146:	4638      	mov	r0, r7
 800a148:	3101      	adds	r1, #1
 800a14a:	f7ff ff79 	bl	800a040 <_Balloc>
 800a14e:	4680      	mov	r8, r0
 800a150:	b928      	cbnz	r0, 800a15e <__multadd+0x5a>
 800a152:	4602      	mov	r2, r0
 800a154:	4b0c      	ldr	r3, [pc, #48]	@ (800a188 <__multadd+0x84>)
 800a156:	480d      	ldr	r0, [pc, #52]	@ (800a18c <__multadd+0x88>)
 800a158:	21ba      	movs	r1, #186	@ 0xba
 800a15a:	f000 fd19 	bl	800ab90 <__assert_func>
 800a15e:	6922      	ldr	r2, [r4, #16]
 800a160:	3202      	adds	r2, #2
 800a162:	f104 010c 	add.w	r1, r4, #12
 800a166:	0092      	lsls	r2, r2, #2
 800a168:	300c      	adds	r0, #12
 800a16a:	f7ff f800 	bl	800916e <memcpy>
 800a16e:	4621      	mov	r1, r4
 800a170:	4638      	mov	r0, r7
 800a172:	f7ff ffa5 	bl	800a0c0 <_Bfree>
 800a176:	4644      	mov	r4, r8
 800a178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a17c:	3501      	adds	r5, #1
 800a17e:	615e      	str	r6, [r3, #20]
 800a180:	6125      	str	r5, [r4, #16]
 800a182:	4620      	mov	r0, r4
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a188:	0800b750 	.word	0x0800b750
 800a18c:	0800b761 	.word	0x0800b761

0800a190 <__hi0bits>:
 800a190:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a194:	4603      	mov	r3, r0
 800a196:	bf36      	itet	cc
 800a198:	0403      	lslcc	r3, r0, #16
 800a19a:	2000      	movcs	r0, #0
 800a19c:	2010      	movcc	r0, #16
 800a19e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1a2:	bf3c      	itt	cc
 800a1a4:	021b      	lslcc	r3, r3, #8
 800a1a6:	3008      	addcc	r0, #8
 800a1a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1ac:	bf3c      	itt	cc
 800a1ae:	011b      	lslcc	r3, r3, #4
 800a1b0:	3004      	addcc	r0, #4
 800a1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1b6:	bf3c      	itt	cc
 800a1b8:	009b      	lslcc	r3, r3, #2
 800a1ba:	3002      	addcc	r0, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	db05      	blt.n	800a1cc <__hi0bits+0x3c>
 800a1c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1c4:	f100 0001 	add.w	r0, r0, #1
 800a1c8:	bf08      	it	eq
 800a1ca:	2020      	moveq	r0, #32
 800a1cc:	4770      	bx	lr

0800a1ce <__lo0bits>:
 800a1ce:	6803      	ldr	r3, [r0, #0]
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	f013 0007 	ands.w	r0, r3, #7
 800a1d6:	d00b      	beq.n	800a1f0 <__lo0bits+0x22>
 800a1d8:	07d9      	lsls	r1, r3, #31
 800a1da:	d421      	bmi.n	800a220 <__lo0bits+0x52>
 800a1dc:	0798      	lsls	r0, r3, #30
 800a1de:	bf49      	itett	mi
 800a1e0:	085b      	lsrmi	r3, r3, #1
 800a1e2:	089b      	lsrpl	r3, r3, #2
 800a1e4:	2001      	movmi	r0, #1
 800a1e6:	6013      	strmi	r3, [r2, #0]
 800a1e8:	bf5c      	itt	pl
 800a1ea:	6013      	strpl	r3, [r2, #0]
 800a1ec:	2002      	movpl	r0, #2
 800a1ee:	4770      	bx	lr
 800a1f0:	b299      	uxth	r1, r3
 800a1f2:	b909      	cbnz	r1, 800a1f8 <__lo0bits+0x2a>
 800a1f4:	0c1b      	lsrs	r3, r3, #16
 800a1f6:	2010      	movs	r0, #16
 800a1f8:	b2d9      	uxtb	r1, r3
 800a1fa:	b909      	cbnz	r1, 800a200 <__lo0bits+0x32>
 800a1fc:	3008      	adds	r0, #8
 800a1fe:	0a1b      	lsrs	r3, r3, #8
 800a200:	0719      	lsls	r1, r3, #28
 800a202:	bf04      	itt	eq
 800a204:	091b      	lsreq	r3, r3, #4
 800a206:	3004      	addeq	r0, #4
 800a208:	0799      	lsls	r1, r3, #30
 800a20a:	bf04      	itt	eq
 800a20c:	089b      	lsreq	r3, r3, #2
 800a20e:	3002      	addeq	r0, #2
 800a210:	07d9      	lsls	r1, r3, #31
 800a212:	d403      	bmi.n	800a21c <__lo0bits+0x4e>
 800a214:	085b      	lsrs	r3, r3, #1
 800a216:	f100 0001 	add.w	r0, r0, #1
 800a21a:	d003      	beq.n	800a224 <__lo0bits+0x56>
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	4770      	bx	lr
 800a220:	2000      	movs	r0, #0
 800a222:	4770      	bx	lr
 800a224:	2020      	movs	r0, #32
 800a226:	4770      	bx	lr

0800a228 <__i2b>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	460c      	mov	r4, r1
 800a22c:	2101      	movs	r1, #1
 800a22e:	f7ff ff07 	bl	800a040 <_Balloc>
 800a232:	4602      	mov	r2, r0
 800a234:	b928      	cbnz	r0, 800a242 <__i2b+0x1a>
 800a236:	4b05      	ldr	r3, [pc, #20]	@ (800a24c <__i2b+0x24>)
 800a238:	4805      	ldr	r0, [pc, #20]	@ (800a250 <__i2b+0x28>)
 800a23a:	f240 1145 	movw	r1, #325	@ 0x145
 800a23e:	f000 fca7 	bl	800ab90 <__assert_func>
 800a242:	2301      	movs	r3, #1
 800a244:	6144      	str	r4, [r0, #20]
 800a246:	6103      	str	r3, [r0, #16]
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	bf00      	nop
 800a24c:	0800b750 	.word	0x0800b750
 800a250:	0800b761 	.word	0x0800b761

0800a254 <__multiply>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	4617      	mov	r7, r2
 800a25a:	690a      	ldr	r2, [r1, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	429a      	cmp	r2, r3
 800a260:	bfa8      	it	ge
 800a262:	463b      	movge	r3, r7
 800a264:	4689      	mov	r9, r1
 800a266:	bfa4      	itt	ge
 800a268:	460f      	movge	r7, r1
 800a26a:	4699      	movge	r9, r3
 800a26c:	693d      	ldr	r5, [r7, #16]
 800a26e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	eb05 060a 	add.w	r6, r5, sl
 800a27a:	42b3      	cmp	r3, r6
 800a27c:	b085      	sub	sp, #20
 800a27e:	bfb8      	it	lt
 800a280:	3101      	addlt	r1, #1
 800a282:	f7ff fedd 	bl	800a040 <_Balloc>
 800a286:	b930      	cbnz	r0, 800a296 <__multiply+0x42>
 800a288:	4602      	mov	r2, r0
 800a28a:	4b41      	ldr	r3, [pc, #260]	@ (800a390 <__multiply+0x13c>)
 800a28c:	4841      	ldr	r0, [pc, #260]	@ (800a394 <__multiply+0x140>)
 800a28e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a292:	f000 fc7d 	bl	800ab90 <__assert_func>
 800a296:	f100 0414 	add.w	r4, r0, #20
 800a29a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a29e:	4623      	mov	r3, r4
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4573      	cmp	r3, lr
 800a2a4:	d320      	bcc.n	800a2e8 <__multiply+0x94>
 800a2a6:	f107 0814 	add.w	r8, r7, #20
 800a2aa:	f109 0114 	add.w	r1, r9, #20
 800a2ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a2b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a2b6:	9302      	str	r3, [sp, #8]
 800a2b8:	1beb      	subs	r3, r5, r7
 800a2ba:	3b15      	subs	r3, #21
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	3715      	adds	r7, #21
 800a2c4:	42bd      	cmp	r5, r7
 800a2c6:	bf38      	it	cc
 800a2c8:	2304      	movcc	r3, #4
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	9103      	str	r1, [sp, #12]
 800a2d0:	428b      	cmp	r3, r1
 800a2d2:	d80c      	bhi.n	800a2ee <__multiply+0x9a>
 800a2d4:	2e00      	cmp	r6, #0
 800a2d6:	dd03      	ble.n	800a2e0 <__multiply+0x8c>
 800a2d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d055      	beq.n	800a38c <__multiply+0x138>
 800a2e0:	6106      	str	r6, [r0, #16]
 800a2e2:	b005      	add	sp, #20
 800a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	f843 2b04 	str.w	r2, [r3], #4
 800a2ec:	e7d9      	b.n	800a2a2 <__multiply+0x4e>
 800a2ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800a2f2:	f1ba 0f00 	cmp.w	sl, #0
 800a2f6:	d01f      	beq.n	800a338 <__multiply+0xe4>
 800a2f8:	46c4      	mov	ip, r8
 800a2fa:	46a1      	mov	r9, r4
 800a2fc:	2700      	movs	r7, #0
 800a2fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a302:	f8d9 3000 	ldr.w	r3, [r9]
 800a306:	fa1f fb82 	uxth.w	fp, r2
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a310:	443b      	add	r3, r7
 800a312:	f8d9 7000 	ldr.w	r7, [r9]
 800a316:	0c12      	lsrs	r2, r2, #16
 800a318:	0c3f      	lsrs	r7, r7, #16
 800a31a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a31e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a322:	b29b      	uxth	r3, r3
 800a324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a328:	4565      	cmp	r5, ip
 800a32a:	f849 3b04 	str.w	r3, [r9], #4
 800a32e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a332:	d8e4      	bhi.n	800a2fe <__multiply+0xaa>
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	50e7      	str	r7, [r4, r3]
 800a338:	9b03      	ldr	r3, [sp, #12]
 800a33a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a33e:	3104      	adds	r1, #4
 800a340:	f1b9 0f00 	cmp.w	r9, #0
 800a344:	d020      	beq.n	800a388 <__multiply+0x134>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	4647      	mov	r7, r8
 800a34a:	46a4      	mov	ip, r4
 800a34c:	f04f 0a00 	mov.w	sl, #0
 800a350:	f8b7 b000 	ldrh.w	fp, [r7]
 800a354:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a358:	fb09 220b 	mla	r2, r9, fp, r2
 800a35c:	4452      	add	r2, sl
 800a35e:	b29b      	uxth	r3, r3
 800a360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a364:	f84c 3b04 	str.w	r3, [ip], #4
 800a368:	f857 3b04 	ldr.w	r3, [r7], #4
 800a36c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a370:	f8bc 3000 	ldrh.w	r3, [ip]
 800a374:	fb09 330a 	mla	r3, r9, sl, r3
 800a378:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a37c:	42bd      	cmp	r5, r7
 800a37e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a382:	d8e5      	bhi.n	800a350 <__multiply+0xfc>
 800a384:	9a01      	ldr	r2, [sp, #4]
 800a386:	50a3      	str	r3, [r4, r2]
 800a388:	3404      	adds	r4, #4
 800a38a:	e79f      	b.n	800a2cc <__multiply+0x78>
 800a38c:	3e01      	subs	r6, #1
 800a38e:	e7a1      	b.n	800a2d4 <__multiply+0x80>
 800a390:	0800b750 	.word	0x0800b750
 800a394:	0800b761 	.word	0x0800b761

0800a398 <__pow5mult>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	4615      	mov	r5, r2
 800a39e:	f012 0203 	ands.w	r2, r2, #3
 800a3a2:	4607      	mov	r7, r0
 800a3a4:	460e      	mov	r6, r1
 800a3a6:	d007      	beq.n	800a3b8 <__pow5mult+0x20>
 800a3a8:	4c25      	ldr	r4, [pc, #148]	@ (800a440 <__pow5mult+0xa8>)
 800a3aa:	3a01      	subs	r2, #1
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3b2:	f7ff fea7 	bl	800a104 <__multadd>
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	10ad      	asrs	r5, r5, #2
 800a3ba:	d03d      	beq.n	800a438 <__pow5mult+0xa0>
 800a3bc:	69fc      	ldr	r4, [r7, #28]
 800a3be:	b97c      	cbnz	r4, 800a3e0 <__pow5mult+0x48>
 800a3c0:	2010      	movs	r0, #16
 800a3c2:	f7ff fd87 	bl	8009ed4 <malloc>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	61f8      	str	r0, [r7, #28]
 800a3ca:	b928      	cbnz	r0, 800a3d8 <__pow5mult+0x40>
 800a3cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a444 <__pow5mult+0xac>)
 800a3ce:	481e      	ldr	r0, [pc, #120]	@ (800a448 <__pow5mult+0xb0>)
 800a3d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a3d4:	f000 fbdc 	bl	800ab90 <__assert_func>
 800a3d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3dc:	6004      	str	r4, [r0, #0]
 800a3de:	60c4      	str	r4, [r0, #12]
 800a3e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a3e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3e8:	b94c      	cbnz	r4, 800a3fe <__pow5mult+0x66>
 800a3ea:	f240 2171 	movw	r1, #625	@ 0x271
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f7ff ff1a 	bl	800a228 <__i2b>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	6003      	str	r3, [r0, #0]
 800a3fe:	f04f 0900 	mov.w	r9, #0
 800a402:	07eb      	lsls	r3, r5, #31
 800a404:	d50a      	bpl.n	800a41c <__pow5mult+0x84>
 800a406:	4631      	mov	r1, r6
 800a408:	4622      	mov	r2, r4
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7ff ff22 	bl	800a254 <__multiply>
 800a410:	4631      	mov	r1, r6
 800a412:	4680      	mov	r8, r0
 800a414:	4638      	mov	r0, r7
 800a416:	f7ff fe53 	bl	800a0c0 <_Bfree>
 800a41a:	4646      	mov	r6, r8
 800a41c:	106d      	asrs	r5, r5, #1
 800a41e:	d00b      	beq.n	800a438 <__pow5mult+0xa0>
 800a420:	6820      	ldr	r0, [r4, #0]
 800a422:	b938      	cbnz	r0, 800a434 <__pow5mult+0x9c>
 800a424:	4622      	mov	r2, r4
 800a426:	4621      	mov	r1, r4
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff ff13 	bl	800a254 <__multiply>
 800a42e:	6020      	str	r0, [r4, #0]
 800a430:	f8c0 9000 	str.w	r9, [r0]
 800a434:	4604      	mov	r4, r0
 800a436:	e7e4      	b.n	800a402 <__pow5mult+0x6a>
 800a438:	4630      	mov	r0, r6
 800a43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43e:	bf00      	nop
 800a440:	0800b814 	.word	0x0800b814
 800a444:	0800b6e1 	.word	0x0800b6e1
 800a448:	0800b761 	.word	0x0800b761

0800a44c <__lshift>:
 800a44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a450:	460c      	mov	r4, r1
 800a452:	6849      	ldr	r1, [r1, #4]
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a45a:	68a3      	ldr	r3, [r4, #8]
 800a45c:	4607      	mov	r7, r0
 800a45e:	4691      	mov	r9, r2
 800a460:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a464:	f108 0601 	add.w	r6, r8, #1
 800a468:	42b3      	cmp	r3, r6
 800a46a:	db0b      	blt.n	800a484 <__lshift+0x38>
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7ff fde7 	bl	800a040 <_Balloc>
 800a472:	4605      	mov	r5, r0
 800a474:	b948      	cbnz	r0, 800a48a <__lshift+0x3e>
 800a476:	4602      	mov	r2, r0
 800a478:	4b28      	ldr	r3, [pc, #160]	@ (800a51c <__lshift+0xd0>)
 800a47a:	4829      	ldr	r0, [pc, #164]	@ (800a520 <__lshift+0xd4>)
 800a47c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a480:	f000 fb86 	bl	800ab90 <__assert_func>
 800a484:	3101      	adds	r1, #1
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	e7ee      	b.n	800a468 <__lshift+0x1c>
 800a48a:	2300      	movs	r3, #0
 800a48c:	f100 0114 	add.w	r1, r0, #20
 800a490:	f100 0210 	add.w	r2, r0, #16
 800a494:	4618      	mov	r0, r3
 800a496:	4553      	cmp	r3, sl
 800a498:	db33      	blt.n	800a502 <__lshift+0xb6>
 800a49a:	6920      	ldr	r0, [r4, #16]
 800a49c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4a0:	f104 0314 	add.w	r3, r4, #20
 800a4a4:	f019 091f 	ands.w	r9, r9, #31
 800a4a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4b0:	d02b      	beq.n	800a50a <__lshift+0xbe>
 800a4b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a4b6:	468a      	mov	sl, r1
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	fa00 f009 	lsl.w	r0, r0, r9
 800a4c0:	4310      	orrs	r0, r2
 800a4c2:	f84a 0b04 	str.w	r0, [sl], #4
 800a4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ca:	459c      	cmp	ip, r3
 800a4cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4d0:	d8f3      	bhi.n	800a4ba <__lshift+0x6e>
 800a4d2:	ebac 0304 	sub.w	r3, ip, r4
 800a4d6:	3b15      	subs	r3, #21
 800a4d8:	f023 0303 	bic.w	r3, r3, #3
 800a4dc:	3304      	adds	r3, #4
 800a4de:	f104 0015 	add.w	r0, r4, #21
 800a4e2:	4560      	cmp	r0, ip
 800a4e4:	bf88      	it	hi
 800a4e6:	2304      	movhi	r3, #4
 800a4e8:	50ca      	str	r2, [r1, r3]
 800a4ea:	b10a      	cbz	r2, 800a4f0 <__lshift+0xa4>
 800a4ec:	f108 0602 	add.w	r6, r8, #2
 800a4f0:	3e01      	subs	r6, #1
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	612e      	str	r6, [r5, #16]
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	f7ff fde2 	bl	800a0c0 <_Bfree>
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a502:	f842 0f04 	str.w	r0, [r2, #4]!
 800a506:	3301      	adds	r3, #1
 800a508:	e7c5      	b.n	800a496 <__lshift+0x4a>
 800a50a:	3904      	subs	r1, #4
 800a50c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a510:	f841 2f04 	str.w	r2, [r1, #4]!
 800a514:	459c      	cmp	ip, r3
 800a516:	d8f9      	bhi.n	800a50c <__lshift+0xc0>
 800a518:	e7ea      	b.n	800a4f0 <__lshift+0xa4>
 800a51a:	bf00      	nop
 800a51c:	0800b750 	.word	0x0800b750
 800a520:	0800b761 	.word	0x0800b761

0800a524 <__mcmp>:
 800a524:	690a      	ldr	r2, [r1, #16]
 800a526:	4603      	mov	r3, r0
 800a528:	6900      	ldr	r0, [r0, #16]
 800a52a:	1a80      	subs	r0, r0, r2
 800a52c:	b530      	push	{r4, r5, lr}
 800a52e:	d10e      	bne.n	800a54e <__mcmp+0x2a>
 800a530:	3314      	adds	r3, #20
 800a532:	3114      	adds	r1, #20
 800a534:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a538:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a53c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a540:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a544:	4295      	cmp	r5, r2
 800a546:	d003      	beq.n	800a550 <__mcmp+0x2c>
 800a548:	d205      	bcs.n	800a556 <__mcmp+0x32>
 800a54a:	f04f 30ff 	mov.w	r0, #4294967295
 800a54e:	bd30      	pop	{r4, r5, pc}
 800a550:	42a3      	cmp	r3, r4
 800a552:	d3f3      	bcc.n	800a53c <__mcmp+0x18>
 800a554:	e7fb      	b.n	800a54e <__mcmp+0x2a>
 800a556:	2001      	movs	r0, #1
 800a558:	e7f9      	b.n	800a54e <__mcmp+0x2a>
	...

0800a55c <__mdiff>:
 800a55c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a560:	4689      	mov	r9, r1
 800a562:	4606      	mov	r6, r0
 800a564:	4611      	mov	r1, r2
 800a566:	4648      	mov	r0, r9
 800a568:	4614      	mov	r4, r2
 800a56a:	f7ff ffdb 	bl	800a524 <__mcmp>
 800a56e:	1e05      	subs	r5, r0, #0
 800a570:	d112      	bne.n	800a598 <__mdiff+0x3c>
 800a572:	4629      	mov	r1, r5
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff fd63 	bl	800a040 <_Balloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	b928      	cbnz	r0, 800a58a <__mdiff+0x2e>
 800a57e:	4b3f      	ldr	r3, [pc, #252]	@ (800a67c <__mdiff+0x120>)
 800a580:	f240 2137 	movw	r1, #567	@ 0x237
 800a584:	483e      	ldr	r0, [pc, #248]	@ (800a680 <__mdiff+0x124>)
 800a586:	f000 fb03 	bl	800ab90 <__assert_func>
 800a58a:	2301      	movs	r3, #1
 800a58c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a590:	4610      	mov	r0, r2
 800a592:	b003      	add	sp, #12
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	bfbc      	itt	lt
 800a59a:	464b      	movlt	r3, r9
 800a59c:	46a1      	movlt	r9, r4
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5a4:	bfba      	itte	lt
 800a5a6:	461c      	movlt	r4, r3
 800a5a8:	2501      	movlt	r5, #1
 800a5aa:	2500      	movge	r5, #0
 800a5ac:	f7ff fd48 	bl	800a040 <_Balloc>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	b918      	cbnz	r0, 800a5bc <__mdiff+0x60>
 800a5b4:	4b31      	ldr	r3, [pc, #196]	@ (800a67c <__mdiff+0x120>)
 800a5b6:	f240 2145 	movw	r1, #581	@ 0x245
 800a5ba:	e7e3      	b.n	800a584 <__mdiff+0x28>
 800a5bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5c0:	6926      	ldr	r6, [r4, #16]
 800a5c2:	60c5      	str	r5, [r0, #12]
 800a5c4:	f109 0310 	add.w	r3, r9, #16
 800a5c8:	f109 0514 	add.w	r5, r9, #20
 800a5cc:	f104 0e14 	add.w	lr, r4, #20
 800a5d0:	f100 0b14 	add.w	fp, r0, #20
 800a5d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a5d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	46d9      	mov	r9, fp
 800a5e0:	f04f 0c00 	mov.w	ip, #0
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a5ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a5ee:	9301      	str	r3, [sp, #4]
 800a5f0:	fa1f f38a 	uxth.w	r3, sl
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	b283      	uxth	r3, r0
 800a5f8:	1acb      	subs	r3, r1, r3
 800a5fa:	0c00      	lsrs	r0, r0, #16
 800a5fc:	4463      	add	r3, ip
 800a5fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a602:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a606:	b29b      	uxth	r3, r3
 800a608:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a60c:	4576      	cmp	r6, lr
 800a60e:	f849 3b04 	str.w	r3, [r9], #4
 800a612:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a616:	d8e5      	bhi.n	800a5e4 <__mdiff+0x88>
 800a618:	1b33      	subs	r3, r6, r4
 800a61a:	3b15      	subs	r3, #21
 800a61c:	f023 0303 	bic.w	r3, r3, #3
 800a620:	3415      	adds	r4, #21
 800a622:	3304      	adds	r3, #4
 800a624:	42a6      	cmp	r6, r4
 800a626:	bf38      	it	cc
 800a628:	2304      	movcc	r3, #4
 800a62a:	441d      	add	r5, r3
 800a62c:	445b      	add	r3, fp
 800a62e:	461e      	mov	r6, r3
 800a630:	462c      	mov	r4, r5
 800a632:	4544      	cmp	r4, r8
 800a634:	d30e      	bcc.n	800a654 <__mdiff+0xf8>
 800a636:	f108 0103 	add.w	r1, r8, #3
 800a63a:	1b49      	subs	r1, r1, r5
 800a63c:	f021 0103 	bic.w	r1, r1, #3
 800a640:	3d03      	subs	r5, #3
 800a642:	45a8      	cmp	r8, r5
 800a644:	bf38      	it	cc
 800a646:	2100      	movcc	r1, #0
 800a648:	440b      	add	r3, r1
 800a64a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a64e:	b191      	cbz	r1, 800a676 <__mdiff+0x11a>
 800a650:	6117      	str	r7, [r2, #16]
 800a652:	e79d      	b.n	800a590 <__mdiff+0x34>
 800a654:	f854 1b04 	ldr.w	r1, [r4], #4
 800a658:	46e6      	mov	lr, ip
 800a65a:	0c08      	lsrs	r0, r1, #16
 800a65c:	fa1c fc81 	uxtah	ip, ip, r1
 800a660:	4471      	add	r1, lr
 800a662:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a666:	b289      	uxth	r1, r1
 800a668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a66c:	f846 1b04 	str.w	r1, [r6], #4
 800a670:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a674:	e7dd      	b.n	800a632 <__mdiff+0xd6>
 800a676:	3f01      	subs	r7, #1
 800a678:	e7e7      	b.n	800a64a <__mdiff+0xee>
 800a67a:	bf00      	nop
 800a67c:	0800b750 	.word	0x0800b750
 800a680:	0800b761 	.word	0x0800b761

0800a684 <__d2b>:
 800a684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a688:	460f      	mov	r7, r1
 800a68a:	2101      	movs	r1, #1
 800a68c:	ec59 8b10 	vmov	r8, r9, d0
 800a690:	4616      	mov	r6, r2
 800a692:	f7ff fcd5 	bl	800a040 <_Balloc>
 800a696:	4604      	mov	r4, r0
 800a698:	b930      	cbnz	r0, 800a6a8 <__d2b+0x24>
 800a69a:	4602      	mov	r2, r0
 800a69c:	4b23      	ldr	r3, [pc, #140]	@ (800a72c <__d2b+0xa8>)
 800a69e:	4824      	ldr	r0, [pc, #144]	@ (800a730 <__d2b+0xac>)
 800a6a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a6a4:	f000 fa74 	bl	800ab90 <__assert_func>
 800a6a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a6ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6b0:	b10d      	cbz	r5, 800a6b6 <__d2b+0x32>
 800a6b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	f1b8 0300 	subs.w	r3, r8, #0
 800a6bc:	d023      	beq.n	800a706 <__d2b+0x82>
 800a6be:	4668      	mov	r0, sp
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	f7ff fd84 	bl	800a1ce <__lo0bits>
 800a6c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a6ca:	b1d0      	cbz	r0, 800a702 <__d2b+0x7e>
 800a6cc:	f1c0 0320 	rsb	r3, r0, #32
 800a6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	40c2      	lsrs	r2, r0
 800a6d8:	6163      	str	r3, [r4, #20]
 800a6da:	9201      	str	r2, [sp, #4]
 800a6dc:	9b01      	ldr	r3, [sp, #4]
 800a6de:	61a3      	str	r3, [r4, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bf0c      	ite	eq
 800a6e4:	2201      	moveq	r2, #1
 800a6e6:	2202      	movne	r2, #2
 800a6e8:	6122      	str	r2, [r4, #16]
 800a6ea:	b1a5      	cbz	r5, 800a716 <__d2b+0x92>
 800a6ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a6f0:	4405      	add	r5, r0
 800a6f2:	603d      	str	r5, [r7, #0]
 800a6f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a6f8:	6030      	str	r0, [r6, #0]
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	b003      	add	sp, #12
 800a6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a702:	6161      	str	r1, [r4, #20]
 800a704:	e7ea      	b.n	800a6dc <__d2b+0x58>
 800a706:	a801      	add	r0, sp, #4
 800a708:	f7ff fd61 	bl	800a1ce <__lo0bits>
 800a70c:	9b01      	ldr	r3, [sp, #4]
 800a70e:	6163      	str	r3, [r4, #20]
 800a710:	3020      	adds	r0, #32
 800a712:	2201      	movs	r2, #1
 800a714:	e7e8      	b.n	800a6e8 <__d2b+0x64>
 800a716:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a71a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a71e:	6038      	str	r0, [r7, #0]
 800a720:	6918      	ldr	r0, [r3, #16]
 800a722:	f7ff fd35 	bl	800a190 <__hi0bits>
 800a726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a72a:	e7e5      	b.n	800a6f8 <__d2b+0x74>
 800a72c:	0800b750 	.word	0x0800b750
 800a730:	0800b761 	.word	0x0800b761

0800a734 <__ssputs_r>:
 800a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a738:	688e      	ldr	r6, [r1, #8]
 800a73a:	461f      	mov	r7, r3
 800a73c:	42be      	cmp	r6, r7
 800a73e:	680b      	ldr	r3, [r1, #0]
 800a740:	4682      	mov	sl, r0
 800a742:	460c      	mov	r4, r1
 800a744:	4690      	mov	r8, r2
 800a746:	d82d      	bhi.n	800a7a4 <__ssputs_r+0x70>
 800a748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a74c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a750:	d026      	beq.n	800a7a0 <__ssputs_r+0x6c>
 800a752:	6965      	ldr	r5, [r4, #20]
 800a754:	6909      	ldr	r1, [r1, #16]
 800a756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a75a:	eba3 0901 	sub.w	r9, r3, r1
 800a75e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a762:	1c7b      	adds	r3, r7, #1
 800a764:	444b      	add	r3, r9
 800a766:	106d      	asrs	r5, r5, #1
 800a768:	429d      	cmp	r5, r3
 800a76a:	bf38      	it	cc
 800a76c:	461d      	movcc	r5, r3
 800a76e:	0553      	lsls	r3, r2, #21
 800a770:	d527      	bpl.n	800a7c2 <__ssputs_r+0x8e>
 800a772:	4629      	mov	r1, r5
 800a774:	f7ff fbd8 	bl	8009f28 <_malloc_r>
 800a778:	4606      	mov	r6, r0
 800a77a:	b360      	cbz	r0, 800a7d6 <__ssputs_r+0xa2>
 800a77c:	6921      	ldr	r1, [r4, #16]
 800a77e:	464a      	mov	r2, r9
 800a780:	f7fe fcf5 	bl	800916e <memcpy>
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	6126      	str	r6, [r4, #16]
 800a792:	6165      	str	r5, [r4, #20]
 800a794:	444e      	add	r6, r9
 800a796:	eba5 0509 	sub.w	r5, r5, r9
 800a79a:	6026      	str	r6, [r4, #0]
 800a79c:	60a5      	str	r5, [r4, #8]
 800a79e:	463e      	mov	r6, r7
 800a7a0:	42be      	cmp	r6, r7
 800a7a2:	d900      	bls.n	800a7a6 <__ssputs_r+0x72>
 800a7a4:	463e      	mov	r6, r7
 800a7a6:	6820      	ldr	r0, [r4, #0]
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	f000 f9c6 	bl	800ab3c <memmove>
 800a7b0:	68a3      	ldr	r3, [r4, #8]
 800a7b2:	1b9b      	subs	r3, r3, r6
 800a7b4:	60a3      	str	r3, [r4, #8]
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	4433      	add	r3, r6
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c2:	462a      	mov	r2, r5
 800a7c4:	f000 fa28 	bl	800ac18 <_realloc_r>
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d1e0      	bne.n	800a790 <__ssputs_r+0x5c>
 800a7ce:	6921      	ldr	r1, [r4, #16]
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f7ff fb35 	bl	8009e40 <_free_r>
 800a7d6:	230c      	movs	r3, #12
 800a7d8:	f8ca 3000 	str.w	r3, [sl]
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	e7e9      	b.n	800a7be <__ssputs_r+0x8a>
	...

0800a7ec <_svfiprintf_r>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	4698      	mov	r8, r3
 800a7f2:	898b      	ldrh	r3, [r1, #12]
 800a7f4:	061b      	lsls	r3, r3, #24
 800a7f6:	b09d      	sub	sp, #116	@ 0x74
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	460d      	mov	r5, r1
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	d510      	bpl.n	800a822 <_svfiprintf_r+0x36>
 800a800:	690b      	ldr	r3, [r1, #16]
 800a802:	b973      	cbnz	r3, 800a822 <_svfiprintf_r+0x36>
 800a804:	2140      	movs	r1, #64	@ 0x40
 800a806:	f7ff fb8f 	bl	8009f28 <_malloc_r>
 800a80a:	6028      	str	r0, [r5, #0]
 800a80c:	6128      	str	r0, [r5, #16]
 800a80e:	b930      	cbnz	r0, 800a81e <_svfiprintf_r+0x32>
 800a810:	230c      	movs	r3, #12
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b01d      	add	sp, #116	@ 0x74
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	2340      	movs	r3, #64	@ 0x40
 800a820:	616b      	str	r3, [r5, #20]
 800a822:	2300      	movs	r3, #0
 800a824:	9309      	str	r3, [sp, #36]	@ 0x24
 800a826:	2320      	movs	r3, #32
 800a828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a830:	2330      	movs	r3, #48	@ 0x30
 800a832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a9d0 <_svfiprintf_r+0x1e4>
 800a836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a83a:	f04f 0901 	mov.w	r9, #1
 800a83e:	4623      	mov	r3, r4
 800a840:	469a      	mov	sl, r3
 800a842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a846:	b10a      	cbz	r2, 800a84c <_svfiprintf_r+0x60>
 800a848:	2a25      	cmp	r2, #37	@ 0x25
 800a84a:	d1f9      	bne.n	800a840 <_svfiprintf_r+0x54>
 800a84c:	ebba 0b04 	subs.w	fp, sl, r4
 800a850:	d00b      	beq.n	800a86a <_svfiprintf_r+0x7e>
 800a852:	465b      	mov	r3, fp
 800a854:	4622      	mov	r2, r4
 800a856:	4629      	mov	r1, r5
 800a858:	4638      	mov	r0, r7
 800a85a:	f7ff ff6b 	bl	800a734 <__ssputs_r>
 800a85e:	3001      	adds	r0, #1
 800a860:	f000 80a7 	beq.w	800a9b2 <_svfiprintf_r+0x1c6>
 800a864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a866:	445a      	add	r2, fp
 800a868:	9209      	str	r2, [sp, #36]	@ 0x24
 800a86a:	f89a 3000 	ldrb.w	r3, [sl]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 809f 	beq.w	800a9b2 <_svfiprintf_r+0x1c6>
 800a874:	2300      	movs	r3, #0
 800a876:	f04f 32ff 	mov.w	r2, #4294967295
 800a87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a87e:	f10a 0a01 	add.w	sl, sl, #1
 800a882:	9304      	str	r3, [sp, #16]
 800a884:	9307      	str	r3, [sp, #28]
 800a886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a88a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a88c:	4654      	mov	r4, sl
 800a88e:	2205      	movs	r2, #5
 800a890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a894:	484e      	ldr	r0, [pc, #312]	@ (800a9d0 <_svfiprintf_r+0x1e4>)
 800a896:	f7f5 fccb 	bl	8000230 <memchr>
 800a89a:	9a04      	ldr	r2, [sp, #16]
 800a89c:	b9d8      	cbnz	r0, 800a8d6 <_svfiprintf_r+0xea>
 800a89e:	06d0      	lsls	r0, r2, #27
 800a8a0:	bf44      	itt	mi
 800a8a2:	2320      	movmi	r3, #32
 800a8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8a8:	0711      	lsls	r1, r2, #28
 800a8aa:	bf44      	itt	mi
 800a8ac:	232b      	movmi	r3, #43	@ 0x2b
 800a8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8b8:	d015      	beq.n	800a8e6 <_svfiprintf_r+0xfa>
 800a8ba:	9a07      	ldr	r2, [sp, #28]
 800a8bc:	4654      	mov	r4, sl
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f04f 0c0a 	mov.w	ip, #10
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ca:	3b30      	subs	r3, #48	@ 0x30
 800a8cc:	2b09      	cmp	r3, #9
 800a8ce:	d94b      	bls.n	800a968 <_svfiprintf_r+0x17c>
 800a8d0:	b1b0      	cbz	r0, 800a900 <_svfiprintf_r+0x114>
 800a8d2:	9207      	str	r2, [sp, #28]
 800a8d4:	e014      	b.n	800a900 <_svfiprintf_r+0x114>
 800a8d6:	eba0 0308 	sub.w	r3, r0, r8
 800a8da:	fa09 f303 	lsl.w	r3, r9, r3
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	9304      	str	r3, [sp, #16]
 800a8e2:	46a2      	mov	sl, r4
 800a8e4:	e7d2      	b.n	800a88c <_svfiprintf_r+0xa0>
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	1d19      	adds	r1, r3, #4
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	9103      	str	r1, [sp, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	bfbb      	ittet	lt
 800a8f2:	425b      	neglt	r3, r3
 800a8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a8f8:	9307      	strge	r3, [sp, #28]
 800a8fa:	9307      	strlt	r3, [sp, #28]
 800a8fc:	bfb8      	it	lt
 800a8fe:	9204      	strlt	r2, [sp, #16]
 800a900:	7823      	ldrb	r3, [r4, #0]
 800a902:	2b2e      	cmp	r3, #46	@ 0x2e
 800a904:	d10a      	bne.n	800a91c <_svfiprintf_r+0x130>
 800a906:	7863      	ldrb	r3, [r4, #1]
 800a908:	2b2a      	cmp	r3, #42	@ 0x2a
 800a90a:	d132      	bne.n	800a972 <_svfiprintf_r+0x186>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	1d1a      	adds	r2, r3, #4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	9203      	str	r2, [sp, #12]
 800a914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a918:	3402      	adds	r4, #2
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9e0 <_svfiprintf_r+0x1f4>
 800a920:	7821      	ldrb	r1, [r4, #0]
 800a922:	2203      	movs	r2, #3
 800a924:	4650      	mov	r0, sl
 800a926:	f7f5 fc83 	bl	8000230 <memchr>
 800a92a:	b138      	cbz	r0, 800a93c <_svfiprintf_r+0x150>
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	eba0 000a 	sub.w	r0, r0, sl
 800a932:	2240      	movs	r2, #64	@ 0x40
 800a934:	4082      	lsls	r2, r0
 800a936:	4313      	orrs	r3, r2
 800a938:	3401      	adds	r4, #1
 800a93a:	9304      	str	r3, [sp, #16]
 800a93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a940:	4824      	ldr	r0, [pc, #144]	@ (800a9d4 <_svfiprintf_r+0x1e8>)
 800a942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a946:	2206      	movs	r2, #6
 800a948:	f7f5 fc72 	bl	8000230 <memchr>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d036      	beq.n	800a9be <_svfiprintf_r+0x1d2>
 800a950:	4b21      	ldr	r3, [pc, #132]	@ (800a9d8 <_svfiprintf_r+0x1ec>)
 800a952:	bb1b      	cbnz	r3, 800a99c <_svfiprintf_r+0x1b0>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	3307      	adds	r3, #7
 800a958:	f023 0307 	bic.w	r3, r3, #7
 800a95c:	3308      	adds	r3, #8
 800a95e:	9303      	str	r3, [sp, #12]
 800a960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a962:	4433      	add	r3, r6
 800a964:	9309      	str	r3, [sp, #36]	@ 0x24
 800a966:	e76a      	b.n	800a83e <_svfiprintf_r+0x52>
 800a968:	fb0c 3202 	mla	r2, ip, r2, r3
 800a96c:	460c      	mov	r4, r1
 800a96e:	2001      	movs	r0, #1
 800a970:	e7a8      	b.n	800a8c4 <_svfiprintf_r+0xd8>
 800a972:	2300      	movs	r3, #0
 800a974:	3401      	adds	r4, #1
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	4619      	mov	r1, r3
 800a97a:	f04f 0c0a 	mov.w	ip, #10
 800a97e:	4620      	mov	r0, r4
 800a980:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a984:	3a30      	subs	r2, #48	@ 0x30
 800a986:	2a09      	cmp	r2, #9
 800a988:	d903      	bls.n	800a992 <_svfiprintf_r+0x1a6>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0c6      	beq.n	800a91c <_svfiprintf_r+0x130>
 800a98e:	9105      	str	r1, [sp, #20]
 800a990:	e7c4      	b.n	800a91c <_svfiprintf_r+0x130>
 800a992:	fb0c 2101 	mla	r1, ip, r1, r2
 800a996:	4604      	mov	r4, r0
 800a998:	2301      	movs	r3, #1
 800a99a:	e7f0      	b.n	800a97e <_svfiprintf_r+0x192>
 800a99c:	ab03      	add	r3, sp, #12
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a9dc <_svfiprintf_r+0x1f0>)
 800a9a4:	a904      	add	r1, sp, #16
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7fd fe3c 	bl	8008624 <_printf_float>
 800a9ac:	1c42      	adds	r2, r0, #1
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	d1d6      	bne.n	800a960 <_svfiprintf_r+0x174>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	065b      	lsls	r3, r3, #25
 800a9b6:	f53f af2d 	bmi.w	800a814 <_svfiprintf_r+0x28>
 800a9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9bc:	e72c      	b.n	800a818 <_svfiprintf_r+0x2c>
 800a9be:	ab03      	add	r3, sp, #12
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4b05      	ldr	r3, [pc, #20]	@ (800a9dc <_svfiprintf_r+0x1f0>)
 800a9c6:	a904      	add	r1, sp, #16
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7fe f8c3 	bl	8008b54 <_printf_i>
 800a9ce:	e7ed      	b.n	800a9ac <_svfiprintf_r+0x1c0>
 800a9d0:	0800b7ba 	.word	0x0800b7ba
 800a9d4:	0800b7c4 	.word	0x0800b7c4
 800a9d8:	08008625 	.word	0x08008625
 800a9dc:	0800a735 	.word	0x0800a735
 800a9e0:	0800b7c0 	.word	0x0800b7c0

0800a9e4 <__sflush_r>:
 800a9e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	0716      	lsls	r6, r2, #28
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	d454      	bmi.n	800aa9e <__sflush_r+0xba>
 800a9f4:	684b      	ldr	r3, [r1, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dc02      	bgt.n	800aa00 <__sflush_r+0x1c>
 800a9fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dd48      	ble.n	800aa92 <__sflush_r+0xae>
 800aa00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	d045      	beq.n	800aa92 <__sflush_r+0xae>
 800aa06:	2300      	movs	r3, #0
 800aa08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa0c:	682f      	ldr	r7, [r5, #0]
 800aa0e:	6a21      	ldr	r1, [r4, #32]
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	d030      	beq.n	800aa76 <__sflush_r+0x92>
 800aa14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	0759      	lsls	r1, r3, #29
 800aa1a:	d505      	bpl.n	800aa28 <__sflush_r+0x44>
 800aa1c:	6863      	ldr	r3, [r4, #4]
 800aa1e:	1ad2      	subs	r2, r2, r3
 800aa20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa22:	b10b      	cbz	r3, 800aa28 <__sflush_r+0x44>
 800aa24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa26:	1ad2      	subs	r2, r2, r3
 800aa28:	2300      	movs	r3, #0
 800aa2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa2c:	6a21      	ldr	r1, [r4, #32]
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b0      	blx	r6
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	d106      	bne.n	800aa46 <__sflush_r+0x62>
 800aa38:	6829      	ldr	r1, [r5, #0]
 800aa3a:	291d      	cmp	r1, #29
 800aa3c:	d82b      	bhi.n	800aa96 <__sflush_r+0xb2>
 800aa3e:	4a2a      	ldr	r2, [pc, #168]	@ (800aae8 <__sflush_r+0x104>)
 800aa40:	40ca      	lsrs	r2, r1
 800aa42:	07d6      	lsls	r6, r2, #31
 800aa44:	d527      	bpl.n	800aa96 <__sflush_r+0xb2>
 800aa46:	2200      	movs	r2, #0
 800aa48:	6062      	str	r2, [r4, #4]
 800aa4a:	04d9      	lsls	r1, r3, #19
 800aa4c:	6922      	ldr	r2, [r4, #16]
 800aa4e:	6022      	str	r2, [r4, #0]
 800aa50:	d504      	bpl.n	800aa5c <__sflush_r+0x78>
 800aa52:	1c42      	adds	r2, r0, #1
 800aa54:	d101      	bne.n	800aa5a <__sflush_r+0x76>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	b903      	cbnz	r3, 800aa5c <__sflush_r+0x78>
 800aa5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa5e:	602f      	str	r7, [r5, #0]
 800aa60:	b1b9      	cbz	r1, 800aa92 <__sflush_r+0xae>
 800aa62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa66:	4299      	cmp	r1, r3
 800aa68:	d002      	beq.n	800aa70 <__sflush_r+0x8c>
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f7ff f9e8 	bl	8009e40 <_free_r>
 800aa70:	2300      	movs	r3, #0
 800aa72:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa74:	e00d      	b.n	800aa92 <__sflush_r+0xae>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b0      	blx	r6
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	1c50      	adds	r0, r2, #1
 800aa80:	d1c9      	bne.n	800aa16 <__sflush_r+0x32>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0c6      	beq.n	800aa16 <__sflush_r+0x32>
 800aa88:	2b1d      	cmp	r3, #29
 800aa8a:	d001      	beq.n	800aa90 <__sflush_r+0xac>
 800aa8c:	2b16      	cmp	r3, #22
 800aa8e:	d11e      	bne.n	800aace <__sflush_r+0xea>
 800aa90:	602f      	str	r7, [r5, #0]
 800aa92:	2000      	movs	r0, #0
 800aa94:	e022      	b.n	800aadc <__sflush_r+0xf8>
 800aa96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa9a:	b21b      	sxth	r3, r3
 800aa9c:	e01b      	b.n	800aad6 <__sflush_r+0xf2>
 800aa9e:	690f      	ldr	r7, [r1, #16]
 800aaa0:	2f00      	cmp	r7, #0
 800aaa2:	d0f6      	beq.n	800aa92 <__sflush_r+0xae>
 800aaa4:	0793      	lsls	r3, r2, #30
 800aaa6:	680e      	ldr	r6, [r1, #0]
 800aaa8:	bf08      	it	eq
 800aaaa:	694b      	ldreq	r3, [r1, #20]
 800aaac:	600f      	str	r7, [r1, #0]
 800aaae:	bf18      	it	ne
 800aab0:	2300      	movne	r3, #0
 800aab2:	eba6 0807 	sub.w	r8, r6, r7
 800aab6:	608b      	str	r3, [r1, #8]
 800aab8:	f1b8 0f00 	cmp.w	r8, #0
 800aabc:	dde9      	ble.n	800aa92 <__sflush_r+0xae>
 800aabe:	6a21      	ldr	r1, [r4, #32]
 800aac0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aac2:	4643      	mov	r3, r8
 800aac4:	463a      	mov	r2, r7
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b0      	blx	r6
 800aaca:	2800      	cmp	r0, #0
 800aacc:	dc08      	bgt.n	800aae0 <__sflush_r+0xfc>
 800aace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae0:	4407      	add	r7, r0
 800aae2:	eba8 0800 	sub.w	r8, r8, r0
 800aae6:	e7e7      	b.n	800aab8 <__sflush_r+0xd4>
 800aae8:	20400001 	.word	0x20400001

0800aaec <_fflush_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	690b      	ldr	r3, [r1, #16]
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b913      	cbnz	r3, 800aafc <_fflush_r+0x10>
 800aaf6:	2500      	movs	r5, #0
 800aaf8:	4628      	mov	r0, r5
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	b118      	cbz	r0, 800ab06 <_fflush_r+0x1a>
 800aafe:	6a03      	ldr	r3, [r0, #32]
 800ab00:	b90b      	cbnz	r3, 800ab06 <_fflush_r+0x1a>
 800ab02:	f7fe f9d1 	bl	8008ea8 <__sinit>
 800ab06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f3      	beq.n	800aaf6 <_fflush_r+0xa>
 800ab0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab10:	07d0      	lsls	r0, r2, #31
 800ab12:	d404      	bmi.n	800ab1e <_fflush_r+0x32>
 800ab14:	0599      	lsls	r1, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_fflush_r+0x32>
 800ab18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab1a:	f7fe fb26 	bl	800916a <__retarget_lock_acquire_recursive>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4621      	mov	r1, r4
 800ab22:	f7ff ff5f 	bl	800a9e4 <__sflush_r>
 800ab26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab28:	07da      	lsls	r2, r3, #31
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	d4e4      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	059b      	lsls	r3, r3, #22
 800ab32:	d4e1      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab36:	f7fe fb19 	bl	800916c <__retarget_lock_release_recursive>
 800ab3a:	e7dd      	b.n	800aaf8 <_fflush_r+0xc>

0800ab3c <memmove>:
 800ab3c:	4288      	cmp	r0, r1
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	eb01 0402 	add.w	r4, r1, r2
 800ab44:	d902      	bls.n	800ab4c <memmove+0x10>
 800ab46:	4284      	cmp	r4, r0
 800ab48:	4623      	mov	r3, r4
 800ab4a:	d807      	bhi.n	800ab5c <memmove+0x20>
 800ab4c:	1e43      	subs	r3, r0, #1
 800ab4e:	42a1      	cmp	r1, r4
 800ab50:	d008      	beq.n	800ab64 <memmove+0x28>
 800ab52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab5a:	e7f8      	b.n	800ab4e <memmove+0x12>
 800ab5c:	4402      	add	r2, r0
 800ab5e:	4601      	mov	r1, r0
 800ab60:	428a      	cmp	r2, r1
 800ab62:	d100      	bne.n	800ab66 <memmove+0x2a>
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab6e:	e7f7      	b.n	800ab60 <memmove+0x24>

0800ab70 <_sbrk_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d06      	ldr	r5, [pc, #24]	@ (800ab8c <_sbrk_r+0x1c>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	602b      	str	r3, [r5, #0]
 800ab7c:	f7f7 ff90 	bl	8002aa0 <_sbrk>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_sbrk_r+0x1a>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_sbrk_r+0x1a>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	20000cb0 	.word	0x20000cb0

0800ab90 <__assert_func>:
 800ab90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab92:	4614      	mov	r4, r2
 800ab94:	461a      	mov	r2, r3
 800ab96:	4b09      	ldr	r3, [pc, #36]	@ (800abbc <__assert_func+0x2c>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	68d8      	ldr	r0, [r3, #12]
 800ab9e:	b14c      	cbz	r4, 800abb4 <__assert_func+0x24>
 800aba0:	4b07      	ldr	r3, [pc, #28]	@ (800abc0 <__assert_func+0x30>)
 800aba2:	9100      	str	r1, [sp, #0]
 800aba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aba8:	4906      	ldr	r1, [pc, #24]	@ (800abc4 <__assert_func+0x34>)
 800abaa:	462b      	mov	r3, r5
 800abac:	f000 f870 	bl	800ac90 <fiprintf>
 800abb0:	f000 f880 	bl	800acb4 <abort>
 800abb4:	4b04      	ldr	r3, [pc, #16]	@ (800abc8 <__assert_func+0x38>)
 800abb6:	461c      	mov	r4, r3
 800abb8:	e7f3      	b.n	800aba2 <__assert_func+0x12>
 800abba:	bf00      	nop
 800abbc:	20000018 	.word	0x20000018
 800abc0:	0800b7d5 	.word	0x0800b7d5
 800abc4:	0800b7e2 	.word	0x0800b7e2
 800abc8:	0800b810 	.word	0x0800b810

0800abcc <_calloc_r>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	fba1 5402 	umull	r5, r4, r1, r2
 800abd2:	b934      	cbnz	r4, 800abe2 <_calloc_r+0x16>
 800abd4:	4629      	mov	r1, r5
 800abd6:	f7ff f9a7 	bl	8009f28 <_malloc_r>
 800abda:	4606      	mov	r6, r0
 800abdc:	b928      	cbnz	r0, 800abea <_calloc_r+0x1e>
 800abde:	4630      	mov	r0, r6
 800abe0:	bd70      	pop	{r4, r5, r6, pc}
 800abe2:	220c      	movs	r2, #12
 800abe4:	6002      	str	r2, [r0, #0]
 800abe6:	2600      	movs	r6, #0
 800abe8:	e7f9      	b.n	800abde <_calloc_r+0x12>
 800abea:	462a      	mov	r2, r5
 800abec:	4621      	mov	r1, r4
 800abee:	f7fe fa2c 	bl	800904a <memset>
 800abf2:	e7f4      	b.n	800abde <_calloc_r+0x12>

0800abf4 <__ascii_mbtowc>:
 800abf4:	b082      	sub	sp, #8
 800abf6:	b901      	cbnz	r1, 800abfa <__ascii_mbtowc+0x6>
 800abf8:	a901      	add	r1, sp, #4
 800abfa:	b142      	cbz	r2, 800ac0e <__ascii_mbtowc+0x1a>
 800abfc:	b14b      	cbz	r3, 800ac12 <__ascii_mbtowc+0x1e>
 800abfe:	7813      	ldrb	r3, [r2, #0]
 800ac00:	600b      	str	r3, [r1, #0]
 800ac02:	7812      	ldrb	r2, [r2, #0]
 800ac04:	1e10      	subs	r0, r2, #0
 800ac06:	bf18      	it	ne
 800ac08:	2001      	movne	r0, #1
 800ac0a:	b002      	add	sp, #8
 800ac0c:	4770      	bx	lr
 800ac0e:	4610      	mov	r0, r2
 800ac10:	e7fb      	b.n	800ac0a <__ascii_mbtowc+0x16>
 800ac12:	f06f 0001 	mvn.w	r0, #1
 800ac16:	e7f8      	b.n	800ac0a <__ascii_mbtowc+0x16>

0800ac18 <_realloc_r>:
 800ac18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	4614      	mov	r4, r2
 800ac20:	460d      	mov	r5, r1
 800ac22:	b921      	cbnz	r1, 800ac2e <_realloc_r+0x16>
 800ac24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac28:	4611      	mov	r1, r2
 800ac2a:	f7ff b97d 	b.w	8009f28 <_malloc_r>
 800ac2e:	b92a      	cbnz	r2, 800ac3c <_realloc_r+0x24>
 800ac30:	f7ff f906 	bl	8009e40 <_free_r>
 800ac34:	4625      	mov	r5, r4
 800ac36:	4628      	mov	r0, r5
 800ac38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac3c:	f000 f841 	bl	800acc2 <_malloc_usable_size_r>
 800ac40:	4284      	cmp	r4, r0
 800ac42:	4606      	mov	r6, r0
 800ac44:	d802      	bhi.n	800ac4c <_realloc_r+0x34>
 800ac46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac4a:	d8f4      	bhi.n	800ac36 <_realloc_r+0x1e>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff f96a 	bl	8009f28 <_malloc_r>
 800ac54:	4680      	mov	r8, r0
 800ac56:	b908      	cbnz	r0, 800ac5c <_realloc_r+0x44>
 800ac58:	4645      	mov	r5, r8
 800ac5a:	e7ec      	b.n	800ac36 <_realloc_r+0x1e>
 800ac5c:	42b4      	cmp	r4, r6
 800ac5e:	4622      	mov	r2, r4
 800ac60:	4629      	mov	r1, r5
 800ac62:	bf28      	it	cs
 800ac64:	4632      	movcs	r2, r6
 800ac66:	f7fe fa82 	bl	800916e <memcpy>
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	f7ff f8e7 	bl	8009e40 <_free_r>
 800ac72:	e7f1      	b.n	800ac58 <_realloc_r+0x40>

0800ac74 <__ascii_wctomb>:
 800ac74:	4603      	mov	r3, r0
 800ac76:	4608      	mov	r0, r1
 800ac78:	b141      	cbz	r1, 800ac8c <__ascii_wctomb+0x18>
 800ac7a:	2aff      	cmp	r2, #255	@ 0xff
 800ac7c:	d904      	bls.n	800ac88 <__ascii_wctomb+0x14>
 800ac7e:	228a      	movs	r2, #138	@ 0x8a
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	f04f 30ff 	mov.w	r0, #4294967295
 800ac86:	4770      	bx	lr
 800ac88:	700a      	strb	r2, [r1, #0]
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	4770      	bx	lr
	...

0800ac90 <fiprintf>:
 800ac90:	b40e      	push	{r1, r2, r3}
 800ac92:	b503      	push	{r0, r1, lr}
 800ac94:	4601      	mov	r1, r0
 800ac96:	ab03      	add	r3, sp, #12
 800ac98:	4805      	ldr	r0, [pc, #20]	@ (800acb0 <fiprintf+0x20>)
 800ac9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9e:	6800      	ldr	r0, [r0, #0]
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	f000 f83f 	bl	800ad24 <_vfiprintf_r>
 800aca6:	b002      	add	sp, #8
 800aca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acac:	b003      	add	sp, #12
 800acae:	4770      	bx	lr
 800acb0:	20000018 	.word	0x20000018

0800acb4 <abort>:
 800acb4:	b508      	push	{r3, lr}
 800acb6:	2006      	movs	r0, #6
 800acb8:	f000 fa08 	bl	800b0cc <raise>
 800acbc:	2001      	movs	r0, #1
 800acbe:	f7f7 fe77 	bl	80029b0 <_exit>

0800acc2 <_malloc_usable_size_r>:
 800acc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc6:	1f18      	subs	r0, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bfbc      	itt	lt
 800accc:	580b      	ldrlt	r3, [r1, r0]
 800acce:	18c0      	addlt	r0, r0, r3
 800acd0:	4770      	bx	lr

0800acd2 <__sfputc_r>:
 800acd2:	6893      	ldr	r3, [r2, #8]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	b410      	push	{r4}
 800acda:	6093      	str	r3, [r2, #8]
 800acdc:	da08      	bge.n	800acf0 <__sfputc_r+0x1e>
 800acde:	6994      	ldr	r4, [r2, #24]
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	db01      	blt.n	800ace8 <__sfputc_r+0x16>
 800ace4:	290a      	cmp	r1, #10
 800ace6:	d103      	bne.n	800acf0 <__sfputc_r+0x1e>
 800ace8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acec:	f000 b932 	b.w	800af54 <__swbuf_r>
 800acf0:	6813      	ldr	r3, [r2, #0]
 800acf2:	1c58      	adds	r0, r3, #1
 800acf4:	6010      	str	r0, [r2, #0]
 800acf6:	7019      	strb	r1, [r3, #0]
 800acf8:	4608      	mov	r0, r1
 800acfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <__sfputs_r>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	4606      	mov	r6, r0
 800ad04:	460f      	mov	r7, r1
 800ad06:	4614      	mov	r4, r2
 800ad08:	18d5      	adds	r5, r2, r3
 800ad0a:	42ac      	cmp	r4, r5
 800ad0c:	d101      	bne.n	800ad12 <__sfputs_r+0x12>
 800ad0e:	2000      	movs	r0, #0
 800ad10:	e007      	b.n	800ad22 <__sfputs_r+0x22>
 800ad12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad16:	463a      	mov	r2, r7
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f7ff ffda 	bl	800acd2 <__sfputc_r>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	d1f3      	bne.n	800ad0a <__sfputs_r+0xa>
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad24 <_vfiprintf_r>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	460d      	mov	r5, r1
 800ad2a:	b09d      	sub	sp, #116	@ 0x74
 800ad2c:	4614      	mov	r4, r2
 800ad2e:	4698      	mov	r8, r3
 800ad30:	4606      	mov	r6, r0
 800ad32:	b118      	cbz	r0, 800ad3c <_vfiprintf_r+0x18>
 800ad34:	6a03      	ldr	r3, [r0, #32]
 800ad36:	b90b      	cbnz	r3, 800ad3c <_vfiprintf_r+0x18>
 800ad38:	f7fe f8b6 	bl	8008ea8 <__sinit>
 800ad3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	d405      	bmi.n	800ad4e <_vfiprintf_r+0x2a>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	059a      	lsls	r2, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <_vfiprintf_r+0x2a>
 800ad48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad4a:	f7fe fa0e 	bl	800916a <__retarget_lock_acquire_recursive>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	071b      	lsls	r3, r3, #28
 800ad52:	d501      	bpl.n	800ad58 <_vfiprintf_r+0x34>
 800ad54:	692b      	ldr	r3, [r5, #16]
 800ad56:	b99b      	cbnz	r3, 800ad80 <_vfiprintf_r+0x5c>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 f938 	bl	800afd0 <__swsetup_r>
 800ad60:	b170      	cbz	r0, 800ad80 <_vfiprintf_r+0x5c>
 800ad62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad64:	07dc      	lsls	r4, r3, #31
 800ad66:	d504      	bpl.n	800ad72 <_vfiprintf_r+0x4e>
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	b01d      	add	sp, #116	@ 0x74
 800ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	0598      	lsls	r0, r3, #22
 800ad76:	d4f7      	bmi.n	800ad68 <_vfiprintf_r+0x44>
 800ad78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7a:	f7fe f9f7 	bl	800916c <__retarget_lock_release_recursive>
 800ad7e:	e7f3      	b.n	800ad68 <_vfiprintf_r+0x44>
 800ad80:	2300      	movs	r3, #0
 800ad82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad84:	2320      	movs	r3, #32
 800ad86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad8e:	2330      	movs	r3, #48	@ 0x30
 800ad90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af40 <_vfiprintf_r+0x21c>
 800ad94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad98:	f04f 0901 	mov.w	r9, #1
 800ad9c:	4623      	mov	r3, r4
 800ad9e:	469a      	mov	sl, r3
 800ada0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada4:	b10a      	cbz	r2, 800adaa <_vfiprintf_r+0x86>
 800ada6:	2a25      	cmp	r2, #37	@ 0x25
 800ada8:	d1f9      	bne.n	800ad9e <_vfiprintf_r+0x7a>
 800adaa:	ebba 0b04 	subs.w	fp, sl, r4
 800adae:	d00b      	beq.n	800adc8 <_vfiprintf_r+0xa4>
 800adb0:	465b      	mov	r3, fp
 800adb2:	4622      	mov	r2, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ffa2 	bl	800ad00 <__sfputs_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	f000 80a7 	beq.w	800af10 <_vfiprintf_r+0x1ec>
 800adc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc4:	445a      	add	r2, fp
 800adc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800adc8:	f89a 3000 	ldrb.w	r3, [sl]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 809f 	beq.w	800af10 <_vfiprintf_r+0x1ec>
 800add2:	2300      	movs	r3, #0
 800add4:	f04f 32ff 	mov.w	r2, #4294967295
 800add8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800addc:	f10a 0a01 	add.w	sl, sl, #1
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	9307      	str	r3, [sp, #28]
 800ade4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ade8:	931a      	str	r3, [sp, #104]	@ 0x68
 800adea:	4654      	mov	r4, sl
 800adec:	2205      	movs	r2, #5
 800adee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf2:	4853      	ldr	r0, [pc, #332]	@ (800af40 <_vfiprintf_r+0x21c>)
 800adf4:	f7f5 fa1c 	bl	8000230 <memchr>
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	b9d8      	cbnz	r0, 800ae34 <_vfiprintf_r+0x110>
 800adfc:	06d1      	lsls	r1, r2, #27
 800adfe:	bf44      	itt	mi
 800ae00:	2320      	movmi	r3, #32
 800ae02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae06:	0713      	lsls	r3, r2, #28
 800ae08:	bf44      	itt	mi
 800ae0a:	232b      	movmi	r3, #43	@ 0x2b
 800ae0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae10:	f89a 3000 	ldrb.w	r3, [sl]
 800ae14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae16:	d015      	beq.n	800ae44 <_vfiprintf_r+0x120>
 800ae18:	9a07      	ldr	r2, [sp, #28]
 800ae1a:	4654      	mov	r4, sl
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f04f 0c0a 	mov.w	ip, #10
 800ae22:	4621      	mov	r1, r4
 800ae24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae28:	3b30      	subs	r3, #48	@ 0x30
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d94b      	bls.n	800aec6 <_vfiprintf_r+0x1a2>
 800ae2e:	b1b0      	cbz	r0, 800ae5e <_vfiprintf_r+0x13a>
 800ae30:	9207      	str	r2, [sp, #28]
 800ae32:	e014      	b.n	800ae5e <_vfiprintf_r+0x13a>
 800ae34:	eba0 0308 	sub.w	r3, r0, r8
 800ae38:	fa09 f303 	lsl.w	r3, r9, r3
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	46a2      	mov	sl, r4
 800ae42:	e7d2      	b.n	800adea <_vfiprintf_r+0xc6>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	1d19      	adds	r1, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9103      	str	r1, [sp, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfbb      	ittet	lt
 800ae50:	425b      	neglt	r3, r3
 800ae52:	f042 0202 	orrlt.w	r2, r2, #2
 800ae56:	9307      	strge	r3, [sp, #28]
 800ae58:	9307      	strlt	r3, [sp, #28]
 800ae5a:	bfb8      	it	lt
 800ae5c:	9204      	strlt	r2, [sp, #16]
 800ae5e:	7823      	ldrb	r3, [r4, #0]
 800ae60:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae62:	d10a      	bne.n	800ae7a <_vfiprintf_r+0x156>
 800ae64:	7863      	ldrb	r3, [r4, #1]
 800ae66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae68:	d132      	bne.n	800aed0 <_vfiprintf_r+0x1ac>
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	1d1a      	adds	r2, r3, #4
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	9203      	str	r2, [sp, #12]
 800ae72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae76:	3402      	adds	r4, #2
 800ae78:	9305      	str	r3, [sp, #20]
 800ae7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af50 <_vfiprintf_r+0x22c>
 800ae7e:	7821      	ldrb	r1, [r4, #0]
 800ae80:	2203      	movs	r2, #3
 800ae82:	4650      	mov	r0, sl
 800ae84:	f7f5 f9d4 	bl	8000230 <memchr>
 800ae88:	b138      	cbz	r0, 800ae9a <_vfiprintf_r+0x176>
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	eba0 000a 	sub.w	r0, r0, sl
 800ae90:	2240      	movs	r2, #64	@ 0x40
 800ae92:	4082      	lsls	r2, r0
 800ae94:	4313      	orrs	r3, r2
 800ae96:	3401      	adds	r4, #1
 800ae98:	9304      	str	r3, [sp, #16]
 800ae9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9e:	4829      	ldr	r0, [pc, #164]	@ (800af44 <_vfiprintf_r+0x220>)
 800aea0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aea4:	2206      	movs	r2, #6
 800aea6:	f7f5 f9c3 	bl	8000230 <memchr>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d03f      	beq.n	800af2e <_vfiprintf_r+0x20a>
 800aeae:	4b26      	ldr	r3, [pc, #152]	@ (800af48 <_vfiprintf_r+0x224>)
 800aeb0:	bb1b      	cbnz	r3, 800aefa <_vfiprintf_r+0x1d6>
 800aeb2:	9b03      	ldr	r3, [sp, #12]
 800aeb4:	3307      	adds	r3, #7
 800aeb6:	f023 0307 	bic.w	r3, r3, #7
 800aeba:	3308      	adds	r3, #8
 800aebc:	9303      	str	r3, [sp, #12]
 800aebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec0:	443b      	add	r3, r7
 800aec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec4:	e76a      	b.n	800ad9c <_vfiprintf_r+0x78>
 800aec6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeca:	460c      	mov	r4, r1
 800aecc:	2001      	movs	r0, #1
 800aece:	e7a8      	b.n	800ae22 <_vfiprintf_r+0xfe>
 800aed0:	2300      	movs	r3, #0
 800aed2:	3401      	adds	r4, #1
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	4619      	mov	r1, r3
 800aed8:	f04f 0c0a 	mov.w	ip, #10
 800aedc:	4620      	mov	r0, r4
 800aede:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee2:	3a30      	subs	r2, #48	@ 0x30
 800aee4:	2a09      	cmp	r2, #9
 800aee6:	d903      	bls.n	800aef0 <_vfiprintf_r+0x1cc>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0c6      	beq.n	800ae7a <_vfiprintf_r+0x156>
 800aeec:	9105      	str	r1, [sp, #20]
 800aeee:	e7c4      	b.n	800ae7a <_vfiprintf_r+0x156>
 800aef0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef4:	4604      	mov	r4, r0
 800aef6:	2301      	movs	r3, #1
 800aef8:	e7f0      	b.n	800aedc <_vfiprintf_r+0x1b8>
 800aefa:	ab03      	add	r3, sp, #12
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	462a      	mov	r2, r5
 800af00:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <_vfiprintf_r+0x228>)
 800af02:	a904      	add	r1, sp, #16
 800af04:	4630      	mov	r0, r6
 800af06:	f7fd fb8d 	bl	8008624 <_printf_float>
 800af0a:	4607      	mov	r7, r0
 800af0c:	1c78      	adds	r0, r7, #1
 800af0e:	d1d6      	bne.n	800aebe <_vfiprintf_r+0x19a>
 800af10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af12:	07d9      	lsls	r1, r3, #31
 800af14:	d405      	bmi.n	800af22 <_vfiprintf_r+0x1fe>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	059a      	lsls	r2, r3, #22
 800af1a:	d402      	bmi.n	800af22 <_vfiprintf_r+0x1fe>
 800af1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af1e:	f7fe f925 	bl	800916c <__retarget_lock_release_recursive>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	065b      	lsls	r3, r3, #25
 800af26:	f53f af1f 	bmi.w	800ad68 <_vfiprintf_r+0x44>
 800af2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af2c:	e71e      	b.n	800ad6c <_vfiprintf_r+0x48>
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	462a      	mov	r2, r5
 800af34:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <_vfiprintf_r+0x228>)
 800af36:	a904      	add	r1, sp, #16
 800af38:	4630      	mov	r0, r6
 800af3a:	f7fd fe0b 	bl	8008b54 <_printf_i>
 800af3e:	e7e4      	b.n	800af0a <_vfiprintf_r+0x1e6>
 800af40:	0800b7ba 	.word	0x0800b7ba
 800af44:	0800b7c4 	.word	0x0800b7c4
 800af48:	08008625 	.word	0x08008625
 800af4c:	0800ad01 	.word	0x0800ad01
 800af50:	0800b7c0 	.word	0x0800b7c0

0800af54 <__swbuf_r>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	460e      	mov	r6, r1
 800af58:	4614      	mov	r4, r2
 800af5a:	4605      	mov	r5, r0
 800af5c:	b118      	cbz	r0, 800af66 <__swbuf_r+0x12>
 800af5e:	6a03      	ldr	r3, [r0, #32]
 800af60:	b90b      	cbnz	r3, 800af66 <__swbuf_r+0x12>
 800af62:	f7fd ffa1 	bl	8008ea8 <__sinit>
 800af66:	69a3      	ldr	r3, [r4, #24]
 800af68:	60a3      	str	r3, [r4, #8]
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	071a      	lsls	r2, r3, #28
 800af6e:	d501      	bpl.n	800af74 <__swbuf_r+0x20>
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	b943      	cbnz	r3, 800af86 <__swbuf_r+0x32>
 800af74:	4621      	mov	r1, r4
 800af76:	4628      	mov	r0, r5
 800af78:	f000 f82a 	bl	800afd0 <__swsetup_r>
 800af7c:	b118      	cbz	r0, 800af86 <__swbuf_r+0x32>
 800af7e:	f04f 37ff 	mov.w	r7, #4294967295
 800af82:	4638      	mov	r0, r7
 800af84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	6922      	ldr	r2, [r4, #16]
 800af8a:	1a98      	subs	r0, r3, r2
 800af8c:	6963      	ldr	r3, [r4, #20]
 800af8e:	b2f6      	uxtb	r6, r6
 800af90:	4283      	cmp	r3, r0
 800af92:	4637      	mov	r7, r6
 800af94:	dc05      	bgt.n	800afa2 <__swbuf_r+0x4e>
 800af96:	4621      	mov	r1, r4
 800af98:	4628      	mov	r0, r5
 800af9a:	f7ff fda7 	bl	800aaec <_fflush_r>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d1ed      	bne.n	800af7e <__swbuf_r+0x2a>
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	60a3      	str	r3, [r4, #8]
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	6022      	str	r2, [r4, #0]
 800afae:	701e      	strb	r6, [r3, #0]
 800afb0:	6962      	ldr	r2, [r4, #20]
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d004      	beq.n	800afc2 <__swbuf_r+0x6e>
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	07db      	lsls	r3, r3, #31
 800afbc:	d5e1      	bpl.n	800af82 <__swbuf_r+0x2e>
 800afbe:	2e0a      	cmp	r6, #10
 800afc0:	d1df      	bne.n	800af82 <__swbuf_r+0x2e>
 800afc2:	4621      	mov	r1, r4
 800afc4:	4628      	mov	r0, r5
 800afc6:	f7ff fd91 	bl	800aaec <_fflush_r>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d0d9      	beq.n	800af82 <__swbuf_r+0x2e>
 800afce:	e7d6      	b.n	800af7e <__swbuf_r+0x2a>

0800afd0 <__swsetup_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4b29      	ldr	r3, [pc, #164]	@ (800b078 <__swsetup_r+0xa8>)
 800afd4:	4605      	mov	r5, r0
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	460c      	mov	r4, r1
 800afda:	b118      	cbz	r0, 800afe4 <__swsetup_r+0x14>
 800afdc:	6a03      	ldr	r3, [r0, #32]
 800afde:	b90b      	cbnz	r3, 800afe4 <__swsetup_r+0x14>
 800afe0:	f7fd ff62 	bl	8008ea8 <__sinit>
 800afe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe8:	0719      	lsls	r1, r3, #28
 800afea:	d422      	bmi.n	800b032 <__swsetup_r+0x62>
 800afec:	06da      	lsls	r2, r3, #27
 800afee:	d407      	bmi.n	800b000 <__swsetup_r+0x30>
 800aff0:	2209      	movs	r2, #9
 800aff2:	602a      	str	r2, [r5, #0]
 800aff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	f04f 30ff 	mov.w	r0, #4294967295
 800affe:	e033      	b.n	800b068 <__swsetup_r+0x98>
 800b000:	0758      	lsls	r0, r3, #29
 800b002:	d512      	bpl.n	800b02a <__swsetup_r+0x5a>
 800b004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b006:	b141      	cbz	r1, 800b01a <__swsetup_r+0x4a>
 800b008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b00c:	4299      	cmp	r1, r3
 800b00e:	d002      	beq.n	800b016 <__swsetup_r+0x46>
 800b010:	4628      	mov	r0, r5
 800b012:	f7fe ff15 	bl	8009e40 <_free_r>
 800b016:	2300      	movs	r3, #0
 800b018:	6363      	str	r3, [r4, #52]	@ 0x34
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	2300      	movs	r3, #0
 800b024:	6063      	str	r3, [r4, #4]
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	f043 0308 	orr.w	r3, r3, #8
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	b94b      	cbnz	r3, 800b04a <__swsetup_r+0x7a>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b03c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b040:	d003      	beq.n	800b04a <__swsetup_r+0x7a>
 800b042:	4621      	mov	r1, r4
 800b044:	4628      	mov	r0, r5
 800b046:	f000 f883 	bl	800b150 <__smakebuf_r>
 800b04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b04e:	f013 0201 	ands.w	r2, r3, #1
 800b052:	d00a      	beq.n	800b06a <__swsetup_r+0x9a>
 800b054:	2200      	movs	r2, #0
 800b056:	60a2      	str	r2, [r4, #8]
 800b058:	6962      	ldr	r2, [r4, #20]
 800b05a:	4252      	negs	r2, r2
 800b05c:	61a2      	str	r2, [r4, #24]
 800b05e:	6922      	ldr	r2, [r4, #16]
 800b060:	b942      	cbnz	r2, 800b074 <__swsetup_r+0xa4>
 800b062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b066:	d1c5      	bne.n	800aff4 <__swsetup_r+0x24>
 800b068:	bd38      	pop	{r3, r4, r5, pc}
 800b06a:	0799      	lsls	r1, r3, #30
 800b06c:	bf58      	it	pl
 800b06e:	6962      	ldrpl	r2, [r4, #20]
 800b070:	60a2      	str	r2, [r4, #8]
 800b072:	e7f4      	b.n	800b05e <__swsetup_r+0x8e>
 800b074:	2000      	movs	r0, #0
 800b076:	e7f7      	b.n	800b068 <__swsetup_r+0x98>
 800b078:	20000018 	.word	0x20000018

0800b07c <_raise_r>:
 800b07c:	291f      	cmp	r1, #31
 800b07e:	b538      	push	{r3, r4, r5, lr}
 800b080:	4605      	mov	r5, r0
 800b082:	460c      	mov	r4, r1
 800b084:	d904      	bls.n	800b090 <_raise_r+0x14>
 800b086:	2316      	movs	r3, #22
 800b088:	6003      	str	r3, [r0, #0]
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b092:	b112      	cbz	r2, 800b09a <_raise_r+0x1e>
 800b094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b098:	b94b      	cbnz	r3, 800b0ae <_raise_r+0x32>
 800b09a:	4628      	mov	r0, r5
 800b09c:	f000 f830 	bl	800b100 <_getpid_r>
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0aa:	f000 b817 	b.w	800b0dc <_kill_r>
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d00a      	beq.n	800b0c8 <_raise_r+0x4c>
 800b0b2:	1c59      	adds	r1, r3, #1
 800b0b4:	d103      	bne.n	800b0be <_raise_r+0x42>
 800b0b6:	2316      	movs	r3, #22
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e7e7      	b.n	800b08e <_raise_r+0x12>
 800b0be:	2100      	movs	r1, #0
 800b0c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	4798      	blx	r3
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	e7e0      	b.n	800b08e <_raise_r+0x12>

0800b0cc <raise>:
 800b0cc:	4b02      	ldr	r3, [pc, #8]	@ (800b0d8 <raise+0xc>)
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	f7ff bfd3 	b.w	800b07c <_raise_r>
 800b0d6:	bf00      	nop
 800b0d8:	20000018 	.word	0x20000018

0800b0dc <_kill_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	@ (800b0fc <_kill_r+0x20>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	f7f7 fc51 	bl	8002990 <_kill>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d102      	bne.n	800b0f8 <_kill_r+0x1c>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b103      	cbz	r3, 800b0f8 <_kill_r+0x1c>
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000cb0 	.word	0x20000cb0

0800b100 <_getpid_r>:
 800b100:	f7f7 bc3e 	b.w	8002980 <_getpid>

0800b104 <__swhatbuf_r>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	460c      	mov	r4, r1
 800b108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10c:	2900      	cmp	r1, #0
 800b10e:	b096      	sub	sp, #88	@ 0x58
 800b110:	4615      	mov	r5, r2
 800b112:	461e      	mov	r6, r3
 800b114:	da0d      	bge.n	800b132 <__swhatbuf_r+0x2e>
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b11c:	f04f 0100 	mov.w	r1, #0
 800b120:	bf14      	ite	ne
 800b122:	2340      	movne	r3, #64	@ 0x40
 800b124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b128:	2000      	movs	r0, #0
 800b12a:	6031      	str	r1, [r6, #0]
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	b016      	add	sp, #88	@ 0x58
 800b130:	bd70      	pop	{r4, r5, r6, pc}
 800b132:	466a      	mov	r2, sp
 800b134:	f000 f848 	bl	800b1c8 <_fstat_r>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dbec      	blt.n	800b116 <__swhatbuf_r+0x12>
 800b13c:	9901      	ldr	r1, [sp, #4]
 800b13e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b146:	4259      	negs	r1, r3
 800b148:	4159      	adcs	r1, r3
 800b14a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b14e:	e7eb      	b.n	800b128 <__swhatbuf_r+0x24>

0800b150 <__smakebuf_r>:
 800b150:	898b      	ldrh	r3, [r1, #12]
 800b152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b154:	079d      	lsls	r5, r3, #30
 800b156:	4606      	mov	r6, r0
 800b158:	460c      	mov	r4, r1
 800b15a:	d507      	bpl.n	800b16c <__smakebuf_r+0x1c>
 800b15c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	6123      	str	r3, [r4, #16]
 800b164:	2301      	movs	r3, #1
 800b166:	6163      	str	r3, [r4, #20]
 800b168:	b003      	add	sp, #12
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16c:	ab01      	add	r3, sp, #4
 800b16e:	466a      	mov	r2, sp
 800b170:	f7ff ffc8 	bl	800b104 <__swhatbuf_r>
 800b174:	9f00      	ldr	r7, [sp, #0]
 800b176:	4605      	mov	r5, r0
 800b178:	4639      	mov	r1, r7
 800b17a:	4630      	mov	r0, r6
 800b17c:	f7fe fed4 	bl	8009f28 <_malloc_r>
 800b180:	b948      	cbnz	r0, 800b196 <__smakebuf_r+0x46>
 800b182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b186:	059a      	lsls	r2, r3, #22
 800b188:	d4ee      	bmi.n	800b168 <__smakebuf_r+0x18>
 800b18a:	f023 0303 	bic.w	r3, r3, #3
 800b18e:	f043 0302 	orr.w	r3, r3, #2
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	e7e2      	b.n	800b15c <__smakebuf_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	6020      	str	r0, [r4, #0]
 800b19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1a6:	b15b      	cbz	r3, 800b1c0 <__smakebuf_r+0x70>
 800b1a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f000 f81d 	bl	800b1ec <_isatty_r>
 800b1b2:	b128      	cbz	r0, 800b1c0 <__smakebuf_r+0x70>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f023 0303 	bic.w	r3, r3, #3
 800b1ba:	f043 0301 	orr.w	r3, r3, #1
 800b1be:	81a3      	strh	r3, [r4, #12]
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	431d      	orrs	r5, r3
 800b1c4:	81a5      	strh	r5, [r4, #12]
 800b1c6:	e7cf      	b.n	800b168 <__smakebuf_r+0x18>

0800b1c8 <_fstat_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	@ (800b1e8 <_fstat_r+0x20>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	f7f7 fc3b 	bl	8002a50 <_fstat>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	d102      	bne.n	800b1e4 <_fstat_r+0x1c>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b103      	cbz	r3, 800b1e4 <_fstat_r+0x1c>
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20000cb0 	.word	0x20000cb0

0800b1ec <_isatty_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d06      	ldr	r5, [pc, #24]	@ (800b208 <_isatty_r+0x1c>)
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7f7 fc3a 	bl	8002a70 <_isatty>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_isatty_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_isatty_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	20000cb0 	.word	0x20000cb0

0800b20c <_init>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	bf00      	nop
 800b210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b212:	bc08      	pop	{r3}
 800b214:	469e      	mov	lr, r3
 800b216:	4770      	bx	lr

0800b218 <_fini>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	bf00      	nop
 800b21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21e:	bc08      	pop	{r3}
 800b220:	469e      	mov	lr, r3
 800b222:	4770      	bx	lr
