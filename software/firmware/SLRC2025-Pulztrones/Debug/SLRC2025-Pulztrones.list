
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  0800d9a0  0800d9a0  0000e9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e51c  0800e51c  0001023c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e51c  0800e51c  0000f51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e524  0800e524  0001023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e524  0800e524  0000f524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e528  0800e528  0000f528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800e52c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cec  2000023c  0800e768  0001023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f28  0800e768  00010f28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad29  00000000  00000000  0001026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047dc  00000000  00000000  0002af95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0002f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b9  00000000  00000000  00031140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c60  00000000  00000000  000324f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e35  00000000  00000000  0005a159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8fab  00000000  00000000  0007df8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba4  00000000  00000000  00166f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0016eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d984 	.word	0x0800d984

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000240 	.word	0x20000240
 800020c:	0800d984 	.word	0x0800d984

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <ProcessCommand>:
}

/**
 * @brief Process received command
 */
void ProcessCommand(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  switch (rxCmd) {
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <ProcessCommand+0x5c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	dc0f      	bgt.n	8001020 <ProcessCommand+0x2c>
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd20      	ble.n	8001046 <ProcessCommand+0x52>
 8001004:	3b01      	subs	r3, #1
 8001006:	2b03      	cmp	r3, #3
 8001008:	d81d      	bhi.n	8001046 <ProcessCommand+0x52>
 800100a:	a201      	add	r2, pc, #4	@ (adr r2, 8001010 <ProcessCommand+0x1c>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001027 	.word	0x08001027
 8001014:	0800102f 	.word	0x0800102f
 8001018:	08001037 	.word	0x08001037
 800101c:	0800103f 	.word	0x0800103f
 8001020:	2b50      	cmp	r3, #80	@ 0x50
 8001022:	d012      	beq.n	800104a <ProcessCommand+0x56>
      //StopRobot();
      break;

    default:
      /* Unknown command */
      break;
 8001024:	e00f      	b.n	8001046 <ProcessCommand+0x52>
      HandleLineDetection(rxBuffer);
 8001026:	480b      	ldr	r0, [pc, #44]	@ (8001054 <ProcessCommand+0x60>)
 8001028:	f002 fc70 	bl	800390c <HandleLineDetection>
      break;
 800102c:	e00e      	b.n	800104c <ProcessCommand+0x58>
      HandleGridPosition(rxBuffer);
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <ProcessCommand+0x60>)
 8001030:	f002 fc7c 	bl	800392c <HandleGridPosition>
      break;
 8001034:	e00a      	b.n	800104c <ProcessCommand+0x58>
      HandleColorDetection(rxBuffer);
 8001036:	4807      	ldr	r0, [pc, #28]	@ (8001054 <ProcessCommand+0x60>)
 8001038:	f002 fc8b 	bl	8003952 <HandleColorDetection>
      break;
 800103c:	e006      	b.n	800104c <ProcessCommand+0x58>
    	HandleLineColorDetection(rxBuffer);
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <ProcessCommand+0x60>)
 8001040:	f002 fc92 	bl	8003968 <HandleLineColorDetection>
	  break;
 8001044:	e002      	b.n	800104c <ProcessCommand+0x58>
      break;
 8001046:	bf00      	nop
 8001048:	e000      	b.n	800104c <ProcessCommand+0x58>
      break;
 800104a:	bf00      	nop
  }
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002dc 	.word	0x200002dc
 8001054:	2000025c 	.word	0x2000025c

08001058 <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d901      	bls.n	800106c <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8001068:	230f      	movs	r3, #15
 800106a:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107c:	4823      	ldr	r0, [pc, #140]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 800107e:	f005 fafb 	bl	8006678 <HAL_GPIO_WritePin>
 8001082:	e005      	b.n	8001090 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800108a:	4820      	ldr	r0, [pc, #128]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 800108c:	f005 faf4 	bl	8006678 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a0:	481a      	ldr	r0, [pc, #104]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010a2:	f005 fae9 	bl	8006678 <HAL_GPIO_WritePin>
 80010a6:	e005      	b.n	80010b4 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ae:	4817      	ldr	r0, [pc, #92]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010b0:	f005 fae2 	bl	8006678 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010c4:	4811      	ldr	r0, [pc, #68]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010c6:	f005 fad7 	bl	8006678 <HAL_GPIO_WritePin>
 80010ca:	e005      	b.n	80010d8 <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d2:	480e      	ldr	r0, [pc, #56]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010d4:	f005 fad0 	bl	8006678 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e8:	4808      	ldr	r0, [pc, #32]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010ea:	f005 fac5 	bl	8006678 <HAL_GPIO_WritePin>
 80010ee:	e005      	b.n	80010fc <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010f8:	f005 fabe 	bl	8006678 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fb39 	bl	8001774 <delayMicroseconds>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400

08001110 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 800111a:	480b      	ldr	r0, [pc, #44]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 800111c:	f004 f8be 	bl	800529c <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001120:	2164      	movs	r1, #100	@ 0x64
 8001122:	4809      	ldr	r0, [pc, #36]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 8001124:	f004 f9bf 	bl	80054a6 <HAL_ADC_PollForConversion>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d104      	bne.n	8001138 <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 800112e:	4806      	ldr	r0, [pc, #24]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 8001130:	f004 fa44 	bl	80055bc <HAL_ADC_GetValue>
 8001134:	4603      	mov	r3, r0
 8001136:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 800113a:	f004 f981 	bl	8005440 <HAL_ADC_Stop>

    return adcValue;
 800113e:	88fb      	ldrh	r3, [r7, #6]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000324 	.word	0x20000324

0800114c <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff7d 	bl	8001058 <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 800115e:	2005      	movs	r0, #5
 8001160:	f000 fb08 	bl	8001774 <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8001164:	f7ff ffd4 	bl	8001110 <AnalogMux_ReadADC>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <init_ball_storage>:
#include "ballstorage.h"

int good_potato_storage; // left
int bad_potato_storage; // right

void init_ball_storage(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	good_potato_storage = Servo_Register(4, "good_potato_storage", 0, 180, 90);
 8001178:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 80011cc <init_ball_storage+0x58>
 800117c:	eddf 0a14 	vldr	s1, [pc, #80]	@ 80011d0 <init_ball_storage+0x5c>
 8001180:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80011d4 <init_ball_storage+0x60>
 8001184:	4914      	ldr	r1, [pc, #80]	@ (80011d8 <init_ball_storage+0x64>)
 8001186:	2004      	movs	r0, #4
 8001188:	f002 fe2a 	bl	8003de0 <Servo_Register>
 800118c:	4603      	mov	r3, r0
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <init_ball_storage+0x68>)
 8001190:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(good_potato_storage, 90);
 8001192:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <init_ball_storage+0x68>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80011cc <init_ball_storage+0x58>
 800119a:	4618      	mov	r0, r3
 800119c:	f002 ff0c 	bl	8003fb8 <Servo_SetAngle>

	bad_potato_storage = Servo_Register(5, "bad_potato_storage", 0, 180, 90);
 80011a0:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80011cc <init_ball_storage+0x58>
 80011a4:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80011d0 <init_ball_storage+0x5c>
 80011a8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80011d4 <init_ball_storage+0x60>
 80011ac:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <init_ball_storage+0x6c>)
 80011ae:	2005      	movs	r0, #5
 80011b0:	f002 fe16 	bl	8003de0 <Servo_Register>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <init_ball_storage+0x70>)
 80011b8:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(bad_potato_storage, 90);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <init_ball_storage+0x70>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80011cc <init_ball_storage+0x58>
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fef8 	bl	8003fb8 <Servo_SetAngle>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	42b40000 	.word	0x42b40000
 80011d0:	43340000 	.word	0x43340000
 80011d4:	00000000 	.word	0x00000000
 80011d8:	0800d9a0 	.word	0x0800d9a0
 80011dc:	200002e0 	.word	0x200002e0
 80011e0:	0800d9b4 	.word	0x0800d9b4
 80011e4:	200002e4 	.word	0x200002e4

080011e8 <drop_good_potatos>:

void drop_good_potatos(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	Servo_SetAngle(good_potato_storage, 37);
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <drop_good_potatos+0x2c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001218 <drop_good_potatos+0x30>
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fedf 	bl	8003fb8 <Servo_SetAngle>
	HAL_Delay(2000);
 80011fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011fe:	f003 ffe5 	bl	80051cc <HAL_Delay>
	Servo_SetAngle(good_potato_storage, 90);
 8001202:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <drop_good_potatos+0x2c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800121c <drop_good_potatos+0x34>
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fed4 	bl	8003fb8 <Servo_SetAngle>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002e0 	.word	0x200002e0
 8001218:	42140000 	.word	0x42140000
 800121c:	42b40000 	.word	0x42b40000

08001220 <drop_bad_potatos>:

void drop_bad_potatos(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	Servo_SetAngle(bad_potato_storage, 145);
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <drop_bad_potatos+0x2c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001250 <drop_bad_potatos+0x30>
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fec3 	bl	8003fb8 <Servo_SetAngle>
	HAL_Delay(2000);
 8001232:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001236:	f003 ffc9 	bl	80051cc <HAL_Delay>
	Servo_SetAngle(bad_potato_storage, 90);
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <drop_bad_potatos+0x2c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001254 <drop_bad_potatos+0x34>
 8001242:	4618      	mov	r0, r3
 8001244:	f002 feb8 	bl	8003fb8 <Servo_SetAngle>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002e4 	.word	0x200002e4
 8001250:	43110000 	.word	0x43110000
 8001254:	42b40000 	.word	0x42b40000

08001258 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2120      	movs	r1, #32
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <Buzzer_On+0x14>)
 8001262:	f005 fa09 	bl	8006678 <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020000 	.word	0x40020000

08001270 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2120      	movs	r1, #32
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <Buzzer_Off+0x14>)
 800127a:	f005 f9fd 	bl	8006678 <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40020000 	.word	0x40020000

08001288 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8001290:	f7ff ffe2 	bl	8001258 <Buzzer_On>
    HAL_Delay(delay);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f003 ff99 	bl	80051cc <HAL_Delay>
    Buzzer_Off();
 800129a:	f7ff ffe9 	bl	8001270 <Buzzer_Off>
    HAL_Delay(delay);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f003 ff94 	bl	80051cc <HAL_Delay>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 80012b0:	f7ff ffd2 	bl	8001258 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80012b4:	2064      	movs	r0, #100	@ 0x64
 80012b6:	f003 ff89 	bl	80051cc <HAL_Delay>
    Buzzer_Off();
 80012ba:	f7ff ffd9 	bl	8001270 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80012be:	2064      	movs	r0, #100	@ 0x64
 80012c0:	f003 ff84 	bl	80051cc <HAL_Delay>

    Buzzer_On();
 80012c4:	f7ff ffc8 	bl	8001258 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80012c8:	2064      	movs	r0, #100	@ 0x64
 80012ca:	f003 ff7f 	bl	80051cc <HAL_Delay>
    Buzzer_Off();
 80012ce:	f7ff ffcf 	bl	8001270 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80012d2:	2064      	movs	r0, #100	@ 0x64
 80012d4:	f003 ff7a 	bl	80051cc <HAL_Delay>

    Buzzer_On();
 80012d8:	f7ff ffbe 	bl	8001258 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80012dc:	20c8      	movs	r0, #200	@ 0xc8
 80012de:	f003 ff75 	bl	80051cc <HAL_Delay>
    Buzzer_Off();
 80012e2:	f7ff ffc5 	bl	8001270 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80012e6:	2064      	movs	r0, #100	@ 0x64
 80012e8:	f003 ff70 	bl	80051cc <HAL_Delay>

    Buzzer_On();
 80012ec:	f7ff ffb4 	bl	8001258 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80012f0:	2064      	movs	r0, #100	@ 0x64
 80012f2:	f003 ff6b 	bl	80051cc <HAL_Delay>
    Buzzer_Off();
 80012f6:	f7ff ffbb 	bl	8001270 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80012fa:	2064      	movs	r0, #100	@ 0x64
 80012fc:	f003 ff66 	bl	80051cc <HAL_Delay>

    Buzzer_On();
 8001300:	f7ff ffaa 	bl	8001258 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001304:	20c8      	movs	r0, #200	@ 0xc8
 8001306:	f003 ff61 	bl	80051cc <HAL_Delay>
    Buzzer_Off();
 800130a:	f7ff ffb1 	bl	8001270 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <Controller_ResetControllers>:
}

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b090      	sub	sp, #64	@ 0x40
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80013b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80013bc:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 80013cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001580 <UpdateControllers+0x1d4>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013da:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 80013de:	f000 faa5 	bl	800192c <robot_fwd_change>
 80013e2:	eeb0 7a40 	vmov.f32	s14, s0
 80013e6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80013ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	edd3 7a02 	vldr	s15, [r3, #8]
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	4b58      	ldr	r3, [pc, #352]	@ (8001584 <UpdateControllers+0x1d8>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142a:	4b57      	ldr	r3, [pc, #348]	@ (8001588 <UpdateControllers+0x1dc>)
 800142c:	edd3 6a00 	vldr	s13, [r3]
 8001430:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 8001440:	4b4f      	ldr	r3, [pc, #316]	@ (8001580 <UpdateControllers+0x1d4>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed97 7a01 	vldr	s14, [r7, #4]
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 8001452:	f000 fa7d 	bl	8001950 <robot_rot_change>
 8001456:	eeb0 7a40 	vmov.f32	s14, s0
 800145a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800145e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edd3 7a01 	vldr	s15, [r3, #4]
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	ed93 7a01 	vldr	s14, [r3, #4]
 8001478:	edd7 7a00 	vldr	s15, [r7]
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	ed93 7a01 	vldr	s14, [r3, #4]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80014a8:	4b38      	ldr	r3, [pc, #224]	@ (800158c <UpdateControllers+0x1e0>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <UpdateControllers+0x1e4>)
 80014b4:	edd3 6a00 	vldr	s13, [r3]
 80014b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80014bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 80014c8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80014d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 80014d8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <UpdateControllers+0x1e8>)
 80014ea:	ed93 7a00 	vldr	s14, [r3]
 80014ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <UpdateControllers+0x1ec>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 8001504:	ed97 7a02 	vldr	s14, [r7, #8]
 8001508:	edd7 7a07 	vldr	s15, [r7, #28]
 800150c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001510:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 8001514:	ed97 7a02 	vldr	s14, [r7, #8]
 8001518:	edd7 7a07 	vldr	s15, [r7, #28]
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800152a:	2b00      	cmp	r3, #0
 800152c:	d017      	beq.n	800155e <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 800152e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001532:	f000 f833 	bl	800159c <leftFeedForward>
 8001536:	eeb0 7a40 	vmov.f32	s14, s0
 800153a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800153e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001542:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 8001546:	ed97 0a05 	vldr	s0, [r7, #20]
 800154a:	f000 f88d 	bl	8001668 <rightFeedForward>
 800154e:	eeb0 7a40 	vmov.f32	s14, s0
 8001552:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800155a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 8001568:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800156c:	f001 fde4 	bl	8003138 <setMotorLPWM>
        setMotorRPWM(right_output);
 8001570:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001574:	f001 fe26 	bl	80031c4 <setMotorRPWM>
    }


}
 8001578:	bf00      	nop
 800157a:	3740      	adds	r7, #64	@ 0x40
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	0800dd5c 	.word	0x0800dd5c
 8001584:	0800dd6c 	.word	0x0800dd6c
 8001588:	0800dd70 	.word	0x0800dd70
 800158c:	0800dd74 	.word	0x0800dd74
 8001590:	0800dd78 	.word	0x0800dd78
 8001594:	0800dd4c 	.word	0x0800dd4c
 8001598:	0800dd54 	.word	0x0800dd54

0800159c <leftFeedForward>:


float leftFeedForward(float speed) {
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <leftFeedForward+0xb8>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 80015b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	dd09      	ble.n	80015da <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <leftFeedForward+0xbc>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	edc7 7a05 	vstr	s15, [r7, #20]
 80015d8:	e00f      	b.n	80015fa <leftFeedForward+0x5e>
  } else if (speed < 0) {
 80015da:	edd7 7a01 	vldr	s15, [r7, #4]
 80015de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d508      	bpl.n	80015fa <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <leftFeedForward+0xbc>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80015f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f6:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <leftFeedForward+0xc0>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ed97 7a01 	vldr	s14, [r7, #4]
 8001604:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <leftFeedForward+0xc4>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <leftFeedForward+0xc0>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <leftFeedForward+0xc8>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ed97 7a04 	vldr	s14, [r7, #16]
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 800162e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001632:	edd7 7a03 	vldr	s15, [r7, #12]
 8001636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163a:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	ee07 3a90 	vmov	s15, r3
}
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	0800dd60 	.word	0x0800dd60
 8001658:	0800dd68 	.word	0x0800dd68
 800165c:	200002e8 	.word	0x200002e8
 8001660:	0800dd58 	.word	0x0800dd58
 8001664:	0800dd64 	.word	0x0800dd64

08001668 <rightFeedForward>:

float rightFeedForward(float speed) {
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <rightFeedForward+0xb8>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ed97 7a01 	vldr	s14, [r7, #4]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001684:	edd7 7a01 	vldr	s15, [r7, #4]
 8001688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	dd09      	ble.n	80016a6 <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 8001692:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <rightFeedForward+0xbc>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ed97 7a05 	vldr	s14, [r7, #20]
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	edc7 7a05 	vstr	s15, [r7, #20]
 80016a4:	e00f      	b.n	80016c6 <rightFeedForward+0x5e>
  } else if (speed < 0) {
 80016a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	d508      	bpl.n	80016c6 <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <rightFeedForward+0xbc>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80016be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c2:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <rightFeedForward+0xc0>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80016d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016d4:	4b15      	ldr	r3, [pc, #84]	@ (800172c <rightFeedForward+0xc4>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016de:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 80016e2:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <rightFeedForward+0xc0>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <rightFeedForward+0xc8>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80016f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f6:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 80016fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001706:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	ee07 3a90 	vmov	s15, r3
}
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	0800dd60 	.word	0x0800dd60
 8001724:	0800dd68 	.word	0x0800dd68
 8001728:	200002e8 	.word	0x200002e8
 800172c:	0800dd58 	.word	0x0800dd58
 8001730:	0800dd64 	.word	0x0800dd64

08001734 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <Delay_Init+0x38>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10e      	bne.n	8001762 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <Delay_Init+0x38>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4a08      	ldr	r2, [pc, #32]	@ (800176c <Delay_Init+0x38>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <Delay_Init+0x3c>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <Delay_Init+0x3c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <Delay_Init+0x3c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6013      	str	r3, [r2, #0]
    }
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000edf0 	.word	0xe000edf0
 8001770:	e0001000 	.word	0xe0001000

08001774 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <delayMicroseconds+0x38>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	22b4      	movs	r2, #180	@ 0xb4
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800178c:	bf00      	nop
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <delayMicroseconds+0x38>)
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f8      	bhi.n	800178e <delayMicroseconds+0x1a>
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e0001000 	.word	0xe0001000

080017b0 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 80017b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	b21b      	sxth	r3, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <getLeftEncoderCounts+0x14>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	b21b      	sxth	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40010000 	.word	0x40010000

080017e0 <resetEncodersinSystick>:
	previous_left_count = 0;
	previous_right_count = 0;

}

void resetEncodersinSystick() {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <resetEncodersinSystick+0x1c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 80017ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40010000 	.word	0x40010000

08001800 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 8001806:	f7ff ffdf 	bl	80017c8 <getLeftEncoderCounts>
 800180a:	4603      	mov	r3, r0
 800180c:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 800180e:	f7ff ffcf 	bl	80017b0 <getRightEncoderCounts>
 8001812:	4603      	mov	r3, r0
 8001814:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 8001816:	89fa      	ldrh	r2, [r7, #14]
 8001818:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <update_Encoder_Data+0x108>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	b29b      	uxth	r3, r3
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b39      	ldr	r3, [pc, #228]	@ (800190c <update_Encoder_Data+0x10c>)
 8001828:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 800182a:	4a37      	ldr	r2, [pc, #220]	@ (8001908 <update_Encoder_Data+0x108>)
 800182c:	89fb      	ldrh	r3, [r7, #14]
 800182e:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001830:	89ba      	ldrh	r2, [r7, #12]
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <update_Encoder_Data+0x110>)
 8001834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001838:	b29b      	uxth	r3, r3
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b29b      	uxth	r3, r3
 800183e:	b21a      	sxth	r2, r3
 8001840:	4b34      	ldr	r3, [pc, #208]	@ (8001914 <update_Encoder_Data+0x114>)
 8001842:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 8001844:	4a32      	ldr	r2, [pc, #200]	@ (8001910 <update_Encoder_Data+0x110>)
 8001846:	89bb      	ldrh	r3, [r7, #12]
 8001848:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 800184a:	4b30      	ldr	r3, [pc, #192]	@ (800190c <update_Encoder_Data+0x10c>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe87 	bl	8000564 <__aeabi_i2d>
 8001856:	a32a      	add	r3, pc, #168	@ (adr r3, 8001900 <update_Encoder_Data+0x100>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe feec 	bl	8000638 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f9de 	bl	8000c28 <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001870:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <update_Encoder_Data+0x114>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe74 	bl	8000564 <__aeabi_i2d>
 800187c:	a320      	add	r3, pc, #128	@ (adr r3, 8001900 <update_Encoder_Data+0x100>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fed9 	bl	8000638 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f9cb 	bl	8000c28 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 8001896:	ed97 7a01 	vldr	s14, [r7, #4]
 800189a:	edd7 7a02 	vldr	s15, [r7, #8]
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <update_Encoder_Data+0x118>)
 80018ac:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <update_Encoder_Data+0x11c>)
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <update_Encoder_Data+0x118>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <update_Encoder_Data+0x11c>)
 80018c2:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 80018c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <update_Encoder_Data+0x120>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <update_Encoder_Data+0x124>)
 80018de:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <update_Encoder_Data+0x128>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <update_Encoder_Data+0x124>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <update_Encoder_Data+0x128>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]


}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	f76b218d 	.word	0xf76b218d
 8001904:	3faf8e12 	.word	0x3faf8e12
 8001908:	200002f8 	.word	0x200002f8
 800190c:	200002f4 	.word	0x200002f4
 8001910:	200002fa 	.word	0x200002fa
 8001914:	200002f6 	.word	0x200002f6
 8001918:	200002fc 	.word	0x200002fc
 800191c:	200002ec 	.word	0x200002ec
 8001920:	0800dd50 	.word	0x0800dd50
 8001924:	20000300 	.word	0x20000300
 8001928:	200002f0 	.word	0x200002f0

0800192c <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <robot_fwd_change+0x20>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	607b      	str	r3, [r7, #4]
	return distance;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	ee07 3a90 	vmov	s15, r3
}
 800193e:	eeb0 0a67 	vmov.f32	s0, s15
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	200002fc 	.word	0x200002fc

08001950 <robot_rot_change>:

float robot_rot_change() {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <robot_rot_change+0x20>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	607b      	str	r3, [r7, #4]
	return distance;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	ee07 3a90 	vmov	s15, r3
}
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20000300 	.word	0x20000300

08001974 <analogReadIRs>:
	{70795.03, 5.63, 1.60},  //Left Back
	{93912.65, 13.94, -209.14},  //Right Back
	{78382.44, 9.55, -27.92},  //Right Front
};

void analogReadIRs(void){
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
	for (uint8_t i = 10; i < 15; i++)
 800197a:	230a      	movs	r3, #10
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	e00c      	b.n	800199a <analogReadIRs+0x26>
	    {
	        IRsensorValues[i] = AnalogMux_ReadChannel(i);
 8001980:	79fc      	ldrb	r4, [r7, #7]
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fbe1 	bl	800114c <AnalogMux_ReadChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <analogReadIRs+0x38>)
 8001990:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint8_t i = 10; i < 15; i++)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	3301      	adds	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b0e      	cmp	r3, #14
 800199e:	d9ef      	bls.n	8001980 <analogReadIRs+0xc>
	    }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000304 	.word	0x20000304

080019b0 <readRawIR>:


uint16_t readRawIR(IR ir)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	switch(ir){
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d81c      	bhi.n	80019fa <readRawIR+0x4a>
 80019c0:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <readRawIR+0x18>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019dd 	.word	0x080019dd
 80019cc:	080019e9 	.word	0x080019e9
 80019d0:	080019e3 	.word	0x080019e3
 80019d4:	080019ef 	.word	0x080019ef
 80019d8:	080019f5 	.word	0x080019f5
	case IR_FRONT:
		return IRsensorValues[10];
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <readRawIR+0x5c>)
 80019de:	8a9b      	ldrh	r3, [r3, #20]
 80019e0:	e00d      	b.n	80019fe <readRawIR+0x4e>
		break;
	case IR_LEFT_BACK:
		return IRsensorValues[11];
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <readRawIR+0x5c>)
 80019e4:	8adb      	ldrh	r3, [r3, #22]
 80019e6:	e00a      	b.n	80019fe <readRawIR+0x4e>
		break;
	case IR_LEFT_FORWARD:
		return IRsensorValues[12];
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <readRawIR+0x5c>)
 80019ea:	8b1b      	ldrh	r3, [r3, #24]
 80019ec:	e007      	b.n	80019fe <readRawIR+0x4e>
		break;
	case IR_RIGHT_BACK:
		return IRsensorValues[13];
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <readRawIR+0x5c>)
 80019f0:	8b5b      	ldrh	r3, [r3, #26]
 80019f2:	e004      	b.n	80019fe <readRawIR+0x4e>
		break;
	case IR_RIGHT_FORWARD:
		return IRsensorValues[14];
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <readRawIR+0x5c>)
 80019f6:	8b9b      	ldrh	r3, [r3, #28]
 80019f8:	e001      	b.n	80019fe <readRawIR+0x4e>
		break;
	default:
		return -1;
 80019fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		break;
	}
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000304 	.word	0x20000304

08001a10 <getIRDistance>:

uint16_t getIRDistance(IR ir, uint16_t raw){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	80bb      	strh	r3, [r7, #4]
	IR_Calibration_t *cal = &IR_calibration[ir];
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <getIRDistance+0x74>)
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
	return (int)round(((cal->a)/(raw - cal->c)) - cal->b);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 6a00 	vldr	s13, [r3]
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a58:	ee17 0a90 	vmov	r0, s15
 8001a5c:	f7fe fd94 	bl	8000588 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	ec43 2b10 	vmov	d0, r2, r3
 8001a68:	f00b ff46 	bl	800d8f8 <round>
 8001a6c:	ec53 2b10 	vmov	r2, r3, d0
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f890 	bl	8000b98 <__aeabi_d2iz>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b29b      	uxth	r3, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000000 	.word	0x20000000

08001a88 <TCS3472_SelectSensor>:


/* TCS3472 Color Sensor Functions */


void TCS3472_SelectSensor(uint8_t channel) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
    i2c_mux_select(&mux, channel);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <TCS3472_SelectSensor+0x24>)
 8001a98:	f003 f84f 	bl	8004b3a <i2c_mux_select>
    HAL_Delay(2); // Small delay for mux to stabilize
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f003 fb95 	bl	80051cc <HAL_Delay>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000003c 	.word	0x2000003c

08001ab0 <TCS3472_Init>:



/* Initialize TCS3472 sensor */
uint8_t TCS3472_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
    /* Check if sensor is responding */
    uint8_t id = TCS3472_GetID();
 8001ab6:	f000 f81a 	bl	8001aee <TCS3472_GetID>
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
    if (id != 0x44 && id != 0x4D) {
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2b44      	cmp	r3, #68	@ 0x44
 8001ac2:	d004      	beq.n	8001ace <TCS3472_Init+0x1e>
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b4d      	cmp	r3, #77	@ 0x4d
 8001ac8:	d001      	beq.n	8001ace <TCS3472_Init+0x1e>
        return HAL_ERROR;  // Sensor not detected
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00b      	b.n	8001ae6 <TCS3472_Init+0x36>
    }

    /* Power ON the device */
    TCS3472_Enable();
 8001ace:	f000 f816 	bl	8001afe <TCS3472_Enable>

    /* Set integration time (1 = 2.4ms, 255 = 614.4ms) */
    TCS3472_SetIntegrationTime(0x00);  // Minimum integration time (2.4ms) for fast readings
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f822 	bl	8001b1c <TCS3472_SetIntegrationTime>

    /* Set gain (0 = 1x, 1 = 4x, 2 = 16x, 3 = 60x) */
    TCS3472_SetGain(3);  // 60x gain for better contrast in color detection
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f82d 	bl	8001b38 <TCS3472_SetGain>

    /* Wait for a moment for the sensor to stabilize */
    HAL_Delay(50);
 8001ade:	2032      	movs	r0, #50	@ 0x32
 8001ae0:	f003 fb74 	bl	80051cc <HAL_Delay>

    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <TCS3472_GetID>:

/* Get device ID */
uint8_t TCS3472_GetID(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
    return TCS3472_Read8(TCS3472_REG_ID);
 8001af2:	2012      	movs	r0, #18
 8001af4:	f000 fb3c 	bl	8002170 <TCS3472_Read8>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}

08001afe <TCS3472_Enable>:

/* Enable the device */
void TCS3472_Enable(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
    /* Power ON */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON);
 8001b02:	2101      	movs	r1, #1
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 fb15 	bl	8002134 <TCS3472_Write>
    HAL_Delay(3);  // Wait 2.4ms for power-up
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f003 fb5e 	bl	80051cc <HAL_Delay>

    /* Enable RGBC sensor */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN);
 8001b10:	2103      	movs	r1, #3
 8001b12:	2000      	movs	r0, #0
 8001b14:	f000 fb0e 	bl	8002134 <TCS3472_Write>
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <TCS3472_SetIntegrationTime>:
    TCS3472_Write(TCS3472_REG_ENABLE, val & ~(TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN));
}

/* Set integration time */
void TCS3472_SetIntegrationTime(uint8_t time)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
    /* Write integration time to the register */
    TCS3472_Write(TCS3472_REG_ATIME, time);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f000 fb02 	bl	8002134 <TCS3472_Write>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <TCS3472_SetGain>:

/* Set gain */
void TCS3472_SetGain(uint8_t gain)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
    /* Check if gain is valid (0-3) */
    if (gain > 3) gain = 3;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d901      	bls.n	8001b4c <TCS3472_SetGain+0x14>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	71fb      	strb	r3, [r7, #7]

    /* Write gain to the register */
    TCS3472_Write(TCS3472_REG_CONTROL, gain);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	200f      	movs	r0, #15
 8001b52:	f000 faef 	bl	8002134 <TCS3472_Write>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <TCS3472_GetRGBC>:

/* Get RGB and Clear values */
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	603b      	str	r3, [r7, #0]
    /* Wait for data to be valid */
    while (!(TCS3472_Read8(TCS3472_REG_STATUS) & 0x01));
 8001b6c:	bf00      	nop
 8001b6e:	2013      	movs	r0, #19
 8001b70:	f000 fafe 	bl	8002170 <TCS3472_Read8>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f7      	beq.n	8001b6e <TCS3472_GetRGBC+0x10>

    /* Read all values */
    *c = TCS3472_Read16(TCS3472_REG_CDATAL);
 8001b7e:	2014      	movs	r0, #20
 8001b80:	f000 fb1a 	bl	80021b8 <TCS3472_Read16>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	801a      	strh	r2, [r3, #0]
    *r = TCS3472_Read16(TCS3472_REG_RDATAL);
 8001b8c:	2016      	movs	r0, #22
 8001b8e:	f000 fb13 	bl	80021b8 <TCS3472_Read16>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	801a      	strh	r2, [r3, #0]
    *g = TCS3472_Read16(TCS3472_REG_GDATAL);
 8001b9a:	2018      	movs	r0, #24
 8001b9c:	f000 fb0c 	bl	80021b8 <TCS3472_Read16>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	801a      	strh	r2, [r3, #0]
    *b = TCS3472_Read16(TCS3472_REG_BDATAL);
 8001ba8:	201a      	movs	r0, #26
 8001baa:	f000 fb05 	bl	80021b8 <TCS3472_Read16>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	801a      	strh	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <TCS3472_DetectLineColor>:

/* Detect line color based on RGB values */
uint8_t TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
 8001bc0:	b490      	push	{r4, r7}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80bb      	strh	r3, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	803b      	strh	r3, [r7, #0]
    /* If overall brightness is very low, it's black (background) */
    if (c < color_config.black_threshold) {
 8001bde:	4b2e      	ldr	r3, [pc, #184]	@ (8001c98 <TCS3472_DetectLineColor+0xd8>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	883a      	ldrh	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d201      	bcs.n	8001bec <TCS3472_DetectLineColor+0x2c>
        return COLOR_BLACK;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e04f      	b.n	8001c8c <TCS3472_DetectLineColor+0xcc>
    }

    /* If overall brightness is high, check if it's white or green */
    if (c > color_config.white_threshold) {
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <TCS3472_DetectLineColor+0xd8>)
 8001bee:	885b      	ldrh	r3, [r3, #2]
 8001bf0:	883a      	ldrh	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d949      	bls.n	8001c8a <TCS3472_DetectLineColor+0xca>
        /* Calculate green-to-red ratio (multiplied by 100 to avoid floating point) */
        uint16_t g_to_r_ratio = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	81fb      	strh	r3, [r7, #14]

        /* Avoid division by zero */
        if (r > 10) {
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	2b0a      	cmp	r3, #10
 8001bfe:	d907      	bls.n	8001c10 <TCS3472_DetectLineColor+0x50>
            g_to_r_ratio = (g * 100) / r;
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	2264      	movs	r2, #100	@ 0x64
 8001c04:	fb03 f202 	mul.w	r2, r3, r2
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c0e:	81fb      	strh	r3, [r7, #14]
        }

        /* If green is significantly higher than red, it's green */
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <TCS3472_DetectLineColor+0xd8>)
 8001c12:	889b      	ldrh	r3, [r3, #4]
 8001c14:	89fa      	ldrh	r2, [r7, #14]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d30e      	bcc.n	8001c38 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <TCS3472_DetectLineColor+0xd8>)
 8001c1c:	88db      	ldrh	r3, [r3, #6]
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 8001c1e:	89fa      	ldrh	r2, [r7, #14]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d809      	bhi.n	8001c38 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 8001c24:	88ba      	ldrh	r2, [r7, #4]
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d905      	bls.n	8001c38 <TCS3472_DetectLineColor+0x78>
            g > r && g > b) {
 8001c2c:	88ba      	ldrh	r2, [r7, #4]
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d901      	bls.n	8001c38 <TCS3472_DetectLineColor+0x78>
            return COLOR_GREEN;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e029      	b.n	8001c8c <TCS3472_DetectLineColor+0xcc>
        }

        /* If all colors are relatively balanced and bright, it's white */
        if (r > 500 && g > 500 && b > 500 &&
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c3e:	d924      	bls.n	8001c8a <TCS3472_DetectLineColor+0xca>
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c46:	d920      	bls.n	8001c8a <TCS3472_DetectLineColor+0xca>
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c4e:	d91c      	bls.n	8001c8a <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2264      	movs	r2, #100	@ 0x64
 8001c54:	fb03 f202 	mul.w	r2, r3, r2
 8001c58:	883b      	ldrh	r3, [r7, #0]
 8001c5a:	fb92 f3f3 	sdiv	r3, r2, r3
        if (r > 500 && g > 500 && b > 500 &&
 8001c5e:	2b14      	cmp	r3, #20
 8001c60:	dd13      	ble.n	8001c8a <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 8001c62:	88bb      	ldrh	r3, [r7, #4]
 8001c64:	2264      	movs	r2, #100	@ 0x64
 8001c66:	fb03 f202 	mul.w	r2, r3, r2
 8001c6a:	883b      	ldrh	r3, [r7, #0]
 8001c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c70:	2b14      	cmp	r3, #20
 8001c72:	dd0a      	ble.n	8001c8a <TCS3472_DetectLineColor+0xca>
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	2264      	movs	r2, #100	@ 0x64
 8001c78:	fb03 f202 	mul.w	r2, r3, r2
 8001c7c:	883b      	ldrh	r3, [r7, #0]
 8001c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c82:	2b14      	cmp	r3, #20
 8001c84:	dd01      	ble.n	8001c8a <TCS3472_DetectLineColor+0xca>
            return COLOR_WHITE;
 8001c86:	2302      	movs	r3, #2
 8001c88:	e000      	b.n	8001c8c <TCS3472_DetectLineColor+0xcc>
        }
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc90      	pop	{r4, r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000048 	.word	0x20000048
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <TCS3472_CalibrateColors>:

/* Calibration function - to be called during setup or when a button is pressed */
void TCS3472_CalibrateColors(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0b2      	sub	sp, #200	@ 0xc8
 8001ca4:	af00      	add	r7, sp, #0
    char buffer[100];
    uint16_t r, g, b, c;
    uint16_t black_readings[5] = {0};
 8001ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	811a      	strh	r2, [r3, #8]
    uint16_t white_readings[5] = {0};
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	811a      	strh	r2, [r3, #8]
    uint16_t green_readings_r[5] = {0};
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	811a      	strh	r2, [r3, #8]
    uint16_t green_readings_g[5] = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	811a      	strh	r2, [r3, #8]

    /* Send calibration instructions */
    sprintf(buffer, "Starting calibration sequence...\r\n");
 8001cd4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cd8:	49b9      	ldr	r1, [pc, #740]	@ (8001fc0 <TCS3472_CalibrateColors+0x320>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f009 fc70 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ce0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fae3 	bl	80002b0 <strlen>
 8001cea:	4603      	mov	r3, r0
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	48b3      	ldr	r0, [pc, #716]	@ (8001fc4 <TCS3472_CalibrateColors+0x324>)
 8001cf8:	f007 ff62 	bl	8009bc0 <HAL_UART_Transmit>

    /* 1. Calibrate BLACK background */
    sprintf(buffer, "Place sensor over BLACK surface and press USER button (PA0)...\r\n");
 8001cfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d00:	49b1      	ldr	r1, [pc, #708]	@ (8001fc8 <TCS3472_CalibrateColors+0x328>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f009 fc5c 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe facf 	bl	80002b0 <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	48a9      	ldr	r0, [pc, #676]	@ (8001fc4 <TCS3472_CalibrateColors+0x324>)
 8001d20:	f007 ff4e 	bl	8009bc0 <HAL_UART_Transmit>

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce
 8001d24:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001d28:	f003 fa50 	bl	80051cc <HAL_Delay>

    /* Take 5 readings of black background */
    for (int i = 0; i < 5; i++) {
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001d32:	e019      	b.n	8001d68 <TCS3472_CalibrateColors+0xc8>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 8001d34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d38:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 8001d3c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001d40:	f107 003a 	add.w	r0, r7, #58	@ 0x3a
 8001d44:	f7ff ff0b 	bl	8001b5e <TCS3472_GetRGBC>
        black_readings[i] = c;
 8001d48:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	33c8      	adds	r3, #200	@ 0xc8
 8001d52:	443b      	add	r3, r7
 8001d54:	f823 2ca0 	strh.w	r2, [r3, #-160]
        HAL_Delay(50);
 8001d58:	2032      	movs	r0, #50	@ 0x32
 8001d5a:	f003 fa37 	bl	80051cc <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d62:	3301      	adds	r3, #1
 8001d64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	dde1      	ble.n	8001d34 <TCS3472_CalibrateColors+0x94>
    }

    /* Calculate average */
    uint32_t black_sum = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (int i = 0; i < 5; i++) {
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d7c:	e011      	b.n	8001da2 <TCS3472_CalibrateColors+0x102>
        black_sum += black_readings[i];
 8001d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	33c8      	adds	r3, #200	@ 0xc8
 8001d86:	443b      	add	r3, r7
 8001d88:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d92:	4413      	add	r3, r2
 8001d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (int i = 0; i < 5; i++) {
 8001d98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001da2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	dde9      	ble.n	8001d7e <TCS3472_CalibrateColors+0xde>
    }
    color_config.black_threshold = (black_sum / 5) * 1.5; // 50% margin
 8001daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dae:	4a87      	ldr	r2, [pc, #540]	@ (8001fcc <TCS3472_CalibrateColors+0x32c>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbc4 	bl	8000544 <__aeabi_ui2d>
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b83      	ldr	r3, [pc, #524]	@ (8001fd0 <TCS3472_CalibrateColors+0x330>)
 8001dc2:	f7fe fc39 	bl	8000638 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe ff0b 	bl	8000be8 <__aeabi_d2uiz>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fd4 <TCS3472_CalibrateColors+0x334>)
 8001dd8:	801a      	strh	r2, [r3, #0]

    sprintf(buffer, "BLACK calibrated: threshold = %d\r\n", color_config.black_threshold);
 8001dda:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd4 <TCS3472_CalibrateColors+0x334>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001de4:	497c      	ldr	r1, [pc, #496]	@ (8001fd8 <TCS3472_CalibrateColors+0x338>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f009 fbea 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001dec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fa5d 	bl	80002b0 <strlen>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	4870      	ldr	r0, [pc, #448]	@ (8001fc4 <TCS3472_CalibrateColors+0x324>)
 8001e04:	f007 fedc 	bl	8009bc0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001e08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e0c:	f003 f9de 	bl	80051cc <HAL_Delay>

    /* 2. Calibrate WHITE line */
    sprintf(buffer, "Place sensor over WHITE line and press USER button (PA0)...\r\n");
 8001e10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e14:	4971      	ldr	r1, [pc, #452]	@ (8001fdc <TCS3472_CalibrateColors+0x33c>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f009 fbd2 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fa45 	bl	80002b0 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	4864      	ldr	r0, [pc, #400]	@ (8001fc4 <TCS3472_CalibrateColors+0x324>)
 8001e34:	f007 fec4 	bl	8009bc0 <HAL_UART_Transmit>

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce
 8001e38:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e3c:	f003 f9c6 	bl	80051cc <HAL_Delay>

    /* Take 5 readings of white line */
    for (int i = 0; i < 5; i++) {
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e46:	e019      	b.n	8001e7c <TCS3472_CalibrateColors+0x1dc>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 8001e48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e4c:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 8001e50:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001e54:	f107 003a 	add.w	r0, r7, #58	@ 0x3a
 8001e58:	f7ff fe81 	bl	8001b5e <TCS3472_GetRGBC>
        white_readings[i] = c;
 8001e5c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	33c8      	adds	r3, #200	@ 0xc8
 8001e66:	443b      	add	r3, r7
 8001e68:	f823 2cac 	strh.w	r2, [r3, #-172]
        HAL_Delay(50);
 8001e6c:	2032      	movs	r0, #50	@ 0x32
 8001e6e:	f003 f9ad 	bl	80051cc <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001e72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e76:	3301      	adds	r3, #1
 8001e78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	dde1      	ble.n	8001e48 <TCS3472_CalibrateColors+0x1a8>
    }

    /* Calculate average */
    uint32_t white_sum = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (int i = 0; i < 5; i++) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e90:	e011      	b.n	8001eb6 <TCS3472_CalibrateColors+0x216>
        white_sum += white_readings[i];
 8001e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	33c8      	adds	r3, #200	@ 0xc8
 8001e9a:	443b      	add	r3, r7
 8001e9c:	f833 3cac 	ldrh.w	r3, [r3, #-172]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (int i = 0; i < 5; i++) {
 8001eac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	dde9      	ble.n	8001e92 <TCS3472_CalibrateColors+0x1f2>
    }
    color_config.white_threshold = (white_sum / 5) * 0.8; // 20% margin
 8001ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ec2:	4a42      	ldr	r2, [pc, #264]	@ (8001fcc <TCS3472_CalibrateColors+0x32c>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fb3a 	bl	8000544 <__aeabi_ui2d>
 8001ed0:	a339      	add	r3, pc, #228	@ (adr r3, 8001fb8 <TCS3472_CalibrateColors+0x318>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fbaf 	bl	8000638 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fe81 	bl	8000be8 <__aeabi_d2uiz>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd4 <TCS3472_CalibrateColors+0x334>)
 8001eec:	805a      	strh	r2, [r3, #2]

    sprintf(buffer, "WHITE calibrated: threshold = %d\r\n", color_config.white_threshold);
 8001eee:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <TCS3472_CalibrateColors+0x334>)
 8001ef0:	885b      	ldrh	r3, [r3, #2]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ef8:	4939      	ldr	r1, [pc, #228]	@ (8001fe0 <TCS3472_CalibrateColors+0x340>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f009 fb60 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe f9d3 	bl	80002b0 <strlen>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	482b      	ldr	r0, [pc, #172]	@ (8001fc4 <TCS3472_CalibrateColors+0x324>)
 8001f18:	f007 fe52 	bl	8009bc0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001f1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f20:	f003 f954 	bl	80051cc <HAL_Delay>

    /* 3. Calibrate GREEN line */
    sprintf(buffer, "Place sensor over GREEN line and press USER button (PA0)...\r\n");
 8001f24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f28:	492e      	ldr	r1, [pc, #184]	@ (8001fe4 <TCS3472_CalibrateColors+0x344>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f009 fb48 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe f9bb 	bl	80002b0 <strlen>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	481f      	ldr	r0, [pc, #124]	@ (8001fc4 <TCS3472_CalibrateColors+0x324>)
 8001f48:	f007 fe3a 	bl	8009bc0 <HAL_UART_Transmit>

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce
 8001f4c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f50:	f003 f93c 	bl	80051cc <HAL_Delay>

    /* Take 5 readings of green line */
    for (int i = 0; i < 5; i++) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f5a:	e021      	b.n	8001fa0 <TCS3472_CalibrateColors+0x300>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 8001f5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f60:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 8001f64:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001f68:	f107 003a 	add.w	r0, r7, #58	@ 0x3a
 8001f6c:	f7ff fdf7 	bl	8001b5e <TCS3472_GetRGBC>
        green_readings_r[i] = r;
 8001f70:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8001f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	33c8      	adds	r3, #200	@ 0xc8
 8001f7a:	443b      	add	r3, r7
 8001f7c:	f823 2cb8 	strh.w	r2, [r3, #-184]
        green_readings_g[i] = g;
 8001f80:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	33c8      	adds	r3, #200	@ 0xc8
 8001f8a:	443b      	add	r3, r7
 8001f8c:	f823 2cc4 	strh.w	r2, [r3, #-196]
        HAL_Delay(50);
 8001f90:	2032      	movs	r0, #50	@ 0x32
 8001f92:	f003 f91b 	bl	80051cc <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	ddd9      	ble.n	8001f5c <TCS3472_CalibrateColors+0x2bc>
    }

    /* Calculate average G/R ratio */
    uint32_t g_r_ratio_sum = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (int i = 0; i < 5; i++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001fb4:	e040      	b.n	8002038 <TCS3472_CalibrateColors+0x398>
 8001fb6:	bf00      	nop
 8001fb8:	9999999a 	.word	0x9999999a
 8001fbc:	3fe99999 	.word	0x3fe99999
 8001fc0:	0800d9c8 	.word	0x0800d9c8
 8001fc4:	20000534 	.word	0x20000534
 8001fc8:	0800d9ec 	.word	0x0800d9ec
 8001fcc:	cccccccd 	.word	0xcccccccd
 8001fd0:	3ff80000 	.word	0x3ff80000
 8001fd4:	20000048 	.word	0x20000048
 8001fd8:	0800da30 	.word	0x0800da30
 8001fdc:	0800da54 	.word	0x0800da54
 8001fe0:	0800da94 	.word	0x0800da94
 8001fe4:	0800dab8 	.word	0x0800dab8
        if (green_readings_r[i] > 10) { // Avoid division by zero
 8001fe8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	33c8      	adds	r3, #200	@ 0xc8
 8001ff0:	443b      	add	r3, r7
 8001ff2:	f833 3cb8 	ldrh.w	r3, [r3, #-184]
 8001ff6:	2b0a      	cmp	r3, #10
 8001ff8:	d919      	bls.n	800202e <TCS3472_CalibrateColors+0x38e>
            g_r_ratio_sum += (green_readings_g[i] * 100) / green_readings_r[i];
 8001ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	33c8      	adds	r3, #200	@ 0xc8
 8002002:	443b      	add	r3, r7
 8002004:	f833 3cc4 	ldrh.w	r3, [r3, #-196]
 8002008:	461a      	mov	r2, r3
 800200a:	2364      	movs	r3, #100	@ 0x64
 800200c:	fb03 f202 	mul.w	r2, r3, r2
 8002010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	33c8      	adds	r3, #200	@ 0xc8
 8002018:	443b      	add	r3, r7
 800201a:	f833 3cb8 	ldrh.w	r3, [r3, #-184]
 800201e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002022:	461a      	mov	r2, r3
 8002024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002028:	4413      	add	r3, r2
 800202a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (int i = 0; i < 5; i++) {
 800202e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002032:	3301      	adds	r3, #1
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002038:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800203c:	2b04      	cmp	r3, #4
 800203e:	ddd3      	ble.n	8001fe8 <TCS3472_CalibrateColors+0x348>
        }
    }
    uint16_t avg_g_r_ratio = g_r_ratio_sum / 5;
 8002040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002044:	4a36      	ldr	r2, [pc, #216]	@ (8002120 <TCS3472_CalibrateColors+0x480>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    /* Set min and max with 10% margin on each side */
    color_config.green_ratio_min = avg_g_r_ratio * 0.9;
 8002050:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa85 	bl	8000564 <__aeabi_i2d>
 800205a:	a32d      	add	r3, pc, #180	@ (adr r3, 8002110 <TCS3472_CalibrateColors+0x470>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe faea 	bl	8000638 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fdbc 	bl	8000be8 <__aeabi_d2uiz>
 8002070:	4603      	mov	r3, r0
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <TCS3472_CalibrateColors+0x484>)
 8002076:	809a      	strh	r2, [r3, #4]
    color_config.green_ratio_max = avg_g_r_ratio * 1.1;
 8002078:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa71 	bl	8000564 <__aeabi_i2d>
 8002082:	a325      	add	r3, pc, #148	@ (adr r3, 8002118 <TCS3472_CalibrateColors+0x478>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fad6 	bl	8000638 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fda8 	bl	8000be8 <__aeabi_d2uiz>
 8002098:	4603      	mov	r3, r0
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <TCS3472_CalibrateColors+0x484>)
 800209e:	80da      	strh	r2, [r3, #6]

    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
            color_config.green_ratio_min, color_config.green_ratio_max);
 80020a0:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <TCS3472_CalibrateColors+0x484>)
 80020a2:	889b      	ldrh	r3, [r3, #4]
    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
 80020a4:	461a      	mov	r2, r3
            color_config.green_ratio_min, color_config.green_ratio_max);
 80020a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <TCS3472_CalibrateColors+0x484>)
 80020a8:	88db      	ldrh	r3, [r3, #6]
    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
 80020aa:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80020ae:	491e      	ldr	r1, [pc, #120]	@ (8002128 <TCS3472_CalibrateColors+0x488>)
 80020b0:	f009 fa86 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80020b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f8f9 	bl	80002b0 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	4818      	ldr	r0, [pc, #96]	@ (800212c <TCS3472_CalibrateColors+0x48c>)
 80020cc:	f007 fd78 	bl	8009bc0 <HAL_UART_Transmit>

    /* Mark as calibrated */
    color_config.is_calibrated = 1;
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <TCS3472_CalibrateColors+0x484>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	721a      	strb	r2, [r3, #8]

    sprintf(buffer, "Calibration complete!\r\n");
 80020d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80020da:	4915      	ldr	r1, [pc, #84]	@ (8002130 <TCS3472_CalibrateColors+0x490>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f009 fa6f 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80020e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f8e2 	bl	80002b0 <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <TCS3472_CalibrateColors+0x48c>)
 80020fa:	f007 fd61 	bl	8009bc0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 80020fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002102:	f003 f863 	bl	80051cc <HAL_Delay>
}
 8002106:	bf00      	nop
 8002108:	37c8      	adds	r7, #200	@ 0xc8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	cccccccd 	.word	0xcccccccd
 8002114:	3feccccc 	.word	0x3feccccc
 8002118:	9999999a 	.word	0x9999999a
 800211c:	3ff19999 	.word	0x3ff19999
 8002120:	cccccccd 	.word	0xcccccccd
 8002124:	20000048 	.word	0x20000048
 8002128:	0800daf8 	.word	0x0800daf8
 800212c:	20000534 	.word	0x20000534
 8002130:	0800db24 	.word	0x0800db24

08002134 <TCS3472_Write>:

/* Write a byte to the TCS3472 register */
void TCS3472_Write(uint8_t reg, uint8_t value)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	4603      	mov	r3, r0
 800213c:	460a      	mov	r2, r1
 800213e:	71fb      	strb	r3, [r7, #7]
 8002140:	4613      	mov	r3, r2
 8002142:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = TCS3472_COMMAND_BIT | reg;
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800214a:	b2db      	uxtb	r3, r3
 800214c:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 800214e:	79bb      	ldrb	r3, [r7, #6]
 8002150:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, data, 2, 100);
 8002152:	f107 020c 	add.w	r2, r7, #12
 8002156:	2364      	movs	r3, #100	@ 0x64
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2302      	movs	r3, #2
 800215c:	2152      	movs	r1, #82	@ 0x52
 800215e:	4803      	ldr	r0, [pc, #12]	@ (800216c <TCS3472_Write+0x38>)
 8002160:	f004 fc0c 	bl	800697c <HAL_I2C_Master_Transmit>
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000036c 	.word	0x2000036c

08002170 <TCS3472_Read8>:

/* Read 8-bit value from TCS3472 register */
uint8_t TCS3472_Read8(uint8_t reg)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002180:	b2db      	uxtb	r3, r3
 8002182:	73fb      	strb	r3, [r7, #15]
    uint8_t value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 8002184:	f107 020f 	add.w	r2, r7, #15
 8002188:	2364      	movs	r3, #100	@ 0x64
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	2152      	movs	r1, #82	@ 0x52
 8002190:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <TCS3472_Read8+0x44>)
 8002192:	f004 fbf3 	bl	800697c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, &value, 1, 100);
 8002196:	f107 020e 	add.w	r2, r7, #14
 800219a:	2364      	movs	r3, #100	@ 0x64
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	2152      	movs	r1, #82	@ 0x52
 80021a2:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <TCS3472_Read8+0x44>)
 80021a4:	f004 fce8 	bl	8006b78 <HAL_I2C_Master_Receive>

    return value;
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000036c 	.word	0x2000036c

080021b8 <TCS3472_Read16>:

/* Read 16-bit value from TCS3472 register */
uint16_t TCS3472_Read16(uint8_t reg)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af02      	add	r7, sp, #8
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 80021cc:	f107 020f 	add.w	r2, r7, #15
 80021d0:	2364      	movs	r3, #100	@ 0x64
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	2152      	movs	r1, #82	@ 0x52
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <TCS3472_Read16+0x54>)
 80021da:	f004 fbcf 	bl	800697c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, data, 2, 100);
 80021de:	f107 020c 	add.w	r2, r7, #12
 80021e2:	2364      	movs	r3, #100	@ 0x64
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2302      	movs	r3, #2
 80021e8:	2152      	movs	r1, #82	@ 0x52
 80021ea:	4808      	ldr	r0, [pc, #32]	@ (800220c <TCS3472_Read16+0x54>)
 80021ec:	f004 fcc4 	bl	8006b78 <HAL_I2C_Master_Receive>

    return (data[1] << 8) | data[0];
 80021f0:	7b7b      	ldrb	r3, [r7, #13]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	7b3b      	ldrb	r3, [r7, #12]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	b29b      	uxth	r3, r3
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000036c 	.word	0x2000036c

08002210 <TCS3472_DetectObjectColor>:

/* This function is called when a HAL error occurs */


/* Detect object color based on RGB values */
uint8_t TCS3472_DetectObjectColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c) {
 8002210:	b490      	push	{r4, r7}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4623      	mov	r3, r4
 8002220:	80fb      	strh	r3, [r7, #6]
 8002222:	4603      	mov	r3, r0
 8002224:	80bb      	strh	r3, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]
 800222a:	4613      	mov	r3, r2
 800222c:	803b      	strh	r3, [r7, #0]
    /* Avoid division by zero */
    if (r < 10) r = 10;
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b09      	cmp	r3, #9
 8002232:	d801      	bhi.n	8002238 <TCS3472_DetectObjectColor+0x28>
 8002234:	230a      	movs	r3, #10
 8002236:	80fb      	strh	r3, [r7, #6]
    if (g < 10) g = 10;
 8002238:	88bb      	ldrh	r3, [r7, #4]
 800223a:	2b09      	cmp	r3, #9
 800223c:	d801      	bhi.n	8002242 <TCS3472_DetectObjectColor+0x32>
 800223e:	230a      	movs	r3, #10
 8002240:	80bb      	strh	r3, [r7, #4]
    if (b < 10) b = 10;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	2b09      	cmp	r3, #9
 8002246:	d801      	bhi.n	800224c <TCS3472_DetectObjectColor+0x3c>
 8002248:	230a      	movs	r3, #10
 800224a:	807b      	strh	r3, [r7, #2]

    /* Calculate ratios (multiplied by 100 to avoid floating point) */
    uint16_t r_to_g_ratio = (r * 100) / g;
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	2264      	movs	r2, #100	@ 0x64
 8002250:	fb03 f202 	mul.w	r2, r3, r2
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	fb92 f3f3 	sdiv	r3, r2, r3
 800225a:	82bb      	strh	r3, [r7, #20]
    uint16_t r_to_b_ratio = (r * 100) / b;
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	2264      	movs	r2, #100	@ 0x64
 8002260:	fb03 f202 	mul.w	r2, r3, r2
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	fb92 f3f3 	sdiv	r3, r2, r3
 800226a:	827b      	strh	r3, [r7, #18]
    uint16_t g_to_b_ratio = (g * 100) / b;
 800226c:	88bb      	ldrh	r3, [r7, #4]
 800226e:	2264      	movs	r2, #100	@ 0x64
 8002270:	fb03 f202 	mul.w	r2, r3, r2
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	fb92 f3f3 	sdiv	r3, r2, r3
 800227a:	823b      	strh	r3, [r7, #16]
    uint16_t b_to_r_ratio = (b * 100) / r;
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	2264      	movs	r2, #100	@ 0x64
 8002280:	fb03 f202 	mul.w	r2, r3, r2
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	fb92 f3f3 	sdiv	r3, r2, r3
 800228a:	81fb      	strh	r3, [r7, #14]
    uint16_t b_to_g_ratio = (b * 100) / g;
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	2264      	movs	r2, #100	@ 0x64
 8002290:	fb03 f202 	mul.w	r2, r3, r2
 8002294:	88bb      	ldrh	r3, [r7, #4]
 8002296:	fb92 f3f3 	sdiv	r3, r2, r3
 800229a:	81bb      	strh	r3, [r7, #12]

    /* Calculate how close R and G are to each other as a percentage */
    uint16_t r_g_similarity;
    if (r > g) {
 800229c:	88fa      	ldrh	r2, [r7, #6]
 800229e:	88bb      	ldrh	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d908      	bls.n	80022b6 <TCS3472_DetectObjectColor+0xa6>
        r_g_similarity = (g * 100) / r;
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	2264      	movs	r2, #100	@ 0x64
 80022a8:	fb03 f202 	mul.w	r2, r3, r2
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80022b2:	82fb      	strh	r3, [r7, #22]
 80022b4:	e007      	b.n	80022c6 <TCS3472_DetectObjectColor+0xb6>
    } else {
        r_g_similarity = (r * 100) / g;
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2264      	movs	r2, #100	@ 0x64
 80022ba:	fb03 f202 	mul.w	r2, r3, r2
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80022c4:	82fb      	strh	r3, [r7, #22]
            r_to_g_ratio, r_to_b_ratio, g_to_b_ratio, b_to_r_ratio, b_to_g_ratio, r_g_similarity);
    HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
    */

    /* White detection */
    if (c > object_color_config.white_min_c &&
 80022c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	883a      	ldrh	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d91e      	bls.n	800230e <TCS3472_DetectObjectColor+0xfe>
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d6:	d91a      	bls.n	800230e <TCS3472_DetectObjectColor+0xfe>
        r > 1000 && g > 1000 && b > 1000 &&
 80022d8:	88bb      	ldrh	r3, [r7, #4]
 80022da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022de:	d916      	bls.n	800230e <TCS3472_DetectObjectColor+0xfe>
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022e6:	d912      	bls.n	800230e <TCS3472_DetectObjectColor+0xfe>
 80022e8:	8afb      	ldrh	r3, [r7, #22]
 80022ea:	2b50      	cmp	r3, #80	@ 0x50
 80022ec:	d90f      	bls.n	800230e <TCS3472_DetectObjectColor+0xfe>
        r_g_similarity > 80 && /* R and G within 20% of each other */
        (b * 100) / ((r + g) / 2) > 80) { /* B is at least 80% of average of R and G */
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	2264      	movs	r2, #100	@ 0x64
 80022f2:	fb03 f202 	mul.w	r2, r3, r2
 80022f6:	88f9      	ldrh	r1, [r7, #6]
 80022f8:	88bb      	ldrh	r3, [r7, #4]
 80022fa:	440b      	add	r3, r1
 80022fc:	0fd9      	lsrs	r1, r3, #31
 80022fe:	440b      	add	r3, r1
 8002300:	105b      	asrs	r3, r3, #1
 8002302:	fb92 f3f3 	sdiv	r3, r2, r3
        r_g_similarity > 80 && /* R and G within 20% of each other */
 8002306:	2b50      	cmp	r3, #80	@ 0x50
 8002308:	dd01      	ble.n	800230e <TCS3472_DetectObjectColor+0xfe>
        return COLOR_WHITE;
 800230a:	2302      	movs	r3, #2
 800230c:	e02a      	b.n	8002364 <TCS3472_DetectObjectColor+0x154>
    }

    /* Red detection */
    if (r_to_g_ratio > object_color_config.red_min_ratio_r_to_g &&
 800230e:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 8002310:	885b      	ldrh	r3, [r3, #2]
 8002312:	8aba      	ldrh	r2, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	d906      	bls.n	8002326 <TCS3472_DetectObjectColor+0x116>
        r_to_b_ratio > object_color_config.red_min_ratio_r_to_b) {
 8002318:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 800231a:	889b      	ldrh	r3, [r3, #4]
    if (r_to_g_ratio > object_color_config.red_min_ratio_r_to_g &&
 800231c:	8a7a      	ldrh	r2, [r7, #18]
 800231e:	429a      	cmp	r2, r3
 8002320:	d901      	bls.n	8002326 <TCS3472_DetectObjectColor+0x116>
        return COLOR_RED;
 8002322:	2305      	movs	r3, #5
 8002324:	e01e      	b.n	8002364 <TCS3472_DetectObjectColor+0x154>
    }

    /* Blue detection */
    if (b_to_r_ratio > object_color_config.blue_min_ratio_b_to_r &&
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 8002328:	88db      	ldrh	r3, [r3, #6]
 800232a:	89fa      	ldrh	r2, [r7, #14]
 800232c:	429a      	cmp	r2, r3
 800232e:	d906      	bls.n	800233e <TCS3472_DetectObjectColor+0x12e>
        b_to_g_ratio > object_color_config.blue_min_ratio_b_to_g) {
 8002330:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 8002332:	891b      	ldrh	r3, [r3, #8]
    if (b_to_r_ratio > object_color_config.blue_min_ratio_b_to_r &&
 8002334:	89ba      	ldrh	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d901      	bls.n	800233e <TCS3472_DetectObjectColor+0x12e>
        return COLOR_BLUE;
 800233a:	2306      	movs	r3, #6
 800233c:	e012      	b.n	8002364 <TCS3472_DetectObjectColor+0x154>
    }

    /* Yellow-Orange detection */
    if (r_to_b_ratio > object_color_config.yellow_min_ratio_r_to_b &&
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 8002340:	895b      	ldrh	r3, [r3, #10]
 8002342:	8a7a      	ldrh	r2, [r7, #18]
 8002344:	429a      	cmp	r2, r3
 8002346:	d90c      	bls.n	8002362 <TCS3472_DetectObjectColor+0x152>
        g_to_b_ratio > object_color_config.yellow_min_ratio_g_to_b &&
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 800234a:	899b      	ldrh	r3, [r3, #12]
    if (r_to_b_ratio > object_color_config.yellow_min_ratio_r_to_b &&
 800234c:	8a3a      	ldrh	r2, [r7, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d907      	bls.n	8002362 <TCS3472_DetectObjectColor+0x152>
        r_g_similarity > object_color_config.yellow_r_g_diff_percent) {
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <TCS3472_DetectObjectColor+0x160>)
 8002354:	7b9b      	ldrb	r3, [r3, #14]
 8002356:	461a      	mov	r2, r3
        g_to_b_ratio > object_color_config.yellow_min_ratio_g_to_b &&
 8002358:	8afb      	ldrh	r3, [r7, #22]
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <TCS3472_DetectObjectColor+0x152>
        return COLOR_YELLOW_ORANGE;
 800235e:	2304      	movs	r3, #4
 8002360:	e000      	b.n	8002364 <TCS3472_DetectObjectColor+0x154>
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bc90      	pop	{r4, r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000054 	.word	0x20000054
 8002374:	00000000 	.word	0x00000000

08002378 <TCS3472_CalibrateObjectColors>:


/* Calibration function for object colors - simplified version */
void TCS3472_CalibrateObjectColors(void) {
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b0a0      	sub	sp, #128	@ 0x80
 800237c:	af04      	add	r7, sp, #16
    char buffer[100];
    uint16_t r, g, b, c;

    /* Send calibration instructions */
    sprintf(buffer, "Starting object color calibration sequence...\r\n");
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4945      	ldr	r1, [pc, #276]	@ (8002498 <TCS3472_CalibrateObjectColors+0x120>)
 8002384:	4618      	mov	r0, r3
 8002386:	f009 f91b 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	4618      	mov	r0, r3
 8002390:	f7fd ff8e 	bl	80002b0 <strlen>
 8002394:	4603      	mov	r3, r0
 8002396:	b29a      	uxth	r2, r3
 8002398:	f107 010c 	add.w	r1, r7, #12
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	483e      	ldr	r0, [pc, #248]	@ (800249c <TCS3472_CalibrateObjectColors+0x124>)
 80023a2:	f007 fc0d 	bl	8009bc0 <HAL_UART_Transmit>

    /* 1. Calibrate WHITE object */
    sprintf(buffer, "Place sensor over WHITE object and wait 5 seconds...\r\n");
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	493d      	ldr	r1, [pc, #244]	@ (80024a0 <TCS3472_CalibrateObjectColors+0x128>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f009 f907 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fd ff7a 	bl	80002b0 <strlen>
 80023bc:	4603      	mov	r3, r0
 80023be:	b29a      	uxth	r2, r3
 80023c0:	f107 010c 	add.w	r1, r7, #12
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	4834      	ldr	r0, [pc, #208]	@ (800249c <TCS3472_CalibrateObjectColors+0x124>)
 80023ca:	f007 fbf9 	bl	8009bc0 <HAL_UART_Transmit>
    HAL_Delay(5000);
 80023ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80023d2:	f002 fefb 	bl	80051cc <HAL_Delay>

    /* Take reading of white object */
    TCS3472_GetRGBC(&r, &g, &b, &c);
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	1dba      	adds	r2, r7, #6
 80023da:	f107 0108 	add.w	r1, r7, #8
 80023de:	f107 000a 	add.w	r0, r7, #10
 80023e2:	f7ff fbbc 	bl	8001b5e <TCS3472_GetRGBC>
    object_color_config.white_min_c = c * 0.8; // 20% margin
 80023e6:	88bb      	ldrh	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8bb 	bl	8000564 <__aeabi_i2d>
 80023ee:	a328      	add	r3, pc, #160	@ (adr r3, 8002490 <TCS3472_CalibrateObjectColors+0x118>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe f920 	bl	8000638 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f7fe fbf2 	bl	8000be8 <__aeabi_d2uiz>
 8002404:	4603      	mov	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b26      	ldr	r3, [pc, #152]	@ (80024a4 <TCS3472_CalibrateObjectColors+0x12c>)
 800240a:	801a      	strh	r2, [r3, #0]

    sprintf(buffer, "WHITE calibrated: min_c = %d | R:%d G:%d B:%d C:%d\r\n",
            object_color_config.white_min_c, r, g, b, c);
 800240c:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <TCS3472_CalibrateObjectColors+0x12c>)
 800240e:	881b      	ldrh	r3, [r3, #0]
    sprintf(buffer, "WHITE calibrated: min_c = %d | R:%d G:%d B:%d C:%d\r\n",
 8002410:	461c      	mov	r4, r3
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	461d      	mov	r5, r3
 8002416:	893b      	ldrh	r3, [r7, #8]
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	88b9      	ldrh	r1, [r7, #4]
 800241c:	f107 000c 	add.w	r0, r7, #12
 8002420:	9102      	str	r1, [sp, #8]
 8002422:	9201      	str	r2, [sp, #4]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	462b      	mov	r3, r5
 8002428:	4622      	mov	r2, r4
 800242a:	491f      	ldr	r1, [pc, #124]	@ (80024a8 <TCS3472_CalibrateObjectColors+0x130>)
 800242c:	f009 f8c8 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4618      	mov	r0, r3
 8002436:	f7fd ff3b 	bl	80002b0 <strlen>
 800243a:	4603      	mov	r3, r0
 800243c:	b29a      	uxth	r2, r3
 800243e:	f107 010c 	add.w	r1, r7, #12
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	4815      	ldr	r0, [pc, #84]	@ (800249c <TCS3472_CalibrateObjectColors+0x124>)
 8002448:	f007 fbba 	bl	8009bc0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800244c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002450:	f002 febc 	bl	80051cc <HAL_Delay>

    sprintf(buffer, "Object color calibration complete!\r\n");
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	4914      	ldr	r1, [pc, #80]	@ (80024ac <TCS3472_CalibrateObjectColors+0x134>)
 800245a:	4618      	mov	r0, r3
 800245c:	f009 f8b0 	bl	800b5c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd ff23 	bl	80002b0 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	b29a      	uxth	r2, r3
 800246e:	f107 010c 	add.w	r1, r7, #12
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	4809      	ldr	r0, [pc, #36]	@ (800249c <TCS3472_CalibrateObjectColors+0x124>)
 8002478:	f007 fba2 	bl	8009bc0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800247c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002480:	f002 fea4 	bl	80051cc <HAL_Delay>

    /* Note: Red and Blue calibration requires more complex processing
       and is purposely left out. We'll use predefined values instead. */
}
 8002484:	bf00      	nop
 8002486:	3770      	adds	r7, #112	@ 0x70
 8002488:	46bd      	mov	sp, r7
 800248a:	bdb0      	pop	{r4, r5, r7, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	9999999a 	.word	0x9999999a
 8002494:	3fe99999 	.word	0x3fe99999
 8002498:	0800db3c 	.word	0x0800db3c
 800249c:	20000534 	.word	0x20000534
 80024a0:	0800db6c 	.word	0x0800db6c
 80024a4:	20000054 	.word	0x20000054
 80024a8:	0800dba4 	.word	0x0800dba4
 80024ac:	0800dbdc 	.word	0x0800dbdc

080024b0 <TCS3472_InitAll>:

/* Initialize both TCS3472 color sensors */
uint8_t TCS3472_InitAll(void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b09a      	sub	sp, #104	@ 0x68
 80024b4:	af00      	add	r7, sp, #0
    uint8_t status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    char msg[100];

    /* Initialize line sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 80024bc:	2001      	movs	r0, #1
 80024be:	f7ff fae3 	bl	8001a88 <TCS3472_SelectSensor>
    if (TCS3472_Init() != HAL_OK) {
 80024c2:	f7ff faf5 	bl	8001ab0 <TCS3472_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d014      	beq.n	80024f6 <TCS3472_InitAll+0x46>
        sprintf(msg, "Line sensor (TCS3472) initialization failed!\r\n");
 80024cc:	463b      	mov	r3, r7
 80024ce:	492c      	ldr	r1, [pc, #176]	@ (8002580 <TCS3472_InitAll+0xd0>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	f009 f875 	bl	800b5c0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024d6:	463b      	mov	r3, r7
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd fee9 	bl	80002b0 <strlen>
 80024de:	4603      	mov	r3, r0
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4639      	mov	r1, r7
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	4826      	ldr	r0, [pc, #152]	@ (8002584 <TCS3472_InitAll+0xd4>)
 80024ea:	f007 fb69 	bl	8009bc0 <HAL_UART_Transmit>
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80024f4:	e010      	b.n	8002518 <TCS3472_InitAll+0x68>
    } else {
        sprintf(msg, "Line sensor (TCS3472) initialized successfully!\r\n");
 80024f6:	463b      	mov	r3, r7
 80024f8:	4923      	ldr	r1, [pc, #140]	@ (8002588 <TCS3472_InitAll+0xd8>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f009 f860 	bl	800b5c0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002500:	463b      	mov	r3, r7
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd fed4 	bl	80002b0 <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	b29a      	uxth	r2, r3
 800250c:	4639      	mov	r1, r7
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	481c      	ldr	r0, [pc, #112]	@ (8002584 <TCS3472_InitAll+0xd4>)
 8002514:	f007 fb54 	bl	8009bc0 <HAL_UART_Transmit>
    }

    /* Initialize object sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 8002518:	2002      	movs	r0, #2
 800251a:	f7ff fab5 	bl	8001a88 <TCS3472_SelectSensor>
    if (TCS3472_Init() != HAL_OK) {
 800251e:	f7ff fac7 	bl	8001ab0 <TCS3472_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d014      	beq.n	8002552 <TCS3472_InitAll+0xa2>
        sprintf(msg, "Object sensor (TCS3472) initialization failed!\r\n");
 8002528:	463b      	mov	r3, r7
 800252a:	4918      	ldr	r1, [pc, #96]	@ (800258c <TCS3472_InitAll+0xdc>)
 800252c:	4618      	mov	r0, r3
 800252e:	f009 f847 	bl	800b5c0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002532:	463b      	mov	r3, r7
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd febb 	bl	80002b0 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	b29a      	uxth	r2, r3
 800253e:	4639      	mov	r1, r7
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
 8002544:	480f      	ldr	r0, [pc, #60]	@ (8002584 <TCS3472_InitAll+0xd4>)
 8002546:	f007 fb3b 	bl	8009bc0 <HAL_UART_Transmit>
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002550:	e010      	b.n	8002574 <TCS3472_InitAll+0xc4>
    } else {
        sprintf(msg, "Object sensor (TCS3472) initialized successfully!\r\n");
 8002552:	463b      	mov	r3, r7
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <TCS3472_InitAll+0xe0>)
 8002556:	4618      	mov	r0, r3
 8002558:	f009 f832 	bl	800b5c0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800255c:	463b      	mov	r3, r7
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd fea6 	bl	80002b0 <strlen>
 8002564:	4603      	mov	r3, r0
 8002566:	b29a      	uxth	r2, r3
 8002568:	4639      	mov	r1, r7
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	4805      	ldr	r0, [pc, #20]	@ (8002584 <TCS3472_InitAll+0xd4>)
 8002570:	f007 fb26 	bl	8009bc0 <HAL_UART_Transmit>
    }

    return status;
 8002574:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002578:	4618      	mov	r0, r3
 800257a:	3768      	adds	r7, #104	@ 0x68
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	0800dc04 	.word	0x0800dc04
 8002584:	20000534 	.word	0x20000534
 8002588:	0800dc34 	.word	0x0800dc34
 800258c:	0800dc68 	.word	0x0800dc68
 8002590:	0800dc9c 	.word	0x0800dc9c

08002594 <TCS3472_DualSensorExample>:


/* Main function for the project with both sensors */
void TCS3472_DualSensorExample(void) {
 8002594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002596:	b0a9      	sub	sp, #164	@ 0xa4
 8002598:	af08      	add	r7, sp, #32
    /* Initialize both sensors */
    if (TCS3472_InitAll() != HAL_OK) {
 800259a:	f7ff ff89 	bl	80024b0 <TCS3472_InitAll>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <TCS3472_DualSensorExample+0x16>
        Error_Handler();
 80025a4:	f000 fd30 	bl	8003008 <Error_Handler>
        return;
 80025a8:	e0b3      	b.n	8002712 <TCS3472_DualSensorExample+0x17e>
    }

    /* Run calibration routine for line sensor */
    TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff fa6c 	bl	8001a88 <TCS3472_SelectSensor>
    TCS3472_CalibrateColors();
 80025b0:	f7ff fb76 	bl	8001ca0 <TCS3472_CalibrateColors>

    /* Run simplified calibration for object sensor (just for white) */
    TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 80025b4:	2002      	movs	r0, #2
 80025b6:	f7ff fa67 	bl	8001a88 <TCS3472_SelectSensor>
    TCS3472_CalibrateObjectColors();
 80025ba:	f7ff fedd 	bl	8002378 <TCS3472_CalibrateObjectColors>
    uint8_t line_color, object_color;
    char buffer[100];

    while (1) {
        /* Get RGB and Clear values from line sensor */
        TCS3472_SelectSensor(MUX_CHANNEL_LINE_SENSOR);
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff fa62 	bl	8001a88 <TCS3472_SelectSensor>
        TCS3472_GetRGBC(&r_line, &g_line, &b_line, &c_line);
 80025c4:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80025c8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80025cc:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 80025d0:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80025d4:	f7ff fac3 	bl	8001b5e <TCS3472_GetRGBC>
        line_color = TCS3472_DetectLineColor(r_line, g_line, b_line, c_line);
 80025d8:	f8b7 0074 	ldrh.w	r0, [r7, #116]	@ 0x74
 80025dc:	f8b7 1072 	ldrh.w	r1, [r7, #114]	@ 0x72
 80025e0:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 80025e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80025e8:	f7ff faea 	bl	8001bc0 <TCS3472_DetectLineColor>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        /* Get RGB and Clear values from object sensor */
        TCS3472_SelectSensor(MUX_CHANNEL_OBJECT_SENSOR);
 80025f2:	2002      	movs	r0, #2
 80025f4:	f7ff fa48 	bl	8001a88 <TCS3472_SelectSensor>
        TCS3472_GetRGBC(&r_obj, &g_obj, &b_obj, &c_obj);
 80025f8:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 80025fc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002600:	f107 016a 	add.w	r1, r7, #106	@ 0x6a
 8002604:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8002608:	f7ff faa9 	bl	8001b5e <TCS3472_GetRGBC>
        object_color = TCS3472_DetectObjectColor(r_obj, g_obj, b_obj, c_obj);
 800260c:	f8b7 006c 	ldrh.w	r0, [r7, #108]	@ 0x6c
 8002610:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 8002614:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8002618:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800261c:	f7ff fdf8 	bl	8002210 <TCS3472_DetectObjectColor>
 8002620:	4603      	mov	r3, r0
 8002622:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

        /* Get line color string */
        char *line_color_str;
        switch(line_color) {
 8002626:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800262a:	2b03      	cmp	r3, #3
 800262c:	d00c      	beq.n	8002648 <TCS3472_DualSensorExample+0xb4>
 800262e:	2b03      	cmp	r3, #3
 8002630:	dc0d      	bgt.n	800264e <TCS3472_DualSensorExample+0xba>
 8002632:	2b01      	cmp	r3, #1
 8002634:	d002      	beq.n	800263c <TCS3472_DualSensorExample+0xa8>
 8002636:	2b02      	cmp	r3, #2
 8002638:	d003      	beq.n	8002642 <TCS3472_DualSensorExample+0xae>
 800263a:	e008      	b.n	800264e <TCS3472_DualSensorExample+0xba>
            case COLOR_BLACK:  line_color_str = "BLACK"; break;
 800263c:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <TCS3472_DualSensorExample+0x184>)
 800263e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002640:	e008      	b.n	8002654 <TCS3472_DualSensorExample+0xc0>
            case COLOR_WHITE:  line_color_str = "WHITE"; break;
 8002642:	4b36      	ldr	r3, [pc, #216]	@ (800271c <TCS3472_DualSensorExample+0x188>)
 8002644:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002646:	e005      	b.n	8002654 <TCS3472_DualSensorExample+0xc0>
            case COLOR_GREEN:  line_color_str = "GREEN"; break;
 8002648:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <TCS3472_DualSensorExample+0x18c>)
 800264a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800264c:	e002      	b.n	8002654 <TCS3472_DualSensorExample+0xc0>
            default:           line_color_str = "UNKNOWN"; break;
 800264e:	4b35      	ldr	r3, [pc, #212]	@ (8002724 <TCS3472_DualSensorExample+0x190>)
 8002650:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002652:	bf00      	nop
        }

        /* Get object color string */
        char *object_color_str;
        switch(object_color) {
 8002654:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002658:	3b01      	subs	r3, #1
 800265a:	2b05      	cmp	r3, #5
 800265c:	d820      	bhi.n	80026a0 <TCS3472_DualSensorExample+0x10c>
 800265e:	a201      	add	r2, pc, #4	@ (adr r2, 8002664 <TCS3472_DualSensorExample+0xd0>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002683 	.word	0x08002683
 800266c:	08002689 	.word	0x08002689
 8002670:	0800268f 	.word	0x0800268f
 8002674:	08002695 	.word	0x08002695
 8002678:	0800269b 	.word	0x0800269b
            case COLOR_BLACK:          object_color_str = "BLACK"; break;
 800267c:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <TCS3472_DualSensorExample+0x184>)
 800267e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002680:	e011      	b.n	80026a6 <TCS3472_DualSensorExample+0x112>
            case COLOR_WHITE:          object_color_str = "WHITE"; break;
 8002682:	4b26      	ldr	r3, [pc, #152]	@ (800271c <TCS3472_DualSensorExample+0x188>)
 8002684:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002686:	e00e      	b.n	80026a6 <TCS3472_DualSensorExample+0x112>
            case COLOR_GREEN:          object_color_str = "GREEN"; break;
 8002688:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <TCS3472_DualSensorExample+0x18c>)
 800268a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800268c:	e00b      	b.n	80026a6 <TCS3472_DualSensorExample+0x112>
            case COLOR_YELLOW_ORANGE:  object_color_str = "YELLOW-ORANGE"; break;
 800268e:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <TCS3472_DualSensorExample+0x194>)
 8002690:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002692:	e008      	b.n	80026a6 <TCS3472_DualSensorExample+0x112>
            case COLOR_RED:            object_color_str = "RED"; break;
 8002694:	4b25      	ldr	r3, [pc, #148]	@ (800272c <TCS3472_DualSensorExample+0x198>)
 8002696:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002698:	e005      	b.n	80026a6 <TCS3472_DualSensorExample+0x112>
            case COLOR_BLUE:           object_color_str = "BLUE"; break;
 800269a:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <TCS3472_DualSensorExample+0x19c>)
 800269c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800269e:	e002      	b.n	80026a6 <TCS3472_DualSensorExample+0x112>
            default:                   object_color_str = "UNKNOWN"; break;
 80026a0:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <TCS3472_DualSensorExample+0x190>)
 80026a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026a4:	bf00      	nop
        }

        /* Print the combined results */
        sprintf(buffer, "Line: %s (%d,%d,%d,%d) | Object: %s (%d,%d,%d,%d)\r\n",
 80026a6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80026aa:	469c      	mov	ip, r3
 80026ac:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80026b0:	461a      	mov	r2, r3
 80026b2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 80026b6:	4619      	mov	r1, r3
 80026b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80026bc:	461c      	mov	r4, r3
 80026be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80026c2:	f8b7 006a 	ldrh.w	r0, [r7, #106]	@ 0x6a
 80026c6:	4605      	mov	r5, r0
 80026c8:	f8b7 0068 	ldrh.w	r0, [r7, #104]	@ 0x68
 80026cc:	4606      	mov	r6, r0
 80026ce:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 80026d2:	46be      	mov	lr, r7
 80026d4:	9007      	str	r0, [sp, #28]
 80026d6:	9606      	str	r6, [sp, #24]
 80026d8:	9505      	str	r5, [sp, #20]
 80026da:	9304      	str	r3, [sp, #16]
 80026dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026de:	9303      	str	r3, [sp, #12]
 80026e0:	9402      	str	r4, [sp, #8]
 80026e2:	9101      	str	r1, [sp, #4]
 80026e4:	9200      	str	r2, [sp, #0]
 80026e6:	4663      	mov	r3, ip
 80026e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026ea:	4912      	ldr	r1, [pc, #72]	@ (8002734 <TCS3472_DualSensorExample+0x1a0>)
 80026ec:	4670      	mov	r0, lr
 80026ee:	f008 ff67 	bl	800b5c0 <siprintf>
                line_color_str, r_line, g_line, b_line, c_line,
                object_color_str, r_obj, g_obj, b_obj, c_obj);
        HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80026f2:	463b      	mov	r3, r7
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fddb 	bl	80002b0 <strlen>
 80026fa:	4603      	mov	r3, r0
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4639      	mov	r1, r7
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
 8002704:	480c      	ldr	r0, [pc, #48]	@ (8002738 <TCS3472_DualSensorExample+0x1a4>)
 8002706:	f007 fa5b 	bl	8009bc0 <HAL_UART_Transmit>

        /* Wait before next reading */
        HAL_Delay(100);
 800270a:	2064      	movs	r0, #100	@ 0x64
 800270c:	f002 fd5e 	bl	80051cc <HAL_Delay>
    while (1) {
 8002710:	e755      	b.n	80025be <TCS3472_DualSensorExample+0x2a>
    }
}
 8002712:	3784      	adds	r7, #132	@ 0x84
 8002714:	46bd      	mov	sp, r7
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002718:	0800dcd0 	.word	0x0800dcd0
 800271c:	0800dcd8 	.word	0x0800dcd8
 8002720:	0800dce0 	.word	0x0800dce0
 8002724:	0800dce8 	.word	0x0800dce8
 8002728:	0800dcf0 	.word	0x0800dcf0
 800272c:	0800dd00 	.word	0x0800dd00
 8002730:	0800dd04 	.word	0x0800dd04
 8002734:	0800dd0c 	.word	0x0800dd0c
 8002738:	20000534 	.word	0x20000534

0800273c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002742:	f002 fcd1 	bl	80050e8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002746:	f000 f8b3 	bl	80028b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800274a:	f000 fb95 	bl	8002e78 <MX_GPIO_Init>
  MX_DMA_Init();
 800274e:	f000 fb73 	bl	8002e38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002752:	f000 faf3 	bl	8002d3c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002756:	f000 f9cb 	bl	8002af0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800275a:	f000 fa21 	bl	8002ba0 <MX_TIM2_Init>
  MX_I2C2_Init();
 800275e:	f000 f999 	bl	8002a94 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8002762:	f000 fb15 	bl	8002d90 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002766:	f000 fb3d 	bl	8002de4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800276a:	f000 f913 	bl	8002994 <MX_ADC1_Init>
  MX_I2C1_Init();
 800276e:	f000 f963 	bl	8002a38 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002772:	f000 fa69 	bl	8002c48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002776:	213c      	movs	r1, #60	@ 0x3c
 8002778:	4840      	ldr	r0, [pc, #256]	@ (800287c <main+0x140>)
 800277a:	f006 fd83 	bl	8009284 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800277e:	213c      	movs	r1, #60	@ 0x3c
 8002780:	483f      	ldr	r0, [pc, #252]	@ (8002880 <main+0x144>)
 8002782:	f006 fd7f 	bl	8009284 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002786:	2100      	movs	r1, #0
 8002788:	483e      	ldr	r0, [pc, #248]	@ (8002884 <main+0x148>)
 800278a:	f006 fc0d 	bl	8008fa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800278e:	2104      	movs	r1, #4
 8002790:	483c      	ldr	r0, [pc, #240]	@ (8002884 <main+0x148>)
 8002792:	f006 fc09 	bl	8008fa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002796:	2108      	movs	r1, #8
 8002798:	483a      	ldr	r0, [pc, #232]	@ (8002884 <main+0x148>)
 800279a:	f006 fc05 	bl	8008fa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800279e:	210c      	movs	r1, #12
 80027a0:	4838      	ldr	r0, [pc, #224]	@ (8002884 <main+0x148>)
 80027a2:	f006 fc01 	bl	8008fa8 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 80027a6:	f002 fa1d 	bl	8004be4 <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 80027aa:	2301      	movs	r3, #1
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2340      	movs	r3, #64	@ 0x40
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	4a34      	ldr	r2, [pc, #208]	@ (8002888 <main+0x14c>)
 80027b6:	2100      	movs	r1, #0
 80027b8:	2000      	movs	r0, #0
 80027ba:	f002 fb83 	bl	8004ec4 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 80027be:	f002 fadb 	bl	8004d78 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 80027c2:	f7fe fd73 	bl	80012ac <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 80027c6:	f7fe ffb5 	bl	8001734 <Delay_Init>
  //UART_Init(&huart3);
  //RPI_UART_Init();

  /*---------------------Servo--------------------------------*/
  // Initialize servo system
  Servo_Init(50);  // 50Hz frequency for servos
 80027ca:	2032      	movs	r0, #50	@ 0x32
 80027cc:	f001 fae4 	bl	8003d98 <Servo_Init>
  init_ball_storage();
 80027d0:	f7fe fcd0 	bl	8001174 <init_ball_storage>


// int base = Servo_Register(15, "base", 0, 180, 0 );
// int A = Servo_Register(11, "A", 0, 180, 0);
//int B = Servo_Register(3, "B", 0, 180, 0);
  int C = Servo_Register(8, "C", 0, 180, 0);
 80027d4:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 800288c <main+0x150>
 80027d8:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8002890 <main+0x154>
 80027dc:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800288c <main+0x150>
 80027e0:	492c      	ldr	r1, [pc, #176]	@ (8002894 <main+0x158>)
 80027e2:	2008      	movs	r0, #8
 80027e4:	f001 fafc 	bl	8003de0 <Servo_Register>
 80027e8:	6078      	str	r0, [r7, #4]
////
////
  HAL_Delay(2000);
 80027ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027ee:	f002 fced 	bl	80051cc <HAL_Delay>
////
////  // Later in your code, use the servos by ID
// Servo_SetAngle(base, 50);
//    Servo_SetAngle(A, 0);
//    Servo_SetAngle(B, 90);
    Servo_SetAngle(C, 90);
 80027f2:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8002898 <main+0x15c>
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f001 fbde 	bl	8003fb8 <Servo_SetAngle>


drop_bad_potatos();
 80027fc:	f7fe fd10 	bl	8001220 <drop_bad_potatos>
drop_good_potatos();
 8002800:	f7fe fcf2 	bl	80011e8 <drop_good_potatos>
//  Servo_SetAngle(B, 90);
//  Servo_SetAngle(C, 35);

  //PCA9685_SetServoAngle(14, 100);

  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
 8002804:	2201      	movs	r2, #1
 8002806:	2102      	movs	r1, #2
 8002808:	4824      	ldr	r0, [pc, #144]	@ (800289c <main+0x160>)
 800280a:	f003 ff35 	bl	8006678 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, 1);
 800280e:	2201      	movs	r2, #1
 8002810:	2104      	movs	r1, #4
 8002812:	4822      	ldr	r0, [pc, #136]	@ (800289c <main+0x160>)
 8002814:	f003 ff30 	bl	8006678 <HAL_GPIO_WritePin>


  // Or use them by name
  //Servo_SetAngleByName("base", 90);  // Set base to 120 degrees

  HAL_Delay(1000);
 8002818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800281c:	f002 fcd6 	bl	80051cc <HAL_Delay>
  Controller_Init(&controller);
 8002820:	481f      	ldr	r0, [pc, #124]	@ (80028a0 <main+0x164>)
 8002822:	f7fe fd76 	bl	8001312 <Controller_Init>
    Profile_Reset(&forward_profile);
 8002826:	481f      	ldr	r0, [pc, #124]	@ (80028a4 <main+0x168>)
 8002828:	f000 fe3c 	bl	80034a4 <Profile_Reset>
    Profile_Reset(&rotation_profile);
 800282c:	481e      	ldr	r0, [pc, #120]	@ (80028a8 <main+0x16c>)
 800282e:	f000 fe39 	bl	80034a4 <Profile_Reset>
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 8002832:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <main+0x16c>)
 8002834:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <main+0x168>)
 8002836:	491a      	ldr	r1, [pc, #104]	@ (80028a0 <main+0x164>)
 8002838:	481c      	ldr	r0, [pc, #112]	@ (80028ac <main+0x170>)
 800283a:	f000 fbeb 	bl	8003014 <Motion_Init>
    Controller_ResetControllers(&controller);
 800283e:	4818      	ldr	r0, [pc, #96]	@ (80028a0 <main+0x164>)
 8002840:	f7fe fd99 	bl	8001376 <Controller_ResetControllers>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 8002844:	2064      	movs	r0, #100	@ 0x64
 8002846:	f7fe fd1f 	bl	8001288 <Buzzer_Toggle>

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

  HAL_Delay(2000);
 800284a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800284e:	f002 fcbd 	bl	80051cc <HAL_Delay>
  //RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
  HAL_Delay(200);
 8002852:	20c8      	movs	r0, #200	@ 0xc8
 8002854:	f002 fcba 	bl	80051cc <HAL_Delay>
  Buzzer_Toggle(100);
 8002858:	2064      	movs	r0, #100	@ 0x64
 800285a:	f7fe fd15 	bl	8001288 <Buzzer_Toggle>





  Buzzer_Toggle(100);
 800285e:	2064      	movs	r0, #100	@ 0x64
 8002860:	f7fe fd12 	bl	8001288 <Buzzer_Toggle>
  HAL_Delay(6000);
 8002864:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002868:	f002 fcb0 	bl	80051cc <HAL_Delay>
  Buzzer_Toggle(100);
 800286c:	2064      	movs	r0, #100	@ 0x64
 800286e:	f7fe fd0b 	bl	8001288 <Buzzer_Toggle>
//      uint8_t line_color;
//      char buffer[100];

//---------- new color code ----------------------

  TCS3472_DualSensorExample();
 8002872:	f7ff fe8f 	bl	8002594 <TCS3472_DualSensorExample>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002876:	bf00      	nop
 8002878:	e7fd      	b.n	8002876 <main+0x13a>
 800287a:	bf00      	nop
 800287c:	20000414 	.word	0x20000414
 8002880:	2000045c 	.word	0x2000045c
 8002884:	200004a4 	.word	0x200004a4
 8002888:	0800dda0 	.word	0x0800dda0
 800288c:	00000000 	.word	0x00000000
 8002890:	43340000 	.word	0x43340000
 8002894:	0800dd40 	.word	0x0800dd40
 8002898:	42b40000 	.word	0x42b40000
 800289c:	40020800 	.word	0x40020800
 80028a0:	20000708 	.word	0x20000708
 80028a4:	200006c0 	.word	0x200006c0
 80028a8:	200006e4 	.word	0x200006e4
 80028ac:	20000654 	.word	0x20000654

080028b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b094      	sub	sp, #80	@ 0x50
 80028b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b6:	f107 031c 	add.w	r3, r7, #28
 80028ba:	2234      	movs	r2, #52	@ 0x34
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f008 fee3 	bl	800b68a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c4:	f107 0308 	add.w	r3, r7, #8
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	4b2c      	ldr	r3, [pc, #176]	@ (800298c <SystemClock_Config+0xdc>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	4a2b      	ldr	r2, [pc, #172]	@ (800298c <SystemClock_Config+0xdc>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <SystemClock_Config+0xdc>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4b26      	ldr	r3, [pc, #152]	@ (8002990 <SystemClock_Config+0xe0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a25      	ldr	r2, [pc, #148]	@ (8002990 <SystemClock_Config+0xe0>)
 80028fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b23      	ldr	r3, [pc, #140]	@ (8002990 <SystemClock_Config+0xe0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800290c:	2302      	movs	r3, #2
 800290e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002910:	2301      	movs	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002914:	2310      	movs	r3, #16
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002918:	2302      	movs	r3, #2
 800291a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800291c:	2300      	movs	r3, #0
 800291e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002920:	2308      	movs	r3, #8
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002924:	23b4      	movs	r3, #180	@ 0xb4
 8002926:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002928:	2302      	movs	r3, #2
 800292a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800292c:	2302      	movs	r3, #2
 800292e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002930:	2302      	movs	r3, #2
 8002932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4618      	mov	r0, r3
 800293a:	f006 f847 	bl	80089cc <HAL_RCC_OscConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002944:	f000 fb60 	bl	8003008 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002948:	f005 fca6 	bl	8008298 <HAL_PWREx_EnableOverDrive>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002952:	f000 fb59 	bl	8003008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002956:	230f      	movs	r3, #15
 8002958:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800295a:	2302      	movs	r3, #2
 800295c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002962:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	2105      	movs	r1, #5
 8002974:	4618      	mov	r0, r3
 8002976:	f005 fcdf 	bl	8008338 <HAL_RCC_ClockConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002980:	f000 fb42 	bl	8003008 <Error_Handler>
  }
}
 8002984:	bf00      	nop
 8002986:	3750      	adds	r7, #80	@ 0x50
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000

08002994 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800299a:	463b      	mov	r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029a6:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <MX_ADC1_Init+0x9c>)
 80029aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029ac:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029ce:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029d6:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <MX_ADC1_Init+0xa0>)
 80029d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029da:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029e0:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029e6:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029ee:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029f4:	480d      	ldr	r0, [pc, #52]	@ (8002a2c <MX_ADC1_Init+0x98>)
 80029f6:	f002 fc0d 	bl	8005214 <HAL_ADC_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a00:	f000 fb02 	bl	8003008 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002a04:	230a      	movs	r3, #10
 8002a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a10:	463b      	mov	r3, r7
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_ADC1_Init+0x98>)
 8002a16:	f002 fddf 	bl	80055d8 <HAL_ADC_ConfigChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a20:	f000 faf2 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000324 	.word	0x20000324
 8002a30:	40012000 	.word	0x40012000
 8002a34:	0f000001 	.word	0x0f000001

08002a38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a3e:	4a13      	ldr	r2, [pc, #76]	@ (8002a8c <MX_I2C1_Init+0x54>)
 8002a40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a42:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a44:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <MX_I2C1_Init+0x58>)
 8002a46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a48:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a68:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a74:	4804      	ldr	r0, [pc, #16]	@ (8002a88 <MX_I2C1_Init+0x50>)
 8002a76:	f003 fe3d 	bl	80066f4 <HAL_I2C_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a80:	f000 fac2 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000036c 	.word	0x2000036c
 8002a8c:	40005400 	.word	0x40005400
 8002a90:	00061a80 	.word	0x00061a80

08002a94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002a9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <MX_I2C2_Init+0x54>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002aa0:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <MX_I2C2_Init+0x58>)
 8002aa2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ab6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ad0:	4804      	ldr	r0, [pc, #16]	@ (8002ae4 <MX_I2C2_Init+0x50>)
 8002ad2:	f003 fe0f 	bl	80066f4 <HAL_I2C_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002adc:	f000 fa94 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200003c0 	.word	0x200003c0
 8002ae8:	40005800 	.word	0x40005800
 8002aec:	000186a0 	.word	0x000186a0

08002af0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	@ 0x30
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	2224      	movs	r2, #36	@ 0x24
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f008 fdc3 	bl	800b68a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b0c:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b0e:	4a23      	ldr	r2, [pc, #140]	@ (8002b9c <MX_TIM1_Init+0xac>)
 8002b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b12:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b18:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b26:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b32:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b40:	2301      	movs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	4619      	mov	r1, r3
 8002b62:	480d      	ldr	r0, [pc, #52]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b64:	f006 fae8 	bl	8009138 <HAL_TIM_Encoder_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b6e:	f000 fa4b 	bl	8003008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4806      	ldr	r0, [pc, #24]	@ (8002b98 <MX_TIM1_Init+0xa8>)
 8002b80:	f006 ff52 	bl	8009a28 <HAL_TIMEx_MasterConfigSynchronization>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b8a:	f000 fa3d 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	3730      	adds	r7, #48	@ 0x30
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000414 	.word	0x20000414
 8002b9c:	40010000 	.word	0x40010000

08002ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	@ 0x30
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	2224      	movs	r2, #36	@ 0x24
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f008 fd6b 	bl	800b68a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bbc:	4b21      	ldr	r3, [pc, #132]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bde:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002be4:	2303      	movs	r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480d      	ldr	r0, [pc, #52]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002c10:	f006 fa92 	bl	8009138 <HAL_TIM_Encoder_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002c1a:	f000 f9f5 	bl	8003008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <MX_TIM2_Init+0xa4>)
 8002c2c:	f006 fefc 	bl	8009a28 <HAL_TIMEx_MasterConfigSynchronization>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002c36:	f000 f9e7 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	3730      	adds	r7, #48	@ 0x30
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000045c 	.word	0x2000045c

08002c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	@ 0x28
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4e:	f107 0320 	add.w	r3, r7, #32
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	615a      	str	r2, [r3, #20]
 8002c68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c6a:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002c6c:	4a32      	ldr	r2, [pc, #200]	@ (8002d38 <MX_TIM3_Init+0xf0>)
 8002c6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c70:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c76:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002c7e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002c82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c84:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c90:	4828      	ldr	r0, [pc, #160]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002c92:	f006 f939 	bl	8008f08 <HAL_TIM_PWM_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c9c:	f000 f9b4 	bl	8003008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ca8:	f107 0320 	add.w	r3, r7, #32
 8002cac:	4619      	mov	r1, r3
 8002cae:	4821      	ldr	r0, [pc, #132]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002cb0:	f006 feba 	bl	8009a28 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002cba:	f000 f9a5 	bl	8003008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cbe:	2360      	movs	r3, #96	@ 0x60
 8002cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4817      	ldr	r0, [pc, #92]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002cd6:	f006 fb63 	bl	80093a0 <HAL_TIM_PWM_ConfigChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002ce0:	f000 f992 	bl	8003008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4812      	ldr	r0, [pc, #72]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002cec:	f006 fb58 	bl	80093a0 <HAL_TIM_PWM_ConfigChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cf6:	f000 f987 	bl	8003008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480c      	ldr	r0, [pc, #48]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002d02:	f006 fb4d 	bl	80093a0 <HAL_TIM_PWM_ConfigChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002d0c:	f000 f97c 	bl	8003008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	220c      	movs	r2, #12
 8002d14:	4619      	mov	r1, r3
 8002d16:	4807      	ldr	r0, [pc, #28]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002d18:	f006 fb42 	bl	80093a0 <HAL_TIM_PWM_ConfigChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002d22:	f000 f971 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d26:	4803      	ldr	r0, [pc, #12]	@ (8002d34 <MX_TIM3_Init+0xec>)
 8002d28:	f001 fb60 	bl	80043ec <HAL_TIM_MspPostInit>

}
 8002d2c:	bf00      	nop
 8002d2e:	3728      	adds	r7, #40	@ 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200004a4 	.word	0x200004a4
 8002d38:	40000400 	.word	0x40000400

08002d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <MX_USART2_UART_Init+0x50>)
 8002d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d46:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d62:	220c      	movs	r2, #12
 8002d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d66:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d72:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <MX_USART2_UART_Init+0x4c>)
 8002d74:	f006 fed4 	bl	8009b20 <HAL_UART_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d7e:	f000 f943 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200004ec 	.word	0x200004ec
 8002d8c:	40004400 	.word	0x40004400

08002d90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d94:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002d96:	4a12      	ldr	r2, [pc, #72]	@ (8002de0 <MX_USART3_UART_Init+0x50>)
 8002d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d9a:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002d9c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002da0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002db6:	220c      	movs	r2, #12
 8002db8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dba:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002dc6:	4805      	ldr	r0, [pc, #20]	@ (8002ddc <MX_USART3_UART_Init+0x4c>)
 8002dc8:	f006 feaa 	bl	8009b20 <HAL_UART_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002dd2:	f000 f919 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000534 	.word	0x20000534
 8002de0:	40004800 	.word	0x40004800

08002de4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <MX_USART6_UART_Init+0x50>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002dee:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002df0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002df4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	@ (8002e30 <MX_USART6_UART_Init+0x4c>)
 8002e1c:	f006 fe80 	bl	8009b20 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e26:	f000 f8ef 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	2000057c 	.word	0x2000057c
 8002e34:	40011400 	.word	0x40011400

08002e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <MX_DMA_Init+0x3c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a0b      	ldr	r2, [pc, #44]	@ (8002e74 <MX_DMA_Init+0x3c>)
 8002e48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <MX_DMA_Init+0x3c>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2039      	movs	r0, #57	@ 0x39
 8002e60:	f002 fec3 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e64:	2039      	movs	r0, #57	@ 0x39
 8002e66:	f002 fedc 	bl	8005c22 <HAL_NVIC_EnableIRQ>

}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	@ 0x28
 8002e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b56      	ldr	r3, [pc, #344]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b52      	ldr	r3, [pc, #328]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	4a51      	ldr	r2, [pc, #324]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eba:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed6:	4b48      	ldr	r3, [pc, #288]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	4b44      	ldr	r3, [pc, #272]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	4a43      	ldr	r2, [pc, #268]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef2:	4b41      	ldr	r3, [pc, #260]	@ (8002ff8 <MX_GPIO_Init+0x180>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2102      	movs	r1, #2
 8002f02:	483e      	ldr	r0, [pc, #248]	@ (8002ffc <MX_GPIO_Init+0x184>)
 8002f04:	f003 fbb8 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	483b      	ldr	r0, [pc, #236]	@ (8002ffc <MX_GPIO_Init+0x184>)
 8002f0e:	f003 fbb3 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2120      	movs	r1, #32
 8002f16:	483a      	ldr	r0, [pc, #232]	@ (8003000 <MX_GPIO_Init+0x188>)
 8002f18:	f003 fbae 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002f22:	4838      	ldr	r0, [pc, #224]	@ (8003004 <MX_GPIO_Init+0x18c>)
 8002f24:	f003 fba8 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC11 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_11;
 8002f28:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	482f      	ldr	r0, [pc, #188]	@ (8002ffc <MX_GPIO_Init+0x184>)
 8002f40:	f003 fa06 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
 8002f44:	2302      	movs	r3, #2
 8002f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f50:	2302      	movs	r3, #2
 8002f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4828      	ldr	r0, [pc, #160]	@ (8002ffc <MX_GPIO_Init+0x184>)
 8002f5c:	f003 f9f8 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
 8002f60:	2304      	movs	r3, #4
 8002f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4619      	mov	r1, r3
 8002f76:	4821      	ldr	r0, [pc, #132]	@ (8002ffc <MX_GPIO_Init+0x184>)
 8002f78:	f003 f9ea 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	481a      	ldr	r0, [pc, #104]	@ (8002ffc <MX_GPIO_Init+0x184>)
 8002f92:	f003 f9dd 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f96:	2320      	movs	r3, #32
 8002f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4619      	mov	r1, r3
 8002fac:	4814      	ldr	r0, [pc, #80]	@ (8003000 <MX_GPIO_Init+0x188>)
 8002fae:	f003 f9cf 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8002fb2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	480e      	ldr	r0, [pc, #56]	@ (8003004 <MX_GPIO_Init+0x18c>)
 8002fcc:	f003 f9c0 	bl	8006350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	2009      	movs	r0, #9
 8002fd6:	f002 fe08 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002fda:	2009      	movs	r0, #9
 8002fdc:	f002 fe21 	bl	8005c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2028      	movs	r0, #40	@ 0x28
 8002fe6:	f002 fe00 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fea:	2028      	movs	r0, #40	@ 0x28
 8002fec:	f002 fe19 	bl	8005c22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	@ 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400

08003008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
}
 800300e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <Error_Handler+0x8>

08003014 <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 8003014:	b4b0      	push	{r4, r5, r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4614      	mov	r4, r2
 8003028:	461d      	mov	r5, r3
 800302a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800302c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800302e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800303e:	4615      	mov	r5, r2
 8003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8003054:	4615      	mov	r5, r2
 8003056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800305a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800305c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800305e:	682b      	ldr	r3, [r5, #0]
 8003060:	6023      	str	r3, [r4, #0]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bcb0      	pop	{r4, r5, r7}
 800306a:	4770      	bx	lr

0800306c <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3324      	adds	r3, #36	@ 0x24
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa54 	bl	8003526 <Profile_GetSpeed>
 800307e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3348      	adds	r3, #72	@ 0x48
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fa44 	bl	8003526 <Profile_GetSpeed>
 800309e:	eef0 7a40 	vmov.f32	s15, s0
}
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3324      	adds	r3, #36	@ 0x24
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa43 	bl	8003544 <Profile_Update>
    Profile_Update(&(motion->rotation));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3348      	adds	r3, #72	@ 0x48
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fa3e 	bl	8003544 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fa54 	bl	8000588 <__aeabi_f2d>
 80030e0:	a313      	add	r3, pc, #76	@ (adr r3, 8003130 <limitPWM+0x60>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd fd37 	bl	8000b58 <__aeabi_dcmpgt>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <limitPWM+0x24>
		return PWM_MAX;
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <limitPWM+0x58>)
 80030f2:	e00d      	b.n	8003110 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fd fa47 	bl	8000588 <__aeabi_f2d>
 80030fa:	a309      	add	r3, pc, #36	@ (adr r3, 8003120 <limitPWM+0x50>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f7fd fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <limitPWM+0x3e>
		return -PWM_MAX;
 800310a:	4b08      	ldr	r3, [pc, #32]	@ (800312c <limitPWM+0x5c>)
 800310c:	e000      	b.n	8003110 <limitPWM+0x40>
	return pwm;
 800310e:	687b      	ldr	r3, [r7, #4]
}
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eeb0 0a67 	vmov.f32	s0, s15
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	70a3d70a 	.word	0x70a3d70a
 8003124:	bfef0a3d 	.word	0xbfef0a3d
 8003128:	3f7851ec 	.word	0x3f7851ec
 800312c:	bf7851ec 	.word	0xbf7851ec
 8003130:	70a3d70a 	.word	0x70a3d70a
 8003134:	3fef0a3d 	.word	0x3fef0a3d

08003138 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8003142:	edd7 7a01 	vldr	s15, [r7, #4]
 8003146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	db13      	blt.n	8003178 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8003150:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <setMotorLPWM+0x84>)
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8003156:	ed97 0a01 	vldr	s0, [r7, #4]
 800315a:	f7ff ffb9 	bl	80030d0 <limitPWM>
 800315e:	eef0 7a40 	vmov.f32	s15, s0
 8003162:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80031c0 <setMotorLPWM+0x88>
 8003166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <setMotorLPWM+0x84>)
 800316c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003170:	ee17 2a90 	vmov	r2, s15
 8003174:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8003176:	e01c      	b.n	80031b2 <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8003178:	edd7 7a01 	vldr	s15, [r7, #4]
 800317c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003184:	d400      	bmi.n	8003188 <setMotorLPWM+0x50>
}
 8003186:	e014      	b.n	80031b2 <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <setMotorLPWM+0x84>)
 800318a:	2200      	movs	r2, #0
 800318c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 800318e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003192:	f7ff ff9d 	bl	80030d0 <limitPWM>
 8003196:	eef0 7a40 	vmov.f32	s15, s0
 800319a:	eef1 7a67 	vneg.f32	s15, s15
 800319e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80031c0 <setMotorLPWM+0x88>
 80031a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a6:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <setMotorLPWM+0x84>)
 80031a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ac:	ee17 2a90 	vmov	r2, s15
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40000400 	.word	0x40000400
 80031c0:	45e0f800 	.word	0x45e0f800

080031c4 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 80031ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80031d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	db13      	blt.n	8003204 <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <setMotorRPWM+0x84>)
 80031de:	2200      	movs	r2, #0
 80031e0:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80031e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80031e6:	f7ff ff73 	bl	80030d0 <limitPWM>
 80031ea:	eef0 7a40 	vmov.f32	s15, s0
 80031ee:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800324c <setMotorRPWM+0x88>
 80031f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f6:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <setMotorRPWM+0x84>)
 80031f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fc:	ee17 2a90 	vmov	r2, s15
 8003200:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8003202:	e01c      	b.n	800323e <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 8003204:	edd7 7a01 	vldr	s15, [r7, #4]
 8003208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003210:	d400      	bmi.n	8003214 <setMotorRPWM+0x50>
}
 8003212:	e014      	b.n	800323e <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 8003214:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <setMotorRPWM+0x84>)
 8003216:	2200      	movs	r2, #0
 8003218:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 800321a:	ed97 0a01 	vldr	s0, [r7, #4]
 800321e:	f7ff ff57 	bl	80030d0 <limitPWM>
 8003222:	eef0 7a40 	vmov.f32	s15, s0
 8003226:	eef1 7a67 	vneg.f32	s15, s15
 800322a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800324c <setMotorRPWM+0x88>
 800322e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003232:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <setMotorRPWM+0x84>)
 8003234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003238:	ee17 2a90 	vmov	r2, s15
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40000400 	.word	0x40000400
 800324c:	45e0f800 	.word	0x45e0f800

08003250 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af04      	add	r7, sp, #16
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
 800325a:	460b      	mov	r3, r1
 800325c:	71bb      	strb	r3, [r7, #6]
 800325e:	4613      	mov	r3, r2
 8003260:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	b29a      	uxth	r2, r3
 8003266:	230a      	movs	r3, #10
 8003268:	9302      	str	r3, [sp, #8]
 800326a:	2301      	movs	r3, #1
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	f107 030f 	add.w	r3, r7, #15
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2301      	movs	r3, #1
 8003276:	2180      	movs	r1, #128	@ 0x80
 8003278:	4819      	ldr	r0, [pc, #100]	@ (80032e0 <PCA9685_SetBit+0x90>)
 800327a:	f003 ffa9 	bl	80071d0 <HAL_I2C_Mem_Read>
  if (Value == 0)
 800327e:	797b      	ldrb	r3, [r7, #5]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 8003284:	79bb      	ldrb	r3, [r7, #6]
 8003286:	2201      	movs	r2, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	b25b      	sxtb	r3, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	b25a      	sxtb	r2, r3
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	b25b      	sxtb	r3, r3
 8003296:	4013      	ands	r3, r2
 8003298:	b25b      	sxtb	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e00a      	b.n	80032b6 <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	2201      	movs	r2, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	b25a      	sxtb	r2, r3
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	230a      	movs	r3, #10
 80032bc:	9302      	str	r3, [sp, #8]
 80032be:	2301      	movs	r3, #1
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	f107 030f 	add.w	r3, r7, #15
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2301      	movs	r3, #1
 80032ca:	2180      	movs	r1, #128	@ 0x80
 80032cc:	4804      	ldr	r0, [pc, #16]	@ (80032e0 <PCA9685_SetBit+0x90>)
 80032ce:	f003 fe85 	bl	8006fdc <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80032d2:	2001      	movs	r0, #1
 80032d4:	f001 ff7a 	bl	80051cc <HAL_Delay>
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200003c0 	.word	0x200003c0

080032e4 <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af04      	add	r7, sp, #16
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d902      	bls.n	80032fe <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80032f8:	2303      	movs	r3, #3
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e00c      	b.n	8003318 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2b18      	cmp	r3, #24
 8003302:	d802      	bhi.n	800330a <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 8003304:	23ff      	movs	r3, #255	@ 0xff
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	e006      	b.n	8003318 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	031b      	lsls	r3, r3, #12
 800330e:	4a12      	ldr	r2, [pc, #72]	@ (8003358 <PCA9685_SetPWMFrequency+0x74>)
 8003310:	fb92 f3f3 	sdiv	r3, r2, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8003318:	2201      	movs	r2, #1
 800331a:	2104      	movs	r1, #4
 800331c:	2000      	movs	r0, #0
 800331e:	f7ff ff97 	bl	8003250 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8003322:	230a      	movs	r3, #10
 8003324:	9302      	str	r3, [sp, #8]
 8003326:	2301      	movs	r3, #1
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	f107 030f 	add.w	r3, r7, #15
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2301      	movs	r3, #1
 8003332:	22fe      	movs	r2, #254	@ 0xfe
 8003334:	2180      	movs	r1, #128	@ 0x80
 8003336:	4809      	ldr	r0, [pc, #36]	@ (800335c <PCA9685_SetPWMFrequency+0x78>)
 8003338:	f003 fe50 	bl	8006fdc <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2104      	movs	r1, #4
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff ff85 	bl	8003250 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8003346:	2201      	movs	r2, #1
 8003348:	2107      	movs	r1, #7
 800334a:	2000      	movs	r0, #0
 800334c:	f7ff ff80 	bl	8003250 <PCA9685_SetBit>
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	017d7840 	.word	0x017d7840
 800335c:	200003c0 	.word	0x200003c0

08003360 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ffb9 	bl	80032e4 <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8003372:	2201      	movs	r2, #1
 8003374:	2105      	movs	r1, #5
 8003376:	2000      	movs	r0, #0
 8003378:	f7ff ff6a 	bl	8003250 <PCA9685_SetBit>
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af04      	add	r7, sp, #16
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
 800338e:	460b      	mov	r3, r1
 8003390:	80bb      	strh	r3, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3306      	adds	r3, #6
 800339e:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 80033a0:	88bb      	ldrh	r3, [r7, #4]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 80033a6:	88bb      	ldrh	r3, [r7, #4]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 80033b6:	887b      	ldrh	r3, [r7, #2]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	230a      	movs	r3, #10
 80033c6:	9302      	str	r3, [sp, #8]
 80033c8:	2304      	movs	r3, #4
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2301      	movs	r3, #1
 80033d4:	2180      	movs	r1, #128	@ 0x80
 80033d6:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <PCA9685_SetPWM+0x60>)
 80033d8:	f003 fe00 	bl	8006fdc <HAL_I2C_Mem_Write>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200003c0 	.word	0x200003c0

080033e8 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	ed87 0a00 	vstr	s0, [r7]
 80033f4:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 80033f6:	edd7 7a00 	vldr	s15, [r7]
 80033fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d502      	bpl.n	800340a <PCA9685_SetServoAngle+0x22>
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 800340a:	edd7 7a00 	vldr	s15, [r7]
 800340e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003498 <PCA9685_SetServoAngle+0xb0>
 8003412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	dd01      	ble.n	8003420 <PCA9685_SetServoAngle+0x38>
 800341c:	4b1f      	ldr	r3, [pc, #124]	@ (800349c <PCA9685_SetServoAngle+0xb4>)
 800341e:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8003420:	6838      	ldr	r0, [r7, #0]
 8003422:	f7fd f8b1 	bl	8000588 <__aeabi_f2d>
 8003426:	a318      	add	r3, pc, #96	@ (adr r3, 8003488 <PCA9685_SetServoAngle+0xa0>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f7fd f904 	bl	8000638 <__aeabi_dmul>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	4b18      	ldr	r3, [pc, #96]	@ (80034a0 <PCA9685_SetServoAngle+0xb8>)
 800343e:	f7fd fa25 	bl	800088c <__aeabi_ddiv>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	a311      	add	r3, pc, #68	@ (adr r3, 8003490 <PCA9685_SetServoAngle+0xa8>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fc ff3c 	bl	80002cc <__adddf3>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd fbe4 	bl	8000c28 <__aeabi_d2f>
 8003460:	4603      	mov	r3, r0
 8003462:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8003464:	edd7 7a03 	vldr	s15, [r7, #12]
 8003468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346c:	ee17 3a90 	vmov	r3, s15
 8003470:	b29a      	uxth	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ff84 	bl	8003384 <PCA9685_SetPWM>
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	f3af 8000 	nop.w
 8003488:	00000000 	.word	0x00000000
 800348c:	40799800 	.word	0x40799800
 8003490:	9999999a 	.word	0x9999999a
 8003494:	40599999 	.word	0x40599999
 8003498:	43340000 	.word	0x43340000
 800349c:	43340000 	.word	0x43340000
 80034a0:	40668000 	.word	0x40668000

080034a4 <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <Profile_GetBrakingDistance>:
        HAL_Delay(2);
    }
}

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	edd3 6a07 	vldr	s13, [r3, #28]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80034fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003502:	eef0 7ae7 	vabs.f32	s15, s15
 8003506:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800350a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	edd3 7a05 	vldr	s15, [r3, #20]
 8003514:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003518:	eeb0 0a67 	vmov.f32	s0, s15
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
    return profile->speed;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	ee07 3a90 	vmov	s15, r3
}
 8003536:	eeb0 0a67 	vmov.f32	s0, s15
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80b5 	beq.w	80036c2 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	ed93 7a04 	vldr	s14, [r3, #16]
 800355e:	4b5b      	ldr	r3, [pc, #364]	@ (80036cc <Profile_Update+0x188>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003568:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003572:	eeb0 7ae7 	vabs.f32	s14, s15
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	edd3 7a02 	vldr	s15, [r3, #8]
 800357c:	eef0 7ae7 	vabs.f32	s15, s15
 8003580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003584:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d128      	bne.n	80035e4 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ff9f 	bl	80034d6 <Profile_GetBrakingDistance>
 8003598:	eeb0 7a40 	vmov.f32	s14, s0
 800359c:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d51c      	bpl.n	80035e4 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80035b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035be:	d10b      	bne.n	80035d8 <Profile_Update+0x94>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ce:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80035d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d6:	e002      	b.n	80035de <Profile_Update+0x9a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	edd3 7a07 	vldr	s15, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80035f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	d519      	bpl.n	800362e <Profile_Update+0xea>
        profile->speed += delta_v;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003600:	edd7 7a03 	vldr	s15, [r7, #12]
 8003604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	ed93 7a01 	vldr	s14, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	edd3 7a06 	vldr	s15, [r3, #24]
 800361a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	dd28      	ble.n	8003676 <Profile_Update+0x132>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	e023      	b.n	8003676 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	ed93 7a01 	vldr	s14, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	edd3 7a06 	vldr	s15, [r3, #24]
 800363a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	dd18      	ble.n	8003676 <Profile_Update+0x132>
        profile->speed -= delta_v;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	ed93 7a01 	vldr	s14, [r3, #4]
 800364a:	edd7 7a03 	vldr	s15, [r7, #12]
 800364e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	ed93 7a01 	vldr	s14, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	edd3 7a06 	vldr	s15, [r3, #24]
 8003664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366c:	d503      	bpl.n	8003676 <Profile_Update+0x132>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	ed93 7a01 	vldr	s14, [r3, #4]
 800367c:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <Profile_Update+0x188>)
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	edd3 7a02 	vldr	s15, [r3, #8]
 800368c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d011      	beq.n	80036c4 <Profile_Update+0x180>
 80036a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a4:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80036a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	d508      	bpl.n	80036c4 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2203      	movs	r2, #3
 80036b6:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
 80036c0:	e000      	b.n	80036c4 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 80036c2:	bf00      	nop
    }

}
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	0800dd5c 	.word	0x0800dd5c

080036d0 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e00c      	b.n	80036f8 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	18d4      	adds	r4, r2, r3
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fd2f 	bl	800114c <AnalogMux_ReadChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	3301      	adds	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b09      	cmp	r3, #9
 80036fc:	d9ef      	bls.n	80036de <RAYKHA_ReadRaw+0xe>
    }
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bd90      	pop	{r4, r7, pc}

08003708 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8003712:	f107 0308 	add.w	r3, r7, #8
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ffda 	bl	80036d0 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e05a      	b.n	80037d8 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8003722:	7ffb      	ldrb	r3, [r7, #31]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	3320      	adds	r3, #32
 8003728:	443b      	add	r3, r7
 800372a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800372e:	7ff9      	ldrb	r1, [r7, #31]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003736:	429a      	cmp	r2, r3
 8003738:	d206      	bcs.n	8003748 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 800373a:	7ffb      	ldrb	r3, [r7, #31]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	2200      	movs	r2, #0
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	e044      	b.n	80037d2 <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8003748:	7ffb      	ldrb	r3, [r7, #31]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	3320      	adds	r3, #32
 800374e:	443b      	add	r3, r7
 8003750:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003754:	7ffb      	ldrb	r3, [r7, #31]
 8003756:	6839      	ldr	r1, [r7, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	440b      	add	r3, r1
 800375e:	889b      	ldrh	r3, [r3, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d907      	bls.n	8003774 <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8003764:	7ffb      	ldrb	r3, [r7, #31]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	e02e      	b.n	80037d2 <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8003774:	7ffb      	ldrb	r3, [r7, #31]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	3320      	adds	r3, #32
 800377a:	443b      	add	r3, r7
 800377c:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8003780:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8003788:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	3308      	adds	r3, #8
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8003794:	7ffb      	ldrb	r3, [r7, #31]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	18d4      	adds	r4, r2, r3
 800379c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	462a      	mov	r2, r5
 80037a6:	f000 f879 	bl	800389c <map_range>
 80037aa:	4603      	mov	r3, r0
 80037ac:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d10c      	bne.n	80037d2 <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	440b      	add	r3, r1
 80037ca:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 80037ce:	b292      	uxth	r2, r2
 80037d0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80037d2:	7ffb      	ldrb	r3, [r7, #31]
 80037d4:	3301      	adds	r3, #1
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	7ffb      	ldrb	r3, [r7, #31]
 80037da:	2b09      	cmp	r3, #9
 80037dc:	d9a1      	bls.n	8003722 <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bdb0      	pop	{r4, r5, r7, pc}

080037e8 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	73bb      	strb	r3, [r7, #14]
 8003802:	e01c      	b.n	800383e <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8003804:	7bbb      	ldrb	r3, [r7, #14]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8003810:	89bb      	ldrh	r3, [r7, #12]
 8003812:	2bc8      	cmp	r3, #200	@ 0xc8
 8003814:	d901      	bls.n	800381a <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 800381a:	89bb      	ldrh	r3, [r7, #12]
 800381c:	7bba      	ldrb	r2, [r7, #14]
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4413      	add	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
        sum += value;
 8003830:	89bb      	ldrh	r3, [r7, #12]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003838:	7bbb      	ldrb	r3, [r7, #14]
 800383a:	3301      	adds	r3, #1
 800383c:	73bb      	strb	r3, [r7, #14]
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	2b09      	cmp	r3, #9
 8003842:	d9df      	bls.n	8003804 <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <RAYKHA_GetLinePosition+0x68>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b63      	cmp	r3, #99	@ 0x63
 800384e:	d802      	bhi.n	8003856 <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	e003      	b.n	800385e <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800385e:	4618      	mov	r0, r3
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ffb6 	bl	80037e8 <RAYKHA_GetLinePosition>
 800387c:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d102      	bne.n	800388c <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 8003886:	f242 730f 	movw	r3, #9999	@ 0x270f
 800388a:	e003      	b.n	8003894 <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8003892:	3b14      	subs	r3, #20
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 800389c:	b490      	push	{r4, r7}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	80fb      	strh	r3, [r7, #6]
 80038ae:	4603      	mov	r3, r0
 80038b0:	80bb      	strh	r3, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	807b      	strh	r3, [r7, #2]
 80038b6:	4613      	mov	r3, r2
 80038b8:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	88bb      	ldrh	r3, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d801      	bhi.n	80038c6 <map_range+0x2a>
 80038c2:	883b      	ldrh	r3, [r7, #0]
 80038c4:	e01d      	b.n	8003902 <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	88bb      	ldrh	r3, [r7, #4]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	8b39      	ldrh	r1, [r7, #24]
 80038ce:	883a      	ldrh	r2, [r7, #0]
 80038d0:	1a8a      	subs	r2, r1, r2
 80038d2:	fb03 f202 	mul.w	r2, r3, r2
 80038d6:	8879      	ldrh	r1, [r7, #2]
 80038d8:	88bb      	ldrh	r3, [r7, #4]
 80038da:	1acb      	subs	r3, r1, r3
 80038dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80038e0:	883b      	ldrh	r3, [r7, #0]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 80038e6:	883b      	ldrh	r3, [r7, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	da01      	bge.n	80038f2 <map_range+0x56>
 80038ee:	883b      	ldrh	r3, [r7, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 80038f2:	8b3b      	ldrh	r3, [r7, #24]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	dd01      	ble.n	80038fe <map_range+0x62>
 80038fa:	8b3b      	ldrh	r3, [r7, #24]
 80038fc:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	b29b      	uxth	r3, r3
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bc90      	pop	{r4, r7}
 800390a:	4770      	bx	lr

0800390c <HandleLineDetection>:

/**
 * @brief Handle line detection data from Raspberry Pi
 * @param data Line detection data
 */
void HandleLineDetection(uint8_t *data) {
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Extract line position and orientation */
  int8_t linePosition = (int8_t)data[0]; // Negative = left, Positive = right, 0 = center
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	73fb      	strb	r3, [r7, #15]
  uint8_t lineAngle = data[1];           // Line angle in degrees
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	73bb      	strb	r3, [r7, #14]
    //TurnRight();
  } else {
    /* Go straight */
    //MoveForward();
  }
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HandleGridPosition>:

/**
 * @brief Handle grid position data from Raspberry Pi
 * @param data Grid position data
 */
void HandleGridPosition(uint8_t *data) {
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Extract grid coordinates */
  uint8_t gridX = data[0];
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	73fb      	strb	r3, [r7, #15]
  uint8_t gridY = data[1];
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	785b      	ldrb	r3, [r3, #1]
 800393e:	73bb      	strb	r3, [r7, #14]
  uint8_t orientation = data[2]; // 0=N, 1=E, 2=S, 3=W
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	789b      	ldrb	r3, [r3, #2]
 8003944:	737b      	strb	r3, [r7, #13]

  /* Use grid position for navigation */
  //NavigateGrid(gridX, gridY, orientation);
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HandleColorDetection>:

/**
 * @brief Handle color detection data from Raspberry Pi
 * @param data Color detection data
 */
void HandleColorDetection(uint8_t *data) {
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
//      break;
//    default:
//      /* Unknown color */
//      break;
//  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HandleLineColorDetection>:

void HandleLineColorDetection(uint8_t *data){
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	uint8_t colorId = data[0];
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	73fb      	strb	r3, [r7, #15]

	uint8_t ballId = data[1];
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	73bb      	strb	r3, [r7, #14]

	//handlecount++;

	switch (colorId) {
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HandleLineColorDetection+0x20>
 8003982:	2b01      	cmp	r3, #1
 8003984:	d004      	beq.n	8003990 <HandleLineColorDetection+0x28>
 8003986:	e007      	b.n	8003998 <HandleLineColorDetection+0x30>
	case 0: /* Red */
		linecolorRPI = WHITE;
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <HandleLineColorDetection+0x68>)
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
	  break;
 800398e:	e007      	b.n	80039a0 <HandleLineColorDetection+0x38>
	case 1: /* Green */
		linecolorRPI = GREEN;
 8003990:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <HandleLineColorDetection+0x68>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
	  break;
 8003996:	e003      	b.n	80039a0 <HandleLineColorDetection+0x38>
	default:
	  /* Unknown color */
		linecolorRPI = WHITE;
 8003998:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <HandleLineColorDetection+0x68>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
	  break;
 800399e:	bf00      	nop
	}

	switch(ballId){
 80039a0:	7bbb      	ldrb	r3, [r7, #14]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HandleLineColorDetection+0x44>
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d004      	beq.n	80039b4 <HandleLineColorDetection+0x4c>
 80039aa:	e007      	b.n	80039bc <HandleLineColorDetection+0x54>
	case 0:
		ballcolorRPI = WHITE_BALL;
 80039ac:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <HandleLineColorDetection+0x6c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
		break;
 80039b2:	e007      	b.n	80039c4 <HandleLineColorDetection+0x5c>
	case 1:
		ballcolorRPI = YELLOW_BALL;
 80039b4:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <HandleLineColorDetection+0x6c>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
		break;
 80039ba:	e003      	b.n	80039c4 <HandleLineColorDetection+0x5c>
	default:
		ballcolorRPI = WHITE_BALL;
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HandleLineColorDetection+0x6c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
		break;
 80039c2:	bf00      	nop
	}
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	2000072c 	.word	0x2000072c
 80039d4:	2000072d 	.word	0x2000072d

080039d8 <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 80039de:	4b23      	ldr	r3, [pc, #140]	@ (8003a6c <DetectJunction+0x94>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e00e      	b.n	8003a08 <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 80039ea:	4a21      	ldr	r2, [pc, #132]	@ (8003a70 <DetectJunction+0x98>)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80039f6:	d904      	bls.n	8003a02 <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 80039f8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a6c <DetectJunction+0x94>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <DetectJunction+0x94>)
 8003a00:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b09      	cmp	r3, #9
 8003a0c:	dded      	ble.n	80039ea <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <DetectJunction+0x98>)
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 8003a14:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <DetectJunction+0x98>)
 8003a16:	8a5b      	ldrh	r3, [r3, #18]
 8003a18:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 8003a1a:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <DetectJunction+0x94>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	dd17      	ble.n	8003a52 <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003a28:	dd05      	ble.n	8003a36 <DetectJunction+0x5e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003a30:	dd01      	ble.n	8003a36 <DetectJunction+0x5e>
			return T_JUNCTION;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e014      	b.n	8003a60 <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003a3c:	dd01      	ble.n	8003a42 <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00e      	b.n	8003a60 <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003a48:	dd01      	ble.n	8003a4e <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e008      	b.n	8003a60 <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 8003a4e:	2304      	movs	r3, #4
 8003a50:	e006      	b.n	8003a60 <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 8003a52:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <DetectJunction+0x94>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <DetectJunction+0x86>
		return NO_LINE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 8003a5e:	2304      	movs	r3, #4
	}
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000784 	.word	0x20000784
 8003a70:	20000768 	.word	0x20000768

08003a74 <get_steering_feedback>:
	rfs.raw = 0;
	rrs.raw = 0;
}


float get_steering_feedback() {
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <get_steering_feedback+0x18>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	ee07 3a90 	vmov	s15, r3
}
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000738 	.word	0x20000738

08003a90 <CalculateSteeringAdjustment>:




/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
    float pTerm = STEERING_KP * m_cross_track_error;
 8003a96:	4b26      	ldr	r3, [pc, #152]	@ (8003b30 <CalculateSteeringAdjustment+0xa0>)
 8003a98:	ed93 7a00 	vldr	s14, [r3]
 8003a9c:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <CalculateSteeringAdjustment+0xa4>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a03 	vstr	s15, [r7, #12]
    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 8003aaa:	4b22      	ldr	r3, [pc, #136]	@ (8003b34 <CalculateSteeringAdjustment+0xa4>)
 8003aac:	ed93 7a00 	vldr	s14, [r3]
 8003ab0:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <CalculateSteeringAdjustment+0xa8>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
 8003ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aba:	4b20      	ldr	r3, [pc, #128]	@ (8003b3c <CalculateSteeringAdjustment+0xac>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac4:	edc7 7a02 	vstr	s15, [r7, #8]
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b40 <CalculateSteeringAdjustment+0xb0>)
 8003aca:	ed93 7a00 	vldr	s14, [r3]
 8003ace:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ade:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 8003ae2:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <CalculateSteeringAdjustment+0xb4>)
 8003ae4:	edd3 7a00 	vldr	s15, [r3]
 8003ae8:	eef1 7a67 	vneg.f32	s15, s15
 8003aec:	eef0 0a67 	vmov.f32	s1, s15
 8003af0:	ed97 0a01 	vldr	s0, [r7, #4]
 8003af4:	f009 feaa 	bl	800d84c <fmaxf>
 8003af8:	eeb0 7a40 	vmov.f32	s14, s0
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <CalculateSteeringAdjustment+0xb4>)
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	eef0 0a67 	vmov.f32	s1, s15
 8003b06:	eeb0 0a47 	vmov.f32	s0, s14
 8003b0a:	f009 febc 	bl	800d886 <fminf>
 8003b0e:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 8003b12:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <CalculateSteeringAdjustment+0xa4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a08      	ldr	r2, [pc, #32]	@ (8003b38 <CalculateSteeringAdjustment+0xa8>)
 8003b18:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <CalculateSteeringAdjustment+0xb8>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6013      	str	r3, [r2, #0]
    return adjustment;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	ee07 3a90 	vmov	s15, r3
}
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	0800dd7c 	.word	0x0800dd7c
 8003b34:	20000734 	.word	0x20000734
 8003b38:	20000730 	.word	0x20000730
 8003b3c:	0800dd80 	.word	0x0800dd80
 8003b40:	0800dd58 	.word	0x0800dd58
 8003b44:	0800dd84 	.word	0x0800dd84
 8003b48:	20000738 	.word	0x20000738

08003b4c <Sensors_Update>:




/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	int error = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 8003b56:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <Sensors_Update+0x98>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d114      	bne.n	8003b8a <Sensors_Update+0x3e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003b60:	4921      	ldr	r1, [pc, #132]	@ (8003be8 <Sensors_Update+0x9c>)
 8003b62:	4822      	ldr	r0, [pc, #136]	@ (8003bec <Sensors_Update+0xa0>)
 8003b64:	f7ff fdd0 	bl	8003708 <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8003b68:	491f      	ldr	r1, [pc, #124]	@ (8003be8 <Sensors_Update+0x9c>)
 8003b6a:	4820      	ldr	r0, [pc, #128]	@ (8003bec <Sensors_Update+0xa0>)
 8003b6c:	f7ff fe7d 	bl	800386a <RAYKHA_GetPositionForPID>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf0 <Sensors_Update+0xa4>)
 8003b74:	6013      	str	r3, [r2, #0]

		error = line_position;
 8003b76:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <Sensors_Update+0xa4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	607b      	str	r3, [r7, #4]

		junction = DetectJunction();
 8003b7c:	f7ff ff2c 	bl	80039d8 <DetectJunction>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <Sensors_Update+0xa8>)
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e01e      	b.n	8003bc8 <Sensors_Update+0x7c>
	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 8003b8a:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <Sensors_Update+0x98>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d10a      	bne.n	8003baa <Sensors_Update+0x5e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003b94:	4914      	ldr	r1, [pc, #80]	@ (8003be8 <Sensors_Update+0x9c>)
 8003b96:	4815      	ldr	r0, [pc, #84]	@ (8003bec <Sensors_Update+0xa0>)
 8003b98:	f7ff fdb6 	bl	8003708 <RAYKHA_ReadCalibrated>
		junction = DetectJunction();
 8003b9c:	f7ff ff1c 	bl	80039d8 <DetectJunction>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <Sensors_Update+0xa8>)
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	e00e      	b.n	8003bc8 <Sensors_Update+0x7c>
	}
	else if(g_steering_mode == STEER_LEFT_WALL){
 8003baa:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <Sensors_Update+0x98>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <Sensors_Update+0x6e>
		RangeAllIRSensors();
 8003bb4:	f000 f822 	bl	8003bfc <RangeAllIRSensors>
 8003bb8:	e006      	b.n	8003bc8 <Sensors_Update+0x7c>
		//UART_Transmit_Int(&huart6, ">R", rws.value);



    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <Sensors_Update+0x98>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d101      	bne.n	8003bc8 <Sensors_Update+0x7c>

		error = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	607b      	str	r3, [r7, #4]

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <Sensors_Update+0xac>)
 8003bd4:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 8003bd8:	f7ff ff5a 	bl	8003a90 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000064 	.word	0x20000064
 8003be8:	20000628 	.word	0x20000628
 8003bec:	20000768 	.word	0x20000768
 8003bf0:	2000077c 	.word	0x2000077c
 8003bf4:	20000780 	.word	0x20000780
 8003bf8:	20000734 	.word	0x20000734

08003bfc <RangeAllIRSensors>:


void RangeAllIRSensors(void){
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	analogReadIRs();
 8003c00:	f7fd feb8 	bl	8001974 <analogReadIRs>

	lfs.raw = readRawIR(IR_LEFT_FORWARD);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f7fd fed3 	bl	80019b0 <readRawIR>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003d78 <RangeAllIRSensors+0x17c>)
 8003c10:	801a      	strh	r2, [r3, #0]
	lrs.raw = readRawIR(IR_LEFT_BACK);
 8003c12:	2002      	movs	r0, #2
 8003c14:	f7fd fecc 	bl	80019b0 <readRawIR>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b57      	ldr	r3, [pc, #348]	@ (8003d7c <RangeAllIRSensors+0x180>)
 8003c1e:	801a      	strh	r2, [r3, #0]

	fs.raw = readRawIR(IR_FRONT);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fd fec5 	bl	80019b0 <readRawIR>
 8003c26:	4603      	mov	r3, r0
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b55      	ldr	r3, [pc, #340]	@ (8003d80 <RangeAllIRSensors+0x184>)
 8003c2c:	801a      	strh	r2, [r3, #0]

	rfs.raw = readRawIR(IR_RIGHT_FORWARD);
 8003c2e:	2004      	movs	r0, #4
 8003c30:	f7fd febe 	bl	80019b0 <readRawIR>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b52      	ldr	r3, [pc, #328]	@ (8003d84 <RangeAllIRSensors+0x188>)
 8003c3a:	801a      	strh	r2, [r3, #0]
	rrs.raw = readRawIR(IR_RIGHT_BACK);
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	f7fd feb7 	bl	80019b0 <readRawIR>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <RangeAllIRSensors+0x18c>)
 8003c48:	801a      	strh	r2, [r3, #0]


	if(lfs.raw < 400)lfs.raw = 400;
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d78 <RangeAllIRSensors+0x17c>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003c54:	d203      	bcs.n	8003c5e <RangeAllIRSensors+0x62>
 8003c56:	4b48      	ldr	r3, [pc, #288]	@ (8003d78 <RangeAllIRSensors+0x17c>)
 8003c58:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003c5c:	801a      	strh	r2, [r3, #0]
	if(lrs.raw < 300)lrs.raw = 300;
 8003c5e:	4b47      	ldr	r3, [pc, #284]	@ (8003d7c <RangeAllIRSensors+0x180>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003c68:	d203      	bcs.n	8003c72 <RangeAllIRSensors+0x76>
 8003c6a:	4b44      	ldr	r3, [pc, #272]	@ (8003d7c <RangeAllIRSensors+0x180>)
 8003c6c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c70:	801a      	strh	r2, [r3, #0]

	if(fs.raw < 400)fs.raw = 400;
 8003c72:	4b43      	ldr	r3, [pc, #268]	@ (8003d80 <RangeAllIRSensors+0x184>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003c7c:	d203      	bcs.n	8003c86 <RangeAllIRSensors+0x8a>
 8003c7e:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <RangeAllIRSensors+0x184>)
 8003c80:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003c84:	801a      	strh	r2, [r3, #0]

	if(rfs.raw < 350)rfs.raw = 350;
 8003c86:	4b3f      	ldr	r3, [pc, #252]	@ (8003d84 <RangeAllIRSensors+0x188>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8003c90:	d203      	bcs.n	8003c9a <RangeAllIRSensors+0x9e>
 8003c92:	4b3c      	ldr	r3, [pc, #240]	@ (8003d84 <RangeAllIRSensors+0x188>)
 8003c94:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003c98:	801a      	strh	r2, [r3, #0]
	if(rrs.raw < 200)rrs.raw = 200;
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <RangeAllIRSensors+0x18c>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ca2:	d802      	bhi.n	8003caa <RangeAllIRSensors+0xae>
 8003ca4:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <RangeAllIRSensors+0x18c>)
 8003ca6:	22c8      	movs	r2, #200	@ 0xc8
 8003ca8:	801a      	strh	r2, [r3, #0]


	lfs.value = getIRDistance(IR_LEFT_FORWARD, lfs.raw);
 8003caa:	4b33      	ldr	r3, [pc, #204]	@ (8003d78 <RangeAllIRSensors+0x17c>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f7fd feac 	bl	8001a10 <getIRDistance>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003d78 <RangeAllIRSensors+0x17c>)
 8003cbe:	605a      	str	r2, [r3, #4]
	lrs.value = getIRDistance(IR_LEFT_BACK, lrs.raw);
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d7c <RangeAllIRSensors+0x180>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	2002      	movs	r0, #2
 8003cca:	f7fd fea1 	bl	8001a10 <getIRDistance>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d7c <RangeAllIRSensors+0x180>)
 8003cd4:	605a      	str	r2, [r3, #4]

	fs.value = getIRDistance(IR_FRONT, fs.raw);
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d80 <RangeAllIRSensors+0x184>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	4619      	mov	r1, r3
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f7fd fe96 	bl	8001a10 <getIRDistance>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <RangeAllIRSensors+0x184>)
 8003cea:	605a      	str	r2, [r3, #4]

	rfs.value = getIRDistance(IR_RIGHT_FORWARD, rfs.raw);
 8003cec:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <RangeAllIRSensors+0x188>)
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	2004      	movs	r0, #4
 8003cf6:	f7fd fe8b 	bl	8001a10 <getIRDistance>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b21      	ldr	r3, [pc, #132]	@ (8003d84 <RangeAllIRSensors+0x188>)
 8003d00:	605a      	str	r2, [r3, #4]
	rrs.value = getIRDistance(IR_RIGHT_BACK, rrs.raw);
 8003d02:	4b21      	ldr	r3, [pc, #132]	@ (8003d88 <RangeAllIRSensors+0x18c>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	f7fd fe80 	bl	8001a10 <getIRDistance>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b1c      	ldr	r3, [pc, #112]	@ (8003d88 <RangeAllIRSensors+0x18c>)
 8003d16:	605a      	str	r2, [r3, #4]

	left_wall_avg = 0.5 * (lfs.value + lrs.value);
 8003d18:	4b17      	ldr	r3, [pc, #92]	@ (8003d78 <RangeAllIRSensors+0x17c>)
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4b17      	ldr	r3, [pc, #92]	@ (8003d7c <RangeAllIRSensors+0x180>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fc1e 	bl	8000564 <__aeabi_i2d>
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	4b17      	ldr	r3, [pc, #92]	@ (8003d8c <RangeAllIRSensors+0x190>)
 8003d2e:	f7fc fc83 	bl	8000638 <__aeabi_dmul>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fc ff55 	bl	8000be8 <__aeabi_d2uiz>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <RangeAllIRSensors+0x194>)
 8003d44:	701a      	strb	r2, [r3, #0]
	right_wall_avg = 0.5 * (rfs.value + rrs.value);
 8003d46:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <RangeAllIRSensors+0x188>)
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d88 <RangeAllIRSensors+0x18c>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc fc07 	bl	8000564 <__aeabi_i2d>
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <RangeAllIRSensors+0x190>)
 8003d5c:	f7fc fc6c 	bl	8000638 <__aeabi_dmul>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc ff3e 	bl	8000be8 <__aeabi_d2uiz>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <RangeAllIRSensors+0x198>)
 8003d72:	701a      	strb	r2, [r3, #0]

//	see_left_wall = (left_wall_avg < LEFT_THRESHOLD);
//	see_right_wall = (right_wall_avg < RIGHT_THRESHOLD);
//	see_front_wall = (fs.value < FRONT_THRESHOLD);
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	2000073c 	.word	0x2000073c
 8003d7c:	20000744 	.word	0x20000744
 8003d80:	2000074c 	.word	0x2000074c
 8003d84:	20000754 	.word	0x20000754
 8003d88:	2000075c 	.word	0x2000075c
 8003d8c:	3fe00000 	.word	0x3fe00000
 8003d90:	20000764 	.word	0x20000764
 8003d94:	20000765 	.word	0x20000765

08003d98 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <Servo_Init+0x3c>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d110      	bne.n	8003dcc <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fad7 	bl	8003360 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8003db2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8003db6:	2100      	movs	r1, #0
 8003db8:	4807      	ldr	r0, [pc, #28]	@ (8003dd8 <Servo_Init+0x40>)
 8003dba:	f007 fc66 	bl	800b68a <memset>
    servoCount = 0;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <Servo_Init+0x44>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <Servo_Init+0x3c>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e000      	b.n	8003dce <Servo_Init+0x36>
        return;
 8003dcc:	bf00      	nop
}
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200009c9 	.word	0x200009c9
 8003dd8:	20000788 	.word	0x20000788
 8003ddc:	200009c8 	.word	0x200009c8

08003de0 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle, float init_angle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	6139      	str	r1, [r7, #16]
 8003dea:	ed87 0a03 	vstr	s0, [r7, #12]
 8003dee:	edc7 0a02 	vstr	s1, [r7, #8]
 8003df2:	ed87 1a01 	vstr	s2, [r7, #4]
 8003df6:	75fb      	strb	r3, [r7, #23]
    // Check if initialized
    if (!isInitialized)
 8003df8:	4b69      	ldr	r3, [pc, #420]	@ (8003fa0 <Servo_Register+0x1c0>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <Servo_Register+0x26>
        return -1;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
 8003e04:	e0c7      	b.n	8003f96 <Servo_Register+0x1b6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8003e06:	4b67      	ldr	r3, [pc, #412]	@ (8003fa4 <Servo_Register+0x1c4>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	d902      	bls.n	8003e14 <Servo_Register+0x34>
        return -1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	e0c0      	b.n	8003f96 <Servo_Register+0x1b6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	d902      	bls.n	8003e20 <Servo_Register+0x40>
        return -1;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	e0ba      	b.n	8003f96 <Servo_Register+0x1b6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e01b      	b.n	8003e5e <Servo_Register+0x7e>
        if (servos[i].initialized && servos[i].channel == channel)
 8003e26:	4960      	ldr	r1, [pc, #384]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	3310      	adds	r3, #16
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <Servo_Register+0x78>
 8003e3c:	495a      	ldr	r1, [pc, #360]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	7dfa      	ldrb	r2, [r7, #23]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d102      	bne.n	8003e58 <Servo_Register+0x78>
            return -1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	e09e      	b.n	8003f96 <Servo_Register+0x1b6>
    for (int i = 0; i < servoCount; i++) {
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	4b51      	ldr	r3, [pc, #324]	@ (8003fa4 <Servo_Register+0x1c4>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4293      	cmp	r3, r2
 8003e68:	dbdd      	blt.n	8003e26 <Servo_Register+0x46>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8003e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e76:	d502      	bpl.n	8003e7e <Servo_Register+0x9e>
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 8003e7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e82:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003fac <Servo_Register+0x1cc>
 8003e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8e:	dd01      	ble.n	8003e94 <Servo_Register+0xb4>
 8003e90:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <Servo_Register+0x1d0>)
 8003e92:	60bb      	str	r3, [r7, #8]
    if (minAngle >= maxAngle) return -1;
 8003e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e98:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea4:	db02      	blt.n	8003eac <Servo_Register+0xcc>
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	e074      	b.n	8003f96 <Servo_Register+0x1b6>

    // Register the servo
    int servoId = servoCount;
 8003eac:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa4 <Servo_Register+0x1c4>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	61bb      	str	r3, [r7, #24]
    servos[servoId].channel = channel;
 8003eb2:	493d      	ldr	r1, [pc, #244]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	7dfa      	ldrb	r2, [r7, #23]
 8003ec2:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8003ec4:	4938      	ldr	r1, [pc, #224]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8003ed8:	4933      	ldr	r1, [pc, #204]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	601a      	str	r2, [r3, #0]
    //servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
    servos[servoId].currentAngle = init_angle;
 8003eec:	492e      	ldr	r1, [pc, #184]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	330c      	adds	r3, #12
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	601a      	str	r2, [r3, #0]
    servos[servoId].initialized = 1;
 8003f00:	4929      	ldr	r1, [pc, #164]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3310      	adds	r3, #16
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <Servo_Register+0x16c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3310      	adds	r3, #16
 8003f26:	4a20      	ldr	r2, [pc, #128]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	6939      	ldr	r1, [r7, #16]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f007 fbb2 	bl	800b69a <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8003f36:	491c      	ldr	r1, [pc, #112]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3320      	adds	r3, #32
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e00d      	b.n	8003f68 <Servo_Register+0x188>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	3310      	adds	r3, #16
 8003f58:	4a13      	ldr	r2, [pc, #76]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003f5a:	4413      	add	r3, r2
 8003f5c:	1c58      	adds	r0, r3, #1
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4a14      	ldr	r2, [pc, #80]	@ (8003fb4 <Servo_Register+0x1d4>)
 8003f62:	2110      	movs	r1, #16
 8003f64:	f007 faf6 	bl	800b554 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8003f68:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <Servo_Register+0x1c4>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <Servo_Register+0x1c4>)
 8003f72:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8003f74:	490c      	ldr	r1, [pc, #48]	@ (8003fa8 <Servo_Register+0x1c8>)
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	330c      	adds	r3, #12
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fa2a 	bl	80033e8 <PCA9685_SetServoAngle>

    return servoId;
 8003f94:	69bb      	ldr	r3, [r7, #24]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200009c9 	.word	0x200009c9
 8003fa4:	200009c8 	.word	0x200009c8
 8003fa8:	20000788 	.word	0x20000788
 8003fac:	43340000 	.word	0x43340000
 8003fb0:	43340000 	.word	0x43340000
 8003fb4:	0800dd44 	.word	0x0800dd44

08003fb8 <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db10      	blt.n	8003fec <Servo_SetAngle+0x34>
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <Servo_SetAngle+0xe0>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	da0a      	bge.n	8003fec <Servo_SetAngle+0x34>
 8003fd6:	4931      	ldr	r1, [pc, #196]	@ (800409c <Servo_SetAngle+0xe4>)
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3310      	adds	r3, #16
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <Servo_SetAngle+0x3a>
        return -1;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	e04d      	b.n	800408e <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8003ff2:	492a      	ldr	r1, [pc, #168]	@ (800409c <Servo_SetAngle+0xe4>)
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	3304      	adds	r3, #4
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	ed97 7a00 	vldr	s14, [r7]
 800400a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d509      	bpl.n	8004028 <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8004014:	4921      	ldr	r1, [pc, #132]	@ (800409c <Servo_SetAngle+0xe4>)
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3304      	adds	r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8004028:	491c      	ldr	r1, [pc, #112]	@ (800409c <Servo_SetAngle+0xe4>)
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3308      	adds	r3, #8
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ed97 7a00 	vldr	s14, [r7]
 8004040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004048:	dd09      	ble.n	800405e <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 800404a:	4914      	ldr	r1, [pc, #80]	@ (800409c <Servo_SetAngle+0xe4>)
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	3308      	adds	r3, #8
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 800405e:	490f      	ldr	r1, [pc, #60]	@ (800409c <Servo_SetAngle+0xe4>)
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	330c      	adds	r3, #12
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8004072:	490a      	ldr	r1, [pc, #40]	@ (800409c <Servo_SetAngle+0xe4>)
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	ed97 0a00 	vldr	s0, [r7]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff f9ae 	bl	80033e8 <PCA9685_SetServoAngle>

    return 0;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200009c8 	.word	0x200009c8
 800409c:	20000788 	.word	0x20000788

080040a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <HAL_MspInit+0x4c>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	4a0f      	ldr	r2, [pc, #60]	@ (80040ec <HAL_MspInit+0x4c>)
 80040b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040b6:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <HAL_MspInit+0x4c>)
 80040b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_MspInit+0x4c>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	4a08      	ldr	r2, [pc, #32]	@ (80040ec <HAL_MspInit+0x4c>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d2:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <HAL_MspInit+0x4c>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80040de:	2007      	movs	r0, #7
 80040e0:	f001 fd78 	bl	8005bd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800

080040f0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	@ 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a17      	ldr	r2, [pc, #92]	@ (800416c <HAL_ADC_MspInit+0x7c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d127      	bne.n	8004162 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <HAL_ADC_MspInit+0x80>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	4a15      	ldr	r2, [pc, #84]	@ (8004170 <HAL_ADC_MspInit+0x80>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004120:	6453      	str	r3, [r2, #68]	@ 0x44
 8004122:	4b13      	ldr	r3, [pc, #76]	@ (8004170 <HAL_ADC_MspInit+0x80>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_ADC_MspInit+0x80>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	4a0e      	ldr	r2, [pc, #56]	@ (8004170 <HAL_ADC_MspInit+0x80>)
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	6313      	str	r3, [r2, #48]	@ 0x30
 800413e:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <HAL_ADC_MspInit+0x80>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 800414a:	2301      	movs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800414e:	2303      	movs	r3, #3
 8004150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	4619      	mov	r1, r3
 800415c:	4805      	ldr	r0, [pc, #20]	@ (8004174 <HAL_ADC_MspInit+0x84>)
 800415e:	f002 f8f7 	bl	8006350 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004162:	bf00      	nop
 8004164:	3728      	adds	r7, #40	@ 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40012000 	.word	0x40012000
 8004170:	40023800 	.word	0x40023800
 8004174:	40020800 	.word	0x40020800

08004178 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08c      	sub	sp, #48	@ 0x30
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 031c 	add.w	r3, r7, #28
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a42      	ldr	r2, [pc, #264]	@ (80042a0 <HAL_I2C_MspInit+0x128>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d12c      	bne.n	80041f4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	4b41      	ldr	r3, [pc, #260]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	4a40      	ldr	r2, [pc, #256]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041aa:	4b3e      	ldr	r3, [pc, #248]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041b6:	23c0      	movs	r3, #192	@ 0xc0
 80041b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ba:	2312      	movs	r3, #18
 80041bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c2:	2303      	movs	r3, #3
 80041c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041c6:	2304      	movs	r3, #4
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ca:	f107 031c 	add.w	r3, r7, #28
 80041ce:	4619      	mov	r1, r3
 80041d0:	4835      	ldr	r0, [pc, #212]	@ (80042a8 <HAL_I2C_MspInit+0x130>)
 80041d2:	f002 f8bd 	bl	8006350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	4b32      	ldr	r3, [pc, #200]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	4a31      	ldr	r2, [pc, #196]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 80041e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041e6:	4b2f      	ldr	r3, [pc, #188]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80041f2:	e050      	b.n	8004296 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2c      	ldr	r2, [pc, #176]	@ (80042ac <HAL_I2C_MspInit+0x134>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d14b      	bne.n	8004296 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	4b28      	ldr	r3, [pc, #160]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	4a27      	ldr	r2, [pc, #156]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 8004208:	f043 0302 	orr.w	r3, r3, #2
 800420c:	6313      	str	r3, [r2, #48]	@ 0x30
 800420e:	4b25      	ldr	r3, [pc, #148]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	4a20      	ldr	r2, [pc, #128]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6313      	str	r3, [r2, #48]	@ 0x30
 800422a:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800423a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800423c:	2312      	movs	r3, #18
 800423e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004244:	2303      	movs	r3, #3
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004248:	2304      	movs	r3, #4
 800424a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424c:	f107 031c 	add.w	r3, r7, #28
 8004250:	4619      	mov	r1, r3
 8004252:	4815      	ldr	r0, [pc, #84]	@ (80042a8 <HAL_I2C_MspInit+0x130>)
 8004254:	f002 f87c 	bl	8006350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800425c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800425e:	2312      	movs	r3, #18
 8004260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004266:	2303      	movs	r3, #3
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800426a:	2304      	movs	r3, #4
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426e:	f107 031c 	add.w	r3, r7, #28
 8004272:	4619      	mov	r1, r3
 8004274:	480e      	ldr	r0, [pc, #56]	@ (80042b0 <HAL_I2C_MspInit+0x138>)
 8004276:	f002 f86b 	bl	8006350 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	4b09      	ldr	r3, [pc, #36]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	4a08      	ldr	r2, [pc, #32]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 8004284:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004288:	6413      	str	r3, [r2, #64]	@ 0x40
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <HAL_I2C_MspInit+0x12c>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
}
 8004296:	bf00      	nop
 8004298:	3730      	adds	r7, #48	@ 0x30
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40005400 	.word	0x40005400
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40020400 	.word	0x40020400
 80042ac:	40005800 	.word	0x40005800
 80042b0:	40020800 	.word	0x40020800

080042b4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	@ 0x30
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a32      	ldr	r2, [pc, #200]	@ (800439c <HAL_TIM_Encoder_MspInit+0xe8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d12d      	bne.n	8004332 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	4a30      	ldr	r2, [pc, #192]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042e6:	4b2e      	ldr	r3, [pc, #184]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	4b2a      	ldr	r3, [pc, #168]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	4a29      	ldr	r2, [pc, #164]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6313      	str	r3, [r2, #48]	@ 0x30
 8004302:	4b27      	ldr	r3, [pc, #156]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 800430e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431c:	2300      	movs	r3, #0
 800431e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004320:	2301      	movs	r3, #1
 8004322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	4619      	mov	r1, r3
 800432a:	481e      	ldr	r0, [pc, #120]	@ (80043a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800432c:	f002 f810 	bl	8006350 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004330:	e030      	b.n	8004394 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433a:	d12b      	bne.n	8004394 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	4b17      	ldr	r3, [pc, #92]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6413      	str	r3, [r2, #64]	@ 0x40
 800434c:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	4a0f      	ldr	r2, [pc, #60]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6313      	str	r3, [r2, #48]	@ 0x30
 8004368:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8004374:	2303      	movs	r3, #3
 8004376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004378:	2302      	movs	r3, #2
 800437a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004380:	2300      	movs	r3, #0
 8004382:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004384:	2301      	movs	r3, #1
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004388:	f107 031c 	add.w	r3, r7, #28
 800438c:	4619      	mov	r1, r3
 800438e:	4805      	ldr	r0, [pc, #20]	@ (80043a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004390:	f001 ffde 	bl	8006350 <HAL_GPIO_Init>
}
 8004394:	bf00      	nop
 8004396:	3730      	adds	r7, #48	@ 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40010000 	.word	0x40010000
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40020000 	.word	0x40020000

080043a8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0b      	ldr	r2, [pc, #44]	@ (80043e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10d      	bne.n	80043d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x40>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x40>)
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ca:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x40>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40023800 	.word	0x40023800

080043ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a21      	ldr	r2, [pc, #132]	@ (8004490 <HAL_TIM_MspPostInit+0xa4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d13b      	bne.n	8004486 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <HAL_TIM_MspPostInit+0xa8>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	4a1f      	ldr	r2, [pc, #124]	@ (8004494 <HAL_TIM_MspPostInit+0xa8>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6313      	str	r3, [r2, #48]	@ 0x30
 800441e:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <HAL_TIM_MspPostInit+0xa8>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	4b19      	ldr	r3, [pc, #100]	@ (8004494 <HAL_TIM_MspPostInit+0xa8>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	4a18      	ldr	r2, [pc, #96]	@ (8004494 <HAL_TIM_MspPostInit+0xa8>)
 8004434:	f043 0302 	orr.w	r3, r3, #2
 8004438:	6313      	str	r3, [r2, #48]	@ 0x30
 800443a:	4b16      	ldr	r3, [pc, #88]	@ (8004494 <HAL_TIM_MspPostInit+0xa8>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004446:	23c0      	movs	r3, #192	@ 0xc0
 8004448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004456:	2302      	movs	r3, #2
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445a:	f107 0314 	add.w	r3, r7, #20
 800445e:	4619      	mov	r1, r3
 8004460:	480d      	ldr	r0, [pc, #52]	@ (8004498 <HAL_TIM_MspPostInit+0xac>)
 8004462:	f001 ff75 	bl	8006350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004466:	2303      	movs	r3, #3
 8004468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	2302      	movs	r3, #2
 800446c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004472:	2300      	movs	r3, #0
 8004474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004476:	2302      	movs	r3, #2
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447a:	f107 0314 	add.w	r3, r7, #20
 800447e:	4619      	mov	r1, r3
 8004480:	4806      	ldr	r0, [pc, #24]	@ (800449c <HAL_TIM_MspPostInit+0xb0>)
 8004482:	f001 ff65 	bl	8006350 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004486:	bf00      	nop
 8004488:	3728      	adds	r7, #40	@ 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40000400 	.word	0x40000400
 8004494:	40023800 	.word	0x40023800
 8004498:	40020000 	.word	0x40020000
 800449c:	40020400 	.word	0x40020400

080044a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	@ 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a66      	ldr	r2, [pc, #408]	@ (8004658 <HAL_UART_MspInit+0x1b8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d12c      	bne.n	800451c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	4b65      	ldr	r3, [pc, #404]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4a64      	ldr	r2, [pc, #400]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d2:	4b62      	ldr	r3, [pc, #392]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	4b5e      	ldr	r3, [pc, #376]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a5d      	ldr	r2, [pc, #372]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b5b      	ldr	r3, [pc, #364]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044fa:	230c      	movs	r3, #12
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fe:	2302      	movs	r3, #2
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004506:	2303      	movs	r3, #3
 8004508:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800450a:	2307      	movs	r3, #7
 800450c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004512:	4619      	mov	r1, r3
 8004514:	4852      	ldr	r0, [pc, #328]	@ (8004660 <HAL_UART_MspInit+0x1c0>)
 8004516:	f001 ff1b 	bl	8006350 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800451a:	e099      	b.n	8004650 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a50      	ldr	r2, [pc, #320]	@ (8004664 <HAL_UART_MspInit+0x1c4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d12d      	bne.n	8004582 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	4b4c      	ldr	r3, [pc, #304]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	4a4b      	ldr	r2, [pc, #300]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004534:	6413      	str	r3, [r2, #64]	@ 0x40
 8004536:	4b49      	ldr	r3, [pc, #292]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	4b45      	ldr	r3, [pc, #276]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	4a44      	ldr	r2, [pc, #272]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	6313      	str	r3, [r2, #48]	@ 0x30
 8004552:	4b42      	ldr	r3, [pc, #264]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800455e:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004564:	2302      	movs	r3, #2
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004568:	2300      	movs	r3, #0
 800456a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456c:	2303      	movs	r3, #3
 800456e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004570:	2307      	movs	r3, #7
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004578:	4619      	mov	r1, r3
 800457a:	483b      	ldr	r0, [pc, #236]	@ (8004668 <HAL_UART_MspInit+0x1c8>)
 800457c:	f001 fee8 	bl	8006350 <HAL_GPIO_Init>
}
 8004580:	e066      	b.n	8004650 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a39      	ldr	r2, [pc, #228]	@ (800466c <HAL_UART_MspInit+0x1cc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d161      	bne.n	8004650 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	4b32      	ldr	r3, [pc, #200]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 8004592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004594:	4a31      	ldr	r2, [pc, #196]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 8004596:	f043 0320 	orr.w	r3, r3, #32
 800459a:	6453      	str	r3, [r2, #68]	@ 0x44
 800459c:	4b2f      	ldr	r3, [pc, #188]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 800459e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	4b2b      	ldr	r3, [pc, #172]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	4a2a      	ldr	r2, [pc, #168]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b8:	4b28      	ldr	r3, [pc, #160]	@ (800465c <HAL_UART_MspInit+0x1bc>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045c4:	23c0      	movs	r3, #192	@ 0xc0
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c8:	2302      	movs	r3, #2
 80045ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d0:	2303      	movs	r3, #3
 80045d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045d4:	2308      	movs	r3, #8
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045dc:	4619      	mov	r1, r3
 80045de:	4822      	ldr	r0, [pc, #136]	@ (8004668 <HAL_UART_MspInit+0x1c8>)
 80045e0:	f001 feb6 	bl	8006350 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80045e4:	4b22      	ldr	r3, [pc, #136]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 80045e6:	4a23      	ldr	r2, [pc, #140]	@ (8004674 <HAL_UART_MspInit+0x1d4>)
 80045e8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80045ea:	4b21      	ldr	r3, [pc, #132]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 80045ec:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80045f0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 8004600:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004604:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004606:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 8004608:	2200      	movs	r2, #0
 800460a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800460c:	4b18      	ldr	r3, [pc, #96]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 800460e:	2200      	movs	r2, #0
 8004610:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004612:	4b17      	ldr	r3, [pc, #92]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 8004614:	2200      	movs	r2, #0
 8004616:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004618:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 800461a:	2200      	movs	r2, #0
 800461c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800461e:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 8004620:	2200      	movs	r2, #0
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004624:	4812      	ldr	r0, [pc, #72]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 8004626:	f001 fb17 	bl	8005c58 <HAL_DMA_Init>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8004630:	f7fe fcea 	bl	8003008 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a0e      	ldr	r2, [pc, #56]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 8004638:	63da      	str	r2, [r3, #60]	@ 0x3c
 800463a:	4a0d      	ldr	r2, [pc, #52]	@ (8004670 <HAL_UART_MspInit+0x1d0>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004640:	2200      	movs	r2, #0
 8004642:	2100      	movs	r1, #0
 8004644:	2047      	movs	r0, #71	@ 0x47
 8004646:	f001 fad0 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800464a:	2047      	movs	r0, #71	@ 0x47
 800464c:	f001 fae9 	bl	8005c22 <HAL_NVIC_EnableIRQ>
}
 8004650:	bf00      	nop
 8004652:	3738      	adds	r7, #56	@ 0x38
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40004400 	.word	0x40004400
 800465c:	40023800 	.word	0x40023800
 8004660:	40020000 	.word	0x40020000
 8004664:	40004800 	.word	0x40004800
 8004668:	40020800 	.word	0x40020800
 800466c:	40011400 	.word	0x40011400
 8004670:	200005c4 	.word	0x200005c4
 8004674:	40026428 	.word	0x40026428

08004678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800467c:	bf00      	nop
 800467e:	e7fd      	b.n	800467c <NMI_Handler+0x4>

08004680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <HardFault_Handler+0x4>

08004688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <MemManage_Handler+0x4>

08004690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <BusFault_Handler+0x4>

08004698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <UsageFault_Handler+0x4>

080046a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046ae:	b480      	push	{r7}
 80046b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046d0:	f000 fd5c 	bl	800518c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 80046d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004708 <SysTick_Handler+0x3c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3301      	adds	r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <SysTick_Handler+0x3c>)
 80046e0:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 80046e2:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <SysTick_Handler+0x40>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <SysTick_Handler+0x3c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b13      	cmp	r3, #19
 80046f4:	d904      	bls.n	8004700 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 80046f6:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <SysTick_Handler+0x3c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 80046fc:	f000 f98e 	bl	8004a1c <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8004700:	f000 f9b8 	bl	8004a74 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200009ca 	.word	0x200009ca
 800470c:	20000624 	.word	0x20000624

08004710 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004714:	2008      	movs	r0, #8
 8004716:	f001 ffc9 	bl	80066ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}

0800471e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004722:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004726:	f001 ffc1 	bl	80066ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800472a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800472e:	f001 ffbd 	bl	80066ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800473c:	4802      	ldr	r0, [pc, #8]	@ (8004748 <DMA2_Stream1_IRQHandler+0x10>)
 800473e:	f001 fbcb 	bl	8005ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	200005c4 	.word	0x200005c4

0800474c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0

  /* USER CODE END USART6_IRQn 0 */
  //HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */
	/* Check if receive interrupt */
	if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) != RESET) {
 8004750:	4b3f      	ldr	r3, [pc, #252]	@ (8004850 <USART6_IRQHandler+0x104>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	d173      	bne.n	8004846 <USART6_IRQHandler+0xfa>
	    /* Read byte from UART */
		rxByte = (uint8_t)(huart6.Instance->DR & 0xFF);
 800475e:	4b3c      	ldr	r3, [pc, #240]	@ (8004850 <USART6_IRQHandler+0x104>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4b3b      	ldr	r3, [pc, #236]	@ (8004854 <USART6_IRQHandler+0x108>)
 8004768:	701a      	strb	r2, [r3, #0]

	    /* State machine for packet reception */
	    switch (rxState) {
 800476a:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <USART6_IRQHandler+0x10c>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d85e      	bhi.n	8004830 <USART6_IRQHandler+0xe4>
 8004772:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <USART6_IRQHandler+0x2c>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	0800478d 	.word	0x0800478d
 800477c:	0800479d 	.word	0x0800479d
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047d3 	.word	0x080047d3
 8004788:	0800481d 	.word	0x0800481d
	      case WAITING_FOR_START:
	        if (rxByte == START_MARKER) {
 800478c:	4b31      	ldr	r3, [pc, #196]	@ (8004854 <USART6_IRQHandler+0x108>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b3c      	cmp	r3, #60	@ 0x3c
 8004792:	d151      	bne.n	8004838 <USART6_IRQHandler+0xec>
	          rxState = WAITING_FOR_CMD;
 8004794:	4b30      	ldr	r3, [pc, #192]	@ (8004858 <USART6_IRQHandler+0x10c>)
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 800479a:	e04d      	b.n	8004838 <USART6_IRQHandler+0xec>

	      case WAITING_FOR_CMD:
	        rxCmd = rxByte;
 800479c:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <USART6_IRQHandler+0x108>)
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	4b2e      	ldr	r3, [pc, #184]	@ (800485c <USART6_IRQHandler+0x110>)
 80047a2:	701a      	strb	r2, [r3, #0]
	        rxState = WAITING_FOR_LENGTH;
 80047a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004858 <USART6_IRQHandler+0x10c>)
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
	        break;
 80047aa:	e046      	b.n	800483a <USART6_IRQHandler+0xee>

	      case WAITING_FOR_LENGTH:
	        rxLength = rxByte;
 80047ac:	4b29      	ldr	r3, [pc, #164]	@ (8004854 <USART6_IRQHandler+0x108>)
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004860 <USART6_IRQHandler+0x114>)
 80047b2:	701a      	strb	r2, [r3, #0]
	        rxIndex = 0;
 80047b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <USART6_IRQHandler+0x118>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]

	        if (rxLength > 0) {
 80047ba:	4b29      	ldr	r3, [pc, #164]	@ (8004860 <USART6_IRQHandler+0x114>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <USART6_IRQHandler+0x7e>
	          rxState = RECEIVING_DATA;
 80047c2:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <USART6_IRQHandler+0x10c>)
 80047c4:	2203      	movs	r2, #3
 80047c6:	701a      	strb	r2, [r3, #0]
	        } else {
	          rxState = WAITING_FOR_END;
	        }
	        break;
 80047c8:	e037      	b.n	800483a <USART6_IRQHandler+0xee>
	          rxState = WAITING_FOR_END;
 80047ca:	4b23      	ldr	r3, [pc, #140]	@ (8004858 <USART6_IRQHandler+0x10c>)
 80047cc:	2204      	movs	r2, #4
 80047ce:	701a      	strb	r2, [r3, #0]
	        break;
 80047d0:	e033      	b.n	800483a <USART6_IRQHandler+0xee>

	      case RECEIVING_DATA:
	        if (rxIndex < rxLength && rxIndex < MAX_BUFFER_SIZE) {
 80047d2:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <USART6_IRQHandler+0x118>)
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	4b22      	ldr	r3, [pc, #136]	@ (8004860 <USART6_IRQHandler+0x114>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d219      	bcs.n	8004812 <USART6_IRQHandler+0xc6>
 80047de:	4b21      	ldr	r3, [pc, #132]	@ (8004864 <USART6_IRQHandler+0x118>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	db14      	blt.n	8004812 <USART6_IRQHandler+0xc6>
	          rxBuffer[rxIndex++] = rxByte;
 80047e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004864 <USART6_IRQHandler+0x118>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	b2d1      	uxtb	r1, r2
 80047f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004864 <USART6_IRQHandler+0x118>)
 80047f2:	7011      	strb	r1, [r2, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <USART6_IRQHandler+0x108>)
 80047f8:	7819      	ldrb	r1, [r3, #0]
 80047fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <USART6_IRQHandler+0x11c>)
 80047fc:	5499      	strb	r1, [r3, r2]

	          if (rxIndex >= rxLength) {
 80047fe:	4b19      	ldr	r3, [pc, #100]	@ (8004864 <USART6_IRQHandler+0x118>)
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	4b17      	ldr	r3, [pc, #92]	@ (8004860 <USART6_IRQHandler+0x114>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d307      	bcc.n	800481a <USART6_IRQHandler+0xce>
	            rxState = WAITING_FOR_END;
 800480a:	4b13      	ldr	r3, [pc, #76]	@ (8004858 <USART6_IRQHandler+0x10c>)
 800480c:	2204      	movs	r2, #4
 800480e:	701a      	strb	r2, [r3, #0]
	          if (rxIndex >= rxLength) {
 8004810:	e003      	b.n	800481a <USART6_IRQHandler+0xce>
	          }
	        } else {
	          /* Buffer overflow, reset state */
	          rxState = WAITING_FOR_START;
 8004812:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <USART6_IRQHandler+0x10c>)
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8004818:	e00f      	b.n	800483a <USART6_IRQHandler+0xee>
 800481a:	e00e      	b.n	800483a <USART6_IRQHandler+0xee>

	      case WAITING_FOR_END:
	        if (rxByte == END_MARKER) {
 800481c:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <USART6_IRQHandler+0x108>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b3e      	cmp	r3, #62	@ 0x3e
 8004822:	d101      	bne.n	8004828 <USART6_IRQHandler+0xdc>
	          /* Complete packet received, process it */
	          ProcessCommand();
 8004824:	f7fc fbe6 	bl	8000ff4 <ProcessCommand>
	        }
	        /* Reset state machine for next packet */
	        rxState = WAITING_FOR_START;
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <USART6_IRQHandler+0x10c>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
	        break;
 800482e:	e004      	b.n	800483a <USART6_IRQHandler+0xee>

	      default:
	        rxState = WAITING_FOR_START;
 8004830:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <USART6_IRQHandler+0x10c>)
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
	        break;
 8004836:	e000      	b.n	800483a <USART6_IRQHandler+0xee>
	        break;
 8004838:	bf00      	nop
	    }

	    /* Clear interrupt flag - use _CLEAR_FLAG instead of _CLEAR_IT */
	    __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);
 800483a:	4b05      	ldr	r3, [pc, #20]	@ (8004850 <USART6_IRQHandler+0x104>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f06f 0220 	mvn.w	r2, #32
 8004842:	601a      	str	r2, [r3, #0]
	  else {
	    HAL_UART_IRQHandler(&huart6);
	  }

  /* USER CODE END USART6_IRQn 1 */
}
 8004844:	e002      	b.n	800484c <USART6_IRQHandler+0x100>
	    HAL_UART_IRQHandler(&huart6);
 8004846:	4802      	ldr	r0, [pc, #8]	@ (8004850 <USART6_IRQHandler+0x104>)
 8004848:	f005 fa46 	bl	8009cd8 <HAL_UART_IRQHandler>
}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}
 8004850:	2000057c 	.word	0x2000057c
 8004854:	200002df 	.word	0x200002df
 8004858:	20000258 	.word	0x20000258
 800485c:	200002dc 	.word	0x200002dc
 8004860:	200002dd 	.word	0x200002dd
 8004864:	200002de 	.word	0x200002de
 8004868:	2000025c 	.word	0x2000025c

0800486c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return 1;
 8004870:	2301      	movs	r3, #1
}
 8004872:	4618      	mov	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_kill>:

int _kill(int pid, int sig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004886:	f006 ff65 	bl	800b754 <__errno>
 800488a:	4603      	mov	r3, r0
 800488c:	2216      	movs	r2, #22
 800488e:	601a      	str	r2, [r3, #0]
  return -1;
 8004890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <_exit>:

void _exit (int status)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048a4:	f04f 31ff 	mov.w	r1, #4294967295
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ffe7 	bl	800487c <_kill>
  while (1) {}    /* Make sure we hang here */
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <_exit+0x12>

080048b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e00a      	b.n	80048da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048c4:	f3af 8000 	nop.w
 80048c8:	4601      	mov	r1, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	60ba      	str	r2, [r7, #8]
 80048d0:	b2ca      	uxtb	r2, r1
 80048d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	3301      	adds	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	dbf0      	blt.n	80048c4 <_read+0x12>
  }

  return len;
 80048e2:	687b      	ldr	r3, [r7, #4]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e009      	b.n	8004912 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	60ba      	str	r2, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	3301      	adds	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	dbf1      	blt.n	80048fe <_write+0x12>
  }
  return len;
 800491a:	687b      	ldr	r3, [r7, #4]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <_close>:

int _close(int file)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800494c:	605a      	str	r2, [r3, #4]
  return 0;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <_isatty>:

int _isatty(int file)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004964:	2301      	movs	r3, #1
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004994:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <_sbrk+0x5c>)
 8004996:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <_sbrk+0x60>)
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049a0:	4b13      	ldr	r3, [pc, #76]	@ (80049f0 <_sbrk+0x64>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049a8:	4b11      	ldr	r3, [pc, #68]	@ (80049f0 <_sbrk+0x64>)
 80049aa:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <_sbrk+0x68>)
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049ae:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <_sbrk+0x64>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d207      	bcs.n	80049cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049bc:	f006 feca 	bl	800b754 <__errno>
 80049c0:	4603      	mov	r3, r0
 80049c2:	220c      	movs	r2, #12
 80049c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ca:	e009      	b.n	80049e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049cc:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <_sbrk+0x64>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049d2:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <_sbrk+0x64>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	4a05      	ldr	r2, [pc, #20]	@ (80049f0 <_sbrk+0x64>)
 80049dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20020000 	.word	0x20020000
 80049ec:	00000400 	.word	0x00000400
 80049f0:	200009cc 	.word	0x200009cc
 80049f4:	20000f28 	.word	0x20000f28

080049f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <SystemInit+0x20>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a02:	4a05      	ldr	r2, [pc, #20]	@ (8004a18 <SystemInit+0x20>)
 8004a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	ed2d 8b02 	vpush	{d8}
 8004a22:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 8004a24:	f7fc feec 	bl	8001800 <update_Encoder_Data>
		Motion_Update(&motion);
 8004a28:	4810      	ldr	r0, [pc, #64]	@ (8004a6c <SysTickFunction+0x50>)
 8004a2a:	f7fe fb3f 	bl	80030ac <Motion_Update>
		Sensors_Update();
 8004a2e:	f7ff f88d 	bl	8003b4c <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 8004a32:	480e      	ldr	r0, [pc, #56]	@ (8004a6c <SysTickFunction+0x50>)
 8004a34:	f7fe fb1a 	bl	800306c <Motion_Velocity>
 8004a38:	eeb0 8a40 	vmov.f32	s16, s0
 8004a3c:	480b      	ldr	r0, [pc, #44]	@ (8004a6c <SysTickFunction+0x50>)
 8004a3e:	f7fe fb25 	bl	800308c <Motion_Omega>
 8004a42:	eef0 8a40 	vmov.f32	s17, s0
 8004a46:	f7ff f815 	bl	8003a74 <get_steering_feedback>
 8004a4a:	eef0 7a40 	vmov.f32	s15, s0
 8004a4e:	eeb0 1a67 	vmov.f32	s2, s15
 8004a52:	eef0 0a68 	vmov.f32	s1, s17
 8004a56:	eeb0 0a48 	vmov.f32	s0, s16
 8004a5a:	4805      	ldr	r0, [pc, #20]	@ (8004a70 <SysTickFunction+0x54>)
 8004a5c:	f7fc fca6 	bl	80013ac <UpdateControllers>
		//UART_Transmit_Int(&huart3, "L", linecolorRPI);
		//UART_Transmit_Int(&huart3, "B", ballcolorRPI);



}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	ecbd 8b02 	vpop	{d8}
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000654 	.word	0x20000654
 8004a70:	20000708 	.word	0x20000708

08004a74 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8004a7a:	f7fc fe99 	bl	80017b0 <getRightEncoderCounts>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461a      	mov	r2, r3
 8004a82:	f647 1318 	movw	r3, #31000	@ 0x7918
 8004a86:	429a      	cmp	r2, r3
 8004a88:	dc15      	bgt.n	8004ab6 <CheckEncoderCounts+0x42>
 8004a8a:	f7fc fe9d 	bl	80017c8 <getLeftEncoderCounts>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	461a      	mov	r2, r3
 8004a92:	f647 1318 	movw	r3, #31000	@ 0x7918
 8004a96:	429a      	cmp	r2, r3
 8004a98:	dc0d      	bgt.n	8004ab6 <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8004a9a:	f7fc fe89 	bl	80017b0 <getRightEncoderCounts>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae0 <CheckEncoderCounts+0x6c>)
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	db06      	blt.n	8004ab6 <CheckEncoderCounts+0x42>
 8004aa8:	f7fc fe8e 	bl	80017c8 <getLeftEncoderCounts>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <CheckEncoderCounts+0x6c>)
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	da10      	bge.n	8004ad8 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8004ab6:	f7fc fe7b 	bl	80017b0 <getRightEncoderCounts>
 8004aba:	4603      	mov	r3, r0
 8004abc:	b29c      	uxth	r4, r3
 8004abe:	f7fc fe83 	bl	80017c8 <getLeftEncoderCounts>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	1ae3      	subs	r3, r4, r3
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 8004acc:	f7fc fe88 	bl	80017e0 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8004ad0:	4a04      	ldr	r2, [pc, #16]	@ (8004ae4 <CheckEncoderCounts+0x70>)
 8004ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad6:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}
 8004ae0:	ffff86e8 	.word	0xffff86e8
 8004ae4:	40010000 	.word	0x40010000

08004ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004aec:	f7ff ff84 	bl	80049f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004af0:	480c      	ldr	r0, [pc, #48]	@ (8004b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004af2:	490d      	ldr	r1, [pc, #52]	@ (8004b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004af4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004af8:	e002      	b.n	8004b00 <LoopCopyDataInit>

08004afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004afe:	3304      	adds	r3, #4

08004b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b04:	d3f9      	bcc.n	8004afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b06:	4a0a      	ldr	r2, [pc, #40]	@ (8004b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b08:	4c0a      	ldr	r4, [pc, #40]	@ (8004b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b0c:	e001      	b.n	8004b12 <LoopFillZerobss>

08004b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b10:	3204      	adds	r2, #4

08004b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b14:	d3fb      	bcc.n	8004b0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004b16:	f006 fe23 	bl	800b760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b1a:	f7fd fe0f 	bl	800273c <main>
  bx  lr    
 8004b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b28:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8004b2c:	0800e52c 	.word	0x0800e52c
  ldr r2, =_sbss
 8004b30:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8004b34:	20000f28 	.word	0x20000f28

08004b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b38:	e7fe      	b.n	8004b38 <ADC_IRQHandler>

08004b3a <i2c_mux_select>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 8004b44:	2201      	movs	r2, #1
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f805 	bl	8004b62 <i2c_mux_select_multi>
 8004b58:	4603      	mov	r3, r0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <i2c_mux_select_multi>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af02      	add	r7, sp, #8
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <i2c_mux_select_multi+0x18>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e02f      	b.n	8004bda <i2c_mux_select_multi+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7a9b      	ldrb	r3, [r3, #10]
 8004b7e:	3370      	adds	r3, #112	@ 0x70
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	b299      	uxth	r1, r3
 8004b8e:	1cfa      	adds	r2, r7, #3
 8004b90:	2301      	movs	r3, #1
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	2301      	movs	r3, #1
 8004b96:	f001 fef1 	bl	800697c <HAL_I2C_Master_Transmit>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <i2c_mux_select_multi+0x46>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e018      	b.n	8004bda <i2c_mux_select_multi+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	b299      	uxth	r1, r3
 8004bb4:	f107 020d 	add.w	r2, r7, #13
 8004bb8:	2301      	movs	r3, #1
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f001 ffdb 	bl	8006b78 <HAL_I2C_Master_Receive>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 8004bc6:	7bbb      	ldrb	r3, [r7, #14]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d103      	bne.n	8004bd4 <i2c_mux_select_multi+0x72>
 8004bcc:	7b7a      	ldrb	r2, [r7, #13]
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <i2c_mux_select_multi+0x76>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <i2c_mux_select_multi+0x78>
	return 0;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0

	i2c_mux_select(&mux, 0);
 8004bea:	2100      	movs	r1, #0
 8004bec:	485f      	ldr	r0, [pc, #380]	@ (8004d6c <SSD1306_Init+0x188>)
 8004bee:	f7ff ffa4 	bl	8004b3a <i2c_mux_select>

	/* Init I2C */
	ssd1306_I2C_Init();
 8004bf2:	f000 f9cf 	bl	8004f94 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004bf6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2178      	movs	r1, #120	@ 0x78
 8004bfe:	485c      	ldr	r0, [pc, #368]	@ (8004d70 <SSD1306_Init+0x18c>)
 8004c00:	f002 fd18 	bl	8007634 <HAL_I2C_IsDeviceReady>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <SSD1306_Init+0x2a>
		/* Return false */
		return 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e0a9      	b.n	8004d62 <SSD1306_Init+0x17e>
	}

	/* A little delay */
	uint32_t p = 2500;
 8004c0e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8004c12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004c14:	e002      	b.n	8004c1c <SSD1306_Init+0x38>
		p--;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f9      	bne.n	8004c16 <SSD1306_Init+0x32>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8004c22:	22ae      	movs	r2, #174	@ 0xae
 8004c24:	2100      	movs	r1, #0
 8004c26:	2078      	movs	r0, #120	@ 0x78
 8004c28:	f000 fa3a 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	2100      	movs	r1, #0
 8004c30:	2078      	movs	r0, #120	@ 0x78
 8004c32:	f000 fa35 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004c36:	2210      	movs	r2, #16
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2078      	movs	r0, #120	@ 0x78
 8004c3c:	f000 fa30 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004c40:	22b0      	movs	r2, #176	@ 0xb0
 8004c42:	2100      	movs	r1, #0
 8004c44:	2078      	movs	r0, #120	@ 0x78
 8004c46:	f000 fa2b 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004c4a:	22c8      	movs	r2, #200	@ 0xc8
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	2078      	movs	r0, #120	@ 0x78
 8004c50:	f000 fa26 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004c54:	2200      	movs	r2, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	2078      	movs	r0, #120	@ 0x78
 8004c5a:	f000 fa21 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004c5e:	2210      	movs	r2, #16
 8004c60:	2100      	movs	r1, #0
 8004c62:	2078      	movs	r0, #120	@ 0x78
 8004c64:	f000 fa1c 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004c68:	2240      	movs	r2, #64	@ 0x40
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	2078      	movs	r0, #120	@ 0x78
 8004c6e:	f000 fa17 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004c72:	2281      	movs	r2, #129	@ 0x81
 8004c74:	2100      	movs	r1, #0
 8004c76:	2078      	movs	r0, #120	@ 0x78
 8004c78:	f000 fa12 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004c7c:	22ff      	movs	r2, #255	@ 0xff
 8004c7e:	2100      	movs	r1, #0
 8004c80:	2078      	movs	r0, #120	@ 0x78
 8004c82:	f000 fa0d 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004c86:	22a1      	movs	r2, #161	@ 0xa1
 8004c88:	2100      	movs	r1, #0
 8004c8a:	2078      	movs	r0, #120	@ 0x78
 8004c8c:	f000 fa08 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004c90:	22a6      	movs	r2, #166	@ 0xa6
 8004c92:	2100      	movs	r1, #0
 8004c94:	2078      	movs	r0, #120	@ 0x78
 8004c96:	f000 fa03 	bl	80050a0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004c9a:	22a8      	movs	r2, #168	@ 0xa8
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	2078      	movs	r0, #120	@ 0x78
 8004ca0:	f000 f9fe 	bl	80050a0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8004ca4:	223f      	movs	r2, #63	@ 0x3f
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2078      	movs	r0, #120	@ 0x78
 8004caa:	f000 f9f9 	bl	80050a0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004cae:	22a4      	movs	r2, #164	@ 0xa4
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2078      	movs	r0, #120	@ 0x78
 8004cb4:	f000 f9f4 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004cb8:	22d3      	movs	r2, #211	@ 0xd3
 8004cba:	2100      	movs	r1, #0
 8004cbc:	2078      	movs	r0, #120	@ 0x78
 8004cbe:	f000 f9ef 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	2078      	movs	r0, #120	@ 0x78
 8004cc8:	f000 f9ea 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ccc:	22d5      	movs	r2, #213	@ 0xd5
 8004cce:	2100      	movs	r1, #0
 8004cd0:	2078      	movs	r0, #120	@ 0x78
 8004cd2:	f000 f9e5 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004cd6:	22f0      	movs	r2, #240	@ 0xf0
 8004cd8:	2100      	movs	r1, #0
 8004cda:	2078      	movs	r0, #120	@ 0x78
 8004cdc:	f000 f9e0 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004ce0:	22d9      	movs	r2, #217	@ 0xd9
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2078      	movs	r0, #120	@ 0x78
 8004ce6:	f000 f9db 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004cea:	2222      	movs	r2, #34	@ 0x22
 8004cec:	2100      	movs	r1, #0
 8004cee:	2078      	movs	r0, #120	@ 0x78
 8004cf0:	f000 f9d6 	bl	80050a0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004cf4:	22da      	movs	r2, #218	@ 0xda
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2078      	movs	r0, #120	@ 0x78
 8004cfa:	f000 f9d1 	bl	80050a0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8004cfe:	2212      	movs	r2, #18
 8004d00:	2100      	movs	r1, #0
 8004d02:	2078      	movs	r0, #120	@ 0x78
 8004d04:	f000 f9cc 	bl	80050a0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004d08:	22db      	movs	r2, #219	@ 0xdb
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2078      	movs	r0, #120	@ 0x78
 8004d0e:	f000 f9c7 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004d12:	2220      	movs	r2, #32
 8004d14:	2100      	movs	r1, #0
 8004d16:	2078      	movs	r0, #120	@ 0x78
 8004d18:	f000 f9c2 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004d1c:	228d      	movs	r2, #141	@ 0x8d
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2078      	movs	r0, #120	@ 0x78
 8004d22:	f000 f9bd 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004d26:	2214      	movs	r2, #20
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2078      	movs	r0, #120	@ 0x78
 8004d2c:	f000 f9b8 	bl	80050a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004d30:	22af      	movs	r2, #175	@ 0xaf
 8004d32:	2100      	movs	r1, #0
 8004d34:	2078      	movs	r0, #120	@ 0x78
 8004d36:	f000 f9b3 	bl	80050a0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8004d3a:	222e      	movs	r2, #46	@ 0x2e
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	2078      	movs	r0, #120	@ 0x78
 8004d40:	f000 f9ae 	bl	80050a0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004d44:	2000      	movs	r0, #0
 8004d46:	f000 f845 	bl	8004dd4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004d4a:	f000 f815 	bl	8004d78 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8004d4e:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <SSD1306_Init+0x190>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004d54:	4b07      	ldr	r3, [pc, #28]	@ (8004d74 <SSD1306_Init+0x190>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004d5a:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <SSD1306_Init+0x190>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8004d60:	2301      	movs	r3, #1
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000003c 	.word	0x2000003c
 8004d70:	2000036c 	.word	0x2000036c
 8004d74:	20000dd0 	.word	0x20000dd0

08004d78 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004d7e:	2300      	movs	r3, #0
 8004d80:	71fb      	strb	r3, [r7, #7]
 8004d82:	e01d      	b.n	8004dc0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	3b50      	subs	r3, #80	@ 0x50
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	2078      	movs	r0, #120	@ 0x78
 8004d90:	f000 f986 	bl	80050a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2100      	movs	r1, #0
 8004d98:	2078      	movs	r0, #120	@ 0x78
 8004d9a:	f000 f981 	bl	80050a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004d9e:	2210      	movs	r2, #16
 8004da0:	2100      	movs	r1, #0
 8004da2:	2078      	movs	r0, #120	@ 0x78
 8004da4:	f000 f97c 	bl	80050a0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	01db      	lsls	r3, r3, #7
 8004dac:	4a08      	ldr	r2, [pc, #32]	@ (8004dd0 <SSD1306_UpdateScreen+0x58>)
 8004dae:	441a      	add	r2, r3
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	2140      	movs	r1, #64	@ 0x40
 8004db4:	2078      	movs	r0, #120	@ 0x78
 8004db6:	f000 f907 	bl	8004fc8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	71fb      	strb	r3, [r7, #7]
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	2b07      	cmp	r3, #7
 8004dc4:	d9de      	bls.n	8004d84 <SSD1306_UpdateScreen+0xc>
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	200009d0 	.word	0x200009d0

08004dd4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <SSD1306_Fill+0x14>
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <SSD1306_Fill+0x16>
 8004de8:	23ff      	movs	r3, #255	@ 0xff
 8004dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dee:	4619      	mov	r1, r3
 8004df0:	4803      	ldr	r0, [pc, #12]	@ (8004e00 <SSD1306_Fill+0x2c>)
 8004df2:	f006 fc4a 	bl	800b68a <memset>
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200009d0 	.word	0x200009d0

08004e04 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	80fb      	strh	r3, [r7, #6]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	80bb      	strh	r3, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	70fb      	strb	r3, [r7, #3]
	if (
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e1a:	d848      	bhi.n	8004eae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004e1c:	88bb      	ldrh	r3, [r7, #4]
 8004e1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e20:	d845      	bhi.n	8004eae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004e22:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <SSD1306_DrawPixel+0xb8>)
 8004e24:	791b      	ldrb	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d006      	beq.n	8004e38 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d11a      	bne.n	8004e74 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	88bb      	ldrh	r3, [r7, #4]
 8004e42:	08db      	lsrs	r3, r3, #3
 8004e44:	b298      	uxth	r0, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	01db      	lsls	r3, r3, #7
 8004e4a:	4413      	add	r3, r2
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <SSD1306_DrawPixel+0xbc>)
 8004e4e:	5cd3      	ldrb	r3, [r2, r3]
 8004e50:	b25a      	sxtb	r2, r3
 8004e52:	88bb      	ldrh	r3, [r7, #4]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	2101      	movs	r1, #1
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	b25b      	sxtb	r3, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b259      	sxtb	r1, r3
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	4603      	mov	r3, r0
 8004e68:	01db      	lsls	r3, r3, #7
 8004e6a:	4413      	add	r3, r2
 8004e6c:	b2c9      	uxtb	r1, r1
 8004e6e:	4a14      	ldr	r2, [pc, #80]	@ (8004ec0 <SSD1306_DrawPixel+0xbc>)
 8004e70:	54d1      	strb	r1, [r2, r3]
 8004e72:	e01d      	b.n	8004eb0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	88bb      	ldrh	r3, [r7, #4]
 8004e78:	08db      	lsrs	r3, r3, #3
 8004e7a:	b298      	uxth	r0, r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	01db      	lsls	r3, r3, #7
 8004e80:	4413      	add	r3, r2
 8004e82:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec0 <SSD1306_DrawPixel+0xbc>)
 8004e84:	5cd3      	ldrb	r3, [r2, r3]
 8004e86:	b25a      	sxtb	r2, r3
 8004e88:	88bb      	ldrh	r3, [r7, #4]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	2101      	movs	r1, #1
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b259      	sxtb	r1, r3
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	01db      	lsls	r3, r3, #7
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b2c9      	uxtb	r1, r1
 8004ea8:	4a05      	ldr	r2, [pc, #20]	@ (8004ec0 <SSD1306_DrawPixel+0xbc>)
 8004eaa:	54d1      	strb	r1, [r2, r3]
 8004eac:	e000      	b.n	8004eb0 <SSD1306_DrawPixel+0xac>
		return;
 8004eae:	bf00      	nop
	}
}
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000dd0 	.word	0x20000dd0
 8004ec0:	200009d0 	.word	0x200009d0

08004ec4 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60ba      	str	r2, [r7, #8]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	81fb      	strh	r3, [r7, #14]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	81bb      	strh	r3, [r7, #12]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ede:	3307      	adds	r3, #7
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da00      	bge.n	8004ee6 <SSD1306_DrawBitmap+0x22>
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	10db      	asrs	r3, r3, #3
 8004ee8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	82bb      	strh	r3, [r7, #20]
 8004ef2:	e044      	b.n	8004f7e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	827b      	strh	r3, [r7, #18]
 8004ef8:	e02f      	b.n	8004f5a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8004efa:	8a7b      	ldrh	r3, [r7, #18]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
 8004f0a:	e012      	b.n	8004f32 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004f0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f10:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f14:	fb03 f202 	mul.w	r2, r3, r2
 8004f18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	da00      	bge.n	8004f22 <SSD1306_DrawBitmap+0x5e>
 8004f20:	3307      	adds	r3, #7
 8004f22:	10db      	asrs	r3, r3, #3
 8004f24:	b21b      	sxth	r3, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da09      	bge.n	8004f4e <SSD1306_DrawBitmap+0x8a>
 8004f3a:	89fa      	ldrh	r2, [r7, #14]
 8004f3c:	8a7b      	ldrh	r3, [r7, #18]
 8004f3e:	4413      	add	r3, r2
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	89b9      	ldrh	r1, [r7, #12]
 8004f44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff5b 	bl	8004e04 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8004f4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3301      	adds	r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	827b      	strh	r3, [r7, #18]
 8004f5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	dbc9      	blt.n	8004efa <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8004f66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	82bb      	strh	r3, [r7, #20]
 8004f72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	81bb      	strh	r3, [r7, #12]
 8004f7e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004f82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	dbb4      	blt.n	8004ef4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
	i2c_mux_select(&mux, 0);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4808      	ldr	r0, [pc, #32]	@ (8004fc0 <ssd1306_I2C_Init+0x2c>)
 8004f9e:	f7ff fdcc 	bl	8004b3a <i2c_mux_select>
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004fa2:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <ssd1306_I2C_Init+0x30>)
 8004fa4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004fa6:	e002      	b.n	8004fae <ssd1306_I2C_Init+0x1a>
		p--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f9      	bne.n	8004fa8 <ssd1306_I2C_Init+0x14>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	2000003c 	.word	0x2000003c
 8004fc4:	0003d090 	.word	0x0003d090

08004fc8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b0c7      	sub	sp, #284	@ 0x11c
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004fd6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8004fda:	600a      	str	r2, [r1, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fe2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ffa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004ffe:	460a      	mov	r2, r1
 8005000:	801a      	strh	r2, [r3, #0]
i2c_mux_select(&mux, 0);
 8005002:	2100      	movs	r1, #0
 8005004:	4824      	ldr	r0, [pc, #144]	@ (8005098 <ssd1306_I2C_WriteMulti+0xd0>)
 8005006:	f7ff fd98 	bl	8004b3a <i2c_mux_select>
uint8_t dt[256];
dt[0] = reg;
 800500a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800500e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005012:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005016:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8005024:	e015      	b.n	8005052 <ssd1306_I2C_WriteMulti+0x8a>
dt[i+1] = data[i];
 8005026:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800502a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800502e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	441a      	add	r2, r3
 8005036:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800503a:	3301      	adds	r3, #1
 800503c:	7811      	ldrb	r1, [r2, #0]
 800503e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005042:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8005046:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8005048:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800504c:	3301      	adds	r3, #1
 800504e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8005052:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005056:	b29b      	uxth	r3, r3
 8005058:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800505c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005060:	8812      	ldrh	r2, [r2, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d8df      	bhi.n	8005026 <ssd1306_I2C_WriteMulti+0x5e>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8005066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800506a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b299      	uxth	r1, r3
 8005072:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005076:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	b29b      	uxth	r3, r3
 8005080:	f107 020c 	add.w	r2, r7, #12
 8005084:	200a      	movs	r0, #10
 8005086:	9000      	str	r0, [sp, #0]
 8005088:	4804      	ldr	r0, [pc, #16]	@ (800509c <ssd1306_I2C_WriteMulti+0xd4>)
 800508a:	f001 fc77 	bl	800697c <HAL_I2C_Master_Transmit>
}
 800508e:	bf00      	nop
 8005090:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8005094:	46bd      	mov	sp, r7
 8005096:	bd90      	pop	{r4, r7, pc}
 8005098:	2000003c 	.word	0x2000003c
 800509c:	2000036c 	.word	0x2000036c

080050a0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
 80050aa:	460b      	mov	r3, r1
 80050ac:	71bb      	strb	r3, [r7, #6]
 80050ae:	4613      	mov	r3, r2
 80050b0:	717b      	strb	r3, [r7, #5]
	i2c_mux_select(&mux, 0);
 80050b2:	2100      	movs	r1, #0
 80050b4:	480a      	ldr	r0, [pc, #40]	@ (80050e0 <ssd1306_I2C_Write+0x40>)
 80050b6:	f7ff fd40 	bl	8004b3a <i2c_mux_select>
	uint8_t dt[2];
	dt[0] = reg;
 80050ba:	79bb      	ldrb	r3, [r7, #6]
 80050bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80050be:	797b      	ldrb	r3, [r7, #5]
 80050c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	b299      	uxth	r1, r3
 80050c6:	f107 020c 	add.w	r2, r7, #12
 80050ca:	230a      	movs	r3, #10
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2302      	movs	r3, #2
 80050d0:	4804      	ldr	r0, [pc, #16]	@ (80050e4 <ssd1306_I2C_Write+0x44>)
 80050d2:	f001 fc53 	bl	800697c <HAL_I2C_Master_Transmit>
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	2000003c 	.word	0x2000003c
 80050e4:	2000036c 	.word	0x2000036c

080050e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <HAL_Init+0x40>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005128 <HAL_Init+0x40>)
 80050f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <HAL_Init+0x40>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005128 <HAL_Init+0x40>)
 80050fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005104:	4b08      	ldr	r3, [pc, #32]	@ (8005128 <HAL_Init+0x40>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a07      	ldr	r2, [pc, #28]	@ (8005128 <HAL_Init+0x40>)
 800510a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005110:	2003      	movs	r0, #3
 8005112:	f000 fd5f 	bl	8005bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005116:	2000      	movs	r0, #0
 8005118:	f000 f808 	bl	800512c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800511c:	f7fe ffc0 	bl	80040a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40023c00 	.word	0x40023c00

0800512c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005134:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <HAL_InitTick+0x54>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4b12      	ldr	r3, [pc, #72]	@ (8005184 <HAL_InitTick+0x58>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	4619      	mov	r1, r3
 800513e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005142:	fbb3 f3f1 	udiv	r3, r3, r1
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fd77 	bl	8005c3e <HAL_SYSTICK_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e00e      	b.n	8005178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b0f      	cmp	r3, #15
 800515e:	d80a      	bhi.n	8005176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005160:	2200      	movs	r2, #0
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	f000 fd3f 	bl	8005bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800516c:	4a06      	ldr	r2, [pc, #24]	@ (8005188 <HAL_InitTick+0x5c>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000068 	.word	0x20000068
 8005184:	20000070 	.word	0x20000070
 8005188:	2000006c 	.word	0x2000006c

0800518c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005190:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <HAL_IncTick+0x20>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_IncTick+0x24>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4413      	add	r3, r2
 800519c:	4a04      	ldr	r2, [pc, #16]	@ (80051b0 <HAL_IncTick+0x24>)
 800519e:	6013      	str	r3, [r2, #0]
}
 80051a0:	bf00      	nop
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000070 	.word	0x20000070
 80051b0:	20000dd8 	.word	0x20000dd8

080051b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return uwTick;
 80051b8:	4b03      	ldr	r3, [pc, #12]	@ (80051c8 <HAL_GetTick+0x14>)
 80051ba:	681b      	ldr	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000dd8 	.word	0x20000dd8

080051cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051d4:	f7ff ffee 	bl	80051b4 <HAL_GetTick>
 80051d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d005      	beq.n	80051f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <HAL_Delay+0x44>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051f2:	bf00      	nop
 80051f4:	f7ff ffde 	bl	80051b4 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	429a      	cmp	r2, r3
 8005202:	d8f7      	bhi.n	80051f4 <HAL_Delay+0x28>
  {
  }
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000070 	.word	0x20000070

08005214 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e033      	b.n	8005292 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fe ff5c 	bl	80040f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d118      	bne.n	8005284 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800525a:	f023 0302 	bic.w	r3, r3, #2
 800525e:	f043 0202 	orr.w	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fae8 	bl	800583c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	f043 0201 	orr.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	@ 0x40
 8005282:	e001      	b.n	8005288 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_Start+0x1a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e0b2      	b.n	800541c <HAL_ADC_Start+0x180>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d018      	beq.n	80052fe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052dc:	4b52      	ldr	r3, [pc, #328]	@ (8005428 <HAL_ADC_Start+0x18c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a52      	ldr	r2, [pc, #328]	@ (800542c <HAL_ADC_Start+0x190>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	0c9a      	lsrs	r2, r3, #18
 80052e8:	4613      	mov	r3, r2
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	4413      	add	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80052f0:	e002      	b.n	80052f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f9      	bne.n	80052f2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b01      	cmp	r3, #1
 800530a:	d17a      	bne.n	8005402 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005336:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534a:	d106      	bne.n	800535a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005350:	f023 0206 	bic.w	r2, r3, #6
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	645a      	str	r2, [r3, #68]	@ 0x44
 8005358:	e002      	b.n	8005360 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005368:	4b31      	ldr	r3, [pc, #196]	@ (8005430 <HAL_ADC_Start+0x194>)
 800536a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005374:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	2b00      	cmp	r3, #0
 8005380:	d12a      	bne.n	80053d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2b      	ldr	r2, [pc, #172]	@ (8005434 <HAL_ADC_Start+0x198>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d015      	beq.n	80053b8 <HAL_ADC_Start+0x11c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a29      	ldr	r2, [pc, #164]	@ (8005438 <HAL_ADC_Start+0x19c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d105      	bne.n	80053a2 <HAL_ADC_Start+0x106>
 8005396:	4b26      	ldr	r3, [pc, #152]	@ (8005430 <HAL_ADC_Start+0x194>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a25      	ldr	r2, [pc, #148]	@ (800543c <HAL_ADC_Start+0x1a0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d136      	bne.n	800541a <HAL_ADC_Start+0x17e>
 80053ac:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <HAL_ADC_Start+0x194>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d130      	bne.n	800541a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d129      	bne.n	800541a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053d4:	609a      	str	r2, [r3, #8]
 80053d6:	e020      	b.n	800541a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a15      	ldr	r2, [pc, #84]	@ (8005434 <HAL_ADC_Start+0x198>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d11b      	bne.n	800541a <HAL_ADC_Start+0x17e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d114      	bne.n	800541a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	e00b      	b.n	800541a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	f043 0210 	orr.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20000068 	.word	0x20000068
 800542c:	431bde83 	.word	0x431bde83
 8005430:	40012300 	.word	0x40012300
 8005434:	40012000 	.word	0x40012000
 8005438:	40012100 	.word	0x40012100
 800543c:	40012200 	.word	0x40012200

08005440 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_ADC_Stop+0x16>
 8005452:	2302      	movs	r3, #2
 8005454:	e021      	b.n	800549a <HAL_ADC_Stop+0x5a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f043 0201 	orr.w	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c2:	d113      	bne.n	80054ec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054d2:	d10b      	bne.n	80054ec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e063      	b.n	80055b4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80054ec:	f7ff fe62 	bl	80051b4 <HAL_GetTick>
 80054f0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054f2:	e021      	b.n	8005538 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d01d      	beq.n	8005538 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <HAL_ADC_PollForConversion+0x6c>
 8005502:	f7ff fe57 	bl	80051b4 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d212      	bcs.n	8005538 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d00b      	beq.n	8005538 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	f043 0204 	orr.w	r2, r3, #4
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e03d      	b.n	80055b4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d1d6      	bne.n	80054f4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f06f 0212 	mvn.w	r2, #18
 800554e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d123      	bne.n	80055b2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11f      	bne.n	80055b2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800558a:	2b00      	cmp	r3, #0
 800558c:	d111      	bne.n	80055b2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005592:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x1c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e113      	b.n	800581c <HAL_ADC_ConfigChannel+0x244>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b09      	cmp	r3, #9
 8005602:	d925      	bls.n	8005650 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68d9      	ldr	r1, [r3, #12]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	3b1e      	subs	r3, #30
 800561a:	2207      	movs	r2, #7
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43da      	mvns	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	400a      	ands	r2, r1
 8005628:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68d9      	ldr	r1, [r3, #12]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	4618      	mov	r0, r3
 800563c:	4603      	mov	r3, r0
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4403      	add	r3, r0
 8005642:	3b1e      	subs	r3, #30
 8005644:	409a      	lsls	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	e022      	b.n	8005696 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6919      	ldr	r1, [r3, #16]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	2207      	movs	r2, #7
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43da      	mvns	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	400a      	ands	r2, r1
 8005672:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6919      	ldr	r1, [r3, #16]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	4618      	mov	r0, r3
 8005686:	4603      	mov	r3, r0
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4403      	add	r3, r0
 800568c:	409a      	lsls	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b06      	cmp	r3, #6
 800569c:	d824      	bhi.n	80056e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	3b05      	subs	r3, #5
 80056b0:	221f      	movs	r2, #31
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43da      	mvns	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	400a      	ands	r2, r1
 80056be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	3b05      	subs	r3, #5
 80056da:	fa00 f203 	lsl.w	r2, r0, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80056e6:	e04c      	b.n	8005782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	d824      	bhi.n	800573a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	3b23      	subs	r3, #35	@ 0x23
 8005702:	221f      	movs	r2, #31
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	43da      	mvns	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	400a      	ands	r2, r1
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	4618      	mov	r0, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	3b23      	subs	r3, #35	@ 0x23
 800572c:	fa00 f203 	lsl.w	r2, r0, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30
 8005738:	e023      	b.n	8005782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	3b41      	subs	r3, #65	@ 0x41
 800574c:	221f      	movs	r2, #31
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43da      	mvns	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	400a      	ands	r2, r1
 800575a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	4618      	mov	r0, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	3b41      	subs	r3, #65	@ 0x41
 8005776:	fa00 f203 	lsl.w	r2, r0, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005782:	4b29      	ldr	r3, [pc, #164]	@ (8005828 <HAL_ADC_ConfigChannel+0x250>)
 8005784:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a28      	ldr	r2, [pc, #160]	@ (800582c <HAL_ADC_ConfigChannel+0x254>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10f      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x1d8>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b12      	cmp	r3, #18
 8005796:	d10b      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1d      	ldr	r2, [pc, #116]	@ (800582c <HAL_ADC_ConfigChannel+0x254>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d12b      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x23a>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1c      	ldr	r2, [pc, #112]	@ (8005830 <HAL_ADC_ConfigChannel+0x258>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <HAL_ADC_ConfigChannel+0x1f4>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b11      	cmp	r3, #17
 80057ca:	d122      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a11      	ldr	r2, [pc, #68]	@ (8005830 <HAL_ADC_ConfigChannel+0x258>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057ee:	4b11      	ldr	r3, [pc, #68]	@ (8005834 <HAL_ADC_ConfigChannel+0x25c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a11      	ldr	r2, [pc, #68]	@ (8005838 <HAL_ADC_ConfigChannel+0x260>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	0c9a      	lsrs	r2, r3, #18
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005804:	e002      	b.n	800580c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3b01      	subs	r3, #1
 800580a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f9      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	40012300 	.word	0x40012300
 800582c:	40012000 	.word	0x40012000
 8005830:	10000012 	.word	0x10000012
 8005834:	20000068 	.word	0x20000068
 8005838:	431bde83 	.word	0x431bde83

0800583c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005844:	4b79      	ldr	r3, [pc, #484]	@ (8005a2c <ADC_Init+0x1f0>)
 8005846:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	021a      	lsls	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6899      	ldr	r1, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	4a58      	ldr	r2, [pc, #352]	@ (8005a30 <ADC_Init+0x1f4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6899      	ldr	r1, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6899      	ldr	r1, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	e00f      	b.n	800593a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005938:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0202 	bic.w	r2, r2, #2
 8005948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7e1b      	ldrb	r3, [r3, #24]
 8005954:	005a      	lsls	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01b      	beq.n	80059a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005976:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005986:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	3b01      	subs	r3, #1
 8005994:	035a      	lsls	r2, r3, #13
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e007      	b.n	80059b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80059be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	051a      	lsls	r2, r3, #20
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80059e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6899      	ldr	r1, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059f2:	025a      	lsls	r2, r3, #9
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6899      	ldr	r1, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	029a      	lsls	r2, r3, #10
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40012300 	.word	0x40012300
 8005a30:	0f000001 	.word	0x0f000001

08005a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a44:	4b0c      	ldr	r3, [pc, #48]	@ (8005a78 <__NVIC_SetPriorityGrouping+0x44>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a50:	4013      	ands	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a66:	4a04      	ldr	r2, [pc, #16]	@ (8005a78 <__NVIC_SetPriorityGrouping+0x44>)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	60d3      	str	r3, [r2, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	e000ed00 	.word	0xe000ed00

08005a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a80:	4b04      	ldr	r3, [pc, #16]	@ (8005a94 <__NVIC_GetPriorityGrouping+0x18>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	f003 0307 	and.w	r3, r3, #7
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	e000ed00 	.word	0xe000ed00

08005a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	db0b      	blt.n	8005ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	f003 021f 	and.w	r2, r3, #31
 8005ab0:	4907      	ldr	r1, [pc, #28]	@ (8005ad0 <__NVIC_EnableIRQ+0x38>)
 8005ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2001      	movs	r0, #1
 8005aba:	fa00 f202 	lsl.w	r2, r0, r2
 8005abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e100 	.word	0xe000e100

08005ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db0a      	blt.n	8005afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	490c      	ldr	r1, [pc, #48]	@ (8005b20 <__NVIC_SetPriority+0x4c>)
 8005aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af2:	0112      	lsls	r2, r2, #4
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005afc:	e00a      	b.n	8005b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4908      	ldr	r1, [pc, #32]	@ (8005b24 <__NVIC_SetPriority+0x50>)
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	0112      	lsls	r2, r2, #4
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	440b      	add	r3, r1
 8005b12:	761a      	strb	r2, [r3, #24]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	e000e100 	.word	0xe000e100
 8005b24:	e000ed00 	.word	0xe000ed00

08005b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	@ 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f1c3 0307 	rsb	r3, r3, #7
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	bf28      	it	cs
 8005b46:	2304      	movcs	r3, #4
 8005b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2b06      	cmp	r3, #6
 8005b50:	d902      	bls.n	8005b58 <NVIC_EncodePriority+0x30>
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3b03      	subs	r3, #3
 8005b56:	e000      	b.n	8005b5a <NVIC_EncodePriority+0x32>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b70:	f04f 31ff 	mov.w	r1, #4294967295
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	43d9      	mvns	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b80:	4313      	orrs	r3, r2
         );
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	@ 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ba0:	d301      	bcc.n	8005ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e00f      	b.n	8005bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd0 <SysTick_Config+0x40>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bae:	210f      	movs	r1, #15
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	f7ff ff8e 	bl	8005ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bb8:	4b05      	ldr	r3, [pc, #20]	@ (8005bd0 <SysTick_Config+0x40>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bbe:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <SysTick_Config+0x40>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	e000e010 	.word	0xe000e010

08005bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ff29 	bl	8005a34 <__NVIC_SetPriorityGrouping>
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bfc:	f7ff ff3e 	bl	8005a7c <__NVIC_GetPriorityGrouping>
 8005c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	6978      	ldr	r0, [r7, #20]
 8005c08:	f7ff ff8e 	bl	8005b28 <NVIC_EncodePriority>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c12:	4611      	mov	r1, r2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff ff5d 	bl	8005ad4 <__NVIC_SetPriority>
}
 8005c1a:	bf00      	nop
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	4603      	mov	r3, r0
 8005c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ff31 	bl	8005a98 <__NVIC_EnableIRQ>
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ffa2 	bl	8005b90 <SysTick_Config>
 8005c4c:	4603      	mov	r3, r0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c64:	f7ff faa6 	bl	80051b4 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e099      	b.n	8005da8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c94:	e00f      	b.n	8005cb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c96:	f7ff fa8d 	bl	80051b4 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b05      	cmp	r3, #5
 8005ca2:	d908      	bls.n	8005cb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2203      	movs	r2, #3
 8005cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e078      	b.n	8005da8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e8      	bne.n	8005c96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4b38      	ldr	r3, [pc, #224]	@ (8005db0 <HAL_DMA_Init+0x158>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d107      	bne.n	8005d20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0307 	bic.w	r3, r3, #7
 8005d36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d117      	bne.n	8005d7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fa7b 	bl	8006258 <DMA_CheckFifoParam>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2240      	movs	r2, #64	@ 0x40
 8005d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005d76:	2301      	movs	r3, #1
 8005d78:	e016      	b.n	8005da8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa32 	bl	80061ec <DMA_CalcBaseAndBitshift>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d90:	223f      	movs	r2, #63	@ 0x3f
 8005d92:	409a      	lsls	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	f010803f 	.word	0xf010803f

08005db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dc2:	f7ff f9f7 	bl	80051b4 <HAL_GetTick>
 8005dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d008      	beq.n	8005de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e052      	b.n	8005e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0216 	bic.w	r2, r2, #22
 8005df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <HAL_DMA_Abort+0x62>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0208 	bic.w	r2, r2, #8
 8005e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0201 	bic.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e36:	e013      	b.n	8005e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e38:	f7ff f9bc 	bl	80051b4 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d90c      	bls.n	8005e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e015      	b.n	8005e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e4      	bne.n	8005e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e72:	223f      	movs	r2, #63	@ 0x3f
 8005e74:	409a      	lsls	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2280      	movs	r2, #128	@ 0x80
 8005eac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e00c      	b.n	8005ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2205      	movs	r2, #5
 8005eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8006120 <HAL_DMA_IRQHandler+0x248>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a8e      	ldr	r2, [pc, #568]	@ (8006124 <HAL_DMA_IRQHandler+0x24c>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	0a9b      	lsrs	r3, r3, #10
 8005ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f02:	2208      	movs	r2, #8
 8005f04:	409a      	lsls	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01a      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d013      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0204 	bic.w	r2, r2, #4
 8005f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f30:	2208      	movs	r2, #8
 8005f32:	409a      	lsls	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3c:	f043 0201 	orr.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f48:	2201      	movs	r2, #1
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d012      	beq.n	8005f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f66:	2201      	movs	r2, #1
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	f043 0202 	orr.w	r2, r3, #2
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7e:	2204      	movs	r2, #4
 8005f80:	409a      	lsls	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d012      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa8:	f043 0204 	orr.w	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d043      	beq.n	8006048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d03c      	beq.n	8006048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d018      	beq.n	800601a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d108      	bne.n	8006008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d024      	beq.n	8006048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
 8006006:	e01f      	b.n	8006048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01b      	beq.n	8006048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
 8006018:	e016      	b.n	8006048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0208 	bic.w	r2, r2, #8
 8006036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604c:	2220      	movs	r2, #32
 800604e:	409a      	lsls	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 808f 	beq.w	8006178 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8087 	beq.w	8006178 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606e:	2220      	movs	r2, #32
 8006070:	409a      	lsls	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b05      	cmp	r3, #5
 8006080:	d136      	bne.n	80060f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0216 	bic.w	r2, r2, #22
 8006090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d103      	bne.n	80060b2 <HAL_DMA_IRQHandler+0x1da>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0208 	bic.w	r2, r2, #8
 80060c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c6:	223f      	movs	r2, #63	@ 0x3f
 80060c8:	409a      	lsls	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d07e      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
        }
        return;
 80060ee:	e079      	b.n	80061e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d01d      	beq.n	800613a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10d      	bne.n	8006128 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006110:	2b00      	cmp	r3, #0
 8006112:	d031      	beq.n	8006178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
 800611c:	e02c      	b.n	8006178 <HAL_DMA_IRQHandler+0x2a0>
 800611e:	bf00      	nop
 8006120:	20000068 	.word	0x20000068
 8006124:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d023      	beq.n	8006178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
 8006138:	e01e      	b.n	8006178 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10f      	bne.n	8006168 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0210 	bic.w	r2, r2, #16
 8006156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617c:	2b00      	cmp	r3, #0
 800617e:	d032      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d022      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2205      	movs	r2, #5
 8006190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d307      	bcc.n	80061c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f2      	bne.n	80061a4 <HAL_DMA_IRQHandler+0x2cc>
 80061be:	e000      	b.n	80061c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
 80061e2:	e000      	b.n	80061e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80061e4:	bf00      	nop
    }
  }
}
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	3b10      	subs	r3, #16
 80061fc:	4a14      	ldr	r2, [pc, #80]	@ (8006250 <DMA_CalcBaseAndBitshift+0x64>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	091b      	lsrs	r3, r3, #4
 8006204:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006206:	4a13      	ldr	r2, [pc, #76]	@ (8006254 <DMA_CalcBaseAndBitshift+0x68>)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b03      	cmp	r3, #3
 8006218:	d909      	bls.n	800622e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	1d1a      	adds	r2, r3, #4
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	659a      	str	r2, [r3, #88]	@ 0x58
 800622c:	e007      	b.n	800623e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006236:	f023 0303 	bic.w	r3, r3, #3
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	aaaaaaab 	.word	0xaaaaaaab
 8006254:	0800e1a0 	.word	0x0800e1a0

08006258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d11f      	bne.n	80062b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d856      	bhi.n	8006326 <DMA_CheckFifoParam+0xce>
 8006278:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <DMA_CheckFifoParam+0x28>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	08006291 	.word	0x08006291
 8006284:	080062a3 	.word	0x080062a3
 8006288:	08006291 	.word	0x08006291
 800628c:	08006327 	.word	0x08006327
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d046      	beq.n	800632a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a0:	e043      	b.n	800632a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062aa:	d140      	bne.n	800632e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b0:	e03d      	b.n	800632e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ba:	d121      	bne.n	8006300 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d837      	bhi.n	8006332 <DMA_CheckFifoParam+0xda>
 80062c2:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <DMA_CheckFifoParam+0x70>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062df 	.word	0x080062df
 80062d0:	080062d9 	.word	0x080062d9
 80062d4:	080062f1 	.word	0x080062f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
      break;
 80062dc:	e030      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d025      	beq.n	8006336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ee:	e022      	b.n	8006336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062f8:	d11f      	bne.n	800633a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062fe:	e01c      	b.n	800633a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d903      	bls.n	800630e <DMA_CheckFifoParam+0xb6>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d003      	beq.n	8006314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800630c:	e018      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
      break;
 8006312:	e015      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00e      	beq.n	800633e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      break;
 8006324:	e00b      	b.n	800633e <DMA_CheckFifoParam+0xe6>
      break;
 8006326:	bf00      	nop
 8006328:	e00a      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      break;
 800632a:	bf00      	nop
 800632c:	e008      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      break;
 800632e:	bf00      	nop
 8006330:	e006      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      break;
 8006332:	bf00      	nop
 8006334:	e004      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      break;
 8006336:	bf00      	nop
 8006338:	e002      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      break;   
 800633a:	bf00      	nop
 800633c:	e000      	b.n	8006340 <DMA_CheckFifoParam+0xe8>
      break;
 800633e:	bf00      	nop
    }
  } 
  
  return status; 
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop

08006350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	@ 0x24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	e165      	b.n	8006638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800636c:	2201      	movs	r2, #1
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4013      	ands	r3, r2
 800637e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	429a      	cmp	r2, r3
 8006386:	f040 8154 	bne.w	8006632 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d005      	beq.n	80063a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d130      	bne.n	8006404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	2203      	movs	r2, #3
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	43db      	mvns	r3, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	4013      	ands	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063d8:	2201      	movs	r2, #1
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	43db      	mvns	r3, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 0201 	and.w	r2, r3, #1
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	2b03      	cmp	r3, #3
 800640e:	d017      	beq.n	8006440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	2203      	movs	r2, #3
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	4313      	orrs	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d123      	bne.n	8006494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	08da      	lsrs	r2, r3, #3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3208      	adds	r2, #8
 8006454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	220f      	movs	r2, #15
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	43db      	mvns	r3, r3
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4013      	ands	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	08da      	lsrs	r2, r3, #3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3208      	adds	r2, #8
 800648e:	69b9      	ldr	r1, [r7, #24]
 8006490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	2203      	movs	r2, #3
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 0203 	and.w	r2, r3, #3
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80ae 	beq.w	8006632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	4b5d      	ldr	r3, [pc, #372]	@ (8006650 <HAL_GPIO_Init+0x300>)
 80064dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064de:	4a5c      	ldr	r2, [pc, #368]	@ (8006650 <HAL_GPIO_Init+0x300>)
 80064e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80064e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006650 <HAL_GPIO_Init+0x300>)
 80064e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064f2:	4a58      	ldr	r2, [pc, #352]	@ (8006654 <HAL_GPIO_Init+0x304>)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	089b      	lsrs	r3, r3, #2
 80064f8:	3302      	adds	r3, #2
 80064fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	220f      	movs	r2, #15
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a4f      	ldr	r2, [pc, #316]	@ (8006658 <HAL_GPIO_Init+0x308>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d025      	beq.n	800656a <HAL_GPIO_Init+0x21a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a4e      	ldr	r2, [pc, #312]	@ (800665c <HAL_GPIO_Init+0x30c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01f      	beq.n	8006566 <HAL_GPIO_Init+0x216>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a4d      	ldr	r2, [pc, #308]	@ (8006660 <HAL_GPIO_Init+0x310>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d019      	beq.n	8006562 <HAL_GPIO_Init+0x212>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a4c      	ldr	r2, [pc, #304]	@ (8006664 <HAL_GPIO_Init+0x314>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_GPIO_Init+0x20e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a4b      	ldr	r2, [pc, #300]	@ (8006668 <HAL_GPIO_Init+0x318>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00d      	beq.n	800655a <HAL_GPIO_Init+0x20a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a4a      	ldr	r2, [pc, #296]	@ (800666c <HAL_GPIO_Init+0x31c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <HAL_GPIO_Init+0x206>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a49      	ldr	r2, [pc, #292]	@ (8006670 <HAL_GPIO_Init+0x320>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d101      	bne.n	8006552 <HAL_GPIO_Init+0x202>
 800654e:	2306      	movs	r3, #6
 8006550:	e00c      	b.n	800656c <HAL_GPIO_Init+0x21c>
 8006552:	2307      	movs	r3, #7
 8006554:	e00a      	b.n	800656c <HAL_GPIO_Init+0x21c>
 8006556:	2305      	movs	r3, #5
 8006558:	e008      	b.n	800656c <HAL_GPIO_Init+0x21c>
 800655a:	2304      	movs	r3, #4
 800655c:	e006      	b.n	800656c <HAL_GPIO_Init+0x21c>
 800655e:	2303      	movs	r3, #3
 8006560:	e004      	b.n	800656c <HAL_GPIO_Init+0x21c>
 8006562:	2302      	movs	r3, #2
 8006564:	e002      	b.n	800656c <HAL_GPIO_Init+0x21c>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <HAL_GPIO_Init+0x21c>
 800656a:	2300      	movs	r3, #0
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	f002 0203 	and.w	r2, r2, #3
 8006572:	0092      	lsls	r2, r2, #2
 8006574:	4093      	lsls	r3, r2
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800657c:	4935      	ldr	r1, [pc, #212]	@ (8006654 <HAL_GPIO_Init+0x304>)
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	089b      	lsrs	r3, r3, #2
 8006582:	3302      	adds	r3, #2
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800658a:	4b3a      	ldr	r3, [pc, #232]	@ (8006674 <HAL_GPIO_Init+0x324>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	43db      	mvns	r3, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4013      	ands	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065ae:	4a31      	ldr	r2, [pc, #196]	@ (8006674 <HAL_GPIO_Init+0x324>)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006674 <HAL_GPIO_Init+0x324>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	43db      	mvns	r3, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4013      	ands	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065d8:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <HAL_GPIO_Init+0x324>)
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065de:	4b25      	ldr	r3, [pc, #148]	@ (8006674 <HAL_GPIO_Init+0x324>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	4013      	ands	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006602:	4a1c      	ldr	r2, [pc, #112]	@ (8006674 <HAL_GPIO_Init+0x324>)
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006608:	4b1a      	ldr	r3, [pc, #104]	@ (8006674 <HAL_GPIO_Init+0x324>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	43db      	mvns	r3, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4013      	ands	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800662c:	4a11      	ldr	r2, [pc, #68]	@ (8006674 <HAL_GPIO_Init+0x324>)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	3301      	adds	r3, #1
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	2b0f      	cmp	r3, #15
 800663c:	f67f ae96 	bls.w	800636c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	3724      	adds	r7, #36	@ 0x24
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40023800 	.word	0x40023800
 8006654:	40013800 	.word	0x40013800
 8006658:	40020000 	.word	0x40020000
 800665c:	40020400 	.word	0x40020400
 8006660:	40020800 	.word	0x40020800
 8006664:	40020c00 	.word	0x40020c00
 8006668:	40021000 	.word	0x40021000
 800666c:	40021400 	.word	0x40021400
 8006670:	40021800 	.word	0x40021800
 8006674:	40013c00 	.word	0x40013c00

08006678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
 8006684:	4613      	mov	r3, r2
 8006686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006688:	787b      	ldrb	r3, [r7, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006694:	e003      	b.n	800669e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006696:	887b      	ldrh	r3, [r7, #2]
 8006698:	041a      	lsls	r2, r3, #16
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	619a      	str	r2, [r3, #24]
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066b6:	4b08      	ldr	r3, [pc, #32]	@ (80066d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d006      	beq.n	80066d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066c2:	4a05      	ldr	r2, [pc, #20]	@ (80066d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f806 	bl	80066dc <HAL_GPIO_EXTI_Callback>
  }
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40013c00 	.word	0x40013c00

080066dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e12b      	b.n	800695e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fd fd2c 	bl	8004178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2224      	movs	r2, #36	@ 0x24
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006758:	f001 fee0 	bl	800851c <HAL_RCC_GetPCLK1Freq>
 800675c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	4a81      	ldr	r2, [pc, #516]	@ (8006968 <HAL_I2C_Init+0x274>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d807      	bhi.n	8006778 <HAL_I2C_Init+0x84>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a80      	ldr	r2, [pc, #512]	@ (800696c <HAL_I2C_Init+0x278>)
 800676c:	4293      	cmp	r3, r2
 800676e:	bf94      	ite	ls
 8006770:	2301      	movls	r3, #1
 8006772:	2300      	movhi	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	e006      	b.n	8006786 <HAL_I2C_Init+0x92>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a7d      	ldr	r2, [pc, #500]	@ (8006970 <HAL_I2C_Init+0x27c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	bf94      	ite	ls
 8006780:	2301      	movls	r3, #1
 8006782:	2300      	movhi	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e0e7      	b.n	800695e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a78      	ldr	r2, [pc, #480]	@ (8006974 <HAL_I2C_Init+0x280>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	0c9b      	lsrs	r3, r3, #18
 8006798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4a6a      	ldr	r2, [pc, #424]	@ (8006968 <HAL_I2C_Init+0x274>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d802      	bhi.n	80067c8 <HAL_I2C_Init+0xd4>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3301      	adds	r3, #1
 80067c6:	e009      	b.n	80067dc <HAL_I2C_Init+0xe8>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80067ce:	fb02 f303 	mul.w	r3, r2, r3
 80067d2:	4a69      	ldr	r2, [pc, #420]	@ (8006978 <HAL_I2C_Init+0x284>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	099b      	lsrs	r3, r3, #6
 80067da:	3301      	adds	r3, #1
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80067ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	495c      	ldr	r1, [pc, #368]	@ (8006968 <HAL_I2C_Init+0x274>)
 80067f8:	428b      	cmp	r3, r1
 80067fa:	d819      	bhi.n	8006830 <HAL_I2C_Init+0x13c>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1e59      	subs	r1, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	fbb1 f3f3 	udiv	r3, r1, r3
 800680a:	1c59      	adds	r1, r3, #1
 800680c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006810:	400b      	ands	r3, r1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_I2C_Init+0x138>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1e59      	subs	r1, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	fbb1 f3f3 	udiv	r3, r1, r3
 8006824:	3301      	adds	r3, #1
 8006826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800682a:	e051      	b.n	80068d0 <HAL_I2C_Init+0x1dc>
 800682c:	2304      	movs	r3, #4
 800682e:	e04f      	b.n	80068d0 <HAL_I2C_Init+0x1dc>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d111      	bne.n	800685c <HAL_I2C_Init+0x168>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	1e58      	subs	r0, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6859      	ldr	r1, [r3, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	440b      	add	r3, r1
 8006846:	fbb0 f3f3 	udiv	r3, r0, r3
 800684a:	3301      	adds	r3, #1
 800684c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	e012      	b.n	8006882 <HAL_I2C_Init+0x18e>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	1e58      	subs	r0, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	0099      	lsls	r1, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006872:	3301      	adds	r3, #1
 8006874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf0c      	ite	eq
 800687c:	2301      	moveq	r3, #1
 800687e:	2300      	movne	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_I2C_Init+0x196>
 8006886:	2301      	movs	r3, #1
 8006888:	e022      	b.n	80068d0 <HAL_I2C_Init+0x1dc>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10e      	bne.n	80068b0 <HAL_I2C_Init+0x1bc>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	1e58      	subs	r0, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	440b      	add	r3, r1
 80068a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80068a4:	3301      	adds	r3, #1
 80068a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ae:	e00f      	b.n	80068d0 <HAL_I2C_Init+0x1dc>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1e58      	subs	r0, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6859      	ldr	r1, [r3, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	0099      	lsls	r1, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068c6:	3301      	adds	r3, #1
 80068c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	6809      	ldr	r1, [r1, #0]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69da      	ldr	r2, [r3, #28]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80068fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6911      	ldr	r1, [r2, #16]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68d2      	ldr	r2, [r2, #12]
 800690a:	4311      	orrs	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	430b      	orrs	r3, r1
 8006912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	000186a0 	.word	0x000186a0
 800696c:	001e847f 	.word	0x001e847f
 8006970:	003d08ff 	.word	0x003d08ff
 8006974:	431bde83 	.word	0x431bde83
 8006978:	10624dd3 	.word	0x10624dd3

0800697c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	461a      	mov	r2, r3
 8006988:	460b      	mov	r3, r1
 800698a:	817b      	strh	r3, [r7, #10]
 800698c:	4613      	mov	r3, r2
 800698e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006990:	f7fe fc10 	bl	80051b4 <HAL_GetTick>
 8006994:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b20      	cmp	r3, #32
 80069a0:	f040 80e0 	bne.w	8006b64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2319      	movs	r3, #25
 80069aa:	2201      	movs	r2, #1
 80069ac:	4970      	ldr	r1, [pc, #448]	@ (8006b70 <HAL_I2C_Master_Transmit+0x1f4>)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f001 fa3c 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80069ba:	2302      	movs	r3, #2
 80069bc:	e0d3      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_I2C_Master_Transmit+0x50>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e0cc      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d007      	beq.n	80069f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2221      	movs	r2, #33	@ 0x21
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	893a      	ldrh	r2, [r7, #8]
 8006a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a50      	ldr	r2, [pc, #320]	@ (8006b74 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a34:	8979      	ldrh	r1, [r7, #10]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 ff28 	bl	8007890 <I2C_MasterRequestWrite>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e08d      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a60:	e066      	b.n	8006b30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	6a39      	ldr	r1, [r7, #32]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 fafa 	bl	8008060 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00d      	beq.n	8006a8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d107      	bne.n	8006a8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e06b      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d11b      	bne.n	8006b04 <HAL_I2C_Master_Transmit+0x188>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d017      	beq.n	8006b04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	6a39      	ldr	r1, [r7, #32]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f001 faf1 	bl	80080f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00d      	beq.n	8006b30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d107      	bne.n	8006b2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e01a      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d194      	bne.n	8006a62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e000      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b64:	2302      	movs	r3, #2
  }
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	00100002 	.word	0x00100002
 8006b74:	ffff0000 	.word	0xffff0000

08006b78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	@ 0x30
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	461a      	mov	r2, r3
 8006b84:	460b      	mov	r3, r1
 8006b86:	817b      	strh	r3, [r7, #10]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b8c:	f7fe fb12 	bl	80051b4 <HAL_GetTick>
 8006b90:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	f040 8217 	bne.w	8006fce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2319      	movs	r3, #25
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	497c      	ldr	r1, [pc, #496]	@ (8006d9c <HAL_I2C_Master_Receive+0x224>)
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f001 f93e 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e20a      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_I2C_Master_Receive+0x50>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e203      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d007      	beq.n	8006bee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0201 	orr.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2222      	movs	r2, #34	@ 0x22
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2210      	movs	r2, #16
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	893a      	ldrh	r2, [r7, #8]
 8006c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8006da0 <HAL_I2C_Master_Receive+0x228>)
 8006c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c30:	8979      	ldrh	r1, [r7, #10]
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 feac 	bl	8007994 <I2C_MasterRequestRead>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e1c4      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d113      	bne.n	8006c76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	623b      	str	r3, [r7, #32]
 8006c62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e198      	b.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d11b      	bne.n	8006cb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e178      	b.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d11b      	bne.n	8006cf6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ccc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	e158      	b.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d1c:	e144      	b.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	f200 80f1 	bhi.w	8006f0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d123      	bne.n	8006d78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f001 fa23 	bl	8008180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e145      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d76:	e117      	b.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d14e      	bne.n	8006e1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	2200      	movs	r2, #0
 8006d88:	4906      	ldr	r1, [pc, #24]	@ (8006da4 <HAL_I2C_Master_Receive+0x22c>)
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f001 f84e 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e11a      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
 8006d9a:	bf00      	nop
 8006d9c:	00100002 	.word	0x00100002
 8006da0:	ffff0000 	.word	0xffff0000
 8006da4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e1c:	e0c4      	b.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	2200      	movs	r2, #0
 8006e26:	496c      	ldr	r1, [pc, #432]	@ (8006fd8 <HAL_I2C_Master_Receive+0x460>)
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 ffff 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0cb      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	2200      	movs	r2, #0
 8006e82:	4955      	ldr	r1, [pc, #340]	@ (8006fd8 <HAL_I2C_Master_Receive+0x460>)
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 ffd1 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e09d      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f08:	e04e      	b.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f001 f936 	bl	8008180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e058      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d124      	bne.n	8006fa8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d107      	bne.n	8006f76 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f74:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f47f aeb6 	bne.w	8006d1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e000      	b.n	8006fd0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006fce:	2302      	movs	r3, #2
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3728      	adds	r7, #40	@ 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	00010004 	.word	0x00010004

08006fdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	817b      	strh	r3, [r7, #10]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	813b      	strh	r3, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ff6:	f7fe f8dd 	bl	80051b4 <HAL_GetTick>
 8006ffa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b20      	cmp	r3, #32
 8007006:	f040 80d9 	bne.w	80071bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2319      	movs	r3, #25
 8007010:	2201      	movs	r2, #1
 8007012:	496d      	ldr	r1, [pc, #436]	@ (80071c8 <HAL_I2C_Mem_Write+0x1ec>)
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 ff09 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
 8007022:	e0cc      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_I2C_Mem_Write+0x56>
 800702e:	2302      	movs	r3, #2
 8007030:	e0c5      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b01      	cmp	r3, #1
 8007046:	d007      	beq.n	8007058 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007066:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2221      	movs	r2, #33	@ 0x21
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2240      	movs	r2, #64	@ 0x40
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a4d      	ldr	r2, [pc, #308]	@ (80071cc <HAL_I2C_Mem_Write+0x1f0>)
 8007098:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800709a:	88f8      	ldrh	r0, [r7, #6]
 800709c:	893a      	ldrh	r2, [r7, #8]
 800709e:	8979      	ldrh	r1, [r7, #10]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fd40 	bl	8007b30 <I2C_RequestMemoryWrite>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d052      	beq.n	800715c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e081      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 ffce 	bl	8008060 <I2C_WaitOnTXEFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d107      	bne.n	80070e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e06b      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ea:	781a      	ldrb	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b04      	cmp	r3, #4
 8007122:	d11b      	bne.n	800715c <HAL_I2C_Mem_Write+0x180>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007128:	2b00      	cmp	r3, #0
 800712a:	d017      	beq.n	800715c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007130:	781a      	ldrb	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1aa      	bne.n	80070ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 ffc1 	bl	80080f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007178:	2b04      	cmp	r3, #4
 800717a:	d107      	bne.n	800718c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800718a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e016      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800719e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	e000      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071bc:	2302      	movs	r3, #2
  }
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	00100002 	.word	0x00100002
 80071cc:	ffff0000 	.word	0xffff0000

080071d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08c      	sub	sp, #48	@ 0x30
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	461a      	mov	r2, r3
 80071de:	4603      	mov	r3, r0
 80071e0:	817b      	strh	r3, [r7, #10]
 80071e2:	460b      	mov	r3, r1
 80071e4:	813b      	strh	r3, [r7, #8]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071ea:	f7fd ffe3 	bl	80051b4 <HAL_GetTick>
 80071ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	f040 8214 	bne.w	8007626 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2319      	movs	r3, #25
 8007204:	2201      	movs	r2, #1
 8007206:	497b      	ldr	r1, [pc, #492]	@ (80073f4 <HAL_I2C_Mem_Read+0x224>)
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fe0f 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
 8007216:	e207      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_I2C_Mem_Read+0x56>
 8007222:	2302      	movs	r3, #2
 8007224:	e200      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	d007      	beq.n	800724c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800725a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2222      	movs	r2, #34	@ 0x22
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2240      	movs	r2, #64	@ 0x40
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800727c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a5b      	ldr	r2, [pc, #364]	@ (80073f8 <HAL_I2C_Mem_Read+0x228>)
 800728c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800728e:	88f8      	ldrh	r0, [r7, #6]
 8007290:	893a      	ldrh	r2, [r7, #8]
 8007292:	8979      	ldrh	r1, [r7, #10]
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4603      	mov	r3, r0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fcdc 	bl	8007c5c <I2C_RequestMemoryRead>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e1bc      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d113      	bne.n	80072de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b6:	2300      	movs	r3, #0
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	623b      	str	r3, [r7, #32]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e190      	b.n	8007600 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d11b      	bne.n	800731e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	e170      	b.n	8007600 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007322:	2b02      	cmp	r3, #2
 8007324:	d11b      	bne.n	800735e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007334:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	e150      	b.n	8007600 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007374:	e144      	b.n	8007600 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737a:	2b03      	cmp	r3, #3
 800737c:	f200 80f1 	bhi.w	8007562 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007384:	2b01      	cmp	r3, #1
 8007386:	d123      	bne.n	80073d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800738a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fef7 	bl	8008180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e145      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073ce:	e117      	b.n	8007600 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d14e      	bne.n	8007476 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	2200      	movs	r2, #0
 80073e0:	4906      	ldr	r1, [pc, #24]	@ (80073fc <HAL_I2C_Mem_Read+0x22c>)
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fd22 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e11a      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
 80073f2:	bf00      	nop
 80073f4:	00100002 	.word	0x00100002
 80073f8:	ffff0000 	.word	0xffff0000
 80073fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800740e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007474:	e0c4      	b.n	8007600 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	2200      	movs	r2, #0
 800747e:	496c      	ldr	r1, [pc, #432]	@ (8007630 <HAL_I2C_Mem_Read+0x460>)
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fcd3 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e0cb      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800749e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	2200      	movs	r2, #0
 80074da:	4955      	ldr	r1, [pc, #340]	@ (8007630 <HAL_I2C_Mem_Read+0x460>)
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fca5 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e09d      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007560:	e04e      	b.n	8007600 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007564:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fe0a 	bl	8008180 <I2C_WaitOnRXNEFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e058      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d124      	bne.n	8007600 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d107      	bne.n	80075ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f aeb6 	bne.w	8007376 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e000      	b.n	8007628 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007626:	2302      	movs	r3, #2
  }
}
 8007628:	4618      	mov	r0, r3
 800762a:	3728      	adds	r7, #40	@ 0x28
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	00010004 	.word	0x00010004

08007634 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	@ 0x28
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	460b      	mov	r3, r1
 8007642:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007644:	f7fd fdb6 	bl	80051b4 <HAL_GetTick>
 8007648:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b20      	cmp	r3, #32
 8007658:	f040 8111 	bne.w	800787e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	2319      	movs	r3, #25
 8007662:	2201      	movs	r2, #1
 8007664:	4988      	ldr	r1, [pc, #544]	@ (8007888 <HAL_I2C_IsDeviceReady+0x254>)
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fbe0 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007672:	2302      	movs	r3, #2
 8007674:	e104      	b.n	8007880 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_I2C_IsDeviceReady+0x50>
 8007680:	2302      	movs	r3, #2
 8007682:	e0fd      	b.n	8007880 <HAL_I2C_IsDeviceReady+0x24c>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b01      	cmp	r3, #1
 8007698:	d007      	beq.n	80076aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0201 	orr.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2224      	movs	r2, #36	@ 0x24
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a70      	ldr	r2, [pc, #448]	@ (800788c <HAL_I2C_IsDeviceReady+0x258>)
 80076cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fb9e 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007704:	d103      	bne.n	800770e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800770c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e0b6      	b.n	8007880 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007712:	897b      	ldrh	r3, [r7, #10]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007720:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007722:	f7fd fd47 	bl	80051b4 <HAL_GetTick>
 8007726:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b02      	cmp	r3, #2
 8007734:	bf0c      	ite	eq
 8007736:	2301      	moveq	r3, #1
 8007738:	2300      	movne	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007756:	e025      	b.n	80077a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007758:	f7fd fd2c 	bl	80051b4 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d302      	bcc.n	800776e <HAL_I2C_IsDeviceReady+0x13a>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d103      	bne.n	8007776 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	22a0      	movs	r2, #160	@ 0xa0
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b02      	cmp	r3, #2
 8007782:	bf0c      	ite	eq
 8007784:	2301      	moveq	r3, #1
 8007786:	2300      	movne	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800779a:	bf0c      	ite	eq
 800779c:	2301      	moveq	r3, #1
 800779e:	2300      	movne	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80077ae:	d005      	beq.n	80077bc <HAL_I2C_IsDeviceReady+0x188>
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HAL_I2C_IsDeviceReady+0x188>
 80077b6:	7dbb      	ldrb	r3, [r7, #22]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0cd      	beq.n	8007758 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d129      	bne.n	8007826 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e2:	2300      	movs	r3, #0
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2319      	movs	r3, #25
 80077fe:	2201      	movs	r2, #1
 8007800:	4921      	ldr	r1, [pc, #132]	@ (8007888 <HAL_I2C_IsDeviceReady+0x254>)
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fb12 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e036      	b.n	8007880 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2220      	movs	r2, #32
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	e02c      	b.n	8007880 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007834:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800783e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	2319      	movs	r3, #25
 8007846:	2201      	movs	r2, #1
 8007848:	490f      	ldr	r1, [pc, #60]	@ (8007888 <HAL_I2C_IsDeviceReady+0x254>)
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 faee 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e012      	b.n	8007880 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	3301      	adds	r3, #1
 800785e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	429a      	cmp	r2, r3
 8007866:	f4ff af32 	bcc.w	80076ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	00100002 	.word	0x00100002
 800788c:	ffff0000 	.word	0xffff0000

08007890 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	460b      	mov	r3, r1
 800789e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d006      	beq.n	80078ba <I2C_MasterRequestWrite+0x2a>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d003      	beq.n	80078ba <I2C_MasterRequestWrite+0x2a>
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078b8:	d108      	bne.n	80078cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e00b      	b.n	80078e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d0:	2b12      	cmp	r3, #18
 80078d2:	d107      	bne.n	80078e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fa9b 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00d      	beq.n	8007918 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790a:	d103      	bne.n	8007914 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007912:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e035      	b.n	8007984 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007920:	d108      	bne.n	8007934 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007922:	897b      	ldrh	r3, [r7, #10]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	461a      	mov	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007930:	611a      	str	r2, [r3, #16]
 8007932:	e01b      	b.n	800796c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007934:	897b      	ldrh	r3, [r7, #10]
 8007936:	11db      	asrs	r3, r3, #7
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f003 0306 	and.w	r3, r3, #6
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f063 030f 	orn	r3, r3, #15
 8007944:	b2da      	uxtb	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	490e      	ldr	r1, [pc, #56]	@ (800798c <I2C_MasterRequestWrite+0xfc>)
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 fae4 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e010      	b.n	8007984 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007962:	897b      	ldrh	r3, [r7, #10]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4907      	ldr	r1, [pc, #28]	@ (8007990 <I2C_MasterRequestWrite+0x100>)
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fad4 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	00010008 	.word	0x00010008
 8007990:	00010002 	.word	0x00010002

08007994 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	460b      	mov	r3, r1
 80079a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80079b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d006      	beq.n	80079ce <I2C_MasterRequestRead+0x3a>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d003      	beq.n	80079ce <I2C_MasterRequestRead+0x3a>
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079cc:	d108      	bne.n	80079e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e00b      	b.n	80079f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e4:	2b11      	cmp	r3, #17
 80079e6:	d107      	bne.n	80079f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fa11 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00d      	beq.n	8007a2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a1e:	d103      	bne.n	8007a28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e079      	b.n	8007b20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a34:	d108      	bne.n	8007a48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a36:	897b      	ldrh	r3, [r7, #10]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	611a      	str	r2, [r3, #16]
 8007a46:	e05f      	b.n	8007b08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007a48:	897b      	ldrh	r3, [r7, #10]
 8007a4a:	11db      	asrs	r3, r3, #7
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0306 	and.w	r3, r3, #6
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f063 030f 	orn	r3, r3, #15
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4930      	ldr	r1, [pc, #192]	@ (8007b28 <I2C_MasterRequestRead+0x194>)
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fa5a 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e054      	b.n	8007b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007a76:	897b      	ldrh	r3, [r7, #10]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4929      	ldr	r1, [pc, #164]	@ (8007b2c <I2C_MasterRequestRead+0x198>)
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fa4a 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e044      	b.n	8007b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a96:	2300      	movs	r3, #0
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	613b      	str	r3, [r7, #16]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	613b      	str	r3, [r7, #16]
 8007aaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007aba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f9af 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00d      	beq.n	8007af0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae2:	d103      	bne.n	8007aec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e017      	b.n	8007b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007af0:	897b      	ldrh	r3, [r7, #10]
 8007af2:	11db      	asrs	r3, r3, #7
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f003 0306 	and.w	r3, r3, #6
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f063 030e 	orn	r3, r3, #14
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4907      	ldr	r1, [pc, #28]	@ (8007b2c <I2C_MasterRequestRead+0x198>)
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fa06 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	00010008 	.word	0x00010008
 8007b2c:	00010002 	.word	0x00010002

08007b30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	817b      	strh	r3, [r7, #10]
 8007b42:	460b      	mov	r3, r1
 8007b44:	813b      	strh	r3, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f960 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00d      	beq.n	8007b8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b80:	d103      	bne.n	8007b8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e05f      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b8e:	897b      	ldrh	r3, [r7, #10]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	6a3a      	ldr	r2, [r7, #32]
 8007ba2:	492d      	ldr	r1, [pc, #180]	@ (8007c58 <I2C_RequestMemoryWrite+0x128>)
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f9bb 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e04c      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bcc:	6a39      	ldr	r1, [r7, #32]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fa46 	bl	8008060 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00d      	beq.n	8007bf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d107      	bne.n	8007bf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e02b      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d105      	bne.n	8007c08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	611a      	str	r2, [r3, #16]
 8007c06:	e021      	b.n	8007c4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c08:	893b      	ldrh	r3, [r7, #8]
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	6a39      	ldr	r1, [r7, #32]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 fa20 	bl	8008060 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d107      	bne.n	8007c3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e005      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c42:	893b      	ldrh	r3, [r7, #8]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	00010002 	.word	0x00010002

08007c5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	817b      	strh	r3, [r7, #10]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	813b      	strh	r3, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f8c2 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cbc:	d103      	bne.n	8007cc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e0aa      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cca:	897b      	ldrh	r3, [r7, #10]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	6a3a      	ldr	r2, [r7, #32]
 8007cde:	4952      	ldr	r1, [pc, #328]	@ (8007e28 <I2C_RequestMemoryRead+0x1cc>)
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f91d 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e097      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d08:	6a39      	ldr	r1, [r7, #32]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f9a8 	bl	8008060 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d107      	bne.n	8007d2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e076      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d105      	bne.n	8007d44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d38:	893b      	ldrh	r3, [r7, #8]
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	611a      	str	r2, [r3, #16]
 8007d42:	e021      	b.n	8007d88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d44:	893b      	ldrh	r3, [r7, #8]
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d54:	6a39      	ldr	r1, [r7, #32]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f982 	bl	8008060 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d107      	bne.n	8007d7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e050      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8a:	6a39      	ldr	r1, [r7, #32]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f967 	bl	8008060 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d107      	bne.n	8007db0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e035      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f82b 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00d      	beq.n	8007df8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dea:	d103      	bne.n	8007df4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007df2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e013      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007df8:	897b      	ldrh	r3, [r7, #10]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	6a3a      	ldr	r2, [r7, #32]
 8007e0c:	4906      	ldr	r1, [pc, #24]	@ (8007e28 <I2C_RequestMemoryRead+0x1cc>)
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f886 	bl	8007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	00010002 	.word	0x00010002

08007e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e3c:	e048      	b.n	8007ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d044      	beq.n	8007ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e46:	f7fd f9b5 	bl	80051b4 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d302      	bcc.n	8007e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d139      	bne.n	8007ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	0c1b      	lsrs	r3, r3, #16
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d10d      	bne.n	8007e82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	43da      	mvns	r2, r3
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4013      	ands	r3, r2
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	e00c      	b.n	8007e9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	43da      	mvns	r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d116      	bne.n	8007ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e023      	b.n	8007f18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	0c1b      	lsrs	r3, r3, #16
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10d      	bne.n	8007ef6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	43da      	mvns	r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bf0c      	ite	eq
 8007eec:	2301      	moveq	r3, #1
 8007eee:	2300      	movne	r3, #0
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	e00c      	b.n	8007f10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	43da      	mvns	r2, r3
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4013      	ands	r3, r2
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d093      	beq.n	8007e3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f2e:	e071      	b.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3e:	d123      	bne.n	8007f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f74:	f043 0204 	orr.w	r2, r3, #4
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e067      	b.n	8008058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d041      	beq.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f90:	f7fd f910 	bl	80051b4 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d302      	bcc.n	8007fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d136      	bne.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	0c1b      	lsrs	r3, r3, #16
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d10c      	bne.n	8007fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	43da      	mvns	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	bf14      	ite	ne
 8007fc2:	2301      	movne	r3, #1
 8007fc4:	2300      	moveq	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	e00b      	b.n	8007fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	43da      	mvns	r2, r3
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bf14      	ite	ne
 8007fdc:	2301      	movne	r3, #1
 8007fde:	2300      	moveq	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d016      	beq.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	f043 0220 	orr.w	r2, r3, #32
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e021      	b.n	8008058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b01      	cmp	r3, #1
 800801c:	d10c      	bne.n	8008038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	43da      	mvns	r2, r3
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4013      	ands	r3, r2
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	bf14      	ite	ne
 8008030:	2301      	movne	r3, #1
 8008032:	2300      	moveq	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	e00b      	b.n	8008050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	43da      	mvns	r2, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4013      	ands	r3, r2
 8008044:	b29b      	uxth	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	bf14      	ite	ne
 800804a:	2301      	movne	r3, #1
 800804c:	2300      	moveq	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	f47f af6d 	bne.w	8007f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800806c:	e034      	b.n	80080d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f8e3 	bl	800823a <I2C_IsAcknowledgeFailed>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e034      	b.n	80080e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d028      	beq.n	80080d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008086:	f7fd f895 	bl	80051b4 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	429a      	cmp	r2, r3
 8008094:	d302      	bcc.n	800809c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11d      	bne.n	80080d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a6:	2b80      	cmp	r3, #128	@ 0x80
 80080a8:	d016      	beq.n	80080d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c4:	f043 0220 	orr.w	r2, r3, #32
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e007      	b.n	80080e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e2:	2b80      	cmp	r3, #128	@ 0x80
 80080e4:	d1c3      	bne.n	800806e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080fc:	e034      	b.n	8008168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 f89b 	bl	800823a <I2C_IsAcknowledgeFailed>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e034      	b.n	8008178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d028      	beq.n	8008168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008116:	f7fd f84d 	bl	80051b4 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	429a      	cmp	r2, r3
 8008124:	d302      	bcc.n	800812c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11d      	bne.n	8008168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b04      	cmp	r3, #4
 8008138:	d016      	beq.n	8008168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	f043 0220 	orr.w	r2, r3, #32
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e007      	b.n	8008178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b04      	cmp	r3, #4
 8008174:	d1c3      	bne.n	80080fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800818c:	e049      	b.n	8008222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b10      	cmp	r3, #16
 800819a:	d119      	bne.n	80081d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0210 	mvn.w	r2, #16
 80081a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e030      	b.n	8008232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d0:	f7fc fff0 	bl	80051b4 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d302      	bcc.n	80081e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d11d      	bne.n	8008222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f0:	2b40      	cmp	r3, #64	@ 0x40
 80081f2:	d016      	beq.n	8008222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820e:	f043 0220 	orr.w	r2, r3, #32
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e007      	b.n	8008232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822c:	2b40      	cmp	r3, #64	@ 0x40
 800822e:	d1ae      	bne.n	800818e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800824c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008250:	d11b      	bne.n	800828a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800825a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008276:	f043 0204 	orr.w	r2, r3, #4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80082a2:	2300      	movs	r3, #0
 80082a4:	603b      	str	r3, [r7, #0]
 80082a6:	4b20      	ldr	r3, [pc, #128]	@ (8008328 <HAL_PWREx_EnableOverDrive+0x90>)
 80082a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008328 <HAL_PWREx_EnableOverDrive+0x90>)
 80082ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80082b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008328 <HAL_PWREx_EnableOverDrive+0x90>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082be:	4b1b      	ldr	r3, [pc, #108]	@ (800832c <HAL_PWREx_EnableOverDrive+0x94>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082c4:	f7fc ff76 	bl	80051b4 <HAL_GetTick>
 80082c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082ca:	e009      	b.n	80082e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082cc:	f7fc ff72 	bl	80051b4 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082da:	d901      	bls.n	80082e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e01f      	b.n	8008320 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082e0:	4b13      	ldr	r3, [pc, #76]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x98>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ec:	d1ee      	bne.n	80082cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80082ee:	4b11      	ldr	r3, [pc, #68]	@ (8008334 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082f4:	f7fc ff5e 	bl	80051b4 <HAL_GetTick>
 80082f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80082fa:	e009      	b.n	8008310 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082fc:	f7fc ff5a 	bl	80051b4 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800830a:	d901      	bls.n	8008310 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e007      	b.n	8008320 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008310:	4b07      	ldr	r3, [pc, #28]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x98>)
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800831c:	d1ee      	bne.n	80082fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	40023800 	.word	0x40023800
 800832c:	420e0040 	.word	0x420e0040
 8008330:	40007000 	.word	0x40007000
 8008334:	420e0044 	.word	0x420e0044

08008338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e0cc      	b.n	80084e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800834c:	4b68      	ldr	r3, [pc, #416]	@ (80084f0 <HAL_RCC_ClockConfig+0x1b8>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d90c      	bls.n	8008374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800835a:	4b65      	ldr	r3, [pc, #404]	@ (80084f0 <HAL_RCC_ClockConfig+0x1b8>)
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008362:	4b63      	ldr	r3, [pc, #396]	@ (80084f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d001      	beq.n	8008374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e0b8      	b.n	80084e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d020      	beq.n	80083c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800838c:	4b59      	ldr	r3, [pc, #356]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	4a58      	ldr	r2, [pc, #352]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008392:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008396:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083a4:	4b53      	ldr	r3, [pc, #332]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	4a52      	ldr	r2, [pc, #328]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80083aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80083ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b0:	4b50      	ldr	r3, [pc, #320]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	494d      	ldr	r1, [pc, #308]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d044      	beq.n	8008458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d107      	bne.n	80083e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083d6:	4b47      	ldr	r3, [pc, #284]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d119      	bne.n	8008416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e07f      	b.n	80084e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d003      	beq.n	80083f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d107      	bne.n	8008406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083f6:	4b3f      	ldr	r3, [pc, #252]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e06f      	b.n	80084e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008406:	4b3b      	ldr	r3, [pc, #236]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e067      	b.n	80084e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008416:	4b37      	ldr	r3, [pc, #220]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f023 0203 	bic.w	r2, r3, #3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	4934      	ldr	r1, [pc, #208]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008424:	4313      	orrs	r3, r2
 8008426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008428:	f7fc fec4 	bl	80051b4 <HAL_GetTick>
 800842c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800842e:	e00a      	b.n	8008446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008430:	f7fc fec0 	bl	80051b4 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800843e:	4293      	cmp	r3, r2
 8008440:	d901      	bls.n	8008446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e04f      	b.n	80084e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008446:	4b2b      	ldr	r3, [pc, #172]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 020c 	and.w	r2, r3, #12
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	429a      	cmp	r2, r3
 8008456:	d1eb      	bne.n	8008430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008458:	4b25      	ldr	r3, [pc, #148]	@ (80084f0 <HAL_RCC_ClockConfig+0x1b8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d20c      	bcs.n	8008480 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008466:	4b22      	ldr	r3, [pc, #136]	@ (80084f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800846e:	4b20      	ldr	r3, [pc, #128]	@ (80084f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d001      	beq.n	8008480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e032      	b.n	80084e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b00      	cmp	r3, #0
 800848a:	d008      	beq.n	800849e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800848c:	4b19      	ldr	r3, [pc, #100]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	4916      	ldr	r1, [pc, #88]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 800849a:	4313      	orrs	r3, r2
 800849c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084aa:	4b12      	ldr	r3, [pc, #72]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	490e      	ldr	r1, [pc, #56]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084be:	f000 f855 	bl	800856c <HAL_RCC_GetSysClockFreq>
 80084c2:	4602      	mov	r2, r0
 80084c4:	4b0b      	ldr	r3, [pc, #44]	@ (80084f4 <HAL_RCC_ClockConfig+0x1bc>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	091b      	lsrs	r3, r3, #4
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	490a      	ldr	r1, [pc, #40]	@ (80084f8 <HAL_RCC_ClockConfig+0x1c0>)
 80084d0:	5ccb      	ldrb	r3, [r1, r3]
 80084d2:	fa22 f303 	lsr.w	r3, r2, r3
 80084d6:	4a09      	ldr	r2, [pc, #36]	@ (80084fc <HAL_RCC_ClockConfig+0x1c4>)
 80084d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80084da:	4b09      	ldr	r3, [pc, #36]	@ (8008500 <HAL_RCC_ClockConfig+0x1c8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fc fe24 	bl	800512c <HAL_InitTick>

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	40023c00 	.word	0x40023c00
 80084f4:	40023800 	.word	0x40023800
 80084f8:	0800dd88 	.word	0x0800dd88
 80084fc:	20000068 	.word	0x20000068
 8008500:	2000006c 	.word	0x2000006c

08008504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008504:	b480      	push	{r7}
 8008506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008508:	4b03      	ldr	r3, [pc, #12]	@ (8008518 <HAL_RCC_GetHCLKFreq+0x14>)
 800850a:	681b      	ldr	r3, [r3, #0]
}
 800850c:	4618      	mov	r0, r3
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20000068 	.word	0x20000068

0800851c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008520:	f7ff fff0 	bl	8008504 <HAL_RCC_GetHCLKFreq>
 8008524:	4602      	mov	r2, r0
 8008526:	4b05      	ldr	r3, [pc, #20]	@ (800853c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	0a9b      	lsrs	r3, r3, #10
 800852c:	f003 0307 	and.w	r3, r3, #7
 8008530:	4903      	ldr	r1, [pc, #12]	@ (8008540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008532:	5ccb      	ldrb	r3, [r1, r3]
 8008534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008538:	4618      	mov	r0, r3
 800853a:	bd80      	pop	{r7, pc}
 800853c:	40023800 	.word	0x40023800
 8008540:	0800dd98 	.word	0x0800dd98

08008544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008548:	f7ff ffdc 	bl	8008504 <HAL_RCC_GetHCLKFreq>
 800854c:	4602      	mov	r2, r0
 800854e:	4b05      	ldr	r3, [pc, #20]	@ (8008564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	0b5b      	lsrs	r3, r3, #13
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	4903      	ldr	r1, [pc, #12]	@ (8008568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800855a:	5ccb      	ldrb	r3, [r1, r3]
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008560:	4618      	mov	r0, r3
 8008562:	bd80      	pop	{r7, pc}
 8008564:	40023800 	.word	0x40023800
 8008568:	0800dd98 	.word	0x0800dd98

0800856c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800856c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008570:	b0ae      	sub	sp, #184	@ 0xb8
 8008572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008592:	4bcb      	ldr	r3, [pc, #812]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 030c 	and.w	r3, r3, #12
 800859a:	2b0c      	cmp	r3, #12
 800859c:	f200 8206 	bhi.w	80089ac <HAL_RCC_GetSysClockFreq+0x440>
 80085a0:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085dd 	.word	0x080085dd
 80085ac:	080089ad 	.word	0x080089ad
 80085b0:	080089ad 	.word	0x080089ad
 80085b4:	080089ad 	.word	0x080089ad
 80085b8:	080085e5 	.word	0x080085e5
 80085bc:	080089ad 	.word	0x080089ad
 80085c0:	080089ad 	.word	0x080089ad
 80085c4:	080089ad 	.word	0x080089ad
 80085c8:	080085ed 	.word	0x080085ed
 80085cc:	080089ad 	.word	0x080089ad
 80085d0:	080089ad 	.word	0x080089ad
 80085d4:	080089ad 	.word	0x080089ad
 80085d8:	080087dd 	.word	0x080087dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085dc:	4bb9      	ldr	r3, [pc, #740]	@ (80088c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80085de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80085e2:	e1e7      	b.n	80089b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085e4:	4bb8      	ldr	r3, [pc, #736]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80085e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80085ea:	e1e3      	b.n	80089b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085ec:	4bb4      	ldr	r3, [pc, #720]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085f8:	4bb1      	ldr	r3, [pc, #708]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d071      	beq.n	80086e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008604:	4bae      	ldr	r3, [pc, #696]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	099b      	lsrs	r3, r3, #6
 800860a:	2200      	movs	r2, #0
 800860c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008610:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008620:	2300      	movs	r3, #0
 8008622:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800862a:	4622      	mov	r2, r4
 800862c:	462b      	mov	r3, r5
 800862e:	f04f 0000 	mov.w	r0, #0
 8008632:	f04f 0100 	mov.w	r1, #0
 8008636:	0159      	lsls	r1, r3, #5
 8008638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800863c:	0150      	lsls	r0, r2, #5
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4621      	mov	r1, r4
 8008644:	1a51      	subs	r1, r2, r1
 8008646:	6439      	str	r1, [r7, #64]	@ 0x40
 8008648:	4629      	mov	r1, r5
 800864a:	eb63 0301 	sbc.w	r3, r3, r1
 800864e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800865c:	4649      	mov	r1, r9
 800865e:	018b      	lsls	r3, r1, #6
 8008660:	4641      	mov	r1, r8
 8008662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008666:	4641      	mov	r1, r8
 8008668:	018a      	lsls	r2, r1, #6
 800866a:	4641      	mov	r1, r8
 800866c:	1a51      	subs	r1, r2, r1
 800866e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008670:	4649      	mov	r1, r9
 8008672:	eb63 0301 	sbc.w	r3, r3, r1
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008684:	4649      	mov	r1, r9
 8008686:	00cb      	lsls	r3, r1, #3
 8008688:	4641      	mov	r1, r8
 800868a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800868e:	4641      	mov	r1, r8
 8008690:	00ca      	lsls	r2, r1, #3
 8008692:	4610      	mov	r0, r2
 8008694:	4619      	mov	r1, r3
 8008696:	4603      	mov	r3, r0
 8008698:	4622      	mov	r2, r4
 800869a:	189b      	adds	r3, r3, r2
 800869c:	633b      	str	r3, [r7, #48]	@ 0x30
 800869e:	462b      	mov	r3, r5
 80086a0:	460a      	mov	r2, r1
 80086a2:	eb42 0303 	adc.w	r3, r2, r3
 80086a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80086b4:	4629      	mov	r1, r5
 80086b6:	024b      	lsls	r3, r1, #9
 80086b8:	4621      	mov	r1, r4
 80086ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80086be:	4621      	mov	r1, r4
 80086c0:	024a      	lsls	r2, r1, #9
 80086c2:	4610      	mov	r0, r2
 80086c4:	4619      	mov	r1, r3
 80086c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80086d8:	f7f8 faf6 	bl	8000cc8 <__aeabi_uldivmod>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4613      	mov	r3, r2
 80086e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086e6:	e067      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086e8:	4b75      	ldr	r3, [pc, #468]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	099b      	lsrs	r3, r3, #6
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80086f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80086fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008700:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008702:	2300      	movs	r3, #0
 8008704:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008706:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800870a:	4622      	mov	r2, r4
 800870c:	462b      	mov	r3, r5
 800870e:	f04f 0000 	mov.w	r0, #0
 8008712:	f04f 0100 	mov.w	r1, #0
 8008716:	0159      	lsls	r1, r3, #5
 8008718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800871c:	0150      	lsls	r0, r2, #5
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4621      	mov	r1, r4
 8008724:	1a51      	subs	r1, r2, r1
 8008726:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008728:	4629      	mov	r1, r5
 800872a:	eb63 0301 	sbc.w	r3, r3, r1
 800872e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800873c:	4649      	mov	r1, r9
 800873e:	018b      	lsls	r3, r1, #6
 8008740:	4641      	mov	r1, r8
 8008742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008746:	4641      	mov	r1, r8
 8008748:	018a      	lsls	r2, r1, #6
 800874a:	4641      	mov	r1, r8
 800874c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008750:	4649      	mov	r1, r9
 8008752:	eb63 0b01 	sbc.w	fp, r3, r1
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800876a:	4692      	mov	sl, r2
 800876c:	469b      	mov	fp, r3
 800876e:	4623      	mov	r3, r4
 8008770:	eb1a 0303 	adds.w	r3, sl, r3
 8008774:	623b      	str	r3, [r7, #32]
 8008776:	462b      	mov	r3, r5
 8008778:	eb4b 0303 	adc.w	r3, fp, r3
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	f04f 0300 	mov.w	r3, #0
 8008786:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800878a:	4629      	mov	r1, r5
 800878c:	028b      	lsls	r3, r1, #10
 800878e:	4621      	mov	r1, r4
 8008790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008794:	4621      	mov	r1, r4
 8008796:	028a      	lsls	r2, r1, #10
 8008798:	4610      	mov	r0, r2
 800879a:	4619      	mov	r1, r3
 800879c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087a0:	2200      	movs	r2, #0
 80087a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80087a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80087a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80087aa:	f7f8 fa8d 	bl	8000cc8 <__aeabi_uldivmod>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4613      	mov	r3, r2
 80087b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80087b8:	4b41      	ldr	r3, [pc, #260]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	0c1b      	lsrs	r3, r3, #16
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	3301      	adds	r3, #1
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80087ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80087da:	e0eb      	b.n	80089b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087dc:	4b38      	ldr	r3, [pc, #224]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087e8:	4b35      	ldr	r3, [pc, #212]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d06b      	beq.n	80088cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087f4:	4b32      	ldr	r3, [pc, #200]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	099b      	lsrs	r3, r3, #6
 80087fa:	2200      	movs	r2, #0
 80087fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	663b      	str	r3, [r7, #96]	@ 0x60
 8008808:	2300      	movs	r3, #0
 800880a:	667b      	str	r3, [r7, #100]	@ 0x64
 800880c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008810:	4622      	mov	r2, r4
 8008812:	462b      	mov	r3, r5
 8008814:	f04f 0000 	mov.w	r0, #0
 8008818:	f04f 0100 	mov.w	r1, #0
 800881c:	0159      	lsls	r1, r3, #5
 800881e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008822:	0150      	lsls	r0, r2, #5
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4621      	mov	r1, r4
 800882a:	1a51      	subs	r1, r2, r1
 800882c:	61b9      	str	r1, [r7, #24]
 800882e:	4629      	mov	r1, r5
 8008830:	eb63 0301 	sbc.w	r3, r3, r1
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	f04f 0200 	mov.w	r2, #0
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008842:	4659      	mov	r1, fp
 8008844:	018b      	lsls	r3, r1, #6
 8008846:	4651      	mov	r1, sl
 8008848:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800884c:	4651      	mov	r1, sl
 800884e:	018a      	lsls	r2, r1, #6
 8008850:	4651      	mov	r1, sl
 8008852:	ebb2 0801 	subs.w	r8, r2, r1
 8008856:	4659      	mov	r1, fp
 8008858:	eb63 0901 	sbc.w	r9, r3, r1
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800886c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008870:	4690      	mov	r8, r2
 8008872:	4699      	mov	r9, r3
 8008874:	4623      	mov	r3, r4
 8008876:	eb18 0303 	adds.w	r3, r8, r3
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	462b      	mov	r3, r5
 800887e:	eb49 0303 	adc.w	r3, r9, r3
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008890:	4629      	mov	r1, r5
 8008892:	024b      	lsls	r3, r1, #9
 8008894:	4621      	mov	r1, r4
 8008896:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800889a:	4621      	mov	r1, r4
 800889c:	024a      	lsls	r2, r1, #9
 800889e:	4610      	mov	r0, r2
 80088a0:	4619      	mov	r1, r3
 80088a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088a6:	2200      	movs	r2, #0
 80088a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80088ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80088b0:	f7f8 fa0a 	bl	8000cc8 <__aeabi_uldivmod>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4613      	mov	r3, r2
 80088ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088be:	e065      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x420>
 80088c0:	40023800 	.word	0x40023800
 80088c4:	00f42400 	.word	0x00f42400
 80088c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088cc:	4b3d      	ldr	r3, [pc, #244]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	099b      	lsrs	r3, r3, #6
 80088d2:	2200      	movs	r2, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	4611      	mov	r1, r2
 80088d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80088dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80088de:	2300      	movs	r3, #0
 80088e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80088e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80088e6:	4642      	mov	r2, r8
 80088e8:	464b      	mov	r3, r9
 80088ea:	f04f 0000 	mov.w	r0, #0
 80088ee:	f04f 0100 	mov.w	r1, #0
 80088f2:	0159      	lsls	r1, r3, #5
 80088f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088f8:	0150      	lsls	r0, r2, #5
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4641      	mov	r1, r8
 8008900:	1a51      	subs	r1, r2, r1
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	4649      	mov	r1, r9
 8008906:	eb63 0301 	sbc.w	r3, r3, r1
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	f04f 0300 	mov.w	r3, #0
 8008914:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008918:	4659      	mov	r1, fp
 800891a:	018b      	lsls	r3, r1, #6
 800891c:	4651      	mov	r1, sl
 800891e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008922:	4651      	mov	r1, sl
 8008924:	018a      	lsls	r2, r1, #6
 8008926:	4651      	mov	r1, sl
 8008928:	1a54      	subs	r4, r2, r1
 800892a:	4659      	mov	r1, fp
 800892c:	eb63 0501 	sbc.w	r5, r3, r1
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	00eb      	lsls	r3, r5, #3
 800893a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800893e:	00e2      	lsls	r2, r4, #3
 8008940:	4614      	mov	r4, r2
 8008942:	461d      	mov	r5, r3
 8008944:	4643      	mov	r3, r8
 8008946:	18e3      	adds	r3, r4, r3
 8008948:	603b      	str	r3, [r7, #0]
 800894a:	464b      	mov	r3, r9
 800894c:	eb45 0303 	adc.w	r3, r5, r3
 8008950:	607b      	str	r3, [r7, #4]
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800895e:	4629      	mov	r1, r5
 8008960:	028b      	lsls	r3, r1, #10
 8008962:	4621      	mov	r1, r4
 8008964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008968:	4621      	mov	r1, r4
 800896a:	028a      	lsls	r2, r1, #10
 800896c:	4610      	mov	r0, r2
 800896e:	4619      	mov	r1, r3
 8008970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008974:	2200      	movs	r2, #0
 8008976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008978:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800897a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800897e:	f7f8 f9a3 	bl	8000cc8 <__aeabi_uldivmod>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4613      	mov	r3, r2
 8008988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800898c:	4b0d      	ldr	r3, [pc, #52]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	0f1b      	lsrs	r3, r3, #28
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800899a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800899e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80089aa:	e003      	b.n	80089b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089ac:	4b06      	ldr	r3, [pc, #24]	@ (80089c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80089ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80089b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	37b8      	adds	r7, #184	@ 0xb8
 80089bc:	46bd      	mov	sp, r7
 80089be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089c2:	bf00      	nop
 80089c4:	40023800 	.word	0x40023800
 80089c8:	00f42400 	.word	0x00f42400

080089cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e28d      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8083 	beq.w	8008af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80089ec:	4b94      	ldr	r3, [pc, #592]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f003 030c 	and.w	r3, r3, #12
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d019      	beq.n	8008a2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80089f8:	4b91      	ldr	r3, [pc, #580]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d106      	bne.n	8008a12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008a04:	4b8e      	ldr	r3, [pc, #568]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a10:	d00c      	beq.n	8008a2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a12:	4b8b      	ldr	r3, [pc, #556]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008a1a:	2b0c      	cmp	r3, #12
 8008a1c:	d112      	bne.n	8008a44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a1e:	4b88      	ldr	r3, [pc, #544]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a2a:	d10b      	bne.n	8008a44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a2c:	4b84      	ldr	r3, [pc, #528]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d05b      	beq.n	8008af0 <HAL_RCC_OscConfig+0x124>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d157      	bne.n	8008af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e25a      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a4c:	d106      	bne.n	8008a5c <HAL_RCC_OscConfig+0x90>
 8008a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a7b      	ldr	r2, [pc, #492]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	e01d      	b.n	8008a98 <HAL_RCC_OscConfig+0xcc>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a64:	d10c      	bne.n	8008a80 <HAL_RCC_OscConfig+0xb4>
 8008a66:	4b76      	ldr	r3, [pc, #472]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a75      	ldr	r2, [pc, #468]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	4b73      	ldr	r3, [pc, #460]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a72      	ldr	r2, [pc, #456]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	e00b      	b.n	8008a98 <HAL_RCC_OscConfig+0xcc>
 8008a80:	4b6f      	ldr	r3, [pc, #444]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a6e      	ldr	r2, [pc, #440]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a6b      	ldr	r2, [pc, #428]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d013      	beq.n	8008ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa0:	f7fc fb88 	bl	80051b4 <HAL_GetTick>
 8008aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008aa8:	f7fc fb84 	bl	80051b4 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b64      	cmp	r3, #100	@ 0x64
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e21f      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aba:	4b61      	ldr	r3, [pc, #388]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0f0      	beq.n	8008aa8 <HAL_RCC_OscConfig+0xdc>
 8008ac6:	e014      	b.n	8008af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac8:	f7fc fb74 	bl	80051b4 <HAL_GetTick>
 8008acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ad0:	f7fc fb70 	bl	80051b4 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b64      	cmp	r3, #100	@ 0x64
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e20b      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ae2:	4b57      	ldr	r3, [pc, #348]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f0      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x104>
 8008aee:	e000      	b.n	8008af2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d06f      	beq.n	8008bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008afe:	4b50      	ldr	r3, [pc, #320]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 030c 	and.w	r3, r3, #12
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d017      	beq.n	8008b3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	d105      	bne.n	8008b22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008b16:	4b4a      	ldr	r3, [pc, #296]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00b      	beq.n	8008b3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b22:	4b47      	ldr	r3, [pc, #284]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008b2a:	2b0c      	cmp	r3, #12
 8008b2c:	d11c      	bne.n	8008b68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b2e:	4b44      	ldr	r3, [pc, #272]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d116      	bne.n	8008b68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b3a:	4b41      	ldr	r3, [pc, #260]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <HAL_RCC_OscConfig+0x186>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d001      	beq.n	8008b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e1d3      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b52:	4b3b      	ldr	r3, [pc, #236]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	4937      	ldr	r1, [pc, #220]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b66:	e03a      	b.n	8008bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d020      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b70:	4b34      	ldr	r3, [pc, #208]	@ (8008c44 <HAL_RCC_OscConfig+0x278>)
 8008b72:	2201      	movs	r2, #1
 8008b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b76:	f7fc fb1d 	bl	80051b4 <HAL_GetTick>
 8008b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b7c:	e008      	b.n	8008b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b7e:	f7fc fb19 	bl	80051b4 <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d901      	bls.n	8008b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e1b4      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b90:	4b2b      	ldr	r3, [pc, #172]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0f0      	beq.n	8008b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b9c:	4b28      	ldr	r3, [pc, #160]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	4925      	ldr	r1, [pc, #148]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	600b      	str	r3, [r1, #0]
 8008bb0:	e015      	b.n	8008bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bb2:	4b24      	ldr	r3, [pc, #144]	@ (8008c44 <HAL_RCC_OscConfig+0x278>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb8:	f7fc fafc 	bl	80051b4 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bc0:	f7fc faf8 	bl	80051b4 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e193      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f0      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d036      	beq.n	8008c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d016      	beq.n	8008c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bf2:	4b15      	ldr	r3, [pc, #84]	@ (8008c48 <HAL_RCC_OscConfig+0x27c>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf8:	f7fc fadc 	bl	80051b4 <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c00:	f7fc fad8 	bl	80051b4 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e173      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c12:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <HAL_RCC_OscConfig+0x274>)
 8008c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0f0      	beq.n	8008c00 <HAL_RCC_OscConfig+0x234>
 8008c1e:	e01b      	b.n	8008c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c20:	4b09      	ldr	r3, [pc, #36]	@ (8008c48 <HAL_RCC_OscConfig+0x27c>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c26:	f7fc fac5 	bl	80051b4 <HAL_GetTick>
 8008c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c2c:	e00e      	b.n	8008c4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c2e:	f7fc fac1 	bl	80051b4 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d907      	bls.n	8008c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e15c      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
 8008c40:	40023800 	.word	0x40023800
 8008c44:	42470000 	.word	0x42470000
 8008c48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c4c:	4b8a      	ldr	r3, [pc, #552]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1ea      	bne.n	8008c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8097 	beq.w	8008d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c6a:	4b83      	ldr	r3, [pc, #524]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10f      	bne.n	8008c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c76:	2300      	movs	r3, #0
 8008c78:	60bb      	str	r3, [r7, #8]
 8008c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c86:	4b7c      	ldr	r3, [pc, #496]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c8e:	60bb      	str	r3, [r7, #8]
 8008c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c96:	4b79      	ldr	r3, [pc, #484]	@ (8008e7c <HAL_RCC_OscConfig+0x4b0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d118      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ca2:	4b76      	ldr	r3, [pc, #472]	@ (8008e7c <HAL_RCC_OscConfig+0x4b0>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a75      	ldr	r2, [pc, #468]	@ (8008e7c <HAL_RCC_OscConfig+0x4b0>)
 8008ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cae:	f7fc fa81 	bl	80051b4 <HAL_GetTick>
 8008cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cb6:	f7fc fa7d 	bl	80051b4 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e118      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8008e7c <HAL_RCC_OscConfig+0x4b0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d106      	bne.n	8008cea <HAL_RCC_OscConfig+0x31e>
 8008cdc:	4b66      	ldr	r3, [pc, #408]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce0:	4a65      	ldr	r2, [pc, #404]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008ce2:	f043 0301 	orr.w	r3, r3, #1
 8008ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ce8:	e01c      	b.n	8008d24 <HAL_RCC_OscConfig+0x358>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d10c      	bne.n	8008d0c <HAL_RCC_OscConfig+0x340>
 8008cf2:	4b61      	ldr	r3, [pc, #388]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cf6:	4a60      	ldr	r2, [pc, #384]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008cf8:	f043 0304 	orr.w	r3, r3, #4
 8008cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d02:	4a5d      	ldr	r2, [pc, #372]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d0a:	e00b      	b.n	8008d24 <HAL_RCC_OscConfig+0x358>
 8008d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d10:	4a59      	ldr	r2, [pc, #356]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d12:	f023 0301 	bic.w	r3, r3, #1
 8008d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d18:	4b57      	ldr	r3, [pc, #348]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d1c:	4a56      	ldr	r2, [pc, #344]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d1e:	f023 0304 	bic.w	r3, r3, #4
 8008d22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d015      	beq.n	8008d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d2c:	f7fc fa42 	bl	80051b4 <HAL_GetTick>
 8008d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d32:	e00a      	b.n	8008d4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d34:	f7fc fa3e 	bl	80051b4 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e0d7      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0ee      	beq.n	8008d34 <HAL_RCC_OscConfig+0x368>
 8008d56:	e014      	b.n	8008d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d58:	f7fc fa2c 	bl	80051b4 <HAL_GetTick>
 8008d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d5e:	e00a      	b.n	8008d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d60:	f7fc fa28 	bl	80051b4 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e0c1      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d76:	4b40      	ldr	r3, [pc, #256]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1ee      	bne.n	8008d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d105      	bne.n	8008d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d88:	4b3b      	ldr	r3, [pc, #236]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 80ad 	beq.w	8008ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d9e:	4b36      	ldr	r3, [pc, #216]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 030c 	and.w	r3, r3, #12
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d060      	beq.n	8008e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d145      	bne.n	8008e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008db2:	4b33      	ldr	r3, [pc, #204]	@ (8008e80 <HAL_RCC_OscConfig+0x4b4>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7fc f9fc 	bl	80051b4 <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc0:	f7fc f9f8 	bl	80051b4 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e093      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dd2:	4b29      	ldr	r3, [pc, #164]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f0      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	69da      	ldr	r2, [r3, #28]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dec:	019b      	lsls	r3, r3, #6
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	3b01      	subs	r3, #1
 8008df8:	041b      	lsls	r3, r3, #16
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	061b      	lsls	r3, r3, #24
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e08:	071b      	lsls	r3, r3, #28
 8008e0a:	491b      	ldr	r1, [pc, #108]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e10:	4b1b      	ldr	r3, [pc, #108]	@ (8008e80 <HAL_RCC_OscConfig+0x4b4>)
 8008e12:	2201      	movs	r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e16:	f7fc f9cd 	bl	80051b4 <HAL_GetTick>
 8008e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e1c:	e008      	b.n	8008e30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e1e:	f7fc f9c9 	bl	80051b4 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e064      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e30:	4b11      	ldr	r3, [pc, #68]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0f0      	beq.n	8008e1e <HAL_RCC_OscConfig+0x452>
 8008e3c:	e05c      	b.n	8008ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e3e:	4b10      	ldr	r3, [pc, #64]	@ (8008e80 <HAL_RCC_OscConfig+0x4b4>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e44:	f7fc f9b6 	bl	80051b4 <HAL_GetTick>
 8008e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e4a:	e008      	b.n	8008e5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e4c:	f7fc f9b2 	bl	80051b4 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d901      	bls.n	8008e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e04d      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e5e:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <HAL_RCC_OscConfig+0x4ac>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1f0      	bne.n	8008e4c <HAL_RCC_OscConfig+0x480>
 8008e6a:	e045      	b.n	8008ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d107      	bne.n	8008e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e040      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	40007000 	.word	0x40007000
 8008e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e84:	4b1f      	ldr	r3, [pc, #124]	@ (8008f04 <HAL_RCC_OscConfig+0x538>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d030      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d129      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d122      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d119      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d10f      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d107      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d001      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	40023800 	.word	0x40023800

08008f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e041      	b.n	8008f9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7fb fa3a 	bl	80043a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4619      	mov	r1, r3
 8008f46:	4610      	mov	r0, r2
 8008f48:	f000 faec 	bl	8009524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d109      	bne.n	8008fcc <HAL_TIM_PWM_Start+0x24>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	bf14      	ite	ne
 8008fc4:	2301      	movne	r3, #1
 8008fc6:	2300      	moveq	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	e022      	b.n	8009012 <HAL_TIM_PWM_Start+0x6a>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d109      	bne.n	8008fe6 <HAL_TIM_PWM_Start+0x3e>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	bf14      	ite	ne
 8008fde:	2301      	movne	r3, #1
 8008fe0:	2300      	moveq	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	e015      	b.n	8009012 <HAL_TIM_PWM_Start+0x6a>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d109      	bne.n	8009000 <HAL_TIM_PWM_Start+0x58>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	bf14      	ite	ne
 8008ff8:	2301      	movne	r3, #1
 8008ffa:	2300      	moveq	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	e008      	b.n	8009012 <HAL_TIM_PWM_Start+0x6a>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	bf14      	ite	ne
 800900c:	2301      	movne	r3, #1
 800900e:	2300      	moveq	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e07c      	b.n	8009114 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d104      	bne.n	800902a <HAL_TIM_PWM_Start+0x82>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009028:	e013      	b.n	8009052 <HAL_TIM_PWM_Start+0xaa>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b04      	cmp	r3, #4
 800902e:	d104      	bne.n	800903a <HAL_TIM_PWM_Start+0x92>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009038:	e00b      	b.n	8009052 <HAL_TIM_PWM_Start+0xaa>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b08      	cmp	r3, #8
 800903e:	d104      	bne.n	800904a <HAL_TIM_PWM_Start+0xa2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009048:	e003      	b.n	8009052 <HAL_TIM_PWM_Start+0xaa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fcbe 	bl	80099dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a2d      	ldr	r2, [pc, #180]	@ (800911c <HAL_TIM_PWM_Start+0x174>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d004      	beq.n	8009074 <HAL_TIM_PWM_Start+0xcc>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a2c      	ldr	r2, [pc, #176]	@ (8009120 <HAL_TIM_PWM_Start+0x178>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d101      	bne.n	8009078 <HAL_TIM_PWM_Start+0xd0>
 8009074:	2301      	movs	r3, #1
 8009076:	e000      	b.n	800907a <HAL_TIM_PWM_Start+0xd2>
 8009078:	2300      	movs	r3, #0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800908c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a22      	ldr	r2, [pc, #136]	@ (800911c <HAL_TIM_PWM_Start+0x174>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d022      	beq.n	80090de <HAL_TIM_PWM_Start+0x136>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a0:	d01d      	beq.n	80090de <HAL_TIM_PWM_Start+0x136>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009124 <HAL_TIM_PWM_Start+0x17c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d018      	beq.n	80090de <HAL_TIM_PWM_Start+0x136>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009128 <HAL_TIM_PWM_Start+0x180>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d013      	beq.n	80090de <HAL_TIM_PWM_Start+0x136>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a1c      	ldr	r2, [pc, #112]	@ (800912c <HAL_TIM_PWM_Start+0x184>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d00e      	beq.n	80090de <HAL_TIM_PWM_Start+0x136>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a16      	ldr	r2, [pc, #88]	@ (8009120 <HAL_TIM_PWM_Start+0x178>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d009      	beq.n	80090de <HAL_TIM_PWM_Start+0x136>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a18      	ldr	r2, [pc, #96]	@ (8009130 <HAL_TIM_PWM_Start+0x188>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d004      	beq.n	80090de <HAL_TIM_PWM_Start+0x136>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a16      	ldr	r2, [pc, #88]	@ (8009134 <HAL_TIM_PWM_Start+0x18c>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d111      	bne.n	8009102 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b06      	cmp	r3, #6
 80090ee:	d010      	beq.n	8009112 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0201 	orr.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009100:	e007      	b.n	8009112 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f042 0201 	orr.w	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	40010000 	.word	0x40010000
 8009120:	40010400 	.word	0x40010400
 8009124:	40000400 	.word	0x40000400
 8009128:	40000800 	.word	0x40000800
 800912c:	40000c00 	.word	0x40000c00
 8009130:	40014000 	.word	0x40014000
 8009134:	40001800 	.word	0x40001800

08009138 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e097      	b.n	800927c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d106      	bne.n	8009166 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7fb f8a7 	bl	80042b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2202      	movs	r2, #2
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800917c:	f023 0307 	bic.w	r3, r3, #7
 8009180:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3304      	adds	r3, #4
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f000 f9c9 	bl	8009524 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a1b      	ldr	r3, [r3, #32]
 80091a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	4313      	orrs	r3, r2
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80091d8:	f023 030c 	bic.w	r3, r3, #12
 80091dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	4313      	orrs	r3, r2
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	011a      	lsls	r2, r3, #4
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	031b      	lsls	r3, r3, #12
 8009208:	4313      	orrs	r3, r2
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	4313      	orrs	r3, r2
 800920e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009216:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800921e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	4313      	orrs	r3, r2
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009294:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800929c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80092ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d110      	bne.n	80092d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d102      	bne.n	80092c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092ba:	7b7b      	ldrb	r3, [r7, #13]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d001      	beq.n	80092c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e069      	b.n	8009398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092d4:	e031      	b.n	800933a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d110      	bne.n	80092fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d102      	bne.n	80092e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092e2:	7b3b      	ldrb	r3, [r7, #12]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d001      	beq.n	80092ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e055      	b.n	8009398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092fc:	e01d      	b.n	800933a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d108      	bne.n	8009316 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d105      	bne.n	8009316 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800930a:	7b7b      	ldrb	r3, [r7, #13]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d102      	bne.n	8009316 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009310:	7b3b      	ldrb	r3, [r7, #12]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d001      	beq.n	800931a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e03e      	b.n	8009398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2202      	movs	r2, #2
 800932e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2202      	movs	r2, #2
 8009336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_TIM_Encoder_Start+0xc4>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b04      	cmp	r3, #4
 8009344:	d008      	beq.n	8009358 <HAL_TIM_Encoder_Start+0xd4>
 8009346:	e00f      	b.n	8009368 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2201      	movs	r2, #1
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fb43 	bl	80099dc <TIM_CCxChannelCmd>
      break;
 8009356:	e016      	b.n	8009386 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2201      	movs	r2, #1
 800935e:	2104      	movs	r1, #4
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fb3b 	bl	80099dc <TIM_CCxChannelCmd>
      break;
 8009366:	e00e      	b.n	8009386 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2201      	movs	r2, #1
 800936e:	2100      	movs	r1, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fb33 	bl	80099dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2201      	movs	r2, #1
 800937c:	2104      	movs	r1, #4
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fb2c 	bl	80099dc <TIM_CCxChannelCmd>
      break;
 8009384:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f042 0201 	orr.w	r2, r2, #1
 8009394:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093ba:	2302      	movs	r3, #2
 80093bc:	e0ae      	b.n	800951c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b0c      	cmp	r3, #12
 80093ca:	f200 809f 	bhi.w	800950c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	08009409 	.word	0x08009409
 80093d8:	0800950d 	.word	0x0800950d
 80093dc:	0800950d 	.word	0x0800950d
 80093e0:	0800950d 	.word	0x0800950d
 80093e4:	08009449 	.word	0x08009449
 80093e8:	0800950d 	.word	0x0800950d
 80093ec:	0800950d 	.word	0x0800950d
 80093f0:	0800950d 	.word	0x0800950d
 80093f4:	0800948b 	.word	0x0800948b
 80093f8:	0800950d 	.word	0x0800950d
 80093fc:	0800950d 	.word	0x0800950d
 8009400:	0800950d 	.word	0x0800950d
 8009404:	080094cb 	.word	0x080094cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f934 	bl	800967c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699a      	ldr	r2, [r3, #24]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0208 	orr.w	r2, r2, #8
 8009422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0204 	bic.w	r2, r2, #4
 8009432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6999      	ldr	r1, [r3, #24]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	691a      	ldr	r2, [r3, #16]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	619a      	str	r2, [r3, #24]
      break;
 8009446:	e064      	b.n	8009512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f984 	bl	800975c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699a      	ldr	r2, [r3, #24]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6999      	ldr	r1, [r3, #24]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	021a      	lsls	r2, r3, #8
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	619a      	str	r2, [r3, #24]
      break;
 8009488:	e043      	b.n	8009512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f9d9 	bl	8009848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69da      	ldr	r2, [r3, #28]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f042 0208 	orr.w	r2, r2, #8
 80094a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0204 	bic.w	r2, r2, #4
 80094b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	69d9      	ldr	r1, [r3, #28]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	691a      	ldr	r2, [r3, #16]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	61da      	str	r2, [r3, #28]
      break;
 80094c8:	e023      	b.n	8009512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 fa2d 	bl	8009930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69da      	ldr	r2, [r3, #28]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69d9      	ldr	r1, [r3, #28]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	021a      	lsls	r2, r3, #8
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	430a      	orrs	r2, r1
 8009508:	61da      	str	r2, [r3, #28]
      break;
 800950a:	e002      	b.n	8009512 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	75fb      	strb	r3, [r7, #23]
      break;
 8009510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3718      	adds	r7, #24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a46      	ldr	r2, [pc, #280]	@ (8009650 <TIM_Base_SetConfig+0x12c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d013      	beq.n	8009564 <TIM_Base_SetConfig+0x40>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009542:	d00f      	beq.n	8009564 <TIM_Base_SetConfig+0x40>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a43      	ldr	r2, [pc, #268]	@ (8009654 <TIM_Base_SetConfig+0x130>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00b      	beq.n	8009564 <TIM_Base_SetConfig+0x40>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a42      	ldr	r2, [pc, #264]	@ (8009658 <TIM_Base_SetConfig+0x134>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d007      	beq.n	8009564 <TIM_Base_SetConfig+0x40>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a41      	ldr	r2, [pc, #260]	@ (800965c <TIM_Base_SetConfig+0x138>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d003      	beq.n	8009564 <TIM_Base_SetConfig+0x40>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a40      	ldr	r2, [pc, #256]	@ (8009660 <TIM_Base_SetConfig+0x13c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d108      	bne.n	8009576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800956a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a35      	ldr	r2, [pc, #212]	@ (8009650 <TIM_Base_SetConfig+0x12c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d02b      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009584:	d027      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a32      	ldr	r2, [pc, #200]	@ (8009654 <TIM_Base_SetConfig+0x130>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d023      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a31      	ldr	r2, [pc, #196]	@ (8009658 <TIM_Base_SetConfig+0x134>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d01f      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a30      	ldr	r2, [pc, #192]	@ (800965c <TIM_Base_SetConfig+0x138>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d01b      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a2f      	ldr	r2, [pc, #188]	@ (8009660 <TIM_Base_SetConfig+0x13c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d017      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a2e      	ldr	r2, [pc, #184]	@ (8009664 <TIM_Base_SetConfig+0x140>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d013      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009668 <TIM_Base_SetConfig+0x144>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00f      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a2c      	ldr	r2, [pc, #176]	@ (800966c <TIM_Base_SetConfig+0x148>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00b      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a2b      	ldr	r2, [pc, #172]	@ (8009670 <TIM_Base_SetConfig+0x14c>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d007      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a2a      	ldr	r2, [pc, #168]	@ (8009674 <TIM_Base_SetConfig+0x150>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d003      	beq.n	80095d6 <TIM_Base_SetConfig+0xb2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a29      	ldr	r2, [pc, #164]	@ (8009678 <TIM_Base_SetConfig+0x154>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d108      	bne.n	80095e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a10      	ldr	r2, [pc, #64]	@ (8009650 <TIM_Base_SetConfig+0x12c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d003      	beq.n	800961c <TIM_Base_SetConfig+0xf8>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a12      	ldr	r2, [pc, #72]	@ (8009660 <TIM_Base_SetConfig+0x13c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d103      	bne.n	8009624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	691a      	ldr	r2, [r3, #16]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b01      	cmp	r3, #1
 8009634:	d105      	bne.n	8009642 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f023 0201 	bic.w	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	611a      	str	r2, [r3, #16]
  }
}
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	40010000 	.word	0x40010000
 8009654:	40000400 	.word	0x40000400
 8009658:	40000800 	.word	0x40000800
 800965c:	40000c00 	.word	0x40000c00
 8009660:	40010400 	.word	0x40010400
 8009664:	40014000 	.word	0x40014000
 8009668:	40014400 	.word	0x40014400
 800966c:	40014800 	.word	0x40014800
 8009670:	40001800 	.word	0x40001800
 8009674:	40001c00 	.word	0x40001c00
 8009678:	40002000 	.word	0x40002000

0800967c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	f023 0201 	bic.w	r2, r3, #1
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f023 0302 	bic.w	r3, r3, #2
 80096c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a20      	ldr	r2, [pc, #128]	@ (8009754 <TIM_OC1_SetConfig+0xd8>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d003      	beq.n	80096e0 <TIM_OC1_SetConfig+0x64>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a1f      	ldr	r2, [pc, #124]	@ (8009758 <TIM_OC1_SetConfig+0xdc>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d10c      	bne.n	80096fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	f023 0308 	bic.w	r3, r3, #8
 80096e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f023 0304 	bic.w	r3, r3, #4
 80096f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a15      	ldr	r2, [pc, #84]	@ (8009754 <TIM_OC1_SetConfig+0xd8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d003      	beq.n	800970a <TIM_OC1_SetConfig+0x8e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a14      	ldr	r2, [pc, #80]	@ (8009758 <TIM_OC1_SetConfig+0xdc>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d111      	bne.n	800972e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	4313      	orrs	r3, r2
 8009722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	621a      	str	r2, [r3, #32]
}
 8009748:	bf00      	nop
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400

0800975c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	f023 0210 	bic.w	r2, r3, #16
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800978a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f023 0320 	bic.w	r3, r3, #32
 80097a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a22      	ldr	r2, [pc, #136]	@ (8009840 <TIM_OC2_SetConfig+0xe4>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d003      	beq.n	80097c4 <TIM_OC2_SetConfig+0x68>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a21      	ldr	r2, [pc, #132]	@ (8009844 <TIM_OC2_SetConfig+0xe8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d10d      	bne.n	80097e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	011b      	lsls	r3, r3, #4
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a17      	ldr	r2, [pc, #92]	@ (8009840 <TIM_OC2_SetConfig+0xe4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d003      	beq.n	80097f0 <TIM_OC2_SetConfig+0x94>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a16      	ldr	r2, [pc, #88]	@ (8009844 <TIM_OC2_SetConfig+0xe8>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d113      	bne.n	8009818 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	4313      	orrs	r3, r2
 800980a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	4313      	orrs	r3, r2
 8009816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400

08009848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	021b      	lsls	r3, r3, #8
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a21      	ldr	r2, [pc, #132]	@ (8009928 <TIM_OC3_SetConfig+0xe0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d003      	beq.n	80098ae <TIM_OC3_SetConfig+0x66>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a20      	ldr	r2, [pc, #128]	@ (800992c <TIM_OC3_SetConfig+0xe4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d10d      	bne.n	80098ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	021b      	lsls	r3, r3, #8
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a16      	ldr	r2, [pc, #88]	@ (8009928 <TIM_OC3_SetConfig+0xe0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d003      	beq.n	80098da <TIM_OC3_SetConfig+0x92>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a15      	ldr	r2, [pc, #84]	@ (800992c <TIM_OC3_SetConfig+0xe4>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d113      	bne.n	8009902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	011b      	lsls	r3, r3, #4
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	621a      	str	r2, [r3, #32]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	40010000 	.word	0x40010000
 800992c:	40010400 	.word	0x40010400

08009930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800995e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800997a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	031b      	lsls	r3, r3, #12
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4313      	orrs	r3, r2
 8009986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a12      	ldr	r2, [pc, #72]	@ (80099d4 <TIM_OC4_SetConfig+0xa4>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d003      	beq.n	8009998 <TIM_OC4_SetConfig+0x68>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a11      	ldr	r2, [pc, #68]	@ (80099d8 <TIM_OC4_SetConfig+0xa8>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d109      	bne.n	80099ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800999e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	019b      	lsls	r3, r3, #6
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	621a      	str	r2, [r3, #32]
}
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	40010000 	.word	0x40010000
 80099d8:	40010400 	.word	0x40010400

080099dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f003 031f 	and.w	r3, r3, #31
 80099ee:	2201      	movs	r2, #1
 80099f0:	fa02 f303 	lsl.w	r3, r2, r3
 80099f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6a1a      	ldr	r2, [r3, #32]
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	43db      	mvns	r3, r3
 80099fe:	401a      	ands	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a1a      	ldr	r2, [r3, #32]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f003 031f 	and.w	r3, r3, #31
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	fa01 f303 	lsl.w	r3, r1, r3
 8009a14:	431a      	orrs	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	621a      	str	r2, [r3, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
	...

08009a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e05a      	b.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a21      	ldr	r2, [pc, #132]	@ (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d022      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8c:	d01d      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a1d      	ldr	r2, [pc, #116]	@ (8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d018      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00e      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a18      	ldr	r2, [pc, #96]	@ (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d009      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a17      	ldr	r2, [pc, #92]	@ (8009b18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d004      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a15      	ldr	r2, [pc, #84]	@ (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d10c      	bne.n	8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40000400 	.word	0x40000400
 8009b0c:	40000800 	.word	0x40000800
 8009b10:	40000c00 	.word	0x40000c00
 8009b14:	40010400 	.word	0x40010400
 8009b18:	40014000 	.word	0x40014000
 8009b1c:	40001800 	.word	0x40001800

08009b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e042      	b.n	8009bb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fa fcaa 	bl	80044a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2224      	movs	r2, #36	@ 0x24
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fd69 	bl	800a63c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691a      	ldr	r2, [r3, #16]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695a      	ldr	r2, [r3, #20]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	@ 0x28
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b20      	cmp	r3, #32
 8009bde:	d175      	bne.n	8009ccc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <HAL_UART_Transmit+0x2c>
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e06e      	b.n	8009cce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2221      	movs	r2, #33	@ 0x21
 8009bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bfe:	f7fb fad9 	bl	80051b4 <HAL_GetTick>
 8009c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	88fa      	ldrh	r2, [r7, #6]
 8009c0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c18:	d108      	bne.n	8009c2c <HAL_UART_Transmit+0x6c>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e003      	b.n	8009c34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c34:	e02e      	b.n	8009c94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2180      	movs	r1, #128	@ 0x80
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fb05 	bl	800a250 <UART_WaitOnFlagUntilTimeout>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e03a      	b.n	8009cce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10b      	bne.n	8009c76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	3302      	adds	r3, #2
 8009c72:	61bb      	str	r3, [r7, #24]
 8009c74:	e007      	b.n	8009c86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	3301      	adds	r3, #1
 8009c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1cb      	bne.n	8009c36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2140      	movs	r1, #64	@ 0x40
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fad1 	bl	800a250 <UART_WaitOnFlagUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e006      	b.n	8009cce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	e000      	b.n	8009cce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009ccc:	2302      	movs	r3, #2
  }
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3720      	adds	r7, #32
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b0ba      	sub	sp, #232	@ 0xe8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10f      	bne.n	8009d3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d22:	f003 0320 	and.w	r3, r3, #32
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d009      	beq.n	8009d3e <HAL_UART_IRQHandler+0x66>
 8009d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fbc2 	bl	800a4c0 <UART_Receive_IT>
      return;
 8009d3c:	e25b      	b.n	800a1f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 80de 	beq.w	8009f04 <HAL_UART_IRQHandler+0x22c>
 8009d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d106      	bne.n	8009d62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80d1 	beq.w	8009f04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <HAL_UART_IRQHandler+0xae>
 8009d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d005      	beq.n	8009d86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7e:	f043 0201 	orr.w	r2, r3, #1
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d8a:	f003 0304 	and.w	r3, r3, #4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <HAL_UART_IRQHandler+0xd2>
 8009d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d005      	beq.n	8009daa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009da2:	f043 0202 	orr.w	r2, r3, #2
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00b      	beq.n	8009dce <HAL_UART_IRQHandler+0xf6>
 8009db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc6:	f043 0204 	orr.w	r2, r3, #4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd2:	f003 0308 	and.w	r3, r3, #8
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d011      	beq.n	8009dfe <HAL_UART_IRQHandler+0x126>
 8009dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d105      	bne.n	8009df2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	f043 0208 	orr.w	r2, r3, #8
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 81f2 	beq.w	800a1ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e0c:	f003 0320 	and.w	r3, r3, #32
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d008      	beq.n	8009e26 <HAL_UART_IRQHandler+0x14e>
 8009e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fb4d 	bl	800a4c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e30:	2b40      	cmp	r3, #64	@ 0x40
 8009e32:	bf0c      	ite	eq
 8009e34:	2301      	moveq	r3, #1
 8009e36:	2300      	movne	r3, #0
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d103      	bne.n	8009e52 <HAL_UART_IRQHandler+0x17a>
 8009e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d04f      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fa55 	bl	800a302 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e62:	2b40      	cmp	r3, #64	@ 0x40
 8009e64:	d141      	bne.n	8009eea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3314      	adds	r3, #20
 8009e6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3314      	adds	r3, #20
 8009e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1d9      	bne.n	8009e66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d013      	beq.n	8009ee2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ebe:	4a7e      	ldr	r2, [pc, #504]	@ (800a0b8 <HAL_UART_IRQHandler+0x3e0>)
 8009ec0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fb ffe4 	bl	8005e94 <HAL_DMA_Abort_IT>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d016      	beq.n	8009f00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009edc:	4610      	mov	r0, r2
 8009ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee0:	e00e      	b.n	8009f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f99e 	bl	800a224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee8:	e00a      	b.n	8009f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f99a 	bl	800a224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef0:	e006      	b.n	8009f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f996 	bl	800a224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009efe:	e175      	b.n	800a1ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f00:	bf00      	nop
    return;
 8009f02:	e173      	b.n	800a1ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	f040 814f 	bne.w	800a1ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f12:	f003 0310 	and.w	r3, r3, #16
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 8148 	beq.w	800a1ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f20:	f003 0310 	and.w	r3, r3, #16
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 8141 	beq.w	800a1ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60bb      	str	r3, [r7, #8]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60bb      	str	r3, [r7, #8]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	60bb      	str	r3, [r7, #8]
 8009f3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f4a:	2b40      	cmp	r3, #64	@ 0x40
 8009f4c:	f040 80b6 	bne.w	800a0bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8145 	beq.w	800a1f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	f080 813e 	bcs.w	800a1f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f86:	f000 8088 	beq.w	800a09a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	330c      	adds	r3, #12
 8009f90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f98:	e853 3f00 	ldrex	r3, [r3]
 8009f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	330c      	adds	r3, #12
 8009fb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009fb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1d9      	bne.n	8009f8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3314      	adds	r3, #20
 8009fdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009fe6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fe8:	f023 0301 	bic.w	r3, r3, #1
 8009fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ffa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a002:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a00c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e1      	bne.n	8009fd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3314      	adds	r3, #20
 800a018:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3314      	adds	r3, #20
 800a032:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a036:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a038:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a03c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e3      	bne.n	800a012 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	330c      	adds	r3, #12
 800a05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a06a:	f023 0310 	bic.w	r3, r3, #16
 800a06e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	330c      	adds	r3, #12
 800a078:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a07c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a07e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a082:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e3      	bne.n	800a058 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a094:	4618      	mov	r0, r3
 800a096:	f7fb fe8d 	bl	8005db4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2202      	movs	r2, #2
 800a09e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f8c1 	bl	800a238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0b6:	e09b      	b.n	800a1f0 <HAL_UART_IRQHandler+0x518>
 800a0b8:	0800a3c9 	.word	0x0800a3c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 808e 	beq.w	800a1f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a0d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 8089 	beq.w	800a1f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	330c      	adds	r3, #12
 800a0e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	330c      	adds	r3, #12
 800a102:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a106:	647a      	str	r2, [r7, #68]	@ 0x44
 800a108:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a10c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e3      	bne.n	800a0e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3314      	adds	r3, #20
 800a120:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	623b      	str	r3, [r7, #32]
   return(result);
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3314      	adds	r3, #20
 800a13a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a13e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a140:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e3      	bne.n	800a11a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	330c      	adds	r3, #12
 800a166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	e853 3f00 	ldrex	r3, [r3]
 800a16e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0310 	bic.w	r3, r3, #16
 800a176:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	330c      	adds	r3, #12
 800a180:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a184:	61fa      	str	r2, [r7, #28]
 800a186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	69b9      	ldr	r1, [r7, #24]
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	617b      	str	r3, [r7, #20]
   return(result);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e3      	bne.n	800a160 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a19e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f847 	bl	800a238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1aa:	e023      	b.n	800a1f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d009      	beq.n	800a1cc <HAL_UART_IRQHandler+0x4f4>
 800a1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f913 	bl	800a3f0 <UART_Transmit_IT>
    return;
 800a1ca:	e014      	b.n	800a1f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00e      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x51e>
 800a1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d008      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f953 	bl	800a490 <UART_EndTransmit_IT>
    return;
 800a1ea:	e004      	b.n	800a1f6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a1ec:	bf00      	nop
 800a1ee:	e002      	b.n	800a1f6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a1f0:	bf00      	nop
 800a1f2:	e000      	b.n	800a1f6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a1f4:	bf00      	nop
  }
}
 800a1f6:	37e8      	adds	r7, #232	@ 0xe8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	603b      	str	r3, [r7, #0]
 800a25c:	4613      	mov	r3, r2
 800a25e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a260:	e03b      	b.n	800a2da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a268:	d037      	beq.n	800a2da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a26a:	f7fa ffa3 	bl	80051b4 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	6a3a      	ldr	r2, [r7, #32]
 800a276:	429a      	cmp	r2, r3
 800a278:	d302      	bcc.n	800a280 <UART_WaitOnFlagUntilTimeout+0x30>
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e03a      	b.n	800a2fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f003 0304 	and.w	r3, r3, #4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d023      	beq.n	800a2da <UART_WaitOnFlagUntilTimeout+0x8a>
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b80      	cmp	r3, #128	@ 0x80
 800a296:	d020      	beq.n	800a2da <UART_WaitOnFlagUntilTimeout+0x8a>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b40      	cmp	r3, #64	@ 0x40
 800a29c:	d01d      	beq.n	800a2da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0308 	and.w	r3, r3, #8
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d116      	bne.n	800a2da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	617b      	str	r3, [r7, #20]
 800a2c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f81d 	bl	800a302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2208      	movs	r2, #8
 800a2cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e00f      	b.n	800a2fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	bf0c      	ite	eq
 800a2ea:	2301      	moveq	r3, #1
 800a2ec:	2300      	movne	r3, #0
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d0b4      	beq.n	800a262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a302:	b480      	push	{r7}
 800a304:	b095      	sub	sp, #84	@ 0x54
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	330c      	adds	r3, #12
 800a310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	330c      	adds	r3, #12
 800a328:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a32a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a330:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a332:	e841 2300 	strex	r3, r2, [r1]
 800a336:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1e5      	bne.n	800a30a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3314      	adds	r3, #20
 800a344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	f023 0301 	bic.w	r3, r3, #1
 800a354:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3314      	adds	r3, #20
 800a35c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a35e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e5      	bne.n	800a33e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a376:	2b01      	cmp	r3, #1
 800a378:	d119      	bne.n	800a3ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	330c      	adds	r3, #12
 800a380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	e853 3f00 	ldrex	r3, [r3]
 800a388:	60bb      	str	r3, [r7, #8]
   return(result);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	f023 0310 	bic.w	r3, r3, #16
 800a390:	647b      	str	r3, [r7, #68]	@ 0x44
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	330c      	adds	r3, #12
 800a398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a39a:	61ba      	str	r2, [r7, #24]
 800a39c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39e:	6979      	ldr	r1, [r7, #20]
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	e841 2300 	strex	r3, r2, [r1]
 800a3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1e5      	bne.n	800a37a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2220      	movs	r2, #32
 800a3b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a3bc:	bf00      	nop
 800a3be:	3754      	adds	r7, #84	@ 0x54
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7ff ff1e 	bl	800a224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b21      	cmp	r3, #33	@ 0x21
 800a402:	d13e      	bne.n	800a482 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a40c:	d114      	bne.n	800a438 <UART_Transmit_IT+0x48>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d110      	bne.n	800a438 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a42a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a1b      	ldr	r3, [r3, #32]
 800a430:	1c9a      	adds	r2, r3, #2
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	621a      	str	r2, [r3, #32]
 800a436:	e008      	b.n	800a44a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	1c59      	adds	r1, r3, #1
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6211      	str	r1, [r2, #32]
 800a442:	781a      	ldrb	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a44e:	b29b      	uxth	r3, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	b29b      	uxth	r3, r3
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	4619      	mov	r1, r3
 800a458:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10f      	bne.n	800a47e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a46c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68da      	ldr	r2, [r3, #12]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a47c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	e000      	b.n	800a484 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a482:	2302      	movs	r3, #2
  }
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68da      	ldr	r2, [r3, #12]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff fea3 	bl	800a1fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b08c      	sub	sp, #48	@ 0x30
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b22      	cmp	r3, #34	@ 0x22
 800a4d2:	f040 80ae 	bne.w	800a632 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4de:	d117      	bne.n	800a510 <UART_Receive_IT+0x50>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d113      	bne.n	800a510 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a502:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a508:	1c9a      	adds	r2, r3, #2
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a50e:	e026      	b.n	800a55e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a522:	d007      	beq.n	800a534 <UART_Receive_IT+0x74>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10a      	bne.n	800a542 <UART_Receive_IT+0x82>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53e:	701a      	strb	r2, [r3, #0]
 800a540:	e008      	b.n	800a554 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a552:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29b      	uxth	r3, r3
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	4619      	mov	r1, r3
 800a56c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d15d      	bne.n	800a62e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0220 	bic.w	r2, r2, #32
 800a580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	695a      	ldr	r2, [r3, #20]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 0201 	bic.w	r2, r2, #1
 800a5a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d135      	bne.n	800a624 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f023 0310 	bic.w	r3, r3, #16
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	330c      	adds	r3, #12
 800a5dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5de:	623a      	str	r2, [r7, #32]
 800a5e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	69f9      	ldr	r1, [r7, #28]
 800a5e4:	6a3a      	ldr	r2, [r7, #32]
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e5      	bne.n	800a5be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	2b10      	cmp	r3, #16
 800a5fe:	d10a      	bne.n	800a616 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff fe0b 	bl	800a238 <HAL_UARTEx_RxEventCallback>
 800a622:	e002      	b.n	800a62a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff fdf3 	bl	800a210 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e002      	b.n	800a634 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	e000      	b.n	800a634 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a632:	2302      	movs	r3, #2
  }
}
 800a634:	4618      	mov	r0, r3
 800a636:	3730      	adds	r7, #48	@ 0x30
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a63c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a640:	b0c0      	sub	sp, #256	@ 0x100
 800a642:	af00      	add	r7, sp, #0
 800a644:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a658:	68d9      	ldr	r1, [r3, #12]
 800a65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	ea40 0301 	orr.w	r3, r0, r1
 800a664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a66a:	689a      	ldr	r2, [r3, #8]
 800a66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	431a      	orrs	r2, r3
 800a674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	431a      	orrs	r2, r3
 800a67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	4313      	orrs	r3, r2
 800a684:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a694:	f021 010c 	bic.w	r1, r1, #12
 800a698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a6b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b6:	6999      	ldr	r1, [r3, #24]
 800a6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	ea40 0301 	orr.w	r3, r0, r1
 800a6c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	4b8f      	ldr	r3, [pc, #572]	@ (800a908 <UART_SetConfig+0x2cc>)
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d005      	beq.n	800a6dc <UART_SetConfig+0xa0>
 800a6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	4b8d      	ldr	r3, [pc, #564]	@ (800a90c <UART_SetConfig+0x2d0>)
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d104      	bne.n	800a6e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a6dc:	f7fd ff32 	bl	8008544 <HAL_RCC_GetPCLK2Freq>
 800a6e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a6e4:	e003      	b.n	800a6ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6e6:	f7fd ff19 	bl	800851c <HAL_RCC_GetPCLK1Freq>
 800a6ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6f8:	f040 810c 	bne.w	800a914 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a700:	2200      	movs	r2, #0
 800a702:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a706:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a70a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a70e:	4622      	mov	r2, r4
 800a710:	462b      	mov	r3, r5
 800a712:	1891      	adds	r1, r2, r2
 800a714:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a716:	415b      	adcs	r3, r3
 800a718:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a71a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a71e:	4621      	mov	r1, r4
 800a720:	eb12 0801 	adds.w	r8, r2, r1
 800a724:	4629      	mov	r1, r5
 800a726:	eb43 0901 	adc.w	r9, r3, r1
 800a72a:	f04f 0200 	mov.w	r2, #0
 800a72e:	f04f 0300 	mov.w	r3, #0
 800a732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a73a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a73e:	4690      	mov	r8, r2
 800a740:	4699      	mov	r9, r3
 800a742:	4623      	mov	r3, r4
 800a744:	eb18 0303 	adds.w	r3, r8, r3
 800a748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a74c:	462b      	mov	r3, r5
 800a74e:	eb49 0303 	adc.w	r3, r9, r3
 800a752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a762:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a76a:	460b      	mov	r3, r1
 800a76c:	18db      	adds	r3, r3, r3
 800a76e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a770:	4613      	mov	r3, r2
 800a772:	eb42 0303 	adc.w	r3, r2, r3
 800a776:	657b      	str	r3, [r7, #84]	@ 0x54
 800a778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a77c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a780:	f7f6 faa2 	bl	8000cc8 <__aeabi_uldivmod>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4b61      	ldr	r3, [pc, #388]	@ (800a910 <UART_SetConfig+0x2d4>)
 800a78a:	fba3 2302 	umull	r2, r3, r3, r2
 800a78e:	095b      	lsrs	r3, r3, #5
 800a790:	011c      	lsls	r4, r3, #4
 800a792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a796:	2200      	movs	r2, #0
 800a798:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a79c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a7a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a7a4:	4642      	mov	r2, r8
 800a7a6:	464b      	mov	r3, r9
 800a7a8:	1891      	adds	r1, r2, r2
 800a7aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a7ac:	415b      	adcs	r3, r3
 800a7ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a7b4:	4641      	mov	r1, r8
 800a7b6:	eb12 0a01 	adds.w	sl, r2, r1
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	eb43 0b01 	adc.w	fp, r3, r1
 800a7c0:	f04f 0200 	mov.w	r2, #0
 800a7c4:	f04f 0300 	mov.w	r3, #0
 800a7c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a7cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a7d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7d4:	4692      	mov	sl, r2
 800a7d6:	469b      	mov	fp, r3
 800a7d8:	4643      	mov	r3, r8
 800a7da:	eb1a 0303 	adds.w	r3, sl, r3
 800a7de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	eb4b 0303 	adc.w	r3, fp, r3
 800a7e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a7fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a800:	460b      	mov	r3, r1
 800a802:	18db      	adds	r3, r3, r3
 800a804:	643b      	str	r3, [r7, #64]	@ 0x40
 800a806:	4613      	mov	r3, r2
 800a808:	eb42 0303 	adc.w	r3, r2, r3
 800a80c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a80e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a816:	f7f6 fa57 	bl	8000cc8 <__aeabi_uldivmod>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	4b3b      	ldr	r3, [pc, #236]	@ (800a910 <UART_SetConfig+0x2d4>)
 800a822:	fba3 2301 	umull	r2, r3, r3, r1
 800a826:	095b      	lsrs	r3, r3, #5
 800a828:	2264      	movs	r2, #100	@ 0x64
 800a82a:	fb02 f303 	mul.w	r3, r2, r3
 800a82e:	1acb      	subs	r3, r1, r3
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a836:	4b36      	ldr	r3, [pc, #216]	@ (800a910 <UART_SetConfig+0x2d4>)
 800a838:	fba3 2302 	umull	r2, r3, r3, r2
 800a83c:	095b      	lsrs	r3, r3, #5
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a844:	441c      	add	r4, r3
 800a846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a850:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a858:	4642      	mov	r2, r8
 800a85a:	464b      	mov	r3, r9
 800a85c:	1891      	adds	r1, r2, r2
 800a85e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a860:	415b      	adcs	r3, r3
 800a862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a868:	4641      	mov	r1, r8
 800a86a:	1851      	adds	r1, r2, r1
 800a86c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a86e:	4649      	mov	r1, r9
 800a870:	414b      	adcs	r3, r1
 800a872:	637b      	str	r3, [r7, #52]	@ 0x34
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a880:	4659      	mov	r1, fp
 800a882:	00cb      	lsls	r3, r1, #3
 800a884:	4651      	mov	r1, sl
 800a886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a88a:	4651      	mov	r1, sl
 800a88c:	00ca      	lsls	r2, r1, #3
 800a88e:	4610      	mov	r0, r2
 800a890:	4619      	mov	r1, r3
 800a892:	4603      	mov	r3, r0
 800a894:	4642      	mov	r2, r8
 800a896:	189b      	adds	r3, r3, r2
 800a898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a89c:	464b      	mov	r3, r9
 800a89e:	460a      	mov	r2, r1
 800a8a0:	eb42 0303 	adc.w	r3, r2, r3
 800a8a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a8b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a8b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a8bc:	460b      	mov	r3, r1
 800a8be:	18db      	adds	r3, r3, r3
 800a8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	eb42 0303 	adc.w	r3, r2, r3
 800a8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a8ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a8d2:	f7f6 f9f9 	bl	8000cc8 <__aeabi_uldivmod>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4b0d      	ldr	r3, [pc, #52]	@ (800a910 <UART_SetConfig+0x2d4>)
 800a8dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a8e0:	095b      	lsrs	r3, r3, #5
 800a8e2:	2164      	movs	r1, #100	@ 0x64
 800a8e4:	fb01 f303 	mul.w	r3, r1, r3
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	00db      	lsls	r3, r3, #3
 800a8ec:	3332      	adds	r3, #50	@ 0x32
 800a8ee:	4a08      	ldr	r2, [pc, #32]	@ (800a910 <UART_SetConfig+0x2d4>)
 800a8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f4:	095b      	lsrs	r3, r3, #5
 800a8f6:	f003 0207 	and.w	r2, r3, #7
 800a8fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4422      	add	r2, r4
 800a902:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a904:	e106      	b.n	800ab14 <UART_SetConfig+0x4d8>
 800a906:	bf00      	nop
 800a908:	40011000 	.word	0x40011000
 800a90c:	40011400 	.word	0x40011400
 800a910:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a918:	2200      	movs	r2, #0
 800a91a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a91e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a926:	4642      	mov	r2, r8
 800a928:	464b      	mov	r3, r9
 800a92a:	1891      	adds	r1, r2, r2
 800a92c:	6239      	str	r1, [r7, #32]
 800a92e:	415b      	adcs	r3, r3
 800a930:	627b      	str	r3, [r7, #36]	@ 0x24
 800a932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a936:	4641      	mov	r1, r8
 800a938:	1854      	adds	r4, r2, r1
 800a93a:	4649      	mov	r1, r9
 800a93c:	eb43 0501 	adc.w	r5, r3, r1
 800a940:	f04f 0200 	mov.w	r2, #0
 800a944:	f04f 0300 	mov.w	r3, #0
 800a948:	00eb      	lsls	r3, r5, #3
 800a94a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a94e:	00e2      	lsls	r2, r4, #3
 800a950:	4614      	mov	r4, r2
 800a952:	461d      	mov	r5, r3
 800a954:	4643      	mov	r3, r8
 800a956:	18e3      	adds	r3, r4, r3
 800a958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a95c:	464b      	mov	r3, r9
 800a95e:	eb45 0303 	adc.w	r3, r5, r3
 800a962:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a972:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a976:	f04f 0200 	mov.w	r2, #0
 800a97a:	f04f 0300 	mov.w	r3, #0
 800a97e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a982:	4629      	mov	r1, r5
 800a984:	008b      	lsls	r3, r1, #2
 800a986:	4621      	mov	r1, r4
 800a988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a98c:	4621      	mov	r1, r4
 800a98e:	008a      	lsls	r2, r1, #2
 800a990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a994:	f7f6 f998 	bl	8000cc8 <__aeabi_uldivmod>
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4b60      	ldr	r3, [pc, #384]	@ (800ab20 <UART_SetConfig+0x4e4>)
 800a99e:	fba3 2302 	umull	r2, r3, r3, r2
 800a9a2:	095b      	lsrs	r3, r3, #5
 800a9a4:	011c      	lsls	r4, r3, #4
 800a9a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a9b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	1891      	adds	r1, r2, r2
 800a9be:	61b9      	str	r1, [r7, #24]
 800a9c0:	415b      	adcs	r3, r3
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9c8:	4641      	mov	r1, r8
 800a9ca:	1851      	adds	r1, r2, r1
 800a9cc:	6139      	str	r1, [r7, #16]
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	414b      	adcs	r3, r1
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	f04f 0200 	mov.w	r2, #0
 800a9d8:	f04f 0300 	mov.w	r3, #0
 800a9dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a9e0:	4659      	mov	r1, fp
 800a9e2:	00cb      	lsls	r3, r1, #3
 800a9e4:	4651      	mov	r1, sl
 800a9e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9ea:	4651      	mov	r1, sl
 800a9ec:	00ca      	lsls	r2, r1, #3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	4642      	mov	r2, r8
 800a9f6:	189b      	adds	r3, r3, r2
 800a9f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	460a      	mov	r2, r1
 800aa00:	eb42 0303 	adc.w	r3, r2, r3
 800aa04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aa14:	f04f 0200 	mov.w	r2, #0
 800aa18:	f04f 0300 	mov.w	r3, #0
 800aa1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aa20:	4649      	mov	r1, r9
 800aa22:	008b      	lsls	r3, r1, #2
 800aa24:	4641      	mov	r1, r8
 800aa26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa2a:	4641      	mov	r1, r8
 800aa2c:	008a      	lsls	r2, r1, #2
 800aa2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aa32:	f7f6 f949 	bl	8000cc8 <__aeabi_uldivmod>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	4b38      	ldr	r3, [pc, #224]	@ (800ab20 <UART_SetConfig+0x4e4>)
 800aa3e:	fba3 2301 	umull	r2, r3, r3, r1
 800aa42:	095b      	lsrs	r3, r3, #5
 800aa44:	2264      	movs	r2, #100	@ 0x64
 800aa46:	fb02 f303 	mul.w	r3, r2, r3
 800aa4a:	1acb      	subs	r3, r1, r3
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	3332      	adds	r3, #50	@ 0x32
 800aa50:	4a33      	ldr	r2, [pc, #204]	@ (800ab20 <UART_SetConfig+0x4e4>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa5c:	441c      	add	r4, r3
 800aa5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa62:	2200      	movs	r2, #0
 800aa64:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa66:	677a      	str	r2, [r7, #116]	@ 0x74
 800aa68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aa6c:	4642      	mov	r2, r8
 800aa6e:	464b      	mov	r3, r9
 800aa70:	1891      	adds	r1, r2, r2
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	415b      	adcs	r3, r3
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	1851      	adds	r1, r2, r1
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	4649      	mov	r1, r9
 800aa84:	414b      	adcs	r3, r1
 800aa86:	607b      	str	r3, [r7, #4]
 800aa88:	f04f 0200 	mov.w	r2, #0
 800aa8c:	f04f 0300 	mov.w	r3, #0
 800aa90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa94:	4659      	mov	r1, fp
 800aa96:	00cb      	lsls	r3, r1, #3
 800aa98:	4651      	mov	r1, sl
 800aa9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa9e:	4651      	mov	r1, sl
 800aaa0:	00ca      	lsls	r2, r1, #3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	189b      	adds	r3, r3, r2
 800aaac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaae:	464b      	mov	r3, r9
 800aab0:	460a      	mov	r2, r1
 800aab2:	eb42 0303 	adc.w	r3, r2, r3
 800aab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	663b      	str	r3, [r7, #96]	@ 0x60
 800aac2:	667a      	str	r2, [r7, #100]	@ 0x64
 800aac4:	f04f 0200 	mov.w	r2, #0
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aad0:	4649      	mov	r1, r9
 800aad2:	008b      	lsls	r3, r1, #2
 800aad4:	4641      	mov	r1, r8
 800aad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aada:	4641      	mov	r1, r8
 800aadc:	008a      	lsls	r2, r1, #2
 800aade:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aae2:	f7f6 f8f1 	bl	8000cc8 <__aeabi_uldivmod>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4b0d      	ldr	r3, [pc, #52]	@ (800ab20 <UART_SetConfig+0x4e4>)
 800aaec:	fba3 1302 	umull	r1, r3, r3, r2
 800aaf0:	095b      	lsrs	r3, r3, #5
 800aaf2:	2164      	movs	r1, #100	@ 0x64
 800aaf4:	fb01 f303 	mul.w	r3, r1, r3
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	3332      	adds	r3, #50	@ 0x32
 800aafe:	4a08      	ldr	r2, [pc, #32]	@ (800ab20 <UART_SetConfig+0x4e4>)
 800ab00:	fba2 2303 	umull	r2, r3, r2, r3
 800ab04:	095b      	lsrs	r3, r3, #5
 800ab06:	f003 020f 	and.w	r2, r3, #15
 800ab0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4422      	add	r2, r4
 800ab12:	609a      	str	r2, [r3, #8]
}
 800ab14:	bf00      	nop
 800ab16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab20:	51eb851f 	.word	0x51eb851f

0800ab24 <__cvt>:
 800ab24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	ec57 6b10 	vmov	r6, r7, d0
 800ab2c:	2f00      	cmp	r7, #0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	4619      	mov	r1, r3
 800ab32:	463b      	mov	r3, r7
 800ab34:	bfbb      	ittet	lt
 800ab36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab3a:	461f      	movlt	r7, r3
 800ab3c:	2300      	movge	r3, #0
 800ab3e:	232d      	movlt	r3, #45	@ 0x2d
 800ab40:	700b      	strb	r3, [r1, #0]
 800ab42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab48:	4691      	mov	r9, r2
 800ab4a:	f023 0820 	bic.w	r8, r3, #32
 800ab4e:	bfbc      	itt	lt
 800ab50:	4632      	movlt	r2, r6
 800ab52:	4616      	movlt	r6, r2
 800ab54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab58:	d005      	beq.n	800ab66 <__cvt+0x42>
 800ab5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab5e:	d100      	bne.n	800ab62 <__cvt+0x3e>
 800ab60:	3401      	adds	r4, #1
 800ab62:	2102      	movs	r1, #2
 800ab64:	e000      	b.n	800ab68 <__cvt+0x44>
 800ab66:	2103      	movs	r1, #3
 800ab68:	ab03      	add	r3, sp, #12
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	ab02      	add	r3, sp, #8
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	ec47 6b10 	vmov	d0, r6, r7
 800ab74:	4653      	mov	r3, sl
 800ab76:	4622      	mov	r2, r4
 800ab78:	f000 feb2 	bl	800b8e0 <_dtoa_r>
 800ab7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab80:	4605      	mov	r5, r0
 800ab82:	d119      	bne.n	800abb8 <__cvt+0x94>
 800ab84:	f019 0f01 	tst.w	r9, #1
 800ab88:	d00e      	beq.n	800aba8 <__cvt+0x84>
 800ab8a:	eb00 0904 	add.w	r9, r0, r4
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2300      	movs	r3, #0
 800ab92:	4630      	mov	r0, r6
 800ab94:	4639      	mov	r1, r7
 800ab96:	f7f5 ffb7 	bl	8000b08 <__aeabi_dcmpeq>
 800ab9a:	b108      	cbz	r0, 800aba0 <__cvt+0x7c>
 800ab9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aba0:	2230      	movs	r2, #48	@ 0x30
 800aba2:	9b03      	ldr	r3, [sp, #12]
 800aba4:	454b      	cmp	r3, r9
 800aba6:	d31e      	bcc.n	800abe6 <__cvt+0xc2>
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abac:	1b5b      	subs	r3, r3, r5
 800abae:	4628      	mov	r0, r5
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	b004      	add	sp, #16
 800abb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abbc:	eb00 0904 	add.w	r9, r0, r4
 800abc0:	d1e5      	bne.n	800ab8e <__cvt+0x6a>
 800abc2:	7803      	ldrb	r3, [r0, #0]
 800abc4:	2b30      	cmp	r3, #48	@ 0x30
 800abc6:	d10a      	bne.n	800abde <__cvt+0xba>
 800abc8:	2200      	movs	r2, #0
 800abca:	2300      	movs	r3, #0
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f7f5 ff9a 	bl	8000b08 <__aeabi_dcmpeq>
 800abd4:	b918      	cbnz	r0, 800abde <__cvt+0xba>
 800abd6:	f1c4 0401 	rsb	r4, r4, #1
 800abda:	f8ca 4000 	str.w	r4, [sl]
 800abde:	f8da 3000 	ldr.w	r3, [sl]
 800abe2:	4499      	add	r9, r3
 800abe4:	e7d3      	b.n	800ab8e <__cvt+0x6a>
 800abe6:	1c59      	adds	r1, r3, #1
 800abe8:	9103      	str	r1, [sp, #12]
 800abea:	701a      	strb	r2, [r3, #0]
 800abec:	e7d9      	b.n	800aba2 <__cvt+0x7e>

0800abee <__exponent>:
 800abee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf0:	2900      	cmp	r1, #0
 800abf2:	bfba      	itte	lt
 800abf4:	4249      	neglt	r1, r1
 800abf6:	232d      	movlt	r3, #45	@ 0x2d
 800abf8:	232b      	movge	r3, #43	@ 0x2b
 800abfa:	2909      	cmp	r1, #9
 800abfc:	7002      	strb	r2, [r0, #0]
 800abfe:	7043      	strb	r3, [r0, #1]
 800ac00:	dd29      	ble.n	800ac56 <__exponent+0x68>
 800ac02:	f10d 0307 	add.w	r3, sp, #7
 800ac06:	461d      	mov	r5, r3
 800ac08:	270a      	movs	r7, #10
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac10:	fb07 1416 	mls	r4, r7, r6, r1
 800ac14:	3430      	adds	r4, #48	@ 0x30
 800ac16:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	2c63      	cmp	r4, #99	@ 0x63
 800ac1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac22:	4631      	mov	r1, r6
 800ac24:	dcf1      	bgt.n	800ac0a <__exponent+0x1c>
 800ac26:	3130      	adds	r1, #48	@ 0x30
 800ac28:	1e94      	subs	r4, r2, #2
 800ac2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac2e:	1c41      	adds	r1, r0, #1
 800ac30:	4623      	mov	r3, r4
 800ac32:	42ab      	cmp	r3, r5
 800ac34:	d30a      	bcc.n	800ac4c <__exponent+0x5e>
 800ac36:	f10d 0309 	add.w	r3, sp, #9
 800ac3a:	1a9b      	subs	r3, r3, r2
 800ac3c:	42ac      	cmp	r4, r5
 800ac3e:	bf88      	it	hi
 800ac40:	2300      	movhi	r3, #0
 800ac42:	3302      	adds	r3, #2
 800ac44:	4403      	add	r3, r0
 800ac46:	1a18      	subs	r0, r3, r0
 800ac48:	b003      	add	sp, #12
 800ac4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac50:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac54:	e7ed      	b.n	800ac32 <__exponent+0x44>
 800ac56:	2330      	movs	r3, #48	@ 0x30
 800ac58:	3130      	adds	r1, #48	@ 0x30
 800ac5a:	7083      	strb	r3, [r0, #2]
 800ac5c:	70c1      	strb	r1, [r0, #3]
 800ac5e:	1d03      	adds	r3, r0, #4
 800ac60:	e7f1      	b.n	800ac46 <__exponent+0x58>
	...

0800ac64 <_printf_float>:
 800ac64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	b08d      	sub	sp, #52	@ 0x34
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac70:	4616      	mov	r6, r2
 800ac72:	461f      	mov	r7, r3
 800ac74:	4605      	mov	r5, r0
 800ac76:	f000 fd23 	bl	800b6c0 <_localeconv_r>
 800ac7a:	6803      	ldr	r3, [r0, #0]
 800ac7c:	9304      	str	r3, [sp, #16]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f5 fb16 	bl	80002b0 <strlen>
 800ac84:	2300      	movs	r3, #0
 800ac86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac88:	f8d8 3000 	ldr.w	r3, [r8]
 800ac8c:	9005      	str	r0, [sp, #20]
 800ac8e:	3307      	adds	r3, #7
 800ac90:	f023 0307 	bic.w	r3, r3, #7
 800ac94:	f103 0208 	add.w	r2, r3, #8
 800ac98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac9c:	f8d4 b000 	ldr.w	fp, [r4]
 800aca0:	f8c8 2000 	str.w	r2, [r8]
 800aca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aca8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800acac:	9307      	str	r3, [sp, #28]
 800acae:	f8cd 8018 	str.w	r8, [sp, #24]
 800acb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800acb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acba:	4b9c      	ldr	r3, [pc, #624]	@ (800af2c <_printf_float+0x2c8>)
 800acbc:	f04f 32ff 	mov.w	r2, #4294967295
 800acc0:	f7f5 ff54 	bl	8000b6c <__aeabi_dcmpun>
 800acc4:	bb70      	cbnz	r0, 800ad24 <_printf_float+0xc0>
 800acc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acca:	4b98      	ldr	r3, [pc, #608]	@ (800af2c <_printf_float+0x2c8>)
 800accc:	f04f 32ff 	mov.w	r2, #4294967295
 800acd0:	f7f5 ff2e 	bl	8000b30 <__aeabi_dcmple>
 800acd4:	bb30      	cbnz	r0, 800ad24 <_printf_float+0xc0>
 800acd6:	2200      	movs	r2, #0
 800acd8:	2300      	movs	r3, #0
 800acda:	4640      	mov	r0, r8
 800acdc:	4649      	mov	r1, r9
 800acde:	f7f5 ff1d 	bl	8000b1c <__aeabi_dcmplt>
 800ace2:	b110      	cbz	r0, 800acea <_printf_float+0x86>
 800ace4:	232d      	movs	r3, #45	@ 0x2d
 800ace6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acea:	4a91      	ldr	r2, [pc, #580]	@ (800af30 <_printf_float+0x2cc>)
 800acec:	4b91      	ldr	r3, [pc, #580]	@ (800af34 <_printf_float+0x2d0>)
 800acee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800acf2:	bf8c      	ite	hi
 800acf4:	4690      	movhi	r8, r2
 800acf6:	4698      	movls	r8, r3
 800acf8:	2303      	movs	r3, #3
 800acfa:	6123      	str	r3, [r4, #16]
 800acfc:	f02b 0304 	bic.w	r3, fp, #4
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	f04f 0900 	mov.w	r9, #0
 800ad06:	9700      	str	r7, [sp, #0]
 800ad08:	4633      	mov	r3, r6
 800ad0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f000 f9d2 	bl	800b0b8 <_printf_common>
 800ad14:	3001      	adds	r0, #1
 800ad16:	f040 808d 	bne.w	800ae34 <_printf_float+0x1d0>
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	b00d      	add	sp, #52	@ 0x34
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	4642      	mov	r2, r8
 800ad26:	464b      	mov	r3, r9
 800ad28:	4640      	mov	r0, r8
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	f7f5 ff1e 	bl	8000b6c <__aeabi_dcmpun>
 800ad30:	b140      	cbz	r0, 800ad44 <_printf_float+0xe0>
 800ad32:	464b      	mov	r3, r9
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	bfbc      	itt	lt
 800ad38:	232d      	movlt	r3, #45	@ 0x2d
 800ad3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad3e:	4a7e      	ldr	r2, [pc, #504]	@ (800af38 <_printf_float+0x2d4>)
 800ad40:	4b7e      	ldr	r3, [pc, #504]	@ (800af3c <_printf_float+0x2d8>)
 800ad42:	e7d4      	b.n	800acee <_printf_float+0x8a>
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad4a:	9206      	str	r2, [sp, #24]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	d13b      	bne.n	800adc8 <_printf_float+0x164>
 800ad50:	2306      	movs	r3, #6
 800ad52:	6063      	str	r3, [r4, #4]
 800ad54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6022      	str	r2, [r4, #0]
 800ad5c:	9303      	str	r3, [sp, #12]
 800ad5e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad60:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad64:	ab09      	add	r3, sp, #36	@ 0x24
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	6861      	ldr	r1, [r4, #4]
 800ad6a:	ec49 8b10 	vmov	d0, r8, r9
 800ad6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad72:	4628      	mov	r0, r5
 800ad74:	f7ff fed6 	bl	800ab24 <__cvt>
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad7c:	2b47      	cmp	r3, #71	@ 0x47
 800ad7e:	4680      	mov	r8, r0
 800ad80:	d129      	bne.n	800add6 <_printf_float+0x172>
 800ad82:	1cc8      	adds	r0, r1, #3
 800ad84:	db02      	blt.n	800ad8c <_printf_float+0x128>
 800ad86:	6863      	ldr	r3, [r4, #4]
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	dd41      	ble.n	800ae10 <_printf_float+0x1ac>
 800ad8c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad90:	fa5f fa8a 	uxtb.w	sl, sl
 800ad94:	3901      	subs	r1, #1
 800ad96:	4652      	mov	r2, sl
 800ad98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad9e:	f7ff ff26 	bl	800abee <__exponent>
 800ada2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ada4:	1813      	adds	r3, r2, r0
 800ada6:	2a01      	cmp	r2, #1
 800ada8:	4681      	mov	r9, r0
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	dc02      	bgt.n	800adb4 <_printf_float+0x150>
 800adae:	6822      	ldr	r2, [r4, #0]
 800adb0:	07d2      	lsls	r2, r2, #31
 800adb2:	d501      	bpl.n	800adb8 <_printf_float+0x154>
 800adb4:	3301      	adds	r3, #1
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d0a2      	beq.n	800ad06 <_printf_float+0xa2>
 800adc0:	232d      	movs	r3, #45	@ 0x2d
 800adc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adc6:	e79e      	b.n	800ad06 <_printf_float+0xa2>
 800adc8:	9a06      	ldr	r2, [sp, #24]
 800adca:	2a47      	cmp	r2, #71	@ 0x47
 800adcc:	d1c2      	bne.n	800ad54 <_printf_float+0xf0>
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1c0      	bne.n	800ad54 <_printf_float+0xf0>
 800add2:	2301      	movs	r3, #1
 800add4:	e7bd      	b.n	800ad52 <_printf_float+0xee>
 800add6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adda:	d9db      	bls.n	800ad94 <_printf_float+0x130>
 800addc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ade0:	d118      	bne.n	800ae14 <_printf_float+0x1b0>
 800ade2:	2900      	cmp	r1, #0
 800ade4:	6863      	ldr	r3, [r4, #4]
 800ade6:	dd0b      	ble.n	800ae00 <_printf_float+0x19c>
 800ade8:	6121      	str	r1, [r4, #16]
 800adea:	b913      	cbnz	r3, 800adf2 <_printf_float+0x18e>
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	07d0      	lsls	r0, r2, #31
 800adf0:	d502      	bpl.n	800adf8 <_printf_float+0x194>
 800adf2:	3301      	adds	r3, #1
 800adf4:	440b      	add	r3, r1
 800adf6:	6123      	str	r3, [r4, #16]
 800adf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800adfa:	f04f 0900 	mov.w	r9, #0
 800adfe:	e7db      	b.n	800adb8 <_printf_float+0x154>
 800ae00:	b913      	cbnz	r3, 800ae08 <_printf_float+0x1a4>
 800ae02:	6822      	ldr	r2, [r4, #0]
 800ae04:	07d2      	lsls	r2, r2, #31
 800ae06:	d501      	bpl.n	800ae0c <_printf_float+0x1a8>
 800ae08:	3302      	adds	r3, #2
 800ae0a:	e7f4      	b.n	800adf6 <_printf_float+0x192>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e7f2      	b.n	800adf6 <_printf_float+0x192>
 800ae10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae16:	4299      	cmp	r1, r3
 800ae18:	db05      	blt.n	800ae26 <_printf_float+0x1c2>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	6121      	str	r1, [r4, #16]
 800ae1e:	07d8      	lsls	r0, r3, #31
 800ae20:	d5ea      	bpl.n	800adf8 <_printf_float+0x194>
 800ae22:	1c4b      	adds	r3, r1, #1
 800ae24:	e7e7      	b.n	800adf6 <_printf_float+0x192>
 800ae26:	2900      	cmp	r1, #0
 800ae28:	bfd4      	ite	le
 800ae2a:	f1c1 0202 	rsble	r2, r1, #2
 800ae2e:	2201      	movgt	r2, #1
 800ae30:	4413      	add	r3, r2
 800ae32:	e7e0      	b.n	800adf6 <_printf_float+0x192>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	055a      	lsls	r2, r3, #21
 800ae38:	d407      	bmi.n	800ae4a <_printf_float+0x1e6>
 800ae3a:	6923      	ldr	r3, [r4, #16]
 800ae3c:	4642      	mov	r2, r8
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	d12b      	bne.n	800aea0 <_printf_float+0x23c>
 800ae48:	e767      	b.n	800ad1a <_printf_float+0xb6>
 800ae4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae4e:	f240 80dd 	bls.w	800b00c <_printf_float+0x3a8>
 800ae52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae56:	2200      	movs	r2, #0
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f7f5 fe55 	bl	8000b08 <__aeabi_dcmpeq>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d033      	beq.n	800aeca <_printf_float+0x266>
 800ae62:	4a37      	ldr	r2, [pc, #220]	@ (800af40 <_printf_float+0x2dc>)
 800ae64:	2301      	movs	r3, #1
 800ae66:	4631      	mov	r1, r6
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b8      	blx	r7
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f43f af54 	beq.w	800ad1a <_printf_float+0xb6>
 800ae72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae76:	4543      	cmp	r3, r8
 800ae78:	db02      	blt.n	800ae80 <_printf_float+0x21c>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	07d8      	lsls	r0, r3, #31
 800ae7e:	d50f      	bpl.n	800aea0 <_printf_float+0x23c>
 800ae80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f43f af45 	beq.w	800ad1a <_printf_float+0xb6>
 800ae90:	f04f 0900 	mov.w	r9, #0
 800ae94:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae98:	f104 0a1a 	add.w	sl, r4, #26
 800ae9c:	45c8      	cmp	r8, r9
 800ae9e:	dc09      	bgt.n	800aeb4 <_printf_float+0x250>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	079b      	lsls	r3, r3, #30
 800aea4:	f100 8103 	bmi.w	800b0ae <_printf_float+0x44a>
 800aea8:	68e0      	ldr	r0, [r4, #12]
 800aeaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeac:	4298      	cmp	r0, r3
 800aeae:	bfb8      	it	lt
 800aeb0:	4618      	movlt	r0, r3
 800aeb2:	e734      	b.n	800ad1e <_printf_float+0xba>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	4652      	mov	r2, sl
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f af2b 	beq.w	800ad1a <_printf_float+0xb6>
 800aec4:	f109 0901 	add.w	r9, r9, #1
 800aec8:	e7e8      	b.n	800ae9c <_printf_float+0x238>
 800aeca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dc39      	bgt.n	800af44 <_printf_float+0x2e0>
 800aed0:	4a1b      	ldr	r2, [pc, #108]	@ (800af40 <_printf_float+0x2dc>)
 800aed2:	2301      	movs	r3, #1
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	f43f af1d 	beq.w	800ad1a <_printf_float+0xb6>
 800aee0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aee4:	ea59 0303 	orrs.w	r3, r9, r3
 800aee8:	d102      	bne.n	800aef0 <_printf_float+0x28c>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	07d9      	lsls	r1, r3, #31
 800aeee:	d5d7      	bpl.n	800aea0 <_printf_float+0x23c>
 800aef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aef4:	4631      	mov	r1, r6
 800aef6:	4628      	mov	r0, r5
 800aef8:	47b8      	blx	r7
 800aefa:	3001      	adds	r0, #1
 800aefc:	f43f af0d 	beq.w	800ad1a <_printf_float+0xb6>
 800af00:	f04f 0a00 	mov.w	sl, #0
 800af04:	f104 0b1a 	add.w	fp, r4, #26
 800af08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af0a:	425b      	negs	r3, r3
 800af0c:	4553      	cmp	r3, sl
 800af0e:	dc01      	bgt.n	800af14 <_printf_float+0x2b0>
 800af10:	464b      	mov	r3, r9
 800af12:	e793      	b.n	800ae3c <_printf_float+0x1d8>
 800af14:	2301      	movs	r3, #1
 800af16:	465a      	mov	r2, fp
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f aefb 	beq.w	800ad1a <_printf_float+0xb6>
 800af24:	f10a 0a01 	add.w	sl, sl, #1
 800af28:	e7ee      	b.n	800af08 <_printf_float+0x2a4>
 800af2a:	bf00      	nop
 800af2c:	7fefffff 	.word	0x7fefffff
 800af30:	0800e1ac 	.word	0x0800e1ac
 800af34:	0800e1a8 	.word	0x0800e1a8
 800af38:	0800e1b4 	.word	0x0800e1b4
 800af3c:	0800e1b0 	.word	0x0800e1b0
 800af40:	0800e1b8 	.word	0x0800e1b8
 800af44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af4a:	4553      	cmp	r3, sl
 800af4c:	bfa8      	it	ge
 800af4e:	4653      	movge	r3, sl
 800af50:	2b00      	cmp	r3, #0
 800af52:	4699      	mov	r9, r3
 800af54:	dc36      	bgt.n	800afc4 <_printf_float+0x360>
 800af56:	f04f 0b00 	mov.w	fp, #0
 800af5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af5e:	f104 021a 	add.w	r2, r4, #26
 800af62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af64:	9306      	str	r3, [sp, #24]
 800af66:	eba3 0309 	sub.w	r3, r3, r9
 800af6a:	455b      	cmp	r3, fp
 800af6c:	dc31      	bgt.n	800afd2 <_printf_float+0x36e>
 800af6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af70:	459a      	cmp	sl, r3
 800af72:	dc3a      	bgt.n	800afea <_printf_float+0x386>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	07da      	lsls	r2, r3, #31
 800af78:	d437      	bmi.n	800afea <_printf_float+0x386>
 800af7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7c:	ebaa 0903 	sub.w	r9, sl, r3
 800af80:	9b06      	ldr	r3, [sp, #24]
 800af82:	ebaa 0303 	sub.w	r3, sl, r3
 800af86:	4599      	cmp	r9, r3
 800af88:	bfa8      	it	ge
 800af8a:	4699      	movge	r9, r3
 800af8c:	f1b9 0f00 	cmp.w	r9, #0
 800af90:	dc33      	bgt.n	800affa <_printf_float+0x396>
 800af92:	f04f 0800 	mov.w	r8, #0
 800af96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af9a:	f104 0b1a 	add.w	fp, r4, #26
 800af9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa0:	ebaa 0303 	sub.w	r3, sl, r3
 800afa4:	eba3 0309 	sub.w	r3, r3, r9
 800afa8:	4543      	cmp	r3, r8
 800afaa:	f77f af79 	ble.w	800aea0 <_printf_float+0x23c>
 800afae:	2301      	movs	r3, #1
 800afb0:	465a      	mov	r2, fp
 800afb2:	4631      	mov	r1, r6
 800afb4:	4628      	mov	r0, r5
 800afb6:	47b8      	blx	r7
 800afb8:	3001      	adds	r0, #1
 800afba:	f43f aeae 	beq.w	800ad1a <_printf_float+0xb6>
 800afbe:	f108 0801 	add.w	r8, r8, #1
 800afc2:	e7ec      	b.n	800af9e <_printf_float+0x33a>
 800afc4:	4642      	mov	r2, r8
 800afc6:	4631      	mov	r1, r6
 800afc8:	4628      	mov	r0, r5
 800afca:	47b8      	blx	r7
 800afcc:	3001      	adds	r0, #1
 800afce:	d1c2      	bne.n	800af56 <_printf_float+0x2f2>
 800afd0:	e6a3      	b.n	800ad1a <_printf_float+0xb6>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4631      	mov	r1, r6
 800afd6:	4628      	mov	r0, r5
 800afd8:	9206      	str	r2, [sp, #24]
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f ae9c 	beq.w	800ad1a <_printf_float+0xb6>
 800afe2:	9a06      	ldr	r2, [sp, #24]
 800afe4:	f10b 0b01 	add.w	fp, fp, #1
 800afe8:	e7bb      	b.n	800af62 <_printf_float+0x2fe>
 800afea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afee:	4631      	mov	r1, r6
 800aff0:	4628      	mov	r0, r5
 800aff2:	47b8      	blx	r7
 800aff4:	3001      	adds	r0, #1
 800aff6:	d1c0      	bne.n	800af7a <_printf_float+0x316>
 800aff8:	e68f      	b.n	800ad1a <_printf_float+0xb6>
 800affa:	9a06      	ldr	r2, [sp, #24]
 800affc:	464b      	mov	r3, r9
 800affe:	4442      	add	r2, r8
 800b000:	4631      	mov	r1, r6
 800b002:	4628      	mov	r0, r5
 800b004:	47b8      	blx	r7
 800b006:	3001      	adds	r0, #1
 800b008:	d1c3      	bne.n	800af92 <_printf_float+0x32e>
 800b00a:	e686      	b.n	800ad1a <_printf_float+0xb6>
 800b00c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b010:	f1ba 0f01 	cmp.w	sl, #1
 800b014:	dc01      	bgt.n	800b01a <_printf_float+0x3b6>
 800b016:	07db      	lsls	r3, r3, #31
 800b018:	d536      	bpl.n	800b088 <_printf_float+0x424>
 800b01a:	2301      	movs	r3, #1
 800b01c:	4642      	mov	r2, r8
 800b01e:	4631      	mov	r1, r6
 800b020:	4628      	mov	r0, r5
 800b022:	47b8      	blx	r7
 800b024:	3001      	adds	r0, #1
 800b026:	f43f ae78 	beq.w	800ad1a <_printf_float+0xb6>
 800b02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	f43f ae70 	beq.w	800ad1a <_printf_float+0xb6>
 800b03a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b03e:	2200      	movs	r2, #0
 800b040:	2300      	movs	r3, #0
 800b042:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b046:	f7f5 fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 800b04a:	b9c0      	cbnz	r0, 800b07e <_printf_float+0x41a>
 800b04c:	4653      	mov	r3, sl
 800b04e:	f108 0201 	add.w	r2, r8, #1
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	d10c      	bne.n	800b076 <_printf_float+0x412>
 800b05c:	e65d      	b.n	800ad1a <_printf_float+0xb6>
 800b05e:	2301      	movs	r3, #1
 800b060:	465a      	mov	r2, fp
 800b062:	4631      	mov	r1, r6
 800b064:	4628      	mov	r0, r5
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	f43f ae56 	beq.w	800ad1a <_printf_float+0xb6>
 800b06e:	f108 0801 	add.w	r8, r8, #1
 800b072:	45d0      	cmp	r8, sl
 800b074:	dbf3      	blt.n	800b05e <_printf_float+0x3fa>
 800b076:	464b      	mov	r3, r9
 800b078:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b07c:	e6df      	b.n	800ae3e <_printf_float+0x1da>
 800b07e:	f04f 0800 	mov.w	r8, #0
 800b082:	f104 0b1a 	add.w	fp, r4, #26
 800b086:	e7f4      	b.n	800b072 <_printf_float+0x40e>
 800b088:	2301      	movs	r3, #1
 800b08a:	4642      	mov	r2, r8
 800b08c:	e7e1      	b.n	800b052 <_printf_float+0x3ee>
 800b08e:	2301      	movs	r3, #1
 800b090:	464a      	mov	r2, r9
 800b092:	4631      	mov	r1, r6
 800b094:	4628      	mov	r0, r5
 800b096:	47b8      	blx	r7
 800b098:	3001      	adds	r0, #1
 800b09a:	f43f ae3e 	beq.w	800ad1a <_printf_float+0xb6>
 800b09e:	f108 0801 	add.w	r8, r8, #1
 800b0a2:	68e3      	ldr	r3, [r4, #12]
 800b0a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0a6:	1a5b      	subs	r3, r3, r1
 800b0a8:	4543      	cmp	r3, r8
 800b0aa:	dcf0      	bgt.n	800b08e <_printf_float+0x42a>
 800b0ac:	e6fc      	b.n	800aea8 <_printf_float+0x244>
 800b0ae:	f04f 0800 	mov.w	r8, #0
 800b0b2:	f104 0919 	add.w	r9, r4, #25
 800b0b6:	e7f4      	b.n	800b0a2 <_printf_float+0x43e>

0800b0b8 <_printf_common>:
 800b0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0bc:	4616      	mov	r6, r2
 800b0be:	4698      	mov	r8, r3
 800b0c0:	688a      	ldr	r2, [r1, #8]
 800b0c2:	690b      	ldr	r3, [r1, #16]
 800b0c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	bfb8      	it	lt
 800b0cc:	4613      	movlt	r3, r2
 800b0ce:	6033      	str	r3, [r6, #0]
 800b0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	b10a      	cbz	r2, 800b0de <_printf_common+0x26>
 800b0da:	3301      	adds	r3, #1
 800b0dc:	6033      	str	r3, [r6, #0]
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	0699      	lsls	r1, r3, #26
 800b0e2:	bf42      	ittt	mi
 800b0e4:	6833      	ldrmi	r3, [r6, #0]
 800b0e6:	3302      	addmi	r3, #2
 800b0e8:	6033      	strmi	r3, [r6, #0]
 800b0ea:	6825      	ldr	r5, [r4, #0]
 800b0ec:	f015 0506 	ands.w	r5, r5, #6
 800b0f0:	d106      	bne.n	800b100 <_printf_common+0x48>
 800b0f2:	f104 0a19 	add.w	sl, r4, #25
 800b0f6:	68e3      	ldr	r3, [r4, #12]
 800b0f8:	6832      	ldr	r2, [r6, #0]
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	42ab      	cmp	r3, r5
 800b0fe:	dc26      	bgt.n	800b14e <_printf_common+0x96>
 800b100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	3b00      	subs	r3, #0
 800b108:	bf18      	it	ne
 800b10a:	2301      	movne	r3, #1
 800b10c:	0692      	lsls	r2, r2, #26
 800b10e:	d42b      	bmi.n	800b168 <_printf_common+0xb0>
 800b110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b114:	4641      	mov	r1, r8
 800b116:	4638      	mov	r0, r7
 800b118:	47c8      	blx	r9
 800b11a:	3001      	adds	r0, #1
 800b11c:	d01e      	beq.n	800b15c <_printf_common+0xa4>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	6922      	ldr	r2, [r4, #16]
 800b122:	f003 0306 	and.w	r3, r3, #6
 800b126:	2b04      	cmp	r3, #4
 800b128:	bf02      	ittt	eq
 800b12a:	68e5      	ldreq	r5, [r4, #12]
 800b12c:	6833      	ldreq	r3, [r6, #0]
 800b12e:	1aed      	subeq	r5, r5, r3
 800b130:	68a3      	ldr	r3, [r4, #8]
 800b132:	bf0c      	ite	eq
 800b134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b138:	2500      	movne	r5, #0
 800b13a:	4293      	cmp	r3, r2
 800b13c:	bfc4      	itt	gt
 800b13e:	1a9b      	subgt	r3, r3, r2
 800b140:	18ed      	addgt	r5, r5, r3
 800b142:	2600      	movs	r6, #0
 800b144:	341a      	adds	r4, #26
 800b146:	42b5      	cmp	r5, r6
 800b148:	d11a      	bne.n	800b180 <_printf_common+0xc8>
 800b14a:	2000      	movs	r0, #0
 800b14c:	e008      	b.n	800b160 <_printf_common+0xa8>
 800b14e:	2301      	movs	r3, #1
 800b150:	4652      	mov	r2, sl
 800b152:	4641      	mov	r1, r8
 800b154:	4638      	mov	r0, r7
 800b156:	47c8      	blx	r9
 800b158:	3001      	adds	r0, #1
 800b15a:	d103      	bne.n	800b164 <_printf_common+0xac>
 800b15c:	f04f 30ff 	mov.w	r0, #4294967295
 800b160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b164:	3501      	adds	r5, #1
 800b166:	e7c6      	b.n	800b0f6 <_printf_common+0x3e>
 800b168:	18e1      	adds	r1, r4, r3
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	2030      	movs	r0, #48	@ 0x30
 800b16e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b172:	4422      	add	r2, r4
 800b174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b17c:	3302      	adds	r3, #2
 800b17e:	e7c7      	b.n	800b110 <_printf_common+0x58>
 800b180:	2301      	movs	r3, #1
 800b182:	4622      	mov	r2, r4
 800b184:	4641      	mov	r1, r8
 800b186:	4638      	mov	r0, r7
 800b188:	47c8      	blx	r9
 800b18a:	3001      	adds	r0, #1
 800b18c:	d0e6      	beq.n	800b15c <_printf_common+0xa4>
 800b18e:	3601      	adds	r6, #1
 800b190:	e7d9      	b.n	800b146 <_printf_common+0x8e>
	...

0800b194 <_printf_i>:
 800b194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b198:	7e0f      	ldrb	r7, [r1, #24]
 800b19a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b19c:	2f78      	cmp	r7, #120	@ 0x78
 800b19e:	4691      	mov	r9, r2
 800b1a0:	4680      	mov	r8, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	469a      	mov	sl, r3
 800b1a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1aa:	d807      	bhi.n	800b1bc <_printf_i+0x28>
 800b1ac:	2f62      	cmp	r7, #98	@ 0x62
 800b1ae:	d80a      	bhi.n	800b1c6 <_printf_i+0x32>
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	f000 80d1 	beq.w	800b358 <_printf_i+0x1c4>
 800b1b6:	2f58      	cmp	r7, #88	@ 0x58
 800b1b8:	f000 80b8 	beq.w	800b32c <_printf_i+0x198>
 800b1bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1c4:	e03a      	b.n	800b23c <_printf_i+0xa8>
 800b1c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1ca:	2b15      	cmp	r3, #21
 800b1cc:	d8f6      	bhi.n	800b1bc <_printf_i+0x28>
 800b1ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b1d4 <_printf_i+0x40>)
 800b1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1d4:	0800b22d 	.word	0x0800b22d
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b1bd 	.word	0x0800b1bd
 800b1e0:	0800b1bd 	.word	0x0800b1bd
 800b1e4:	0800b1bd 	.word	0x0800b1bd
 800b1e8:	0800b1bd 	.word	0x0800b1bd
 800b1ec:	0800b241 	.word	0x0800b241
 800b1f0:	0800b1bd 	.word	0x0800b1bd
 800b1f4:	0800b1bd 	.word	0x0800b1bd
 800b1f8:	0800b1bd 	.word	0x0800b1bd
 800b1fc:	0800b1bd 	.word	0x0800b1bd
 800b200:	0800b33f 	.word	0x0800b33f
 800b204:	0800b26b 	.word	0x0800b26b
 800b208:	0800b2f9 	.word	0x0800b2f9
 800b20c:	0800b1bd 	.word	0x0800b1bd
 800b210:	0800b1bd 	.word	0x0800b1bd
 800b214:	0800b361 	.word	0x0800b361
 800b218:	0800b1bd 	.word	0x0800b1bd
 800b21c:	0800b26b 	.word	0x0800b26b
 800b220:	0800b1bd 	.word	0x0800b1bd
 800b224:	0800b1bd 	.word	0x0800b1bd
 800b228:	0800b301 	.word	0x0800b301
 800b22c:	6833      	ldr	r3, [r6, #0]
 800b22e:	1d1a      	adds	r2, r3, #4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6032      	str	r2, [r6, #0]
 800b234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b23c:	2301      	movs	r3, #1
 800b23e:	e09c      	b.n	800b37a <_printf_i+0x1e6>
 800b240:	6833      	ldr	r3, [r6, #0]
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	6031      	str	r1, [r6, #0]
 800b248:	0606      	lsls	r6, r0, #24
 800b24a:	d501      	bpl.n	800b250 <_printf_i+0xbc>
 800b24c:	681d      	ldr	r5, [r3, #0]
 800b24e:	e003      	b.n	800b258 <_printf_i+0xc4>
 800b250:	0645      	lsls	r5, r0, #25
 800b252:	d5fb      	bpl.n	800b24c <_printf_i+0xb8>
 800b254:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b258:	2d00      	cmp	r5, #0
 800b25a:	da03      	bge.n	800b264 <_printf_i+0xd0>
 800b25c:	232d      	movs	r3, #45	@ 0x2d
 800b25e:	426d      	negs	r5, r5
 800b260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b264:	4858      	ldr	r0, [pc, #352]	@ (800b3c8 <_printf_i+0x234>)
 800b266:	230a      	movs	r3, #10
 800b268:	e011      	b.n	800b28e <_printf_i+0xfa>
 800b26a:	6821      	ldr	r1, [r4, #0]
 800b26c:	6833      	ldr	r3, [r6, #0]
 800b26e:	0608      	lsls	r0, r1, #24
 800b270:	f853 5b04 	ldr.w	r5, [r3], #4
 800b274:	d402      	bmi.n	800b27c <_printf_i+0xe8>
 800b276:	0649      	lsls	r1, r1, #25
 800b278:	bf48      	it	mi
 800b27a:	b2ad      	uxthmi	r5, r5
 800b27c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b27e:	4852      	ldr	r0, [pc, #328]	@ (800b3c8 <_printf_i+0x234>)
 800b280:	6033      	str	r3, [r6, #0]
 800b282:	bf14      	ite	ne
 800b284:	230a      	movne	r3, #10
 800b286:	2308      	moveq	r3, #8
 800b288:	2100      	movs	r1, #0
 800b28a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b28e:	6866      	ldr	r6, [r4, #4]
 800b290:	60a6      	str	r6, [r4, #8]
 800b292:	2e00      	cmp	r6, #0
 800b294:	db05      	blt.n	800b2a2 <_printf_i+0x10e>
 800b296:	6821      	ldr	r1, [r4, #0]
 800b298:	432e      	orrs	r6, r5
 800b29a:	f021 0104 	bic.w	r1, r1, #4
 800b29e:	6021      	str	r1, [r4, #0]
 800b2a0:	d04b      	beq.n	800b33a <_printf_i+0x1a6>
 800b2a2:	4616      	mov	r6, r2
 800b2a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2a8:	fb03 5711 	mls	r7, r3, r1, r5
 800b2ac:	5dc7      	ldrb	r7, [r0, r7]
 800b2ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2b2:	462f      	mov	r7, r5
 800b2b4:	42bb      	cmp	r3, r7
 800b2b6:	460d      	mov	r5, r1
 800b2b8:	d9f4      	bls.n	800b2a4 <_printf_i+0x110>
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d10b      	bne.n	800b2d6 <_printf_i+0x142>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	07df      	lsls	r7, r3, #31
 800b2c2:	d508      	bpl.n	800b2d6 <_printf_i+0x142>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	6861      	ldr	r1, [r4, #4]
 800b2c8:	4299      	cmp	r1, r3
 800b2ca:	bfde      	ittt	le
 800b2cc:	2330      	movle	r3, #48	@ 0x30
 800b2ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2d6:	1b92      	subs	r2, r2, r6
 800b2d8:	6122      	str	r2, [r4, #16]
 800b2da:	f8cd a000 	str.w	sl, [sp]
 800b2de:	464b      	mov	r3, r9
 800b2e0:	aa03      	add	r2, sp, #12
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	f7ff fee7 	bl	800b0b8 <_printf_common>
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d14a      	bne.n	800b384 <_printf_i+0x1f0>
 800b2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f2:	b004      	add	sp, #16
 800b2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	f043 0320 	orr.w	r3, r3, #32
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	4832      	ldr	r0, [pc, #200]	@ (800b3cc <_printf_i+0x238>)
 800b302:	2778      	movs	r7, #120	@ 0x78
 800b304:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	6831      	ldr	r1, [r6, #0]
 800b30c:	061f      	lsls	r7, r3, #24
 800b30e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b312:	d402      	bmi.n	800b31a <_printf_i+0x186>
 800b314:	065f      	lsls	r7, r3, #25
 800b316:	bf48      	it	mi
 800b318:	b2ad      	uxthmi	r5, r5
 800b31a:	6031      	str	r1, [r6, #0]
 800b31c:	07d9      	lsls	r1, r3, #31
 800b31e:	bf44      	itt	mi
 800b320:	f043 0320 	orrmi.w	r3, r3, #32
 800b324:	6023      	strmi	r3, [r4, #0]
 800b326:	b11d      	cbz	r5, 800b330 <_printf_i+0x19c>
 800b328:	2310      	movs	r3, #16
 800b32a:	e7ad      	b.n	800b288 <_printf_i+0xf4>
 800b32c:	4826      	ldr	r0, [pc, #152]	@ (800b3c8 <_printf_i+0x234>)
 800b32e:	e7e9      	b.n	800b304 <_printf_i+0x170>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	f023 0320 	bic.w	r3, r3, #32
 800b336:	6023      	str	r3, [r4, #0]
 800b338:	e7f6      	b.n	800b328 <_printf_i+0x194>
 800b33a:	4616      	mov	r6, r2
 800b33c:	e7bd      	b.n	800b2ba <_printf_i+0x126>
 800b33e:	6833      	ldr	r3, [r6, #0]
 800b340:	6825      	ldr	r5, [r4, #0]
 800b342:	6961      	ldr	r1, [r4, #20]
 800b344:	1d18      	adds	r0, r3, #4
 800b346:	6030      	str	r0, [r6, #0]
 800b348:	062e      	lsls	r6, r5, #24
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	d501      	bpl.n	800b352 <_printf_i+0x1be>
 800b34e:	6019      	str	r1, [r3, #0]
 800b350:	e002      	b.n	800b358 <_printf_i+0x1c4>
 800b352:	0668      	lsls	r0, r5, #25
 800b354:	d5fb      	bpl.n	800b34e <_printf_i+0x1ba>
 800b356:	8019      	strh	r1, [r3, #0]
 800b358:	2300      	movs	r3, #0
 800b35a:	6123      	str	r3, [r4, #16]
 800b35c:	4616      	mov	r6, r2
 800b35e:	e7bc      	b.n	800b2da <_printf_i+0x146>
 800b360:	6833      	ldr	r3, [r6, #0]
 800b362:	1d1a      	adds	r2, r3, #4
 800b364:	6032      	str	r2, [r6, #0]
 800b366:	681e      	ldr	r6, [r3, #0]
 800b368:	6862      	ldr	r2, [r4, #4]
 800b36a:	2100      	movs	r1, #0
 800b36c:	4630      	mov	r0, r6
 800b36e:	f7f4 ff4f 	bl	8000210 <memchr>
 800b372:	b108      	cbz	r0, 800b378 <_printf_i+0x1e4>
 800b374:	1b80      	subs	r0, r0, r6
 800b376:	6060      	str	r0, [r4, #4]
 800b378:	6863      	ldr	r3, [r4, #4]
 800b37a:	6123      	str	r3, [r4, #16]
 800b37c:	2300      	movs	r3, #0
 800b37e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b382:	e7aa      	b.n	800b2da <_printf_i+0x146>
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	4632      	mov	r2, r6
 800b388:	4649      	mov	r1, r9
 800b38a:	4640      	mov	r0, r8
 800b38c:	47d0      	blx	sl
 800b38e:	3001      	adds	r0, #1
 800b390:	d0ad      	beq.n	800b2ee <_printf_i+0x15a>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	079b      	lsls	r3, r3, #30
 800b396:	d413      	bmi.n	800b3c0 <_printf_i+0x22c>
 800b398:	68e0      	ldr	r0, [r4, #12]
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	4298      	cmp	r0, r3
 800b39e:	bfb8      	it	lt
 800b3a0:	4618      	movlt	r0, r3
 800b3a2:	e7a6      	b.n	800b2f2 <_printf_i+0x15e>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	4632      	mov	r2, r6
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	47d0      	blx	sl
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	d09d      	beq.n	800b2ee <_printf_i+0x15a>
 800b3b2:	3501      	adds	r5, #1
 800b3b4:	68e3      	ldr	r3, [r4, #12]
 800b3b6:	9903      	ldr	r1, [sp, #12]
 800b3b8:	1a5b      	subs	r3, r3, r1
 800b3ba:	42ab      	cmp	r3, r5
 800b3bc:	dcf2      	bgt.n	800b3a4 <_printf_i+0x210>
 800b3be:	e7eb      	b.n	800b398 <_printf_i+0x204>
 800b3c0:	2500      	movs	r5, #0
 800b3c2:	f104 0619 	add.w	r6, r4, #25
 800b3c6:	e7f5      	b.n	800b3b4 <_printf_i+0x220>
 800b3c8:	0800e1ba 	.word	0x0800e1ba
 800b3cc:	0800e1cb 	.word	0x0800e1cb

0800b3d0 <std>:
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b3da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3de:	6083      	str	r3, [r0, #8]
 800b3e0:	8181      	strh	r1, [r0, #12]
 800b3e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3e4:	81c2      	strh	r2, [r0, #14]
 800b3e6:	6183      	str	r3, [r0, #24]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	2208      	movs	r2, #8
 800b3ec:	305c      	adds	r0, #92	@ 0x5c
 800b3ee:	f000 f94c 	bl	800b68a <memset>
 800b3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b428 <std+0x58>)
 800b3f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b42c <std+0x5c>)
 800b3f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <std+0x60>)
 800b3fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b434 <std+0x64>)
 800b400:	6323      	str	r3, [r4, #48]	@ 0x30
 800b402:	4b0d      	ldr	r3, [pc, #52]	@ (800b438 <std+0x68>)
 800b404:	6224      	str	r4, [r4, #32]
 800b406:	429c      	cmp	r4, r3
 800b408:	d006      	beq.n	800b418 <std+0x48>
 800b40a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b40e:	4294      	cmp	r4, r2
 800b410:	d002      	beq.n	800b418 <std+0x48>
 800b412:	33d0      	adds	r3, #208	@ 0xd0
 800b414:	429c      	cmp	r4, r3
 800b416:	d105      	bne.n	800b424 <std+0x54>
 800b418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b420:	f000 b9c2 	b.w	800b7a8 <__retarget_lock_init_recursive>
 800b424:	bd10      	pop	{r4, pc}
 800b426:	bf00      	nop
 800b428:	0800b605 	.word	0x0800b605
 800b42c:	0800b627 	.word	0x0800b627
 800b430:	0800b65f 	.word	0x0800b65f
 800b434:	0800b683 	.word	0x0800b683
 800b438:	20000ddc 	.word	0x20000ddc

0800b43c <stdio_exit_handler>:
 800b43c:	4a02      	ldr	r2, [pc, #8]	@ (800b448 <stdio_exit_handler+0xc>)
 800b43e:	4903      	ldr	r1, [pc, #12]	@ (800b44c <stdio_exit_handler+0x10>)
 800b440:	4803      	ldr	r0, [pc, #12]	@ (800b450 <stdio_exit_handler+0x14>)
 800b442:	f000 b869 	b.w	800b518 <_fwalk_sglue>
 800b446:	bf00      	nop
 800b448:	20000074 	.word	0x20000074
 800b44c:	0800d12d 	.word	0x0800d12d
 800b450:	20000084 	.word	0x20000084

0800b454 <cleanup_stdio>:
 800b454:	6841      	ldr	r1, [r0, #4]
 800b456:	4b0c      	ldr	r3, [pc, #48]	@ (800b488 <cleanup_stdio+0x34>)
 800b458:	4299      	cmp	r1, r3
 800b45a:	b510      	push	{r4, lr}
 800b45c:	4604      	mov	r4, r0
 800b45e:	d001      	beq.n	800b464 <cleanup_stdio+0x10>
 800b460:	f001 fe64 	bl	800d12c <_fflush_r>
 800b464:	68a1      	ldr	r1, [r4, #8]
 800b466:	4b09      	ldr	r3, [pc, #36]	@ (800b48c <cleanup_stdio+0x38>)
 800b468:	4299      	cmp	r1, r3
 800b46a:	d002      	beq.n	800b472 <cleanup_stdio+0x1e>
 800b46c:	4620      	mov	r0, r4
 800b46e:	f001 fe5d 	bl	800d12c <_fflush_r>
 800b472:	68e1      	ldr	r1, [r4, #12]
 800b474:	4b06      	ldr	r3, [pc, #24]	@ (800b490 <cleanup_stdio+0x3c>)
 800b476:	4299      	cmp	r1, r3
 800b478:	d004      	beq.n	800b484 <cleanup_stdio+0x30>
 800b47a:	4620      	mov	r0, r4
 800b47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b480:	f001 be54 	b.w	800d12c <_fflush_r>
 800b484:	bd10      	pop	{r4, pc}
 800b486:	bf00      	nop
 800b488:	20000ddc 	.word	0x20000ddc
 800b48c:	20000e44 	.word	0x20000e44
 800b490:	20000eac 	.word	0x20000eac

0800b494 <global_stdio_init.part.0>:
 800b494:	b510      	push	{r4, lr}
 800b496:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c4 <global_stdio_init.part.0+0x30>)
 800b498:	4c0b      	ldr	r4, [pc, #44]	@ (800b4c8 <global_stdio_init.part.0+0x34>)
 800b49a:	4a0c      	ldr	r2, [pc, #48]	@ (800b4cc <global_stdio_init.part.0+0x38>)
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2104      	movs	r1, #4
 800b4a4:	f7ff ff94 	bl	800b3d0 <std>
 800b4a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	2109      	movs	r1, #9
 800b4b0:	f7ff ff8e 	bl	800b3d0 <std>
 800b4b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4be:	2112      	movs	r1, #18
 800b4c0:	f7ff bf86 	b.w	800b3d0 <std>
 800b4c4:	20000f14 	.word	0x20000f14
 800b4c8:	20000ddc 	.word	0x20000ddc
 800b4cc:	0800b43d 	.word	0x0800b43d

0800b4d0 <__sfp_lock_acquire>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	@ (800b4d8 <__sfp_lock_acquire+0x8>)
 800b4d2:	f000 b96a 	b.w	800b7aa <__retarget_lock_acquire_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	20000f1d 	.word	0x20000f1d

0800b4dc <__sfp_lock_release>:
 800b4dc:	4801      	ldr	r0, [pc, #4]	@ (800b4e4 <__sfp_lock_release+0x8>)
 800b4de:	f000 b965 	b.w	800b7ac <__retarget_lock_release_recursive>
 800b4e2:	bf00      	nop
 800b4e4:	20000f1d 	.word	0x20000f1d

0800b4e8 <__sinit>:
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	f7ff fff0 	bl	800b4d0 <__sfp_lock_acquire>
 800b4f0:	6a23      	ldr	r3, [r4, #32]
 800b4f2:	b11b      	cbz	r3, 800b4fc <__sinit+0x14>
 800b4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4f8:	f7ff bff0 	b.w	800b4dc <__sfp_lock_release>
 800b4fc:	4b04      	ldr	r3, [pc, #16]	@ (800b510 <__sinit+0x28>)
 800b4fe:	6223      	str	r3, [r4, #32]
 800b500:	4b04      	ldr	r3, [pc, #16]	@ (800b514 <__sinit+0x2c>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1f5      	bne.n	800b4f4 <__sinit+0xc>
 800b508:	f7ff ffc4 	bl	800b494 <global_stdio_init.part.0>
 800b50c:	e7f2      	b.n	800b4f4 <__sinit+0xc>
 800b50e:	bf00      	nop
 800b510:	0800b455 	.word	0x0800b455
 800b514:	20000f14 	.word	0x20000f14

0800b518 <_fwalk_sglue>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4607      	mov	r7, r0
 800b51e:	4688      	mov	r8, r1
 800b520:	4614      	mov	r4, r2
 800b522:	2600      	movs	r6, #0
 800b524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b528:	f1b9 0901 	subs.w	r9, r9, #1
 800b52c:	d505      	bpl.n	800b53a <_fwalk_sglue+0x22>
 800b52e:	6824      	ldr	r4, [r4, #0]
 800b530:	2c00      	cmp	r4, #0
 800b532:	d1f7      	bne.n	800b524 <_fwalk_sglue+0xc>
 800b534:	4630      	mov	r0, r6
 800b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53a:	89ab      	ldrh	r3, [r5, #12]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d907      	bls.n	800b550 <_fwalk_sglue+0x38>
 800b540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b544:	3301      	adds	r3, #1
 800b546:	d003      	beq.n	800b550 <_fwalk_sglue+0x38>
 800b548:	4629      	mov	r1, r5
 800b54a:	4638      	mov	r0, r7
 800b54c:	47c0      	blx	r8
 800b54e:	4306      	orrs	r6, r0
 800b550:	3568      	adds	r5, #104	@ 0x68
 800b552:	e7e9      	b.n	800b528 <_fwalk_sglue+0x10>

0800b554 <sniprintf>:
 800b554:	b40c      	push	{r2, r3}
 800b556:	b530      	push	{r4, r5, lr}
 800b558:	4b18      	ldr	r3, [pc, #96]	@ (800b5bc <sniprintf+0x68>)
 800b55a:	1e0c      	subs	r4, r1, #0
 800b55c:	681d      	ldr	r5, [r3, #0]
 800b55e:	b09d      	sub	sp, #116	@ 0x74
 800b560:	da08      	bge.n	800b574 <sniprintf+0x20>
 800b562:	238b      	movs	r3, #139	@ 0x8b
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f04f 30ff 	mov.w	r0, #4294967295
 800b56a:	b01d      	add	sp, #116	@ 0x74
 800b56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b570:	b002      	add	sp, #8
 800b572:	4770      	bx	lr
 800b574:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b578:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b57c:	f04f 0300 	mov.w	r3, #0
 800b580:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b582:	bf14      	ite	ne
 800b584:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b588:	4623      	moveq	r3, r4
 800b58a:	9304      	str	r3, [sp, #16]
 800b58c:	9307      	str	r3, [sp, #28]
 800b58e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b592:	9002      	str	r0, [sp, #8]
 800b594:	9006      	str	r0, [sp, #24]
 800b596:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b59a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b59c:	ab21      	add	r3, sp, #132	@ 0x84
 800b59e:	a902      	add	r1, sp, #8
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	f001 fc42 	bl	800ce2c <_svfiprintf_r>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	bfbc      	itt	lt
 800b5ac:	238b      	movlt	r3, #139	@ 0x8b
 800b5ae:	602b      	strlt	r3, [r5, #0]
 800b5b0:	2c00      	cmp	r4, #0
 800b5b2:	d0da      	beq.n	800b56a <sniprintf+0x16>
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
 800b5ba:	e7d6      	b.n	800b56a <sniprintf+0x16>
 800b5bc:	20000080 	.word	0x20000080

0800b5c0 <siprintf>:
 800b5c0:	b40e      	push	{r1, r2, r3}
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	b09d      	sub	sp, #116	@ 0x74
 800b5c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b5c8:	9002      	str	r0, [sp, #8]
 800b5ca:	9006      	str	r0, [sp, #24]
 800b5cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b5d0:	480a      	ldr	r0, [pc, #40]	@ (800b5fc <siprintf+0x3c>)
 800b5d2:	9107      	str	r1, [sp, #28]
 800b5d4:	9104      	str	r1, [sp, #16]
 800b5d6:	490a      	ldr	r1, [pc, #40]	@ (800b600 <siprintf+0x40>)
 800b5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5dc:	9105      	str	r1, [sp, #20]
 800b5de:	2400      	movs	r4, #0
 800b5e0:	a902      	add	r1, sp, #8
 800b5e2:	6800      	ldr	r0, [r0, #0]
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b5e8:	f001 fc20 	bl	800ce2c <_svfiprintf_r>
 800b5ec:	9b02      	ldr	r3, [sp, #8]
 800b5ee:	701c      	strb	r4, [r3, #0]
 800b5f0:	b01d      	add	sp, #116	@ 0x74
 800b5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f6:	b003      	add	sp, #12
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20000080 	.word	0x20000080
 800b600:	ffff0208 	.word	0xffff0208

0800b604 <__sread>:
 800b604:	b510      	push	{r4, lr}
 800b606:	460c      	mov	r4, r1
 800b608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60c:	f000 f87e 	bl	800b70c <_read_r>
 800b610:	2800      	cmp	r0, #0
 800b612:	bfab      	itete	ge
 800b614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b616:	89a3      	ldrhlt	r3, [r4, #12]
 800b618:	181b      	addge	r3, r3, r0
 800b61a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b61e:	bfac      	ite	ge
 800b620:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b622:	81a3      	strhlt	r3, [r4, #12]
 800b624:	bd10      	pop	{r4, pc}

0800b626 <__swrite>:
 800b626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62a:	461f      	mov	r7, r3
 800b62c:	898b      	ldrh	r3, [r1, #12]
 800b62e:	05db      	lsls	r3, r3, #23
 800b630:	4605      	mov	r5, r0
 800b632:	460c      	mov	r4, r1
 800b634:	4616      	mov	r6, r2
 800b636:	d505      	bpl.n	800b644 <__swrite+0x1e>
 800b638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63c:	2302      	movs	r3, #2
 800b63e:	2200      	movs	r2, #0
 800b640:	f000 f852 	bl	800b6e8 <_lseek_r>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b64a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	4632      	mov	r2, r6
 800b652:	463b      	mov	r3, r7
 800b654:	4628      	mov	r0, r5
 800b656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b65a:	f000 b869 	b.w	800b730 <_write_r>

0800b65e <__sseek>:
 800b65e:	b510      	push	{r4, lr}
 800b660:	460c      	mov	r4, r1
 800b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b666:	f000 f83f 	bl	800b6e8 <_lseek_r>
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	89a3      	ldrh	r3, [r4, #12]
 800b66e:	bf15      	itete	ne
 800b670:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b67a:	81a3      	strheq	r3, [r4, #12]
 800b67c:	bf18      	it	ne
 800b67e:	81a3      	strhne	r3, [r4, #12]
 800b680:	bd10      	pop	{r4, pc}

0800b682 <__sclose>:
 800b682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b686:	f000 b81f 	b.w	800b6c8 <_close_r>

0800b68a <memset>:
 800b68a:	4402      	add	r2, r0
 800b68c:	4603      	mov	r3, r0
 800b68e:	4293      	cmp	r3, r2
 800b690:	d100      	bne.n	800b694 <memset+0xa>
 800b692:	4770      	bx	lr
 800b694:	f803 1b01 	strb.w	r1, [r3], #1
 800b698:	e7f9      	b.n	800b68e <memset+0x4>

0800b69a <strncpy>:
 800b69a:	b510      	push	{r4, lr}
 800b69c:	3901      	subs	r1, #1
 800b69e:	4603      	mov	r3, r0
 800b6a0:	b132      	cbz	r2, 800b6b0 <strncpy+0x16>
 800b6a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6a6:	f803 4b01 	strb.w	r4, [r3], #1
 800b6aa:	3a01      	subs	r2, #1
 800b6ac:	2c00      	cmp	r4, #0
 800b6ae:	d1f7      	bne.n	800b6a0 <strncpy+0x6>
 800b6b0:	441a      	add	r2, r3
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d100      	bne.n	800b6ba <strncpy+0x20>
 800b6b8:	bd10      	pop	{r4, pc}
 800b6ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b6be:	e7f9      	b.n	800b6b4 <strncpy+0x1a>

0800b6c0 <_localeconv_r>:
 800b6c0:	4800      	ldr	r0, [pc, #0]	@ (800b6c4 <_localeconv_r+0x4>)
 800b6c2:	4770      	bx	lr
 800b6c4:	200001c0 	.word	0x200001c0

0800b6c8 <_close_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d06      	ldr	r5, [pc, #24]	@ (800b6e4 <_close_r+0x1c>)
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	602b      	str	r3, [r5, #0]
 800b6d4:	f7f9 f926 	bl	8004924 <_close>
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	d102      	bne.n	800b6e2 <_close_r+0x1a>
 800b6dc:	682b      	ldr	r3, [r5, #0]
 800b6de:	b103      	cbz	r3, 800b6e2 <_close_r+0x1a>
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	20000f18 	.word	0x20000f18

0800b6e8 <_lseek_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4d07      	ldr	r5, [pc, #28]	@ (800b708 <_lseek_r+0x20>)
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	602a      	str	r2, [r5, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f7f9 f93b 	bl	8004972 <_lseek>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_lseek_r+0x1e>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_lseek_r+0x1e>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	20000f18 	.word	0x20000f18

0800b70c <_read_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d07      	ldr	r5, [pc, #28]	@ (800b72c <_read_r+0x20>)
 800b710:	4604      	mov	r4, r0
 800b712:	4608      	mov	r0, r1
 800b714:	4611      	mov	r1, r2
 800b716:	2200      	movs	r2, #0
 800b718:	602a      	str	r2, [r5, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	f7f9 f8c9 	bl	80048b2 <_read>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_read_r+0x1e>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_read_r+0x1e>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	20000f18 	.word	0x20000f18

0800b730 <_write_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4d07      	ldr	r5, [pc, #28]	@ (800b750 <_write_r+0x20>)
 800b734:	4604      	mov	r4, r0
 800b736:	4608      	mov	r0, r1
 800b738:	4611      	mov	r1, r2
 800b73a:	2200      	movs	r2, #0
 800b73c:	602a      	str	r2, [r5, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	f7f9 f8d4 	bl	80048ec <_write>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_write_r+0x1e>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_write_r+0x1e>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	20000f18 	.word	0x20000f18

0800b754 <__errno>:
 800b754:	4b01      	ldr	r3, [pc, #4]	@ (800b75c <__errno+0x8>)
 800b756:	6818      	ldr	r0, [r3, #0]
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000080 	.word	0x20000080

0800b760 <__libc_init_array>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	4d0d      	ldr	r5, [pc, #52]	@ (800b798 <__libc_init_array+0x38>)
 800b764:	4c0d      	ldr	r4, [pc, #52]	@ (800b79c <__libc_init_array+0x3c>)
 800b766:	1b64      	subs	r4, r4, r5
 800b768:	10a4      	asrs	r4, r4, #2
 800b76a:	2600      	movs	r6, #0
 800b76c:	42a6      	cmp	r6, r4
 800b76e:	d109      	bne.n	800b784 <__libc_init_array+0x24>
 800b770:	4d0b      	ldr	r5, [pc, #44]	@ (800b7a0 <__libc_init_array+0x40>)
 800b772:	4c0c      	ldr	r4, [pc, #48]	@ (800b7a4 <__libc_init_array+0x44>)
 800b774:	f002 f906 	bl	800d984 <_init>
 800b778:	1b64      	subs	r4, r4, r5
 800b77a:	10a4      	asrs	r4, r4, #2
 800b77c:	2600      	movs	r6, #0
 800b77e:	42a6      	cmp	r6, r4
 800b780:	d105      	bne.n	800b78e <__libc_init_array+0x2e>
 800b782:	bd70      	pop	{r4, r5, r6, pc}
 800b784:	f855 3b04 	ldr.w	r3, [r5], #4
 800b788:	4798      	blx	r3
 800b78a:	3601      	adds	r6, #1
 800b78c:	e7ee      	b.n	800b76c <__libc_init_array+0xc>
 800b78e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b792:	4798      	blx	r3
 800b794:	3601      	adds	r6, #1
 800b796:	e7f2      	b.n	800b77e <__libc_init_array+0x1e>
 800b798:	0800e524 	.word	0x0800e524
 800b79c:	0800e524 	.word	0x0800e524
 800b7a0:	0800e524 	.word	0x0800e524
 800b7a4:	0800e528 	.word	0x0800e528

0800b7a8 <__retarget_lock_init_recursive>:
 800b7a8:	4770      	bx	lr

0800b7aa <__retarget_lock_acquire_recursive>:
 800b7aa:	4770      	bx	lr

0800b7ac <__retarget_lock_release_recursive>:
 800b7ac:	4770      	bx	lr

0800b7ae <memcpy>:
 800b7ae:	440a      	add	r2, r1
 800b7b0:	4291      	cmp	r1, r2
 800b7b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7b6:	d100      	bne.n	800b7ba <memcpy+0xc>
 800b7b8:	4770      	bx	lr
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7c4:	4291      	cmp	r1, r2
 800b7c6:	d1f9      	bne.n	800b7bc <memcpy+0xe>
 800b7c8:	bd10      	pop	{r4, pc}

0800b7ca <quorem>:
 800b7ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ce:	6903      	ldr	r3, [r0, #16]
 800b7d0:	690c      	ldr	r4, [r1, #16]
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	db7e      	blt.n	800b8d6 <quorem+0x10c>
 800b7d8:	3c01      	subs	r4, #1
 800b7da:	f101 0814 	add.w	r8, r1, #20
 800b7de:	00a3      	lsls	r3, r4, #2
 800b7e0:	f100 0514 	add.w	r5, r0, #20
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b800:	d32e      	bcc.n	800b860 <quorem+0x96>
 800b802:	f04f 0a00 	mov.w	sl, #0
 800b806:	46c4      	mov	ip, r8
 800b808:	46ae      	mov	lr, r5
 800b80a:	46d3      	mov	fp, sl
 800b80c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b810:	b298      	uxth	r0, r3
 800b812:	fb06 a000 	mla	r0, r6, r0, sl
 800b816:	0c02      	lsrs	r2, r0, #16
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	fb06 2303 	mla	r3, r6, r3, r2
 800b81e:	f8de 2000 	ldr.w	r2, [lr]
 800b822:	b280      	uxth	r0, r0
 800b824:	b292      	uxth	r2, r2
 800b826:	1a12      	subs	r2, r2, r0
 800b828:	445a      	add	r2, fp
 800b82a:	f8de 0000 	ldr.w	r0, [lr]
 800b82e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b832:	b29b      	uxth	r3, r3
 800b834:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b838:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b83c:	b292      	uxth	r2, r2
 800b83e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b842:	45e1      	cmp	r9, ip
 800b844:	f84e 2b04 	str.w	r2, [lr], #4
 800b848:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b84c:	d2de      	bcs.n	800b80c <quorem+0x42>
 800b84e:	9b00      	ldr	r3, [sp, #0]
 800b850:	58eb      	ldr	r3, [r5, r3]
 800b852:	b92b      	cbnz	r3, 800b860 <quorem+0x96>
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	3b04      	subs	r3, #4
 800b858:	429d      	cmp	r5, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	d32f      	bcc.n	800b8be <quorem+0xf4>
 800b85e:	613c      	str	r4, [r7, #16]
 800b860:	4638      	mov	r0, r7
 800b862:	f001 f97f 	bl	800cb64 <__mcmp>
 800b866:	2800      	cmp	r0, #0
 800b868:	db25      	blt.n	800b8b6 <quorem+0xec>
 800b86a:	4629      	mov	r1, r5
 800b86c:	2000      	movs	r0, #0
 800b86e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b872:	f8d1 c000 	ldr.w	ip, [r1]
 800b876:	fa1f fe82 	uxth.w	lr, r2
 800b87a:	fa1f f38c 	uxth.w	r3, ip
 800b87e:	eba3 030e 	sub.w	r3, r3, lr
 800b882:	4403      	add	r3, r0
 800b884:	0c12      	lsrs	r2, r2, #16
 800b886:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b88a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b88e:	b29b      	uxth	r3, r3
 800b890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b894:	45c1      	cmp	r9, r8
 800b896:	f841 3b04 	str.w	r3, [r1], #4
 800b89a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b89e:	d2e6      	bcs.n	800b86e <quorem+0xa4>
 800b8a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8a8:	b922      	cbnz	r2, 800b8b4 <quorem+0xea>
 800b8aa:	3b04      	subs	r3, #4
 800b8ac:	429d      	cmp	r5, r3
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	d30b      	bcc.n	800b8ca <quorem+0x100>
 800b8b2:	613c      	str	r4, [r7, #16]
 800b8b4:	3601      	adds	r6, #1
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	b003      	add	sp, #12
 800b8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8be:	6812      	ldr	r2, [r2, #0]
 800b8c0:	3b04      	subs	r3, #4
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	d1cb      	bne.n	800b85e <quorem+0x94>
 800b8c6:	3c01      	subs	r4, #1
 800b8c8:	e7c6      	b.n	800b858 <quorem+0x8e>
 800b8ca:	6812      	ldr	r2, [r2, #0]
 800b8cc:	3b04      	subs	r3, #4
 800b8ce:	2a00      	cmp	r2, #0
 800b8d0:	d1ef      	bne.n	800b8b2 <quorem+0xe8>
 800b8d2:	3c01      	subs	r4, #1
 800b8d4:	e7ea      	b.n	800b8ac <quorem+0xe2>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e7ee      	b.n	800b8b8 <quorem+0xee>
 800b8da:	0000      	movs	r0, r0
 800b8dc:	0000      	movs	r0, r0
	...

0800b8e0 <_dtoa_r>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	69c7      	ldr	r7, [r0, #28]
 800b8e6:	b097      	sub	sp, #92	@ 0x5c
 800b8e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b8ec:	ec55 4b10 	vmov	r4, r5, d0
 800b8f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b8f2:	9107      	str	r1, [sp, #28]
 800b8f4:	4681      	mov	r9, r0
 800b8f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b8f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b8fa:	b97f      	cbnz	r7, 800b91c <_dtoa_r+0x3c>
 800b8fc:	2010      	movs	r0, #16
 800b8fe:	f000 fe09 	bl	800c514 <malloc>
 800b902:	4602      	mov	r2, r0
 800b904:	f8c9 001c 	str.w	r0, [r9, #28]
 800b908:	b920      	cbnz	r0, 800b914 <_dtoa_r+0x34>
 800b90a:	4ba9      	ldr	r3, [pc, #676]	@ (800bbb0 <_dtoa_r+0x2d0>)
 800b90c:	21ef      	movs	r1, #239	@ 0xef
 800b90e:	48a9      	ldr	r0, [pc, #676]	@ (800bbb4 <_dtoa_r+0x2d4>)
 800b910:	f001 fc5e 	bl	800d1d0 <__assert_func>
 800b914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b918:	6007      	str	r7, [r0, #0]
 800b91a:	60c7      	str	r7, [r0, #12]
 800b91c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b920:	6819      	ldr	r1, [r3, #0]
 800b922:	b159      	cbz	r1, 800b93c <_dtoa_r+0x5c>
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	604a      	str	r2, [r1, #4]
 800b928:	2301      	movs	r3, #1
 800b92a:	4093      	lsls	r3, r2
 800b92c:	608b      	str	r3, [r1, #8]
 800b92e:	4648      	mov	r0, r9
 800b930:	f000 fee6 	bl	800c700 <_Bfree>
 800b934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	1e2b      	subs	r3, r5, #0
 800b93e:	bfb9      	ittee	lt
 800b940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b944:	9305      	strlt	r3, [sp, #20]
 800b946:	2300      	movge	r3, #0
 800b948:	6033      	strge	r3, [r6, #0]
 800b94a:	9f05      	ldr	r7, [sp, #20]
 800b94c:	4b9a      	ldr	r3, [pc, #616]	@ (800bbb8 <_dtoa_r+0x2d8>)
 800b94e:	bfbc      	itt	lt
 800b950:	2201      	movlt	r2, #1
 800b952:	6032      	strlt	r2, [r6, #0]
 800b954:	43bb      	bics	r3, r7
 800b956:	d112      	bne.n	800b97e <_dtoa_r+0x9e>
 800b958:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b95a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b964:	4323      	orrs	r3, r4
 800b966:	f000 855a 	beq.w	800c41e <_dtoa_r+0xb3e>
 800b96a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b96c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bbcc <_dtoa_r+0x2ec>
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 855c 	beq.w	800c42e <_dtoa_r+0xb4e>
 800b976:	f10a 0303 	add.w	r3, sl, #3
 800b97a:	f000 bd56 	b.w	800c42a <_dtoa_r+0xb4a>
 800b97e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b982:	2200      	movs	r2, #0
 800b984:	ec51 0b17 	vmov	r0, r1, d7
 800b988:	2300      	movs	r3, #0
 800b98a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b98e:	f7f5 f8bb 	bl	8000b08 <__aeabi_dcmpeq>
 800b992:	4680      	mov	r8, r0
 800b994:	b158      	cbz	r0, 800b9ae <_dtoa_r+0xce>
 800b996:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b998:	2301      	movs	r3, #1
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b99e:	b113      	cbz	r3, 800b9a6 <_dtoa_r+0xc6>
 800b9a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b9a2:	4b86      	ldr	r3, [pc, #536]	@ (800bbbc <_dtoa_r+0x2dc>)
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bbd0 <_dtoa_r+0x2f0>
 800b9aa:	f000 bd40 	b.w	800c42e <_dtoa_r+0xb4e>
 800b9ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b9b2:	aa14      	add	r2, sp, #80	@ 0x50
 800b9b4:	a915      	add	r1, sp, #84	@ 0x54
 800b9b6:	4648      	mov	r0, r9
 800b9b8:	f001 f984 	bl	800ccc4 <__d2b>
 800b9bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b9c0:	9002      	str	r0, [sp, #8]
 800b9c2:	2e00      	cmp	r6, #0
 800b9c4:	d078      	beq.n	800bab8 <_dtoa_r+0x1d8>
 800b9c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b9dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	4b76      	ldr	r3, [pc, #472]	@ (800bbc0 <_dtoa_r+0x2e0>)
 800b9e6:	f7f4 fc6f 	bl	80002c8 <__aeabi_dsub>
 800b9ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800bb98 <_dtoa_r+0x2b8>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f4 fe22 	bl	8000638 <__aeabi_dmul>
 800b9f4:	a36a      	add	r3, pc, #424	@ (adr r3, 800bba0 <_dtoa_r+0x2c0>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	f7f4 fc67 	bl	80002cc <__adddf3>
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4630      	mov	r0, r6
 800ba02:	460d      	mov	r5, r1
 800ba04:	f7f4 fdae 	bl	8000564 <__aeabi_i2d>
 800ba08:	a367      	add	r3, pc, #412	@ (adr r3, 800bba8 <_dtoa_r+0x2c8>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	f7f4 fe13 	bl	8000638 <__aeabi_dmul>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	4620      	mov	r0, r4
 800ba18:	4629      	mov	r1, r5
 800ba1a:	f7f4 fc57 	bl	80002cc <__adddf3>
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	f7f5 f8b9 	bl	8000b98 <__aeabi_d2iz>
 800ba26:	2200      	movs	r2, #0
 800ba28:	4607      	mov	r7, r0
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	4629      	mov	r1, r5
 800ba30:	f7f5 f874 	bl	8000b1c <__aeabi_dcmplt>
 800ba34:	b140      	cbz	r0, 800ba48 <_dtoa_r+0x168>
 800ba36:	4638      	mov	r0, r7
 800ba38:	f7f4 fd94 	bl	8000564 <__aeabi_i2d>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	462b      	mov	r3, r5
 800ba40:	f7f5 f862 	bl	8000b08 <__aeabi_dcmpeq>
 800ba44:	b900      	cbnz	r0, 800ba48 <_dtoa_r+0x168>
 800ba46:	3f01      	subs	r7, #1
 800ba48:	2f16      	cmp	r7, #22
 800ba4a:	d852      	bhi.n	800baf2 <_dtoa_r+0x212>
 800ba4c:	4b5d      	ldr	r3, [pc, #372]	@ (800bbc4 <_dtoa_r+0x2e4>)
 800ba4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba5a:	f7f5 f85f 	bl	8000b1c <__aeabi_dcmplt>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d049      	beq.n	800baf6 <_dtoa_r+0x216>
 800ba62:	3f01      	subs	r7, #1
 800ba64:	2300      	movs	r3, #0
 800ba66:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba6a:	1b9b      	subs	r3, r3, r6
 800ba6c:	1e5a      	subs	r2, r3, #1
 800ba6e:	bf45      	ittet	mi
 800ba70:	f1c3 0301 	rsbmi	r3, r3, #1
 800ba74:	9300      	strmi	r3, [sp, #0]
 800ba76:	2300      	movpl	r3, #0
 800ba78:	2300      	movmi	r3, #0
 800ba7a:	9206      	str	r2, [sp, #24]
 800ba7c:	bf54      	ite	pl
 800ba7e:	9300      	strpl	r3, [sp, #0]
 800ba80:	9306      	strmi	r3, [sp, #24]
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	db39      	blt.n	800bafa <_dtoa_r+0x21a>
 800ba86:	9b06      	ldr	r3, [sp, #24]
 800ba88:	970d      	str	r7, [sp, #52]	@ 0x34
 800ba8a:	443b      	add	r3, r7
 800ba8c:	9306      	str	r3, [sp, #24]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	9308      	str	r3, [sp, #32]
 800ba92:	9b07      	ldr	r3, [sp, #28]
 800ba94:	2b09      	cmp	r3, #9
 800ba96:	d863      	bhi.n	800bb60 <_dtoa_r+0x280>
 800ba98:	2b05      	cmp	r3, #5
 800ba9a:	bfc4      	itt	gt
 800ba9c:	3b04      	subgt	r3, #4
 800ba9e:	9307      	strgt	r3, [sp, #28]
 800baa0:	9b07      	ldr	r3, [sp, #28]
 800baa2:	f1a3 0302 	sub.w	r3, r3, #2
 800baa6:	bfcc      	ite	gt
 800baa8:	2400      	movgt	r4, #0
 800baaa:	2401      	movle	r4, #1
 800baac:	2b03      	cmp	r3, #3
 800baae:	d863      	bhi.n	800bb78 <_dtoa_r+0x298>
 800bab0:	e8df f003 	tbb	[pc, r3]
 800bab4:	2b375452 	.word	0x2b375452
 800bab8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800babc:	441e      	add	r6, r3
 800babe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bac2:	2b20      	cmp	r3, #32
 800bac4:	bfc1      	itttt	gt
 800bac6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800baca:	409f      	lslgt	r7, r3
 800bacc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bad0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bad4:	bfd6      	itet	le
 800bad6:	f1c3 0320 	rsble	r3, r3, #32
 800bada:	ea47 0003 	orrgt.w	r0, r7, r3
 800bade:	fa04 f003 	lslle.w	r0, r4, r3
 800bae2:	f7f4 fd2f 	bl	8000544 <__aeabi_ui2d>
 800bae6:	2201      	movs	r2, #1
 800bae8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800baec:	3e01      	subs	r6, #1
 800baee:	9212      	str	r2, [sp, #72]	@ 0x48
 800baf0:	e776      	b.n	800b9e0 <_dtoa_r+0x100>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7b7      	b.n	800ba66 <_dtoa_r+0x186>
 800baf6:	9010      	str	r0, [sp, #64]	@ 0x40
 800baf8:	e7b6      	b.n	800ba68 <_dtoa_r+0x188>
 800bafa:	9b00      	ldr	r3, [sp, #0]
 800bafc:	1bdb      	subs	r3, r3, r7
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	427b      	negs	r3, r7
 800bb02:	9308      	str	r3, [sp, #32]
 800bb04:	2300      	movs	r3, #0
 800bb06:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb08:	e7c3      	b.n	800ba92 <_dtoa_r+0x1b2>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb10:	eb07 0b03 	add.w	fp, r7, r3
 800bb14:	f10b 0301 	add.w	r3, fp, #1
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	9303      	str	r3, [sp, #12]
 800bb1c:	bfb8      	it	lt
 800bb1e:	2301      	movlt	r3, #1
 800bb20:	e006      	b.n	800bb30 <_dtoa_r+0x250>
 800bb22:	2301      	movs	r3, #1
 800bb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dd28      	ble.n	800bb7e <_dtoa_r+0x29e>
 800bb2c:	469b      	mov	fp, r3
 800bb2e:	9303      	str	r3, [sp, #12]
 800bb30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bb34:	2100      	movs	r1, #0
 800bb36:	2204      	movs	r2, #4
 800bb38:	f102 0514 	add.w	r5, r2, #20
 800bb3c:	429d      	cmp	r5, r3
 800bb3e:	d926      	bls.n	800bb8e <_dtoa_r+0x2ae>
 800bb40:	6041      	str	r1, [r0, #4]
 800bb42:	4648      	mov	r0, r9
 800bb44:	f000 fd9c 	bl	800c680 <_Balloc>
 800bb48:	4682      	mov	sl, r0
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d142      	bne.n	800bbd4 <_dtoa_r+0x2f4>
 800bb4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bbc8 <_dtoa_r+0x2e8>)
 800bb50:	4602      	mov	r2, r0
 800bb52:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb56:	e6da      	b.n	800b90e <_dtoa_r+0x2e>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e7e3      	b.n	800bb24 <_dtoa_r+0x244>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	e7d5      	b.n	800bb0c <_dtoa_r+0x22c>
 800bb60:	2401      	movs	r4, #1
 800bb62:	2300      	movs	r3, #0
 800bb64:	9307      	str	r3, [sp, #28]
 800bb66:	9409      	str	r4, [sp, #36]	@ 0x24
 800bb68:	f04f 3bff 	mov.w	fp, #4294967295
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bb72:	2312      	movs	r3, #18
 800bb74:	920c      	str	r2, [sp, #48]	@ 0x30
 800bb76:	e7db      	b.n	800bb30 <_dtoa_r+0x250>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb7c:	e7f4      	b.n	800bb68 <_dtoa_r+0x288>
 800bb7e:	f04f 0b01 	mov.w	fp, #1
 800bb82:	f8cd b00c 	str.w	fp, [sp, #12]
 800bb86:	465b      	mov	r3, fp
 800bb88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bb8c:	e7d0      	b.n	800bb30 <_dtoa_r+0x250>
 800bb8e:	3101      	adds	r1, #1
 800bb90:	0052      	lsls	r2, r2, #1
 800bb92:	e7d1      	b.n	800bb38 <_dtoa_r+0x258>
 800bb94:	f3af 8000 	nop.w
 800bb98:	636f4361 	.word	0x636f4361
 800bb9c:	3fd287a7 	.word	0x3fd287a7
 800bba0:	8b60c8b3 	.word	0x8b60c8b3
 800bba4:	3fc68a28 	.word	0x3fc68a28
 800bba8:	509f79fb 	.word	0x509f79fb
 800bbac:	3fd34413 	.word	0x3fd34413
 800bbb0:	0800e1e9 	.word	0x0800e1e9
 800bbb4:	0800e200 	.word	0x0800e200
 800bbb8:	7ff00000 	.word	0x7ff00000
 800bbbc:	0800e1b9 	.word	0x0800e1b9
 800bbc0:	3ff80000 	.word	0x3ff80000
 800bbc4:	0800e350 	.word	0x0800e350
 800bbc8:	0800e258 	.word	0x0800e258
 800bbcc:	0800e1e5 	.word	0x0800e1e5
 800bbd0:	0800e1b8 	.word	0x0800e1b8
 800bbd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bbd8:	6018      	str	r0, [r3, #0]
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	2b0e      	cmp	r3, #14
 800bbde:	f200 80a1 	bhi.w	800bd24 <_dtoa_r+0x444>
 800bbe2:	2c00      	cmp	r4, #0
 800bbe4:	f000 809e 	beq.w	800bd24 <_dtoa_r+0x444>
 800bbe8:	2f00      	cmp	r7, #0
 800bbea:	dd33      	ble.n	800bc54 <_dtoa_r+0x374>
 800bbec:	4b9c      	ldr	r3, [pc, #624]	@ (800be60 <_dtoa_r+0x580>)
 800bbee:	f007 020f 	and.w	r2, r7, #15
 800bbf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbf6:	ed93 7b00 	vldr	d7, [r3]
 800bbfa:	05f8      	lsls	r0, r7, #23
 800bbfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bc00:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc04:	d516      	bpl.n	800bc34 <_dtoa_r+0x354>
 800bc06:	4b97      	ldr	r3, [pc, #604]	@ (800be64 <_dtoa_r+0x584>)
 800bc08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc10:	f7f4 fe3c 	bl	800088c <__aeabi_ddiv>
 800bc14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc18:	f004 040f 	and.w	r4, r4, #15
 800bc1c:	2603      	movs	r6, #3
 800bc1e:	4d91      	ldr	r5, [pc, #580]	@ (800be64 <_dtoa_r+0x584>)
 800bc20:	b954      	cbnz	r4, 800bc38 <_dtoa_r+0x358>
 800bc22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc2a:	f7f4 fe2f 	bl	800088c <__aeabi_ddiv>
 800bc2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc32:	e028      	b.n	800bc86 <_dtoa_r+0x3a6>
 800bc34:	2602      	movs	r6, #2
 800bc36:	e7f2      	b.n	800bc1e <_dtoa_r+0x33e>
 800bc38:	07e1      	lsls	r1, r4, #31
 800bc3a:	d508      	bpl.n	800bc4e <_dtoa_r+0x36e>
 800bc3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bc40:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc44:	f7f4 fcf8 	bl	8000638 <__aeabi_dmul>
 800bc48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc4c:	3601      	adds	r6, #1
 800bc4e:	1064      	asrs	r4, r4, #1
 800bc50:	3508      	adds	r5, #8
 800bc52:	e7e5      	b.n	800bc20 <_dtoa_r+0x340>
 800bc54:	f000 80af 	beq.w	800bdb6 <_dtoa_r+0x4d6>
 800bc58:	427c      	negs	r4, r7
 800bc5a:	4b81      	ldr	r3, [pc, #516]	@ (800be60 <_dtoa_r+0x580>)
 800bc5c:	4d81      	ldr	r5, [pc, #516]	@ (800be64 <_dtoa_r+0x584>)
 800bc5e:	f004 020f 	and.w	r2, r4, #15
 800bc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc6e:	f7f4 fce3 	bl	8000638 <__aeabi_dmul>
 800bc72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc76:	1124      	asrs	r4, r4, #4
 800bc78:	2300      	movs	r3, #0
 800bc7a:	2602      	movs	r6, #2
 800bc7c:	2c00      	cmp	r4, #0
 800bc7e:	f040 808f 	bne.w	800bda0 <_dtoa_r+0x4c0>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1d3      	bne.n	800bc2e <_dtoa_r+0x34e>
 800bc86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 8094 	beq.w	800bdba <_dtoa_r+0x4da>
 800bc92:	4b75      	ldr	r3, [pc, #468]	@ (800be68 <_dtoa_r+0x588>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 ff3f 	bl	8000b1c <__aeabi_dcmplt>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f000 808b 	beq.w	800bdba <_dtoa_r+0x4da>
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 8087 	beq.w	800bdba <_dtoa_r+0x4da>
 800bcac:	f1bb 0f00 	cmp.w	fp, #0
 800bcb0:	dd34      	ble.n	800bd1c <_dtoa_r+0x43c>
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	4b6d      	ldr	r3, [pc, #436]	@ (800be6c <_dtoa_r+0x58c>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7f4 fcbd 	bl	8000638 <__aeabi_dmul>
 800bcbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcc2:	f107 38ff 	add.w	r8, r7, #4294967295
 800bcc6:	3601      	adds	r6, #1
 800bcc8:	465c      	mov	r4, fp
 800bcca:	4630      	mov	r0, r6
 800bccc:	f7f4 fc4a 	bl	8000564 <__aeabi_i2d>
 800bcd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd4:	f7f4 fcb0 	bl	8000638 <__aeabi_dmul>
 800bcd8:	4b65      	ldr	r3, [pc, #404]	@ (800be70 <_dtoa_r+0x590>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f7f4 faf6 	bl	80002cc <__adddf3>
 800bce0:	4605      	mov	r5, r0
 800bce2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	d16a      	bne.n	800bdc0 <_dtoa_r+0x4e0>
 800bcea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcee:	4b61      	ldr	r3, [pc, #388]	@ (800be74 <_dtoa_r+0x594>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f7f4 fae9 	bl	80002c8 <__aeabi_dsub>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4633      	mov	r3, r6
 800bd02:	f7f4 ff29 	bl	8000b58 <__aeabi_dcmpgt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f040 8298 	bne.w	800c23c <_dtoa_r+0x95c>
 800bd0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd10:	462a      	mov	r2, r5
 800bd12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd16:	f7f4 ff01 	bl	8000b1c <__aeabi_dcmplt>
 800bd1a:	bb38      	cbnz	r0, 800bd6c <_dtoa_r+0x48c>
 800bd1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bd20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f2c0 8157 	blt.w	800bfda <_dtoa_r+0x6fa>
 800bd2c:	2f0e      	cmp	r7, #14
 800bd2e:	f300 8154 	bgt.w	800bfda <_dtoa_r+0x6fa>
 800bd32:	4b4b      	ldr	r3, [pc, #300]	@ (800be60 <_dtoa_r+0x580>)
 800bd34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd38:	ed93 7b00 	vldr	d7, [r3]
 800bd3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	ed8d 7b00 	vstr	d7, [sp]
 800bd44:	f280 80e5 	bge.w	800bf12 <_dtoa_r+0x632>
 800bd48:	9b03      	ldr	r3, [sp, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f300 80e1 	bgt.w	800bf12 <_dtoa_r+0x632>
 800bd50:	d10c      	bne.n	800bd6c <_dtoa_r+0x48c>
 800bd52:	4b48      	ldr	r3, [pc, #288]	@ (800be74 <_dtoa_r+0x594>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	ec51 0b17 	vmov	r0, r1, d7
 800bd5a:	f7f4 fc6d 	bl	8000638 <__aeabi_dmul>
 800bd5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd62:	f7f4 feef 	bl	8000b44 <__aeabi_dcmpge>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	f000 8266 	beq.w	800c238 <_dtoa_r+0x958>
 800bd6c:	2400      	movs	r4, #0
 800bd6e:	4625      	mov	r5, r4
 800bd70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd72:	4656      	mov	r6, sl
 800bd74:	ea6f 0803 	mvn.w	r8, r3
 800bd78:	2700      	movs	r7, #0
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4648      	mov	r0, r9
 800bd7e:	f000 fcbf 	bl	800c700 <_Bfree>
 800bd82:	2d00      	cmp	r5, #0
 800bd84:	f000 80bd 	beq.w	800bf02 <_dtoa_r+0x622>
 800bd88:	b12f      	cbz	r7, 800bd96 <_dtoa_r+0x4b6>
 800bd8a:	42af      	cmp	r7, r5
 800bd8c:	d003      	beq.n	800bd96 <_dtoa_r+0x4b6>
 800bd8e:	4639      	mov	r1, r7
 800bd90:	4648      	mov	r0, r9
 800bd92:	f000 fcb5 	bl	800c700 <_Bfree>
 800bd96:	4629      	mov	r1, r5
 800bd98:	4648      	mov	r0, r9
 800bd9a:	f000 fcb1 	bl	800c700 <_Bfree>
 800bd9e:	e0b0      	b.n	800bf02 <_dtoa_r+0x622>
 800bda0:	07e2      	lsls	r2, r4, #31
 800bda2:	d505      	bpl.n	800bdb0 <_dtoa_r+0x4d0>
 800bda4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bda8:	f7f4 fc46 	bl	8000638 <__aeabi_dmul>
 800bdac:	3601      	adds	r6, #1
 800bdae:	2301      	movs	r3, #1
 800bdb0:	1064      	asrs	r4, r4, #1
 800bdb2:	3508      	adds	r5, #8
 800bdb4:	e762      	b.n	800bc7c <_dtoa_r+0x39c>
 800bdb6:	2602      	movs	r6, #2
 800bdb8:	e765      	b.n	800bc86 <_dtoa_r+0x3a6>
 800bdba:	9c03      	ldr	r4, [sp, #12]
 800bdbc:	46b8      	mov	r8, r7
 800bdbe:	e784      	b.n	800bcca <_dtoa_r+0x3ea>
 800bdc0:	4b27      	ldr	r3, [pc, #156]	@ (800be60 <_dtoa_r+0x580>)
 800bdc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdcc:	4454      	add	r4, sl
 800bdce:	2900      	cmp	r1, #0
 800bdd0:	d054      	beq.n	800be7c <_dtoa_r+0x59c>
 800bdd2:	4929      	ldr	r1, [pc, #164]	@ (800be78 <_dtoa_r+0x598>)
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	f7f4 fd59 	bl	800088c <__aeabi_ddiv>
 800bdda:	4633      	mov	r3, r6
 800bddc:	462a      	mov	r2, r5
 800bdde:	f7f4 fa73 	bl	80002c8 <__aeabi_dsub>
 800bde2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bde6:	4656      	mov	r6, sl
 800bde8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdec:	f7f4 fed4 	bl	8000b98 <__aeabi_d2iz>
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	f7f4 fbb7 	bl	8000564 <__aeabi_i2d>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdfe:	f7f4 fa63 	bl	80002c8 <__aeabi_dsub>
 800be02:	3530      	adds	r5, #48	@ 0x30
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be0c:	f806 5b01 	strb.w	r5, [r6], #1
 800be10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be14:	f7f4 fe82 	bl	8000b1c <__aeabi_dcmplt>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d172      	bne.n	800bf02 <_dtoa_r+0x622>
 800be1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be20:	4911      	ldr	r1, [pc, #68]	@ (800be68 <_dtoa_r+0x588>)
 800be22:	2000      	movs	r0, #0
 800be24:	f7f4 fa50 	bl	80002c8 <__aeabi_dsub>
 800be28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be2c:	f7f4 fe76 	bl	8000b1c <__aeabi_dcmplt>
 800be30:	2800      	cmp	r0, #0
 800be32:	f040 80b4 	bne.w	800bf9e <_dtoa_r+0x6be>
 800be36:	42a6      	cmp	r6, r4
 800be38:	f43f af70 	beq.w	800bd1c <_dtoa_r+0x43c>
 800be3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800be40:	4b0a      	ldr	r3, [pc, #40]	@ (800be6c <_dtoa_r+0x58c>)
 800be42:	2200      	movs	r2, #0
 800be44:	f7f4 fbf8 	bl	8000638 <__aeabi_dmul>
 800be48:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <_dtoa_r+0x58c>)
 800be4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be4e:	2200      	movs	r2, #0
 800be50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be54:	f7f4 fbf0 	bl	8000638 <__aeabi_dmul>
 800be58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be5c:	e7c4      	b.n	800bde8 <_dtoa_r+0x508>
 800be5e:	bf00      	nop
 800be60:	0800e350 	.word	0x0800e350
 800be64:	0800e328 	.word	0x0800e328
 800be68:	3ff00000 	.word	0x3ff00000
 800be6c:	40240000 	.word	0x40240000
 800be70:	401c0000 	.word	0x401c0000
 800be74:	40140000 	.word	0x40140000
 800be78:	3fe00000 	.word	0x3fe00000
 800be7c:	4631      	mov	r1, r6
 800be7e:	4628      	mov	r0, r5
 800be80:	f7f4 fbda 	bl	8000638 <__aeabi_dmul>
 800be84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be88:	9413      	str	r4, [sp, #76]	@ 0x4c
 800be8a:	4656      	mov	r6, sl
 800be8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be90:	f7f4 fe82 	bl	8000b98 <__aeabi_d2iz>
 800be94:	4605      	mov	r5, r0
 800be96:	f7f4 fb65 	bl	8000564 <__aeabi_i2d>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bea2:	f7f4 fa11 	bl	80002c8 <__aeabi_dsub>
 800bea6:	3530      	adds	r5, #48	@ 0x30
 800bea8:	f806 5b01 	strb.w	r5, [r6], #1
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	42a6      	cmp	r6, r4
 800beb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800beb6:	f04f 0200 	mov.w	r2, #0
 800beba:	d124      	bne.n	800bf06 <_dtoa_r+0x626>
 800bebc:	4baf      	ldr	r3, [pc, #700]	@ (800c17c <_dtoa_r+0x89c>)
 800bebe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bec2:	f7f4 fa03 	bl	80002cc <__adddf3>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bece:	f7f4 fe43 	bl	8000b58 <__aeabi_dcmpgt>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d163      	bne.n	800bf9e <_dtoa_r+0x6be>
 800bed6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800beda:	49a8      	ldr	r1, [pc, #672]	@ (800c17c <_dtoa_r+0x89c>)
 800bedc:	2000      	movs	r0, #0
 800bede:	f7f4 f9f3 	bl	80002c8 <__aeabi_dsub>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beea:	f7f4 fe17 	bl	8000b1c <__aeabi_dcmplt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	f43f af14 	beq.w	800bd1c <_dtoa_r+0x43c>
 800bef4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bef6:	1e73      	subs	r3, r6, #1
 800bef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800befa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800befe:	2b30      	cmp	r3, #48	@ 0x30
 800bf00:	d0f8      	beq.n	800bef4 <_dtoa_r+0x614>
 800bf02:	4647      	mov	r7, r8
 800bf04:	e03b      	b.n	800bf7e <_dtoa_r+0x69e>
 800bf06:	4b9e      	ldr	r3, [pc, #632]	@ (800c180 <_dtoa_r+0x8a0>)
 800bf08:	f7f4 fb96 	bl	8000638 <__aeabi_dmul>
 800bf0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf10:	e7bc      	b.n	800be8c <_dtoa_r+0x5ac>
 800bf12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bf16:	4656      	mov	r6, sl
 800bf18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7f4 fcb4 	bl	800088c <__aeabi_ddiv>
 800bf24:	f7f4 fe38 	bl	8000b98 <__aeabi_d2iz>
 800bf28:	4680      	mov	r8, r0
 800bf2a:	f7f4 fb1b 	bl	8000564 <__aeabi_i2d>
 800bf2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf32:	f7f4 fb81 	bl	8000638 <__aeabi_dmul>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf42:	f7f4 f9c1 	bl	80002c8 <__aeabi_dsub>
 800bf46:	f806 4b01 	strb.w	r4, [r6], #1
 800bf4a:	9d03      	ldr	r5, [sp, #12]
 800bf4c:	eba6 040a 	sub.w	r4, r6, sl
 800bf50:	42a5      	cmp	r5, r4
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	d133      	bne.n	800bfc0 <_dtoa_r+0x6e0>
 800bf58:	f7f4 f9b8 	bl	80002cc <__adddf3>
 800bf5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	f7f4 fdf8 	bl	8000b58 <__aeabi_dcmpgt>
 800bf68:	b9c0      	cbnz	r0, 800bf9c <_dtoa_r+0x6bc>
 800bf6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7f4 fdc9 	bl	8000b08 <__aeabi_dcmpeq>
 800bf76:	b110      	cbz	r0, 800bf7e <_dtoa_r+0x69e>
 800bf78:	f018 0f01 	tst.w	r8, #1
 800bf7c:	d10e      	bne.n	800bf9c <_dtoa_r+0x6bc>
 800bf7e:	9902      	ldr	r1, [sp, #8]
 800bf80:	4648      	mov	r0, r9
 800bf82:	f000 fbbd 	bl	800c700 <_Bfree>
 800bf86:	2300      	movs	r3, #0
 800bf88:	7033      	strb	r3, [r6, #0]
 800bf8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf8c:	3701      	adds	r7, #1
 800bf8e:	601f      	str	r7, [r3, #0]
 800bf90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 824b 	beq.w	800c42e <_dtoa_r+0xb4e>
 800bf98:	601e      	str	r6, [r3, #0]
 800bf9a:	e248      	b.n	800c42e <_dtoa_r+0xb4e>
 800bf9c:	46b8      	mov	r8, r7
 800bf9e:	4633      	mov	r3, r6
 800bfa0:	461e      	mov	r6, r3
 800bfa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfa6:	2a39      	cmp	r2, #57	@ 0x39
 800bfa8:	d106      	bne.n	800bfb8 <_dtoa_r+0x6d8>
 800bfaa:	459a      	cmp	sl, r3
 800bfac:	d1f8      	bne.n	800bfa0 <_dtoa_r+0x6c0>
 800bfae:	2230      	movs	r2, #48	@ 0x30
 800bfb0:	f108 0801 	add.w	r8, r8, #1
 800bfb4:	f88a 2000 	strb.w	r2, [sl]
 800bfb8:	781a      	ldrb	r2, [r3, #0]
 800bfba:	3201      	adds	r2, #1
 800bfbc:	701a      	strb	r2, [r3, #0]
 800bfbe:	e7a0      	b.n	800bf02 <_dtoa_r+0x622>
 800bfc0:	4b6f      	ldr	r3, [pc, #444]	@ (800c180 <_dtoa_r+0x8a0>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 fb38 	bl	8000638 <__aeabi_dmul>
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4604      	mov	r4, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	f7f4 fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d09f      	beq.n	800bf18 <_dtoa_r+0x638>
 800bfd8:	e7d1      	b.n	800bf7e <_dtoa_r+0x69e>
 800bfda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfdc:	2a00      	cmp	r2, #0
 800bfde:	f000 80ea 	beq.w	800c1b6 <_dtoa_r+0x8d6>
 800bfe2:	9a07      	ldr	r2, [sp, #28]
 800bfe4:	2a01      	cmp	r2, #1
 800bfe6:	f300 80cd 	bgt.w	800c184 <_dtoa_r+0x8a4>
 800bfea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	f000 80c1 	beq.w	800c174 <_dtoa_r+0x894>
 800bff2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bff6:	9c08      	ldr	r4, [sp, #32]
 800bff8:	9e00      	ldr	r6, [sp, #0]
 800bffa:	9a00      	ldr	r2, [sp, #0]
 800bffc:	441a      	add	r2, r3
 800bffe:	9200      	str	r2, [sp, #0]
 800c000:	9a06      	ldr	r2, [sp, #24]
 800c002:	2101      	movs	r1, #1
 800c004:	441a      	add	r2, r3
 800c006:	4648      	mov	r0, r9
 800c008:	9206      	str	r2, [sp, #24]
 800c00a:	f000 fc2d 	bl	800c868 <__i2b>
 800c00e:	4605      	mov	r5, r0
 800c010:	b166      	cbz	r6, 800c02c <_dtoa_r+0x74c>
 800c012:	9b06      	ldr	r3, [sp, #24]
 800c014:	2b00      	cmp	r3, #0
 800c016:	dd09      	ble.n	800c02c <_dtoa_r+0x74c>
 800c018:	42b3      	cmp	r3, r6
 800c01a:	9a00      	ldr	r2, [sp, #0]
 800c01c:	bfa8      	it	ge
 800c01e:	4633      	movge	r3, r6
 800c020:	1ad2      	subs	r2, r2, r3
 800c022:	9200      	str	r2, [sp, #0]
 800c024:	9a06      	ldr	r2, [sp, #24]
 800c026:	1af6      	subs	r6, r6, r3
 800c028:	1ad3      	subs	r3, r2, r3
 800c02a:	9306      	str	r3, [sp, #24]
 800c02c:	9b08      	ldr	r3, [sp, #32]
 800c02e:	b30b      	cbz	r3, 800c074 <_dtoa_r+0x794>
 800c030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 80c6 	beq.w	800c1c4 <_dtoa_r+0x8e4>
 800c038:	2c00      	cmp	r4, #0
 800c03a:	f000 80c0 	beq.w	800c1be <_dtoa_r+0x8de>
 800c03e:	4629      	mov	r1, r5
 800c040:	4622      	mov	r2, r4
 800c042:	4648      	mov	r0, r9
 800c044:	f000 fcc8 	bl	800c9d8 <__pow5mult>
 800c048:	9a02      	ldr	r2, [sp, #8]
 800c04a:	4601      	mov	r1, r0
 800c04c:	4605      	mov	r5, r0
 800c04e:	4648      	mov	r0, r9
 800c050:	f000 fc20 	bl	800c894 <__multiply>
 800c054:	9902      	ldr	r1, [sp, #8]
 800c056:	4680      	mov	r8, r0
 800c058:	4648      	mov	r0, r9
 800c05a:	f000 fb51 	bl	800c700 <_Bfree>
 800c05e:	9b08      	ldr	r3, [sp, #32]
 800c060:	1b1b      	subs	r3, r3, r4
 800c062:	9308      	str	r3, [sp, #32]
 800c064:	f000 80b1 	beq.w	800c1ca <_dtoa_r+0x8ea>
 800c068:	9a08      	ldr	r2, [sp, #32]
 800c06a:	4641      	mov	r1, r8
 800c06c:	4648      	mov	r0, r9
 800c06e:	f000 fcb3 	bl	800c9d8 <__pow5mult>
 800c072:	9002      	str	r0, [sp, #8]
 800c074:	2101      	movs	r1, #1
 800c076:	4648      	mov	r0, r9
 800c078:	f000 fbf6 	bl	800c868 <__i2b>
 800c07c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c07e:	4604      	mov	r4, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 81d8 	beq.w	800c436 <_dtoa_r+0xb56>
 800c086:	461a      	mov	r2, r3
 800c088:	4601      	mov	r1, r0
 800c08a:	4648      	mov	r0, r9
 800c08c:	f000 fca4 	bl	800c9d8 <__pow5mult>
 800c090:	9b07      	ldr	r3, [sp, #28]
 800c092:	2b01      	cmp	r3, #1
 800c094:	4604      	mov	r4, r0
 800c096:	f300 809f 	bgt.w	800c1d8 <_dtoa_r+0x8f8>
 800c09a:	9b04      	ldr	r3, [sp, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f040 8097 	bne.w	800c1d0 <_dtoa_r+0x8f0>
 800c0a2:	9b05      	ldr	r3, [sp, #20]
 800c0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f040 8093 	bne.w	800c1d4 <_dtoa_r+0x8f4>
 800c0ae:	9b05      	ldr	r3, [sp, #20]
 800c0b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0b4:	0d1b      	lsrs	r3, r3, #20
 800c0b6:	051b      	lsls	r3, r3, #20
 800c0b8:	b133      	cbz	r3, 800c0c8 <_dtoa_r+0x7e8>
 800c0ba:	9b00      	ldr	r3, [sp, #0]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	9b06      	ldr	r3, [sp, #24]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	9306      	str	r3, [sp, #24]
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	9308      	str	r3, [sp, #32]
 800c0ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 81b8 	beq.w	800c442 <_dtoa_r+0xb62>
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0d8:	6918      	ldr	r0, [r3, #16]
 800c0da:	f000 fb79 	bl	800c7d0 <__hi0bits>
 800c0de:	f1c0 0020 	rsb	r0, r0, #32
 800c0e2:	9b06      	ldr	r3, [sp, #24]
 800c0e4:	4418      	add	r0, r3
 800c0e6:	f010 001f 	ands.w	r0, r0, #31
 800c0ea:	f000 8082 	beq.w	800c1f2 <_dtoa_r+0x912>
 800c0ee:	f1c0 0320 	rsb	r3, r0, #32
 800c0f2:	2b04      	cmp	r3, #4
 800c0f4:	dd73      	ble.n	800c1de <_dtoa_r+0x8fe>
 800c0f6:	9b00      	ldr	r3, [sp, #0]
 800c0f8:	f1c0 001c 	rsb	r0, r0, #28
 800c0fc:	4403      	add	r3, r0
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	9b06      	ldr	r3, [sp, #24]
 800c102:	4403      	add	r3, r0
 800c104:	4406      	add	r6, r0
 800c106:	9306      	str	r3, [sp, #24]
 800c108:	9b00      	ldr	r3, [sp, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	dd05      	ble.n	800c11a <_dtoa_r+0x83a>
 800c10e:	9902      	ldr	r1, [sp, #8]
 800c110:	461a      	mov	r2, r3
 800c112:	4648      	mov	r0, r9
 800c114:	f000 fcba 	bl	800ca8c <__lshift>
 800c118:	9002      	str	r0, [sp, #8]
 800c11a:	9b06      	ldr	r3, [sp, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dd05      	ble.n	800c12c <_dtoa_r+0x84c>
 800c120:	4621      	mov	r1, r4
 800c122:	461a      	mov	r2, r3
 800c124:	4648      	mov	r0, r9
 800c126:	f000 fcb1 	bl	800ca8c <__lshift>
 800c12a:	4604      	mov	r4, r0
 800c12c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d061      	beq.n	800c1f6 <_dtoa_r+0x916>
 800c132:	9802      	ldr	r0, [sp, #8]
 800c134:	4621      	mov	r1, r4
 800c136:	f000 fd15 	bl	800cb64 <__mcmp>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	da5b      	bge.n	800c1f6 <_dtoa_r+0x916>
 800c13e:	2300      	movs	r3, #0
 800c140:	9902      	ldr	r1, [sp, #8]
 800c142:	220a      	movs	r2, #10
 800c144:	4648      	mov	r0, r9
 800c146:	f000 fafd 	bl	800c744 <__multadd>
 800c14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c14c:	9002      	str	r0, [sp, #8]
 800c14e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 8177 	beq.w	800c446 <_dtoa_r+0xb66>
 800c158:	4629      	mov	r1, r5
 800c15a:	2300      	movs	r3, #0
 800c15c:	220a      	movs	r2, #10
 800c15e:	4648      	mov	r0, r9
 800c160:	f000 faf0 	bl	800c744 <__multadd>
 800c164:	f1bb 0f00 	cmp.w	fp, #0
 800c168:	4605      	mov	r5, r0
 800c16a:	dc6f      	bgt.n	800c24c <_dtoa_r+0x96c>
 800c16c:	9b07      	ldr	r3, [sp, #28]
 800c16e:	2b02      	cmp	r3, #2
 800c170:	dc49      	bgt.n	800c206 <_dtoa_r+0x926>
 800c172:	e06b      	b.n	800c24c <_dtoa_r+0x96c>
 800c174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c176:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c17a:	e73c      	b.n	800bff6 <_dtoa_r+0x716>
 800c17c:	3fe00000 	.word	0x3fe00000
 800c180:	40240000 	.word	0x40240000
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	1e5c      	subs	r4, r3, #1
 800c188:	9b08      	ldr	r3, [sp, #32]
 800c18a:	42a3      	cmp	r3, r4
 800c18c:	db09      	blt.n	800c1a2 <_dtoa_r+0x8c2>
 800c18e:	1b1c      	subs	r4, r3, r4
 800c190:	9b03      	ldr	r3, [sp, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f6bf af30 	bge.w	800bff8 <_dtoa_r+0x718>
 800c198:	9b00      	ldr	r3, [sp, #0]
 800c19a:	9a03      	ldr	r2, [sp, #12]
 800c19c:	1a9e      	subs	r6, r3, r2
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e72b      	b.n	800bffa <_dtoa_r+0x71a>
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1a6:	9408      	str	r4, [sp, #32]
 800c1a8:	1ae3      	subs	r3, r4, r3
 800c1aa:	441a      	add	r2, r3
 800c1ac:	9e00      	ldr	r6, [sp, #0]
 800c1ae:	9b03      	ldr	r3, [sp, #12]
 800c1b0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c1b2:	2400      	movs	r4, #0
 800c1b4:	e721      	b.n	800bffa <_dtoa_r+0x71a>
 800c1b6:	9c08      	ldr	r4, [sp, #32]
 800c1b8:	9e00      	ldr	r6, [sp, #0]
 800c1ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c1bc:	e728      	b.n	800c010 <_dtoa_r+0x730>
 800c1be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c1c2:	e751      	b.n	800c068 <_dtoa_r+0x788>
 800c1c4:	9a08      	ldr	r2, [sp, #32]
 800c1c6:	9902      	ldr	r1, [sp, #8]
 800c1c8:	e750      	b.n	800c06c <_dtoa_r+0x78c>
 800c1ca:	f8cd 8008 	str.w	r8, [sp, #8]
 800c1ce:	e751      	b.n	800c074 <_dtoa_r+0x794>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e779      	b.n	800c0c8 <_dtoa_r+0x7e8>
 800c1d4:	9b04      	ldr	r3, [sp, #16]
 800c1d6:	e777      	b.n	800c0c8 <_dtoa_r+0x7e8>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9308      	str	r3, [sp, #32]
 800c1dc:	e779      	b.n	800c0d2 <_dtoa_r+0x7f2>
 800c1de:	d093      	beq.n	800c108 <_dtoa_r+0x828>
 800c1e0:	9a00      	ldr	r2, [sp, #0]
 800c1e2:	331c      	adds	r3, #28
 800c1e4:	441a      	add	r2, r3
 800c1e6:	9200      	str	r2, [sp, #0]
 800c1e8:	9a06      	ldr	r2, [sp, #24]
 800c1ea:	441a      	add	r2, r3
 800c1ec:	441e      	add	r6, r3
 800c1ee:	9206      	str	r2, [sp, #24]
 800c1f0:	e78a      	b.n	800c108 <_dtoa_r+0x828>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	e7f4      	b.n	800c1e0 <_dtoa_r+0x900>
 800c1f6:	9b03      	ldr	r3, [sp, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	46b8      	mov	r8, r7
 800c1fc:	dc20      	bgt.n	800c240 <_dtoa_r+0x960>
 800c1fe:	469b      	mov	fp, r3
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	2b02      	cmp	r3, #2
 800c204:	dd1e      	ble.n	800c244 <_dtoa_r+0x964>
 800c206:	f1bb 0f00 	cmp.w	fp, #0
 800c20a:	f47f adb1 	bne.w	800bd70 <_dtoa_r+0x490>
 800c20e:	4621      	mov	r1, r4
 800c210:	465b      	mov	r3, fp
 800c212:	2205      	movs	r2, #5
 800c214:	4648      	mov	r0, r9
 800c216:	f000 fa95 	bl	800c744 <__multadd>
 800c21a:	4601      	mov	r1, r0
 800c21c:	4604      	mov	r4, r0
 800c21e:	9802      	ldr	r0, [sp, #8]
 800c220:	f000 fca0 	bl	800cb64 <__mcmp>
 800c224:	2800      	cmp	r0, #0
 800c226:	f77f ada3 	ble.w	800bd70 <_dtoa_r+0x490>
 800c22a:	4656      	mov	r6, sl
 800c22c:	2331      	movs	r3, #49	@ 0x31
 800c22e:	f806 3b01 	strb.w	r3, [r6], #1
 800c232:	f108 0801 	add.w	r8, r8, #1
 800c236:	e59f      	b.n	800bd78 <_dtoa_r+0x498>
 800c238:	9c03      	ldr	r4, [sp, #12]
 800c23a:	46b8      	mov	r8, r7
 800c23c:	4625      	mov	r5, r4
 800c23e:	e7f4      	b.n	800c22a <_dtoa_r+0x94a>
 800c240:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c246:	2b00      	cmp	r3, #0
 800c248:	f000 8101 	beq.w	800c44e <_dtoa_r+0xb6e>
 800c24c:	2e00      	cmp	r6, #0
 800c24e:	dd05      	ble.n	800c25c <_dtoa_r+0x97c>
 800c250:	4629      	mov	r1, r5
 800c252:	4632      	mov	r2, r6
 800c254:	4648      	mov	r0, r9
 800c256:	f000 fc19 	bl	800ca8c <__lshift>
 800c25a:	4605      	mov	r5, r0
 800c25c:	9b08      	ldr	r3, [sp, #32]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d05c      	beq.n	800c31c <_dtoa_r+0xa3c>
 800c262:	6869      	ldr	r1, [r5, #4]
 800c264:	4648      	mov	r0, r9
 800c266:	f000 fa0b 	bl	800c680 <_Balloc>
 800c26a:	4606      	mov	r6, r0
 800c26c:	b928      	cbnz	r0, 800c27a <_dtoa_r+0x99a>
 800c26e:	4b82      	ldr	r3, [pc, #520]	@ (800c478 <_dtoa_r+0xb98>)
 800c270:	4602      	mov	r2, r0
 800c272:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c276:	f7ff bb4a 	b.w	800b90e <_dtoa_r+0x2e>
 800c27a:	692a      	ldr	r2, [r5, #16]
 800c27c:	3202      	adds	r2, #2
 800c27e:	0092      	lsls	r2, r2, #2
 800c280:	f105 010c 	add.w	r1, r5, #12
 800c284:	300c      	adds	r0, #12
 800c286:	f7ff fa92 	bl	800b7ae <memcpy>
 800c28a:	2201      	movs	r2, #1
 800c28c:	4631      	mov	r1, r6
 800c28e:	4648      	mov	r0, r9
 800c290:	f000 fbfc 	bl	800ca8c <__lshift>
 800c294:	f10a 0301 	add.w	r3, sl, #1
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	eb0a 030b 	add.w	r3, sl, fp
 800c29e:	9308      	str	r3, [sp, #32]
 800c2a0:	9b04      	ldr	r3, [sp, #16]
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	462f      	mov	r7, r5
 800c2a8:	9306      	str	r3, [sp, #24]
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	9b00      	ldr	r3, [sp, #0]
 800c2ae:	9802      	ldr	r0, [sp, #8]
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c2b6:	f7ff fa88 	bl	800b7ca <quorem>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	3330      	adds	r3, #48	@ 0x30
 800c2be:	9003      	str	r0, [sp, #12]
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	9802      	ldr	r0, [sp, #8]
 800c2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2c6:	f000 fc4d 	bl	800cb64 <__mcmp>
 800c2ca:	462a      	mov	r2, r5
 800c2cc:	9004      	str	r0, [sp, #16]
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4648      	mov	r0, r9
 800c2d2:	f000 fc63 	bl	800cb9c <__mdiff>
 800c2d6:	68c2      	ldr	r2, [r0, #12]
 800c2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2da:	4606      	mov	r6, r0
 800c2dc:	bb02      	cbnz	r2, 800c320 <_dtoa_r+0xa40>
 800c2de:	4601      	mov	r1, r0
 800c2e0:	9802      	ldr	r0, [sp, #8]
 800c2e2:	f000 fc3f 	bl	800cb64 <__mcmp>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800c2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f2:	f000 fa05 	bl	800c700 <_Bfree>
 800c2f6:	9b07      	ldr	r3, [sp, #28]
 800c2f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c2fa:	9e00      	ldr	r6, [sp, #0]
 800c2fc:	ea42 0103 	orr.w	r1, r2, r3
 800c300:	9b06      	ldr	r3, [sp, #24]
 800c302:	4319      	orrs	r1, r3
 800c304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c306:	d10d      	bne.n	800c324 <_dtoa_r+0xa44>
 800c308:	2b39      	cmp	r3, #57	@ 0x39
 800c30a:	d027      	beq.n	800c35c <_dtoa_r+0xa7c>
 800c30c:	9a04      	ldr	r2, [sp, #16]
 800c30e:	2a00      	cmp	r2, #0
 800c310:	dd01      	ble.n	800c316 <_dtoa_r+0xa36>
 800c312:	9b03      	ldr	r3, [sp, #12]
 800c314:	3331      	adds	r3, #49	@ 0x31
 800c316:	f88b 3000 	strb.w	r3, [fp]
 800c31a:	e52e      	b.n	800bd7a <_dtoa_r+0x49a>
 800c31c:	4628      	mov	r0, r5
 800c31e:	e7b9      	b.n	800c294 <_dtoa_r+0x9b4>
 800c320:	2201      	movs	r2, #1
 800c322:	e7e2      	b.n	800c2ea <_dtoa_r+0xa0a>
 800c324:	9904      	ldr	r1, [sp, #16]
 800c326:	2900      	cmp	r1, #0
 800c328:	db04      	blt.n	800c334 <_dtoa_r+0xa54>
 800c32a:	9807      	ldr	r0, [sp, #28]
 800c32c:	4301      	orrs	r1, r0
 800c32e:	9806      	ldr	r0, [sp, #24]
 800c330:	4301      	orrs	r1, r0
 800c332:	d120      	bne.n	800c376 <_dtoa_r+0xa96>
 800c334:	2a00      	cmp	r2, #0
 800c336:	ddee      	ble.n	800c316 <_dtoa_r+0xa36>
 800c338:	9902      	ldr	r1, [sp, #8]
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	2201      	movs	r2, #1
 800c33e:	4648      	mov	r0, r9
 800c340:	f000 fba4 	bl	800ca8c <__lshift>
 800c344:	4621      	mov	r1, r4
 800c346:	9002      	str	r0, [sp, #8]
 800c348:	f000 fc0c 	bl	800cb64 <__mcmp>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	9b00      	ldr	r3, [sp, #0]
 800c350:	dc02      	bgt.n	800c358 <_dtoa_r+0xa78>
 800c352:	d1e0      	bne.n	800c316 <_dtoa_r+0xa36>
 800c354:	07da      	lsls	r2, r3, #31
 800c356:	d5de      	bpl.n	800c316 <_dtoa_r+0xa36>
 800c358:	2b39      	cmp	r3, #57	@ 0x39
 800c35a:	d1da      	bne.n	800c312 <_dtoa_r+0xa32>
 800c35c:	2339      	movs	r3, #57	@ 0x39
 800c35e:	f88b 3000 	strb.w	r3, [fp]
 800c362:	4633      	mov	r3, r6
 800c364:	461e      	mov	r6, r3
 800c366:	3b01      	subs	r3, #1
 800c368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c36c:	2a39      	cmp	r2, #57	@ 0x39
 800c36e:	d04e      	beq.n	800c40e <_dtoa_r+0xb2e>
 800c370:	3201      	adds	r2, #1
 800c372:	701a      	strb	r2, [r3, #0]
 800c374:	e501      	b.n	800bd7a <_dtoa_r+0x49a>
 800c376:	2a00      	cmp	r2, #0
 800c378:	dd03      	ble.n	800c382 <_dtoa_r+0xaa2>
 800c37a:	2b39      	cmp	r3, #57	@ 0x39
 800c37c:	d0ee      	beq.n	800c35c <_dtoa_r+0xa7c>
 800c37e:	3301      	adds	r3, #1
 800c380:	e7c9      	b.n	800c316 <_dtoa_r+0xa36>
 800c382:	9a00      	ldr	r2, [sp, #0]
 800c384:	9908      	ldr	r1, [sp, #32]
 800c386:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c38a:	428a      	cmp	r2, r1
 800c38c:	d028      	beq.n	800c3e0 <_dtoa_r+0xb00>
 800c38e:	9902      	ldr	r1, [sp, #8]
 800c390:	2300      	movs	r3, #0
 800c392:	220a      	movs	r2, #10
 800c394:	4648      	mov	r0, r9
 800c396:	f000 f9d5 	bl	800c744 <__multadd>
 800c39a:	42af      	cmp	r7, r5
 800c39c:	9002      	str	r0, [sp, #8]
 800c39e:	f04f 0300 	mov.w	r3, #0
 800c3a2:	f04f 020a 	mov.w	r2, #10
 800c3a6:	4639      	mov	r1, r7
 800c3a8:	4648      	mov	r0, r9
 800c3aa:	d107      	bne.n	800c3bc <_dtoa_r+0xadc>
 800c3ac:	f000 f9ca 	bl	800c744 <__multadd>
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	9b00      	ldr	r3, [sp, #0]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	e777      	b.n	800c2ac <_dtoa_r+0x9cc>
 800c3bc:	f000 f9c2 	bl	800c744 <__multadd>
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	220a      	movs	r2, #10
 800c3c8:	4648      	mov	r0, r9
 800c3ca:	f000 f9bb 	bl	800c744 <__multadd>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	e7f0      	b.n	800c3b4 <_dtoa_r+0xad4>
 800c3d2:	f1bb 0f00 	cmp.w	fp, #0
 800c3d6:	bfcc      	ite	gt
 800c3d8:	465e      	movgt	r6, fp
 800c3da:	2601      	movle	r6, #1
 800c3dc:	4456      	add	r6, sl
 800c3de:	2700      	movs	r7, #0
 800c3e0:	9902      	ldr	r1, [sp, #8]
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	4648      	mov	r0, r9
 800c3e8:	f000 fb50 	bl	800ca8c <__lshift>
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	9002      	str	r0, [sp, #8]
 800c3f0:	f000 fbb8 	bl	800cb64 <__mcmp>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	dcb4      	bgt.n	800c362 <_dtoa_r+0xa82>
 800c3f8:	d102      	bne.n	800c400 <_dtoa_r+0xb20>
 800c3fa:	9b00      	ldr	r3, [sp, #0]
 800c3fc:	07db      	lsls	r3, r3, #31
 800c3fe:	d4b0      	bmi.n	800c362 <_dtoa_r+0xa82>
 800c400:	4633      	mov	r3, r6
 800c402:	461e      	mov	r6, r3
 800c404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c408:	2a30      	cmp	r2, #48	@ 0x30
 800c40a:	d0fa      	beq.n	800c402 <_dtoa_r+0xb22>
 800c40c:	e4b5      	b.n	800bd7a <_dtoa_r+0x49a>
 800c40e:	459a      	cmp	sl, r3
 800c410:	d1a8      	bne.n	800c364 <_dtoa_r+0xa84>
 800c412:	2331      	movs	r3, #49	@ 0x31
 800c414:	f108 0801 	add.w	r8, r8, #1
 800c418:	f88a 3000 	strb.w	r3, [sl]
 800c41c:	e4ad      	b.n	800bd7a <_dtoa_r+0x49a>
 800c41e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c420:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c47c <_dtoa_r+0xb9c>
 800c424:	b11b      	cbz	r3, 800c42e <_dtoa_r+0xb4e>
 800c426:	f10a 0308 	add.w	r3, sl, #8
 800c42a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	4650      	mov	r0, sl
 800c430:	b017      	add	sp, #92	@ 0x5c
 800c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c436:	9b07      	ldr	r3, [sp, #28]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	f77f ae2e 	ble.w	800c09a <_dtoa_r+0x7ba>
 800c43e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c440:	9308      	str	r3, [sp, #32]
 800c442:	2001      	movs	r0, #1
 800c444:	e64d      	b.n	800c0e2 <_dtoa_r+0x802>
 800c446:	f1bb 0f00 	cmp.w	fp, #0
 800c44a:	f77f aed9 	ble.w	800c200 <_dtoa_r+0x920>
 800c44e:	4656      	mov	r6, sl
 800c450:	9802      	ldr	r0, [sp, #8]
 800c452:	4621      	mov	r1, r4
 800c454:	f7ff f9b9 	bl	800b7ca <quorem>
 800c458:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c45c:	f806 3b01 	strb.w	r3, [r6], #1
 800c460:	eba6 020a 	sub.w	r2, r6, sl
 800c464:	4593      	cmp	fp, r2
 800c466:	ddb4      	ble.n	800c3d2 <_dtoa_r+0xaf2>
 800c468:	9902      	ldr	r1, [sp, #8]
 800c46a:	2300      	movs	r3, #0
 800c46c:	220a      	movs	r2, #10
 800c46e:	4648      	mov	r0, r9
 800c470:	f000 f968 	bl	800c744 <__multadd>
 800c474:	9002      	str	r0, [sp, #8]
 800c476:	e7eb      	b.n	800c450 <_dtoa_r+0xb70>
 800c478:	0800e258 	.word	0x0800e258
 800c47c:	0800e1dc 	.word	0x0800e1dc

0800c480 <_free_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4605      	mov	r5, r0
 800c484:	2900      	cmp	r1, #0
 800c486:	d041      	beq.n	800c50c <_free_r+0x8c>
 800c488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48c:	1f0c      	subs	r4, r1, #4
 800c48e:	2b00      	cmp	r3, #0
 800c490:	bfb8      	it	lt
 800c492:	18e4      	addlt	r4, r4, r3
 800c494:	f000 f8e8 	bl	800c668 <__malloc_lock>
 800c498:	4a1d      	ldr	r2, [pc, #116]	@ (800c510 <_free_r+0x90>)
 800c49a:	6813      	ldr	r3, [r2, #0]
 800c49c:	b933      	cbnz	r3, 800c4ac <_free_r+0x2c>
 800c49e:	6063      	str	r3, [r4, #4]
 800c4a0:	6014      	str	r4, [r2, #0]
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4a8:	f000 b8e4 	b.w	800c674 <__malloc_unlock>
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	d908      	bls.n	800c4c2 <_free_r+0x42>
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	1821      	adds	r1, r4, r0
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	bf01      	itttt	eq
 800c4b8:	6819      	ldreq	r1, [r3, #0]
 800c4ba:	685b      	ldreq	r3, [r3, #4]
 800c4bc:	1809      	addeq	r1, r1, r0
 800c4be:	6021      	streq	r1, [r4, #0]
 800c4c0:	e7ed      	b.n	800c49e <_free_r+0x1e>
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	b10b      	cbz	r3, 800c4cc <_free_r+0x4c>
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d9fa      	bls.n	800c4c2 <_free_r+0x42>
 800c4cc:	6811      	ldr	r1, [r2, #0]
 800c4ce:	1850      	adds	r0, r2, r1
 800c4d0:	42a0      	cmp	r0, r4
 800c4d2:	d10b      	bne.n	800c4ec <_free_r+0x6c>
 800c4d4:	6820      	ldr	r0, [r4, #0]
 800c4d6:	4401      	add	r1, r0
 800c4d8:	1850      	adds	r0, r2, r1
 800c4da:	4283      	cmp	r3, r0
 800c4dc:	6011      	str	r1, [r2, #0]
 800c4de:	d1e0      	bne.n	800c4a2 <_free_r+0x22>
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	6053      	str	r3, [r2, #4]
 800c4e6:	4408      	add	r0, r1
 800c4e8:	6010      	str	r0, [r2, #0]
 800c4ea:	e7da      	b.n	800c4a2 <_free_r+0x22>
 800c4ec:	d902      	bls.n	800c4f4 <_free_r+0x74>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	602b      	str	r3, [r5, #0]
 800c4f2:	e7d6      	b.n	800c4a2 <_free_r+0x22>
 800c4f4:	6820      	ldr	r0, [r4, #0]
 800c4f6:	1821      	adds	r1, r4, r0
 800c4f8:	428b      	cmp	r3, r1
 800c4fa:	bf04      	itt	eq
 800c4fc:	6819      	ldreq	r1, [r3, #0]
 800c4fe:	685b      	ldreq	r3, [r3, #4]
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	bf04      	itt	eq
 800c504:	1809      	addeq	r1, r1, r0
 800c506:	6021      	streq	r1, [r4, #0]
 800c508:	6054      	str	r4, [r2, #4]
 800c50a:	e7ca      	b.n	800c4a2 <_free_r+0x22>
 800c50c:	bd38      	pop	{r3, r4, r5, pc}
 800c50e:	bf00      	nop
 800c510:	20000f24 	.word	0x20000f24

0800c514 <malloc>:
 800c514:	4b02      	ldr	r3, [pc, #8]	@ (800c520 <malloc+0xc>)
 800c516:	4601      	mov	r1, r0
 800c518:	6818      	ldr	r0, [r3, #0]
 800c51a:	f000 b825 	b.w	800c568 <_malloc_r>
 800c51e:	bf00      	nop
 800c520:	20000080 	.word	0x20000080

0800c524 <sbrk_aligned>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4e0f      	ldr	r6, [pc, #60]	@ (800c564 <sbrk_aligned+0x40>)
 800c528:	460c      	mov	r4, r1
 800c52a:	6831      	ldr	r1, [r6, #0]
 800c52c:	4605      	mov	r5, r0
 800c52e:	b911      	cbnz	r1, 800c536 <sbrk_aligned+0x12>
 800c530:	f000 fe3e 	bl	800d1b0 <_sbrk_r>
 800c534:	6030      	str	r0, [r6, #0]
 800c536:	4621      	mov	r1, r4
 800c538:	4628      	mov	r0, r5
 800c53a:	f000 fe39 	bl	800d1b0 <_sbrk_r>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d103      	bne.n	800c54a <sbrk_aligned+0x26>
 800c542:	f04f 34ff 	mov.w	r4, #4294967295
 800c546:	4620      	mov	r0, r4
 800c548:	bd70      	pop	{r4, r5, r6, pc}
 800c54a:	1cc4      	adds	r4, r0, #3
 800c54c:	f024 0403 	bic.w	r4, r4, #3
 800c550:	42a0      	cmp	r0, r4
 800c552:	d0f8      	beq.n	800c546 <sbrk_aligned+0x22>
 800c554:	1a21      	subs	r1, r4, r0
 800c556:	4628      	mov	r0, r5
 800c558:	f000 fe2a 	bl	800d1b0 <_sbrk_r>
 800c55c:	3001      	adds	r0, #1
 800c55e:	d1f2      	bne.n	800c546 <sbrk_aligned+0x22>
 800c560:	e7ef      	b.n	800c542 <sbrk_aligned+0x1e>
 800c562:	bf00      	nop
 800c564:	20000f20 	.word	0x20000f20

0800c568 <_malloc_r>:
 800c568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c56c:	1ccd      	adds	r5, r1, #3
 800c56e:	f025 0503 	bic.w	r5, r5, #3
 800c572:	3508      	adds	r5, #8
 800c574:	2d0c      	cmp	r5, #12
 800c576:	bf38      	it	cc
 800c578:	250c      	movcc	r5, #12
 800c57a:	2d00      	cmp	r5, #0
 800c57c:	4606      	mov	r6, r0
 800c57e:	db01      	blt.n	800c584 <_malloc_r+0x1c>
 800c580:	42a9      	cmp	r1, r5
 800c582:	d904      	bls.n	800c58e <_malloc_r+0x26>
 800c584:	230c      	movs	r3, #12
 800c586:	6033      	str	r3, [r6, #0]
 800c588:	2000      	movs	r0, #0
 800c58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c58e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c664 <_malloc_r+0xfc>
 800c592:	f000 f869 	bl	800c668 <__malloc_lock>
 800c596:	f8d8 3000 	ldr.w	r3, [r8]
 800c59a:	461c      	mov	r4, r3
 800c59c:	bb44      	cbnz	r4, 800c5f0 <_malloc_r+0x88>
 800c59e:	4629      	mov	r1, r5
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7ff ffbf 	bl	800c524 <sbrk_aligned>
 800c5a6:	1c43      	adds	r3, r0, #1
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	d158      	bne.n	800c65e <_malloc_r+0xf6>
 800c5ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c5b0:	4627      	mov	r7, r4
 800c5b2:	2f00      	cmp	r7, #0
 800c5b4:	d143      	bne.n	800c63e <_malloc_r+0xd6>
 800c5b6:	2c00      	cmp	r4, #0
 800c5b8:	d04b      	beq.n	800c652 <_malloc_r+0xea>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4630      	mov	r0, r6
 800c5c0:	eb04 0903 	add.w	r9, r4, r3
 800c5c4:	f000 fdf4 	bl	800d1b0 <_sbrk_r>
 800c5c8:	4581      	cmp	r9, r0
 800c5ca:	d142      	bne.n	800c652 <_malloc_r+0xea>
 800c5cc:	6821      	ldr	r1, [r4, #0]
 800c5ce:	1a6d      	subs	r5, r5, r1
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ffa6 	bl	800c524 <sbrk_aligned>
 800c5d8:	3001      	adds	r0, #1
 800c5da:	d03a      	beq.n	800c652 <_malloc_r+0xea>
 800c5dc:	6823      	ldr	r3, [r4, #0]
 800c5de:	442b      	add	r3, r5
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c5e6:	685a      	ldr	r2, [r3, #4]
 800c5e8:	bb62      	cbnz	r2, 800c644 <_malloc_r+0xdc>
 800c5ea:	f8c8 7000 	str.w	r7, [r8]
 800c5ee:	e00f      	b.n	800c610 <_malloc_r+0xa8>
 800c5f0:	6822      	ldr	r2, [r4, #0]
 800c5f2:	1b52      	subs	r2, r2, r5
 800c5f4:	d420      	bmi.n	800c638 <_malloc_r+0xd0>
 800c5f6:	2a0b      	cmp	r2, #11
 800c5f8:	d917      	bls.n	800c62a <_malloc_r+0xc2>
 800c5fa:	1961      	adds	r1, r4, r5
 800c5fc:	42a3      	cmp	r3, r4
 800c5fe:	6025      	str	r5, [r4, #0]
 800c600:	bf18      	it	ne
 800c602:	6059      	strne	r1, [r3, #4]
 800c604:	6863      	ldr	r3, [r4, #4]
 800c606:	bf08      	it	eq
 800c608:	f8c8 1000 	streq.w	r1, [r8]
 800c60c:	5162      	str	r2, [r4, r5]
 800c60e:	604b      	str	r3, [r1, #4]
 800c610:	4630      	mov	r0, r6
 800c612:	f000 f82f 	bl	800c674 <__malloc_unlock>
 800c616:	f104 000b 	add.w	r0, r4, #11
 800c61a:	1d23      	adds	r3, r4, #4
 800c61c:	f020 0007 	bic.w	r0, r0, #7
 800c620:	1ac2      	subs	r2, r0, r3
 800c622:	bf1c      	itt	ne
 800c624:	1a1b      	subne	r3, r3, r0
 800c626:	50a3      	strne	r3, [r4, r2]
 800c628:	e7af      	b.n	800c58a <_malloc_r+0x22>
 800c62a:	6862      	ldr	r2, [r4, #4]
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	bf0c      	ite	eq
 800c630:	f8c8 2000 	streq.w	r2, [r8]
 800c634:	605a      	strne	r2, [r3, #4]
 800c636:	e7eb      	b.n	800c610 <_malloc_r+0xa8>
 800c638:	4623      	mov	r3, r4
 800c63a:	6864      	ldr	r4, [r4, #4]
 800c63c:	e7ae      	b.n	800c59c <_malloc_r+0x34>
 800c63e:	463c      	mov	r4, r7
 800c640:	687f      	ldr	r7, [r7, #4]
 800c642:	e7b6      	b.n	800c5b2 <_malloc_r+0x4a>
 800c644:	461a      	mov	r2, r3
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	42a3      	cmp	r3, r4
 800c64a:	d1fb      	bne.n	800c644 <_malloc_r+0xdc>
 800c64c:	2300      	movs	r3, #0
 800c64e:	6053      	str	r3, [r2, #4]
 800c650:	e7de      	b.n	800c610 <_malloc_r+0xa8>
 800c652:	230c      	movs	r3, #12
 800c654:	6033      	str	r3, [r6, #0]
 800c656:	4630      	mov	r0, r6
 800c658:	f000 f80c 	bl	800c674 <__malloc_unlock>
 800c65c:	e794      	b.n	800c588 <_malloc_r+0x20>
 800c65e:	6005      	str	r5, [r0, #0]
 800c660:	e7d6      	b.n	800c610 <_malloc_r+0xa8>
 800c662:	bf00      	nop
 800c664:	20000f24 	.word	0x20000f24

0800c668 <__malloc_lock>:
 800c668:	4801      	ldr	r0, [pc, #4]	@ (800c670 <__malloc_lock+0x8>)
 800c66a:	f7ff b89e 	b.w	800b7aa <__retarget_lock_acquire_recursive>
 800c66e:	bf00      	nop
 800c670:	20000f1c 	.word	0x20000f1c

0800c674 <__malloc_unlock>:
 800c674:	4801      	ldr	r0, [pc, #4]	@ (800c67c <__malloc_unlock+0x8>)
 800c676:	f7ff b899 	b.w	800b7ac <__retarget_lock_release_recursive>
 800c67a:	bf00      	nop
 800c67c:	20000f1c 	.word	0x20000f1c

0800c680 <_Balloc>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	69c6      	ldr	r6, [r0, #28]
 800c684:	4604      	mov	r4, r0
 800c686:	460d      	mov	r5, r1
 800c688:	b976      	cbnz	r6, 800c6a8 <_Balloc+0x28>
 800c68a:	2010      	movs	r0, #16
 800c68c:	f7ff ff42 	bl	800c514 <malloc>
 800c690:	4602      	mov	r2, r0
 800c692:	61e0      	str	r0, [r4, #28]
 800c694:	b920      	cbnz	r0, 800c6a0 <_Balloc+0x20>
 800c696:	4b18      	ldr	r3, [pc, #96]	@ (800c6f8 <_Balloc+0x78>)
 800c698:	4818      	ldr	r0, [pc, #96]	@ (800c6fc <_Balloc+0x7c>)
 800c69a:	216b      	movs	r1, #107	@ 0x6b
 800c69c:	f000 fd98 	bl	800d1d0 <__assert_func>
 800c6a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6a4:	6006      	str	r6, [r0, #0]
 800c6a6:	60c6      	str	r6, [r0, #12]
 800c6a8:	69e6      	ldr	r6, [r4, #28]
 800c6aa:	68f3      	ldr	r3, [r6, #12]
 800c6ac:	b183      	cbz	r3, 800c6d0 <_Balloc+0x50>
 800c6ae:	69e3      	ldr	r3, [r4, #28]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6b6:	b9b8      	cbnz	r0, 800c6e8 <_Balloc+0x68>
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c6be:	1d72      	adds	r2, r6, #5
 800c6c0:	0092      	lsls	r2, r2, #2
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 fda2 	bl	800d20c <_calloc_r>
 800c6c8:	b160      	cbz	r0, 800c6e4 <_Balloc+0x64>
 800c6ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6ce:	e00e      	b.n	800c6ee <_Balloc+0x6e>
 800c6d0:	2221      	movs	r2, #33	@ 0x21
 800c6d2:	2104      	movs	r1, #4
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 fd99 	bl	800d20c <_calloc_r>
 800c6da:	69e3      	ldr	r3, [r4, #28]
 800c6dc:	60f0      	str	r0, [r6, #12]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1e4      	bne.n	800c6ae <_Balloc+0x2e>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	6802      	ldr	r2, [r0, #0]
 800c6ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6f4:	e7f7      	b.n	800c6e6 <_Balloc+0x66>
 800c6f6:	bf00      	nop
 800c6f8:	0800e1e9 	.word	0x0800e1e9
 800c6fc:	0800e269 	.word	0x0800e269

0800c700 <_Bfree>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	69c6      	ldr	r6, [r0, #28]
 800c704:	4605      	mov	r5, r0
 800c706:	460c      	mov	r4, r1
 800c708:	b976      	cbnz	r6, 800c728 <_Bfree+0x28>
 800c70a:	2010      	movs	r0, #16
 800c70c:	f7ff ff02 	bl	800c514 <malloc>
 800c710:	4602      	mov	r2, r0
 800c712:	61e8      	str	r0, [r5, #28]
 800c714:	b920      	cbnz	r0, 800c720 <_Bfree+0x20>
 800c716:	4b09      	ldr	r3, [pc, #36]	@ (800c73c <_Bfree+0x3c>)
 800c718:	4809      	ldr	r0, [pc, #36]	@ (800c740 <_Bfree+0x40>)
 800c71a:	218f      	movs	r1, #143	@ 0x8f
 800c71c:	f000 fd58 	bl	800d1d0 <__assert_func>
 800c720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c724:	6006      	str	r6, [r0, #0]
 800c726:	60c6      	str	r6, [r0, #12]
 800c728:	b13c      	cbz	r4, 800c73a <_Bfree+0x3a>
 800c72a:	69eb      	ldr	r3, [r5, #28]
 800c72c:	6862      	ldr	r2, [r4, #4]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c734:	6021      	str	r1, [r4, #0]
 800c736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	0800e1e9 	.word	0x0800e1e9
 800c740:	0800e269 	.word	0x0800e269

0800c744 <__multadd>:
 800c744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c748:	690d      	ldr	r5, [r1, #16]
 800c74a:	4607      	mov	r7, r0
 800c74c:	460c      	mov	r4, r1
 800c74e:	461e      	mov	r6, r3
 800c750:	f101 0c14 	add.w	ip, r1, #20
 800c754:	2000      	movs	r0, #0
 800c756:	f8dc 3000 	ldr.w	r3, [ip]
 800c75a:	b299      	uxth	r1, r3
 800c75c:	fb02 6101 	mla	r1, r2, r1, r6
 800c760:	0c1e      	lsrs	r6, r3, #16
 800c762:	0c0b      	lsrs	r3, r1, #16
 800c764:	fb02 3306 	mla	r3, r2, r6, r3
 800c768:	b289      	uxth	r1, r1
 800c76a:	3001      	adds	r0, #1
 800c76c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c770:	4285      	cmp	r5, r0
 800c772:	f84c 1b04 	str.w	r1, [ip], #4
 800c776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c77a:	dcec      	bgt.n	800c756 <__multadd+0x12>
 800c77c:	b30e      	cbz	r6, 800c7c2 <__multadd+0x7e>
 800c77e:	68a3      	ldr	r3, [r4, #8]
 800c780:	42ab      	cmp	r3, r5
 800c782:	dc19      	bgt.n	800c7b8 <__multadd+0x74>
 800c784:	6861      	ldr	r1, [r4, #4]
 800c786:	4638      	mov	r0, r7
 800c788:	3101      	adds	r1, #1
 800c78a:	f7ff ff79 	bl	800c680 <_Balloc>
 800c78e:	4680      	mov	r8, r0
 800c790:	b928      	cbnz	r0, 800c79e <__multadd+0x5a>
 800c792:	4602      	mov	r2, r0
 800c794:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c8 <__multadd+0x84>)
 800c796:	480d      	ldr	r0, [pc, #52]	@ (800c7cc <__multadd+0x88>)
 800c798:	21ba      	movs	r1, #186	@ 0xba
 800c79a:	f000 fd19 	bl	800d1d0 <__assert_func>
 800c79e:	6922      	ldr	r2, [r4, #16]
 800c7a0:	3202      	adds	r2, #2
 800c7a2:	f104 010c 	add.w	r1, r4, #12
 800c7a6:	0092      	lsls	r2, r2, #2
 800c7a8:	300c      	adds	r0, #12
 800c7aa:	f7ff f800 	bl	800b7ae <memcpy>
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	f7ff ffa5 	bl	800c700 <_Bfree>
 800c7b6:	4644      	mov	r4, r8
 800c7b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7bc:	3501      	adds	r5, #1
 800c7be:	615e      	str	r6, [r3, #20]
 800c7c0:	6125      	str	r5, [r4, #16]
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c8:	0800e258 	.word	0x0800e258
 800c7cc:	0800e269 	.word	0x0800e269

0800c7d0 <__hi0bits>:
 800c7d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	bf36      	itet	cc
 800c7d8:	0403      	lslcc	r3, r0, #16
 800c7da:	2000      	movcs	r0, #0
 800c7dc:	2010      	movcc	r0, #16
 800c7de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7e2:	bf3c      	itt	cc
 800c7e4:	021b      	lslcc	r3, r3, #8
 800c7e6:	3008      	addcc	r0, #8
 800c7e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7ec:	bf3c      	itt	cc
 800c7ee:	011b      	lslcc	r3, r3, #4
 800c7f0:	3004      	addcc	r0, #4
 800c7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7f6:	bf3c      	itt	cc
 800c7f8:	009b      	lslcc	r3, r3, #2
 800c7fa:	3002      	addcc	r0, #2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	db05      	blt.n	800c80c <__hi0bits+0x3c>
 800c800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c804:	f100 0001 	add.w	r0, r0, #1
 800c808:	bf08      	it	eq
 800c80a:	2020      	moveq	r0, #32
 800c80c:	4770      	bx	lr

0800c80e <__lo0bits>:
 800c80e:	6803      	ldr	r3, [r0, #0]
 800c810:	4602      	mov	r2, r0
 800c812:	f013 0007 	ands.w	r0, r3, #7
 800c816:	d00b      	beq.n	800c830 <__lo0bits+0x22>
 800c818:	07d9      	lsls	r1, r3, #31
 800c81a:	d421      	bmi.n	800c860 <__lo0bits+0x52>
 800c81c:	0798      	lsls	r0, r3, #30
 800c81e:	bf49      	itett	mi
 800c820:	085b      	lsrmi	r3, r3, #1
 800c822:	089b      	lsrpl	r3, r3, #2
 800c824:	2001      	movmi	r0, #1
 800c826:	6013      	strmi	r3, [r2, #0]
 800c828:	bf5c      	itt	pl
 800c82a:	6013      	strpl	r3, [r2, #0]
 800c82c:	2002      	movpl	r0, #2
 800c82e:	4770      	bx	lr
 800c830:	b299      	uxth	r1, r3
 800c832:	b909      	cbnz	r1, 800c838 <__lo0bits+0x2a>
 800c834:	0c1b      	lsrs	r3, r3, #16
 800c836:	2010      	movs	r0, #16
 800c838:	b2d9      	uxtb	r1, r3
 800c83a:	b909      	cbnz	r1, 800c840 <__lo0bits+0x32>
 800c83c:	3008      	adds	r0, #8
 800c83e:	0a1b      	lsrs	r3, r3, #8
 800c840:	0719      	lsls	r1, r3, #28
 800c842:	bf04      	itt	eq
 800c844:	091b      	lsreq	r3, r3, #4
 800c846:	3004      	addeq	r0, #4
 800c848:	0799      	lsls	r1, r3, #30
 800c84a:	bf04      	itt	eq
 800c84c:	089b      	lsreq	r3, r3, #2
 800c84e:	3002      	addeq	r0, #2
 800c850:	07d9      	lsls	r1, r3, #31
 800c852:	d403      	bmi.n	800c85c <__lo0bits+0x4e>
 800c854:	085b      	lsrs	r3, r3, #1
 800c856:	f100 0001 	add.w	r0, r0, #1
 800c85a:	d003      	beq.n	800c864 <__lo0bits+0x56>
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	4770      	bx	lr
 800c860:	2000      	movs	r0, #0
 800c862:	4770      	bx	lr
 800c864:	2020      	movs	r0, #32
 800c866:	4770      	bx	lr

0800c868 <__i2b>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	460c      	mov	r4, r1
 800c86c:	2101      	movs	r1, #1
 800c86e:	f7ff ff07 	bl	800c680 <_Balloc>
 800c872:	4602      	mov	r2, r0
 800c874:	b928      	cbnz	r0, 800c882 <__i2b+0x1a>
 800c876:	4b05      	ldr	r3, [pc, #20]	@ (800c88c <__i2b+0x24>)
 800c878:	4805      	ldr	r0, [pc, #20]	@ (800c890 <__i2b+0x28>)
 800c87a:	f240 1145 	movw	r1, #325	@ 0x145
 800c87e:	f000 fca7 	bl	800d1d0 <__assert_func>
 800c882:	2301      	movs	r3, #1
 800c884:	6144      	str	r4, [r0, #20]
 800c886:	6103      	str	r3, [r0, #16]
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	bf00      	nop
 800c88c:	0800e258 	.word	0x0800e258
 800c890:	0800e269 	.word	0x0800e269

0800c894 <__multiply>:
 800c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	4617      	mov	r7, r2
 800c89a:	690a      	ldr	r2, [r1, #16]
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	bfa8      	it	ge
 800c8a2:	463b      	movge	r3, r7
 800c8a4:	4689      	mov	r9, r1
 800c8a6:	bfa4      	itt	ge
 800c8a8:	460f      	movge	r7, r1
 800c8aa:	4699      	movge	r9, r3
 800c8ac:	693d      	ldr	r5, [r7, #16]
 800c8ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	eb05 060a 	add.w	r6, r5, sl
 800c8ba:	42b3      	cmp	r3, r6
 800c8bc:	b085      	sub	sp, #20
 800c8be:	bfb8      	it	lt
 800c8c0:	3101      	addlt	r1, #1
 800c8c2:	f7ff fedd 	bl	800c680 <_Balloc>
 800c8c6:	b930      	cbnz	r0, 800c8d6 <__multiply+0x42>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	4b41      	ldr	r3, [pc, #260]	@ (800c9d0 <__multiply+0x13c>)
 800c8cc:	4841      	ldr	r0, [pc, #260]	@ (800c9d4 <__multiply+0x140>)
 800c8ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c8d2:	f000 fc7d 	bl	800d1d0 <__assert_func>
 800c8d6:	f100 0414 	add.w	r4, r0, #20
 800c8da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c8de:	4623      	mov	r3, r4
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4573      	cmp	r3, lr
 800c8e4:	d320      	bcc.n	800c928 <__multiply+0x94>
 800c8e6:	f107 0814 	add.w	r8, r7, #20
 800c8ea:	f109 0114 	add.w	r1, r9, #20
 800c8ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c8f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c8f6:	9302      	str	r3, [sp, #8]
 800c8f8:	1beb      	subs	r3, r5, r7
 800c8fa:	3b15      	subs	r3, #21
 800c8fc:	f023 0303 	bic.w	r3, r3, #3
 800c900:	3304      	adds	r3, #4
 800c902:	3715      	adds	r7, #21
 800c904:	42bd      	cmp	r5, r7
 800c906:	bf38      	it	cc
 800c908:	2304      	movcc	r3, #4
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	9b02      	ldr	r3, [sp, #8]
 800c90e:	9103      	str	r1, [sp, #12]
 800c910:	428b      	cmp	r3, r1
 800c912:	d80c      	bhi.n	800c92e <__multiply+0x9a>
 800c914:	2e00      	cmp	r6, #0
 800c916:	dd03      	ble.n	800c920 <__multiply+0x8c>
 800c918:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d055      	beq.n	800c9cc <__multiply+0x138>
 800c920:	6106      	str	r6, [r0, #16]
 800c922:	b005      	add	sp, #20
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	f843 2b04 	str.w	r2, [r3], #4
 800c92c:	e7d9      	b.n	800c8e2 <__multiply+0x4e>
 800c92e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c932:	f1ba 0f00 	cmp.w	sl, #0
 800c936:	d01f      	beq.n	800c978 <__multiply+0xe4>
 800c938:	46c4      	mov	ip, r8
 800c93a:	46a1      	mov	r9, r4
 800c93c:	2700      	movs	r7, #0
 800c93e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c942:	f8d9 3000 	ldr.w	r3, [r9]
 800c946:	fa1f fb82 	uxth.w	fp, r2
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c950:	443b      	add	r3, r7
 800c952:	f8d9 7000 	ldr.w	r7, [r9]
 800c956:	0c12      	lsrs	r2, r2, #16
 800c958:	0c3f      	lsrs	r7, r7, #16
 800c95a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c95e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c962:	b29b      	uxth	r3, r3
 800c964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c968:	4565      	cmp	r5, ip
 800c96a:	f849 3b04 	str.w	r3, [r9], #4
 800c96e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c972:	d8e4      	bhi.n	800c93e <__multiply+0xaa>
 800c974:	9b01      	ldr	r3, [sp, #4]
 800c976:	50e7      	str	r7, [r4, r3]
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c97e:	3104      	adds	r1, #4
 800c980:	f1b9 0f00 	cmp.w	r9, #0
 800c984:	d020      	beq.n	800c9c8 <__multiply+0x134>
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	4647      	mov	r7, r8
 800c98a:	46a4      	mov	ip, r4
 800c98c:	f04f 0a00 	mov.w	sl, #0
 800c990:	f8b7 b000 	ldrh.w	fp, [r7]
 800c994:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c998:	fb09 220b 	mla	r2, r9, fp, r2
 800c99c:	4452      	add	r2, sl
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9a4:	f84c 3b04 	str.w	r3, [ip], #4
 800c9a8:	f857 3b04 	ldr.w	r3, [r7], #4
 800c9ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9b0:	f8bc 3000 	ldrh.w	r3, [ip]
 800c9b4:	fb09 330a 	mla	r3, r9, sl, r3
 800c9b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c9bc:	42bd      	cmp	r5, r7
 800c9be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9c2:	d8e5      	bhi.n	800c990 <__multiply+0xfc>
 800c9c4:	9a01      	ldr	r2, [sp, #4]
 800c9c6:	50a3      	str	r3, [r4, r2]
 800c9c8:	3404      	adds	r4, #4
 800c9ca:	e79f      	b.n	800c90c <__multiply+0x78>
 800c9cc:	3e01      	subs	r6, #1
 800c9ce:	e7a1      	b.n	800c914 <__multiply+0x80>
 800c9d0:	0800e258 	.word	0x0800e258
 800c9d4:	0800e269 	.word	0x0800e269

0800c9d8 <__pow5mult>:
 800c9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9dc:	4615      	mov	r5, r2
 800c9de:	f012 0203 	ands.w	r2, r2, #3
 800c9e2:	4607      	mov	r7, r0
 800c9e4:	460e      	mov	r6, r1
 800c9e6:	d007      	beq.n	800c9f8 <__pow5mult+0x20>
 800c9e8:	4c25      	ldr	r4, [pc, #148]	@ (800ca80 <__pow5mult+0xa8>)
 800c9ea:	3a01      	subs	r2, #1
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9f2:	f7ff fea7 	bl	800c744 <__multadd>
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	10ad      	asrs	r5, r5, #2
 800c9fa:	d03d      	beq.n	800ca78 <__pow5mult+0xa0>
 800c9fc:	69fc      	ldr	r4, [r7, #28]
 800c9fe:	b97c      	cbnz	r4, 800ca20 <__pow5mult+0x48>
 800ca00:	2010      	movs	r0, #16
 800ca02:	f7ff fd87 	bl	800c514 <malloc>
 800ca06:	4602      	mov	r2, r0
 800ca08:	61f8      	str	r0, [r7, #28]
 800ca0a:	b928      	cbnz	r0, 800ca18 <__pow5mult+0x40>
 800ca0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ca84 <__pow5mult+0xac>)
 800ca0e:	481e      	ldr	r0, [pc, #120]	@ (800ca88 <__pow5mult+0xb0>)
 800ca10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ca14:	f000 fbdc 	bl	800d1d0 <__assert_func>
 800ca18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca1c:	6004      	str	r4, [r0, #0]
 800ca1e:	60c4      	str	r4, [r0, #12]
 800ca20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ca24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca28:	b94c      	cbnz	r4, 800ca3e <__pow5mult+0x66>
 800ca2a:	f240 2171 	movw	r1, #625	@ 0x271
 800ca2e:	4638      	mov	r0, r7
 800ca30:	f7ff ff1a 	bl	800c868 <__i2b>
 800ca34:	2300      	movs	r3, #0
 800ca36:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	6003      	str	r3, [r0, #0]
 800ca3e:	f04f 0900 	mov.w	r9, #0
 800ca42:	07eb      	lsls	r3, r5, #31
 800ca44:	d50a      	bpl.n	800ca5c <__pow5mult+0x84>
 800ca46:	4631      	mov	r1, r6
 800ca48:	4622      	mov	r2, r4
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	f7ff ff22 	bl	800c894 <__multiply>
 800ca50:	4631      	mov	r1, r6
 800ca52:	4680      	mov	r8, r0
 800ca54:	4638      	mov	r0, r7
 800ca56:	f7ff fe53 	bl	800c700 <_Bfree>
 800ca5a:	4646      	mov	r6, r8
 800ca5c:	106d      	asrs	r5, r5, #1
 800ca5e:	d00b      	beq.n	800ca78 <__pow5mult+0xa0>
 800ca60:	6820      	ldr	r0, [r4, #0]
 800ca62:	b938      	cbnz	r0, 800ca74 <__pow5mult+0x9c>
 800ca64:	4622      	mov	r2, r4
 800ca66:	4621      	mov	r1, r4
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f7ff ff13 	bl	800c894 <__multiply>
 800ca6e:	6020      	str	r0, [r4, #0]
 800ca70:	f8c0 9000 	str.w	r9, [r0]
 800ca74:	4604      	mov	r4, r0
 800ca76:	e7e4      	b.n	800ca42 <__pow5mult+0x6a>
 800ca78:	4630      	mov	r0, r6
 800ca7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca7e:	bf00      	nop
 800ca80:	0800e31c 	.word	0x0800e31c
 800ca84:	0800e1e9 	.word	0x0800e1e9
 800ca88:	0800e269 	.word	0x0800e269

0800ca8c <__lshift>:
 800ca8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca90:	460c      	mov	r4, r1
 800ca92:	6849      	ldr	r1, [r1, #4]
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca9a:	68a3      	ldr	r3, [r4, #8]
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	4691      	mov	r9, r2
 800caa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800caa4:	f108 0601 	add.w	r6, r8, #1
 800caa8:	42b3      	cmp	r3, r6
 800caaa:	db0b      	blt.n	800cac4 <__lshift+0x38>
 800caac:	4638      	mov	r0, r7
 800caae:	f7ff fde7 	bl	800c680 <_Balloc>
 800cab2:	4605      	mov	r5, r0
 800cab4:	b948      	cbnz	r0, 800caca <__lshift+0x3e>
 800cab6:	4602      	mov	r2, r0
 800cab8:	4b28      	ldr	r3, [pc, #160]	@ (800cb5c <__lshift+0xd0>)
 800caba:	4829      	ldr	r0, [pc, #164]	@ (800cb60 <__lshift+0xd4>)
 800cabc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cac0:	f000 fb86 	bl	800d1d0 <__assert_func>
 800cac4:	3101      	adds	r1, #1
 800cac6:	005b      	lsls	r3, r3, #1
 800cac8:	e7ee      	b.n	800caa8 <__lshift+0x1c>
 800caca:	2300      	movs	r3, #0
 800cacc:	f100 0114 	add.w	r1, r0, #20
 800cad0:	f100 0210 	add.w	r2, r0, #16
 800cad4:	4618      	mov	r0, r3
 800cad6:	4553      	cmp	r3, sl
 800cad8:	db33      	blt.n	800cb42 <__lshift+0xb6>
 800cada:	6920      	ldr	r0, [r4, #16]
 800cadc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cae0:	f104 0314 	add.w	r3, r4, #20
 800cae4:	f019 091f 	ands.w	r9, r9, #31
 800cae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800caec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800caf0:	d02b      	beq.n	800cb4a <__lshift+0xbe>
 800caf2:	f1c9 0e20 	rsb	lr, r9, #32
 800caf6:	468a      	mov	sl, r1
 800caf8:	2200      	movs	r2, #0
 800cafa:	6818      	ldr	r0, [r3, #0]
 800cafc:	fa00 f009 	lsl.w	r0, r0, r9
 800cb00:	4310      	orrs	r0, r2
 800cb02:	f84a 0b04 	str.w	r0, [sl], #4
 800cb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0a:	459c      	cmp	ip, r3
 800cb0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb10:	d8f3      	bhi.n	800cafa <__lshift+0x6e>
 800cb12:	ebac 0304 	sub.w	r3, ip, r4
 800cb16:	3b15      	subs	r3, #21
 800cb18:	f023 0303 	bic.w	r3, r3, #3
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	f104 0015 	add.w	r0, r4, #21
 800cb22:	4560      	cmp	r0, ip
 800cb24:	bf88      	it	hi
 800cb26:	2304      	movhi	r3, #4
 800cb28:	50ca      	str	r2, [r1, r3]
 800cb2a:	b10a      	cbz	r2, 800cb30 <__lshift+0xa4>
 800cb2c:	f108 0602 	add.w	r6, r8, #2
 800cb30:	3e01      	subs	r6, #1
 800cb32:	4638      	mov	r0, r7
 800cb34:	612e      	str	r6, [r5, #16]
 800cb36:	4621      	mov	r1, r4
 800cb38:	f7ff fde2 	bl	800c700 <_Bfree>
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb42:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb46:	3301      	adds	r3, #1
 800cb48:	e7c5      	b.n	800cad6 <__lshift+0x4a>
 800cb4a:	3904      	subs	r1, #4
 800cb4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb50:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb54:	459c      	cmp	ip, r3
 800cb56:	d8f9      	bhi.n	800cb4c <__lshift+0xc0>
 800cb58:	e7ea      	b.n	800cb30 <__lshift+0xa4>
 800cb5a:	bf00      	nop
 800cb5c:	0800e258 	.word	0x0800e258
 800cb60:	0800e269 	.word	0x0800e269

0800cb64 <__mcmp>:
 800cb64:	690a      	ldr	r2, [r1, #16]
 800cb66:	4603      	mov	r3, r0
 800cb68:	6900      	ldr	r0, [r0, #16]
 800cb6a:	1a80      	subs	r0, r0, r2
 800cb6c:	b530      	push	{r4, r5, lr}
 800cb6e:	d10e      	bne.n	800cb8e <__mcmp+0x2a>
 800cb70:	3314      	adds	r3, #20
 800cb72:	3114      	adds	r1, #20
 800cb74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb84:	4295      	cmp	r5, r2
 800cb86:	d003      	beq.n	800cb90 <__mcmp+0x2c>
 800cb88:	d205      	bcs.n	800cb96 <__mcmp+0x32>
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	bd30      	pop	{r4, r5, pc}
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	d3f3      	bcc.n	800cb7c <__mcmp+0x18>
 800cb94:	e7fb      	b.n	800cb8e <__mcmp+0x2a>
 800cb96:	2001      	movs	r0, #1
 800cb98:	e7f9      	b.n	800cb8e <__mcmp+0x2a>
	...

0800cb9c <__mdiff>:
 800cb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	4689      	mov	r9, r1
 800cba2:	4606      	mov	r6, r0
 800cba4:	4611      	mov	r1, r2
 800cba6:	4648      	mov	r0, r9
 800cba8:	4614      	mov	r4, r2
 800cbaa:	f7ff ffdb 	bl	800cb64 <__mcmp>
 800cbae:	1e05      	subs	r5, r0, #0
 800cbb0:	d112      	bne.n	800cbd8 <__mdiff+0x3c>
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f7ff fd63 	bl	800c680 <_Balloc>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	b928      	cbnz	r0, 800cbca <__mdiff+0x2e>
 800cbbe:	4b3f      	ldr	r3, [pc, #252]	@ (800ccbc <__mdiff+0x120>)
 800cbc0:	f240 2137 	movw	r1, #567	@ 0x237
 800cbc4:	483e      	ldr	r0, [pc, #248]	@ (800ccc0 <__mdiff+0x124>)
 800cbc6:	f000 fb03 	bl	800d1d0 <__assert_func>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	b003      	add	sp, #12
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	bfbc      	itt	lt
 800cbda:	464b      	movlt	r3, r9
 800cbdc:	46a1      	movlt	r9, r4
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbe4:	bfba      	itte	lt
 800cbe6:	461c      	movlt	r4, r3
 800cbe8:	2501      	movlt	r5, #1
 800cbea:	2500      	movge	r5, #0
 800cbec:	f7ff fd48 	bl	800c680 <_Balloc>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	b918      	cbnz	r0, 800cbfc <__mdiff+0x60>
 800cbf4:	4b31      	ldr	r3, [pc, #196]	@ (800ccbc <__mdiff+0x120>)
 800cbf6:	f240 2145 	movw	r1, #581	@ 0x245
 800cbfa:	e7e3      	b.n	800cbc4 <__mdiff+0x28>
 800cbfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc00:	6926      	ldr	r6, [r4, #16]
 800cc02:	60c5      	str	r5, [r0, #12]
 800cc04:	f109 0310 	add.w	r3, r9, #16
 800cc08:	f109 0514 	add.w	r5, r9, #20
 800cc0c:	f104 0e14 	add.w	lr, r4, #20
 800cc10:	f100 0b14 	add.w	fp, r0, #20
 800cc14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	46d9      	mov	r9, fp
 800cc20:	f04f 0c00 	mov.w	ip, #0
 800cc24:	9b01      	ldr	r3, [sp, #4]
 800cc26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	fa1f f38a 	uxth.w	r3, sl
 800cc34:	4619      	mov	r1, r3
 800cc36:	b283      	uxth	r3, r0
 800cc38:	1acb      	subs	r3, r1, r3
 800cc3a:	0c00      	lsrs	r0, r0, #16
 800cc3c:	4463      	add	r3, ip
 800cc3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc4c:	4576      	cmp	r6, lr
 800cc4e:	f849 3b04 	str.w	r3, [r9], #4
 800cc52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc56:	d8e5      	bhi.n	800cc24 <__mdiff+0x88>
 800cc58:	1b33      	subs	r3, r6, r4
 800cc5a:	3b15      	subs	r3, #21
 800cc5c:	f023 0303 	bic.w	r3, r3, #3
 800cc60:	3415      	adds	r4, #21
 800cc62:	3304      	adds	r3, #4
 800cc64:	42a6      	cmp	r6, r4
 800cc66:	bf38      	it	cc
 800cc68:	2304      	movcc	r3, #4
 800cc6a:	441d      	add	r5, r3
 800cc6c:	445b      	add	r3, fp
 800cc6e:	461e      	mov	r6, r3
 800cc70:	462c      	mov	r4, r5
 800cc72:	4544      	cmp	r4, r8
 800cc74:	d30e      	bcc.n	800cc94 <__mdiff+0xf8>
 800cc76:	f108 0103 	add.w	r1, r8, #3
 800cc7a:	1b49      	subs	r1, r1, r5
 800cc7c:	f021 0103 	bic.w	r1, r1, #3
 800cc80:	3d03      	subs	r5, #3
 800cc82:	45a8      	cmp	r8, r5
 800cc84:	bf38      	it	cc
 800cc86:	2100      	movcc	r1, #0
 800cc88:	440b      	add	r3, r1
 800cc8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc8e:	b191      	cbz	r1, 800ccb6 <__mdiff+0x11a>
 800cc90:	6117      	str	r7, [r2, #16]
 800cc92:	e79d      	b.n	800cbd0 <__mdiff+0x34>
 800cc94:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc98:	46e6      	mov	lr, ip
 800cc9a:	0c08      	lsrs	r0, r1, #16
 800cc9c:	fa1c fc81 	uxtah	ip, ip, r1
 800cca0:	4471      	add	r1, lr
 800cca2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cca6:	b289      	uxth	r1, r1
 800cca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ccac:	f846 1b04 	str.w	r1, [r6], #4
 800ccb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccb4:	e7dd      	b.n	800cc72 <__mdiff+0xd6>
 800ccb6:	3f01      	subs	r7, #1
 800ccb8:	e7e7      	b.n	800cc8a <__mdiff+0xee>
 800ccba:	bf00      	nop
 800ccbc:	0800e258 	.word	0x0800e258
 800ccc0:	0800e269 	.word	0x0800e269

0800ccc4 <__d2b>:
 800ccc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccc8:	460f      	mov	r7, r1
 800ccca:	2101      	movs	r1, #1
 800cccc:	ec59 8b10 	vmov	r8, r9, d0
 800ccd0:	4616      	mov	r6, r2
 800ccd2:	f7ff fcd5 	bl	800c680 <_Balloc>
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	b930      	cbnz	r0, 800cce8 <__d2b+0x24>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	4b23      	ldr	r3, [pc, #140]	@ (800cd6c <__d2b+0xa8>)
 800ccde:	4824      	ldr	r0, [pc, #144]	@ (800cd70 <__d2b+0xac>)
 800cce0:	f240 310f 	movw	r1, #783	@ 0x30f
 800cce4:	f000 fa74 	bl	800d1d0 <__assert_func>
 800cce8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ccec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccf0:	b10d      	cbz	r5, 800ccf6 <__d2b+0x32>
 800ccf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	f1b8 0300 	subs.w	r3, r8, #0
 800ccfc:	d023      	beq.n	800cd46 <__d2b+0x82>
 800ccfe:	4668      	mov	r0, sp
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	f7ff fd84 	bl	800c80e <__lo0bits>
 800cd06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd0a:	b1d0      	cbz	r0, 800cd42 <__d2b+0x7e>
 800cd0c:	f1c0 0320 	rsb	r3, r0, #32
 800cd10:	fa02 f303 	lsl.w	r3, r2, r3
 800cd14:	430b      	orrs	r3, r1
 800cd16:	40c2      	lsrs	r2, r0
 800cd18:	6163      	str	r3, [r4, #20]
 800cd1a:	9201      	str	r2, [sp, #4]
 800cd1c:	9b01      	ldr	r3, [sp, #4]
 800cd1e:	61a3      	str	r3, [r4, #24]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	bf0c      	ite	eq
 800cd24:	2201      	moveq	r2, #1
 800cd26:	2202      	movne	r2, #2
 800cd28:	6122      	str	r2, [r4, #16]
 800cd2a:	b1a5      	cbz	r5, 800cd56 <__d2b+0x92>
 800cd2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd30:	4405      	add	r5, r0
 800cd32:	603d      	str	r5, [r7, #0]
 800cd34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd38:	6030      	str	r0, [r6, #0]
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	b003      	add	sp, #12
 800cd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd42:	6161      	str	r1, [r4, #20]
 800cd44:	e7ea      	b.n	800cd1c <__d2b+0x58>
 800cd46:	a801      	add	r0, sp, #4
 800cd48:	f7ff fd61 	bl	800c80e <__lo0bits>
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	6163      	str	r3, [r4, #20]
 800cd50:	3020      	adds	r0, #32
 800cd52:	2201      	movs	r2, #1
 800cd54:	e7e8      	b.n	800cd28 <__d2b+0x64>
 800cd56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd5e:	6038      	str	r0, [r7, #0]
 800cd60:	6918      	ldr	r0, [r3, #16]
 800cd62:	f7ff fd35 	bl	800c7d0 <__hi0bits>
 800cd66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd6a:	e7e5      	b.n	800cd38 <__d2b+0x74>
 800cd6c:	0800e258 	.word	0x0800e258
 800cd70:	0800e269 	.word	0x0800e269

0800cd74 <__ssputs_r>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	688e      	ldr	r6, [r1, #8]
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	42be      	cmp	r6, r7
 800cd7e:	680b      	ldr	r3, [r1, #0]
 800cd80:	4682      	mov	sl, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	4690      	mov	r8, r2
 800cd86:	d82d      	bhi.n	800cde4 <__ssputs_r+0x70>
 800cd88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd90:	d026      	beq.n	800cde0 <__ssputs_r+0x6c>
 800cd92:	6965      	ldr	r5, [r4, #20]
 800cd94:	6909      	ldr	r1, [r1, #16]
 800cd96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd9a:	eba3 0901 	sub.w	r9, r3, r1
 800cd9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cda2:	1c7b      	adds	r3, r7, #1
 800cda4:	444b      	add	r3, r9
 800cda6:	106d      	asrs	r5, r5, #1
 800cda8:	429d      	cmp	r5, r3
 800cdaa:	bf38      	it	cc
 800cdac:	461d      	movcc	r5, r3
 800cdae:	0553      	lsls	r3, r2, #21
 800cdb0:	d527      	bpl.n	800ce02 <__ssputs_r+0x8e>
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	f7ff fbd8 	bl	800c568 <_malloc_r>
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b360      	cbz	r0, 800ce16 <__ssputs_r+0xa2>
 800cdbc:	6921      	ldr	r1, [r4, #16]
 800cdbe:	464a      	mov	r2, r9
 800cdc0:	f7fe fcf5 	bl	800b7ae <memcpy>
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	6126      	str	r6, [r4, #16]
 800cdd2:	6165      	str	r5, [r4, #20]
 800cdd4:	444e      	add	r6, r9
 800cdd6:	eba5 0509 	sub.w	r5, r5, r9
 800cdda:	6026      	str	r6, [r4, #0]
 800cddc:	60a5      	str	r5, [r4, #8]
 800cdde:	463e      	mov	r6, r7
 800cde0:	42be      	cmp	r6, r7
 800cde2:	d900      	bls.n	800cde6 <__ssputs_r+0x72>
 800cde4:	463e      	mov	r6, r7
 800cde6:	6820      	ldr	r0, [r4, #0]
 800cde8:	4632      	mov	r2, r6
 800cdea:	4641      	mov	r1, r8
 800cdec:	f000 f9c6 	bl	800d17c <memmove>
 800cdf0:	68a3      	ldr	r3, [r4, #8]
 800cdf2:	1b9b      	subs	r3, r3, r6
 800cdf4:	60a3      	str	r3, [r4, #8]
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	4433      	add	r3, r6
 800cdfa:	6023      	str	r3, [r4, #0]
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce02:	462a      	mov	r2, r5
 800ce04:	f000 fa28 	bl	800d258 <_realloc_r>
 800ce08:	4606      	mov	r6, r0
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d1e0      	bne.n	800cdd0 <__ssputs_r+0x5c>
 800ce0e:	6921      	ldr	r1, [r4, #16]
 800ce10:	4650      	mov	r0, sl
 800ce12:	f7ff fb35 	bl	800c480 <_free_r>
 800ce16:	230c      	movs	r3, #12
 800ce18:	f8ca 3000 	str.w	r3, [sl]
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce22:	81a3      	strh	r3, [r4, #12]
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	e7e9      	b.n	800cdfe <__ssputs_r+0x8a>
	...

0800ce2c <_svfiprintf_r>:
 800ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce30:	4698      	mov	r8, r3
 800ce32:	898b      	ldrh	r3, [r1, #12]
 800ce34:	061b      	lsls	r3, r3, #24
 800ce36:	b09d      	sub	sp, #116	@ 0x74
 800ce38:	4607      	mov	r7, r0
 800ce3a:	460d      	mov	r5, r1
 800ce3c:	4614      	mov	r4, r2
 800ce3e:	d510      	bpl.n	800ce62 <_svfiprintf_r+0x36>
 800ce40:	690b      	ldr	r3, [r1, #16]
 800ce42:	b973      	cbnz	r3, 800ce62 <_svfiprintf_r+0x36>
 800ce44:	2140      	movs	r1, #64	@ 0x40
 800ce46:	f7ff fb8f 	bl	800c568 <_malloc_r>
 800ce4a:	6028      	str	r0, [r5, #0]
 800ce4c:	6128      	str	r0, [r5, #16]
 800ce4e:	b930      	cbnz	r0, 800ce5e <_svfiprintf_r+0x32>
 800ce50:	230c      	movs	r3, #12
 800ce52:	603b      	str	r3, [r7, #0]
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	b01d      	add	sp, #116	@ 0x74
 800ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5e:	2340      	movs	r3, #64	@ 0x40
 800ce60:	616b      	str	r3, [r5, #20]
 800ce62:	2300      	movs	r3, #0
 800ce64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce66:	2320      	movs	r3, #32
 800ce68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce70:	2330      	movs	r3, #48	@ 0x30
 800ce72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d010 <_svfiprintf_r+0x1e4>
 800ce76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce7a:	f04f 0901 	mov.w	r9, #1
 800ce7e:	4623      	mov	r3, r4
 800ce80:	469a      	mov	sl, r3
 800ce82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce86:	b10a      	cbz	r2, 800ce8c <_svfiprintf_r+0x60>
 800ce88:	2a25      	cmp	r2, #37	@ 0x25
 800ce8a:	d1f9      	bne.n	800ce80 <_svfiprintf_r+0x54>
 800ce8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce90:	d00b      	beq.n	800ceaa <_svfiprintf_r+0x7e>
 800ce92:	465b      	mov	r3, fp
 800ce94:	4622      	mov	r2, r4
 800ce96:	4629      	mov	r1, r5
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7ff ff6b 	bl	800cd74 <__ssputs_r>
 800ce9e:	3001      	adds	r0, #1
 800cea0:	f000 80a7 	beq.w	800cff2 <_svfiprintf_r+0x1c6>
 800cea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cea6:	445a      	add	r2, fp
 800cea8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ceaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 809f 	beq.w	800cff2 <_svfiprintf_r+0x1c6>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cebe:	f10a 0a01 	add.w	sl, sl, #1
 800cec2:	9304      	str	r3, [sp, #16]
 800cec4:	9307      	str	r3, [sp, #28]
 800cec6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ceca:	931a      	str	r3, [sp, #104]	@ 0x68
 800cecc:	4654      	mov	r4, sl
 800cece:	2205      	movs	r2, #5
 800ced0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ced4:	484e      	ldr	r0, [pc, #312]	@ (800d010 <_svfiprintf_r+0x1e4>)
 800ced6:	f7f3 f99b 	bl	8000210 <memchr>
 800ceda:	9a04      	ldr	r2, [sp, #16]
 800cedc:	b9d8      	cbnz	r0, 800cf16 <_svfiprintf_r+0xea>
 800cede:	06d0      	lsls	r0, r2, #27
 800cee0:	bf44      	itt	mi
 800cee2:	2320      	movmi	r3, #32
 800cee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cee8:	0711      	lsls	r1, r2, #28
 800ceea:	bf44      	itt	mi
 800ceec:	232b      	movmi	r3, #43	@ 0x2b
 800ceee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cef2:	f89a 3000 	ldrb.w	r3, [sl]
 800cef6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cef8:	d015      	beq.n	800cf26 <_svfiprintf_r+0xfa>
 800cefa:	9a07      	ldr	r2, [sp, #28]
 800cefc:	4654      	mov	r4, sl
 800cefe:	2000      	movs	r0, #0
 800cf00:	f04f 0c0a 	mov.w	ip, #10
 800cf04:	4621      	mov	r1, r4
 800cf06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf0a:	3b30      	subs	r3, #48	@ 0x30
 800cf0c:	2b09      	cmp	r3, #9
 800cf0e:	d94b      	bls.n	800cfa8 <_svfiprintf_r+0x17c>
 800cf10:	b1b0      	cbz	r0, 800cf40 <_svfiprintf_r+0x114>
 800cf12:	9207      	str	r2, [sp, #28]
 800cf14:	e014      	b.n	800cf40 <_svfiprintf_r+0x114>
 800cf16:	eba0 0308 	sub.w	r3, r0, r8
 800cf1a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	9304      	str	r3, [sp, #16]
 800cf22:	46a2      	mov	sl, r4
 800cf24:	e7d2      	b.n	800cecc <_svfiprintf_r+0xa0>
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	1d19      	adds	r1, r3, #4
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	9103      	str	r1, [sp, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	bfbb      	ittet	lt
 800cf32:	425b      	neglt	r3, r3
 800cf34:	f042 0202 	orrlt.w	r2, r2, #2
 800cf38:	9307      	strge	r3, [sp, #28]
 800cf3a:	9307      	strlt	r3, [sp, #28]
 800cf3c:	bfb8      	it	lt
 800cf3e:	9204      	strlt	r2, [sp, #16]
 800cf40:	7823      	ldrb	r3, [r4, #0]
 800cf42:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf44:	d10a      	bne.n	800cf5c <_svfiprintf_r+0x130>
 800cf46:	7863      	ldrb	r3, [r4, #1]
 800cf48:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf4a:	d132      	bne.n	800cfb2 <_svfiprintf_r+0x186>
 800cf4c:	9b03      	ldr	r3, [sp, #12]
 800cf4e:	1d1a      	adds	r2, r3, #4
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	9203      	str	r2, [sp, #12]
 800cf54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf58:	3402      	adds	r4, #2
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d020 <_svfiprintf_r+0x1f4>
 800cf60:	7821      	ldrb	r1, [r4, #0]
 800cf62:	2203      	movs	r2, #3
 800cf64:	4650      	mov	r0, sl
 800cf66:	f7f3 f953 	bl	8000210 <memchr>
 800cf6a:	b138      	cbz	r0, 800cf7c <_svfiprintf_r+0x150>
 800cf6c:	9b04      	ldr	r3, [sp, #16]
 800cf6e:	eba0 000a 	sub.w	r0, r0, sl
 800cf72:	2240      	movs	r2, #64	@ 0x40
 800cf74:	4082      	lsls	r2, r0
 800cf76:	4313      	orrs	r3, r2
 800cf78:	3401      	adds	r4, #1
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf80:	4824      	ldr	r0, [pc, #144]	@ (800d014 <_svfiprintf_r+0x1e8>)
 800cf82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf86:	2206      	movs	r2, #6
 800cf88:	f7f3 f942 	bl	8000210 <memchr>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d036      	beq.n	800cffe <_svfiprintf_r+0x1d2>
 800cf90:	4b21      	ldr	r3, [pc, #132]	@ (800d018 <_svfiprintf_r+0x1ec>)
 800cf92:	bb1b      	cbnz	r3, 800cfdc <_svfiprintf_r+0x1b0>
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	3307      	adds	r3, #7
 800cf98:	f023 0307 	bic.w	r3, r3, #7
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa2:	4433      	add	r3, r6
 800cfa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfa6:	e76a      	b.n	800ce7e <_svfiprintf_r+0x52>
 800cfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfac:	460c      	mov	r4, r1
 800cfae:	2001      	movs	r0, #1
 800cfb0:	e7a8      	b.n	800cf04 <_svfiprintf_r+0xd8>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	9305      	str	r3, [sp, #20]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	f04f 0c0a 	mov.w	ip, #10
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfc4:	3a30      	subs	r2, #48	@ 0x30
 800cfc6:	2a09      	cmp	r2, #9
 800cfc8:	d903      	bls.n	800cfd2 <_svfiprintf_r+0x1a6>
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d0c6      	beq.n	800cf5c <_svfiprintf_r+0x130>
 800cfce:	9105      	str	r1, [sp, #20]
 800cfd0:	e7c4      	b.n	800cf5c <_svfiprintf_r+0x130>
 800cfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e7f0      	b.n	800cfbe <_svfiprintf_r+0x192>
 800cfdc:	ab03      	add	r3, sp, #12
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	462a      	mov	r2, r5
 800cfe2:	4b0e      	ldr	r3, [pc, #56]	@ (800d01c <_svfiprintf_r+0x1f0>)
 800cfe4:	a904      	add	r1, sp, #16
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	f7fd fe3c 	bl	800ac64 <_printf_float>
 800cfec:	1c42      	adds	r2, r0, #1
 800cfee:	4606      	mov	r6, r0
 800cff0:	d1d6      	bne.n	800cfa0 <_svfiprintf_r+0x174>
 800cff2:	89ab      	ldrh	r3, [r5, #12]
 800cff4:	065b      	lsls	r3, r3, #25
 800cff6:	f53f af2d 	bmi.w	800ce54 <_svfiprintf_r+0x28>
 800cffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cffc:	e72c      	b.n	800ce58 <_svfiprintf_r+0x2c>
 800cffe:	ab03      	add	r3, sp, #12
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	462a      	mov	r2, r5
 800d004:	4b05      	ldr	r3, [pc, #20]	@ (800d01c <_svfiprintf_r+0x1f0>)
 800d006:	a904      	add	r1, sp, #16
 800d008:	4638      	mov	r0, r7
 800d00a:	f7fe f8c3 	bl	800b194 <_printf_i>
 800d00e:	e7ed      	b.n	800cfec <_svfiprintf_r+0x1c0>
 800d010:	0800e2c2 	.word	0x0800e2c2
 800d014:	0800e2cc 	.word	0x0800e2cc
 800d018:	0800ac65 	.word	0x0800ac65
 800d01c:	0800cd75 	.word	0x0800cd75
 800d020:	0800e2c8 	.word	0x0800e2c8

0800d024 <__sflush_r>:
 800d024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02c:	0716      	lsls	r6, r2, #28
 800d02e:	4605      	mov	r5, r0
 800d030:	460c      	mov	r4, r1
 800d032:	d454      	bmi.n	800d0de <__sflush_r+0xba>
 800d034:	684b      	ldr	r3, [r1, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	dc02      	bgt.n	800d040 <__sflush_r+0x1c>
 800d03a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dd48      	ble.n	800d0d2 <__sflush_r+0xae>
 800d040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d042:	2e00      	cmp	r6, #0
 800d044:	d045      	beq.n	800d0d2 <__sflush_r+0xae>
 800d046:	2300      	movs	r3, #0
 800d048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d04c:	682f      	ldr	r7, [r5, #0]
 800d04e:	6a21      	ldr	r1, [r4, #32]
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	d030      	beq.n	800d0b6 <__sflush_r+0x92>
 800d054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	0759      	lsls	r1, r3, #29
 800d05a:	d505      	bpl.n	800d068 <__sflush_r+0x44>
 800d05c:	6863      	ldr	r3, [r4, #4]
 800d05e:	1ad2      	subs	r2, r2, r3
 800d060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d062:	b10b      	cbz	r3, 800d068 <__sflush_r+0x44>
 800d064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d066:	1ad2      	subs	r2, r2, r3
 800d068:	2300      	movs	r3, #0
 800d06a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d06c:	6a21      	ldr	r1, [r4, #32]
 800d06e:	4628      	mov	r0, r5
 800d070:	47b0      	blx	r6
 800d072:	1c43      	adds	r3, r0, #1
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	d106      	bne.n	800d086 <__sflush_r+0x62>
 800d078:	6829      	ldr	r1, [r5, #0]
 800d07a:	291d      	cmp	r1, #29
 800d07c:	d82b      	bhi.n	800d0d6 <__sflush_r+0xb2>
 800d07e:	4a2a      	ldr	r2, [pc, #168]	@ (800d128 <__sflush_r+0x104>)
 800d080:	40ca      	lsrs	r2, r1
 800d082:	07d6      	lsls	r6, r2, #31
 800d084:	d527      	bpl.n	800d0d6 <__sflush_r+0xb2>
 800d086:	2200      	movs	r2, #0
 800d088:	6062      	str	r2, [r4, #4]
 800d08a:	04d9      	lsls	r1, r3, #19
 800d08c:	6922      	ldr	r2, [r4, #16]
 800d08e:	6022      	str	r2, [r4, #0]
 800d090:	d504      	bpl.n	800d09c <__sflush_r+0x78>
 800d092:	1c42      	adds	r2, r0, #1
 800d094:	d101      	bne.n	800d09a <__sflush_r+0x76>
 800d096:	682b      	ldr	r3, [r5, #0]
 800d098:	b903      	cbnz	r3, 800d09c <__sflush_r+0x78>
 800d09a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d09e:	602f      	str	r7, [r5, #0]
 800d0a0:	b1b9      	cbz	r1, 800d0d2 <__sflush_r+0xae>
 800d0a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0a6:	4299      	cmp	r1, r3
 800d0a8:	d002      	beq.n	800d0b0 <__sflush_r+0x8c>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f7ff f9e8 	bl	800c480 <_free_r>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0b4:	e00d      	b.n	800d0d2 <__sflush_r+0xae>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b0      	blx	r6
 800d0bc:	4602      	mov	r2, r0
 800d0be:	1c50      	adds	r0, r2, #1
 800d0c0:	d1c9      	bne.n	800d056 <__sflush_r+0x32>
 800d0c2:	682b      	ldr	r3, [r5, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d0c6      	beq.n	800d056 <__sflush_r+0x32>
 800d0c8:	2b1d      	cmp	r3, #29
 800d0ca:	d001      	beq.n	800d0d0 <__sflush_r+0xac>
 800d0cc:	2b16      	cmp	r3, #22
 800d0ce:	d11e      	bne.n	800d10e <__sflush_r+0xea>
 800d0d0:	602f      	str	r7, [r5, #0]
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	e022      	b.n	800d11c <__sflush_r+0xf8>
 800d0d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0da:	b21b      	sxth	r3, r3
 800d0dc:	e01b      	b.n	800d116 <__sflush_r+0xf2>
 800d0de:	690f      	ldr	r7, [r1, #16]
 800d0e0:	2f00      	cmp	r7, #0
 800d0e2:	d0f6      	beq.n	800d0d2 <__sflush_r+0xae>
 800d0e4:	0793      	lsls	r3, r2, #30
 800d0e6:	680e      	ldr	r6, [r1, #0]
 800d0e8:	bf08      	it	eq
 800d0ea:	694b      	ldreq	r3, [r1, #20]
 800d0ec:	600f      	str	r7, [r1, #0]
 800d0ee:	bf18      	it	ne
 800d0f0:	2300      	movne	r3, #0
 800d0f2:	eba6 0807 	sub.w	r8, r6, r7
 800d0f6:	608b      	str	r3, [r1, #8]
 800d0f8:	f1b8 0f00 	cmp.w	r8, #0
 800d0fc:	dde9      	ble.n	800d0d2 <__sflush_r+0xae>
 800d0fe:	6a21      	ldr	r1, [r4, #32]
 800d100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d102:	4643      	mov	r3, r8
 800d104:	463a      	mov	r2, r7
 800d106:	4628      	mov	r0, r5
 800d108:	47b0      	blx	r6
 800d10a:	2800      	cmp	r0, #0
 800d10c:	dc08      	bgt.n	800d120 <__sflush_r+0xfc>
 800d10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	f04f 30ff 	mov.w	r0, #4294967295
 800d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d120:	4407      	add	r7, r0
 800d122:	eba8 0800 	sub.w	r8, r8, r0
 800d126:	e7e7      	b.n	800d0f8 <__sflush_r+0xd4>
 800d128:	20400001 	.word	0x20400001

0800d12c <_fflush_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	690b      	ldr	r3, [r1, #16]
 800d130:	4605      	mov	r5, r0
 800d132:	460c      	mov	r4, r1
 800d134:	b913      	cbnz	r3, 800d13c <_fflush_r+0x10>
 800d136:	2500      	movs	r5, #0
 800d138:	4628      	mov	r0, r5
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	b118      	cbz	r0, 800d146 <_fflush_r+0x1a>
 800d13e:	6a03      	ldr	r3, [r0, #32]
 800d140:	b90b      	cbnz	r3, 800d146 <_fflush_r+0x1a>
 800d142:	f7fe f9d1 	bl	800b4e8 <__sinit>
 800d146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d0f3      	beq.n	800d136 <_fflush_r+0xa>
 800d14e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d150:	07d0      	lsls	r0, r2, #31
 800d152:	d404      	bmi.n	800d15e <_fflush_r+0x32>
 800d154:	0599      	lsls	r1, r3, #22
 800d156:	d402      	bmi.n	800d15e <_fflush_r+0x32>
 800d158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d15a:	f7fe fb26 	bl	800b7aa <__retarget_lock_acquire_recursive>
 800d15e:	4628      	mov	r0, r5
 800d160:	4621      	mov	r1, r4
 800d162:	f7ff ff5f 	bl	800d024 <__sflush_r>
 800d166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d168:	07da      	lsls	r2, r3, #31
 800d16a:	4605      	mov	r5, r0
 800d16c:	d4e4      	bmi.n	800d138 <_fflush_r+0xc>
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	059b      	lsls	r3, r3, #22
 800d172:	d4e1      	bmi.n	800d138 <_fflush_r+0xc>
 800d174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d176:	f7fe fb19 	bl	800b7ac <__retarget_lock_release_recursive>
 800d17a:	e7dd      	b.n	800d138 <_fflush_r+0xc>

0800d17c <memmove>:
 800d17c:	4288      	cmp	r0, r1
 800d17e:	b510      	push	{r4, lr}
 800d180:	eb01 0402 	add.w	r4, r1, r2
 800d184:	d902      	bls.n	800d18c <memmove+0x10>
 800d186:	4284      	cmp	r4, r0
 800d188:	4623      	mov	r3, r4
 800d18a:	d807      	bhi.n	800d19c <memmove+0x20>
 800d18c:	1e43      	subs	r3, r0, #1
 800d18e:	42a1      	cmp	r1, r4
 800d190:	d008      	beq.n	800d1a4 <memmove+0x28>
 800d192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d19a:	e7f8      	b.n	800d18e <memmove+0x12>
 800d19c:	4402      	add	r2, r0
 800d19e:	4601      	mov	r1, r0
 800d1a0:	428a      	cmp	r2, r1
 800d1a2:	d100      	bne.n	800d1a6 <memmove+0x2a>
 800d1a4:	bd10      	pop	{r4, pc}
 800d1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1ae:	e7f7      	b.n	800d1a0 <memmove+0x24>

0800d1b0 <_sbrk_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4d06      	ldr	r5, [pc, #24]	@ (800d1cc <_sbrk_r+0x1c>)
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	4608      	mov	r0, r1
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	f7f7 fbe6 	bl	800498c <_sbrk>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_sbrk_r+0x1a>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_sbrk_r+0x1a>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	20000f18 	.word	0x20000f18

0800d1d0 <__assert_func>:
 800d1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1d2:	4614      	mov	r4, r2
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b09      	ldr	r3, [pc, #36]	@ (800d1fc <__assert_func+0x2c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4605      	mov	r5, r0
 800d1dc:	68d8      	ldr	r0, [r3, #12]
 800d1de:	b14c      	cbz	r4, 800d1f4 <__assert_func+0x24>
 800d1e0:	4b07      	ldr	r3, [pc, #28]	@ (800d200 <__assert_func+0x30>)
 800d1e2:	9100      	str	r1, [sp, #0]
 800d1e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1e8:	4906      	ldr	r1, [pc, #24]	@ (800d204 <__assert_func+0x34>)
 800d1ea:	462b      	mov	r3, r5
 800d1ec:	f000 f870 	bl	800d2d0 <fiprintf>
 800d1f0:	f000 f880 	bl	800d2f4 <abort>
 800d1f4:	4b04      	ldr	r3, [pc, #16]	@ (800d208 <__assert_func+0x38>)
 800d1f6:	461c      	mov	r4, r3
 800d1f8:	e7f3      	b.n	800d1e2 <__assert_func+0x12>
 800d1fa:	bf00      	nop
 800d1fc:	20000080 	.word	0x20000080
 800d200:	0800e2dd 	.word	0x0800e2dd
 800d204:	0800e2ea 	.word	0x0800e2ea
 800d208:	0800e318 	.word	0x0800e318

0800d20c <_calloc_r>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	fba1 5402 	umull	r5, r4, r1, r2
 800d212:	b934      	cbnz	r4, 800d222 <_calloc_r+0x16>
 800d214:	4629      	mov	r1, r5
 800d216:	f7ff f9a7 	bl	800c568 <_malloc_r>
 800d21a:	4606      	mov	r6, r0
 800d21c:	b928      	cbnz	r0, 800d22a <_calloc_r+0x1e>
 800d21e:	4630      	mov	r0, r6
 800d220:	bd70      	pop	{r4, r5, r6, pc}
 800d222:	220c      	movs	r2, #12
 800d224:	6002      	str	r2, [r0, #0]
 800d226:	2600      	movs	r6, #0
 800d228:	e7f9      	b.n	800d21e <_calloc_r+0x12>
 800d22a:	462a      	mov	r2, r5
 800d22c:	4621      	mov	r1, r4
 800d22e:	f7fe fa2c 	bl	800b68a <memset>
 800d232:	e7f4      	b.n	800d21e <_calloc_r+0x12>

0800d234 <__ascii_mbtowc>:
 800d234:	b082      	sub	sp, #8
 800d236:	b901      	cbnz	r1, 800d23a <__ascii_mbtowc+0x6>
 800d238:	a901      	add	r1, sp, #4
 800d23a:	b142      	cbz	r2, 800d24e <__ascii_mbtowc+0x1a>
 800d23c:	b14b      	cbz	r3, 800d252 <__ascii_mbtowc+0x1e>
 800d23e:	7813      	ldrb	r3, [r2, #0]
 800d240:	600b      	str	r3, [r1, #0]
 800d242:	7812      	ldrb	r2, [r2, #0]
 800d244:	1e10      	subs	r0, r2, #0
 800d246:	bf18      	it	ne
 800d248:	2001      	movne	r0, #1
 800d24a:	b002      	add	sp, #8
 800d24c:	4770      	bx	lr
 800d24e:	4610      	mov	r0, r2
 800d250:	e7fb      	b.n	800d24a <__ascii_mbtowc+0x16>
 800d252:	f06f 0001 	mvn.w	r0, #1
 800d256:	e7f8      	b.n	800d24a <__ascii_mbtowc+0x16>

0800d258 <_realloc_r>:
 800d258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d25c:	4607      	mov	r7, r0
 800d25e:	4614      	mov	r4, r2
 800d260:	460d      	mov	r5, r1
 800d262:	b921      	cbnz	r1, 800d26e <_realloc_r+0x16>
 800d264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d268:	4611      	mov	r1, r2
 800d26a:	f7ff b97d 	b.w	800c568 <_malloc_r>
 800d26e:	b92a      	cbnz	r2, 800d27c <_realloc_r+0x24>
 800d270:	f7ff f906 	bl	800c480 <_free_r>
 800d274:	4625      	mov	r5, r4
 800d276:	4628      	mov	r0, r5
 800d278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d27c:	f000 f841 	bl	800d302 <_malloc_usable_size_r>
 800d280:	4284      	cmp	r4, r0
 800d282:	4606      	mov	r6, r0
 800d284:	d802      	bhi.n	800d28c <_realloc_r+0x34>
 800d286:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d28a:	d8f4      	bhi.n	800d276 <_realloc_r+0x1e>
 800d28c:	4621      	mov	r1, r4
 800d28e:	4638      	mov	r0, r7
 800d290:	f7ff f96a 	bl	800c568 <_malloc_r>
 800d294:	4680      	mov	r8, r0
 800d296:	b908      	cbnz	r0, 800d29c <_realloc_r+0x44>
 800d298:	4645      	mov	r5, r8
 800d29a:	e7ec      	b.n	800d276 <_realloc_r+0x1e>
 800d29c:	42b4      	cmp	r4, r6
 800d29e:	4622      	mov	r2, r4
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	bf28      	it	cs
 800d2a4:	4632      	movcs	r2, r6
 800d2a6:	f7fe fa82 	bl	800b7ae <memcpy>
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f7ff f8e7 	bl	800c480 <_free_r>
 800d2b2:	e7f1      	b.n	800d298 <_realloc_r+0x40>

0800d2b4 <__ascii_wctomb>:
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	b141      	cbz	r1, 800d2cc <__ascii_wctomb+0x18>
 800d2ba:	2aff      	cmp	r2, #255	@ 0xff
 800d2bc:	d904      	bls.n	800d2c8 <__ascii_wctomb+0x14>
 800d2be:	228a      	movs	r2, #138	@ 0x8a
 800d2c0:	601a      	str	r2, [r3, #0]
 800d2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c6:	4770      	bx	lr
 800d2c8:	700a      	strb	r2, [r1, #0]
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	4770      	bx	lr
	...

0800d2d0 <fiprintf>:
 800d2d0:	b40e      	push	{r1, r2, r3}
 800d2d2:	b503      	push	{r0, r1, lr}
 800d2d4:	4601      	mov	r1, r0
 800d2d6:	ab03      	add	r3, sp, #12
 800d2d8:	4805      	ldr	r0, [pc, #20]	@ (800d2f0 <fiprintf+0x20>)
 800d2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2de:	6800      	ldr	r0, [r0, #0]
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	f000 f83f 	bl	800d364 <_vfiprintf_r>
 800d2e6:	b002      	add	sp, #8
 800d2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2ec:	b003      	add	sp, #12
 800d2ee:	4770      	bx	lr
 800d2f0:	20000080 	.word	0x20000080

0800d2f4 <abort>:
 800d2f4:	b508      	push	{r3, lr}
 800d2f6:	2006      	movs	r0, #6
 800d2f8:	f000 fa08 	bl	800d70c <raise>
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	f7f7 facd 	bl	800489c <_exit>

0800d302 <_malloc_usable_size_r>:
 800d302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d306:	1f18      	subs	r0, r3, #4
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bfbc      	itt	lt
 800d30c:	580b      	ldrlt	r3, [r1, r0]
 800d30e:	18c0      	addlt	r0, r0, r3
 800d310:	4770      	bx	lr

0800d312 <__sfputc_r>:
 800d312:	6893      	ldr	r3, [r2, #8]
 800d314:	3b01      	subs	r3, #1
 800d316:	2b00      	cmp	r3, #0
 800d318:	b410      	push	{r4}
 800d31a:	6093      	str	r3, [r2, #8]
 800d31c:	da08      	bge.n	800d330 <__sfputc_r+0x1e>
 800d31e:	6994      	ldr	r4, [r2, #24]
 800d320:	42a3      	cmp	r3, r4
 800d322:	db01      	blt.n	800d328 <__sfputc_r+0x16>
 800d324:	290a      	cmp	r1, #10
 800d326:	d103      	bne.n	800d330 <__sfputc_r+0x1e>
 800d328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d32c:	f000 b932 	b.w	800d594 <__swbuf_r>
 800d330:	6813      	ldr	r3, [r2, #0]
 800d332:	1c58      	adds	r0, r3, #1
 800d334:	6010      	str	r0, [r2, #0]
 800d336:	7019      	strb	r1, [r3, #0]
 800d338:	4608      	mov	r0, r1
 800d33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <__sfputs_r>:
 800d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d342:	4606      	mov	r6, r0
 800d344:	460f      	mov	r7, r1
 800d346:	4614      	mov	r4, r2
 800d348:	18d5      	adds	r5, r2, r3
 800d34a:	42ac      	cmp	r4, r5
 800d34c:	d101      	bne.n	800d352 <__sfputs_r+0x12>
 800d34e:	2000      	movs	r0, #0
 800d350:	e007      	b.n	800d362 <__sfputs_r+0x22>
 800d352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d356:	463a      	mov	r2, r7
 800d358:	4630      	mov	r0, r6
 800d35a:	f7ff ffda 	bl	800d312 <__sfputc_r>
 800d35e:	1c43      	adds	r3, r0, #1
 800d360:	d1f3      	bne.n	800d34a <__sfputs_r+0xa>
 800d362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d364 <_vfiprintf_r>:
 800d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	460d      	mov	r5, r1
 800d36a:	b09d      	sub	sp, #116	@ 0x74
 800d36c:	4614      	mov	r4, r2
 800d36e:	4698      	mov	r8, r3
 800d370:	4606      	mov	r6, r0
 800d372:	b118      	cbz	r0, 800d37c <_vfiprintf_r+0x18>
 800d374:	6a03      	ldr	r3, [r0, #32]
 800d376:	b90b      	cbnz	r3, 800d37c <_vfiprintf_r+0x18>
 800d378:	f7fe f8b6 	bl	800b4e8 <__sinit>
 800d37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d37e:	07d9      	lsls	r1, r3, #31
 800d380:	d405      	bmi.n	800d38e <_vfiprintf_r+0x2a>
 800d382:	89ab      	ldrh	r3, [r5, #12]
 800d384:	059a      	lsls	r2, r3, #22
 800d386:	d402      	bmi.n	800d38e <_vfiprintf_r+0x2a>
 800d388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d38a:	f7fe fa0e 	bl	800b7aa <__retarget_lock_acquire_recursive>
 800d38e:	89ab      	ldrh	r3, [r5, #12]
 800d390:	071b      	lsls	r3, r3, #28
 800d392:	d501      	bpl.n	800d398 <_vfiprintf_r+0x34>
 800d394:	692b      	ldr	r3, [r5, #16]
 800d396:	b99b      	cbnz	r3, 800d3c0 <_vfiprintf_r+0x5c>
 800d398:	4629      	mov	r1, r5
 800d39a:	4630      	mov	r0, r6
 800d39c:	f000 f938 	bl	800d610 <__swsetup_r>
 800d3a0:	b170      	cbz	r0, 800d3c0 <_vfiprintf_r+0x5c>
 800d3a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3a4:	07dc      	lsls	r4, r3, #31
 800d3a6:	d504      	bpl.n	800d3b2 <_vfiprintf_r+0x4e>
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ac:	b01d      	add	sp, #116	@ 0x74
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	89ab      	ldrh	r3, [r5, #12]
 800d3b4:	0598      	lsls	r0, r3, #22
 800d3b6:	d4f7      	bmi.n	800d3a8 <_vfiprintf_r+0x44>
 800d3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3ba:	f7fe f9f7 	bl	800b7ac <__retarget_lock_release_recursive>
 800d3be:	e7f3      	b.n	800d3a8 <_vfiprintf_r+0x44>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c4:	2320      	movs	r3, #32
 800d3c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ce:	2330      	movs	r3, #48	@ 0x30
 800d3d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d580 <_vfiprintf_r+0x21c>
 800d3d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3d8:	f04f 0901 	mov.w	r9, #1
 800d3dc:	4623      	mov	r3, r4
 800d3de:	469a      	mov	sl, r3
 800d3e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e4:	b10a      	cbz	r2, 800d3ea <_vfiprintf_r+0x86>
 800d3e6:	2a25      	cmp	r2, #37	@ 0x25
 800d3e8:	d1f9      	bne.n	800d3de <_vfiprintf_r+0x7a>
 800d3ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d3ee:	d00b      	beq.n	800d408 <_vfiprintf_r+0xa4>
 800d3f0:	465b      	mov	r3, fp
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f7ff ffa2 	bl	800d340 <__sfputs_r>
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	f000 80a7 	beq.w	800d550 <_vfiprintf_r+0x1ec>
 800d402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d404:	445a      	add	r2, fp
 800d406:	9209      	str	r2, [sp, #36]	@ 0x24
 800d408:	f89a 3000 	ldrb.w	r3, [sl]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 809f 	beq.w	800d550 <_vfiprintf_r+0x1ec>
 800d412:	2300      	movs	r3, #0
 800d414:	f04f 32ff 	mov.w	r2, #4294967295
 800d418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d41c:	f10a 0a01 	add.w	sl, sl, #1
 800d420:	9304      	str	r3, [sp, #16]
 800d422:	9307      	str	r3, [sp, #28]
 800d424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d428:	931a      	str	r3, [sp, #104]	@ 0x68
 800d42a:	4654      	mov	r4, sl
 800d42c:	2205      	movs	r2, #5
 800d42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d432:	4853      	ldr	r0, [pc, #332]	@ (800d580 <_vfiprintf_r+0x21c>)
 800d434:	f7f2 feec 	bl	8000210 <memchr>
 800d438:	9a04      	ldr	r2, [sp, #16]
 800d43a:	b9d8      	cbnz	r0, 800d474 <_vfiprintf_r+0x110>
 800d43c:	06d1      	lsls	r1, r2, #27
 800d43e:	bf44      	itt	mi
 800d440:	2320      	movmi	r3, #32
 800d442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d446:	0713      	lsls	r3, r2, #28
 800d448:	bf44      	itt	mi
 800d44a:	232b      	movmi	r3, #43	@ 0x2b
 800d44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d450:	f89a 3000 	ldrb.w	r3, [sl]
 800d454:	2b2a      	cmp	r3, #42	@ 0x2a
 800d456:	d015      	beq.n	800d484 <_vfiprintf_r+0x120>
 800d458:	9a07      	ldr	r2, [sp, #28]
 800d45a:	4654      	mov	r4, sl
 800d45c:	2000      	movs	r0, #0
 800d45e:	f04f 0c0a 	mov.w	ip, #10
 800d462:	4621      	mov	r1, r4
 800d464:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d468:	3b30      	subs	r3, #48	@ 0x30
 800d46a:	2b09      	cmp	r3, #9
 800d46c:	d94b      	bls.n	800d506 <_vfiprintf_r+0x1a2>
 800d46e:	b1b0      	cbz	r0, 800d49e <_vfiprintf_r+0x13a>
 800d470:	9207      	str	r2, [sp, #28]
 800d472:	e014      	b.n	800d49e <_vfiprintf_r+0x13a>
 800d474:	eba0 0308 	sub.w	r3, r0, r8
 800d478:	fa09 f303 	lsl.w	r3, r9, r3
 800d47c:	4313      	orrs	r3, r2
 800d47e:	9304      	str	r3, [sp, #16]
 800d480:	46a2      	mov	sl, r4
 800d482:	e7d2      	b.n	800d42a <_vfiprintf_r+0xc6>
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	1d19      	adds	r1, r3, #4
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	9103      	str	r1, [sp, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	bfbb      	ittet	lt
 800d490:	425b      	neglt	r3, r3
 800d492:	f042 0202 	orrlt.w	r2, r2, #2
 800d496:	9307      	strge	r3, [sp, #28]
 800d498:	9307      	strlt	r3, [sp, #28]
 800d49a:	bfb8      	it	lt
 800d49c:	9204      	strlt	r2, [sp, #16]
 800d49e:	7823      	ldrb	r3, [r4, #0]
 800d4a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4a2:	d10a      	bne.n	800d4ba <_vfiprintf_r+0x156>
 800d4a4:	7863      	ldrb	r3, [r4, #1]
 800d4a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4a8:	d132      	bne.n	800d510 <_vfiprintf_r+0x1ac>
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	1d1a      	adds	r2, r3, #4
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	9203      	str	r2, [sp, #12]
 800d4b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4b6:	3402      	adds	r4, #2
 800d4b8:	9305      	str	r3, [sp, #20]
 800d4ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d590 <_vfiprintf_r+0x22c>
 800d4be:	7821      	ldrb	r1, [r4, #0]
 800d4c0:	2203      	movs	r2, #3
 800d4c2:	4650      	mov	r0, sl
 800d4c4:	f7f2 fea4 	bl	8000210 <memchr>
 800d4c8:	b138      	cbz	r0, 800d4da <_vfiprintf_r+0x176>
 800d4ca:	9b04      	ldr	r3, [sp, #16]
 800d4cc:	eba0 000a 	sub.w	r0, r0, sl
 800d4d0:	2240      	movs	r2, #64	@ 0x40
 800d4d2:	4082      	lsls	r2, r0
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	3401      	adds	r4, #1
 800d4d8:	9304      	str	r3, [sp, #16]
 800d4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4de:	4829      	ldr	r0, [pc, #164]	@ (800d584 <_vfiprintf_r+0x220>)
 800d4e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4e4:	2206      	movs	r2, #6
 800d4e6:	f7f2 fe93 	bl	8000210 <memchr>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d03f      	beq.n	800d56e <_vfiprintf_r+0x20a>
 800d4ee:	4b26      	ldr	r3, [pc, #152]	@ (800d588 <_vfiprintf_r+0x224>)
 800d4f0:	bb1b      	cbnz	r3, 800d53a <_vfiprintf_r+0x1d6>
 800d4f2:	9b03      	ldr	r3, [sp, #12]
 800d4f4:	3307      	adds	r3, #7
 800d4f6:	f023 0307 	bic.w	r3, r3, #7
 800d4fa:	3308      	adds	r3, #8
 800d4fc:	9303      	str	r3, [sp, #12]
 800d4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d500:	443b      	add	r3, r7
 800d502:	9309      	str	r3, [sp, #36]	@ 0x24
 800d504:	e76a      	b.n	800d3dc <_vfiprintf_r+0x78>
 800d506:	fb0c 3202 	mla	r2, ip, r2, r3
 800d50a:	460c      	mov	r4, r1
 800d50c:	2001      	movs	r0, #1
 800d50e:	e7a8      	b.n	800d462 <_vfiprintf_r+0xfe>
 800d510:	2300      	movs	r3, #0
 800d512:	3401      	adds	r4, #1
 800d514:	9305      	str	r3, [sp, #20]
 800d516:	4619      	mov	r1, r3
 800d518:	f04f 0c0a 	mov.w	ip, #10
 800d51c:	4620      	mov	r0, r4
 800d51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d522:	3a30      	subs	r2, #48	@ 0x30
 800d524:	2a09      	cmp	r2, #9
 800d526:	d903      	bls.n	800d530 <_vfiprintf_r+0x1cc>
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d0c6      	beq.n	800d4ba <_vfiprintf_r+0x156>
 800d52c:	9105      	str	r1, [sp, #20]
 800d52e:	e7c4      	b.n	800d4ba <_vfiprintf_r+0x156>
 800d530:	fb0c 2101 	mla	r1, ip, r1, r2
 800d534:	4604      	mov	r4, r0
 800d536:	2301      	movs	r3, #1
 800d538:	e7f0      	b.n	800d51c <_vfiprintf_r+0x1b8>
 800d53a:	ab03      	add	r3, sp, #12
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	462a      	mov	r2, r5
 800d540:	4b12      	ldr	r3, [pc, #72]	@ (800d58c <_vfiprintf_r+0x228>)
 800d542:	a904      	add	r1, sp, #16
 800d544:	4630      	mov	r0, r6
 800d546:	f7fd fb8d 	bl	800ac64 <_printf_float>
 800d54a:	4607      	mov	r7, r0
 800d54c:	1c78      	adds	r0, r7, #1
 800d54e:	d1d6      	bne.n	800d4fe <_vfiprintf_r+0x19a>
 800d550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d552:	07d9      	lsls	r1, r3, #31
 800d554:	d405      	bmi.n	800d562 <_vfiprintf_r+0x1fe>
 800d556:	89ab      	ldrh	r3, [r5, #12]
 800d558:	059a      	lsls	r2, r3, #22
 800d55a:	d402      	bmi.n	800d562 <_vfiprintf_r+0x1fe>
 800d55c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d55e:	f7fe f925 	bl	800b7ac <__retarget_lock_release_recursive>
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	065b      	lsls	r3, r3, #25
 800d566:	f53f af1f 	bmi.w	800d3a8 <_vfiprintf_r+0x44>
 800d56a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d56c:	e71e      	b.n	800d3ac <_vfiprintf_r+0x48>
 800d56e:	ab03      	add	r3, sp, #12
 800d570:	9300      	str	r3, [sp, #0]
 800d572:	462a      	mov	r2, r5
 800d574:	4b05      	ldr	r3, [pc, #20]	@ (800d58c <_vfiprintf_r+0x228>)
 800d576:	a904      	add	r1, sp, #16
 800d578:	4630      	mov	r0, r6
 800d57a:	f7fd fe0b 	bl	800b194 <_printf_i>
 800d57e:	e7e4      	b.n	800d54a <_vfiprintf_r+0x1e6>
 800d580:	0800e2c2 	.word	0x0800e2c2
 800d584:	0800e2cc 	.word	0x0800e2cc
 800d588:	0800ac65 	.word	0x0800ac65
 800d58c:	0800d341 	.word	0x0800d341
 800d590:	0800e2c8 	.word	0x0800e2c8

0800d594 <__swbuf_r>:
 800d594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d596:	460e      	mov	r6, r1
 800d598:	4614      	mov	r4, r2
 800d59a:	4605      	mov	r5, r0
 800d59c:	b118      	cbz	r0, 800d5a6 <__swbuf_r+0x12>
 800d59e:	6a03      	ldr	r3, [r0, #32]
 800d5a0:	b90b      	cbnz	r3, 800d5a6 <__swbuf_r+0x12>
 800d5a2:	f7fd ffa1 	bl	800b4e8 <__sinit>
 800d5a6:	69a3      	ldr	r3, [r4, #24]
 800d5a8:	60a3      	str	r3, [r4, #8]
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	071a      	lsls	r2, r3, #28
 800d5ae:	d501      	bpl.n	800d5b4 <__swbuf_r+0x20>
 800d5b0:	6923      	ldr	r3, [r4, #16]
 800d5b2:	b943      	cbnz	r3, 800d5c6 <__swbuf_r+0x32>
 800d5b4:	4621      	mov	r1, r4
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f000 f82a 	bl	800d610 <__swsetup_r>
 800d5bc:	b118      	cbz	r0, 800d5c6 <__swbuf_r+0x32>
 800d5be:	f04f 37ff 	mov.w	r7, #4294967295
 800d5c2:	4638      	mov	r0, r7
 800d5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	6922      	ldr	r2, [r4, #16]
 800d5ca:	1a98      	subs	r0, r3, r2
 800d5cc:	6963      	ldr	r3, [r4, #20]
 800d5ce:	b2f6      	uxtb	r6, r6
 800d5d0:	4283      	cmp	r3, r0
 800d5d2:	4637      	mov	r7, r6
 800d5d4:	dc05      	bgt.n	800d5e2 <__swbuf_r+0x4e>
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4628      	mov	r0, r5
 800d5da:	f7ff fda7 	bl	800d12c <_fflush_r>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d1ed      	bne.n	800d5be <__swbuf_r+0x2a>
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	60a3      	str	r3, [r4, #8]
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	6022      	str	r2, [r4, #0]
 800d5ee:	701e      	strb	r6, [r3, #0]
 800d5f0:	6962      	ldr	r2, [r4, #20]
 800d5f2:	1c43      	adds	r3, r0, #1
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d004      	beq.n	800d602 <__swbuf_r+0x6e>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	07db      	lsls	r3, r3, #31
 800d5fc:	d5e1      	bpl.n	800d5c2 <__swbuf_r+0x2e>
 800d5fe:	2e0a      	cmp	r6, #10
 800d600:	d1df      	bne.n	800d5c2 <__swbuf_r+0x2e>
 800d602:	4621      	mov	r1, r4
 800d604:	4628      	mov	r0, r5
 800d606:	f7ff fd91 	bl	800d12c <_fflush_r>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d0d9      	beq.n	800d5c2 <__swbuf_r+0x2e>
 800d60e:	e7d6      	b.n	800d5be <__swbuf_r+0x2a>

0800d610 <__swsetup_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4b29      	ldr	r3, [pc, #164]	@ (800d6b8 <__swsetup_r+0xa8>)
 800d614:	4605      	mov	r5, r0
 800d616:	6818      	ldr	r0, [r3, #0]
 800d618:	460c      	mov	r4, r1
 800d61a:	b118      	cbz	r0, 800d624 <__swsetup_r+0x14>
 800d61c:	6a03      	ldr	r3, [r0, #32]
 800d61e:	b90b      	cbnz	r3, 800d624 <__swsetup_r+0x14>
 800d620:	f7fd ff62 	bl	800b4e8 <__sinit>
 800d624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d628:	0719      	lsls	r1, r3, #28
 800d62a:	d422      	bmi.n	800d672 <__swsetup_r+0x62>
 800d62c:	06da      	lsls	r2, r3, #27
 800d62e:	d407      	bmi.n	800d640 <__swsetup_r+0x30>
 800d630:	2209      	movs	r2, #9
 800d632:	602a      	str	r2, [r5, #0]
 800d634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d638:	81a3      	strh	r3, [r4, #12]
 800d63a:	f04f 30ff 	mov.w	r0, #4294967295
 800d63e:	e033      	b.n	800d6a8 <__swsetup_r+0x98>
 800d640:	0758      	lsls	r0, r3, #29
 800d642:	d512      	bpl.n	800d66a <__swsetup_r+0x5a>
 800d644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d646:	b141      	cbz	r1, 800d65a <__swsetup_r+0x4a>
 800d648:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d64c:	4299      	cmp	r1, r3
 800d64e:	d002      	beq.n	800d656 <__swsetup_r+0x46>
 800d650:	4628      	mov	r0, r5
 800d652:	f7fe ff15 	bl	800c480 <_free_r>
 800d656:	2300      	movs	r3, #0
 800d658:	6363      	str	r3, [r4, #52]	@ 0x34
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	2300      	movs	r3, #0
 800d664:	6063      	str	r3, [r4, #4]
 800d666:	6923      	ldr	r3, [r4, #16]
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f043 0308 	orr.w	r3, r3, #8
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	6923      	ldr	r3, [r4, #16]
 800d674:	b94b      	cbnz	r3, 800d68a <__swsetup_r+0x7a>
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d67c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d680:	d003      	beq.n	800d68a <__swsetup_r+0x7a>
 800d682:	4621      	mov	r1, r4
 800d684:	4628      	mov	r0, r5
 800d686:	f000 f883 	bl	800d790 <__smakebuf_r>
 800d68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d68e:	f013 0201 	ands.w	r2, r3, #1
 800d692:	d00a      	beq.n	800d6aa <__swsetup_r+0x9a>
 800d694:	2200      	movs	r2, #0
 800d696:	60a2      	str	r2, [r4, #8]
 800d698:	6962      	ldr	r2, [r4, #20]
 800d69a:	4252      	negs	r2, r2
 800d69c:	61a2      	str	r2, [r4, #24]
 800d69e:	6922      	ldr	r2, [r4, #16]
 800d6a0:	b942      	cbnz	r2, 800d6b4 <__swsetup_r+0xa4>
 800d6a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d6a6:	d1c5      	bne.n	800d634 <__swsetup_r+0x24>
 800d6a8:	bd38      	pop	{r3, r4, r5, pc}
 800d6aa:	0799      	lsls	r1, r3, #30
 800d6ac:	bf58      	it	pl
 800d6ae:	6962      	ldrpl	r2, [r4, #20]
 800d6b0:	60a2      	str	r2, [r4, #8]
 800d6b2:	e7f4      	b.n	800d69e <__swsetup_r+0x8e>
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	e7f7      	b.n	800d6a8 <__swsetup_r+0x98>
 800d6b8:	20000080 	.word	0x20000080

0800d6bc <_raise_r>:
 800d6bc:	291f      	cmp	r1, #31
 800d6be:	b538      	push	{r3, r4, r5, lr}
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	d904      	bls.n	800d6d0 <_raise_r+0x14>
 800d6c6:	2316      	movs	r3, #22
 800d6c8:	6003      	str	r3, [r0, #0]
 800d6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ce:	bd38      	pop	{r3, r4, r5, pc}
 800d6d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d6d2:	b112      	cbz	r2, 800d6da <_raise_r+0x1e>
 800d6d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6d8:	b94b      	cbnz	r3, 800d6ee <_raise_r+0x32>
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f000 f830 	bl	800d740 <_getpid_r>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4601      	mov	r1, r0
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ea:	f000 b817 	b.w	800d71c <_kill_r>
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d00a      	beq.n	800d708 <_raise_r+0x4c>
 800d6f2:	1c59      	adds	r1, r3, #1
 800d6f4:	d103      	bne.n	800d6fe <_raise_r+0x42>
 800d6f6:	2316      	movs	r3, #22
 800d6f8:	6003      	str	r3, [r0, #0]
 800d6fa:	2001      	movs	r0, #1
 800d6fc:	e7e7      	b.n	800d6ce <_raise_r+0x12>
 800d6fe:	2100      	movs	r1, #0
 800d700:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d704:	4620      	mov	r0, r4
 800d706:	4798      	blx	r3
 800d708:	2000      	movs	r0, #0
 800d70a:	e7e0      	b.n	800d6ce <_raise_r+0x12>

0800d70c <raise>:
 800d70c:	4b02      	ldr	r3, [pc, #8]	@ (800d718 <raise+0xc>)
 800d70e:	4601      	mov	r1, r0
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	f7ff bfd3 	b.w	800d6bc <_raise_r>
 800d716:	bf00      	nop
 800d718:	20000080 	.word	0x20000080

0800d71c <_kill_r>:
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	4d07      	ldr	r5, [pc, #28]	@ (800d73c <_kill_r+0x20>)
 800d720:	2300      	movs	r3, #0
 800d722:	4604      	mov	r4, r0
 800d724:	4608      	mov	r0, r1
 800d726:	4611      	mov	r1, r2
 800d728:	602b      	str	r3, [r5, #0]
 800d72a:	f7f7 f8a7 	bl	800487c <_kill>
 800d72e:	1c43      	adds	r3, r0, #1
 800d730:	d102      	bne.n	800d738 <_kill_r+0x1c>
 800d732:	682b      	ldr	r3, [r5, #0]
 800d734:	b103      	cbz	r3, 800d738 <_kill_r+0x1c>
 800d736:	6023      	str	r3, [r4, #0]
 800d738:	bd38      	pop	{r3, r4, r5, pc}
 800d73a:	bf00      	nop
 800d73c:	20000f18 	.word	0x20000f18

0800d740 <_getpid_r>:
 800d740:	f7f7 b894 	b.w	800486c <_getpid>

0800d744 <__swhatbuf_r>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	460c      	mov	r4, r1
 800d748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d74c:	2900      	cmp	r1, #0
 800d74e:	b096      	sub	sp, #88	@ 0x58
 800d750:	4615      	mov	r5, r2
 800d752:	461e      	mov	r6, r3
 800d754:	da0d      	bge.n	800d772 <__swhatbuf_r+0x2e>
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d75c:	f04f 0100 	mov.w	r1, #0
 800d760:	bf14      	ite	ne
 800d762:	2340      	movne	r3, #64	@ 0x40
 800d764:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d768:	2000      	movs	r0, #0
 800d76a:	6031      	str	r1, [r6, #0]
 800d76c:	602b      	str	r3, [r5, #0]
 800d76e:	b016      	add	sp, #88	@ 0x58
 800d770:	bd70      	pop	{r4, r5, r6, pc}
 800d772:	466a      	mov	r2, sp
 800d774:	f000 f848 	bl	800d808 <_fstat_r>
 800d778:	2800      	cmp	r0, #0
 800d77a:	dbec      	blt.n	800d756 <__swhatbuf_r+0x12>
 800d77c:	9901      	ldr	r1, [sp, #4]
 800d77e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d782:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d786:	4259      	negs	r1, r3
 800d788:	4159      	adcs	r1, r3
 800d78a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d78e:	e7eb      	b.n	800d768 <__swhatbuf_r+0x24>

0800d790 <__smakebuf_r>:
 800d790:	898b      	ldrh	r3, [r1, #12]
 800d792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d794:	079d      	lsls	r5, r3, #30
 800d796:	4606      	mov	r6, r0
 800d798:	460c      	mov	r4, r1
 800d79a:	d507      	bpl.n	800d7ac <__smakebuf_r+0x1c>
 800d79c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	6123      	str	r3, [r4, #16]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	6163      	str	r3, [r4, #20]
 800d7a8:	b003      	add	sp, #12
 800d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ac:	ab01      	add	r3, sp, #4
 800d7ae:	466a      	mov	r2, sp
 800d7b0:	f7ff ffc8 	bl	800d744 <__swhatbuf_r>
 800d7b4:	9f00      	ldr	r7, [sp, #0]
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7fe fed4 	bl	800c568 <_malloc_r>
 800d7c0:	b948      	cbnz	r0, 800d7d6 <__smakebuf_r+0x46>
 800d7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c6:	059a      	lsls	r2, r3, #22
 800d7c8:	d4ee      	bmi.n	800d7a8 <__smakebuf_r+0x18>
 800d7ca:	f023 0303 	bic.w	r3, r3, #3
 800d7ce:	f043 0302 	orr.w	r3, r3, #2
 800d7d2:	81a3      	strh	r3, [r4, #12]
 800d7d4:	e7e2      	b.n	800d79c <__smakebuf_r+0xc>
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	6020      	str	r0, [r4, #0]
 800d7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7de:	81a3      	strh	r3, [r4, #12]
 800d7e0:	9b01      	ldr	r3, [sp, #4]
 800d7e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7e6:	b15b      	cbz	r3, 800d800 <__smakebuf_r+0x70>
 800d7e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	f000 f81d 	bl	800d82c <_isatty_r>
 800d7f2:	b128      	cbz	r0, 800d800 <__smakebuf_r+0x70>
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	f023 0303 	bic.w	r3, r3, #3
 800d7fa:	f043 0301 	orr.w	r3, r3, #1
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	89a3      	ldrh	r3, [r4, #12]
 800d802:	431d      	orrs	r5, r3
 800d804:	81a5      	strh	r5, [r4, #12]
 800d806:	e7cf      	b.n	800d7a8 <__smakebuf_r+0x18>

0800d808 <_fstat_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4d07      	ldr	r5, [pc, #28]	@ (800d828 <_fstat_r+0x20>)
 800d80c:	2300      	movs	r3, #0
 800d80e:	4604      	mov	r4, r0
 800d810:	4608      	mov	r0, r1
 800d812:	4611      	mov	r1, r2
 800d814:	602b      	str	r3, [r5, #0]
 800d816:	f7f7 f891 	bl	800493c <_fstat>
 800d81a:	1c43      	adds	r3, r0, #1
 800d81c:	d102      	bne.n	800d824 <_fstat_r+0x1c>
 800d81e:	682b      	ldr	r3, [r5, #0]
 800d820:	b103      	cbz	r3, 800d824 <_fstat_r+0x1c>
 800d822:	6023      	str	r3, [r4, #0]
 800d824:	bd38      	pop	{r3, r4, r5, pc}
 800d826:	bf00      	nop
 800d828:	20000f18 	.word	0x20000f18

0800d82c <_isatty_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	4d06      	ldr	r5, [pc, #24]	@ (800d848 <_isatty_r+0x1c>)
 800d830:	2300      	movs	r3, #0
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	602b      	str	r3, [r5, #0]
 800d838:	f7f7 f890 	bl	800495c <_isatty>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_isatty_r+0x1a>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_isatty_r+0x1a>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	20000f18 	.word	0x20000f18

0800d84c <fmaxf>:
 800d84c:	b508      	push	{r3, lr}
 800d84e:	ed2d 8b02 	vpush	{d8}
 800d852:	eeb0 8a40 	vmov.f32	s16, s0
 800d856:	eef0 8a60 	vmov.f32	s17, s1
 800d85a:	f000 f831 	bl	800d8c0 <__fpclassifyf>
 800d85e:	b930      	cbnz	r0, 800d86e <fmaxf+0x22>
 800d860:	eeb0 8a68 	vmov.f32	s16, s17
 800d864:	eeb0 0a48 	vmov.f32	s0, s16
 800d868:	ecbd 8b02 	vpop	{d8}
 800d86c:	bd08      	pop	{r3, pc}
 800d86e:	eeb0 0a68 	vmov.f32	s0, s17
 800d872:	f000 f825 	bl	800d8c0 <__fpclassifyf>
 800d876:	2800      	cmp	r0, #0
 800d878:	d0f4      	beq.n	800d864 <fmaxf+0x18>
 800d87a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d882:	dded      	ble.n	800d860 <fmaxf+0x14>
 800d884:	e7ee      	b.n	800d864 <fmaxf+0x18>

0800d886 <fminf>:
 800d886:	b508      	push	{r3, lr}
 800d888:	ed2d 8b02 	vpush	{d8}
 800d88c:	eeb0 8a40 	vmov.f32	s16, s0
 800d890:	eef0 8a60 	vmov.f32	s17, s1
 800d894:	f000 f814 	bl	800d8c0 <__fpclassifyf>
 800d898:	b930      	cbnz	r0, 800d8a8 <fminf+0x22>
 800d89a:	eeb0 8a68 	vmov.f32	s16, s17
 800d89e:	eeb0 0a48 	vmov.f32	s0, s16
 800d8a2:	ecbd 8b02 	vpop	{d8}
 800d8a6:	bd08      	pop	{r3, pc}
 800d8a8:	eeb0 0a68 	vmov.f32	s0, s17
 800d8ac:	f000 f808 	bl	800d8c0 <__fpclassifyf>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d0f4      	beq.n	800d89e <fminf+0x18>
 800d8b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8bc:	d5ed      	bpl.n	800d89a <fminf+0x14>
 800d8be:	e7ee      	b.n	800d89e <fminf+0x18>

0800d8c0 <__fpclassifyf>:
 800d8c0:	ee10 3a10 	vmov	r3, s0
 800d8c4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800d8c8:	d00d      	beq.n	800d8e6 <__fpclassifyf+0x26>
 800d8ca:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800d8ce:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800d8d2:	d30a      	bcc.n	800d8ea <__fpclassifyf+0x2a>
 800d8d4:	4b07      	ldr	r3, [pc, #28]	@ (800d8f4 <__fpclassifyf+0x34>)
 800d8d6:	1e42      	subs	r2, r0, #1
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d908      	bls.n	800d8ee <__fpclassifyf+0x2e>
 800d8dc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800d8e0:	4258      	negs	r0, r3
 800d8e2:	4158      	adcs	r0, r3
 800d8e4:	4770      	bx	lr
 800d8e6:	2002      	movs	r0, #2
 800d8e8:	4770      	bx	lr
 800d8ea:	2004      	movs	r0, #4
 800d8ec:	4770      	bx	lr
 800d8ee:	2003      	movs	r0, #3
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	007ffffe 	.word	0x007ffffe

0800d8f8 <round>:
 800d8f8:	ec51 0b10 	vmov	r0, r1, d0
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d902:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800d906:	2a13      	cmp	r2, #19
 800d908:	460b      	mov	r3, r1
 800d90a:	4605      	mov	r5, r0
 800d90c:	dc1b      	bgt.n	800d946 <round+0x4e>
 800d90e:	2a00      	cmp	r2, #0
 800d910:	da0b      	bge.n	800d92a <round+0x32>
 800d912:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d916:	3201      	adds	r2, #1
 800d918:	bf04      	itt	eq
 800d91a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800d91e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800d922:	2200      	movs	r2, #0
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	e015      	b.n	800d956 <round+0x5e>
 800d92a:	4c15      	ldr	r4, [pc, #84]	@ (800d980 <round+0x88>)
 800d92c:	4114      	asrs	r4, r2
 800d92e:	ea04 0601 	and.w	r6, r4, r1
 800d932:	4306      	orrs	r6, r0
 800d934:	d00f      	beq.n	800d956 <round+0x5e>
 800d936:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800d93a:	fa41 f202 	asr.w	r2, r1, r2
 800d93e:	4413      	add	r3, r2
 800d940:	ea23 0304 	bic.w	r3, r3, r4
 800d944:	e7ed      	b.n	800d922 <round+0x2a>
 800d946:	2a33      	cmp	r2, #51	@ 0x33
 800d948:	dd08      	ble.n	800d95c <round+0x64>
 800d94a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800d94e:	d102      	bne.n	800d956 <round+0x5e>
 800d950:	4602      	mov	r2, r0
 800d952:	f7f2 fcbb 	bl	80002cc <__adddf3>
 800d956:	ec41 0b10 	vmov	d0, r0, r1
 800d95a:	bd70      	pop	{r4, r5, r6, pc}
 800d95c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800d960:	f04f 34ff 	mov.w	r4, #4294967295
 800d964:	40f4      	lsrs	r4, r6
 800d966:	4204      	tst	r4, r0
 800d968:	d0f5      	beq.n	800d956 <round+0x5e>
 800d96a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800d96e:	2201      	movs	r2, #1
 800d970:	408a      	lsls	r2, r1
 800d972:	1952      	adds	r2, r2, r5
 800d974:	bf28      	it	cs
 800d976:	3301      	addcs	r3, #1
 800d978:	ea22 0204 	bic.w	r2, r2, r4
 800d97c:	e7d2      	b.n	800d924 <round+0x2c>
 800d97e:	bf00      	nop
 800d980:	000fffff 	.word	0x000fffff

0800d984 <_init>:
 800d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d986:	bf00      	nop
 800d988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d98a:	bc08      	pop	{r3}
 800d98c:	469e      	mov	lr, r3
 800d98e:	4770      	bx	lr

0800d990 <_fini>:
 800d990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d992:	bf00      	nop
 800d994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d996:	bc08      	pop	{r3}
 800d998:	469e      	mov	lr, r3
 800d99a:	4770      	bx	lr
